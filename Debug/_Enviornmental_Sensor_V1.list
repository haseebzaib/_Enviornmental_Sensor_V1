
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f9e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  0801fb80  0801fb80  0002fb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021ed8  08021ed8  00040350  2**0
                  CONTENTS
  4 .ARM          00000008  08021ed8  08021ed8  00031ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021ee0  08021ee0  00040350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021ee0  08021ee0  00031ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021ee4  08021ee4  00031ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08021ee8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003304  20000350  08022238  00040350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003654  08022238  00043654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037dbc  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008130  00000000  00000000  0007813c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de0  00000000  00000000  00080270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa0  00000000  00000000  00083050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f5f  00000000  00000000  00085af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f926  00000000  00000000  000aba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b35c7  00000000  00000000  000eb375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e93c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d65c  00000000  00000000  0019e98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801fb68 	.word	0x0801fb68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0801fb68 	.word	0x0801fb68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  2.43f
#define battery_very_low 2.25f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <pir_interrupt>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;

//##############Interrupts###############
void pir_interrupt() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <pir_interrupt+0x2c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80010da:	2101      	movs	r1, #1
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <pir_interrupt+0x30>)
 80010de:	f004 fa2b 	bl	8005538 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <pir_interrupt+0x34>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 80010ee:	e002      	b.n	80010f6 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <pir_interrupt+0x34>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200014f5 	.word	0x200014f5
 8001100:	40020000 	.word	0x40020000
 8001104:	200014f4 	.word	0x200014f4

08001108 <timer_interrupt>:

void timer_interrupt() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <timer_interrupt+0x2c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <timer_interrupt+0x2c>)
 8001114:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <timer_interrupt+0x2c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d302      	bcc.n	8001126 <timer_interrupt+0x1e>
		time_keep = 0;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <timer_interrupt+0x2c>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001126:	f002 fa3b 	bl	80035a0 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	4a02      	ldr	r2, [pc, #8]	; (8001138 <timer_interrupt+0x30>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200014e8 	.word	0x200014e8
 8001138:	2000172c 	.word	0x2000172c

0800113c <power_off_detect>:

void power_off_detect() {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
 if(!HAL_GPIO_ReadPin(SW_DET_GPIO_Port,SW_DET_Pin))
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <power_off_detect+0x14>)
 8001146:	f004 f9f7 	bl	8005538 <HAL_GPIO_ReadPin>
 {
	//_RunTime_Packet.pwr_off_det = 1;
 }
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000

08001154 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void)
 {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_DMA_Init+0x3c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <MX_DMA_Init+0x3c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA2_Stream5_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2044      	movs	r0, #68	; 0x44
 800117c:	f002 fff3 	bl	8004166 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001180:	2044      	movs	r0, #68	; 0x44
 8001182:	f003 f80c 	bl	800419e <HAL_NVIC_EnableIRQ>

 }
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <pwr_off_detected>:

static void pwr_off_detected()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if(_RunTime_Packet.pwr_off_det)
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <pwr_off_detected+0x30>)
 800119a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00d      	beq.n	80011be <pwr_off_detected+0x2a>
	{
		_RunTime_Packet.pwr_off_det = 0;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <pwr_off_detected+0x30>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        BLUE_LED_PWM(900);
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <pwr_off_detected+0x34>)
 80011ac:	f44f 7161 	mov.w	r1, #900	; 0x384
 80011b0:	2008      	movs	r0, #8
 80011b2:	f7ff ff39 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 80011b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80011ba:	f002 f9fd 	bl	80035b8 <HAL_Delay>

	}
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200014a8 	.word	0x200014a8
 80011c8:	2000036c 	.word	0x2000036c

080011cc <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f019 ff24 	bl	801b028 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <clock_speed_slow+0xbc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a23      	ldr	r2, [pc, #140]	; (8001288 <clock_speed_slow+0xbc>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <clock_speed_slow+0xbc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <clock_speed_slow+0xc0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <clock_speed_slow+0xc0>)
 800121a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <clock_speed_slow+0xc0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800122c:	2306      	movs	r3, #6
 800122e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f006 fe01 	bl	8007e4c <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <clock_speed_slow+0x88>
		Error_Handler();
 8001250:	f001 fc42 	bl	8002ad8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f007 f864 	bl	800833c <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <clock_speed_slow+0xb2>
		Error_Handler();
 800127a:	f001 fc2d 	bl	8002ad8 <Error_Handler>
	}

}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <clock_speed_high+0x11c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a44      	ldr	r2, [pc, #272]	; (80013ac <clock_speed_high+0x11c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 80012aa:	bf00      	nop
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <clock_speed_high+0x11c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <clock_speed_high+0x36>
 80012b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f2      	bne.n	80012ac <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <clock_speed_high+0x11c>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <clock_speed_high+0x11c>)
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <clock_speed_high+0x11c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a35      	ldr	r2, [pc, #212]	; (80013ac <clock_speed_high+0x11c>)
 80012d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f019 fe9e 	bl	801b028 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <clock_speed_high+0x11c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <clock_speed_high+0x11c>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <clock_speed_high+0x11c>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <clock_speed_high+0x120>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <clock_speed_high+0x120>)
 8001326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <clock_speed_high+0x120>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001338:	2305      	movs	r3, #5
 800133a:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001350:	2319      	movs	r3, #25
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135a:	2304      	movs	r3, #4
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fd70 	bl	8007e4c <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <clock_speed_high+0xe6>
		Error_Handler();
 8001372:	f001 fbb1 	bl	8002ad8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f006 ffd2 	bl	800833c <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <clock_speed_high+0x112>
		Error_Handler();
 800139e:	f001 fb9b 	bl	8002ad8 <Error_Handler>
	}

}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <load_param+0x78>)
 80013bc:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d109      	bne.n	80013e2 <load_param+0x2e>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <load_param+0x7c>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f240 1397 	movw	r3, #407	; 0x197
 80013da:	461a      	mov	r2, r3
 80013dc:	f019 fdfc 	bl	801afd8 <memcpy>
 80013e0:	e008      	b.n	80013f4 <load_param+0x40>
	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <load_param+0x7c>)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <load_param+0x80>)
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f240 1397 	movw	r3, #407	; 0x197
 80013ee:	461a      	mov	r2, r3
 80013f0:	f019 fdf2 	bl	801afd8 <memcpy>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 80013f4:	4910      	ldr	r1, [pc, #64]	; (8001438 <load_param+0x84>)
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <load_param+0x88>)
 80013f8:	f01a fe51 	bl	801c09e <strstr>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <load_param+0x58>
		_RunTime_Packet.fileformat_selection = 1;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <load_param+0x8c>)
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 800140a:	e00a      	b.n	8001422 <load_param+0x6e>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 800140c:	490d      	ldr	r1, [pc, #52]	; (8001444 <load_param+0x90>)
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <load_param+0x88>)
 8001410:	f01a fe45 	bl	801c09e <strstr>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <load_param+0x6e>
		_RunTime_Packet.fileformat_selection = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <load_param+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08060000 	.word	0x08060000
 8001430:	20001310 	.word	0x20001310
 8001434:	08021390 	.word	0x08021390
 8001438:	0801fb80 	.word	0x0801fb80
 800143c:	20001374 	.word	0x20001374
 8001440:	200014a8 	.word	0x200014a8
 8001444:	0801fb88 	.word	0x0801fb88

08001448 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144e:	b672      	cpsid	i
}
 8001450:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <store_param+0xc0>)
 8001454:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001456:	f003 fb67 	bl	8004b28 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <store_param+0xc4>)
 800145c:	2201      	movs	r2, #1
 800145e:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <store_param+0xc4>)
 8001462:	2202      	movs	r2, #2
 8001464:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <store_param+0xc4>)
 8001468:	2210      	movs	r2, #16
 800146a:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <store_param+0xc4>)
 800146e:	2220      	movs	r2, #32
 8001470:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <store_param+0xc4>)
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <store_param+0xc4>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <store_param+0xc4>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <store_param+0xc8>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <store_param+0xc8>)
 800148e:	2202      	movs	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <store_param+0xc8>)
 8001494:	2207      	movs	r2, #7
 8001496:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <store_param+0xc8>)
 800149a:	2201      	movs	r2, #1
 800149c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <store_param+0xc8>)
 80014a4:	f003 fcbe 	bl	8004e24 <HAL_FLASHEx_Erase>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <store_param+0x6e>
		return HAL_FLASH_GetError();
 80014ae:	f003 fb6d 	bl	8004b8c <HAL_FLASH_GetError>
 80014b2:	4603      	mov	r3, r0
 80014b4:	e024      	b.n	8001500 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <store_param+0xcc>)
 80014b8:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <store_param+0xd0>)
 80014bc:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 80014be:	e016      	b.n	80014ee <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 80014c0:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	2002      	movs	r0, #2
 80014ca:	f003 fad9 	bl	8004a80 <HAL_FLASH_Program>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <store_param+0x9a>

		{
			WrAdr += 4;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3304      	adds	r3, #4
 80014d8:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3304      	adds	r3, #4
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e005      	b.n	80014ee <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 80014e2:	f003 fb43 	bl	8004b6c <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 80014e6:	f003 fb51 	bl	8004b8c <HAL_FLASH_GetError>
 80014ea:	4603      	mov	r3, r0
 80014ec:	e008      	b.n	8001500 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3e4      	bcc.n	80014c0 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 80014f6:	f003 fb39 	bl	8004b6c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80014fa:	b662      	cpsie	i
}
 80014fc:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 80014fe:	2300      	movs	r3, #0

}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20001310 	.word	0x20001310
 800150c:	40023c00 	.word	0x40023c00
 8001510:	20001748 	.word	0x20001748
 8001514:	08060197 	.word	0x08060197
 8001518:	08060000 	.word	0x08060000

0800151c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	if (save_param) {
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <save_data+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d022      	beq.n	800156e <save_data+0x52>
		if (start_timer) {
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <save_data+0x5c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <save_data+0x60>)
 8001532:	f008 ff4b 	bl	800a3cc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <save_data+0x60>)
 8001538:	f008 fee6 	bl	800a308 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <save_data+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <save_data+0x5c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <save_data+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001550:	d30d      	bcc.n	800156e <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <save_data+0x60>)
 8001554:	f008 ff3a 	bl	800a3cc <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 8001558:	f7ff ff76 	bl	8001448 <store_param>
			time_keep = 0;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <save_data+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
			save_param = 0;
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <save_data+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <save_data+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200014e5 	.word	0x200014e5
 8001578:	200014e6 	.word	0x200014e6
 800157c:	200018e4 	.word	0x200018e4
 8001580:	200014e8 	.word	0x200014e8

08001584 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	sensirion_i2c_hal_init();
 800158a:	f011 f92d 	bl	80127e8 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 800158e:	f010 ffdd 	bl	801254c <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001592:	f010 fe75 	bl	8012280 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 8001596:	f010 ff8d 	bl	80124b4 <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 800159a:	1cba      	adds	r2, r7, #2
 800159c:	1d39      	adds	r1, r7, #4
 800159e:	1dbb      	adds	r3, r7, #6
 80015a0:	4618      	mov	r0, r3
 80015a2:	f010 ff2f 	bl	8012404 <scd4x_get_serial_number>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <get_scd4x_measurement>:
static void get_scd4x_measurement() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b090      	sub	sp, #64	; 0x40
 80015b4:	af02      	add	r7, sp, #8
	int16_t error = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 80015ba:	f010 fdb1 	bl	8012120 <scd4x_start_periodic_measurement>
 80015be:	4603      	mov	r3, r0
 80015c0:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 80015c2:	483e      	ldr	r0, [pc, #248]	; (80016bc <get_scd4x_measurement+0x10c>)
 80015c4:	f011 f986 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 80015ce:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80015d2:	4618      	mov	r0, r3
 80015d4:	f010 feca 	bl	801236c <scd4x_get_data_ready_flag>
 80015d8:	4603      	mov	r3, r0
 80015da:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 80015dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d066      	beq.n	80016b2 <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 80015e4:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <get_scd4x_measurement+0x110>)
 80015e6:	4937      	ldr	r1, [pc, #220]	; (80016c4 <get_scd4x_measurement+0x114>)
 80015e8:	4837      	ldr	r0, [pc, #220]	; (80016c8 <get_scd4x_measurement+0x118>)
 80015ea:	f010 fe17 	bl	801221c <scd4x_read_measurement>
 80015ee:	4603      	mov	r3, r0
 80015f0:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <get_scd4x_measurement+0x118>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a35      	ldr	r2, [pc, #212]	; (80016cc <get_scd4x_measurement+0x11c>)
 80015f8:	fb82 1203 	smull	r1, r2, r2, r3
 80015fc:	1192      	asrs	r2, r2, #6
 80015fe:	17db      	asrs	r3, r3, #31
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001604:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <get_scd4x_measurement+0x11c>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	1192      	asrs	r2, r2, #6
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001618:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <get_scd4x_measurement+0x120>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d047      	beq.n	80016b2 <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 8001622:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001626:	2b00      	cmp	r3, #0
 8001628:	d013      	beq.n	8001652 <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 800162a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800162e:	463b      	mov	r3, r7
 8001630:	4928      	ldr	r1, [pc, #160]	; (80016d4 <get_scd4x_measurement+0x124>)
 8001632:	4618      	mov	r0, r3
 8001634:	f01a fcfe 	bl	801c034 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001638:	463b      	mov	r3, r7
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fdda 	bl	80001f4 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	4639      	mov	r1, r7
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	4823      	ldr	r0, [pc, #140]	; (80016d8 <get_scd4x_measurement+0x128>)
 800164c:	f009 fe7a 	bl	800b344 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 8001650:	e02f      	b.n	80016b2 <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d111      	bne.n	800167e <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800165a:	463b      	mov	r3, r7
 800165c:	491f      	ldr	r1, [pc, #124]	; (80016dc <get_scd4x_measurement+0x12c>)
 800165e:	4618      	mov	r0, r3
 8001660:	f01a fce8 	bl	801c034 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001664:	463b      	mov	r3, r7
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdc4 	bl	80001f4 <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4639      	mov	r1, r7
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <get_scd4x_measurement+0x128>)
 8001678:	f009 fe64 	bl	800b344 <HAL_UART_Transmit>
}
 800167c:	e019      	b.n	80016b2 <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001680:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 8001682:	4619      	mov	r1, r3
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <get_scd4x_measurement+0x118>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <get_scd4x_measurement+0x118>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4638      	mov	r0, r7
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	460a      	mov	r2, r1
 8001694:	4912      	ldr	r1, [pc, #72]	; (80016e0 <get_scd4x_measurement+0x130>)
 8001696:	f01a fccd 	bl	801c034 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800169a:	463b      	mov	r3, r7
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fda9 	bl	80001f4 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4639      	mov	r1, r7
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <get_scd4x_measurement+0x128>)
 80016ae:	f009 fe49 	bl	800b344 <HAL_UART_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	000186a0 	.word	0x000186a0
 80016c0:	200014b0 	.word	0x200014b0
 80016c4:	200014ac 	.word	0x200014ac
 80016c8:	200014a8 	.word	0x200014a8
 80016cc:	10624dd3 	.word	0x10624dd3
 80016d0:	200014e4 	.word	0x200014e4
 80016d4:	0801fb90 	.word	0x0801fb90
 80016d8:	200019d4 	.word	0x200019d4
 80016dc:	0801fbc0 	.word	0x0801fbc0
 80016e0:	0801fbe4 	.word	0x0801fbe4

080016e4 <init_sps30>:
static void init_sps30() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <init_sps30+0x34>)
 80016ec:	f011 fce6 	bl	80130bc <sensirion_sleep_usec>

	sensirion_uart_open();
 80016f0:	f011 fc2e 	bl	8012f50 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 fdff 	bl	80132fa <sps30_read_version>
 80016fc:	4603      	mov	r3, r0
 80016fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4618      	mov	r0, r3
 8001706:	f011 fced 	bl	80130e4 <sps30_get_serial>
 800170a:	4603      	mov	r3, r0
 800170c:	85fb      	strh	r3, [r7, #46]	; 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	000f4240 	.word	0x000f4240

0800171c <get_sps30_measurement>:
static void get_sps30_measurement() {
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b0a0      	sub	sp, #128	; 0x80
 8001722:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001724:	f011 fd0a 	bl	801313c <sps30_start_measurement>
 8001728:	4603      	mov	r3, r0
 800172a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800172e:	483a      	ldr	r0, [pc, #232]	; (8001818 <get_sps30_measurement+0xfc>)
 8001730:	f011 fd30 	bl	8013194 <sps30_read_measurement>
 8001734:	4603      	mov	r3, r0
 8001736:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <get_sps30_measurement+0xfc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a37      	ldr	r2, [pc, #220]	; (800181c <get_sps30_measurement+0x100>)
 8001740:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <get_sps30_measurement+0xfc>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a35      	ldr	r2, [pc, #212]	; (800181c <get_sps30_measurement+0x100>)
 8001748:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <get_sps30_measurement+0xfc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <get_sps30_measurement+0x100>)
 8001750:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <get_sps30_measurement+0xfc>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <get_sps30_measurement+0x100>)
 8001758:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800175a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800175e:	2b00      	cmp	r3, #0
 8001760:	db54      	blt.n	800180c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <get_sps30_measurement+0x104>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d050      	beq.n	800180c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800176a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800176e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001772:	b21b      	sxth	r3, r3
 8001774:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001778:	4293      	cmp	r3, r2
 800177a:	d113      	bne.n	80017a4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800177c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001780:	b2da      	uxtb	r2, r3
 8001782:	463b      	mov	r3, r7
 8001784:	4927      	ldr	r1, [pc, #156]	; (8001824 <get_sps30_measurement+0x108>)
 8001786:	4618      	mov	r0, r3
 8001788:	f01a fc54 	bl	801c034 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fd30 	bl	80001f4 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	b29a      	uxth	r2, r3
 8001798:	4639      	mov	r1, r7
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	4822      	ldr	r0, [pc, #136]	; (8001828 <get_sps30_measurement+0x10c>)
 80017a0:	f009 fdd0 	bl	800b344 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <get_sps30_measurement+0xfc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fee5 	bl	8000578 <__aeabi_f2d>
 80017ae:	4682      	mov	sl, r0
 80017b0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <get_sps30_measurement+0xfc>)
 80017b4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fede 	bl	8000578 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <get_sps30_measurement+0xfc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fed7 	bl	8000578 <__aeabi_f2d>
 80017ca:	4680      	mov	r8, r0
 80017cc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <get_sps30_measurement+0xfc>)
 80017d0:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fed0 	bl	8000578 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4638      	mov	r0, r7
 80017de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017e6:	e9cd 4500 	strd	r4, r5, [sp]
 80017ea:	4652      	mov	r2, sl
 80017ec:	465b      	mov	r3, fp
 80017ee:	490f      	ldr	r1, [pc, #60]	; (800182c <get_sps30_measurement+0x110>)
 80017f0:	f01a fc20 	bl	801c034 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80017f4:	463b      	mov	r3, r7
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fcfc 	bl	80001f4 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4639      	mov	r1, r7
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <get_sps30_measurement+0x10c>)
 8001808:	f009 fd9c 	bl	800b344 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800180c:	bf00      	nop
 800180e:	3768      	adds	r7, #104	; 0x68
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	20001704 	.word	0x20001704
 800181c:	200014a8 	.word	0x200014a8
 8001820:	200014e4 	.word	0x200014e4
 8001824:	0801fc14 	.word	0x0801fc14
 8001828:	200019d4 	.word	0x200019d4
 800182c:	0801fc48 	.word	0x0801fc48

08001830 <check_peripheral_error>:
static void check_peripheral_error() {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <check_peripheral_error+0x70>)
 8001836:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <check_peripheral_error+0x70>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 8001846:	f00e fd83 	bl	8010350 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <check_peripheral_error+0x70>)
 800184c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001850:	2b00      	cmp	r3, #0
 8001852:	d015      	beq.n	8001880 <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <check_peripheral_error+0x70>)
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001862:	4810      	ldr	r0, [pc, #64]	; (80018a4 <check_peripheral_error+0x74>)
 8001864:	f003 fe80 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186c:	f001 fea4 	bl	80035b8 <HAL_Delay>
		enable_5v();
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001876:	480b      	ldr	r0, [pc, #44]	; (80018a4 <check_peripheral_error+0x74>)
 8001878:	f003 fe76 	bl	8005568 <HAL_GPIO_WritePin>
		init_sps30();
 800187c:	f7ff ff32 	bl	80016e4 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	2205      	movs	r2, #5
 8001884:	21c4      	movs	r1, #196	; 0xc4
 8001886:	4808      	ldr	r0, [pc, #32]	; (80018a8 <check_peripheral_error+0x78>)
 8001888:	f004 fb52 	bl	8005f30 <HAL_I2C_IsDeviceReady>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <check_peripheral_error+0x70>)
 8001894:	2201      	movs	r2, #1
 8001896:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200014a8 	.word	0x200014a8
 80018a4:	40020400 	.word	0x40020400
 80018a8:	200017a4 	.word	0x200017a4

080018ac <sensor_calibration>:
static void sensor_calibration() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0




	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <sensor_calibration+0x48>)
 80018b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <sensor_calibration+0x24>
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <sensor_calibration+0x48>)
 80018bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <sensor_calibration+0x48>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		sps30_start_manual_fan_cleaning();
 80018cc:	f011 fd01 	bl	80132d2 <sps30_start_manual_fan_cleaning>
	}

	if (_RunTime_Packet.CO2_calibration) {
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <sensor_calibration+0x48>)
 80018d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <sensor_calibration+0x42>
		_RunTime_Packet.CO2_calibration = 0;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <sensor_calibration+0x48>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		scd4x_perform_forced_recalibration(
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <sensor_calibration+0x48>)
 80018e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80018e6:	4904      	ldr	r1, [pc, #16]	; (80018f8 <sensor_calibration+0x4c>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f010 fcf1 	bl	80122d0 <scd4x_perform_forced_recalibration>
	}




}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200014a8 	.word	0x200014a8
 80018f8:	200014de 	.word	0x200014de

080018fc <sleep>:
static void sleep() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(0);
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <sleep+0x88>)
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(0);
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <sleep+0x88>)
 8001908:	2200      	movs	r2, #0
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(0);
 800190c:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <sleep+0x8c>)
 800190e:	2100      	movs	r1, #0
 8001910:	2008      	movs	r0, #8
 8001912:	f7ff fb89 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001916:	481d      	ldr	r0, [pc, #116]	; (800198c <sleep+0x90>)
 8001918:	f001 fef9 	bl	800370e <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	220b      	movs	r2, #11
 8001922:	491b      	ldr	r1, [pc, #108]	; (8001990 <sleep+0x94>)
 8001924:	481b      	ldr	r0, [pc, #108]	; (8001994 <sleep+0x98>)
 8001926:	f009 fd0d 	bl	800b344 <HAL_UART_Transmit>
	disable_5v();
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001930:	4819      	ldr	r0, [pc, #100]	; (8001998 <sleep+0x9c>)
 8001932:	f003 fe19 	bl	8005568 <HAL_GPIO_WritePin>
	disable_motion();
 8001936:	2201      	movs	r2, #1
 8001938:	2102      	movs	r1, #2
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <sleep+0xa0>)
 800193c:	f003 fe14 	bl	8005568 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 8001940:	f010 fc9e 	bl	8012280 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 8001944:	f010 fddc 	bl	8012500 <scd4x_power_down>
	console_uart_deinit();
 8001948:	f00e fcf6 	bl	8010338 <console_uart_deinit>
	sensirion_i2c_hal_free();
 800194c:	f010 ff7e 	bl	801284c <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001950:	f011 fb3e 	bl	8012fd0 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001954:	f018 fcf2 	bl	801a33c <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <sleep+0xa4>)
 800195a:	f008 fc26 	bl	800a1aa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <sleep+0xa8>)
 8001960:	f008 fc23 	bl	800a1aa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <sleep+0xac>)
 8001966:	f008 fc20 	bl	800a1aa <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 800196a:	4810      	ldr	r0, [pc, #64]	; (80019ac <sleep+0xb0>)
 800196c:	f002 fcf2 	bl	8004354 <HAL_DMA_DeInit>




	clock_speed_slow();
 8001970:	f7ff fc2c 	bl	80011cc <clock_speed_slow>

	HAL_SuspendTick();
 8001974:	f001 fe44 	bl	8003600 <HAL_SuspendTick>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001978:	2101      	movs	r1, #1
 800197a:	2001      	movs	r0, #1
 800197c:	f006 fa3a 	bl	8007df4 <HAL_PWR_EnterSTOPMode>

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40000400 	.word	0x40000400
 8001988:	2000036c 	.word	0x2000036c
 800198c:	2000175c 	.word	0x2000175c
 8001990:	0801fc80 	.word	0x0801fc80
 8001994:	200019d4 	.word	0x200019d4
 8001998:	40020400 	.word	0x40020400
 800199c:	40020000 	.word	0x40020000
 80019a0:	2000189c 	.word	0x2000189c
 80019a4:	200018e4 	.word	0x200018e4
 80019a8:	2000192c 	.word	0x2000192c
 80019ac:	20001974 	.word	0x20001974

080019b0 <wakeup>:
static void wakeup() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 80019b4:	f001 fe34 	bl	8003620 <HAL_ResumeTick>
	clock_speed_high();
 80019b8:	f7ff fc6a 	bl	8001290 <clock_speed_high>
	enable_5v();
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c2:	4830      	ldr	r0, [pc, #192]	; (8001a84 <wakeup+0xd4>)
 80019c4:	f003 fdd0 	bl	8005568 <HAL_GPIO_WritePin>
	enable_motion();
 80019c8:	2200      	movs	r2, #0
 80019ca:	2102      	movs	r1, #2
 80019cc:	482e      	ldr	r0, [pc, #184]	; (8001a88 <wakeup+0xd8>)
 80019ce:	f003 fdcb 	bl	8005568 <HAL_GPIO_WritePin>
	console_uart_init();
 80019d2:	f00e fcbd 	bl	8010350 <console_uart_init>

	MX_DMA_Init();
 80019d6:	f7ff fbbd 	bl	8001154 <MX_DMA_Init>
	MX_TIM1_Init();
 80019da:	f000 fd7d 	bl	80024d8 <MX_TIM1_Init>
	MX_TIM2_Init();
 80019de:	f000 fdcb 	bl	8002578 <MX_TIM2_Init>
	MX_TIM3_Init();
 80019e2:	f000 fe17 	bl	8002614 <MX_TIM3_Init>


	init_scd4x_i2c();
 80019e6:	f7ff fdcd 	bl	8001584 <init_scd4x_i2c>
	MX_USB_DEVICE_Init(); //initialize usb anyways
 80019ea:	f018 fcb9 	bl	801a360 <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	4825      	ldr	r0, [pc, #148]	; (8001a88 <wakeup+0xd8>)
 80019f4:	f003 fda0 	bl	8005538 <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <wakeup+0x54>
		init_sps30();
 80019fe:	f7ff fe71 	bl	80016e4 <init_sps30>
 8001a02:	e00f      	b.n	8001a24 <wakeup+0x74>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <wakeup+0xdc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <wakeup+0xdc>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <wakeup+0xe0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001a1a:	f001 fdc1 	bl	80035a0 <HAL_GetTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <wakeup+0xe4>)
 8001a22:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <wakeup+0xe8>)
 8001a26:	f008 fc15 	bl	800a254 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001a2a:	491c      	ldr	r1, [pc, #112]	; (8001a9c <wakeup+0xec>)
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <wakeup+0xf0>)
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <wakeup+0xf4>)
 8001a34:	f002 fcec 	bl	8004410 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <wakeup+0xe8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <wakeup+0xe8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a46:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(0);
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <wakeup+0xec>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2008      	movs	r0, #8
 8001a4e:	f7ff faeb 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001a52:	2100      	movs	r1, #0
 8001a54:	4814      	ldr	r0, [pc, #80]	; (8001aa8 <wakeup+0xf8>)
 8001a56:	f008 fd41 	bl	800a4dc <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(0);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <wakeup+0xfc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001a60:	2104      	movs	r1, #4
 8001a62:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <wakeup+0xf8>)
 8001a64:	f008 fd3a 	bl	800a4dc <HAL_TIM_PWM_Start>
	RED_LED_PWM(0);
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <wakeup+0xfc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38


	pwr_off_detected();
 8001a6e:	f7ff fb91 	bl	8001194 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	220a      	movs	r2, #10
 8001a78:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <wakeup+0x100>)
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <wakeup+0x104>)
 8001a7c:	f009 fc62 	bl	800b344 <HAL_UART_Transmit>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	200014a8 	.word	0x200014a8
 8001a90:	200014f0 	.word	0x200014f0
 8001a94:	20001734 	.word	0x20001734
 8001a98:	2000189c 	.word	0x2000189c
 8001a9c:	2000036c 	.word	0x2000036c
 8001aa0:	40020418 	.word	0x40020418
 8001aa4:	20001974 	.word	0x20001974
 8001aa8:	2000192c 	.word	0x2000192c
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	0801fc8c 	.word	0x0801fc8c
 8001ab4:	200019d4 	.word	0x200019d4

08001ab8 <green_led_blink>:

static void green_led_blink() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(900);
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <green_led_blink+0x5c>)
 8001abe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac8:	f001 fd76 	bl	80035b8 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <green_led_blink+0x5c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad6:	f001 fd6f 	bl	80035b8 <HAL_Delay>

	GREEN_LED_PWM(900);
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <green_led_blink+0x5c>)
 8001adc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae6:	f001 fd67 	bl	80035b8 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <green_led_blink+0x5c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af4:	f001 fd60 	bl	80035b8 <HAL_Delay>

	GREEN_LED_PWM(900);
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <green_led_blink+0x5c>)
 8001afa:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b04:	f001 fd58 	bl	80035b8 <HAL_Delay>
	GREEN_LED_PWM(0);
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <green_led_blink+0x5c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40000400 	.word	0x40000400

08001b18 <led_awake_routine>:

static void led_awake_routine() {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0


if(_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001b1c:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001b1e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80b9 	bne.w	8001c9a <led_awake_routine+0x182>
{
	if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2c:	4863      	ldr	r0, [pc, #396]	; (8001cbc <led_awake_routine+0x1a4>)
 8001b2e:	f003 fd03 	bl	8005538 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <led_awake_routine+0x3a>
			{
		GREEN_LED_PWM(0);
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(0);
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(900);
 8001b44:	4a5f      	ldr	r2, [pc, #380]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001b46:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001b4a:	2008      	movs	r0, #8
 8001b4c:	f7ff fa6c 	bl	8001028 <setSoftPWM>
}
else
{
	RED_LED_PWM(red_led_pwm_val == 900 ? 0 : 900); //we toggle red led
}
}
 8001b50:	e0af      	b.n	8001cb2 <led_awake_routine+0x19a>
		BLUE_LED_PWM(0); //we turn off the blue led incase it was on before
 8001b52:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	2008      	movs	r0, #8
 8001b58:	f7ff fa66 	bl	8001028 <setSoftPWM>
		if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001b5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b62:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001cc8 <led_awake_routine+0x1b0>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	db0c      	blt.n	8001b8a <led_awake_routine+0x72>
			GREEN_LED_PWM(900);
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001b72:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
			RED_LED_PWM(0);
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
			BLUE_LED_PWM(0);
 8001b7e:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001b80:	2100      	movs	r1, #0
 8001b82:	2008      	movs	r0, #8
 8001b84:	f7ff fa50 	bl	8001028 <setSoftPWM>
}
 8001b88:	e093      	b.n	8001cb2 <led_awake_routine+0x19a>
			if (_RunTime_Packet.battery_voltage > battery_Low
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001b8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b90:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001ccc <led_awake_routine+0x1b4>
 8001b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	dd24      	ble.n	8001be8 <led_awake_routine+0xd0>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001ba0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001cc8 <led_awake_routine+0x1b0>
 8001ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d81a      	bhi.n	8001be8 <led_awake_routine+0xd0>
				RED_LED_PWM(0);
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(0);
 8001bb8:	4a42      	ldr	r2, [pc, #264]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2008      	movs	r0, #8
 8001bbe:	f7ff fa33 	bl	8001028 <setSoftPWM>
				green_led_pwm_val += 70;
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	3346      	adds	r3, #70	; 0x46
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001bcc:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd6:	d902      	bls.n	8001bde <led_awake_routine+0xc6>
					green_led_pwm_val = 0;
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001be0:	881a      	ldrh	r2, [r3, #0]
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	e064      	b.n	8001cb2 <led_awake_routine+0x19a>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001bea:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bee:	eeb0 7a02 	vmov.f32	s14, #2	; 0x40100000  2.250
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd33      	ble.n	8001c64 <led_awake_routine+0x14c>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <led_awake_routine+0x1a0>)
 8001bfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c02:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ccc <led_awake_routine+0x1b4>
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d829      	bhi.n	8001c64 <led_awake_routine+0x14c>
				BLUE_LED_PWM(0);
 8001c10:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	2008      	movs	r0, #8
 8001c16:	f7ff fa07 	bl	8001028 <setSoftPWM>
				green_led_pwm_val += 70;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	3346      	adds	r3, #70	; 0x46
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001c24:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2e:	d902      	bls.n	8001c36 <led_awake_routine+0x11e>
					green_led_pwm_val = 0;
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
				red_led_pwm_val += 70;
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3346      	adds	r3, #70	; 0x46
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c40:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4a:	d902      	bls.n	8001c52 <led_awake_routine+0x13a>
					red_led_pwm_val = 0;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <led_awake_routine+0x1b8>)
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
 8001c62:	e026      	b.n	8001cb2 <led_awake_routine+0x19a>
				GREEN_LED_PWM(0);
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
				BLUE_LED_PWM(0);
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <led_awake_routine+0x1ac>)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2008      	movs	r0, #8
 8001c70:	f7ff f9da 	bl	8001028 <setSoftPWM>
				red_led_pwm_val += 70;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	3346      	adds	r3, #70	; 0x46
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c7e:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c88:	d902      	bls.n	8001c90 <led_awake_routine+0x178>
					red_led_pwm_val = 0;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	801a      	strh	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c98:	e00b      	b.n	8001cb2 <led_awake_routine+0x19a>
	RED_LED_PWM(red_led_pwm_val == 900 ? 0 : 900); //we toggle red led
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <led_awake_routine+0x1bc>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001ca2:	d101      	bne.n	8001ca8 <led_awake_routine+0x190>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e001      	b.n	8001cac <led_awake_routine+0x194>
 8001ca8:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <led_awake_routine+0x1a8>)
 8001cae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cb0:	e7ff      	b.n	8001cb2 <led_awake_routine+0x19a>
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200014a8 	.word	0x200014a8
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	2000036c 	.word	0x2000036c
 8001cc8:	405147ae 	.word	0x405147ae
 8001ccc:	401b851f 	.word	0x401b851f
 8001cd0:	2000130c 	.word	0x2000130c
 8001cd4:	2000130e 	.word	0x2000130e

08001cd8 <ver_GetUid>:


static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001cde:	f001 fcbb 	bl	8003658 <HAL_GetUIDw1>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001ce8:	f001 fcb6 	bl	8003658 <HAL_GetUIDw1>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <ver_GetUid+0x8c>)
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001cf4:	4c1c      	ldr	r4, [pc, #112]	; (8001d68 <ver_GetUid+0x90>)
 8001cf6:	f001 fcbb 	bl	8003670 <HAL_GetUIDw2>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b23      	cmp	r3, #35	; 0x23
 8001d02:	d909      	bls.n	8001d18 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b3d      	cmp	r3, #61	; 0x3d
 8001d08:	bf28      	it	cs
 8001d0a:	233d      	movcs	r3, #61	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	333d      	adds	r3, #61	; 0x3d
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <ver_GetUid+0x8c>)
 8001d14:	71da      	strb	r2, [r3, #7]
 8001d16:	e00b      	b.n	8001d30 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	d901      	bls.n	8001d22 <ver_GetUid+0x4a>
 8001d1e:	2241      	movs	r2, #65	; 0x41
 8001d20:	e000      	b.n	8001d24 <ver_GetUid+0x4c>
 8001d22:	2230      	movs	r2, #48	; 0x30
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <ver_GetUid+0x8c>)
 8001d2e:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001d30:	f001 fc86 	bl	8003640 <HAL_GetUIDw0>
 8001d34:	4603      	mov	r3, r0
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <ver_GetUid+0x94>)
 8001d3e:	f010 f8bf 	bl	8011ec0 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001d42:	f001 fc7d 	bl	8003640 <HAL_GetUIDw0>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <ver_GetUid+0x98>)
 8001d4e:	f010 f8b7 	bl	8011ec0 <CharToHexasc>
	sUid[12] = 0;
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <ver_GetUid+0x8c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <ver_GetUid+0x8c>)
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20001738 	.word	0x20001738
 8001d68:	2000173b 	.word	0x2000173b
 8001d6c:	20001740 	.word	0x20001740
 8001d70:	20001742 	.word	0x20001742

08001d74 <app_main>:

void app_main() {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0

	uint8_t stop_measurement = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]
	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8001d7e:	223c      	movs	r2, #60	; 0x3c
 8001d80:	2100      	movs	r1, #0
 8001d82:	488a      	ldr	r0, [pc, #552]	; (8001fac <app_main+0x238>)
 8001d84:	f019 f950 	bl	801b028 <memset>

	load_param();
 8001d88:	f7ff fb14 	bl	80013b4 <load_param>

	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001d8c:	f018 fae8 	bl	801a360 <MX_USB_DEVICE_Init>
	prev_usb_time_ = HAL_GetTick();
 8001d90:	f001 fc06 	bl	80035a0 <HAL_GetTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a86      	ldr	r2, [pc, #536]	; (8001fb0 <app_main+0x23c>)
 8001d98:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9e:	4885      	ldr	r0, [pc, #532]	; (8001fb4 <app_main+0x240>)
 8001da0:	f003 fbca 	bl	8005538 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <app_main+0x3c>
		init_sps30();
 8001daa:	f7ff fc9b 	bl	80016e4 <init_sps30>
 8001dae:	e012      	b.n	8001dd6 <app_main+0x62>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8001db0:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <app_main+0x238>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 8001db8:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <app_main+0x238>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 8001dc0:	4b7a      	ldr	r3, [pc, #488]	; (8001fac <app_main+0x238>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 8001dc8:	4b78      	ldr	r3, [pc, #480]	; (8001fac <app_main+0x238>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001dd0:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <app_main+0x244>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 8001dd6:	f7ff fbd5 	bl	8001584 <init_scd4x_i2c>
	console_init();
 8001dda:	f00e faed 	bl	80103b8 <console_init>
	Rtc_set_alarm();
 8001dde:	f00f fef9 	bl	8011bd4 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8001de2:	f107 0318 	add.w	r3, r7, #24
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4874      	ldr	r0, [pc, #464]	; (8001fbc <app_main+0x248>)
 8001dec:	f006 ff66 	bl	8008cbc <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 8001df0:	7eba      	ldrb	r2, [r7, #26]
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <app_main+0x238>)
 8001df4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	//if this flag is -1 this means that file creation failed at the start of program because usb was connected
	//as accessing both usb and sdcard is not possible
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue
	_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8001df8:	4971      	ldr	r1, [pc, #452]	; (8001fc0 <app_main+0x24c>)
 8001dfa:	4872      	ldr	r0, [pc, #456]	; (8001fc4 <app_main+0x250>)
 8001dfc:	f018 fa34 	bl	801a268 <createfile>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b69      	ldr	r3, [pc, #420]	; (8001fac <app_main+0x238>)
 8001e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			_Flash_Packet.File_Format);

	HAL_TIM_Base_Start(&htim1);
 8001e0a:	486f      	ldr	r0, [pc, #444]	; (8001fc8 <app_main+0x254>)
 8001e0c:	f008 fa22 	bl	800a254 <HAL_TIM_Base_Start>
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001e10:	496e      	ldr	r1, [pc, #440]	; (8001fcc <app_main+0x258>)
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	4a6e      	ldr	r2, [pc, #440]	; (8001fd0 <app_main+0x25c>)
 8001e18:	486e      	ldr	r0, [pc, #440]	; (8001fd4 <app_main+0x260>)
 8001e1a:	f002 faf9 	bl	8004410 <HAL_DMA_Start>
				(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
				sizeof(dataA) / sizeof(dataA[0]));
		__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <app_main+0x254>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <app_main+0x254>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2c:	60da      	str	r2, [r3, #12]
		BLUE_LED_PWM(0);
 8001e2e:	4a67      	ldr	r2, [pc, #412]	; (8001fcc <app_main+0x258>)
 8001e30:	2100      	movs	r1, #0
 8001e32:	2008      	movs	r0, #8
 8001e34:	f7ff f8f8 	bl	8001028 <setSoftPWM>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <app_main+0x264>)
 8001e3c:	f008 fb4e 	bl	800a4dc <HAL_TIM_PWM_Start>
		GREEN_LED_PWM(0);
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <app_main+0x268>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001e46:	2104      	movs	r1, #4
 8001e48:	4863      	ldr	r0, [pc, #396]	; (8001fd8 <app_main+0x264>)
 8001e4a:	f008 fb47 	bl	800a4dc <HAL_TIM_PWM_Start>
		RED_LED_PWM(0);
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <app_main+0x268>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38

	green_led_blink();
 8001e54:	f7ff fe30 	bl	8001ab8 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8001e58:	23c8      	movs	r3, #200	; 0xc8
 8001e5a:	2215      	movs	r2, #21
 8001e5c:	4960      	ldr	r1, [pc, #384]	; (8001fe0 <app_main+0x26c>)
 8001e5e:	4861      	ldr	r0, [pc, #388]	; (8001fe4 <app_main+0x270>)
 8001e60:	f009 fa70 	bl	800b344 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8001e64:	f001 fb9c 	bl	80035a0 <HAL_GetTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	; (8001fe8 <app_main+0x274>)
 8001e6c:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8001e6e:	f001 fb97 	bl	80035a0 <HAL_GetTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a5d      	ldr	r2, [pc, #372]	; (8001fec <app_main+0x278>)
 8001e76:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	77fb      	strb	r3, [r7, #31]
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8001e7c:	e164      	b.n	8002148 <app_main+0x3d4>
		{

			if(hsd.ErrorCode != 0)
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <app_main+0x27c>)
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <app_main+0x128>
			{


				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
 8001e86:	485b      	ldr	r0, [pc, #364]	; (8001ff4 <app_main+0x280>)
 8001e88:	f7fe f9b4 	bl	80001f4 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e94:	4957      	ldr	r1, [pc, #348]	; (8001ff4 <app_main+0x280>)
 8001e96:	4853      	ldr	r0, [pc, #332]	; (8001fe4 <app_main+0x270>)
 8001e98:	f009 fa54 	bl	800b344 <HAL_UART_Transmit>

			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8001e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea0:	4844      	ldr	r0, [pc, #272]	; (8001fb4 <app_main+0x240>)
 8001ea2:	f003 fb49 	bl	8005538 <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <app_main+0x142>
					{
				prev_sleep_time = HAL_GetTick();
 8001eac:	f001 fb78 	bl	80035a0 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <app_main+0x274>)
 8001eb4:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	483f      	ldr	r0, [pc, #252]	; (8001fbc <app_main+0x248>)
 8001ebe:	f006 fe1b 	bl	8008af8 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	483c      	ldr	r0, [pc, #240]	; (8001fbc <app_main+0x248>)
 8001eca:	f006 fef7 	bl	8008cbc <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 8001ece:	78ba      	ldrb	r2, [r7, #2]
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <app_main+0x238>)
 8001ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			_RunTime_Packet.month= sDate.Month;
 8001ed6:	787a      	ldrb	r2, [r7, #1]
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <app_main+0x238>)
 8001eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			_RunTime_Packet.year = sDate.Year;
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <app_main+0x238>)
 8001ee2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			if (_RunTime_Packet.prev_day != sDate.Date) {
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <app_main+0x238>)
 8001ee8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001eec:	78bb      	ldrb	r3, [r7, #2]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d007      	beq.n	8001f02 <app_main+0x18e>
				_RunTime_Packet.day_changed = 1;
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <app_main+0x238>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 8001efa:	78ba      	ldrb	r2, [r7, #2]
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <app_main+0x238>)
 8001efe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 8001f02:	f7ff fc95 	bl	8001830 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <app_main+0x238>)
 8001f08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d104      	bne.n	8001f1a <app_main+0x1a6>
					|| _RunTime_Packet.usb_first_start) {
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <app_main+0x238>)
 8001f12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d045      	beq.n	8001fa6 <app_main+0x232>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <app_main+0x238>)
 8001f1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <app_main+0x1b8>
				{

					start_usb_timer = 1;
 8001f24:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <app_main+0x284>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e003      	b.n	8001f34 <app_main+0x1c0>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <app_main+0x238>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8001f34:	f001 fb34 	bl	80035a0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <app_main+0x23c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <app_main+0x288>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d329      	bcc.n	8001f9c <app_main+0x228>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <app_main+0x238>)
 8001f4a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f52:	d10d      	bne.n	8001f70 <app_main+0x1fc>
							&& _RunTime_Packet.usb_first_start) {
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <app_main+0x238>)
 8001f56:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <app_main+0x1fc>
						_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8001f5e:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <app_main+0x24c>)
 8001f60:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <app_main+0x250>)
 8001f62:	f018 f981 	bl	801a268 <createfile>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <app_main+0x238>)
 8001f6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <app_main+0x238>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <app_main+0x238>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <app_main+0x238>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <app_main+0x284>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8001f8e:	f7ff fba9 	bl	80016e4 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8001f92:	f001 fb05 	bl	80035a0 <HAL_GetTick>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <app_main+0x278>)
 8001f9a:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8001f9c:	f001 fb00 	bl	80035a0 <HAL_GetTick>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <app_main+0x274>)
 8001fa4:	6013      	str	r3, [r2, #0]
			}

			console_process();
 8001fa6:	f00e f9bb 	bl	8010320 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8001faa:	e03b      	b.n	8002024 <app_main+0x2b0>
 8001fac:	200014a8 	.word	0x200014a8
 8001fb0:	20001734 	.word	0x20001734
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	200014f0 	.word	0x200014f0
 8001fbc:	200017f8 	.word	0x200017f8
 8001fc0:	20001374 	.word	0x20001374
 8001fc4:	20001310 	.word	0x20001310
 8001fc8:	2000189c 	.word	0x2000189c
 8001fcc:	2000036c 	.word	0x2000036c
 8001fd0:	40020418 	.word	0x40020418
 8001fd4:	20001974 	.word	0x20001974
 8001fd8:	2000192c 	.word	0x2000192c
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	0801fc98 	.word	0x0801fc98
 8001fe4:	200019d4 	.word	0x200019d4
 8001fe8:	2000172c 	.word	0x2000172c
 8001fec:	20001730 	.word	0x20001730
 8001ff0:	20001818 	.word	0x20001818
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	200014ec 	.word	0x200014ec
 8001ffc:	20000044 	.word	0x20000044
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002000:	f00e f98e 	bl	8010320 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <app_main+0x468>)
 8002006:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <app_main+0x29e>
					get_scd4x_measurement();
 800200e:	f7ff facf 	bl	80015b0 <get_scd4x_measurement>
				}

				get_sps30_measurement();
 8002012:	f7ff fb83 	bl	800171c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002016:	4872      	ldr	r0, [pc, #456]	; (80021e0 <app_main+0x46c>)
 8002018:	f00f ffe6 	bl	8011fe8 <adc_Measure>
				led_awake_routine();
 800201c:	f7ff fd7c 	bl	8001b18 <led_awake_routine>
				pwr_off_detected();
 8002020:	f7ff f8b8 	bl	8001194 <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002024:	f001 fabc 	bl	80035a0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <app_main+0x470>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <app_main+0x474>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d809      	bhi.n	800204c <app_main+0x2d8>
					&& !_RunTime_Packet.usb_detection
 8002038:	4b68      	ldr	r3, [pc, #416]	; (80021dc <app_main+0x468>)
 800203a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <app_main+0x2d8>
					&& !_RunTime_Packet.usb_first_start)
 8002042:	4b66      	ldr	r3, [pc, #408]	; (80021dc <app_main+0x468>)
 8002044:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0d9      	beq.n	8002000 <app_main+0x28c>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 800204c:	f7ff fc2e 	bl	80018ac <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002050:	7ffb      	ldrb	r3, [r7, #31]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d017      	beq.n	8002086 <app_main+0x312>
 8002056:	4b61      	ldr	r3, [pc, #388]	; (80021dc <app_main+0x468>)
 8002058:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d112      	bne.n	8002086 <app_main+0x312>
					&& !_RunTime_Packet.usb_first_start
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <app_main+0x468>)
 8002062:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <app_main+0x312>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	485f      	ldr	r0, [pc, #380]	; (80021ec <app_main+0x478>)
 8002070:	f003 fa62 	bl	8005538 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <app_main+0x312>
							USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 800207a:	f010 f901 	bl	8012280 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 800207e:	f011 f875 	bl	801316c <sps30_stop_measurement>
				stop_measurement = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	77fb      	strb	r3, [r7, #31]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 8002086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208a:	4858      	ldr	r0, [pc, #352]	; (80021ec <app_main+0x478>)
 800208c:	f003 fa54 	bl	8005538 <HAL_GPIO_ReadPin>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d039      	beq.n	800210a <app_main+0x396>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection ) {
 8002096:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <app_main+0x47c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d035      	beq.n	800210a <app_main+0x396>
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <app_main+0x468>)
 80020a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d130      	bne.n	800210a <app_main+0x396>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <app_main+0x468>)
 80020aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <app_main+0x35e>
						|| _RunTime_Packet.filename_changed
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <app_main+0x468>)
 80020b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <app_main+0x35e>
						|| _RunTime_Packet.fileformat_changed || _RunTime_Packet.sd_file_creation == -1) {
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <app_main+0x468>)
 80020be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <app_main+0x35e>
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <app_main+0x468>)
 80020c8:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d114      	bne.n	80020fc <app_main+0x388>
					_RunTime_Packet.day_changed = 0;
 80020d2:	4b42      	ldr	r3, [pc, #264]	; (80021dc <app_main+0x468>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 80020da:	4b40      	ldr	r3, [pc, #256]	; (80021dc <app_main+0x468>)
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <app_main+0x468>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 80020ea:	4942      	ldr	r1, [pc, #264]	; (80021f4 <app_main+0x480>)
 80020ec:	4842      	ldr	r0, [pc, #264]	; (80021f8 <app_main+0x484>)
 80020ee:	f018 f8bb 	bl	801a268 <createfile>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <app_main+0x468>)
 80020f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
							_Flash_Packet.File_Format);
				}
				filesaving_process();
 80020fc:	f018 f89c 	bl	801a238 <filesaving_process>

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002100:	f001 fa4e 	bl	80035a0 <HAL_GetTick>
 8002104:	4603      	mov	r3, r0
 8002106:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <app_main+0x470>)
 8002108:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 800210a:	f00f fd63 	bl	8011bd4 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 800210e:	4834      	ldr	r0, [pc, #208]	; (80021e0 <app_main+0x46c>)
 8002110:	f00f ff6a 	bl	8011fe8 <adc_Measure>
			led_awake_routine();
 8002114:	f7ff fd00 	bl	8001b18 <led_awake_routine>
			save_data();
 8002118:	f7ff fa00 	bl	800151c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800211c:	2101      	movs	r1, #1
 800211e:	4833      	ldr	r0, [pc, #204]	; (80021ec <app_main+0x478>)
 8002120:	f003 fa0a 	bl	8005538 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <app_main+0x3c4>
				_RunTime_Packet.motion_detection = 1;
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <app_main+0x468>)
 800212c:	2201      	movs	r2, #1
 800212e:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <app_main+0x488>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e005      	b.n	8002144 <app_main+0x3d0>
			} else {
				_RunTime_Packet.motion_detection = 0;
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <app_main+0x468>)
 800213a:	2200      	movs	r2, #0
 800213c:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <app_main+0x488>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002144:	f7ff f826 	bl	8001194 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002148:	f001 fa2a 	bl	80035a0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <app_main+0x48c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <app_main+0x490>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	f67f ae90 	bls.w	8001e7e <app_main+0x10a>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <app_main+0x468>)
 8002160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <app_main+0x414>
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <app_main+0x468>)
 800216a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <app_main+0x414>
				|| _RunTime_Packet.fileformat_changed || _RunTime_Packet.sd_file_creation == -1) {
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <app_main+0x468>)
 8002174:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <app_main+0x414>
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <app_main+0x468>)
 800217e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d114      	bne.n	80021b2 <app_main+0x43e>
			_RunTime_Packet.day_changed = 0;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <app_main+0x468>)
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <app_main+0x468>)
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <app_main+0x468>)
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name, _Flash_Packet.File_Format);
 80021a0:	4914      	ldr	r1, [pc, #80]	; (80021f4 <app_main+0x480>)
 80021a2:	4815      	ldr	r0, [pc, #84]	; (80021f8 <app_main+0x484>)
 80021a4:	f018 f860 	bl	801a268 <createfile>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <app_main+0x468>)
 80021ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		filesaving_process();
 80021b2:	f018 f841 	bl	801a238 <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 80021b6:	f001 f9f3 	bl	80035a0 <HAL_GetTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <app_main+0x48c>)
 80021be:	6013      	str	r3, [r2, #0]


		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,USB_DETECT_Pin))
 80021c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <app_main+0x478>)
 80021c6:	f003 f9b7 	bl	8005538 <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f47f ae49 	bne.w	8001e64 <app_main+0xf0>
		 {

			sleep();
 80021d2:	f7ff fb93 	bl	80018fc <sleep>
		    wakeup();
 80021d6:	f7ff fbeb 	bl	80019b0 <wakeup>
		prev_sleep_time = HAL_GetTick();
 80021da:	e643      	b.n	8001e64 <app_main+0xf0>
 80021dc:	200014a8 	.word	0x200014a8
 80021e0:	200014c8 	.word	0x200014c8
 80021e4:	20001730 	.word	0x20001730
 80021e8:	20000040 	.word	0x20000040
 80021ec:	40020000 	.word	0x40020000
 80021f0:	20000061 	.word	0x20000061
 80021f4:	20001374 	.word	0x20001374
 80021f8:	20001310 	.word	0x20001310
 80021fc:	200014f5 	.word	0x200014f5
 8002200:	2000172c 	.word	0x2000172c
 8002204:	2000003c 	.word	0x2000003c

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220c:	f001 f962 	bl	80034d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002210:	f000 f81c 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//comment usb initialization from here
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002214:	f000 faf4 	bl	8002800 <MX_GPIO_Init>
  MX_DMA_Init();
 8002218:	f000 fad2 	bl	80027c0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800221c:	f000 f93c 	bl	8002498 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002220:	f000 fa7a 	bl	8002718 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002224:	f000 f900 	bl	8002428 <MX_RTC_Init>
  MX_I2C1_Init();
 8002228:	f000 f8d0 	bl	80023cc <MX_I2C1_Init>
  MX_TIM2_Init();
 800222c:	f000 f9a4 	bl	8002578 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002230:	f000 fa9c 	bl	800276c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002234:	f000 f878 	bl	8002328 <MX_ADC1_Init>
 // MX_USB_DEVICE_Init();
  MX_FATFS_Init();
 8002238:	f00f fb1c 	bl	8011874 <MX_FATFS_Init>
  MX_TIM1_Init();
 800223c:	f000 f94c 	bl	80024d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002240:	f000 f9e8 	bl	8002614 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_main(); //keep mx_usb_device_init off here
 8002244:	f7ff fd96 	bl	8001d74 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002248:	e7fe      	b.n	8002248 <main+0x40>
	...

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b094      	sub	sp, #80	; 0x50
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	2230      	movs	r2, #48	; 0x30
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f018 fee4 	bl	801b028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <SystemClock_Config+0xd4>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <SystemClock_Config+0xd4>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <SystemClock_Config+0xd4>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <SystemClock_Config+0xd8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <SystemClock_Config+0xd8>)
 800229a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <SystemClock_Config+0xd8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80022ac:	2305      	movs	r3, #5
 80022ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ba:	2302      	movs	r3, #2
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80022c4:	2319      	movs	r3, #25
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022ce:	2304      	movs	r3, #4
 80022d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022d2:	2307      	movs	r3, #7
 80022d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d6:	f107 0320 	add.w	r3, r7, #32
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 fdb6 	bl	8007e4c <HAL_RCC_OscConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80022e6:	f000 fbf7 	bl	8002ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f006 f818 	bl	800833c <HAL_RCC_ClockConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002312:	f000 fbe1 	bl	8002ad8 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	3750      	adds	r7, #80	; 0x50
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000

08002328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800232e:	463b      	mov	r3, r7
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <MX_ADC1_Init+0x98>)
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <MX_ADC1_Init+0x9c>)
 800233e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002346:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <MX_ADC1_Init+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002356:	2200      	movs	r2, #0
 8002358:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <MX_ADC1_Init+0x98>)
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002364:	2200      	movs	r2, #0
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MX_ADC1_Init+0x98>)
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <MX_ADC1_Init+0xa0>)
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002376:	2201      	movs	r2, #1
 8002378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_ADC1_Init+0x98>)
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_ADC1_Init+0x98>)
 8002384:	2201      	movs	r2, #1
 8002386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_ADC1_Init+0x98>)
 800238a:	f001 f97d 	bl	8003688 <HAL_ADC_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002394:	f000 fba0 	bl	8002ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002398:	230a      	movs	r3, #10
 800239a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800239c:	2301      	movs	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_ADC1_Init+0x98>)
 80023aa:	f001 fb63 	bl	8003a74 <HAL_ADC_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023b4:	f000 fb90 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000175c 	.word	0x2000175c
 80023c4:	40012000 	.word	0x40012000
 80023c8:	0f000001 	.word	0x0f000001

080023cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_I2C1_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <MX_I2C1_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_I2C1_Init+0x50>)
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_I2C1_Init+0x58>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_I2C1_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_I2C1_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_I2C1_Init+0x50>)
 80023ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <MX_I2C1_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_I2C1_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_I2C1_Init+0x50>)
 800240a:	f003 f8f9 	bl	8005600 <HAL_I2C_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002414:	f000 fb60 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200017a4 	.word	0x200017a4
 8002420:	40005400 	.word	0x40005400
 8002424:	00061a80 	.word	0x00061a80

08002428 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b090      	sub	sp, #64	; 0x40
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002442:	463b      	mov	r3, r7
 8002444:	2228      	movs	r2, #40	; 0x28
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f018 fded 	bl	801b028 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_RTC_Init+0x68>)
 8002450:	4a10      	ldr	r2, [pc, #64]	; (8002494 <MX_RTC_Init+0x6c>)
 8002452:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_RTC_Init+0x68>)
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <MX_RTC_Init+0x68>)
 800245c:	227f      	movs	r2, #127	; 0x7f
 800245e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_RTC_Init+0x68>)
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <MX_RTC_Init+0x68>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_RTC_Init+0x68>)
 800246e:	2200      	movs	r2, #0
 8002470:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <MX_RTC_Init+0x68>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_RTC_Init+0x68>)
 800247a:	f006 fa2d 	bl	80088d8 <HAL_RTC_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002484:	f000 fb28 	bl	8002ad8 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	3740      	adds	r7, #64	; 0x40
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200017f8 	.word	0x200017f8
 8002494:	40002800 	.word	0x40002800

08002498 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 800249e:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <MX_SDIO_SD_Init+0x3c>)
 80024a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <MX_SDIO_SD_Init+0x38>)
 80024c2:	2205      	movs	r2, #5
 80024c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	20001818 	.word	0x20001818
 80024d4:	40012c00 	.word	0x40012c00

080024d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <MX_TIM1_Init+0x98>)
 80024f6:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <MX_TIM1_Init+0x9c>)
 80024f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_TIM1_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_TIM1_Init+0x98>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_TIM1_Init+0x98>)
 8002508:	f240 32e7 	movw	r2, #999	; 0x3e7
 800250c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_TIM1_Init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_TIM1_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_TIM1_Init+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002520:	4813      	ldr	r0, [pc, #76]	; (8002570 <MX_TIM1_Init+0x98>)
 8002522:	f007 fdf3 	bl	800a10c <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800252c:	f000 fad4 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <MX_TIM1_Init+0x98>)
 800253e:	f008 fa47 	bl	800a9d0 <HAL_TIM_ConfigClockSource>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002548:	f000 fac6 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800254c:	2320      	movs	r3, #32
 800254e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002554:	463b      	mov	r3, r7
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_TIM1_Init+0x98>)
 800255a:	f008 fdf5 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002564:	f000 fab8 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000189c 	.word	0x2000189c
 8002574:	40010000 	.word	0x40010000

08002578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	463b      	mov	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <MX_TIM2_Init+0x98>)
 8002596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800259a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <MX_TIM2_Init+0x98>)
 800259e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_TIM2_Init+0x98>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <MX_TIM2_Init+0x98>)
 80025ac:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80025b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_TIM2_Init+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_TIM2_Init+0x98>)
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025be:	4814      	ldr	r0, [pc, #80]	; (8002610 <MX_TIM2_Init+0x98>)
 80025c0:	f007 fda4 	bl	800a10c <HAL_TIM_Base_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025ca:	f000 fa85 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <MX_TIM2_Init+0x98>)
 80025dc:	f008 f9f8 	bl	800a9d0 <HAL_TIM_ConfigClockSource>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025e6:	f000 fa77 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_TIM2_Init+0x98>)
 80025f8:	f008 fda6 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002602:	f000 fa69 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200018e4 	.word	0x200018e4

08002614 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <MX_TIM3_Init+0x100>)
 8002648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <MX_TIM3_Init+0xfc>)
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002658:	f240 32e7 	movw	r2, #999	; 0x3e7
 800265c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800266a:	4829      	ldr	r0, [pc, #164]	; (8002710 <MX_TIM3_Init+0xfc>)
 800266c:	f007 fd4e 	bl	800a10c <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002676:	f000 fa2f 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002684:	4619      	mov	r1, r3
 8002686:	4822      	ldr	r0, [pc, #136]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002688:	f008 f9a2 	bl	800a9d0 <HAL_TIM_ConfigClockSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002692:	f000 fa21 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002696:	481e      	ldr	r0, [pc, #120]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002698:	f007 fec7 	bl	800a42a <HAL_TIM_PWM_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80026a2:	f000 fa19 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ae:	f107 0320 	add.w	r3, r7, #32
 80026b2:	4619      	mov	r1, r3
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <MX_TIM3_Init+0xfc>)
 80026b6:	f008 fd47 	bl	800b148 <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80026c0:	f000 fa0a 	bl	8002ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	; 0x60
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM3_Init+0xfc>)
 80026dc:	f008 f8b6 	bl	800a84c <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026e6:	f000 f9f7 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2204      	movs	r2, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_TIM3_Init+0xfc>)
 80026f2:	f008 f8ab 	bl	800a84c <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80026fc:	f000 f9ec 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <MX_TIM3_Init+0xfc>)
 8002702:	f000 fc07 	bl	8002f14 <HAL_TIM_MspPostInit>

}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000192c 	.word	0x2000192c
 8002714:	40000400 	.word	0x40000400

08002718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <MX_USART1_UART_Init+0x50>)
 8002720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002750:	f008 fd7c 	bl	800b24c <HAL_UART_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800275a:	f000 f9bd 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200019d4 	.word	0x200019d4
 8002768:	40011000 	.word	0x40011000

0800276c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <MX_USART2_UART_Init+0x50>)
 8002774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800277c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 80027a4:	f008 fd52 	bl	800b24c <HAL_UART_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ae:	f000 f993 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20001a18 	.word	0x20001a18
 80027bc:	40004400 	.word	0x40004400

080027c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_DMA_Init+0x3c>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <MX_DMA_Init+0x3c>)
 80027d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_DMA_Init+0x3c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2044      	movs	r0, #68	; 0x44
 80027e8:	f001 fcbd 	bl	8004166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80027ec:	2044      	movs	r0, #68	; 0x44
 80027ee:	f001 fcd6 	bl	800419e <HAL_NVIC_EnableIRQ>

}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a70      	ldr	r2, [pc, #448]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b60      	ldr	r3, [pc, #384]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a5b      	ldr	r2, [pc, #364]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <MX_GPIO_Init+0x1e0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2102      	movs	r1, #2
 80028a6:	484f      	ldr	r0, [pc, #316]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 80028a8:	f002 fe5e 	bl	8005568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b2:	484d      	ldr	r0, [pc, #308]	; (80029e8 <MX_GPIO_Init+0x1e8>)
 80028b4:	f002 fe58 	bl	8005568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2108      	movs	r1, #8
 80028bc:	484a      	ldr	r0, [pc, #296]	; (80029e8 <MX_GPIO_Init+0x1e8>)
 80028be:	f002 fe53 	bl	8005568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028c2:	f642 63fe 	movw	r3, #12030	; 0x2efe
 80028c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c8:	2303      	movs	r3, #3
 80028ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	4845      	ldr	r0, [pc, #276]	; (80029ec <MX_GPIO_Init+0x1ec>)
 80028d8:	f002 fbc6 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	483d      	ldr	r0, [pc, #244]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 80028f0:	f002 fbba 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80028f4:	2302      	movs	r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002900:	2302      	movs	r3, #2
 8002902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4836      	ldr	r0, [pc, #216]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 800290c:	f002 fbac 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002910:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002914:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002916:	2303      	movs	r3, #3
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	482f      	ldr	r0, [pc, #188]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 8002926:	f002 fb9f 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800292a:	f247 4307 	movw	r3, #29703	; 0x7407
 800292e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002930:	2303      	movs	r3, #3
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	482a      	ldr	r0, [pc, #168]	; (80029e8 <MX_GPIO_Init+0x1e8>)
 8002940:	f002 fb92 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8002944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002952:	2302      	movs	r3, #2
 8002954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4822      	ldr	r0, [pc, #136]	; (80029e8 <MX_GPIO_Init+0x1e8>)
 800295e:	f002 fb83 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002968:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800296e:	2302      	movs	r3, #2
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	481a      	ldr	r0, [pc, #104]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 800297a:	f002 fb75 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 800297e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002984:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4813      	ldr	r0, [pc, #76]	; (80029e4 <MX_GPIO_Init+0x1e4>)
 8002996:	f002 fb67 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800299a:	2308      	movs	r3, #8
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <MX_GPIO_Init+0x1e8>)
 80029b2:	f002 fb59 	bl	8005068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2017      	movs	r0, #23
 80029bc:	f001 fbd3 	bl	8004166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029c0:	2017      	movs	r0, #23
 80029c2:	f001 fbec 	bl	800419e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2028      	movs	r0, #40	; 0x28
 80029cc:	f001 fbcb 	bl	8004166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029d0:	2028      	movs	r0, #40	; 0x28
 80029d2:	f001 fbe4 	bl	800419e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020800 	.word	0x40020800

080029f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8002a02:	f7fe fb81 	bl	8001108 <timer_interrupt>
}

}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 8002a20:	f7fe fb56 	bl	80010d0 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	d114      	bne.n	8002a56 <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x60>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8002a42:	f000 fdad 	bl	80035a0 <HAL_GetTick>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a4a:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8002a4c:	f000 fda8 	bl	80035a0 <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a54:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_EXTI_Callback+0x52>
    {
    	power_off_detect();
 8002a5e:	f7fe fb6d 	bl	800113c <power_off_detect>
    }
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200014a8 	.word	0x200014a8
 8002a70:	200014f0 	.word	0x200014f0
 8002a74:	20001734 	.word	0x20001734
 8002a78:	2000172c 	.word	0x2000172c

08002a7c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	RtcInt();
 8002a84:	f00f f874 	bl	8011b70 <RtcInt>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <HAL_UART_ErrorCallback+0x40>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d106      	bne.n	8002aae <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	43d2      	mvns	r2, r2
 8002aaa:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8002aac:	e009      	b.n	8002ac2 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_UART_ErrorCallback+0x44>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d105      	bne.n	8002ac2 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	43d2      	mvns	r2, r2
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200019d4 	.word	0x200019d4
 8002ad4:	20001a18 	.word	0x20001a18

08002ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <Error_Handler+0x8>
	...

08002ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_MspInit+0x4c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_MspInit+0x4c>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_MspInit+0x4c>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_MspInit+0x4c>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800

08002b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_ADC_MspInit+0x7c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d127      	bne.n	8002ba6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b92:	2303      	movs	r3, #3
 8002b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <HAL_ADC_MspInit+0x84>)
 8002ba2:	f002 fa61 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	3728      	adds	r7, #40	; 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40012000 	.word	0x40012000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020800 	.word	0x40020800

08002bbc <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <HAL_ADC_MspDeInit+0x30>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d109      	bne.n	8002be2 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_ADC_MspDeInit+0x34>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_ADC_MspDeInit+0x34>)
 8002bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <HAL_ADC_MspDeInit+0x38>)
 8002bde:	f002 fbc7 	bl	8005370 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020800 	.word	0x40020800

08002bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_I2C_MspInit+0x84>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12c      	bne.n	8002c74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8002c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3c:	2312      	movs	r3, #18
 8002c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <HAL_I2C_MspInit+0x8c>)
 8002c54:	f002 fa08 	bl	8005068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_I2C_MspInit+0x88>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005400 	.word	0x40005400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020400 	.word	0x40020400

08002c88 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_I2C_MspDeInit+0x3c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10f      	bne.n	8002cba <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_I2C_MspDeInit+0x40>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_I2C_MspDeInit+0x40>)
 8002ca0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8002ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002caa:	4808      	ldr	r0, [pc, #32]	; (8002ccc <HAL_I2C_MspDeInit+0x44>)
 8002cac:	f002 fb60 	bl	8005370 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8002cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_I2C_MspDeInit+0x44>)
 8002cb6:	f002 fb5b 	bl	8005370 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40005400 	.word	0x40005400
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40020400 	.word	0x40020400

08002cd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_RTC_MspInit+0x60>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d119      	bne.n	8002d26 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 fcfb 	bl	80086fc <HAL_RCCEx_PeriphCLKConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d0c:	f7ff fee4 	bl	8002ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_RTC_MspInit+0x64>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2029      	movs	r0, #41	; 0x29
 8002d1c:	f001 fa23 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002d20:	2029      	movs	r0, #41	; 0x29
 8002d22:	f001 fa3c 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40002800 	.word	0x40002800
 8002d34:	42470e3c 	.word	0x42470e3c

08002d38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <HAL_SD_MspInit+0xc0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d14a      	bne.n	8002df0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_SD_MspInit+0xc4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002dae:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <HAL_SD_MspInit+0xc8>)
 8002dcc:	f002 f94c 	bl	8005068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002de0:	230c      	movs	r3, #12
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4619      	mov	r1, r3
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <HAL_SD_MspInit+0xcc>)
 8002dec:	f002 f93c 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40020c00 	.word	0x40020c00

08002e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <HAL_TIM_Base_MspInit+0xf8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d13f      	bne.n	8002e9a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_TIM_Base_MspInit+0x104>)
 8002e3a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e3e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002e42:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e5e:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e66:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002e7c:	4822      	ldr	r0, [pc, #136]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e7e:	f001 f9bb 	bl	80041f8 <HAL_DMA_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002e88:	f7ff fe26 	bl	8002ad8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_TIM_Base_MspInit+0x100>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e98:	e02e      	b.n	8002ef8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d116      	bne.n	8002ed2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	201c      	movs	r0, #28
 8002ec6:	f001 f94e 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eca:	201c      	movs	r0, #28
 8002ecc:	f001 f967 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 8002ed0:	e012      	b.n	8002ef8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_TIM_Base_MspInit+0x108>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10d      	bne.n	8002ef8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	6413      	str	r3, [r2, #64]	; 0x40
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_TIM_Base_MspInit+0xfc>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	20001974 	.word	0x20001974
 8002f0c:	40026488 	.word	0x40026488
 8002f10:	40000400 	.word	0x40000400

08002f14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_TIM_MspPostInit+0x68>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d11d      	bne.n	8002f72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_TIM_MspPostInit+0x6c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8002f52:	2330      	movs	r3, #48	; 0x30
 8002f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_TIM_MspPostInit+0x70>)
 8002f6e:	f002 f87b 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020400 	.word	0x40020400

08002f88 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIM_Base_MspDeInit+0x68>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10b      	bne.n	8002fb2 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 f9d2 	bl	8004354 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8002fb0:	e019      	b.n	8002fe6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d109      	bne.n	8002fd0 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002fc8:	201c      	movs	r0, #28
 8002fca:	f001 f8f6 	bl	80041ba <HAL_NVIC_DisableIRQ>
}
 8002fce:	e00a      	b.n	8002fe6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_TIM_Base_MspDeInit+0x70>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d105      	bne.n	8002fe6 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40000400 	.word	0x40000400

08002ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_UART_MspInit+0x108>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d134      	bne.n	8003088 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a31      	ldr	r2, [pc, #196]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <HAL_UART_MspInit+0x10c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003066:	2307      	movs	r3, #7
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4826      	ldr	r0, [pc, #152]	; (800310c <HAL_UART_MspInit+0x110>)
 8003072:	f001 fff9 	bl	8005068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2025      	movs	r0, #37	; 0x25
 800307c:	f001 f873 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003080:	2025      	movs	r0, #37	; 0x25
 8003082:	f001 f88c 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003086:	e038      	b.n	80030fa <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a20      	ldr	r2, [pc, #128]	; (8003110 <HAL_UART_MspInit+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d133      	bne.n	80030fa <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_UART_MspInit+0x10c>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <HAL_UART_MspInit+0x10c>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_UART_MspInit+0x10c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_UART_MspInit+0x10c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_UART_MspInit+0x10c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_UART_MspInit+0x10c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 80030ca:	230c      	movs	r3, #12
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030da:	2307      	movs	r3, #7
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <HAL_UART_MspInit+0x118>)
 80030e6:	f001 ffbf 	bl	8005068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2026      	movs	r0, #38	; 0x26
 80030f0:	f001 f839 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030f4:	2026      	movs	r0, #38	; 0x26
 80030f6:	f001 f852 	bl	800419e <HAL_NVIC_EnableIRQ>
}
 80030fa:	bf00      	nop
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40011000 	.word	0x40011000
 8003108:	40023800 	.word	0x40023800
 800310c:	40020400 	.word	0x40020400
 8003110:	40004400 	.word	0x40004400
 8003114:	40020000 	.word	0x40020000

08003118 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a13      	ldr	r2, [pc, #76]	; (8003174 <HAL_UART_MspDeInit+0x5c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10d      	bne.n	8003146 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_UART_MspDeInit+0x60>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <HAL_UART_MspDeInit+0x60>)
 8003130:	f023 0310 	bic.w	r3, r3, #16
 8003134:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003136:	21c0      	movs	r1, #192	; 0xc0
 8003138:	4810      	ldr	r0, [pc, #64]	; (800317c <HAL_UART_MspDeInit+0x64>)
 800313a:	f002 f919 	bl	8005370 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800313e:	2025      	movs	r0, #37	; 0x25
 8003140:	f001 f83b 	bl	80041ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003144:	e011      	b.n	800316a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_UART_MspDeInit+0x68>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10c      	bne.n	800316a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_UART_MspDeInit+0x60>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_UART_MspDeInit+0x60>)
 8003156:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 800315c:	210c      	movs	r1, #12
 800315e:	4809      	ldr	r0, [pc, #36]	; (8003184 <HAL_UART_MspDeInit+0x6c>)
 8003160:	f002 f906 	bl	8005370 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003164:	2026      	movs	r0, #38	; 0x26
 8003166:	f001 f828 	bl	80041ba <HAL_NVIC_DisableIRQ>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40011000 	.word	0x40011000
 8003178:	40023800 	.word	0x40023800
 800317c:	40020400 	.word	0x40020400
 8003180:	40004400 	.word	0x40004400
 8003184:	40020000 	.word	0x40020000

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 800318c:	f001 f823 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003190:	e7fe      	b.n	8003190 <NMI_Handler+0x8>

08003192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003196:	f001 f81e 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319a:	e7fe      	b.n	800319a <HardFault_Handler+0x8>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031a0:	f001 f819 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <MemManage_Handler+0x8>

080031a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031aa:	f001 f814 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ae:	e7fe      	b.n	80031ae <BusFault_Handler+0x8>

080031b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031b4:	f001 f80f 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <UsageFault_Handler+0x8>

080031ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031be:	f001 f80a 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031ca:	f001 f804 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 80031d6:	f000 fffe 	bl	80041d6 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}

080031de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e2:	f000 f9c9 	bl	8003578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}

080031ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80031ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031f2:	f002 f9ed 	bl	80055d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <TIM2_IRQHandler+0x10>)
 8003202:	f007 fa1b 	bl	800a63c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200018e4 	.word	0x200018e4

08003210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <USART1_IRQHandler+0x10>)
 8003216:	f008 f9bd 	bl	800b594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200019d4 	.word	0x200019d4

08003224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <USART2_IRQHandler+0x10>)
 800322a:	f008 f9b3 	bl	800b594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20001a18 	.word	0x20001a18

08003238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 800323c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003240:	f002 f9c6 	bl	80055d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <RTC_Alarm_IRQHandler+0x10>)
 800324e:	f005 fec7 	bl	8008fe0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200017f8 	.word	0x200017f8

0800325c <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <OTG_FS_WKUP_IRQHandler+0x40>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <OTG_FS_WKUP_IRQHandler+0x44>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <OTG_FS_WKUP_IRQHandler+0x44>)
 800326e:	f023 0306 	bic.w	r3, r3, #6
 8003272:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8003274:	f7fe ffea 	bl	800224c <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <OTG_FS_WKUP_IRQHandler+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a06      	ldr	r2, [pc, #24]	; (800329c <OTG_FS_WKUP_IRQHandler+0x40>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <OTG_FS_WKUP_IRQHandler+0x48>)
 8003292:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003296:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200028c0 	.word	0x200028c0
 80032a0:	e000ed00 	.word	0xe000ed00
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <OTG_FS_IRQHandler+0x10>)
 80032ae:	f003 fc46 	bl	8006b3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200028c0 	.word	0x200028c0

080032bc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <DMA2_Stream5_IRQHandler+0x10>)
 80032c2:	f001 f973 	bl	80045ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20001974 	.word	0x20001974

080032d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return 1;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_kill>:

int _kill(int pid, int sig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ea:	f017 fdd1 	bl	801ae90 <__errno>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2216      	movs	r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
  return -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffe7 	bl	80032e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003312:	e7fe      	b.n	8003312 <_exit+0x12>

08003314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e00a      	b.n	800333c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003326:	f3af 8000 	nop.w
 800332a:	4601      	mov	r1, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	60ba      	str	r2, [r7, #8]
 8003332:	b2ca      	uxtb	r2, r1
 8003334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	dbf0      	blt.n	8003326 <_read+0x12>
  }

  return len;
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e009      	b.n	8003374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60ba      	str	r2, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	dbf1      	blt.n	8003360 <_write+0x12>
  }
  return len;
 800337c:	687b      	ldr	r3, [r7, #4]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_close>:

int _close(int file)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ae:	605a      	str	r2, [r3, #4]
  return 0;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_isatty>:

int _isatty(int file)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <_sbrk+0x5c>)
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <_sbrk+0x60>)
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <_sbrk+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <_sbrk+0x64>)
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <_sbrk+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <_sbrk+0x64>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d207      	bcs.n	8003430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003420:	f017 fd36 	bl	801ae90 <__errno>
 8003424:	4603      	mov	r3, r0
 8003426:	220c      	movs	r2, #12
 8003428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	e009      	b.n	8003444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <_sbrk+0x64>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <_sbrk+0x64>)
 8003440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20018000 	.word	0x20018000
 8003450:	00000400 	.word	0x00000400
 8003454:	20001a5c 	.word	0x20001a5c
 8003458:	20003658 	.word	0x20003658

0800345c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <SystemInit+0x20>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <SystemInit+0x20>)
 8003468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800346c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003484:	480d      	ldr	r0, [pc, #52]	; (80034bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003486:	490e      	ldr	r1, [pc, #56]	; (80034c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800348c:	e002      	b.n	8003494 <LoopCopyDataInit>

0800348e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003492:	3304      	adds	r3, #4

08003494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003498:	d3f9      	bcc.n	800348e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800349c:	4c0b      	ldr	r4, [pc, #44]	; (80034cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800349e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a0:	e001      	b.n	80034a6 <LoopFillZerobss>

080034a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a4:	3204      	adds	r2, #4

080034a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a8:	d3fb      	bcc.n	80034a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034aa:	f7ff ffd7 	bl	800345c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ae:	f017 fd63 	bl	801af78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b2:	f7fe fea9 	bl	8002208 <main>
  bx  lr    
 80034b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c0:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80034c4:	08021ee8 	.word	0x08021ee8
  ldr r2, =_sbss
 80034c8:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80034cc:	20003654 	.word	0x20003654

080034d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <ADC_IRQHandler>
	...

080034d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_Init+0x40>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_Init+0x40>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <HAL_Init+0x40>)
 80034ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_Init+0x40>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_Init+0x40>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 fe27 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003502:	200f      	movs	r0, #15
 8003504:	f000 f808 	bl	8003518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003508:	f7ff faec 	bl	8002ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00

08003518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_InitTick+0x54>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_InitTick+0x58>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800352e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fe51 	bl	80041de <HAL_SYSTICK_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e00e      	b.n	8003564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0f      	cmp	r3, #15
 800354a:	d80a      	bhi.n	8003562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354c:	2200      	movs	r2, #0
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f000 fe07 	bl	8004166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <HAL_InitTick+0x5c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000048 	.word	0x20000048
 8003570:	20000050 	.word	0x20000050
 8003574:	2000004c 	.word	0x2000004c

08003578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_IncTick+0x20>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_IncTick+0x24>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4413      	add	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_IncTick+0x24>)
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000050 	.word	0x20000050
 800359c:	20001a60 	.word	0x20001a60

080035a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return uwTick;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_GetTick+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20001a60 	.word	0x20001a60

080035b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff ffee 	bl	80035a0 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d005      	beq.n	80035de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_Delay+0x44>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035de:	bf00      	nop
 80035e0:	f7ff ffde 	bl	80035a0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d8f7      	bhi.n	80035e0 <HAL_Delay+0x28>
  {
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000050 	.word	0x20000050

08003600 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_SuspendTick+0x1c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_SuspendTick+0x1c>)
 800360a:	f023 0302 	bic.w	r3, r3, #2
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e010 	.word	0xe000e010

08003620 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_ResumeTick+0x1c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <HAL_ResumeTick+0x1c>)
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e010 	.word	0xe000e010

08003640 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_GetUIDw0+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	1fff7a10 	.word	0x1fff7a10

08003658 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_GetUIDw1+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	1fff7a14 	.word	0x1fff7a14

08003670 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_GetUIDw2+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	1fff7a18 	.word	0x1fff7a18

08003688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e033      	b.n	8003706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fa44 	bl	8002b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 faec 	bl	8003cb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
 80036f6:	e001      	b.n	80036fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e022      	b.n	800376a <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0202 	orr.w	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fa34 	bl	8002bbc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADC_Start+0x1a>
 800378a:	2302      	movs	r3, #2
 800378c:	e097      	b.n	80038be <HAL_ADC_Start+0x14a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d018      	beq.n	80037d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037b4:	4b45      	ldr	r3, [pc, #276]	; (80038cc <HAL_ADC_Start+0x158>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <HAL_ADC_Start+0x15c>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9a      	lsrs	r2, r3, #18
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037c8:	e002      	b.n	80037d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d15f      	bne.n	80038a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800380e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d106      	bne.n	8003832 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f023 0206 	bic.w	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
 8003830:	e002      	b.n	8003838 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_ADC_Start+0x160>)
 8003842:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800384c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d129      	bne.n	80038bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e020      	b.n	80038bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_ADC_Start+0x164>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d11b      	bne.n	80038bc <HAL_ADC_Start+0x148>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	e00b      	b.n	80038bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000048 	.word	0x20000048
 80038d0:	431bde83 	.word	0x431bde83
 80038d4:	40012300 	.word	0x40012300
 80038d8:	40012000 	.word	0x40012000

080038dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_Stop+0x16>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e021      	b.n	8003936 <HAL_ADC_Stop+0x5a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d113      	bne.n	8003988 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800396a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396e:	d10b      	bne.n	8003988 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e063      	b.n	8003a50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003988:	f7ff fe0a 	bl	80035a0 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800398e:	e021      	b.n	80039d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d01d      	beq.n	80039d4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_ADC_PollForConversion+0x6c>
 800399e:	f7ff fdff 	bl	80035a0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d212      	bcs.n	80039d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d00b      	beq.n	80039d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0204 	orr.w	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d1d6      	bne.n	8003990 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0212 	mvn.w	r2, #18
 80039ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d123      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11f      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d111      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x1c>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e105      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x228>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d925      	bls.n	8003aec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68d9      	ldr	r1, [r3, #12]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b1e      	subs	r3, #30
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43da      	mvns	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68d9      	ldr	r1, [r3, #12]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4403      	add	r3, r0
 8003ade:	3b1e      	subs	r3, #30
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e022      	b.n	8003b32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6919      	ldr	r1, [r3, #16]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	2207      	movs	r2, #7
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6919      	ldr	r1, [r3, #16]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4403      	add	r3, r0
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d824      	bhi.n	8003b84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	3b05      	subs	r3, #5
 8003b4c:	221f      	movs	r2, #31
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	400a      	ands	r2, r1
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	3b05      	subs	r3, #5
 8003b76:	fa00 f203 	lsl.w	r2, r0, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
 8003b82:	e04c      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d824      	bhi.n	8003bd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3b23      	subs	r3, #35	; 0x23
 8003b9e:	221f      	movs	r2, #31
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	400a      	ands	r2, r1
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b23      	subs	r3, #35	; 0x23
 8003bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	e023      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	3b41      	subs	r3, #65	; 0x41
 8003be8:	221f      	movs	r2, #31
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4618      	mov	r0, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	3b41      	subs	r3, #65	; 0x41
 8003c12:	fa00 f203 	lsl.w	r2, r0, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_ADC_ConfigChannel+0x234>)
 8003c20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_ADC_ConfigChannel+0x238>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d109      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1cc>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b12      	cmp	r3, #18
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a19      	ldr	r2, [pc, #100]	; (8003cac <HAL_ADC_ConfigChannel+0x238>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d123      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x21e>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d003      	beq.n	8003c5a <HAL_ADC_ConfigChannel+0x1e6>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b11      	cmp	r3, #17
 8003c58:	d11b      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d111      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_ADC_ConfigChannel+0x23c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <HAL_ADC_ConfigChannel+0x240>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	0c9a      	lsrs	r2, r3, #18
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c84:	e002      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40012300 	.word	0x40012300
 8003cac:	40012000 	.word	0x40012000
 8003cb0:	20000048 	.word	0x20000048
 8003cb4:	431bde83 	.word	0x431bde83

08003cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc0:	4b79      	ldr	r3, [pc, #484]	; (8003ea8 <ADC_Init+0x1f0>)
 8003cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	4a58      	ldr	r2, [pc, #352]	; (8003eac <ADC_Init+0x1f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e00f      	b.n	8003db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0202 	bic.w	r2, r2, #2
 8003dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7e1b      	ldrb	r3, [r3, #24]
 8003dd0:	005a      	lsls	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	035a      	lsls	r2, r3, #13
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e007      	b.n	8003e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	051a      	lsls	r2, r3, #20
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e6e:	025a      	lsls	r2, r3, #9
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	029a      	lsls	r2, r3, #10
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	0f000001 	.word	0x0f000001

08003eb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e031      	b.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 021f 	bic.w	r2, r3, #31
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012300 	.word	0x40012300

08003f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	60d3      	str	r3, [r2, #12]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <__NVIC_GetPriorityGrouping+0x18>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	f003 0307 	and.w	r3, r3, #7
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	db0b      	blt.n	8003fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <__NVIC_EnableIRQ+0x38>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db12      	blt.n	8004014 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	490a      	ldr	r1, [pc, #40]	; (8004020 <__NVIC_DisableIRQ+0x44>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8004002:	3320      	adds	r3, #32
 8004004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004008:	f3bf 8f4f 	dsb	sy
}
 800400c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800400e:	f3bf 8f6f 	isb	sy
}
 8004012:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db0a      	blt.n	800404e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	490c      	ldr	r1, [pc, #48]	; (8004070 <__NVIC_SetPriority+0x4c>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	0112      	lsls	r2, r2, #4
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	440b      	add	r3, r1
 8004048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800404c:	e00a      	b.n	8004064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4908      	ldr	r1, [pc, #32]	; (8004074 <__NVIC_SetPriority+0x50>)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3b04      	subs	r3, #4
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	440b      	add	r3, r1
 8004062:	761a      	strb	r2, [r3, #24]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f1c3 0307 	rsb	r3, r3, #7
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf28      	it	cs
 8004096:	2304      	movcs	r3, #4
 8004098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3304      	adds	r3, #4
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d902      	bls.n	80040a8 <NVIC_EncodePriority+0x30>
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3b03      	subs	r3, #3
 80040a6:	e000      	b.n	80040aa <NVIC_EncodePriority+0x32>
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c0:	f04f 31ff 	mov.w	r1, #4294967295
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	43d9      	mvns	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	4313      	orrs	r3, r2
         );
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80040e4:	f3bf 8f4f 	dsb	sy
}
 80040e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <__NVIC_SystemReset+0x24>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80040f2:	4904      	ldr	r1, [pc, #16]	; (8004104 <__NVIC_SystemReset+0x24>)
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__NVIC_SystemReset+0x28>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040fa:	f3bf 8f4f 	dsb	sy
}
 80040fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <__NVIC_SystemReset+0x20>
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	05fa0004 	.word	0x05fa0004

0800410c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411c:	d301      	bcc.n	8004122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <SysTick_Config+0x40>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800412a:	210f      	movs	r1, #15
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f7ff ff78 	bl	8004024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <SysTick_Config+0x40>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <SysTick_Config+0x40>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff feef 	bl	8003f3c <__NVIC_SetPriorityGrouping>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004178:	f7ff ff04 	bl	8003f84 <__NVIC_GetPriorityGrouping>
 800417c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff ff78 	bl	8004078 <NVIC_EncodePriority>
 8004188:	4602      	mov	r2, r0
 800418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff47 	bl	8004024 <__NVIC_SetPriority>
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fef7 	bl	8003fa0 <__NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff07 	bl	8003fdc <__NVIC_DisableIRQ>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80041da:	f7ff ff81 	bl	80040e0 <__NVIC_SystemReset>

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff90 	bl	800410c <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7ff f9cc 	bl	80035a0 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e099      	b.n	8004348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004234:	e00f      	b.n	8004256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004236:	f7ff f9b3 	bl	80035a0 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b05      	cmp	r3, #5
 8004242:	d908      	bls.n	8004256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2203      	movs	r2, #3
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e078      	b.n	8004348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e8      	bne.n	8004236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4b38      	ldr	r3, [pc, #224]	; (8004350 <HAL_DMA_Init+0x158>)
 8004270:	4013      	ands	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d107      	bne.n	80042c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	4313      	orrs	r3, r2
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d117      	bne.n	800431a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb43 	bl	8004988 <DMA_CheckFifoParam>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004316:	2301      	movs	r3, #1
 8004318:	e016      	b.n	8004348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fafa 	bl	800491c <DMA_CalcBaseAndBitshift>
 8004328:	4603      	mov	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	223f      	movs	r2, #63	; 0x3f
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	f010803f 	.word	0xf010803f

08004354 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e050      	b.n	8004408 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d101      	bne.n	8004376 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e048      	b.n	8004408 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2221      	movs	r2, #33	; 0x21
 80043b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fab0 	bl	800491c <DMA_CalcBaseAndBitshift>
 80043bc:	4603      	mov	r3, r0
 80043be:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	223f      	movs	r2, #63	; 0x3f
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Start+0x20>
 800442c:	2302      	movs	r3, #2
 800442e:	e026      	b.n	800447e <HAL_DMA_Start+0x6e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d115      	bne.n	8004470 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fa31 	bl	80048c0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e005      	b.n	800447c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004478:	2302      	movs	r3, #2
 800447a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800447c:	7dfb      	ldrb	r3, [r7, #23]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7ff f884 	bl	80035a0 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d008      	beq.n	80044b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2280      	movs	r2, #128	; 0x80
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e052      	b.n	800455e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0216 	bic.w	r2, r2, #22
 80044c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <HAL_DMA_Abort+0x62>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0208 	bic.w	r2, r2, #8
 80044f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004508:	e013      	b.n	8004532 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800450a:	f7ff f849 	bl	80035a0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b05      	cmp	r3, #5
 8004516:	d90c      	bls.n	8004532 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e015      	b.n	800455e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e4      	bne.n	800450a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	223f      	movs	r2, #63	; 0x3f
 8004546:	409a      	lsls	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e00c      	b.n	800459e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2205      	movs	r2, #5
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045b8:	4b8e      	ldr	r3, [pc, #568]	; (80047f4 <HAL_DMA_IRQHandler+0x248>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8e      	ldr	r2, [pc, #568]	; (80047f8 <HAL_DMA_IRQHandler+0x24c>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	2208      	movs	r2, #8
 80045d8:	409a      	lsls	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01a      	beq.n	8004618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0204 	bic.w	r2, r2, #4
 80045fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	2208      	movs	r2, #8
 8004606:	409a      	lsls	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d012      	beq.n	800464e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	2201      	movs	r2, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f043 0202 	orr.w	r2, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2204      	movs	r2, #4
 8004654:	409a      	lsls	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d012      	beq.n	8004684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	2204      	movs	r2, #4
 8004672:	409a      	lsls	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0204 	orr.w	r2, r3, #4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2210      	movs	r2, #16
 800468a:	409a      	lsls	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d043      	beq.n	800471c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03c      	beq.n	800471c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	2210      	movs	r2, #16
 80046a8:	409a      	lsls	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d018      	beq.n	80046ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d024      	beq.n	800471c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
 80046da:	e01f      	b.n	800471c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
 80046ec:	e016      	b.n	800471c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0208 	bic.w	r2, r2, #8
 800470a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	2220      	movs	r2, #32
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 808f 	beq.w	800484c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8087 	beq.w	800484c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	2220      	movs	r2, #32
 8004744:	409a      	lsls	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b05      	cmp	r3, #5
 8004754:	d136      	bne.n	80047c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0216 	bic.w	r2, r2, #22
 8004764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <HAL_DMA_IRQHandler+0x1da>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0208 	bic.w	r2, r2, #8
 8004794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	223f      	movs	r2, #63	; 0x3f
 800479c:	409a      	lsls	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d07e      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
        }
        return;
 80047c2:	e079      	b.n	80048b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d031      	beq.n	800484c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	e02c      	b.n	800484c <HAL_DMA_IRQHandler+0x2a0>
 80047f2:	bf00      	nop
 80047f4:	20000048 	.word	0x20000048
 80047f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d023      	beq.n	800484c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
 800480c:	e01e      	b.n	800484c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10f      	bne.n	800483c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0210 	bic.w	r2, r2, #16
 800482a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	2b00      	cmp	r3, #0
 8004852:	d032      	beq.n	80048ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d022      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2205      	movs	r2, #5
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3301      	adds	r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	429a      	cmp	r2, r3
 8004882:	d307      	bcc.n	8004894 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f2      	bne.n	8004878 <HAL_DMA_IRQHandler+0x2cc>
 8004892:	e000      	b.n	8004896 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004894:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
 80048b6:	e000      	b.n	80048ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80048b8:	bf00      	nop
    }
  }
}
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d108      	bne.n	8004900 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048fe:	e007      	b.n	8004910 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	3b10      	subs	r3, #16
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <DMA_CalcBaseAndBitshift+0x64>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <DMA_CalcBaseAndBitshift+0x68>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d909      	bls.n	800495e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	1d1a      	adds	r2, r3, #4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	659a      	str	r2, [r3, #88]	; 0x58
 800495c:	e007      	b.n	800496e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	aaaaaaab 	.word	0xaaaaaaab
 8004984:	08021540 	.word	0x08021540

08004988 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11f      	bne.n	80049e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d856      	bhi.n	8004a56 <DMA_CheckFifoParam+0xce>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <DMA_CheckFifoParam+0x28>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049d3 	.word	0x080049d3
 80049b8:	080049c1 	.word	0x080049c1
 80049bc:	08004a57 	.word	0x08004a57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d046      	beq.n	8004a5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d0:	e043      	b.n	8004a5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049da:	d140      	bne.n	8004a5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e0:	e03d      	b.n	8004a5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ea:	d121      	bne.n	8004a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d837      	bhi.n	8004a62 <DMA_CheckFifoParam+0xda>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <DMA_CheckFifoParam+0x70>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a0f 	.word	0x08004a0f
 8004a00:	08004a09 	.word	0x08004a09
 8004a04:	08004a21 	.word	0x08004a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0c:	e030      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d025      	beq.n	8004a66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e022      	b.n	8004a66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a28:	d11f      	bne.n	8004a6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a2e:	e01c      	b.n	8004a6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d903      	bls.n	8004a3e <DMA_CheckFifoParam+0xb6>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d003      	beq.n	8004a44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a3c:	e018      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
      break;
 8004a42:	e015      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e00b      	b.n	8004a6e <DMA_CheckFifoParam+0xe6>
      break;
 8004a56:	bf00      	nop
 8004a58:	e00a      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e008      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e006      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <DMA_CheckFifoParam+0xe8>
      break;
 8004a6e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_FLASH_Program+0xa0>)
 8004a94:	7e1b      	ldrb	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_FLASH_Program+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e03b      	b.n	8004b16 <HAL_FLASH_Program+0x96>
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_FLASH_Program+0xa0>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aa8:	f000 f87c 	bl	8004ba4 <FLASH_WaitForLastOperation>
 8004aac:	4603      	mov	r3, r0
 8004aae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d12b      	bne.n	8004b0e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d105      	bne.n	8004ac8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004abc:	783b      	ldrb	r3, [r7, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 f927 	bl	8004d14 <FLASH_Program_Byte>
 8004ac6:	e016      	b.n	8004af6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004ace:	883b      	ldrh	r3, [r7, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68b8      	ldr	r0, [r7, #8]
 8004ad4:	f000 f8fa 	bl	8004ccc <FLASH_Program_HalfWord>
 8004ad8:	e00d      	b.n	8004af6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d105      	bne.n	8004aec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f000 f8cf 	bl	8004c88 <FLASH_Program_Word>
 8004aea:	e004      	b.n	8004af6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f000 f897 	bl	8004c24 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004af6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004afa:	f000 f853 	bl	8004ba4 <FLASH_WaitForLastOperation>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_FLASH_Program+0xa4>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <HAL_FLASH_Program+0xa4>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_FLASH_Program+0xa0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20001a64 	.word	0x20001a64
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_FLASH_Unlock+0x38>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da0b      	bge.n	8004b52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_FLASH_Unlock+0x38>)
 8004b3c:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_FLASH_Unlock+0x3c>)
 8004b3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <HAL_FLASH_Unlock+0x38>)
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <HAL_FLASH_Unlock+0x40>)
 8004b44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_FLASH_Unlock+0x38>)
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da01      	bge.n	8004b52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b52:	79fb      	ldrb	r3, [r7, #7]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40023c00 	.word	0x40023c00
 8004b64:	45670123 	.word	0x45670123
 8004b68:	cdef89ab 	.word	0xcdef89ab

08004b6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_FLASH_Lock+0x1c>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_FLASH_Lock+0x1c>)
 8004b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_FLASH_GetError+0x14>)
 8004b92:	69db      	ldr	r3, [r3, #28]
}  
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20001a64 	.word	0x20001a64

08004ba4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <FLASH_WaitForLastOperation+0x78>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb6:	f7fe fcf3 	bl	80035a0 <HAL_GetTick>
 8004bba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bbc:	e010      	b.n	8004be0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d00c      	beq.n	8004be0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <FLASH_WaitForLastOperation+0x38>
 8004bcc:	f7fe fce8 	bl	80035a0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d201      	bcs.n	8004be0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e019      	b.n	8004c14 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <FLASH_WaitForLastOperation+0x7c>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e8      	bne.n	8004bbe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <FLASH_WaitForLastOperation+0x7c>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <FLASH_WaitForLastOperation+0x7c>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <FLASH_WaitForLastOperation+0x7c>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c0a:	f000 f8a5 	bl	8004d58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
  
}  
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20001a64 	.word	0x20001a64
 8004c20:	40023c00 	.word	0x40023c00

08004c24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <FLASH_Program_DoubleWord+0x60>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c5a:	f3bf 8f6f 	isb	sy
}
 8004c5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	000a      	movs	r2, r1
 8004c6e:	2300      	movs	r3, #0
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	3104      	adds	r1, #4
 8004c74:	4613      	mov	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40023c00 	.word	0x40023c00

08004c88 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ca8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <FLASH_Program_Word+0x40>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40023c00 	.word	0x40023c00

08004ccc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	4a06      	ldr	r2, [pc, #24]	; (8004d10 <FLASH_Program_HalfWord+0x44>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	887a      	ldrh	r2, [r7, #2]
 8004d00:	801a      	strh	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <FLASH_Program_Byte+0x40>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	701a      	strb	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40023c00 	.word	0x40023c00

08004d58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	4a2b      	ldr	r2, [pc, #172]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004d72:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004d76:	2210      	movs	r2, #16
 8004d78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d7a:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004d90:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004d94:	2220      	movs	r2, #32
 8004d96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004dae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004db2:	2240      	movs	r2, #64	; 0x40
 8004db4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004dcc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004dea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f043 0320 	orr.w	r3, r3, #32
 8004e08:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <FLASH_SetErrorCode+0xc8>)
 8004e0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <FLASH_SetErrorCode+0xc4>)
 8004e0e:	2202      	movs	r2, #2
 8004e10:	60da      	str	r2, [r3, #12]
  }
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40023c00 	.word	0x40023c00
 8004e20:	20001a64 	.word	0x20001a64

08004e24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004e38:	7e1b      	ldrb	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_FLASHEx_Erase+0x1e>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e058      	b.n	8004ef4 <HAL_FLASHEx_Erase+0xd0>
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e4c:	f7ff feaa 	bl	8004ba4 <FLASH_WaitForLastOperation>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d148      	bne.n	8004eec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d115      	bne.n	8004e96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 f844 	bl	8004f04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e80:	f7ff fe90 	bl	8004ba4 <FLASH_WaitForLastOperation>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	6113      	str	r3, [r2, #16]
 8004e94:	e028      	b.n	8004ee8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e01c      	b.n	8004ed8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	f000 f850 	bl	8004f4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004eb0:	f7ff fe78 	bl	8004ba4 <FLASH_WaitForLastOperation>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <HAL_FLASHEx_Erase+0xdc>)
 8004ebe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004ec2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
          break;
 8004ed0:	e00a      	b.n	8004ee8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d3da      	bcc.n	8004e9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004ee8:	f000 f878 	bl	8004fdc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <HAL_FLASHEx_Erase+0xd8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	761a      	strb	r2, [r3, #24]

  return status;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20001a64 	.word	0x20001a64
 8004f00:	40023c00 	.word	0x40023c00

08004f04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f10:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	4313      	orrs	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <FLASH_MassErase+0x44>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6113      	str	r3, [r2, #16]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023c00 	.word	0x40023c00

08004f4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e010      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d103      	bne.n	8004f76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e009      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d103      	bne.n	8004f84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e002      	b.n	8004f8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	490f      	ldr	r1, [pc, #60]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <FLASH_Erase_Sector+0x8c>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6113      	str	r3, [r2, #16]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40023c00 	.word	0x40023c00

08004fdc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004fe0:	4b20      	ldr	r3, [pc, #128]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ff2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	; (8005064 <FLASH_FlushCaches+0x88>)
 8004ffe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b17      	ldr	r3, [pc, #92]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <FLASH_FlushCaches+0x88>)
 800500a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <FLASH_FlushCaches+0x88>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <FLASH_FlushCaches+0x88>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <FLASH_FlushCaches+0x88>)
 800502e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005032:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <FLASH_FlushCaches+0x88>)
 800503a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <FLASH_FlushCaches+0x88>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <FLASH_FlushCaches+0x88>)
 8005052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005056:	6013      	str	r3, [r2, #0]
  }
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40023c00 	.word	0x40023c00

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e159      	b.n	8005338 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005084:	2201      	movs	r2, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	f040 8148 	bne.w	8005332 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d005      	beq.n	80050ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d130      	bne.n	800511c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	2203      	movs	r2, #3
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0201 	and.w	r2, r3, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d017      	beq.n	8005158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d123      	bne.n	80051ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	220f      	movs	r2, #15
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	08da      	lsrs	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0203 	and.w	r2, r3, #3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a2 	beq.w	8005332 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	4b57      	ldr	r3, [pc, #348]	; (8005350 <HAL_GPIO_Init+0x2e8>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	4a56      	ldr	r2, [pc, #344]	; (8005350 <HAL_GPIO_Init+0x2e8>)
 80051f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051fc:	6453      	str	r3, [r2, #68]	; 0x44
 80051fe:	4b54      	ldr	r3, [pc, #336]	; (8005350 <HAL_GPIO_Init+0x2e8>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520a:	4a52      	ldr	r2, [pc, #328]	; (8005354 <HAL_GPIO_Init+0x2ec>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a49      	ldr	r2, [pc, #292]	; (8005358 <HAL_GPIO_Init+0x2f0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d019      	beq.n	800526a <HAL_GPIO_Init+0x202>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a48      	ldr	r2, [pc, #288]	; (800535c <HAL_GPIO_Init+0x2f4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_GPIO_Init+0x1fe>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a47      	ldr	r2, [pc, #284]	; (8005360 <HAL_GPIO_Init+0x2f8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00d      	beq.n	8005262 <HAL_GPIO_Init+0x1fa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a46      	ldr	r2, [pc, #280]	; (8005364 <HAL_GPIO_Init+0x2fc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <HAL_GPIO_Init+0x1f6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a45      	ldr	r2, [pc, #276]	; (8005368 <HAL_GPIO_Init+0x300>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_GPIO_Init+0x1f2>
 8005256:	2304      	movs	r3, #4
 8005258:	e008      	b.n	800526c <HAL_GPIO_Init+0x204>
 800525a:	2307      	movs	r3, #7
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x204>
 800525e:	2303      	movs	r3, #3
 8005260:	e004      	b.n	800526c <HAL_GPIO_Init+0x204>
 8005262:	2302      	movs	r3, #2
 8005264:	e002      	b.n	800526c <HAL_GPIO_Init+0x204>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_GPIO_Init+0x204>
 800526a:	2300      	movs	r3, #0
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	f002 0203 	and.w	r2, r2, #3
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	4093      	lsls	r3, r2
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800527c:	4935      	ldr	r1, [pc, #212]	; (8005354 <HAL_GPIO_Init+0x2ec>)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	3302      	adds	r3, #2
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800528a:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_GPIO_Init+0x304>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ae:	4a2f      	ldr	r2, [pc, #188]	; (800536c <HAL_GPIO_Init+0x304>)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052b4:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_GPIO_Init+0x304>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <HAL_GPIO_Init+0x304>)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_GPIO_Init+0x304>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_GPIO_Init+0x304>)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_GPIO_Init+0x304>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800532c:	4a0f      	ldr	r2, [pc, #60]	; (800536c <HAL_GPIO_Init+0x304>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b0f      	cmp	r3, #15
 800533c:	f67f aea2 	bls.w	8005084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	40013800 	.word	0x40013800
 8005358:	40020000 	.word	0x40020000
 800535c:	40020400 	.word	0x40020400
 8005360:	40020800 	.word	0x40020800
 8005364:	40020c00 	.word	0x40020c00
 8005368:	40021000 	.word	0x40021000
 800536c:	40013c00 	.word	0x40013c00

08005370 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e0bb      	b.n	8005504 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800538c:	2201      	movs	r2, #1
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f040 80ab 	bne.w	80054fe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80053a8:	4a5c      	ldr	r2, [pc, #368]	; (800551c <HAL_GPIO_DeInit+0x1ac>)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	089b      	lsrs	r3, r3, #2
 80053ae:	3302      	adds	r3, #2
 80053b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	220f      	movs	r2, #15
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a54      	ldr	r2, [pc, #336]	; (8005520 <HAL_GPIO_DeInit+0x1b0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d019      	beq.n	8005406 <HAL_GPIO_DeInit+0x96>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a53      	ldr	r2, [pc, #332]	; (8005524 <HAL_GPIO_DeInit+0x1b4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_GPIO_DeInit+0x92>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a52      	ldr	r2, [pc, #328]	; (8005528 <HAL_GPIO_DeInit+0x1b8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00d      	beq.n	80053fe <HAL_GPIO_DeInit+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a51      	ldr	r2, [pc, #324]	; (800552c <HAL_GPIO_DeInit+0x1bc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <HAL_GPIO_DeInit+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a50      	ldr	r2, [pc, #320]	; (8005530 <HAL_GPIO_DeInit+0x1c0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <HAL_GPIO_DeInit+0x86>
 80053f2:	2304      	movs	r3, #4
 80053f4:	e008      	b.n	8005408 <HAL_GPIO_DeInit+0x98>
 80053f6:	2307      	movs	r3, #7
 80053f8:	e006      	b.n	8005408 <HAL_GPIO_DeInit+0x98>
 80053fa:	2303      	movs	r3, #3
 80053fc:	e004      	b.n	8005408 <HAL_GPIO_DeInit+0x98>
 80053fe:	2302      	movs	r3, #2
 8005400:	e002      	b.n	8005408 <HAL_GPIO_DeInit+0x98>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_GPIO_DeInit+0x98>
 8005406:	2300      	movs	r3, #0
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	f002 0203 	and.w	r2, r2, #3
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	4093      	lsls	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d132      	bne.n	800547e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	43db      	mvns	r3, r3
 8005420:	4944      	ldr	r1, [pc, #272]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 8005422:	4013      	ands	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005426:	4b43      	ldr	r3, [pc, #268]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	4941      	ldr	r1, [pc, #260]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 8005430:	4013      	ands	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005434:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	43db      	mvns	r3, r3
 800543c:	493d      	ldr	r1, [pc, #244]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 800543e:	4013      	ands	r3, r2
 8005440:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005442:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	43db      	mvns	r3, r3
 800544a:	493a      	ldr	r1, [pc, #232]	; (8005534 <HAL_GPIO_DeInit+0x1c4>)
 800544c:	4013      	ands	r3, r2
 800544e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	220f      	movs	r2, #15
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005460:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_GPIO_DeInit+0x1ac>)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	3302      	adds	r3, #2
 8005468:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	43da      	mvns	r2, r3
 8005470:	482a      	ldr	r0, [pc, #168]	; (800551c <HAL_GPIO_DeInit+0x1ac>)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	400a      	ands	r2, r1
 8005478:	3302      	adds	r3, #2
 800547a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	2103      	movs	r1, #3
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	08da      	lsrs	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3208      	adds	r2, #8
 800549c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	220f      	movs	r2, #15
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	08d2      	lsrs	r2, r2, #3
 80054b4:	4019      	ands	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3208      	adds	r2, #8
 80054ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	2103      	movs	r1, #3
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	2101      	movs	r1, #1
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2103      	movs	r1, #3
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	401a      	ands	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	f67f af40 	bls.w	800538c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40013800 	.word	0x40013800
 8005520:	40020000 	.word	0x40020000
 8005524:	40020400 	.word	0x40020400
 8005528:	40020800 	.word	0x40020800
 800552c:	40020c00 	.word	0x40020c00
 8005530:	40021000 	.word	0x40021000
 8005534:	40013c00 	.word	0x40013c00

08005538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	887b      	ldrh	r3, [r7, #2]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e001      	b.n	800555a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	807b      	strh	r3, [r7, #2]
 8005574:	4613      	mov	r3, r2
 8005576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005578:	787b      	ldrb	r3, [r7, #1]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005584:	e003      	b.n	800558e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	041a      	lsls	r2, r3, #16
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	619a      	str	r2, [r3, #24]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055ac:	887a      	ldrh	r2, [r7, #2]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4013      	ands	r3, r2
 80055b2:	041a      	lsls	r2, r3, #16
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43d9      	mvns	r1, r3
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	400b      	ands	r3, r1
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	619a      	str	r2, [r3, #24]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d006      	beq.n	80055f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fa0e 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40013c00 	.word	0x40013c00

08005600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e12b      	b.n	800586a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fd fae6 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005664:	f003 f822 	bl	80086ac <HAL_RCC_GetPCLK1Freq>
 8005668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4a81      	ldr	r2, [pc, #516]	; (8005874 <HAL_I2C_Init+0x274>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d807      	bhi.n	8005684 <HAL_I2C_Init+0x84>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a80      	ldr	r2, [pc, #512]	; (8005878 <HAL_I2C_Init+0x278>)
 8005678:	4293      	cmp	r3, r2
 800567a:	bf94      	ite	ls
 800567c:	2301      	movls	r3, #1
 800567e:	2300      	movhi	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e006      	b.n	8005692 <HAL_I2C_Init+0x92>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a7d      	ldr	r2, [pc, #500]	; (800587c <HAL_I2C_Init+0x27c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	bf94      	ite	ls
 800568c:	2301      	movls	r3, #1
 800568e:	2300      	movhi	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0e7      	b.n	800586a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a78      	ldr	r2, [pc, #480]	; (8005880 <HAL_I2C_Init+0x280>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	0c9b      	lsrs	r3, r3, #18
 80056a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a6a      	ldr	r2, [pc, #424]	; (8005874 <HAL_I2C_Init+0x274>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d802      	bhi.n	80056d4 <HAL_I2C_Init+0xd4>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3301      	adds	r3, #1
 80056d2:	e009      	b.n	80056e8 <HAL_I2C_Init+0xe8>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	4a69      	ldr	r2, [pc, #420]	; (8005884 <HAL_I2C_Init+0x284>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	099b      	lsrs	r3, r3, #6
 80056e6:	3301      	adds	r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	495c      	ldr	r1, [pc, #368]	; (8005874 <HAL_I2C_Init+0x274>)
 8005704:	428b      	cmp	r3, r1
 8005706:	d819      	bhi.n	800573c <HAL_I2C_Init+0x13c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e59      	subs	r1, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	fbb1 f3f3 	udiv	r3, r1, r3
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800571c:	400b      	ands	r3, r1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_I2C_Init+0x138>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1e59      	subs	r1, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005730:	3301      	adds	r3, #1
 8005732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005736:	e051      	b.n	80057dc <HAL_I2C_Init+0x1dc>
 8005738:	2304      	movs	r3, #4
 800573a:	e04f      	b.n	80057dc <HAL_I2C_Init+0x1dc>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <HAL_I2C_Init+0x168>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1e58      	subs	r0, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	440b      	add	r3, r1
 8005752:	fbb0 f3f3 	udiv	r3, r0, r3
 8005756:	3301      	adds	r3, #1
 8005758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e012      	b.n	800578e <HAL_I2C_Init+0x18e>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1e58      	subs	r0, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6859      	ldr	r1, [r3, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	0099      	lsls	r1, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	fbb0 f3f3 	udiv	r3, r0, r3
 800577e:	3301      	adds	r3, #1
 8005780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Init+0x196>
 8005792:	2301      	movs	r3, #1
 8005794:	e022      	b.n	80057dc <HAL_I2C_Init+0x1dc>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10e      	bne.n	80057bc <HAL_I2C_Init+0x1bc>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1e58      	subs	r0, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	440b      	add	r3, r1
 80057ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	e00f      	b.n	80057dc <HAL_I2C_Init+0x1dc>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1e58      	subs	r0, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	0099      	lsls	r1, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d2:	3301      	adds	r3, #1
 80057d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6809      	ldr	r1, [r1, #0]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800580a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6911      	ldr	r1, [r2, #16]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68d2      	ldr	r2, [r2, #12]
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	430b      	orrs	r3, r1
 800581e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	000186a0 	.word	0x000186a0
 8005878:	001e847f 	.word	0x001e847f
 800587c:	003d08ff 	.word	0x003d08ff
 8005880:	431bde83 	.word	0x431bde83
 8005884:	10624dd3 	.word	0x10624dd3

08005888 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e021      	b.n	80058de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2224      	movs	r2, #36	; 0x24
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fd f9e8 	bl	8002c88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	461a      	mov	r2, r3
 80058f4:	460b      	mov	r3, r1
 80058f6:	817b      	strh	r3, [r7, #10]
 80058f8:	4613      	mov	r3, r2
 80058fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058fc:	f7fd fe50 	bl	80035a0 <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b20      	cmp	r3, #32
 800590c:	f040 80e0 	bne.w	8005ad0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2319      	movs	r3, #25
 8005916:	2201      	movs	r2, #1
 8005918:	4970      	ldr	r1, [pc, #448]	; (8005adc <HAL_I2C_Master_Transmit+0x1f4>)
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fd86 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
 8005928:	e0d3      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_I2C_Master_Transmit+0x50>
 8005934:	2302      	movs	r3, #2
 8005936:	e0cc      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d007      	beq.n	800595e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0201 	orr.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2221      	movs	r2, #33	; 0x21
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2210      	movs	r2, #16
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	893a      	ldrh	r2, [r7, #8]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a50      	ldr	r2, [pc, #320]	; (8005ae0 <HAL_I2C_Master_Transmit+0x1f8>)
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059a0:	8979      	ldrh	r1, [r7, #10]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fbf0 	bl	800618c <I2C_MasterRequestWrite>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e08d      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80059cc:	e066      	b.n	8005a9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fe00 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d107      	bne.n	80059f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06b      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d11b      	bne.n	8005a70 <HAL_I2C_Master_Transmit+0x188>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d017      	beq.n	8005a70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	781a      	ldrb	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	6a39      	ldr	r1, [r7, #32]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fdf0 	bl	800665a <I2C_WaitOnBTFFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d107      	bne.n	8005a98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e01a      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d194      	bne.n	80059ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	00100002 	.word	0x00100002
 8005ae0:	ffff0000 	.word	0xffff0000

08005ae4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08c      	sub	sp, #48	; 0x30
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	461a      	mov	r2, r3
 8005af0:	460b      	mov	r3, r1
 8005af2:	817b      	strh	r3, [r7, #10]
 8005af4:	4613      	mov	r3, r2
 8005af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005af8:	f7fd fd52 	bl	80035a0 <HAL_GetTick>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	f040 820b 	bne.w	8005f22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2319      	movs	r3, #25
 8005b12:	2201      	movs	r2, #1
 8005b14:	497c      	ldr	r1, [pc, #496]	; (8005d08 <HAL_I2C_Master_Receive+0x224>)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fc88 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
 8005b24:	e1fe      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_I2C_Master_Receive+0x50>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e1f7      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d007      	beq.n	8005b5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2222      	movs	r2, #34	; 0x22
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2210      	movs	r2, #16
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	893a      	ldrh	r2, [r7, #8]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a5c      	ldr	r2, [pc, #368]	; (8005d0c <HAL_I2C_Master_Receive+0x228>)
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b9c:	8979      	ldrh	r1, [r7, #10]
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fb74 	bl	8006290 <I2C_MasterRequestRead>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e1b8      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	623b      	str	r3, [r7, #32]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e18c      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d11b      	bne.n	8005c22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e16c      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d11b      	bne.n	8005c62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	e14c      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c88:	e138      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	f200 80f1 	bhi.w	8005e76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d123      	bne.n	8005ce4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fd1b 	bl	80066dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e139      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ce2:	e10b      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d14e      	bne.n	8005d8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4906      	ldr	r1, [pc, #24]	; (8005d10 <HAL_I2C_Master_Receive+0x22c>)
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fb98 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e10e      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
 8005d06:	bf00      	nop
 8005d08:	00100002 	.word	0x00100002
 8005d0c:	ffff0000 	.word	0xffff0000
 8005d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d88:	e0b8      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	2200      	movs	r2, #0
 8005d92:	4966      	ldr	r1, [pc, #408]	; (8005f2c <HAL_I2C_Master_Receive+0x448>)
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fb49 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0bf      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2200      	movs	r2, #0
 8005dee:	494f      	ldr	r1, [pc, #316]	; (8005f2c <HAL_I2C_Master_Receive+0x448>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fb1b 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e091      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e74:	e042      	b.n	8005efc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fc2e 	bl	80066dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e04c      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d118      	bne.n	8005efc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f aec2 	bne.w	8005c8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e000      	b.n	8005f24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f22:	2302      	movs	r3, #2
  }
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3728      	adds	r7, #40	; 0x28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	00010004 	.word	0x00010004

08005f30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f40:	f7fd fb2e 	bl	80035a0 <HAL_GetTick>
 8005f44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	f040 8111 	bne.w	800617a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2319      	movs	r3, #25
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4988      	ldr	r1, [pc, #544]	; (8006184 <HAL_I2C_IsDeviceReady+0x254>)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa62 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e104      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_I2C_IsDeviceReady+0x50>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e0fd      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d007      	beq.n	8005fa6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2224      	movs	r2, #36	; 0x24
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a70      	ldr	r2, [pc, #448]	; (8006188 <HAL_I2C_IsDeviceReady+0x258>)
 8005fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fa20 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00d      	beq.n	800600e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006000:	d103      	bne.n	800600a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0b6      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800601c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800601e:	f7fd fabf 	bl	80035a0 <HAL_GetTick>
 8006022:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006052:	e025      	b.n	80060a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006054:	f7fd faa4 	bl	80035a0 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <HAL_I2C_IsDeviceReady+0x13a>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	22a0      	movs	r2, #160	; 0xa0
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2ba0      	cmp	r3, #160	; 0xa0
 80060aa:	d005      	beq.n	80060b8 <HAL_I2C_IsDeviceReady+0x188>
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <HAL_I2C_IsDeviceReady+0x188>
 80060b2:	7dbb      	ldrb	r3, [r7, #22]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0cd      	beq.n	8006054 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d129      	bne.n	8006122 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2319      	movs	r3, #25
 80060fa:	2201      	movs	r2, #1
 80060fc:	4921      	ldr	r1, [pc, #132]	; (8006184 <HAL_I2C_IsDeviceReady+0x254>)
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f994 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e036      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e02c      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006130:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800613a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	2319      	movs	r3, #25
 8006142:	2201      	movs	r2, #1
 8006144:	490f      	ldr	r1, [pc, #60]	; (8006184 <HAL_I2C_IsDeviceReady+0x254>)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f970 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e012      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3301      	adds	r3, #1
 800615a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	f4ff af32 	bcc.w	8005fca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	00100002 	.word	0x00100002
 8006188:	ffff0000 	.word	0xffff0000

0800618c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	460b      	mov	r3, r1
 800619a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d006      	beq.n	80061b6 <I2C_MasterRequestWrite+0x2a>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d003      	beq.n	80061b6 <I2C_MasterRequestWrite+0x2a>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b4:	d108      	bne.n	80061c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	e00b      	b.n	80061e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	2b12      	cmp	r3, #18
 80061ce:	d107      	bne.n	80061e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f91d 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d103      	bne.n	8006210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e035      	b.n	8006280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621c:	d108      	bne.n	8006230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621e:	897b      	ldrh	r3, [r7, #10]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800622c:	611a      	str	r2, [r3, #16]
 800622e:	e01b      	b.n	8006268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006230:	897b      	ldrh	r3, [r7, #10]
 8006232:	11db      	asrs	r3, r3, #7
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 0306 	and.w	r3, r3, #6
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f063 030f 	orn	r3, r3, #15
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	490e      	ldr	r1, [pc, #56]	; (8006288 <I2C_MasterRequestWrite+0xfc>)
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f943 	bl	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e010      	b.n	8006280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4907      	ldr	r1, [pc, #28]	; (800628c <I2C_MasterRequestWrite+0x100>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f933 	bl	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	00010008 	.word	0x00010008
 800628c:	00010002 	.word	0x00010002

08006290 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	460b      	mov	r3, r1
 800629e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d006      	beq.n	80062ca <I2C_MasterRequestRead+0x3a>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d003      	beq.n	80062ca <I2C_MasterRequestRead+0x3a>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062c8:	d108      	bne.n	80062dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e00b      	b.n	80062f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b11      	cmp	r3, #17
 80062e2:	d107      	bne.n	80062f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f893 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631a:	d103      	bne.n	8006324 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e079      	b.n	800641c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006330:	d108      	bne.n	8006344 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006332:	897b      	ldrh	r3, [r7, #10]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	611a      	str	r2, [r3, #16]
 8006342:	e05f      	b.n	8006404 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006344:	897b      	ldrh	r3, [r7, #10]
 8006346:	11db      	asrs	r3, r3, #7
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0306 	and.w	r3, r3, #6
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f063 030f 	orn	r3, r3, #15
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4930      	ldr	r1, [pc, #192]	; (8006424 <I2C_MasterRequestRead+0x194>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f8b9 	bl	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e054      	b.n	800641c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4929      	ldr	r1, [pc, #164]	; (8006428 <I2C_MasterRequestRead+0x198>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f8a9 	bl	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e044      	b.n	800641c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f831 	bl	800642c <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00d      	beq.n	80063ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063de:	d103      	bne.n	80063e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e017      	b.n	800641c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063ec:	897b      	ldrh	r3, [r7, #10]
 80063ee:	11db      	asrs	r3, r3, #7
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0306 	and.w	r3, r3, #6
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f063 030e 	orn	r3, r3, #14
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4907      	ldr	r1, [pc, #28]	; (8006428 <I2C_MasterRequestRead+0x198>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f865 	bl	80064da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	00010008 	.word	0x00010008
 8006428:	00010002 	.word	0x00010002

0800642c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	4613      	mov	r3, r2
 800643a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800643c:	e025      	b.n	800648a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d021      	beq.n	800648a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fd f8ab 	bl	80035a0 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e023      	b.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10d      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	43da      	mvns	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	e00c      	b.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	43da      	mvns	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d0b6      	beq.n	800643e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064e8:	e051      	b.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f8:	d123      	bne.n	8006542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f043 0204 	orr.w	r2, r3, #4
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e046      	b.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d021      	beq.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fd f829 	bl	80035a0 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e020      	b.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	0c1b      	lsrs	r3, r3, #16
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10c      	bne.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	43da      	mvns	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4013      	ands	r3, r2
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bf14      	ite	ne
 80065aa:	2301      	movne	r3, #1
 80065ac:	2300      	moveq	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	e00b      	b.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	43da      	mvns	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4013      	ands	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d18d      	bne.n	80064ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e4:	e02d      	b.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8ce 	bl	8006788 <I2C_IsAcknowledgeFailed>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e02d      	b.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d021      	beq.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fc ffcf 	bl	80035a0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d116      	bne.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f043 0220 	orr.w	r2, r3, #32
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e007      	b.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d1ca      	bne.n	80065e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006666:	e02d      	b.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f88d 	bl	8006788 <I2C_IsAcknowledgeFailed>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e02d      	b.n	80066d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d021      	beq.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006680:	f7fc ff8e 	bl	80035a0 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	d302      	bcc.n	8006696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d116      	bne.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e007      	b.n	80066d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d1ca      	bne.n	8006668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e8:	e042      	b.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d119      	bne.n	800672c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0210 	mvn.w	r2, #16
 8006700:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e029      	b.n	8006780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672c:	f7fc ff38 	bl	80035a0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	d302      	bcc.n	8006742 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d116      	bne.n	8006770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e007      	b.n	8006780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b40      	cmp	r3, #64	; 0x40
 800677c:	d1b5      	bne.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679e:	d11b      	bne.n	80067d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	f043 0204 	orr.w	r2, r3, #4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e8:	b08f      	sub	sp, #60	; 0x3c
 80067ea:	af0a      	add	r7, sp, #40	; 0x28
 80067ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e10f      	b.n	8006a18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f013 ff88 	bl	801a728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2203      	movs	r2, #3
 800681c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f006 fc45 	bl	800d0c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	687e      	ldr	r6, [r7, #4]
 8006844:	466d      	mov	r5, sp
 8006846:	f106 0410 	add.w	r4, r6, #16
 800684a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800684c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800684e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006852:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006856:	e885 0003 	stmia.w	r5, {r0, r1}
 800685a:	1d33      	adds	r3, r6, #4
 800685c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f006 fb1c 	bl	800ce9c <USB_CoreInit>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e0d0      	b.n	8006a18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f006 fc33 	bl	800d0e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e04a      	b.n	800691e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006888:	7bfa      	ldrb	r2, [r7, #15]
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	333d      	adds	r3, #61	; 0x3d
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800689c:	7bfa      	ldrb	r2, [r7, #15]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	333c      	adds	r3, #60	; 0x3c
 80068ac:	7bfa      	ldrb	r2, [r7, #15]
 80068ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	b298      	uxth	r0, r3
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	3344      	adds	r3, #68	; 0x44
 80068c4:	4602      	mov	r2, r0
 80068c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068c8:	7bfa      	ldrb	r2, [r7, #15]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	3340      	adds	r3, #64	; 0x40
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068dc:	7bfa      	ldrb	r2, [r7, #15]
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	3348      	adds	r3, #72	; 0x48
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068f0:	7bfa      	ldrb	r2, [r7, #15]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	334c      	adds	r3, #76	; 0x4c
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006904:	7bfa      	ldrb	r2, [r7, #15]
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3354      	adds	r3, #84	; 0x54
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	3301      	adds	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
 800691e:	7bfa      	ldrb	r2, [r7, #15]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d3af      	bcc.n	8006888 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e044      	b.n	80069b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006944:	7bfa      	ldrb	r2, [r7, #15]
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006956:	7bfa      	ldrb	r2, [r7, #15]
 8006958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800695a:	7bfa      	ldrb	r2, [r7, #15]
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006970:	7bfa      	ldrb	r2, [r7, #15]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006986:	7bfa      	ldrb	r2, [r7, #15]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800699c:	7bfa      	ldrb	r2, [r7, #15]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	3301      	adds	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	7bfa      	ldrb	r2, [r7, #15]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3b5      	bcc.n	800692e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	687e      	ldr	r6, [r7, #4]
 80069ca:	466d      	mov	r5, sp
 80069cc:	f106 0410 	add.w	r4, r6, #16
 80069d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80069e0:	1d33      	adds	r3, r6, #4
 80069e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f006 fbcb 	bl	800d180 <USB_DevInit>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e00d      	b.n	8006a18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f007 fd69 	bl	800e4e8 <USB_DevDisconnect>

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a20 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e015      	b.n	8006a5e <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2203      	movs	r2, #3
 8006a36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f007 fcbc 	bl	800e3bc <USB_StopDevice>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e007      	b.n	8006a5e <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f013 fee2 	bl	801a818 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_PCD_Start+0x1c>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e020      	b.n	8006ac4 <HAL_PCD_Start+0x5e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d109      	bne.n	8006aa6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d005      	beq.n	8006aa6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f006 fafa 	bl	800d0a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f007 fcf6 	bl	800e4a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_PCD_Stop+0x1c>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e026      	b.n	8006b36 <HAL_PCD_Stop+0x6a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f006 fae6 	bl	800d0c6 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f007 fcf2 	bl	800e4e8 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2110      	movs	r1, #16
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f006 fc9c 	bl	800d448 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d109      	bne.n	8006b2c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d005      	beq.n	8006b2c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b3e:	b590      	push	{r4, r7, lr}
 8006b40:	b08d      	sub	sp, #52	; 0x34
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f007 fd7b 	bl	800e650 <USB_GetMode>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 848a 	bne.w	8007476 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f007 fcdf 	bl	800e52a <USB_ReadInterrupts>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8480 	beq.w	8007474 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f007 fccc 	bl	800e52a <USB_ReadInterrupts>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f002 0202 	and.w	r2, r2, #2
 8006baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f007 fcba 	bl	800e52a <USB_ReadInterrupts>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d161      	bne.n	8006c84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0210 	bic.w	r2, r2, #16
 8006bce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	4613      	mov	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	0c5b      	lsrs	r3, r3, #17
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d124      	bne.n	8006c46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d035      	beq.n	8006c74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6a38      	ldr	r0, [r7, #32]
 8006c1c:	f007 faa2 	bl	800e164 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	091b      	lsrs	r3, r3, #4
 8006c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c2c:	441a      	add	r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3e:	441a      	add	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	621a      	str	r2, [r3, #32]
 8006c44:	e016      	b.n	8006c74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	0c5b      	lsrs	r3, r3, #17
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	d110      	bne.n	8006c74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c58:	2208      	movs	r2, #8
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6a38      	ldr	r0, [r7, #32]
 8006c5e:	f007 fa81 	bl	800e164 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6e:	441a      	add	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0210 	orr.w	r2, r2, #16
 8006c82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f007 fc4e 	bl	800e52a <USB_ReadInterrupts>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c98:	f040 80a7 	bne.w	8006dea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f007 fc53 	bl	800e550 <USB_ReadDevAllOutEpInterrupt>
 8006caa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006cac:	e099      	b.n	8006de2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 808e 	beq.w	8006dd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f007 fc77 	bl	800e5b8 <USB_ReadDevOutEPInterrupt>
 8006cca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fef0 	bl	8007ad0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	461a      	mov	r2, r3
 8006d08:	2308      	movs	r3, #8
 8006d0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ffc6 	bl	8007ca0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d030      	beq.n	8006d9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b80      	cmp	r3, #128	; 0x80
 8006d44:	d109      	bne.n	8006d5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d108      	bne.n	8006d8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f013 fe1b 	bl	801a9c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	2302      	movs	r3, #2
 8006d9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	461a      	mov	r2, r3
 8006db4:	2320      	movs	r3, #32
 8006db6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	3301      	adds	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f af62 	bne.w	8006cae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f007 fb9b 	bl	800e52a <USB_ReadInterrupts>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dfe:	f040 80db 	bne.w	8006fb8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f007 fbbc 	bl	800e584 <USB_ReadDevAllInEpInterrupt>
 8006e0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006e12:	e0cd      	b.n	8006fb0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80c2 	beq.w	8006fa4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f007 fbe2 	bl	800e5f4 <USB_ReadDevInEPInterrupt>
 8006e30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d057      	beq.n	8006eec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	2201      	movs	r2, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	69f9      	ldr	r1, [r7, #28]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2301      	movs	r3, #1
 8006e70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d132      	bne.n	8006ee0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	4613      	mov	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	334c      	adds	r3, #76	; 0x4c
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4403      	add	r3, r0
 8006e9a:	3348      	adds	r3, #72	; 0x48
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4419      	add	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4403      	add	r3, r0
 8006eae:	334c      	adds	r3, #76	; 0x4c
 8006eb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d113      	bne.n	8006ee0 <HAL_PCD_IRQHandler+0x3a2>
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3354      	adds	r3, #84	; 0x54
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2101      	movs	r1, #1
 8006edc:	f007 fbea 	bl	800e6b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f013 fce5 	bl	801a8b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d008      	beq.n	8006f08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	461a      	mov	r2, r3
 8006f04:	2308      	movs	r3, #8
 8006f06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d008      	beq.n	8006f24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2310      	movs	r3, #16
 8006f22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d023      	beq.n	8006f92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f4c:	6a38      	ldr	r0, [r7, #32]
 8006f4e:	f006 fa7b 	bl	800d448 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	3338      	adds	r3, #56	; 0x38
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4413      	add	r3, r2
 8006f62:	3304      	adds	r3, #4
 8006f64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	78db      	ldrb	r3, [r3, #3]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d108      	bne.n	8006f80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f013 fd32 	bl	801a9e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2302      	movs	r3, #2
 8006f90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fd08 	bl	80079b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f47f af2e 	bne.w	8006e14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f007 fab4 	bl	800e52a <USB_ReadInterrupts>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fcc:	d122      	bne.n	8007014 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d108      	bne.n	8006ffe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fef0 	bl	8007ddc <HAL_PCDEx_LPM_Callback>
 8006ffc:	e002      	b.n	8007004 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f013 fcd0 	bl	801a9a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f007 fa86 	bl	800e52a <USB_ReadInterrupts>
 800701e:	4603      	mov	r3, r0
 8007020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007028:	d112      	bne.n	8007050 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b01      	cmp	r3, #1
 8007038:	d102      	bne.n	8007040 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f013 fc8c 	bl	801a958 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800704e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f007 fa68 	bl	800e52a <USB_ReadInterrupts>
 800705a:	4603      	mov	r3, r0
 800705c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007064:	f040 80b7 	bne.w	80071d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2110      	movs	r1, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f006 f9e0 	bl	800d448 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007088:	2300      	movs	r3, #0
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800708c:	e046      	b.n	800711c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	461a      	mov	r2, r3
 800709c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	461a      	mov	r2, r3
 80070d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007114:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	3301      	adds	r3, #1
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007122:	429a      	cmp	r2, r3
 8007124:	d3b3      	bcc.n	800708e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007134:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007138:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	2b00      	cmp	r3, #0
 8007140:	d016      	beq.n	8007170 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007152:	f043 030b 	orr.w	r3, r3, #11
 8007156:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007168:	f043 030b 	orr.w	r3, r3, #11
 800716c:	6453      	str	r3, [r2, #68]	; 0x44
 800716e:	e015      	b.n	800719c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007182:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007186:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007196:	f043 030b 	orr.w	r3, r3, #11
 800719a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071c0:	461a      	mov	r2, r3
 80071c2:	f007 fa77 	bl	800e6b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80071d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f007 f9a5 	bl	800e52a <USB_ReadInterrupts>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ea:	d124      	bne.n	8007236 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f007 fa3b 	bl	800e66c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f006 f9a1 	bl	800d542 <USB_GetDevSpeed>
 8007200:	4603      	mov	r3, r0
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681c      	ldr	r4, [r3, #0]
 800720c:	f001 fa42 	bl	8008694 <HAL_RCC_GetHCLKFreq>
 8007210:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007216:	b2db      	uxtb	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	4620      	mov	r0, r4
 800721c:	f005 fea0 	bl	800cf60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f013 fb70 	bl	801a906 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007234:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f007 f975 	bl	800e52a <USB_ReadInterrupts>
 8007240:	4603      	mov	r3, r0
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b08      	cmp	r3, #8
 8007248:	d10a      	bne.n	8007260 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f013 fb4d 	bl	801a8ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f002 0208 	and.w	r2, r2, #8
 800725e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f007 f960 	bl	800e52a <USB_ReadInterrupts>
 800726a:	4603      	mov	r3, r0
 800726c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007270:	2b80      	cmp	r3, #128	; 0x80
 8007272:	d122      	bne.n	80072ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007280:	2301      	movs	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
 8007284:	e014      	b.n	80072b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	4613      	mov	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb27 	bl	80078f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	3301      	adds	r3, #1
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3e5      	bcc.n	8007286 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f007 f933 	bl	800e52a <USB_ReadInterrupts>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ce:	d13b      	bne.n	8007348 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072d0:	2301      	movs	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
 80072d4:	e02b      	b.n	800732e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3340      	adds	r3, #64	; 0x40
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d115      	bne.n	8007328 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80072fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da12      	bge.n	8007328 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007306:	4613      	mov	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	333f      	adds	r3, #63	; 0x3f
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fae8 	bl	80078f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	3301      	adds	r3, #1
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	429a      	cmp	r2, r3
 8007336:	d3ce      	bcc.n	80072d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f007 f8ec 	bl	800e52a <USB_ReadInterrupts>
 8007352:	4603      	mov	r3, r0
 8007354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800735c:	d155      	bne.n	800740a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800735e:	2301      	movs	r3, #1
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
 8007362:	e045      	b.n	80073f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d12e      	bne.n	80073ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800738c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800738e:	2b00      	cmp	r3, #0
 8007390:	da2b      	bge.n	80073ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800739e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d121      	bne.n	80073ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073aa:	4613      	mov	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073e6:	6053      	str	r3, [r2, #4]
            break;
 80073e8:	e007      	b.n	80073fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	3301      	adds	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3b4      	bcc.n	8007364 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f007 f88b 	bl	800e52a <USB_ReadInterrupts>
 8007414:	4603      	mov	r3, r0
 8007416:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741e:	d10a      	bne.n	8007436 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f013 faf1 	bl	801aa08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f007 f875 	bl	800e52a <USB_ReadInterrupts>
 8007440:	4603      	mov	r3, r0
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b04      	cmp	r3, #4
 8007448:	d115      	bne.n	8007476 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f013 fae1 	bl	801aa24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6859      	ldr	r1, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	e000      	b.n	8007476 <HAL_PCD_IRQHandler+0x938>
      return;
 8007474:	bf00      	nop
    }
  }
}
 8007476:	3734      	adds	r7, #52	; 0x34
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}

0800747c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_PCD_SetAddress+0x1a>
 8007492:	2302      	movs	r3, #2
 8007494:	e013      	b.n	80074be <HAL_PCD_SetAddress+0x42>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f006 ffd3 	bl	800e45a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	461a      	mov	r2, r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	70fb      	strb	r3, [r7, #3]
 80074d8:	460b      	mov	r3, r1
 80074da:	803b      	strh	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da0f      	bge.n	800750c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	3338      	adds	r3, #56	; 0x38
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	705a      	strb	r2, [r3, #1]
 800750a:	e00f      	b.n	800752c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	f003 020f 	and.w	r2, r3, #15
 8007512:	4613      	mov	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007538:	883a      	ldrh	r2, [r7, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	78ba      	ldrb	r2, [r7, #2]
 8007542:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007556:	78bb      	ldrb	r3, [r7, #2]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d102      	bne.n	8007562 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_PCD_EP_Open+0xaa>
 800756c:	2302      	movs	r3, #2
 800756e:	e00e      	b.n	800758e <HAL_PCD_EP_Open+0xc8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	4618      	mov	r0, r3
 8007580:	f006 f804 	bl	800d58c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800758c:	7afb      	ldrb	r3, [r7, #11]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da0f      	bge.n	80075ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	3338      	adds	r3, #56	; 0x38
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	3304      	adds	r3, #4
 80075c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	705a      	strb	r2, [r3, #1]
 80075c8:	e00f      	b.n	80075ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	f003 020f 	and.w	r2, r3, #15
 80075d0:	4613      	mov	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_PCD_EP_Close+0x6e>
 8007600:	2302      	movs	r3, #2
 8007602:	e00e      	b.n	8007622 <HAL_PCD_EP_Close+0x8c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	4618      	mov	r0, r3
 8007614:	f006 f842 	bl	800d69c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	460b      	mov	r3, r1
 8007638:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	f003 020f 	and.w	r2, r3, #15
 8007640:	4613      	mov	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	3304      	adds	r3, #4
 8007652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2200      	movs	r2, #0
 8007664:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	b2da      	uxtb	r2, r3
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d102      	bne.n	8007686 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	6979      	ldr	r1, [r7, #20]
 800769e:	f006 fb21 	bl	800dce4 <USB_EP0StartXfer>
 80076a2:	e008      	b.n	80076b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	6979      	ldr	r1, [r7, #20]
 80076b2:	f006 f8cf 	bl	800d854 <USB_EPStartXfer>
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 020f 	and.w	r2, r3, #15
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80076e2:	681b      	ldr	r3, [r3, #0]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	460b      	mov	r3, r1
 80076fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	f003 020f 	and.w	r2, r3, #15
 8007706:	4613      	mov	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	3338      	adds	r3, #56	; 0x38
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	3304      	adds	r3, #4
 8007716:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2200      	movs	r2, #0
 8007728:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2201      	movs	r2, #1
 800772e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	b2da      	uxtb	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d102      	bne.n	800774a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	f006 fabf 	bl	800dce4 <USB_EP0StartXfer>
 8007766:	e008      	b.n	800777a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	6979      	ldr	r1, [r7, #20]
 8007776:	f006 f86d 	bl	800d854 <USB_EPStartXfer>
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	f003 020f 	and.w	r2, r3, #15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d901      	bls.n	80077a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e050      	b.n	8007844 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da0f      	bge.n	80077ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	3338      	adds	r3, #56	; 0x38
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	3304      	adds	r3, #4
 80077c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	705a      	strb	r2, [r3, #1]
 80077c8:	e00d      	b.n	80077e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	4413      	add	r3, r2
 80077dc:	3304      	adds	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <HAL_PCD_EP_SetStall+0x82>
 8007802:	2302      	movs	r3, #2
 8007804:	e01e      	b.n	8007844 <HAL_PCD_EP_SetStall+0xc0>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	4618      	mov	r0, r3
 8007816:	f006 fcfd 	bl	800e214 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	b2d9      	uxtb	r1, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007834:	461a      	mov	r2, r3
 8007836:	f006 ff3d 	bl	800e6b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	f003 020f 	and.w	r2, r3, #15
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	429a      	cmp	r2, r3
 8007864:	d901      	bls.n	800786a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e042      	b.n	80078f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800786a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da0f      	bge.n	8007892 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	3338      	adds	r3, #56	; 0x38
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	3304      	adds	r3, #4
 8007888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	705a      	strb	r2, [r3, #1]
 8007890:	e00f      	b.n	80078b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	4613      	mov	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	3304      	adds	r3, #4
 80078aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d101      	bne.n	80078d2 <HAL_PCD_EP_ClrStall+0x86>
 80078ce:	2302      	movs	r3, #2
 80078d0:	e00e      	b.n	80078f0 <HAL_PCD_EP_ClrStall+0xa4>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f006 fd05 	bl	800e2f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0c      	bge.n	8007926 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	4613      	mov	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3338      	adds	r3, #56	; 0x38
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e00c      	b.n	8007940 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	f003 020f 	and.w	r2, r3, #15
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4413      	add	r3, r2
 800793c:	3304      	adds	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	4618      	mov	r0, r3
 8007948:	f006 fb24 	bl	800df94 <USB_EPStopXfer>
 800794c:	4603      	mov	r3, r0
 800794e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007950:	7afb      	ldrb	r3, [r7, #11]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_PCD_EP_Flush+0x1a>
 8007970:	2302      	movs	r3, #2
 8007972:	e01b      	b.n	80079ac <HAL_PCD_EP_Flush+0x52>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800797c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007980:	2b00      	cmp	r3, #0
 8007982:	da09      	bge.n	8007998 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f005 fd59 	bl	800d448 <USB_FlushTxFifo>
 8007996:	e004      	b.n	80079a2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f005 fd87 	bl	800d4b0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	3338      	adds	r3, #56	; 0x38
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	3304      	adds	r3, #4
 80079da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1a      	ldr	r2, [r3, #32]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d901      	bls.n	80079ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e06c      	b.n	8007ac6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d902      	bls.n	8007a08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3303      	adds	r3, #3
 8007a0c:	089b      	lsrs	r3, r3, #2
 8007a0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a10:	e02b      	b.n	8007a6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d902      	bls.n	8007a2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3303      	adds	r3, #3
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6919      	ldr	r1, [r3, #16]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6978      	ldr	r0, [r7, #20]
 8007a4e:	f006 fb4b 	bl	800e0e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d809      	bhi.n	8007a94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d203      	bcs.n	8007a94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1be      	bne.n	8007a12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d811      	bhi.n	8007ac4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	333c      	adds	r3, #60	; 0x3c
 8007ae8:	3304      	adds	r3, #4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d17b      	bne.n	8007bfe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d015      	beq.n	8007b3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4a61      	ldr	r2, [pc, #388]	; (8007c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	f240 80b9 	bls.w	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80b3 	beq.w	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	461a      	mov	r2, r3
 8007b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b38:	6093      	str	r3, [r2, #8]
 8007b3a:	e0a7      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	2320      	movs	r3, #32
 8007b56:	6093      	str	r3, [r2, #8]
 8007b58:	e098      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8093 	bne.w	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4a4b      	ldr	r2, [pc, #300]	; (8007c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d90f      	bls.n	8007b8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8a:	6093      	str	r3, [r2, #8]
 8007b8c:	e07e      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	0159      	lsls	r1, r3, #5
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	440b      	add	r3, r1
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bba:	1ad2      	subs	r2, r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d114      	bne.n	8007bf0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bd8:	461a      	mov	r2, r3
 8007bda:	2101      	movs	r1, #1
 8007bdc:	f006 fd6a 	bl	800e6b4 <USB_EP0_OutStart>
 8007be0:	e006      	b.n	8007bf0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	441a      	add	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f012 fe42 	bl	801a880 <HAL_PCD_DataOutStageCallback>
 8007bfc:	e046      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4a26      	ldr	r2, [pc, #152]	; (8007c9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d124      	bne.n	8007c50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c22:	6093      	str	r3, [r2, #8]
 8007c24:	e032      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2320      	movs	r3, #32
 8007c40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f012 fe19 	bl	801a880 <HAL_PCD_DataOutStageCallback>
 8007c4e:	e01d      	b.n	8007c8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d114      	bne.n	8007c80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d108      	bne.n	8007c80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f006 fd1a 	bl	800e6b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f012 fdfa 	bl	801a880 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	4f54300a 	.word	0x4f54300a
 8007c9c:	4f54310a 	.word	0x4f54310a

08007ca0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	333c      	adds	r3, #60	; 0x3c
 8007cb8:	3304      	adds	r3, #4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d90e      	bls.n	8007cf4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d009      	beq.n	8007cf4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cec:	461a      	mov	r2, r3
 8007cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f012 fdb1 	bl	801a85c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d90c      	bls.n	8007d1c <PCD_EP_OutSetupPacket_int+0x7c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d108      	bne.n	8007d1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d14:	461a      	mov	r2, r3
 8007d16:	2101      	movs	r1, #1
 8007d18:	f006 fccc 	bl	800e6b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	4f54300a 	.word	0x4f54300a

08007d2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d107      	bne.n	8007d5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d4a:	883b      	ldrh	r3, [r7, #0]
 8007d4c:	0419      	lsls	r1, r3, #16
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	629a      	str	r2, [r3, #40]	; 0x28
 8007d58:	e028      	b.n	8007dac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	0c1b      	lsrs	r3, r3, #16
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	4413      	add	r3, r2
 8007d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e00d      	b.n	8007d8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	3340      	adds	r3, #64	; 0x40
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	3301      	adds	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]
 8007d8a:	7bfa      	ldrb	r2, [r7, #15]
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d3ec      	bcc.n	8007d6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d94:	883b      	ldrh	r3, [r7, #0]
 8007d96:	0418      	lsls	r0, r3, #16
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6819      	ldr	r1, [r3, #0]
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	4302      	orrs	r2, r0
 8007da4:	3340      	adds	r3, #64	; 0x40
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	887a      	ldrh	r2, [r7, #2]
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8007e00:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x50>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f023 0203 	bic.w	r2, r3, #3
 8007e08:	490e      	ldr	r1, [pc, #56]	; (8007e44 <HAL_PWR_EnterSTOPMode+0x50>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007e10:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <HAL_PWR_EnterSTOPMode+0x54>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	4a0c      	ldr	r2, [pc, #48]	; (8007e48 <HAL_PWR_EnterSTOPMode+0x54>)
 8007e16:	f043 0304 	orr.w	r3, r3, #4
 8007e1a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007e22:	bf30      	wfi
 8007e24:	e002      	b.n	8007e2c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007e26:	bf40      	sev
    __WFE();
 8007e28:	bf20      	wfe
    __WFE();
 8007e2a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <HAL_PWR_EnterSTOPMode+0x54>)
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <HAL_PWR_EnterSTOPMode+0x54>)
 8007e32:	f023 0304 	bic.w	r3, r3, #4
 8007e36:	6113      	str	r3, [r2, #16]
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40007000 	.word	0x40007000
 8007e48:	e000ed00 	.word	0xe000ed00

08007e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e267      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d075      	beq.n	8007f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e6a:	4b88      	ldr	r3, [pc, #544]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 030c 	and.w	r3, r3, #12
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d00c      	beq.n	8007e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e76:	4b85      	ldr	r3, [pc, #532]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d112      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e82:	4b82      	ldr	r3, [pc, #520]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8e:	d10b      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e90:	4b7e      	ldr	r3, [pc, #504]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d05b      	beq.n	8007f54 <HAL_RCC_OscConfig+0x108>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d157      	bne.n	8007f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e242      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb0:	d106      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x74>
 8007eb2:	4b76      	ldr	r3, [pc, #472]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a75      	ldr	r2, [pc, #468]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	e01d      	b.n	8007efc <HAL_RCC_OscConfig+0xb0>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x98>
 8007eca:	4b70      	ldr	r3, [pc, #448]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a6f      	ldr	r2, [pc, #444]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	4b6d      	ldr	r3, [pc, #436]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a6c      	ldr	r2, [pc, #432]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	e00b      	b.n	8007efc <HAL_RCC_OscConfig+0xb0>
 8007ee4:	4b69      	ldr	r3, [pc, #420]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a68      	ldr	r2, [pc, #416]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	4b66      	ldr	r3, [pc, #408]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a65      	ldr	r2, [pc, #404]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d013      	beq.n	8007f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f04:	f7fb fb4c 	bl	80035a0 <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f0c:	f7fb fb48 	bl	80035a0 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b64      	cmp	r3, #100	; 0x64
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e207      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1e:	4b5b      	ldr	r3, [pc, #364]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0xc0>
 8007f2a:	e014      	b.n	8007f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2c:	f7fb fb38 	bl	80035a0 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f34:	f7fb fb34 	bl	80035a0 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b64      	cmp	r3, #100	; 0x64
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e1f3      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f46:	4b51      	ldr	r3, [pc, #324]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0xe8>
 8007f52:	e000      	b.n	8007f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d063      	beq.n	800802a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f62:	4b4a      	ldr	r3, [pc, #296]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f6e:	4b47      	ldr	r3, [pc, #284]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d11c      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f7a:	4b44      	ldr	r3, [pc, #272]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d116      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f86:	4b41      	ldr	r3, [pc, #260]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_RCC_OscConfig+0x152>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d001      	beq.n	8007f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e1c7      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9e:	4b3b      	ldr	r3, [pc, #236]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4937      	ldr	r1, [pc, #220]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb2:	e03a      	b.n	800802a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d020      	beq.n	8007ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fbc:	4b34      	ldr	r3, [pc, #208]	; (8008090 <HAL_RCC_OscConfig+0x244>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fb faed 	bl	80035a0 <HAL_GetTick>
 8007fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fca:	f7fb fae9 	bl	80035a0 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e1a8      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f0      	beq.n	8007fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe8:	4b28      	ldr	r3, [pc, #160]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	4925      	ldr	r1, [pc, #148]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	600b      	str	r3, [r1, #0]
 8007ffc:	e015      	b.n	800802a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <HAL_RCC_OscConfig+0x244>)
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008004:	f7fb facc 	bl	80035a0 <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800800c:	f7fb fac8 	bl	80035a0 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e187      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f0      	bne.n	800800c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d036      	beq.n	80080a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800803e:	4b15      	ldr	r3, [pc, #84]	; (8008094 <HAL_RCC_OscConfig+0x248>)
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008044:	f7fb faac 	bl	80035a0 <HAL_GetTick>
 8008048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800804c:	f7fb faa8 	bl	80035a0 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e167      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <HAL_RCC_OscConfig+0x240>)
 8008060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HAL_RCC_OscConfig+0x200>
 800806a:	e01b      	b.n	80080a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <HAL_RCC_OscConfig+0x248>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008072:	f7fb fa95 	bl	80035a0 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008078:	e00e      	b.n	8008098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800807a:	f7fb fa91 	bl	80035a0 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d907      	bls.n	8008098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e150      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
 800808c:	40023800 	.word	0x40023800
 8008090:	42470000 	.word	0x42470000
 8008094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008098:	4b88      	ldr	r3, [pc, #544]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800809a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1ea      	bne.n	800807a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8097 	beq.w	80081e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080b6:	4b81      	ldr	r3, [pc, #516]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10f      	bne.n	80080e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	4b7d      	ldr	r3, [pc, #500]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	4a7c      	ldr	r2, [pc, #496]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80080cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d0:	6413      	str	r3, [r2, #64]	; 0x40
 80080d2:	4b7a      	ldr	r3, [pc, #488]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080da:	60bb      	str	r3, [r7, #8]
 80080dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080de:	2301      	movs	r3, #1
 80080e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e2:	4b77      	ldr	r3, [pc, #476]	; (80082c0 <HAL_RCC_OscConfig+0x474>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d118      	bne.n	8008120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080ee:	4b74      	ldr	r3, [pc, #464]	; (80082c0 <HAL_RCC_OscConfig+0x474>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a73      	ldr	r2, [pc, #460]	; (80082c0 <HAL_RCC_OscConfig+0x474>)
 80080f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080fa:	f7fb fa51 	bl	80035a0 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008102:	f7fb fa4d 	bl	80035a0 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e10c      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008114:	4b6a      	ldr	r3, [pc, #424]	; (80082c0 <HAL_RCC_OscConfig+0x474>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d106      	bne.n	8008136 <HAL_RCC_OscConfig+0x2ea>
 8008128:	4b64      	ldr	r3, [pc, #400]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	4a63      	ldr	r2, [pc, #396]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800812e:	f043 0301 	orr.w	r3, r3, #1
 8008132:	6713      	str	r3, [r2, #112]	; 0x70
 8008134:	e01c      	b.n	8008170 <HAL_RCC_OscConfig+0x324>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b05      	cmp	r3, #5
 800813c:	d10c      	bne.n	8008158 <HAL_RCC_OscConfig+0x30c>
 800813e:	4b5f      	ldr	r3, [pc, #380]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	4a5e      	ldr	r2, [pc, #376]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008144:	f043 0304 	orr.w	r3, r3, #4
 8008148:	6713      	str	r3, [r2, #112]	; 0x70
 800814a:	4b5c      	ldr	r3, [pc, #368]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	4a5b      	ldr	r2, [pc, #364]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	6713      	str	r3, [r2, #112]	; 0x70
 8008156:	e00b      	b.n	8008170 <HAL_RCC_OscConfig+0x324>
 8008158:	4b58      	ldr	r3, [pc, #352]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800815a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815c:	4a57      	ldr	r2, [pc, #348]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	6713      	str	r3, [r2, #112]	; 0x70
 8008164:	4b55      	ldr	r3, [pc, #340]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008168:	4a54      	ldr	r2, [pc, #336]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 800816a:	f023 0304 	bic.w	r3, r3, #4
 800816e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d015      	beq.n	80081a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008178:	f7fb fa12 	bl	80035a0 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800817e:	e00a      	b.n	8008196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008180:	f7fb fa0e 	bl	80035a0 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	f241 3288 	movw	r2, #5000	; 0x1388
 800818e:	4293      	cmp	r3, r2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e0cb      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008196:	4b49      	ldr	r3, [pc, #292]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0ee      	beq.n	8008180 <HAL_RCC_OscConfig+0x334>
 80081a2:	e014      	b.n	80081ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081a4:	f7fb f9fc 	bl	80035a0 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081aa:	e00a      	b.n	80081c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ac:	f7fb f9f8 	bl	80035a0 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0b5      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081c2:	4b3e      	ldr	r3, [pc, #248]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1ee      	bne.n	80081ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d105      	bne.n	80081e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081d4:	4b39      	ldr	r3, [pc, #228]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	4a38      	ldr	r2, [pc, #224]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80081da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80a1 	beq.w	800832c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081ea:	4b34      	ldr	r3, [pc, #208]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 030c 	and.w	r3, r3, #12
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d05c      	beq.n	80082b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d141      	bne.n	8008282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fe:	4b31      	ldr	r3, [pc, #196]	; (80082c4 <HAL_RCC_OscConfig+0x478>)
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008204:	f7fb f9cc 	bl	80035a0 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820c:	f7fb f9c8 	bl	80035a0 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e087      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821e:	4b27      	ldr	r3, [pc, #156]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f0      	bne.n	800820c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69da      	ldr	r2, [r3, #28]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	019b      	lsls	r3, r3, #6
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	3b01      	subs	r3, #1
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	061b      	lsls	r3, r3, #24
 800824e:	491b      	ldr	r1, [pc, #108]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008250:	4313      	orrs	r3, r2
 8008252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008254:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <HAL_RCC_OscConfig+0x478>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825a:	f7fb f9a1 	bl	80035a0 <HAL_GetTick>
 800825e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008262:	f7fb f99d 	bl	80035a0 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e05c      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008274:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <HAL_RCC_OscConfig+0x416>
 8008280:	e054      	b.n	800832c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008282:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <HAL_RCC_OscConfig+0x478>)
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008288:	f7fb f98a 	bl	80035a0 <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008290:	f7fb f986 	bl	80035a0 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e045      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <HAL_RCC_OscConfig+0x470>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0x444>
 80082ae:	e03d      	b.n	800832c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d107      	bne.n	80082c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e038      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
 80082bc:	40023800 	.word	0x40023800
 80082c0:	40007000 	.word	0x40007000
 80082c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <HAL_RCC_OscConfig+0x4ec>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d028      	beq.n	8008328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d121      	bne.n	8008328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d11a      	bne.n	8008328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082f8:	4013      	ands	r3, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008300:	4293      	cmp	r3, r2
 8008302:	d111      	bne.n	8008328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	3b01      	subs	r3, #1
 8008312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008314:	429a      	cmp	r2, r3
 8008316:	d107      	bne.n	8008328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008324:	429a      	cmp	r2, r3
 8008326:	d001      	beq.n	800832c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40023800 	.word	0x40023800

0800833c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e0cc      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008350:	4b68      	ldr	r3, [pc, #416]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d90c      	bls.n	8008378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800835e:	4b65      	ldr	r3, [pc, #404]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008366:	4b63      	ldr	r3, [pc, #396]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d001      	beq.n	8008378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e0b8      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d020      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008390:	4b59      	ldr	r3, [pc, #356]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4a58      	ldr	r2, [pc, #352]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800839a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083a8:	4b53      	ldr	r3, [pc, #332]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	4a52      	ldr	r2, [pc, #328]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b4:	4b50      	ldr	r3, [pc, #320]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	494d      	ldr	r1, [pc, #308]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d044      	beq.n	800845c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d107      	bne.n	80083ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083da:	4b47      	ldr	r3, [pc, #284]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d119      	bne.n	800841a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e07f      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d003      	beq.n	80083fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d107      	bne.n	800840a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083fa:	4b3f      	ldr	r3, [pc, #252]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e06f      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800840a:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e067      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800841a:	4b37      	ldr	r3, [pc, #220]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f023 0203 	bic.w	r2, r3, #3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	4934      	ldr	r1, [pc, #208]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008428:	4313      	orrs	r3, r2
 800842a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800842c:	f7fb f8b8 	bl	80035a0 <HAL_GetTick>
 8008430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008432:	e00a      	b.n	800844a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008434:	f7fb f8b4 	bl	80035a0 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008442:	4293      	cmp	r3, r2
 8008444:	d901      	bls.n	800844a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e04f      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844a:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 020c 	and.w	r2, r3, #12
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	429a      	cmp	r2, r3
 800845a:	d1eb      	bne.n	8008434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800845c:	4b25      	ldr	r3, [pc, #148]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d20c      	bcs.n	8008484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008472:	4b20      	ldr	r3, [pc, #128]	; (80084f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	429a      	cmp	r2, r3
 800847e:	d001      	beq.n	8008484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e032      	b.n	80084ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d008      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008490:	4b19      	ldr	r3, [pc, #100]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4916      	ldr	r1, [pc, #88]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084ae:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	490e      	ldr	r1, [pc, #56]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084c2:	f000 f821 	bl	8008508 <HAL_RCC_GetSysClockFreq>
 80084c6:	4602      	mov	r2, r0
 80084c8:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	091b      	lsrs	r3, r3, #4
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	490a      	ldr	r1, [pc, #40]	; (80084fc <HAL_RCC_ClockConfig+0x1c0>)
 80084d4:	5ccb      	ldrb	r3, [r1, r3]
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	4a09      	ldr	r2, [pc, #36]	; (8008500 <HAL_RCC_ClockConfig+0x1c4>)
 80084dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084de:	4b09      	ldr	r3, [pc, #36]	; (8008504 <HAL_RCC_ClockConfig+0x1c8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fb f818 	bl	8003518 <HAL_InitTick>

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40023c00 	.word	0x40023c00
 80084f8:	40023800 	.word	0x40023800
 80084fc:	08021528 	.word	0x08021528
 8008500:	20000048 	.word	0x20000048
 8008504:	2000004c 	.word	0x2000004c

08008508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800850c:	b090      	sub	sp, #64	; 0x40
 800850e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
 8008514:	2300      	movs	r3, #0
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008518:	2300      	movs	r3, #0
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008520:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 030c 	and.w	r3, r3, #12
 8008528:	2b08      	cmp	r3, #8
 800852a:	d00d      	beq.n	8008548 <HAL_RCC_GetSysClockFreq+0x40>
 800852c:	2b08      	cmp	r3, #8
 800852e:	f200 80a1 	bhi.w	8008674 <HAL_RCC_GetSysClockFreq+0x16c>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_RCC_GetSysClockFreq+0x34>
 8008536:	2b04      	cmp	r3, #4
 8008538:	d003      	beq.n	8008542 <HAL_RCC_GetSysClockFreq+0x3a>
 800853a:	e09b      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800853c:	4b53      	ldr	r3, [pc, #332]	; (800868c <HAL_RCC_GetSysClockFreq+0x184>)
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008540:	e09b      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008542:	4b53      	ldr	r3, [pc, #332]	; (8008690 <HAL_RCC_GetSysClockFreq+0x188>)
 8008544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008546:	e098      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008548:	4b4f      	ldr	r3, [pc, #316]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008552:	4b4d      	ldr	r3, [pc, #308]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d028      	beq.n	80085b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800855e:	4b4a      	ldr	r3, [pc, #296]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	2200      	movs	r2, #0
 8008566:	623b      	str	r3, [r7, #32]
 8008568:	627a      	str	r2, [r7, #36]	; 0x24
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008570:	2100      	movs	r1, #0
 8008572:	4b47      	ldr	r3, [pc, #284]	; (8008690 <HAL_RCC_GetSysClockFreq+0x188>)
 8008574:	fb03 f201 	mul.w	r2, r3, r1
 8008578:	2300      	movs	r3, #0
 800857a:	fb00 f303 	mul.w	r3, r0, r3
 800857e:	4413      	add	r3, r2
 8008580:	4a43      	ldr	r2, [pc, #268]	; (8008690 <HAL_RCC_GetSysClockFreq+0x188>)
 8008582:	fba0 1202 	umull	r1, r2, r0, r2
 8008586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008588:	460a      	mov	r2, r1
 800858a:	62ba      	str	r2, [r7, #40]	; 0x28
 800858c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800858e:	4413      	add	r3, r2
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	2200      	movs	r2, #0
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	61fa      	str	r2, [r7, #28]
 800859a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800859e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80085a2:	f7f8 fb89 	bl	8000cb8 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4613      	mov	r3, r2
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ae:	e053      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085b0:	4b35      	ldr	r3, [pc, #212]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	099b      	lsrs	r3, r3, #6
 80085b6:	2200      	movs	r2, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	617a      	str	r2, [r7, #20]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80085c2:	f04f 0b00 	mov.w	fp, #0
 80085c6:	4652      	mov	r2, sl
 80085c8:	465b      	mov	r3, fp
 80085ca:	f04f 0000 	mov.w	r0, #0
 80085ce:	f04f 0100 	mov.w	r1, #0
 80085d2:	0159      	lsls	r1, r3, #5
 80085d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085d8:	0150      	lsls	r0, r2, #5
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	ebb2 080a 	subs.w	r8, r2, sl
 80085e2:	eb63 090b 	sbc.w	r9, r3, fp
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80085f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80085f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80085fa:	ebb2 0408 	subs.w	r4, r2, r8
 80085fe:	eb63 0509 	sbc.w	r5, r3, r9
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	00eb      	lsls	r3, r5, #3
 800860c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008610:	00e2      	lsls	r2, r4, #3
 8008612:	4614      	mov	r4, r2
 8008614:	461d      	mov	r5, r3
 8008616:	eb14 030a 	adds.w	r3, r4, sl
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	eb45 030b 	adc.w	r3, r5, fp
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800862e:	4629      	mov	r1, r5
 8008630:	028b      	lsls	r3, r1, #10
 8008632:	4621      	mov	r1, r4
 8008634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008638:	4621      	mov	r1, r4
 800863a:	028a      	lsls	r2, r1, #10
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	2200      	movs	r2, #0
 8008644:	60bb      	str	r3, [r7, #8]
 8008646:	60fa      	str	r2, [r7, #12]
 8008648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800864c:	f7f8 fb34 	bl	8000cb8 <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4613      	mov	r3, r2
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_GetSysClockFreq+0x180>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	3301      	adds	r3, #1
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008670:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008672:	e002      	b.n	800867a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008674:	4b05      	ldr	r3, [pc, #20]	; (800868c <HAL_RCC_GetSysClockFreq+0x184>)
 8008676:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800867c:	4618      	mov	r0, r3
 800867e:	3740      	adds	r7, #64	; 0x40
 8008680:	46bd      	mov	sp, r7
 8008682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008686:	bf00      	nop
 8008688:	40023800 	.word	0x40023800
 800868c:	00f42400 	.word	0x00f42400
 8008690:	017d7840 	.word	0x017d7840

08008694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008698:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800869a:	681b      	ldr	r3, [r3, #0]
}
 800869c:	4618      	mov	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000048 	.word	0x20000048

080086ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086b0:	f7ff fff0 	bl	8008694 <HAL_RCC_GetHCLKFreq>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4b05      	ldr	r3, [pc, #20]	; (80086cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	0a9b      	lsrs	r3, r3, #10
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	4903      	ldr	r1, [pc, #12]	; (80086d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c2:	5ccb      	ldrb	r3, [r1, r3]
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40023800 	.word	0x40023800
 80086d0:	08021538 	.word	0x08021538

080086d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086d8:	f7ff ffdc 	bl	8008694 <HAL_RCC_GetHCLKFreq>
 80086dc:	4602      	mov	r2, r0
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	0b5b      	lsrs	r3, r3, #13
 80086e4:	f003 0307 	and.w	r3, r3, #7
 80086e8:	4903      	ldr	r1, [pc, #12]	; (80086f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ea:	5ccb      	ldrb	r3, [r1, r3]
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	40023800 	.word	0x40023800
 80086f8:	08021538 	.word	0x08021538

080086fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d105      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008720:	2b00      	cmp	r3, #0
 8008722:	d035      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008724:	4b67      	ldr	r3, [pc, #412]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800872a:	f7fa ff39 	bl	80035a0 <HAL_GetTick>
 800872e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008730:	e008      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008732:	f7fa ff35 	bl	80035a0 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e0ba      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008744:	4b60      	ldr	r3, [pc, #384]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	019a      	lsls	r2, r3, #6
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	071b      	lsls	r3, r3, #28
 800875c:	495a      	ldr	r1, [pc, #360]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008764:	4b57      	ldr	r3, [pc, #348]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800876a:	f7fa ff19 	bl	80035a0 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008770:	e008      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008772:	f7fa ff15 	bl	80035a0 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e09a      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008784:	4b50      	ldr	r3, [pc, #320]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0f0      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8083 	beq.w	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	4b49      	ldr	r3, [pc, #292]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	4a48      	ldr	r2, [pc, #288]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6413      	str	r3, [r2, #64]	; 0x40
 80087ae:	4b46      	ldr	r3, [pc, #280]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087ba:	4b44      	ldr	r3, [pc, #272]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a43      	ldr	r2, [pc, #268]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087c6:	f7fa feeb 	bl	80035a0 <HAL_GetTick>
 80087ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087cc:	e008      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087ce:	f7fa fee7 	bl	80035a0 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e06c      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087e0:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087ec:	4b36      	ldr	r3, [pc, #216]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02f      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	429a      	cmp	r2, r3
 8008808:	d028      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800880a:	4b2f      	ldr	r3, [pc, #188]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008814:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800881a:	4b2d      	ldr	r3, [pc, #180]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008820:	4a29      	ldr	r2, [pc, #164]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008826:	4b28      	ldr	r3, [pc, #160]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b01      	cmp	r3, #1
 8008830:	d114      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008832:	f7fa feb5 	bl	80035a0 <HAL_GetTick>
 8008836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008838:	e00a      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800883a:	f7fa feb1 	bl	80035a0 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	f241 3288 	movw	r2, #5000	; 0x1388
 8008848:	4293      	cmp	r3, r2
 800884a:	d901      	bls.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e034      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0ee      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008868:	d10d      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800886a:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800887a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887e:	4912      	ldr	r1, [pc, #72]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008880:	4313      	orrs	r3, r2
 8008882:	608b      	str	r3, [r1, #8]
 8008884:	e005      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008886:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	4a0f      	ldr	r2, [pc, #60]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800888c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008890:	6093      	str	r3, [r2, #8]
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008894:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800889e:	490a      	ldr	r1, [pc, #40]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7c1a      	ldrb	r2, [r3, #16]
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80088b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	42470068 	.word	0x42470068
 80088c8:	40023800 	.word	0x40023800
 80088cc:	40007000 	.word	0x40007000
 80088d0:	42470e40 	.word	0x42470e40
 80088d4:	424711e0 	.word	0x424711e0

080088d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e066      	b.n	80089bc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7f5b      	ldrb	r3, [r3, #29]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d105      	bne.n	8008904 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fa f9e6 	bl	8002cd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	22ca      	movs	r2, #202	; 0xca
 8008910:	625a      	str	r2, [r3, #36]	; 0x24
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2253      	movs	r2, #83	; 0x53
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fbce 	bl	80090bc <RTC_EnterInitMode>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d12c      	bne.n	8008984 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800893c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6899      	ldr	r1, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68d2      	ldr	r2, [r2, #12]
 8008964:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6919      	ldr	r1, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	041a      	lsls	r2, r3, #16
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fbd5 	bl	800912a <RTC_ExitInitMode>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d113      	bne.n	80089b2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008998:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	22ff      	movs	r2, #255	; 0xff
 80089b8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	7f1b      	ldrb	r3, [r3, #28]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <HAL_RTC_SetTime+0x1c>
 80089dc:	2302      	movs	r3, #2
 80089de:	e087      	b.n	8008af0 <HAL_RTC_SetTime+0x12c>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2202      	movs	r2, #2
 80089ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d126      	bne.n	8008a40 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fbb2 	bl	8009174 <RTC_ByteToBcd2>
 8008a10:	4603      	mov	r3, r0
 8008a12:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fbab 	bl	8009174 <RTC_ByteToBcd2>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a22:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	789b      	ldrb	r3, [r3, #2]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fba3 	bl	8009174 <RTC_ByteToBcd2>
 8008a2e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	78db      	ldrb	r3, [r3, #3]
 8008a38:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	e018      	b.n	8008a72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d102      	bne.n	8008a54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2200      	movs	r2, #0
 8008a52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a60:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	22ca      	movs	r2, #202	; 0xca
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2253      	movs	r2, #83	; 0x53
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fb1a 	bl	80090bc <RTC_EnterInitMode>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a8c:	7cfb      	ldrb	r3, [r7, #19]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d120      	bne.n	8008ad4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a9c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008aa0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ab0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6899      	ldr	r1, [r3, #8]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fb2d 	bl	800912a <RTC_ExitInitMode>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008ad4:	7cfb      	ldrb	r3, [r7, #19]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	771a      	strb	r2, [r3, #28]

  return status;
 8008aee:	7cfb      	ldrb	r3, [r7, #19]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd90      	pop	{r4, r7, pc}

08008af8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	0c1b      	lsrs	r3, r3, #16
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	0d9b      	lsrs	r3, r3, #22
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11a      	bne.n	8008baa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fb18 	bl	80091ae <RTC_Bcd2ToByte>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fb0f 	bl	80091ae <RTC_Bcd2ToByte>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fb06 	bl	80091ae <RTC_Bcd2ToByte>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	7f1b      	ldrb	r3, [r3, #28]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_RTC_SetDate+0x1c>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e071      	b.n	8008cb4 <HAL_RTC_SetDate+0x100>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10e      	bne.n	8008c00 <HAL_RTC_SetDate+0x4c>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	330a      	adds	r3, #10
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d11c      	bne.n	8008c40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	78db      	ldrb	r3, [r3, #3]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fab2 	bl	8009174 <RTC_ByteToBcd2>
 8008c10:	4603      	mov	r3, r0
 8008c12:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 faab 	bl	8009174 <RTC_ByteToBcd2>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c22:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 faa3 	bl	8009174 <RTC_ByteToBcd2>
 8008c2e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c30:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	e00e      	b.n	8008c5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	78db      	ldrb	r3, [r3, #3]
 8008c44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c4c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	22ca      	movs	r2, #202	; 0xca
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2253      	movs	r2, #83	; 0x53
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fa24 	bl	80090bc <RTC_EnterInitMode>
 8008c74:	4603      	mov	r3, r0
 8008c76:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c78:	7cfb      	ldrb	r3, [r7, #19]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10c      	bne.n	8008c98 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fa4b 	bl	800912a <RTC_ExitInitMode>
 8008c94:	4603      	mov	r3, r0
 8008c96:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c98:	7cfb      	ldrb	r3, [r7, #19]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	22ff      	movs	r2, #255	; 0xff
 8008caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	771a      	strb	r2, [r3, #28]

  return status;
 8008cb2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd90      	pop	{r4, r7, pc}

08008cbc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	0a1b      	lsrs	r3, r3, #8
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	0b5b      	lsrs	r3, r3, #13
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d11a      	bne.n	8008d50 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	78db      	ldrb	r3, [r3, #3]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fa45 	bl	80091ae <RTC_Bcd2ToByte>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fa3c 	bl	80091ae <RTC_Bcd2ToByte>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	789b      	ldrb	r3, [r3, #2]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fa33 	bl	80091ae <RTC_Bcd2ToByte>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d5c:	b590      	push	{r4, r7, lr}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008d68:	4b9a      	ldr	r3, [pc, #616]	; (8008fd4 <HAL_RTC_SetAlarm_IT+0x278>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a9a      	ldr	r2, [pc, #616]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	0adb      	lsrs	r3, r3, #11
 8008d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d78:	fb02 f303 	mul.w	r3, r2, r3
 8008d7c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7f1b      	ldrb	r3, [r3, #28]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_RTC_SetAlarm_IT+0x36>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e11c      	b.n	8008fcc <HAL_RTC_SetAlarm_IT+0x270>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d137      	bne.n	8008e14 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2200      	movs	r2, #0
 8008db6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f9d9 	bl	8009174 <RTC_ByteToBcd2>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 f9d2 	bl	8009174 <RTC_ByteToBcd2>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008dd4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	789b      	ldrb	r3, [r3, #2]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f9ca 	bl	8009174 <RTC_ByteToBcd2>
 8008de0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008de2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008dec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f9bc 	bl	8009174 <RTC_ByteToBcd2>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	e023      	b.n	8008e5c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e34:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	78db      	ldrb	r3, [r3, #3]
 8008e40:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e4a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008e4c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008e52:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	22ca      	movs	r2, #202	; 0xca
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2253      	movs	r2, #83	; 0x53
 8008e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e80:	d141      	bne.n	8008f06 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e90:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ea2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	617a      	str	r2, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10b      	bne.n	8008ec6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	22ff      	movs	r2, #255	; 0xff
 8008eb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e082      	b.n	8008fcc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0e7      	beq.n	8008ea4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ef2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	e04b      	b.n	8008f9e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f14:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008f26:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008f28:	4b2a      	ldr	r3, [pc, #168]	; (8008fd4 <HAL_RTC_SetAlarm_IT+0x278>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a2a      	ldr	r2, [pc, #168]	; (8008fd8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	0adb      	lsrs	r3, r3, #11
 8008f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f38:	fb02 f303 	mul.w	r3, r2, r3
 8008f3c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	617a      	str	r2, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10b      	bne.n	8008f60 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	22ff      	movs	r2, #255	; 0xff
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2203      	movs	r2, #3
 8008f54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e035      	b.n	8008fcc <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0e7      	beq.n	8008f3e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f9c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <HAL_RTC_SetAlarm_IT+0x280>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a0e      	ldr	r2, [pc, #56]	; (8008fdc <HAL_RTC_SetAlarm_IT+0x280>)
 8008fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008faa:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <HAL_RTC_SetAlarm_IT+0x280>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	4a0b      	ldr	r2, [pc, #44]	; (8008fdc <HAL_RTC_SetAlarm_IT+0x280>)
 8008fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	22ff      	movs	r2, #255	; 0xff
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3724      	adds	r7, #36	; 0x24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd90      	pop	{r4, r7, pc}
 8008fd4:	20000048 	.word	0x20000048
 8008fd8:	10624dd3 	.word	0x10624dd3
 8008fdc:	40013c00 	.word	0x40013c00

08008fe0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d012      	beq.n	800901c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7f9 fd39 	bl	8002a7c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	b2da      	uxtb	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800901a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d012      	beq.n	8009050 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f8d4 	bl	80091e6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800904e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009052:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009056:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	775a      	strb	r2, [r3, #29]
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40013c00 	.word	0x40013c00

0800906c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009086:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009088:	f7fa fa8a 	bl	80035a0 <HAL_GetTick>
 800908c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800908e:	e009      	b.n	80090a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009090:	f7fa fa86 	bl	80035a0 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800909e:	d901      	bls.n	80090a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e007      	b.n	80090b4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0ee      	beq.n	8009090 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d122      	bne.n	8009120 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090ea:	f7fa fa59 	bl	80035a0 <HAL_GetTick>
 80090ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80090f0:	e00c      	b.n	800910c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090f2:	f7fa fa55 	bl	80035a0 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009100:	d904      	bls.n	800910c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2204      	movs	r2, #4
 8009106:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <RTC_EnterInitMode+0x64>
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d1e8      	bne.n	80090f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009144:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff89 	bl	800906c <HAL_RTC_WaitForSynchro>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2204      	movs	r2, #4
 8009164:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009182:	e005      	b.n	8009190 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	3301      	adds	r3, #1
 8009188:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	3b0a      	subs	r3, #10
 800918e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	2b09      	cmp	r3, #9
 8009194:	d8f6      	bhi.n	8009184 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	b2da      	uxtb	r2, r3
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	4313      	orrs	r3, r2
 80091a0:	b2db      	uxtb	r3, r3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	4603      	mov	r3, r0
 80091b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	091b      	lsrs	r3, r3, #4
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	461a      	mov	r2, r3
 80091c4:	0092      	lsls	r2, r2, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4413      	add	r3, r2
 80091d8:	b2db      	uxtb	r3, r3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e022      	b.n	8009252 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7f9 fd8a 	bl	8002d38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2203      	movs	r2, #3
 8009228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f815 	bl	800925c <HAL_SD_InitCard>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e00a      	b.n	8009252 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b08e      	sub	sp, #56	; 0x38
 8009260:	af04      	add	r7, sp, #16
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009274:	2300      	movs	r3, #0
 8009276:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009278:	2376      	movs	r3, #118	; 0x76
 800927a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681d      	ldr	r5, [r3, #0]
 8009280:	466c      	mov	r4, sp
 8009282:	f107 0314 	add.w	r3, r7, #20
 8009286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800928a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009294:	4628      	mov	r0, r5
 8009296:	f003 f8cf 	bl	800c438 <SDIO_Init>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80092a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e04f      	b.n	800934c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80092ac:	4b29      	ldr	r3, [pc, #164]	; (8009354 <HAL_SD_InitCard+0xf8>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f003 f907 	bl	800c4ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80092bc:	4b25      	ldr	r3, [pc, #148]	; (8009354 <HAL_SD_InitCard+0xf8>)
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80092c2:	2002      	movs	r0, #2
 80092c4:	f7fa f978 	bl	80035b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fe69 	bl	8009fa0 <SD_PowerON>
 80092ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e02e      	b.n	800934c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fd88 	bl	8009e04 <SD_InitCard>
 80092f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	431a      	orrs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e01b      	b.n	800934c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800931c:	4618      	mov	r0, r3
 800931e:	f003 f966 	bl	800c5ee <SDMMC_CmdBlockLength>
 8009322:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00f      	beq.n	800934a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a0a      	ldr	r2, [pc, #40]	; (8009358 <HAL_SD_InitCard+0xfc>)
 8009330:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3728      	adds	r7, #40	; 0x28
 8009350:	46bd      	mov	sp, r7
 8009352:	bdb0      	pop	{r4, r5, r7, pc}
 8009354:	422580a0 	.word	0x422580a0
 8009358:	004005ff 	.word	0x004005ff

0800935c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b092      	sub	sp, #72	; 0x48
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800936a:	f7fa f919 	bl	80035a0 <HAL_GetTick>
 800936e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d107      	bne.n	800938e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e1bd      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b01      	cmp	r3, #1
 8009398:	f040 81b0 	bne.w	80096fc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80093a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	441a      	add	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d907      	bls.n	80093c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e1a4      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2203      	movs	r2, #3
 80093c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2200      	movs	r2, #0
 80093ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d002      	beq.n	80093de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	025b      	lsls	r3, r3, #9
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093de:	f04f 33ff 	mov.w	r3, #4294967295
 80093e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	025b      	lsls	r3, r3, #9
 80093e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80093ea:	2390      	movs	r3, #144	; 0x90
 80093ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80093ee:	2302      	movs	r3, #2
 80093f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f107 0214 	add.w	r2, r7, #20
 8009402:	4611      	mov	r1, r2
 8009404:	4618      	mov	r0, r3
 8009406:	f003 f8c6 	bl	800c596 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d90a      	bls.n	8009426 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2202      	movs	r2, #2
 8009414:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800941c:	4618      	mov	r0, r3
 800941e:	f003 f92a 	bl	800c676 <SDMMC_CmdReadMultiBlock>
 8009422:	6478      	str	r0, [r7, #68]	; 0x44
 8009424:	e009      	b.n	800943a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009432:	4618      	mov	r0, r3
 8009434:	f003 f8fd 	bl	800c632 <SDMMC_CmdReadSingleBlock>
 8009438:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800943a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943c:	2b00      	cmp	r3, #0
 800943e:	d012      	beq.n	8009466 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a7a      	ldr	r2, [pc, #488]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800944c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800944e:	431a      	orrs	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e151      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800946a:	e061      	b.n	8009530 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d03c      	beq.n	80094f4 <HAL_SD_ReadBlocks+0x198>
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d039      	beq.n	80094f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009480:	2300      	movs	r3, #0
 8009482:	643b      	str	r3, [r7, #64]	; 0x40
 8009484:	e033      	b.n	80094ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f002 ffff 	bl	800c48e <SDIO_ReadFIFO>
 8009490:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	b2da      	uxtb	r2, r3
 8009496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009498:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	3301      	adds	r3, #1
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a2:	3b01      	subs	r3, #1
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	0a1b      	lsrs	r3, r3, #8
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80094b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b2:	3301      	adds	r3, #1
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b8:	3b01      	subs	r3, #1
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	3301      	adds	r3, #1
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ce:	3b01      	subs	r3, #1
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	3301      	adds	r3, #1
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	3b01      	subs	r3, #1
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80094e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ea:	3301      	adds	r3, #1
 80094ec:	643b      	str	r3, [r7, #64]	; 0x40
 80094ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	d9c8      	bls.n	8009486 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80094f4:	f7fa f854 	bl	80035a0 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009500:	429a      	cmp	r2, r3
 8009502:	d902      	bls.n	800950a <HAL_SD_ReadBlocks+0x1ae>
 8009504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009506:	2b00      	cmp	r3, #0
 8009508:	d112      	bne.n	8009530 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a48      	ldr	r2, [pc, #288]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e0ec      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009536:	f240 332a 	movw	r3, #810	; 0x32a
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d095      	beq.n	800946c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	2b00      	cmp	r3, #0
 800954c:	d022      	beq.n	8009594 <HAL_SD_ReadBlocks+0x238>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d91f      	bls.n	8009594 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009558:	2b03      	cmp	r3, #3
 800955a:	d01b      	beq.n	8009594 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f003 f8ef 	bl	800c744 <SDMMC_CmdStopTransfer>
 8009566:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800956a:	2b00      	cmp	r3, #0
 800956c:	d012      	beq.n	8009594 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a2f      	ldr	r2, [pc, #188]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957c:	431a      	orrs	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e0ba      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d012      	beq.n	80095c8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a22      	ldr	r2, [pc, #136]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	f043 0208 	orr.w	r2, r3, #8
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0a0      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d012      	beq.n	80095fc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a15      	ldr	r2, [pc, #84]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	f043 0202 	orr.w	r2, r3, #2
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e086      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b00      	cmp	r3, #0
 8009608:	d063      	beq.n	80096d2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a08      	ldr	r2, [pc, #32]	; (8009630 <HAL_SD_ReadBlocks+0x2d4>)
 8009610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	f043 0220 	orr.w	r2, r3, #32
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e06c      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
 8009630:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4618      	mov	r0, r3
 800963a:	f002 ff28 	bl	800c48e <SDIO_ReadFIFO>
 800963e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009642:	b2da      	uxtb	r2, r3
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	3301      	adds	r3, #1
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800964e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009650:	3b01      	subs	r3, #1
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b2da      	uxtb	r2, r3
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009660:	3301      	adds	r3, #1
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009666:	3b01      	subs	r3, #1
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	3301      	adds	r3, #1
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967c:	3b01      	subs	r3, #1
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	0e1b      	lsrs	r3, r3, #24
 8009684:	b2da      	uxtb	r2, r3
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800968a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968c:	3301      	adds	r3, #1
 800968e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009692:	3b01      	subs	r3, #1
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009696:	f7f9 ff83 	bl	80035a0 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d902      	bls.n	80096ac <HAL_SD_ReadBlocks+0x350>
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d112      	bne.n	80096d2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a18      	ldr	r2, [pc, #96]	; (8009714 <HAL_SD_ReadBlocks+0x3b8>)
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e01b      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_SD_ReadBlocks+0x38a>
 80096e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1a6      	bne.n	8009634 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e006      	b.n	800970a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
  }
}
 800970a:	4618      	mov	r0, r3
 800970c:	3748      	adds	r7, #72	; 0x48
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	004005ff 	.word	0x004005ff

08009718 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b092      	sub	sp, #72	; 0x48
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009726:	f7f9 ff3b 	bl	80035a0 <HAL_GetTick>
 800972a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d107      	bne.n	800974a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e166      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b01      	cmp	r3, #1
 8009754:	f040 8159 	bne.w	8009a0a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800975e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	441a      	add	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	429a      	cmp	r2, r3
 800976a:	d907      	bls.n	800977c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e14d      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2203      	movs	r2, #3
 8009780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2200      	movs	r2, #0
 800978a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009790:	2b01      	cmp	r3, #1
 8009792:	d002      	beq.n	800979a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	025b      	lsls	r3, r3, #9
 8009798:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800979a:	f04f 33ff 	mov.w	r3, #4294967295
 800979e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	025b      	lsls	r3, r3, #9
 80097a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80097a6:	2390      	movs	r3, #144	; 0x90
 80097a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80097aa:	2300      	movs	r3, #0
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f107 0218 	add.w	r2, r7, #24
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 fee8 	bl	800c596 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d90a      	bls.n	80097e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 ff90 	bl	800c6fe <SDMMC_CmdWriteMultiBlock>
 80097de:	6478      	str	r0, [r7, #68]	; 0x44
 80097e0:	e009      	b.n	80097f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2210      	movs	r2, #16
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ee:	4618      	mov	r0, r3
 80097f0:	f002 ff63 	bl	800c6ba <SDMMC_CmdWriteSingleBlock>
 80097f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d012      	beq.n	8009822 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a87      	ldr	r2, [pc, #540]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 8009802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980a:	431a      	orrs	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e0fa      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009826:	e065      	b.n	80098f4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d040      	beq.n	80098b8 <HAL_SD_WriteBlocks+0x1a0>
 8009836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d03d      	beq.n	80098b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800983c:	2300      	movs	r3, #0
 800983e:	643b      	str	r3, [r7, #64]	; 0x40
 8009840:	e037      	b.n	80098b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984a:	3301      	adds	r3, #1
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800984e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009850:	3b01      	subs	r3, #1
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	021a      	lsls	r2, r3, #8
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009862:	3301      	adds	r3, #1
 8009864:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009868:	3b01      	subs	r3, #1
 800986a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	041a      	lsls	r2, r3, #16
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987a:	3301      	adds	r3, #1
 800987c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800987e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009880:	3b01      	subs	r3, #1
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	061a      	lsls	r2, r3, #24
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009892:	3301      	adds	r3, #1
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009898:	3b01      	subs	r3, #1
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f107 0214 	add.w	r2, r7, #20
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f002 fdfe 	bl	800c4a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80098ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ae:	3301      	adds	r3, #1
 80098b0:	643b      	str	r3, [r7, #64]	; 0x40
 80098b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b4:	2b07      	cmp	r3, #7
 80098b6:	d9c4      	bls.n	8009842 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80098b8:	f7f9 fe72 	bl	80035a0 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d902      	bls.n	80098ce <HAL_SD_WriteBlocks+0x1b6>
 80098c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d112      	bne.n	80098f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a53      	ldr	r2, [pc, #332]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098dc:	431a      	orrs	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e091      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098fa:	f240 331a 	movw	r3, #794	; 0x31a
 80098fe:	4013      	ands	r3, r2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d091      	beq.n	8009828 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d022      	beq.n	8009958 <HAL_SD_WriteBlocks+0x240>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d91f      	bls.n	8009958 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	2b03      	cmp	r3, #3
 800991e:	d01b      	beq.n	8009958 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f002 ff0d 	bl	800c744 <SDMMC_CmdStopTransfer>
 800992a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800992c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800992e:	2b00      	cmp	r3, #0
 8009930:	d012      	beq.n	8009958 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a3a      	ldr	r2, [pc, #232]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009940:	431a      	orrs	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e05f      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d012      	beq.n	800998c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2d      	ldr	r2, [pc, #180]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009972:	f043 0208 	orr.w	r2, r3, #8
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e045      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d012      	beq.n	80099c0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a20      	ldr	r2, [pc, #128]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f043 0202 	orr.w	r2, r3, #2
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e02b      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c6:	f003 0310 	and.w	r3, r3, #16
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d012      	beq.n	80099f4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a13      	ldr	r2, [pc, #76]	; (8009a20 <HAL_SD_WriteBlocks+0x308>)
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f043 0210 	orr.w	r2, r3, #16
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e011      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e006      	b.n	8009a18 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
  }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3748      	adds	r7, #72	; 0x48
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	004005ff 	.word	0x004005ff

08009a24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a32:	0f9b      	lsrs	r3, r3, #30
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a3e:	0e9b      	lsrs	r3, r3, #26
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a50:	0e1b      	lsrs	r3, r3, #24
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0303 	and.w	r3, r3, #3
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a84:	0d1b      	lsrs	r3, r3, #20
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a90:	0c1b      	lsrs	r3, r3, #16
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa2:	0bdb      	lsrs	r3, r3, #15
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ab4:	0b9b      	lsrs	r3, r3, #14
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac6:	0b5b      	lsrs	r3, r3, #13
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ad8:	0b1b      	lsrs	r3, r3, #12
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d163      	bne.n	8009bbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af8:	009a      	lsls	r2, r3, #2
 8009afa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009afe:	4013      	ands	r3, r2
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009b04:	0f92      	lsrs	r2, r2, #30
 8009b06:	431a      	orrs	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	0edb      	lsrs	r3, r3, #27
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0307 	and.w	r3, r3, #7
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b22:	0e1b      	lsrs	r3, r3, #24
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f003 0307 	and.w	r3, r3, #7
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	0d5b      	lsrs	r3, r3, #21
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b46:	0c9b      	lsrs	r3, r3, #18
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b58:	0bdb      	lsrs	r3, r3, #15
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 0307 	and.w	r3, r3, #7
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	7e1b      	ldrb	r3, [r3, #24]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009b86:	fb03 f202 	mul.w	r2, r3, r2
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	7a1b      	ldrb	r3, [r3, #8]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	2201      	movs	r2, #1
 8009b9a:	409a      	lsls	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009ba8:	0a52      	lsrs	r2, r2, #9
 8009baa:	fb03 f202 	mul.w	r2, r3, r2
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bb8:	661a      	str	r2, [r3, #96]	; 0x60
 8009bba:	e031      	b.n	8009c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d11d      	bne.n	8009c00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	3301      	adds	r3, #1
 8009be0:	029a      	lsls	r2, r3, #10
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	661a      	str	r2, [r3, #96]	; 0x60
 8009bfe:	e00f      	b.n	8009c20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a58      	ldr	r2, [pc, #352]	; (8009d68 <HAL_SD_GetCardCSD+0x344>)
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e09d      	b.n	8009d5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c24:	0b9b      	lsrs	r3, r3, #14
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c36:	09db      	lsrs	r3, r3, #7
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	0fdb      	lsrs	r3, r3, #31
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	0f5b      	lsrs	r3, r3, #29
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	0e9b      	lsrs	r3, r3, #26
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	0d9b      	lsrs	r3, r3, #22
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	0d5b      	lsrs	r3, r3, #21
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	0c1b      	lsrs	r3, r3, #16
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	0bdb      	lsrs	r3, r3, #15
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cde:	0b9b      	lsrs	r3, r3, #14
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf2:	0b5b      	lsrs	r3, r3, #13
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	0b1b      	lsrs	r3, r3, #12
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	0a9b      	lsrs	r3, r3, #10
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	004005ff 	.word	0x004005ff

08009d6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009dd0:	f107 030c 	add.w	r3, r7, #12
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f970 	bl	800a0bc <SD_SendStatus>
 8009ddc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	0a5b      	lsrs	r3, r3, #9
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009dfa:	693b      	ldr	r3, [r7, #16]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e04:	b5b0      	push	{r4, r5, r7, lr}
 8009e06:	b094      	sub	sp, #80	; 0x50
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f002 fb66 	bl	800c4e6 <SDIO_GetPowerState>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e24:	e0b8      	b.n	8009f98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d02f      	beq.n	8009e8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f002 fd4d 	bl	800c8d2 <SDMMC_CmdSendCID>
 8009e38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <SD_InitCard+0x40>
    {
      return errorstate;
 8009e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e42:	e0a9      	b.n	8009f98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f002 fb90 	bl	800c570 <SDIO_GetResponse>
 8009e50:	4602      	mov	r2, r0
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2104      	movs	r1, #4
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fb87 	bl	800c570 <SDIO_GetResponse>
 8009e62:	4602      	mov	r2, r0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2108      	movs	r1, #8
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 fb7e 	bl	800c570 <SDIO_GetResponse>
 8009e74:	4602      	mov	r2, r0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	210c      	movs	r1, #12
 8009e80:	4618      	mov	r0, r3
 8009e82:	f002 fb75 	bl	800c570 <SDIO_GetResponse>
 8009e86:	4602      	mov	r2, r0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d00d      	beq.n	8009eb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f107 020e 	add.w	r2, r7, #14
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fd53 	bl	800c94c <SDMMC_CmdSetRelAdd>
 8009ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	e072      	b.n	8009f98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d036      	beq.n	8009f28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009eba:	89fb      	ldrh	r3, [r7, #14]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f002 fd1d 	bl	800c90e <SDMMC_CmdSendCSD>
 8009ed4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ede:	e05b      	b.n	8009f98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f002 fb42 	bl	800c570 <SDIO_GetResponse>
 8009eec:	4602      	mov	r2, r0
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2104      	movs	r1, #4
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f002 fb39 	bl	800c570 <SDIO_GetResponse>
 8009efe:	4602      	mov	r2, r0
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2108      	movs	r1, #8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f002 fb30 	bl	800c570 <SDIO_GetResponse>
 8009f10:	4602      	mov	r2, r0
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	210c      	movs	r1, #12
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f002 fb27 	bl	800c570 <SDIO_GetResponse>
 8009f22:	4602      	mov	r2, r0
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2104      	movs	r1, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f002 fb1e 	bl	800c570 <SDIO_GetResponse>
 8009f34:	4603      	mov	r3, r0
 8009f36:	0d1a      	lsrs	r2, r3, #20
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009f3c:	f107 0310 	add.w	r3, r7, #16
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff fd6e 	bl	8009a24 <HAL_SD_GetCardCSD>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f52:	e021      	b.n	8009f98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6819      	ldr	r1, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	2200      	movs	r2, #0
 8009f60:	461c      	mov	r4, r3
 8009f62:	4615      	mov	r5, r2
 8009f64:	4622      	mov	r2, r4
 8009f66:	462b      	mov	r3, r5
 8009f68:	4608      	mov	r0, r1
 8009f6a:	f002 fc0d 	bl	800c788 <SDMMC_CmdSelDesel>
 8009f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <SD_InitCard+0x176>
  {
    return errorstate;
 8009f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f78:	e00e      	b.n	8009f98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681d      	ldr	r5, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	466c      	mov	r4, sp
 8009f82:	f103 0210 	add.w	r2, r3, #16
 8009f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f90:	4628      	mov	r0, r5
 8009f92:	f002 fa51 	bl	800c438 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3740      	adds	r7, #64	; 0x40
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bdb0      	pop	{r4, r5, r7, pc}

08009fa0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f002 fc08 	bl	800c7ce <SDMMC_CmdGoIdleState>
 8009fbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <SD_PowerON+0x2a>
  {
    return errorstate;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	e072      	b.n	800a0b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f002 fc1b 	bl	800c80a <SDMMC_CmdOperCond>
 8009fd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f002 fbf1 	bl	800c7ce <SDMMC_CmdGoIdleState>
 8009fec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	e05b      	b.n	800a0b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a002:	2b01      	cmp	r3, #1
 800a004:	d137      	bne.n	800a076 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f002 fc1b 	bl	800c848 <SDMMC_CmdAppCommand>
 800a012:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02d      	beq.n	800a076 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a01a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a01e:	e047      	b.n	800a0b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f002 fc0e 	bl	800c848 <SDMMC_CmdAppCommand>
 800a02c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <SD_PowerON+0x98>
    {
      return errorstate;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	e03b      	b.n	800a0b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	491e      	ldr	r1, [pc, #120]	; (800a0b8 <SD_PowerON+0x118>)
 800a03e:	4618      	mov	r0, r3
 800a040:	f002 fc24 	bl	800c88c <SDMMC_CmdAppOperCommand>
 800a044:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a04c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a050:	e02e      	b.n	800a0b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 fa89 	bl	800c570 <SDIO_GetResponse>
 800a05e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	0fdb      	lsrs	r3, r3, #31
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <SD_PowerON+0xcc>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <SD_PowerON+0xce>
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]

    count++;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	3301      	adds	r3, #1
 800a074:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d802      	bhi.n	800a086 <SD_PowerON+0xe6>
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0cc      	beq.n	800a020 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d902      	bls.n	800a096 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a094:	e00c      	b.n	800a0b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	645a      	str	r2, [r3, #68]	; 0x44
 800a0a6:	e002      	b.n	800a0ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	c1100000 	.word	0xc1100000

0800a0bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a0cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0d0:	e018      	b.n	800a104 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f002 fc55 	bl	800c98e <SDMMC_CmdSendStatus>
 800a0e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	e009      	b.n	800a104 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f002 fa3a 	bl	800c570 <SDIO_GetResponse>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e041      	b.n	800a1a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7f8 fe68 	bl	8002e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f000 fd30 	bl	800abb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6a1a      	ldr	r2, [r3, #32]
 800a1c0:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10f      	bne.n	800a1ea <HAL_TIM_Base_DeInit+0x40>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6a1a      	ldr	r2, [r3, #32]
 800a1d0:	f240 4344 	movw	r3, #1092	; 0x444
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d107      	bne.n	800a1ea <HAL_TIM_Base_DeInit+0x40>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0201 	bic.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7f8 fecc 	bl	8002f88 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b01      	cmp	r3, #1
 800a266:	d001      	beq.n	800a26c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e03c      	b.n	800a2e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a1e      	ldr	r2, [pc, #120]	; (800a2f4 <HAL_TIM_Base_Start+0xa0>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d018      	beq.n	800a2b0 <HAL_TIM_Base_Start+0x5c>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a286:	d013      	beq.n	800a2b0 <HAL_TIM_Base_Start+0x5c>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1a      	ldr	r2, [pc, #104]	; (800a2f8 <HAL_TIM_Base_Start+0xa4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00e      	beq.n	800a2b0 <HAL_TIM_Base_Start+0x5c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a19      	ldr	r2, [pc, #100]	; (800a2fc <HAL_TIM_Base_Start+0xa8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d009      	beq.n	800a2b0 <HAL_TIM_Base_Start+0x5c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a17      	ldr	r2, [pc, #92]	; (800a300 <HAL_TIM_Base_Start+0xac>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <HAL_TIM_Base_Start+0x5c>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a16      	ldr	r2, [pc, #88]	; (800a304 <HAL_TIM_Base_Start+0xb0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d111      	bne.n	800a2d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b06      	cmp	r3, #6
 800a2c0:	d010      	beq.n	800a2e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0201 	orr.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d2:	e007      	b.n	800a2e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0201 	orr.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40000400 	.word	0x40000400
 800a2fc:	40000800 	.word	0x40000800
 800a300:	40000c00 	.word	0x40000c00
 800a304:	40014000 	.word	0x40014000

0800a308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d001      	beq.n	800a320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e044      	b.n	800a3aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f042 0201 	orr.w	r2, r2, #1
 800a336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1e      	ldr	r2, [pc, #120]	; (800a3b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d018      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a34a:	d013      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1a      	ldr	r2, [pc, #104]	; (800a3bc <HAL_TIM_Base_Start_IT+0xb4>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00e      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a19      	ldr	r2, [pc, #100]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d009      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a17      	ldr	r2, [pc, #92]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d004      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xc0>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d111      	bne.n	800a398 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b06      	cmp	r3, #6
 800a384:	d010      	beq.n	800a3a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0201 	orr.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a396:	e007      	b.n	800a3a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0201 	orr.w	r2, r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40000400 	.word	0x40000400
 800a3c0:	40000800 	.word	0x40000800
 800a3c4:	40000c00 	.word	0x40000c00
 800a3c8:	40014000 	.word	0x40014000

0800a3cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0201 	bic.w	r2, r2, #1
 800a3e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6a1a      	ldr	r2, [r3, #32]
 800a3ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10f      	bne.n	800a414 <HAL_TIM_Base_Stop_IT+0x48>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6a1a      	ldr	r2, [r3, #32]
 800a3fa:	f240 4344 	movw	r3, #1092	; 0x444
 800a3fe:	4013      	ands	r3, r2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d107      	bne.n	800a414 <HAL_TIM_Base_Stop_IT+0x48>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0201 	bic.w	r2, r2, #1
 800a412:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e041      	b.n	800a4c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f839 	bl	800a4c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2202      	movs	r2, #2
 800a45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3304      	adds	r3, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f000 fba1 	bl	800abb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <HAL_TIM_PWM_Start+0x24>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	e022      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b04      	cmp	r3, #4
 800a504:	d109      	bne.n	800a51a <HAL_TIM_PWM_Start+0x3e>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	e015      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d109      	bne.n	800a534 <HAL_TIM_PWM_Start+0x58>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b01      	cmp	r3, #1
 800a52a:	bf14      	ite	ne
 800a52c:	2301      	movne	r3, #1
 800a52e:	2300      	moveq	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	e008      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	bf14      	ite	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2300      	moveq	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e068      	b.n	800a620 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d104      	bne.n	800a55e <HAL_TIM_PWM_Start+0x82>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a55c:	e013      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d104      	bne.n	800a56e <HAL_TIM_PWM_Start+0x92>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a56c:	e00b      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b08      	cmp	r3, #8
 800a572:	d104      	bne.n	800a57e <HAL_TIM_PWM_Start+0xa2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a57c:	e003      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2201      	movs	r2, #1
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fdb4 	bl	800b0fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a23      	ldr	r2, [pc, #140]	; (800a628 <HAL_TIM_PWM_Start+0x14c>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d107      	bne.n	800a5ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a1d      	ldr	r2, [pc, #116]	; (800a628 <HAL_TIM_PWM_Start+0x14c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d018      	beq.n	800a5ea <HAL_TIM_PWM_Start+0x10e>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c0:	d013      	beq.n	800a5ea <HAL_TIM_PWM_Start+0x10e>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a19      	ldr	r2, [pc, #100]	; (800a62c <HAL_TIM_PWM_Start+0x150>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00e      	beq.n	800a5ea <HAL_TIM_PWM_Start+0x10e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a17      	ldr	r2, [pc, #92]	; (800a630 <HAL_TIM_PWM_Start+0x154>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d009      	beq.n	800a5ea <HAL_TIM_PWM_Start+0x10e>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a16      	ldr	r2, [pc, #88]	; (800a634 <HAL_TIM_PWM_Start+0x158>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d004      	beq.n	800a5ea <HAL_TIM_PWM_Start+0x10e>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a14      	ldr	r2, [pc, #80]	; (800a638 <HAL_TIM_PWM_Start+0x15c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d111      	bne.n	800a60e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f003 0307 	and.w	r3, r3, #7
 800a5f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b06      	cmp	r3, #6
 800a5fa:	d010      	beq.n	800a61e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60c:	e007      	b.n	800a61e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0201 	orr.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	40010000 	.word	0x40010000
 800a62c:	40000400 	.word	0x40000400
 800a630:	40000800 	.word	0x40000800
 800a634:	40000c00 	.word	0x40000c00
 800a638:	40014000 	.word	0x40014000

0800a63c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d122      	bne.n	800a698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d11b      	bne.n	800a698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f06f 0202 	mvn.w	r2, #2
 800a668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa77 	bl	800ab72 <HAL_TIM_IC_CaptureCallback>
 800a684:	e005      	b.n	800a692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa69 	bl	800ab5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fa7a 	bl	800ab86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d122      	bne.n	800a6ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d11b      	bne.n	800a6ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f06f 0204 	mvn.w	r2, #4
 800a6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fa4d 	bl	800ab72 <HAL_TIM_IC_CaptureCallback>
 800a6d8:	e005      	b.n	800a6e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fa3f 	bl	800ab5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fa50 	bl	800ab86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d122      	bne.n	800a740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b08      	cmp	r3, #8
 800a706:	d11b      	bne.n	800a740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0208 	mvn.w	r2, #8
 800a710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2204      	movs	r2, #4
 800a716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fa23 	bl	800ab72 <HAL_TIM_IC_CaptureCallback>
 800a72c:	e005      	b.n	800a73a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fa15 	bl	800ab5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fa26 	bl	800ab86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	2b10      	cmp	r3, #16
 800a74c:	d122      	bne.n	800a794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d11b      	bne.n	800a794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f06f 0210 	mvn.w	r2, #16
 800a764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2208      	movs	r2, #8
 800a76a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f9f9 	bl	800ab72 <HAL_TIM_IC_CaptureCallback>
 800a780:	e005      	b.n	800a78e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9eb 	bl	800ab5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f9fc 	bl	800ab86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d107      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0201 	mvn.w	r2, #1
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7f8 f918 	bl	80029f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ca:	2b80      	cmp	r3, #128	; 0x80
 800a7cc:	d10e      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d8:	2b80      	cmp	r3, #128	; 0x80
 800a7da:	d107      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fd26 	bl	800b238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d10e      	bne.n	800a818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d107      	bne.n	800a818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9c1 	bl	800ab9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	2b20      	cmp	r3, #32
 800a824:	d10e      	bne.n	800a844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0320 	and.w	r3, r3, #32
 800a830:	2b20      	cmp	r3, #32
 800a832:	d107      	bne.n	800a844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0220 	mvn.w	r2, #32
 800a83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fcf0 	bl	800b224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d101      	bne.n	800a86a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a866:	2302      	movs	r3, #2
 800a868:	e0ae      	b.n	800a9c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b0c      	cmp	r3, #12
 800a876:	f200 809f 	bhi.w	800a9b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a9b9 	.word	0x0800a9b9
 800a888:	0800a9b9 	.word	0x0800a9b9
 800a88c:	0800a9b9 	.word	0x0800a9b9
 800a890:	0800a8f5 	.word	0x0800a8f5
 800a894:	0800a9b9 	.word	0x0800a9b9
 800a898:	0800a9b9 	.word	0x0800a9b9
 800a89c:	0800a9b9 	.word	0x0800a9b9
 800a8a0:	0800a937 	.word	0x0800a937
 800a8a4:	0800a9b9 	.word	0x0800a9b9
 800a8a8:	0800a9b9 	.word	0x0800a9b9
 800a8ac:	0800a9b9 	.word	0x0800a9b9
 800a8b0:	0800a977 	.word	0x0800a977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 f9f8 	bl	800acb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0208 	orr.w	r2, r2, #8
 800a8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0204 	bic.w	r2, r2, #4
 800a8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6999      	ldr	r1, [r3, #24]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	691a      	ldr	r2, [r3, #16]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	619a      	str	r2, [r3, #24]
      break;
 800a8f2:	e064      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fa3e 	bl	800ad7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a90e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a91e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6999      	ldr	r1, [r3, #24]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	021a      	lsls	r2, r3, #8
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	619a      	str	r2, [r3, #24]
      break;
 800a934:	e043      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fa89 	bl	800ae54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0208 	orr.w	r2, r2, #8
 800a950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69da      	ldr	r2, [r3, #28]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0204 	bic.w	r2, r2, #4
 800a960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69d9      	ldr	r1, [r3, #28]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	61da      	str	r2, [r3, #28]
      break;
 800a974:	e023      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fad3 	bl	800af28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69d9      	ldr	r1, [r3, #28]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	021a      	lsls	r2, r3, #8
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	61da      	str	r2, [r3, #28]
      break;
 800a9b6:	e002      	b.n	800a9be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a9bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_TIM_ConfigClockSource+0x1c>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e0b4      	b.n	800ab56 <HAL_TIM_ConfigClockSource+0x186>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa24:	d03e      	beq.n	800aaa4 <HAL_TIM_ConfigClockSource+0xd4>
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa2a:	f200 8087 	bhi.w	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa32:	f000 8086 	beq.w	800ab42 <HAL_TIM_ConfigClockSource+0x172>
 800aa36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3a:	d87f      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa3c:	2b70      	cmp	r3, #112	; 0x70
 800aa3e:	d01a      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0xa6>
 800aa40:	2b70      	cmp	r3, #112	; 0x70
 800aa42:	d87b      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa44:	2b60      	cmp	r3, #96	; 0x60
 800aa46:	d050      	beq.n	800aaea <HAL_TIM_ConfigClockSource+0x11a>
 800aa48:	2b60      	cmp	r3, #96	; 0x60
 800aa4a:	d877      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa4c:	2b50      	cmp	r3, #80	; 0x50
 800aa4e:	d03c      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0xfa>
 800aa50:	2b50      	cmp	r3, #80	; 0x50
 800aa52:	d873      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa54:	2b40      	cmp	r3, #64	; 0x40
 800aa56:	d058      	beq.n	800ab0a <HAL_TIM_ConfigClockSource+0x13a>
 800aa58:	2b40      	cmp	r3, #64	; 0x40
 800aa5a:	d86f      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa5c:	2b30      	cmp	r3, #48	; 0x30
 800aa5e:	d064      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa60:	2b30      	cmp	r3, #48	; 0x30
 800aa62:	d86b      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d060      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa68:	2b20      	cmp	r3, #32
 800aa6a:	d867      	bhi.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d05c      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	d05a      	beq.n	800ab2a <HAL_TIM_ConfigClockSource+0x15a>
 800aa74:	e062      	b.n	800ab3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6899      	ldr	r1, [r3, #8]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f000 fb19 	bl	800b0bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	609a      	str	r2, [r3, #8]
      break;
 800aaa2:	e04f      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	6899      	ldr	r1, [r3, #8]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f000 fb02 	bl	800b0bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aac6:	609a      	str	r2, [r3, #8]
      break;
 800aac8:	e03c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	6859      	ldr	r1, [r3, #4]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	461a      	mov	r2, r3
 800aad8:	f000 fa76 	bl	800afc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2150      	movs	r1, #80	; 0x50
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 facf 	bl	800b086 <TIM_ITRx_SetConfig>
      break;
 800aae8:	e02c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	6859      	ldr	r1, [r3, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f000 fa95 	bl	800b026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2160      	movs	r1, #96	; 0x60
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fabf 	bl	800b086 <TIM_ITRx_SetConfig>
      break;
 800ab08:	e01c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6859      	ldr	r1, [r3, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f000 fa56 	bl	800afc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2140      	movs	r1, #64	; 0x40
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 faaf 	bl	800b086 <TIM_ITRx_SetConfig>
      break;
 800ab28:	e00c      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	4610      	mov	r0, r2
 800ab36:	f000 faa6 	bl	800b086 <TIM_ITRx_SetConfig>
      break;
 800ab3a:	e003      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab40:	e000      	b.n	800ab44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab66:	bf00      	nop
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a34      	ldr	r2, [pc, #208]	; (800ac94 <TIM_Base_SetConfig+0xe4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00f      	beq.n	800abe8 <TIM_Base_SetConfig+0x38>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abce:	d00b      	beq.n	800abe8 <TIM_Base_SetConfig+0x38>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a31      	ldr	r2, [pc, #196]	; (800ac98 <TIM_Base_SetConfig+0xe8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d007      	beq.n	800abe8 <TIM_Base_SetConfig+0x38>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a30      	ldr	r2, [pc, #192]	; (800ac9c <TIM_Base_SetConfig+0xec>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d003      	beq.n	800abe8 <TIM_Base_SetConfig+0x38>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a2f      	ldr	r2, [pc, #188]	; (800aca0 <TIM_Base_SetConfig+0xf0>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d108      	bne.n	800abfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a25      	ldr	r2, [pc, #148]	; (800ac94 <TIM_Base_SetConfig+0xe4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d01b      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac08:	d017      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a22      	ldr	r2, [pc, #136]	; (800ac98 <TIM_Base_SetConfig+0xe8>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d013      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <TIM_Base_SetConfig+0xec>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00f      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a20      	ldr	r2, [pc, #128]	; (800aca0 <TIM_Base_SetConfig+0xf0>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d00b      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a1f      	ldr	r2, [pc, #124]	; (800aca4 <TIM_Base_SetConfig+0xf4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d007      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a1e      	ldr	r2, [pc, #120]	; (800aca8 <TIM_Base_SetConfig+0xf8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_Base_SetConfig+0x8a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a1d      	ldr	r2, [pc, #116]	; (800acac <TIM_Base_SetConfig+0xfc>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d108      	bne.n	800ac4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a08      	ldr	r2, [pc, #32]	; (800ac94 <TIM_Base_SetConfig+0xe4>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d103      	bne.n	800ac80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	615a      	str	r2, [r3, #20]
}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	40000800 	.word	0x40000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	40014000 	.word	0x40014000
 800aca8:	40014400 	.word	0x40014400
 800acac:	40014800 	.word	0x40014800

0800acb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b087      	sub	sp, #28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	f023 0201 	bic.w	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0303 	bic.w	r3, r3, #3
 800ace6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f023 0302 	bic.w	r3, r3, #2
 800acf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a1c      	ldr	r2, [pc, #112]	; (800ad78 <TIM_OC1_SetConfig+0xc8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d10c      	bne.n	800ad26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f023 0308 	bic.w	r3, r3, #8
 800ad12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f023 0304 	bic.w	r3, r3, #4
 800ad24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a13      	ldr	r2, [pc, #76]	; (800ad78 <TIM_OC1_SetConfig+0xc8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d111      	bne.n	800ad52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	621a      	str	r2, [r3, #32]
}
 800ad6c:	bf00      	nop
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	40010000 	.word	0x40010000

0800ad7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f023 0210 	bic.w	r2, r3, #16
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f023 0320 	bic.w	r3, r3, #32
 800adc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a1e      	ldr	r2, [pc, #120]	; (800ae50 <TIM_OC2_SetConfig+0xd4>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d10d      	bne.n	800adf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	011b      	lsls	r3, r3, #4
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <TIM_OC2_SetConfig+0xd4>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d113      	bne.n	800ae28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40010000 	.word	0x40010000

0800ae54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a1d      	ldr	r2, [pc, #116]	; (800af24 <TIM_OC3_SetConfig+0xd0>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d10d      	bne.n	800aece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	021b      	lsls	r3, r3, #8
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a14      	ldr	r2, [pc, #80]	; (800af24 <TIM_OC3_SetConfig+0xd0>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d113      	bne.n	800aefe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	621a      	str	r2, [r3, #32]
}
 800af18:	bf00      	nop
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	40010000 	.word	0x40010000

0800af28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	031b      	lsls	r3, r3, #12
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a10      	ldr	r2, [pc, #64]	; (800afc4 <TIM_OC4_SetConfig+0x9c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d109      	bne.n	800af9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	019b      	lsls	r3, r3, #6
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4313      	orrs	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	621a      	str	r2, [r3, #32]
}
 800afb6:	bf00      	nop
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	40010000 	.word	0x40010000

0800afc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	f023 0201 	bic.w	r2, r3, #1
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	4313      	orrs	r3, r2
 800affc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f023 030a 	bic.w	r3, r3, #10
 800b004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	621a      	str	r2, [r3, #32]
}
 800b01a:	bf00      	nop
 800b01c:	371c      	adds	r7, #28
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b026:	b480      	push	{r7}
 800b028:	b087      	sub	sp, #28
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f023 0210 	bic.w	r2, r3, #16
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	031b      	lsls	r3, r3, #12
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	621a      	str	r2, [r3, #32]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b086:	b480      	push	{r7}
 800b088:	b085      	sub	sp, #20
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	f043 0307 	orr.w	r3, r3, #7
 800b0a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	609a      	str	r2, [r3, #8]
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	021a      	lsls	r2, r3, #8
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	609a      	str	r2, [r3, #8]
}
 800b0f0:	bf00      	nop
 800b0f2:	371c      	adds	r7, #28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	2201      	movs	r2, #1
 800b110:	fa02 f303 	lsl.w	r3, r2, r3
 800b114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6a1a      	ldr	r2, [r3, #32]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	43db      	mvns	r3, r3
 800b11e:	401a      	ands	r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a1a      	ldr	r2, [r3, #32]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f003 031f 	and.w	r3, r3, #31
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	fa01 f303 	lsl.w	r3, r1, r3
 800b134:	431a      	orrs	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	621a      	str	r2, [r3, #32]
}
 800b13a:	bf00      	nop
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
	...

0800b148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b15c:	2302      	movs	r3, #2
 800b15e:	e050      	b.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a1c      	ldr	r2, [pc, #112]	; (800b210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d018      	beq.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ac:	d013      	beq.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a18      	ldr	r2, [pc, #96]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00e      	beq.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a16      	ldr	r2, [pc, #88]	; (800b218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d009      	beq.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a15      	ldr	r2, [pc, #84]	; (800b21c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d004      	beq.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d10c      	bne.n	800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	40010000 	.word	0x40010000
 800b214:	40000400 	.word	0x40000400
 800b218:	40000800 	.word	0x40000800
 800b21c:	40000c00 	.word	0x40000c00
 800b220:	40014000 	.word	0x40014000

0800b224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e03f      	b.n	800b2de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7f7 fec2 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	; 0x24
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b28e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fe5d 	bl	800bf50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695a      	ldr	r2, [r3, #20]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68da      	ldr	r2, [r3, #12]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e021      	b.n	800b33c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2224      	movs	r2, #36	; 0x24
 800b2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b30e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7f7 ff01 	bl	8003118 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08a      	sub	sp, #40	; 0x28
 800b348:	af02      	add	r7, sp, #8
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	4613      	mov	r3, r2
 800b352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b20      	cmp	r3, #32
 800b362:	d17c      	bne.n	800b45e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <HAL_UART_Transmit+0x2c>
 800b36a:	88fb      	ldrh	r3, [r7, #6]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e075      	b.n	800b460 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_UART_Transmit+0x3e>
 800b37e:	2302      	movs	r3, #2
 800b380:	e06e      	b.n	800b460 <HAL_UART_Transmit+0x11c>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2221      	movs	r2, #33	; 0x21
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b398:	f7f8 f902 	bl	80035a0 <HAL_GetTick>
 800b39c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	88fa      	ldrh	r2, [r7, #6]
 800b3a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	88fa      	ldrh	r2, [r7, #6]
 800b3a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b2:	d108      	bne.n	800b3c6 <HAL_UART_Transmit+0x82>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	e003      	b.n	800b3ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b3d6:	e02a      	b.n	800b42e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2180      	movs	r1, #128	; 0x80
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 fb6e 	bl	800bac4 <UART_WaitOnFlagUntilTimeout>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e036      	b.n	800b460 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10b      	bne.n	800b410 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	881b      	ldrh	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b406:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	3302      	adds	r3, #2
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e007      	b.n	800b420 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b424:	b29b      	uxth	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b432:	b29b      	uxth	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1cf      	bne.n	800b3d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2200      	movs	r2, #0
 800b440:	2140      	movs	r1, #64	; 0x40
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 fb3e 	bl	800bac4 <UART_WaitOnFlagUntilTimeout>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e006      	b.n	800b460 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2220      	movs	r2, #32
 800b456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e000      	b.n	800b460 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b45e:	2302      	movs	r3, #2
  }
}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b20      	cmp	r3, #32
 800b480:	d11d      	bne.n	800b4be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <HAL_UART_Receive_IT+0x26>
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e016      	b.n	800b4c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d101      	bne.n	800b4a0 <HAL_UART_Receive_IT+0x38>
 800b49c:	2302      	movs	r3, #2
 800b49e:	e00f      	b.n	800b4c0 <HAL_UART_Receive_IT+0x58>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b4ae:	88fb      	ldrh	r3, [r7, #6]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fb73 	bl	800bba0 <UART_Start_Receive_IT>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	e000      	b.n	800b4c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b4be:	2302      	movs	r3, #2
  }
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08c      	sub	sp, #48	; 0x30
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	d152      	bne.n	800b588 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b4e8:	88fb      	ldrh	r3, [r7, #6]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e04b      	b.n	800b58a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d101      	bne.n	800b500 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	e044      	b.n	800b58a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	461a      	mov	r2, r3
 800b512:	68b9      	ldr	r1, [r7, #8]
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 fb43 	bl	800bba0 <UART_Start_Receive_IT>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b524:	2b00      	cmp	r3, #0
 800b526:	d12c      	bne.n	800b582 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d125      	bne.n	800b57c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	330c      	adds	r3, #12
 800b54c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	617b      	str	r3, [r7, #20]
   return(result);
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f043 0310 	orr.w	r3, r3, #16
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	330c      	adds	r3, #12
 800b564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b566:	627a      	str	r2, [r7, #36]	; 0x24
 800b568:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6a39      	ldr	r1, [r7, #32]
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	61fb      	str	r3, [r7, #28]
   return(result);
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800b57a:	e002      	b.n	800b582 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b586:	e000      	b.n	800b58a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b588:	2302      	movs	r3, #2
  }
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3730      	adds	r7, #48	; 0x30
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b0ba      	sub	sp, #232	; 0xe8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ca:	f003 030f 	and.w	r3, r3, #15
 800b5ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b5d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10f      	bne.n	800b5fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d009      	beq.n	800b5fa <HAL_UART_IRQHandler+0x66>
 800b5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ea:	f003 0320 	and.w	r3, r3, #32
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fbf1 	bl	800bdda <UART_Receive_IT>
      return;
 800b5f8:	e256      	b.n	800baa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80de 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x22c>
 800b604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d106      	bne.n	800b61e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 80d1 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00b      	beq.n	800b642 <HAL_UART_IRQHandler+0xae>
 800b62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63a:	f043 0201 	orr.w	r2, r3, #1
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <HAL_UART_IRQHandler+0xd2>
 800b64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	f043 0202 	orr.w	r2, r3, #2
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <HAL_UART_IRQHandler+0xf6>
 800b672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b682:	f043 0204 	orr.w	r2, r3, #4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68e:	f003 0308 	and.w	r3, r3, #8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d011      	beq.n	800b6ba <HAL_UART_IRQHandler+0x126>
 800b696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b69a:	f003 0320 	and.w	r3, r3, #32
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b6a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d005      	beq.n	800b6ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	f043 0208 	orr.w	r2, r3, #8
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 81ed 	beq.w	800ba9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d008      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x14e>
 800b6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6d4:	f003 0320 	and.w	r3, r3, #32
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fb7c 	bl	800bdda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ec:	2b40      	cmp	r3, #64	; 0x40
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2301      	moveq	r3, #1
 800b6f2:	2300      	movne	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	f003 0308 	and.w	r3, r3, #8
 800b702:	2b00      	cmp	r3, #0
 800b704:	d103      	bne.n	800b70e <HAL_UART_IRQHandler+0x17a>
 800b706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d04f      	beq.n	800b7ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fa84 	bl	800bc1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b71e:	2b40      	cmp	r3, #64	; 0x40
 800b720:	d141      	bne.n	800b7a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3314      	adds	r3, #20
 800b728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b73c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3314      	adds	r3, #20
 800b74a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b74e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b75a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b75e:	e841 2300 	strex	r3, r2, [r1]
 800b762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1d9      	bne.n	800b722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	d013      	beq.n	800b79e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	4a7d      	ldr	r2, [pc, #500]	; (800b970 <HAL_UART_IRQHandler+0x3dc>)
 800b77c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b782:	4618      	mov	r0, r3
 800b784:	f7f8 feef 	bl	8004566 <HAL_DMA_Abort_IT>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d016      	beq.n	800b7bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b79c:	e00e      	b.n	800b7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7f7 f976 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a4:	e00a      	b.n	800b7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7f7 f972 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ac:	e006      	b.n	800b7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7f7 f96e 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b7ba:	e170      	b.n	800ba9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7bc:	bf00      	nop
    return;
 800b7be:	e16e      	b.n	800ba9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	f040 814a 	bne.w	800ba5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 8143 	beq.w	800ba5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 813c 	beq.w	800ba5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60bb      	str	r3, [r7, #8]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60bb      	str	r3, [r7, #8]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	60bb      	str	r3, [r7, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b806:	2b40      	cmp	r3, #64	; 0x40
 800b808:	f040 80b4 	bne.w	800b974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 8140 	beq.w	800baa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b82a:	429a      	cmp	r2, r3
 800b82c:	f080 8139 	bcs.w	800baa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b842:	f000 8088 	beq.w	800b956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	330c      	adds	r3, #12
 800b84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b85c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b87e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1d9      	bne.n	800b846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3314      	adds	r3, #20
 800b898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8a4:	f023 0301 	bic.w	r3, r3, #1
 800b8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3314      	adds	r3, #20
 800b8b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e1      	bne.n	800b892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3314      	adds	r3, #20
 800b8d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3314      	adds	r3, #20
 800b8ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e3      	bne.n	800b8ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	330c      	adds	r3, #12
 800b91a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b926:	f023 0310 	bic.w	r3, r3, #16
 800b92a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	330c      	adds	r3, #12
 800b934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b938:	65ba      	str	r2, [r7, #88]	; 0x58
 800b93a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b93e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e3      	bne.n	800b914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	4618      	mov	r0, r3
 800b952:	f7f8 fd98 	bl	8004486 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b95e:	b29b      	uxth	r3, r3
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	b29b      	uxth	r3, r3
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f007 fb5c 	bl	8013024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b96c:	e099      	b.n	800baa2 <HAL_UART_IRQHandler+0x50e>
 800b96e:	bf00      	nop
 800b970:	0800bce3 	.word	0x0800bce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b988:	b29b      	uxth	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 808b 	beq.w	800baa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 8086 	beq.w	800baa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	330c      	adds	r3, #12
 800b9a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	330c      	adds	r3, #12
 800b9ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b9be:	647a      	str	r2, [r7, #68]	; 0x44
 800b9c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e3      	bne.n	800b99a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3314      	adds	r3, #20
 800b9d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	f023 0301 	bic.w	r3, r3, #1
 800b9e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3314      	adds	r3, #20
 800b9f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9f6:	633a      	str	r2, [r7, #48]	; 0x30
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e3      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	330c      	adds	r3, #12
 800ba1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0310 	bic.w	r3, r3, #16
 800ba2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	330c      	adds	r3, #12
 800ba38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba3c:	61fa      	str	r2, [r7, #28]
 800ba3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	69b9      	ldr	r1, [r7, #24]
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	617b      	str	r3, [r7, #20]
   return(result);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e3      	bne.n	800ba18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f007 fae4 	bl	8013024 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba5c:	e023      	b.n	800baa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <HAL_UART_IRQHandler+0x4ea>
 800ba6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f947 	bl	800bd0a <UART_Transmit_IT>
    return;
 800ba7c:	e014      	b.n	800baa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00e      	beq.n	800baa8 <HAL_UART_IRQHandler+0x514>
 800ba8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f987 	bl	800bdaa <UART_EndTransmit_IT>
    return;
 800ba9c:	e004      	b.n	800baa8 <HAL_UART_IRQHandler+0x514>
    return;
 800ba9e:	bf00      	nop
 800baa0:	e002      	b.n	800baa8 <HAL_UART_IRQHandler+0x514>
      return;
 800baa2:	bf00      	nop
 800baa4:	e000      	b.n	800baa8 <HAL_UART_IRQHandler+0x514>
      return;
 800baa6:	bf00      	nop
  }
}
 800baa8:	37e8      	adds	r7, #232	; 0xe8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop

0800bab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b090      	sub	sp, #64	; 0x40
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bad4:	e050      	b.n	800bb78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800badc:	d04c      	beq.n	800bb78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d007      	beq.n	800baf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bae4:	f7f7 fd5c 	bl	80035a0 <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d241      	bcs.n	800bb78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	330c      	adds	r3, #12
 800bb12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb14:	637a      	str	r2, [r7, #52]	; 0x34
 800bb16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e5      	bne.n	800baf4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3314      	adds	r3, #20
 800bb2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	613b      	str	r3, [r7, #16]
   return(result);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f023 0301 	bic.w	r3, r3, #1
 800bb3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3314      	adds	r3, #20
 800bb46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb48:	623a      	str	r2, [r7, #32]
 800bb4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69f9      	ldr	r1, [r7, #28]
 800bb4e:	6a3a      	ldr	r2, [r7, #32]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e5      	bne.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2220      	movs	r2, #32
 800bb68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e00f      	b.n	800bb98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	4013      	ands	r3, r2
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	bf0c      	ite	eq
 800bb88:	2301      	moveq	r3, #1
 800bb8a:	2300      	movne	r3, #0
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	461a      	mov	r2, r3
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d09f      	beq.n	800bad6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3740      	adds	r7, #64	; 0x40
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	88fa      	ldrh	r2, [r7, #6]
 800bbb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	88fa      	ldrh	r2, [r7, #6]
 800bbbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2222      	movs	r2, #34	; 0x22
 800bbca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68da      	ldr	r2, [r3, #12]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	695a      	ldr	r2, [r3, #20]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0201 	orr.w	r2, r2, #1
 800bbfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68da      	ldr	r2, [r3, #12]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f042 0220 	orr.w	r2, r2, #32
 800bc0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b095      	sub	sp, #84	; 0x54
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	330c      	adds	r3, #12
 800bc2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	330c      	adds	r3, #12
 800bc42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc44:	643a      	str	r2, [r7, #64]	; 0x40
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e5      	bne.n	800bc24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3314      	adds	r3, #20
 800bc5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	f023 0301 	bic.w	r3, r3, #1
 800bc6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3314      	adds	r3, #20
 800bc76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc80:	e841 2300 	strex	r3, r2, [r1]
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e5      	bne.n	800bc58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d119      	bne.n	800bcc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	330c      	adds	r3, #12
 800bc9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	e853 3f00 	ldrex	r3, [r3]
 800bca2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f023 0310 	bic.w	r3, r3, #16
 800bcaa:	647b      	str	r3, [r7, #68]	; 0x44
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	330c      	adds	r3, #12
 800bcb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb4:	61ba      	str	r2, [r7, #24]
 800bcb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6979      	ldr	r1, [r7, #20]
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	613b      	str	r3, [r7, #16]
   return(result);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e5      	bne.n	800bc94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bcd6:	bf00      	nop
 800bcd8:	3754      	adds	r7, #84	; 0x54
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f7f6 fec7 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b085      	sub	sp, #20
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b21      	cmp	r3, #33	; 0x21
 800bd1c:	d13e      	bne.n	800bd9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd26:	d114      	bne.n	800bd52 <UART_Transmit_IT+0x48>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d110      	bne.n	800bd52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	1c9a      	adds	r2, r3, #2
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	621a      	str	r2, [r3, #32]
 800bd50:	e008      	b.n	800bd64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	1c59      	adds	r1, r3, #1
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6211      	str	r1, [r2, #32]
 800bd5c:	781a      	ldrb	r2, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4619      	mov	r1, r3
 800bd72:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10f      	bne.n	800bd98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68da      	ldr	r2, [r3, #12]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e000      	b.n	800bd9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd9c:	2302      	movs	r3, #2
  }
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68da      	ldr	r2, [r3, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff fe70 	bl	800bab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b08c      	sub	sp, #48	; 0x30
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b22      	cmp	r3, #34	; 0x22
 800bdec:	f040 80ab 	bne.w	800bf46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf8:	d117      	bne.n	800be2a <UART_Receive_IT+0x50>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d113      	bne.n	800be2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	b29b      	uxth	r3, r3
 800be14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	1c9a      	adds	r2, r3, #2
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	629a      	str	r2, [r3, #40]	; 0x28
 800be28:	e026      	b.n	800be78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3c:	d007      	beq.n	800be4e <UART_Receive_IT+0x74>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <UART_Receive_IT+0x82>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	b2da      	uxtb	r2, r3
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	e008      	b.n	800be6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	b29b      	uxth	r3, r3
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	4619      	mov	r1, r3
 800be86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d15a      	bne.n	800bf42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68da      	ldr	r2, [r3, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f022 0220 	bic.w	r2, r2, #32
 800be9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68da      	ldr	r2, [r3, #12]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800beaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	695a      	ldr	r2, [r3, #20]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f022 0201 	bic.w	r2, r2, #1
 800beba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2220      	movs	r2, #32
 800bec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d135      	bne.n	800bf38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	330c      	adds	r3, #12
 800bed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	613b      	str	r3, [r7, #16]
   return(result);
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f023 0310 	bic.w	r3, r3, #16
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	330c      	adds	r3, #12
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	623a      	str	r2, [r7, #32]
 800bef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	69f9      	ldr	r1, [r7, #28]
 800bef8:	6a3a      	ldr	r2, [r7, #32]
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e5      	bne.n	800bed2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0310 	and.w	r3, r3, #16
 800bf10:	2b10      	cmp	r3, #16
 800bf12:	d10a      	bne.n	800bf2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f007 f877 	bl	8013024 <HAL_UARTEx_RxEventCallback>
 800bf36:	e002      	b.n	800bf3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 fc4d 	bl	800e7d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e002      	b.n	800bf48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e000      	b.n	800bf48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bf46:	2302      	movs	r3, #2
  }
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3730      	adds	r7, #48	; 0x30
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf54:	b0c0      	sub	sp, #256	; 0x100
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf6c:	68d9      	ldr	r1, [r3, #12]
 800bf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	ea40 0301 	orr.w	r3, r0, r1
 800bf78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	431a      	orrs	r2, r3
 800bf88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bfa8:	f021 010c 	bic.w	r1, r1, #12
 800bfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bfc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfca:	6999      	ldr	r1, [r3, #24]
 800bfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	ea40 0301 	orr.w	r3, r0, r1
 800bfd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4b8f      	ldr	r3, [pc, #572]	; (800c21c <UART_SetConfig+0x2cc>)
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d005      	beq.n	800bff0 <UART_SetConfig+0xa0>
 800bfe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	4b8d      	ldr	r3, [pc, #564]	; (800c220 <UART_SetConfig+0x2d0>)
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d104      	bne.n	800bffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bff0:	f7fc fb70 	bl	80086d4 <HAL_RCC_GetPCLK2Freq>
 800bff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bff8:	e003      	b.n	800c002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bffa:	f7fc fb57 	bl	80086ac <HAL_RCC_GetPCLK1Freq>
 800bffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c00c:	f040 810c 	bne.w	800c228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c014:	2200      	movs	r2, #0
 800c016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c01a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c01e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c022:	4622      	mov	r2, r4
 800c024:	462b      	mov	r3, r5
 800c026:	1891      	adds	r1, r2, r2
 800c028:	65b9      	str	r1, [r7, #88]	; 0x58
 800c02a:	415b      	adcs	r3, r3
 800c02c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c02e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c032:	4621      	mov	r1, r4
 800c034:	eb12 0801 	adds.w	r8, r2, r1
 800c038:	4629      	mov	r1, r5
 800c03a:	eb43 0901 	adc.w	r9, r3, r1
 800c03e:	f04f 0200 	mov.w	r2, #0
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c04a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c04e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c052:	4690      	mov	r8, r2
 800c054:	4699      	mov	r9, r3
 800c056:	4623      	mov	r3, r4
 800c058:	eb18 0303 	adds.w	r3, r8, r3
 800c05c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c060:	462b      	mov	r3, r5
 800c062:	eb49 0303 	adc.w	r3, r9, r3
 800c066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c07a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c07e:	460b      	mov	r3, r1
 800c080:	18db      	adds	r3, r3, r3
 800c082:	653b      	str	r3, [r7, #80]	; 0x50
 800c084:	4613      	mov	r3, r2
 800c086:	eb42 0303 	adc.w	r3, r2, r3
 800c08a:	657b      	str	r3, [r7, #84]	; 0x54
 800c08c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c094:	f7f4 fe10 	bl	8000cb8 <__aeabi_uldivmod>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4b61      	ldr	r3, [pc, #388]	; (800c224 <UART_SetConfig+0x2d4>)
 800c09e:	fba3 2302 	umull	r2, r3, r3, r2
 800c0a2:	095b      	lsrs	r3, r3, #5
 800c0a4:	011c      	lsls	r4, r3, #4
 800c0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c0b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c0b8:	4642      	mov	r2, r8
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	1891      	adds	r1, r2, r2
 800c0be:	64b9      	str	r1, [r7, #72]	; 0x48
 800c0c0:	415b      	adcs	r3, r3
 800c0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	eb12 0a01 	adds.w	sl, r2, r1
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	eb43 0b01 	adc.w	fp, r3, r1
 800c0d4:	f04f 0200 	mov.w	r2, #0
 800c0d8:	f04f 0300 	mov.w	r3, #0
 800c0dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c0e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c0e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c0e8:	4692      	mov	sl, r2
 800c0ea:	469b      	mov	fp, r3
 800c0ec:	4643      	mov	r3, r8
 800c0ee:	eb1a 0303 	adds.w	r3, sl, r3
 800c0f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	eb4b 0303 	adc.w	r3, fp, r3
 800c0fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c10c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c114:	460b      	mov	r3, r1
 800c116:	18db      	adds	r3, r3, r3
 800c118:	643b      	str	r3, [r7, #64]	; 0x40
 800c11a:	4613      	mov	r3, r2
 800c11c:	eb42 0303 	adc.w	r3, r2, r3
 800c120:	647b      	str	r3, [r7, #68]	; 0x44
 800c122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c12a:	f7f4 fdc5 	bl	8000cb8 <__aeabi_uldivmod>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4611      	mov	r1, r2
 800c134:	4b3b      	ldr	r3, [pc, #236]	; (800c224 <UART_SetConfig+0x2d4>)
 800c136:	fba3 2301 	umull	r2, r3, r3, r1
 800c13a:	095b      	lsrs	r3, r3, #5
 800c13c:	2264      	movs	r2, #100	; 0x64
 800c13e:	fb02 f303 	mul.w	r3, r2, r3
 800c142:	1acb      	subs	r3, r1, r3
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c14a:	4b36      	ldr	r3, [pc, #216]	; (800c224 <UART_SetConfig+0x2d4>)
 800c14c:	fba3 2302 	umull	r2, r3, r3, r2
 800c150:	095b      	lsrs	r3, r3, #5
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c158:	441c      	add	r4, r3
 800c15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c16c:	4642      	mov	r2, r8
 800c16e:	464b      	mov	r3, r9
 800c170:	1891      	adds	r1, r2, r2
 800c172:	63b9      	str	r1, [r7, #56]	; 0x38
 800c174:	415b      	adcs	r3, r3
 800c176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c17c:	4641      	mov	r1, r8
 800c17e:	1851      	adds	r1, r2, r1
 800c180:	6339      	str	r1, [r7, #48]	; 0x30
 800c182:	4649      	mov	r1, r9
 800c184:	414b      	adcs	r3, r1
 800c186:	637b      	str	r3, [r7, #52]	; 0x34
 800c188:	f04f 0200 	mov.w	r2, #0
 800c18c:	f04f 0300 	mov.w	r3, #0
 800c190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c194:	4659      	mov	r1, fp
 800c196:	00cb      	lsls	r3, r1, #3
 800c198:	4651      	mov	r1, sl
 800c19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c19e:	4651      	mov	r1, sl
 800c1a0:	00ca      	lsls	r2, r1, #3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4642      	mov	r2, r8
 800c1aa:	189b      	adds	r3, r3, r2
 800c1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1b0:	464b      	mov	r3, r9
 800c1b2:	460a      	mov	r2, r1
 800c1b4:	eb42 0303 	adc.w	r3, r2, r3
 800c1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c1cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	18db      	adds	r3, r3, r3
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	eb42 0303 	adc.w	r3, r2, r3
 800c1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c1e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c1e6:	f7f4 fd67 	bl	8000cb8 <__aeabi_uldivmod>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <UART_SetConfig+0x2d4>)
 800c1f0:	fba3 1302 	umull	r1, r3, r3, r2
 800c1f4:	095b      	lsrs	r3, r3, #5
 800c1f6:	2164      	movs	r1, #100	; 0x64
 800c1f8:	fb01 f303 	mul.w	r3, r1, r3
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	3332      	adds	r3, #50	; 0x32
 800c202:	4a08      	ldr	r2, [pc, #32]	; (800c224 <UART_SetConfig+0x2d4>)
 800c204:	fba2 2303 	umull	r2, r3, r2, r3
 800c208:	095b      	lsrs	r3, r3, #5
 800c20a:	f003 0207 	and.w	r2, r3, #7
 800c20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4422      	add	r2, r4
 800c216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c218:	e105      	b.n	800c426 <UART_SetConfig+0x4d6>
 800c21a:	bf00      	nop
 800c21c:	40011000 	.word	0x40011000
 800c220:	40011400 	.word	0x40011400
 800c224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c22c:	2200      	movs	r2, #0
 800c22e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c23a:	4642      	mov	r2, r8
 800c23c:	464b      	mov	r3, r9
 800c23e:	1891      	adds	r1, r2, r2
 800c240:	6239      	str	r1, [r7, #32]
 800c242:	415b      	adcs	r3, r3
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
 800c246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c24a:	4641      	mov	r1, r8
 800c24c:	1854      	adds	r4, r2, r1
 800c24e:	4649      	mov	r1, r9
 800c250:	eb43 0501 	adc.w	r5, r3, r1
 800c254:	f04f 0200 	mov.w	r2, #0
 800c258:	f04f 0300 	mov.w	r3, #0
 800c25c:	00eb      	lsls	r3, r5, #3
 800c25e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c262:	00e2      	lsls	r2, r4, #3
 800c264:	4614      	mov	r4, r2
 800c266:	461d      	mov	r5, r3
 800c268:	4643      	mov	r3, r8
 800c26a:	18e3      	adds	r3, r4, r3
 800c26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c270:	464b      	mov	r3, r9
 800c272:	eb45 0303 	adc.w	r3, r5, r3
 800c276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c28a:	f04f 0200 	mov.w	r2, #0
 800c28e:	f04f 0300 	mov.w	r3, #0
 800c292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c296:	4629      	mov	r1, r5
 800c298:	008b      	lsls	r3, r1, #2
 800c29a:	4621      	mov	r1, r4
 800c29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	008a      	lsls	r2, r1, #2
 800c2a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c2a8:	f7f4 fd06 	bl	8000cb8 <__aeabi_uldivmod>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4b60      	ldr	r3, [pc, #384]	; (800c434 <UART_SetConfig+0x4e4>)
 800c2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	011c      	lsls	r4, r3, #4
 800c2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c2c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c2cc:	4642      	mov	r2, r8
 800c2ce:	464b      	mov	r3, r9
 800c2d0:	1891      	adds	r1, r2, r2
 800c2d2:	61b9      	str	r1, [r7, #24]
 800c2d4:	415b      	adcs	r3, r3
 800c2d6:	61fb      	str	r3, [r7, #28]
 800c2d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2dc:	4641      	mov	r1, r8
 800c2de:	1851      	adds	r1, r2, r1
 800c2e0:	6139      	str	r1, [r7, #16]
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	414b      	adcs	r3, r1
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	f04f 0200 	mov.w	r2, #0
 800c2ec:	f04f 0300 	mov.w	r3, #0
 800c2f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c2f4:	4659      	mov	r1, fp
 800c2f6:	00cb      	lsls	r3, r1, #3
 800c2f8:	4651      	mov	r1, sl
 800c2fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2fe:	4651      	mov	r1, sl
 800c300:	00ca      	lsls	r2, r1, #3
 800c302:	4610      	mov	r0, r2
 800c304:	4619      	mov	r1, r3
 800c306:	4603      	mov	r3, r0
 800c308:	4642      	mov	r2, r8
 800c30a:	189b      	adds	r3, r3, r2
 800c30c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c310:	464b      	mov	r3, r9
 800c312:	460a      	mov	r2, r1
 800c314:	eb42 0303 	adc.w	r3, r2, r3
 800c318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	67bb      	str	r3, [r7, #120]	; 0x78
 800c326:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	f04f 0300 	mov.w	r3, #0
 800c330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c334:	4649      	mov	r1, r9
 800c336:	008b      	lsls	r3, r1, #2
 800c338:	4641      	mov	r1, r8
 800c33a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c33e:	4641      	mov	r1, r8
 800c340:	008a      	lsls	r2, r1, #2
 800c342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c346:	f7f4 fcb7 	bl	8000cb8 <__aeabi_uldivmod>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4b39      	ldr	r3, [pc, #228]	; (800c434 <UART_SetConfig+0x4e4>)
 800c350:	fba3 1302 	umull	r1, r3, r3, r2
 800c354:	095b      	lsrs	r3, r3, #5
 800c356:	2164      	movs	r1, #100	; 0x64
 800c358:	fb01 f303 	mul.w	r3, r1, r3
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	011b      	lsls	r3, r3, #4
 800c360:	3332      	adds	r3, #50	; 0x32
 800c362:	4a34      	ldr	r2, [pc, #208]	; (800c434 <UART_SetConfig+0x4e4>)
 800c364:	fba2 2303 	umull	r2, r3, r2, r3
 800c368:	095b      	lsrs	r3, r3, #5
 800c36a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c36e:	441c      	add	r4, r3
 800c370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c374:	2200      	movs	r2, #0
 800c376:	673b      	str	r3, [r7, #112]	; 0x70
 800c378:	677a      	str	r2, [r7, #116]	; 0x74
 800c37a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c37e:	4642      	mov	r2, r8
 800c380:	464b      	mov	r3, r9
 800c382:	1891      	adds	r1, r2, r2
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	415b      	adcs	r3, r3
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c38e:	4641      	mov	r1, r8
 800c390:	1851      	adds	r1, r2, r1
 800c392:	6039      	str	r1, [r7, #0]
 800c394:	4649      	mov	r1, r9
 800c396:	414b      	adcs	r3, r1
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	f04f 0200 	mov.w	r2, #0
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3a6:	4659      	mov	r1, fp
 800c3a8:	00cb      	lsls	r3, r1, #3
 800c3aa:	4651      	mov	r1, sl
 800c3ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3b0:	4651      	mov	r1, sl
 800c3b2:	00ca      	lsls	r2, r1, #3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	189b      	adds	r3, r3, r2
 800c3be:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3c0:	464b      	mov	r3, r9
 800c3c2:	460a      	mov	r2, r1
 800c3c4:	eb42 0303 	adc.w	r3, r2, r3
 800c3c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	663b      	str	r3, [r7, #96]	; 0x60
 800c3d4:	667a      	str	r2, [r7, #100]	; 0x64
 800c3d6:	f04f 0200 	mov.w	r2, #0
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	008b      	lsls	r3, r1, #2
 800c3e6:	4641      	mov	r1, r8
 800c3e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3ec:	4641      	mov	r1, r8
 800c3ee:	008a      	lsls	r2, r1, #2
 800c3f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c3f4:	f7f4 fc60 	bl	8000cb8 <__aeabi_uldivmod>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4b0d      	ldr	r3, [pc, #52]	; (800c434 <UART_SetConfig+0x4e4>)
 800c3fe:	fba3 1302 	umull	r1, r3, r3, r2
 800c402:	095b      	lsrs	r3, r3, #5
 800c404:	2164      	movs	r1, #100	; 0x64
 800c406:	fb01 f303 	mul.w	r3, r1, r3
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	3332      	adds	r3, #50	; 0x32
 800c410:	4a08      	ldr	r2, [pc, #32]	; (800c434 <UART_SetConfig+0x4e4>)
 800c412:	fba2 2303 	umull	r2, r3, r2, r3
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	f003 020f 	and.w	r2, r3, #15
 800c41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4422      	add	r2, r4
 800c424:	609a      	str	r2, [r3, #8]
}
 800c426:	bf00      	nop
 800c428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c42c:	46bd      	mov	sp, r7
 800c42e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c432:	bf00      	nop
 800c434:	51eb851f 	.word	0x51eb851f

0800c438 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c438:	b084      	sub	sp, #16
 800c43a:	b480      	push	{r7}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	f107 001c 	add.w	r0, r7, #28
 800c446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c44e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c450:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c452:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c456:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c45a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c45e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c462:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	431a      	orrs	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	b004      	add	sp, #16
 800c48c:	4770      	bx	lr

0800c48e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c4ca:	b480      	push	{r7}
 800c4cc:	b083      	sub	sp, #12
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0303 	and.w	r3, r3, #3
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c502:	b480      	push	{r7}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c520:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c526:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c52c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	4313      	orrs	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c53c:	f023 030f 	bic.w	r3, r3, #15
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	431a      	orrs	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	b2db      	uxtb	r3, r3
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3314      	adds	r3, #20
 800c57e:	461a      	mov	r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	4413      	add	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
}  
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c596:	b480      	push	{r7}
 800c598:	b085      	sub	sp, #20
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0

}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b088      	sub	sp, #32
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c600:	2340      	movs	r3, #64	; 0x40
 800c602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c60c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff ff74 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c61e:	2110      	movs	r1, #16
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f9d7 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c628:	69fb      	ldr	r3, [r7, #28]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3720      	adds	r7, #32
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b088      	sub	sp, #32
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c640:	2311      	movs	r3, #17
 800c642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c644:	2340      	movs	r3, #64	; 0x40
 800c646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c648:	2300      	movs	r3, #0
 800c64a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c652:	f107 0308 	add.w	r3, r7, #8
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff52 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c65e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c662:	2111      	movs	r1, #17
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f9b5 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c66a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c66c:	69fb      	ldr	r3, [r7, #28]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b088      	sub	sp, #32
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c684:	2312      	movs	r3, #18
 800c686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c688:	2340      	movs	r3, #64	; 0x40
 800c68a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c694:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c696:	f107 0308 	add.w	r3, r7, #8
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7ff ff30 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c6a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6a6:	2112      	movs	r1, #18
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f993 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b088      	sub	sp, #32
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6c8:	2318      	movs	r3, #24
 800c6ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6cc:	2340      	movs	r3, #64	; 0x40
 800c6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6da:	f107 0308 	add.w	r3, r7, #8
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff ff0e 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ea:	2118      	movs	r1, #24
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f971 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6f4:	69fb      	ldr	r3, [r7, #28]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3720      	adds	r7, #32
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b088      	sub	sp, #32
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c70c:	2319      	movs	r3, #25
 800c70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c710:	2340      	movs	r3, #64	; 0x40
 800c712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c71c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c71e:	f107 0308 	add.w	r3, r7, #8
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff feec 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c72a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c72e:	2119      	movs	r1, #25
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f94f 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c738:	69fb      	ldr	r3, [r7, #28]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b088      	sub	sp, #32
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c750:	230c      	movs	r3, #12
 800c752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c754:	2340      	movs	r3, #64	; 0x40
 800c756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c758:	2300      	movs	r3, #0
 800c75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff feca 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c76e:	4a05      	ldr	r2, [pc, #20]	; (800c784 <SDMMC_CmdStopTransfer+0x40>)
 800c770:	210c      	movs	r1, #12
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f92e 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c77a:	69fb      	ldr	r3, [r7, #28]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	05f5e100 	.word	0x05f5e100

0800c788 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08a      	sub	sp, #40	; 0x28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c798:	2307      	movs	r3, #7
 800c79a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c79c:	2340      	movs	r3, #64	; 0x40
 800c79e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7aa:	f107 0310 	add.w	r3, r7, #16
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff fea6 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ba:	2107      	movs	r1, #7
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f909 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c7c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3728      	adds	r7, #40	; 0x28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b088      	sub	sp, #32
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ec:	f107 0308 	add.w	r3, r7, #8
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff fe85 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fb23 	bl	800ce44 <SDMMC_GetCmdError>
 800c7fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c800:	69fb      	ldr	r3, [r7, #28]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3720      	adds	r7, #32
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b088      	sub	sp, #32
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c812:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c818:	2308      	movs	r3, #8
 800c81a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c81c:	2340      	movs	r3, #64	; 0x40
 800c81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c820:	2300      	movs	r3, #0
 800c822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c82a:	f107 0308 	add.w	r3, r7, #8
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff fe66 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fab6 	bl	800cda8 <SDMMC_GetCmdResp7>
 800c83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c83e:	69fb      	ldr	r3, [r7, #28]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3720      	adds	r7, #32
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c856:	2337      	movs	r3, #55	; 0x37
 800c858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c85a:	2340      	movs	r3, #64	; 0x40
 800c85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c85e:	2300      	movs	r3, #0
 800c860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c868:	f107 0308 	add.w	r3, r7, #8
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff fe47 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c874:	f241 3288 	movw	r2, #5000	; 0x1388
 800c878:	2137      	movs	r1, #55	; 0x37
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f8aa 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c882:	69fb      	ldr	r3, [r7, #28]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3720      	adds	r7, #32
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c8a2:	2329      	movs	r3, #41	; 0x29
 800c8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8a6:	2340      	movs	r3, #64	; 0x40
 800c8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8b4:	f107 0308 	add.w	r3, r7, #8
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff fe21 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f9bd 	bl	800cc40 <SDMMC_GetCmdResp3>
 800c8c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8c8:	69fb      	ldr	r3, [r7, #28]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b088      	sub	sp, #32
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c8e2:	23c0      	movs	r3, #192	; 0xc0
 800c8e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8f0:	f107 0308 	add.w	r3, r7, #8
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff fe03 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f957 	bl	800cbb0 <SDMMC_GetCmdResp2>
 800c902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c904:	69fb      	ldr	r3, [r7, #28]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3720      	adds	r7, #32
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b088      	sub	sp, #32
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c91c:	2309      	movs	r3, #9
 800c91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c920:	23c0      	movs	r3, #192	; 0xc0
 800c922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c924:	2300      	movs	r3, #0
 800c926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c92c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c92e:	f107 0308 	add.w	r3, r7, #8
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff fde4 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f938 	bl	800cbb0 <SDMMC_GetCmdResp2>
 800c940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c942:	69fb      	ldr	r3, [r7, #28]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3720      	adds	r7, #32
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c956:	2300      	movs	r3, #0
 800c958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c95a:	2303      	movs	r3, #3
 800c95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c95e:	2340      	movs	r3, #64	; 0x40
 800c960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c962:	2300      	movs	r3, #0
 800c964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c96a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c96c:	f107 0308 	add.w	r3, r7, #8
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7ff fdc5 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	2103      	movs	r1, #3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f99d 	bl	800ccbc <SDMMC_GetCmdResp6>
 800c982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c984:	69fb      	ldr	r3, [r7, #28]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3720      	adds	r7, #32
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b088      	sub	sp, #32
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c99c:	230d      	movs	r3, #13
 800c99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9a0:	2340      	movs	r3, #64	; 0x40
 800c9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9ae:	f107 0308 	add.w	r3, r7, #8
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7ff fda4 	bl	800c502 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9be:	210d      	movs	r1, #13
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f807 	bl	800c9d4 <SDMMC_GetCmdResp1>
 800c9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3720      	adds	r7, #32
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c9e2:	4b70      	ldr	r3, [pc, #448]	; (800cba4 <SDMMC_GetCmdResp1+0x1d0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a70      	ldr	r2, [pc, #448]	; (800cba8 <SDMMC_GetCmdResp1+0x1d4>)
 800c9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ec:	0a5a      	lsrs	r2, r3, #9
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	fb02 f303 	mul.w	r3, r2, r3
 800c9f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	1e5a      	subs	r2, r3, #1
 800c9fa:	61fa      	str	r2, [r7, #28]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca04:	e0c9      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca0a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0ef      	beq.n	800c9f6 <SDMMC_GetCmdResp1+0x22>
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1ea      	bne.n	800c9f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca24:	f003 0304 	and.w	r3, r3, #4
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2204      	movs	r2, #4
 800ca30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca32:	2304      	movs	r3, #4
 800ca34:	e0b1      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2201      	movs	r2, #1
 800ca46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e0a6      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	22c5      	movs	r2, #197	; 0xc5
 800ca50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7ff fd7f 	bl	800c556 <SDIO_GetCommandResponse>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d001      	beq.n	800ca66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e099      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ca66:	2100      	movs	r1, #0
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7ff fd81 	bl	800c570 <SDIO_GetResponse>
 800ca6e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	4b4e      	ldr	r3, [pc, #312]	; (800cbac <SDMMC_GetCmdResp1+0x1d8>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e08d      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da02      	bge.n	800ca8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca88:	e087      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca94:	2340      	movs	r3, #64	; 0x40
 800ca96:	e080      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800caa2:	2380      	movs	r3, #128	; 0x80
 800caa4:	e079      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cab4:	e071      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cac4:	e069      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cad4:	e061      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cae4:	e059      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800caf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caf4:	e051      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb04:	e049      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb14:	e041      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb24:	e039      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cb30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb34:	e031      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cb44:	e029      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb54:	e021      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cb64:	e019      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb74:	e011      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cb80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb84:	e009      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f003 0308 	and.w	r3, r3, #8
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cb90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb94:	e001      	b.n	800cb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000048 	.word	0x20000048
 800cba8:	10624dd3 	.word	0x10624dd3
 800cbac:	fdffe008 	.word	0xfdffe008

0800cbb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbb8:	4b1f      	ldr	r3, [pc, #124]	; (800cc38 <SDMMC_GetCmdResp2+0x88>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a1f      	ldr	r2, [pc, #124]	; (800cc3c <SDMMC_GetCmdResp2+0x8c>)
 800cbbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc2:	0a5b      	lsrs	r3, r3, #9
 800cbc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc8:	fb02 f303 	mul.w	r3, r2, r3
 800cbcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	1e5a      	subs	r2, r3, #1
 800cbd2:	60fa      	str	r2, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbdc:	e026      	b.n	800cc2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0ef      	beq.n	800cbce <SDMMC_GetCmdResp2+0x1e>
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ea      	bne.n	800cbce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d004      	beq.n	800cc0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2204      	movs	r2, #4
 800cc08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc0a:	2304      	movs	r3, #4
 800cc0c:	e00e      	b.n	800cc2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e003      	b.n	800cc2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	22c5      	movs	r2, #197	; 0xc5
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	20000048 	.word	0x20000048
 800cc3c:	10624dd3 	.word	0x10624dd3

0800cc40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc48:	4b1a      	ldr	r3, [pc, #104]	; (800ccb4 <SDMMC_GetCmdResp3+0x74>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a1a      	ldr	r2, [pc, #104]	; (800ccb8 <SDMMC_GetCmdResp3+0x78>)
 800cc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc52:	0a5b      	lsrs	r3, r3, #9
 800cc54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc58:	fb02 f303 	mul.w	r3, r2, r3
 800cc5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	1e5a      	subs	r2, r3, #1
 800cc62:	60fa      	str	r2, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc6c:	e01b      	b.n	800cca6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0ef      	beq.n	800cc5e <SDMMC_GetCmdResp3+0x1e>
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1ea      	bne.n	800cc5e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d004      	beq.n	800cc9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2204      	movs	r2, #4
 800cc98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc9a:	2304      	movs	r3, #4
 800cc9c:	e003      	b.n	800cca6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	22c5      	movs	r2, #197	; 0xc5
 800cca2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	20000048 	.word	0x20000048
 800ccb8:	10624dd3 	.word	0x10624dd3

0800ccbc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccca:	4b35      	ldr	r3, [pc, #212]	; (800cda0 <SDMMC_GetCmdResp6+0xe4>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a35      	ldr	r2, [pc, #212]	; (800cda4 <SDMMC_GetCmdResp6+0xe8>)
 800ccd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd4:	0a5b      	lsrs	r3, r3, #9
 800ccd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccda:	fb02 f303 	mul.w	r3, r2, r3
 800ccde:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	1e5a      	subs	r2, r3, #1
 800cce4:	61fa      	str	r2, [r7, #28]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccee:	e052      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d0ef      	beq.n	800cce0 <SDMMC_GetCmdResp6+0x24>
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1ea      	bne.n	800cce0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd0e:	f003 0304 	and.w	r3, r3, #4
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d004      	beq.n	800cd20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2204      	movs	r2, #4
 800cd1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	e03a      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d004      	beq.n	800cd36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e02f      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f7ff fc0d 	bl	800c556 <SDIO_GetCommandResponse>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	461a      	mov	r2, r3
 800cd40:	7afb      	ldrb	r3, [r7, #11]
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d001      	beq.n	800cd4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e025      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	22c5      	movs	r2, #197	; 0xc5
 800cd4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cd50:	2100      	movs	r1, #0
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff fc0c 	bl	800c570 <SDIO_GetResponse>
 800cd58:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	0c1b      	lsrs	r3, r3, #16
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e011      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd80:	e009      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd90:	e001      	b.n	800cd96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20000048 	.word	0x20000048
 800cda4:	10624dd3 	.word	0x10624dd3

0800cda8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdb0:	4b22      	ldr	r3, [pc, #136]	; (800ce3c <SDMMC_GetCmdResp7+0x94>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a22      	ldr	r2, [pc, #136]	; (800ce40 <SDMMC_GetCmdResp7+0x98>)
 800cdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdba:	0a5b      	lsrs	r3, r3, #9
 800cdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc0:	fb02 f303 	mul.w	r3, r2, r3
 800cdc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	1e5a      	subs	r2, r3, #1
 800cdca:	60fa      	str	r2, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdd4:	e02c      	b.n	800ce30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0ef      	beq.n	800cdc6 <SDMMC_GetCmdResp7+0x1e>
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1ea      	bne.n	800cdc6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf4:	f003 0304 	and.w	r3, r3, #4
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d004      	beq.n	800ce06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2204      	movs	r2, #4
 800ce00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce02:	2304      	movs	r3, #4
 800ce04:	e014      	b.n	800ce30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0a:	f003 0301 	and.w	r3, r3, #1
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d004      	beq.n	800ce1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2201      	movs	r2, #1
 800ce16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e009      	b.n	800ce30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2240      	movs	r2, #64	; 0x40
 800ce2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ce2e:	2300      	movs	r3, #0
  
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	20000048 	.word	0x20000048
 800ce40:	10624dd3 	.word	0x10624dd3

0800ce44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce4c:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <SDMMC_GetCmdError+0x50>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a11      	ldr	r2, [pc, #68]	; (800ce98 <SDMMC_GetCmdError+0x54>)
 800ce52:	fba2 2303 	umull	r2, r3, r2, r3
 800ce56:	0a5b      	lsrs	r3, r3, #9
 800ce58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce5c:	fb02 f303 	mul.w	r3, r2, r3
 800ce60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	1e5a      	subs	r2, r3, #1
 800ce66:	60fa      	str	r2, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce70:	e009      	b.n	800ce86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0f1      	beq.n	800ce62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	22c5      	movs	r2, #197	; 0xc5
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	20000048 	.word	0x20000048
 800ce98:	10624dd3 	.word	0x10624dd3

0800ce9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	f107 001c 	add.w	r0, r7, #28
 800ceaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d122      	bne.n	800cefa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d105      	bne.n	800ceee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 fc3e 	bl	800e770 <USB_CoreReset>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]
 800cef8:	e01a      	b.n	800cf30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f001 fc32 	bl	800e770 <USB_CoreReset>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cf10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	639a      	str	r2, [r3, #56]	; 0x38
 800cf22:	e005      	b.n	800cf30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d10b      	bne.n	800cf4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	f043 0206 	orr.w	r2, r3, #6
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f043 0220 	orr.w	r2, r3, #32
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf5a:	b004      	add	sp, #16
 800cf5c:	4770      	bx	lr
	...

0800cf60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d165      	bne.n	800d040 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	4a41      	ldr	r2, [pc, #260]	; (800d07c <USB_SetTurnaroundTime+0x11c>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d906      	bls.n	800cf8a <USB_SetTurnaroundTime+0x2a>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	4a40      	ldr	r2, [pc, #256]	; (800d080 <USB_SetTurnaroundTime+0x120>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d202      	bcs.n	800cf8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cf84:	230f      	movs	r3, #15
 800cf86:	617b      	str	r3, [r7, #20]
 800cf88:	e062      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	4a3c      	ldr	r2, [pc, #240]	; (800d080 <USB_SetTurnaroundTime+0x120>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d306      	bcc.n	800cfa0 <USB_SetTurnaroundTime+0x40>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	4a3b      	ldr	r2, [pc, #236]	; (800d084 <USB_SetTurnaroundTime+0x124>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d202      	bcs.n	800cfa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cf9a:	230e      	movs	r3, #14
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e057      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	4a38      	ldr	r2, [pc, #224]	; (800d084 <USB_SetTurnaroundTime+0x124>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d306      	bcc.n	800cfb6 <USB_SetTurnaroundTime+0x56>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4a37      	ldr	r2, [pc, #220]	; (800d088 <USB_SetTurnaroundTime+0x128>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d202      	bcs.n	800cfb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cfb0:	230d      	movs	r3, #13
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	e04c      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	4a33      	ldr	r2, [pc, #204]	; (800d088 <USB_SetTurnaroundTime+0x128>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d306      	bcc.n	800cfcc <USB_SetTurnaroundTime+0x6c>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	4a32      	ldr	r2, [pc, #200]	; (800d08c <USB_SetTurnaroundTime+0x12c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d802      	bhi.n	800cfcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e041      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	4a2f      	ldr	r2, [pc, #188]	; (800d08c <USB_SetTurnaroundTime+0x12c>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d906      	bls.n	800cfe2 <USB_SetTurnaroundTime+0x82>
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4a2e      	ldr	r2, [pc, #184]	; (800d090 <USB_SetTurnaroundTime+0x130>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d802      	bhi.n	800cfe2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cfdc:	230b      	movs	r3, #11
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e036      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	4a2a      	ldr	r2, [pc, #168]	; (800d090 <USB_SetTurnaroundTime+0x130>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d906      	bls.n	800cff8 <USB_SetTurnaroundTime+0x98>
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	4a29      	ldr	r2, [pc, #164]	; (800d094 <USB_SetTurnaroundTime+0x134>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d802      	bhi.n	800cff8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cff2:	230a      	movs	r3, #10
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	e02b      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	4a26      	ldr	r2, [pc, #152]	; (800d094 <USB_SetTurnaroundTime+0x134>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d906      	bls.n	800d00e <USB_SetTurnaroundTime+0xae>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	4a25      	ldr	r2, [pc, #148]	; (800d098 <USB_SetTurnaroundTime+0x138>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d202      	bcs.n	800d00e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d008:	2309      	movs	r3, #9
 800d00a:	617b      	str	r3, [r7, #20]
 800d00c:	e020      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	4a21      	ldr	r2, [pc, #132]	; (800d098 <USB_SetTurnaroundTime+0x138>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d306      	bcc.n	800d024 <USB_SetTurnaroundTime+0xc4>
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	4a20      	ldr	r2, [pc, #128]	; (800d09c <USB_SetTurnaroundTime+0x13c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d802      	bhi.n	800d024 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d01e:	2308      	movs	r3, #8
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e015      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	4a1d      	ldr	r2, [pc, #116]	; (800d09c <USB_SetTurnaroundTime+0x13c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d906      	bls.n	800d03a <USB_SetTurnaroundTime+0xda>
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	4a1c      	ldr	r2, [pc, #112]	; (800d0a0 <USB_SetTurnaroundTime+0x140>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d202      	bcs.n	800d03a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d034:	2307      	movs	r3, #7
 800d036:	617b      	str	r3, [r7, #20]
 800d038:	e00a      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d03a:	2306      	movs	r3, #6
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	e007      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d046:	2309      	movs	r3, #9
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	e001      	b.n	800d050 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d04c:	2309      	movs	r3, #9
 800d04e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	68da      	ldr	r2, [r3, #12]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	029b      	lsls	r3, r3, #10
 800d064:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d068:	431a      	orrs	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	371c      	adds	r7, #28
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	00d8acbf 	.word	0x00d8acbf
 800d080:	00e4e1c0 	.word	0x00e4e1c0
 800d084:	00f42400 	.word	0x00f42400
 800d088:	01067380 	.word	0x01067380
 800d08c:	011a499f 	.word	0x011a499f
 800d090:	01312cff 	.word	0x01312cff
 800d094:	014ca43f 	.word	0x014ca43f
 800d098:	016e3600 	.word	0x016e3600
 800d09c:	01a6ab1f 	.word	0x01a6ab1f
 800d0a0:	01e84800 	.word	0x01e84800

0800d0a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	f043 0201 	orr.w	r2, r3, #1
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	370c      	adds	r7, #12
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b083      	sub	sp, #12
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f023 0201 	bic.w	r2, r3, #1
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d115      	bne.n	800d136 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d116:	2001      	movs	r0, #1
 800d118:	f7f6 fa4e 	bl	80035b8 <HAL_Delay>
      ms++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 fa94 	bl	800e650 <USB_GetMode>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d01e      	beq.n	800d16c <USB_SetCurrentMode+0x84>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2b31      	cmp	r3, #49	; 0x31
 800d132:	d9f0      	bls.n	800d116 <USB_SetCurrentMode+0x2e>
 800d134:	e01a      	b.n	800d16c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d136:	78fb      	ldrb	r3, [r7, #3]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d115      	bne.n	800d168 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d148:	2001      	movs	r0, #1
 800d14a:	f7f6 fa35 	bl	80035b8 <HAL_Delay>
      ms++;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3301      	adds	r3, #1
 800d152:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f001 fa7b 	bl	800e650 <USB_GetMode>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d005      	beq.n	800d16c <USB_SetCurrentMode+0x84>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b31      	cmp	r3, #49	; 0x31
 800d164:	d9f0      	bls.n	800d148 <USB_SetCurrentMode+0x60>
 800d166:	e001      	b.n	800d16c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e005      	b.n	800d178 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b32      	cmp	r3, #50	; 0x32
 800d170:	d101      	bne.n	800d176 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e000      	b.n	800d178 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d180:	b084      	sub	sp, #16
 800d182:	b580      	push	{r7, lr}
 800d184:	b086      	sub	sp, #24
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d18e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d19a:	2300      	movs	r3, #0
 800d19c:	613b      	str	r3, [r7, #16]
 800d19e:	e009      	b.n	800d1b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	3340      	adds	r3, #64	; 0x40
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b0e      	cmp	r3, #14
 800d1b8:	d9f2      	bls.n	800d1a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d11c      	bne.n	800d1fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1ce:	f043 0302 	orr.w	r3, r3, #2
 800d1d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
 800d1f8:	e00b      	b.n	800d212 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d218:	461a      	mov	r2, r3
 800d21a:	2300      	movs	r3, #0
 800d21c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d224:	4619      	mov	r1, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d22c:	461a      	mov	r2, r3
 800d22e:	680b      	ldr	r3, [r1, #0]
 800d230:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	2b01      	cmp	r3, #1
 800d236:	d10c      	bne.n	800d252 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d104      	bne.n	800d248 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d23e:	2100      	movs	r1, #0
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f965 	bl	800d510 <USB_SetDevSpeed>
 800d246:	e008      	b.n	800d25a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d248:	2101      	movs	r1, #1
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f960 	bl	800d510 <USB_SetDevSpeed>
 800d250:	e003      	b.n	800d25a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d252:	2103      	movs	r1, #3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f95b 	bl	800d510 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d25a:	2110      	movs	r1, #16
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f8f3 	bl	800d448 <USB_FlushTxFifo>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f91f 	bl	800d4b0 <USB_FlushRxFifo>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	461a      	mov	r2, r3
 800d284:	2300      	movs	r3, #0
 800d286:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d28e:	461a      	mov	r2, r3
 800d290:	2300      	movs	r3, #0
 800d292:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29a:	461a      	mov	r2, r3
 800d29c:	2300      	movs	r3, #0
 800d29e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	613b      	str	r3, [r7, #16]
 800d2a4:	e043      	b.n	800d32e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2bc:	d118      	bne.n	800d2f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	e013      	b.n	800d302 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	e008      	b.n	800d302 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	015a      	lsls	r2, r3, #5
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	2300      	movs	r3, #0
 800d300:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30e:	461a      	mov	r2, r3
 800d310:	2300      	movs	r3, #0
 800d312:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	461a      	mov	r2, r3
 800d322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	3301      	adds	r3, #1
 800d32c:	613b      	str	r3, [r7, #16]
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	429a      	cmp	r2, r3
 800d334:	d3b7      	bcc.n	800d2a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d336:	2300      	movs	r3, #0
 800d338:	613b      	str	r3, [r7, #16]
 800d33a:	e043      	b.n	800d3c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	015a      	lsls	r2, r3, #5
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	4413      	add	r3, r2
 800d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d34e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d352:	d118      	bne.n	800d386 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	015a      	lsls	r2, r3, #5
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	4413      	add	r3, r2
 800d362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d366:	461a      	mov	r2, r3
 800d368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	e013      	b.n	800d398 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	015a      	lsls	r2, r3, #5
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	4413      	add	r3, r2
 800d378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37c:	461a      	mov	r2, r3
 800d37e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d382:	6013      	str	r3, [r2, #0]
 800d384:	e008      	b.n	800d398 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	015a      	lsls	r2, r3, #5
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	4413      	add	r3, r2
 800d38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d392:	461a      	mov	r2, r3
 800d394:	2300      	movs	r3, #0
 800d396:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	015a      	lsls	r2, r3, #5
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	4413      	add	r3, r2
 800d3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	613b      	str	r3, [r7, #16]
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d3b7      	bcc.n	800d33c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d3ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d105      	bne.n	800d400 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	f043 0210 	orr.w	r2, r3, #16
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699a      	ldr	r2, [r3, #24]
 800d404:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <USB_DevInit+0x2c4>)
 800d406:	4313      	orrs	r3, r2
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d005      	beq.n	800d41e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	f043 0208 	orr.w	r2, r3, #8
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d420:	2b01      	cmp	r3, #1
 800d422:	d107      	bne.n	800d434 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d42c:	f043 0304 	orr.w	r3, r3, #4
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d434:	7dfb      	ldrb	r3, [r7, #23]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d440:	b004      	add	sp, #16
 800d442:	4770      	bx	lr
 800d444:	803c3800 	.word	0x803c3800

0800d448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	4a13      	ldr	r2, [pc, #76]	; (800d4ac <USB_FlushTxFifo+0x64>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d901      	bls.n	800d468 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e01b      	b.n	800d4a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	daf2      	bge.n	800d456 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	019b      	lsls	r3, r3, #6
 800d478:	f043 0220 	orr.w	r2, r3, #32
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	3301      	adds	r3, #1
 800d484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	4a08      	ldr	r2, [pc, #32]	; (800d4ac <USB_FlushTxFifo+0x64>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d901      	bls.n	800d492 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d48e:	2303      	movs	r3, #3
 800d490:	e006      	b.n	800d4a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b20      	cmp	r3, #32
 800d49c:	d0f0      	beq.n	800d480 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	00030d40 	.word	0x00030d40

0800d4b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	4a11      	ldr	r2, [pc, #68]	; (800d50c <USB_FlushRxFifo+0x5c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d901      	bls.n	800d4ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e018      	b.n	800d500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	daf2      	bge.n	800d4bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2210      	movs	r2, #16
 800d4de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4a08      	ldr	r2, [pc, #32]	; (800d50c <USB_FlushRxFifo+0x5c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d901      	bls.n	800d4f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e006      	b.n	800d500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	f003 0310 	and.w	r3, r3, #16
 800d4fa:	2b10      	cmp	r3, #16
 800d4fc:	d0f0      	beq.n	800d4e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	00030d40 	.word	0x00030d40

0800d510 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	78fb      	ldrb	r3, [r7, #3]
 800d52a:	68f9      	ldr	r1, [r7, #12]
 800d52c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d530:	4313      	orrs	r3, r2
 800d532:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d542:	b480      	push	{r7}
 800d544:	b087      	sub	sp, #28
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f003 0306 	and.w	r3, r3, #6
 800d55a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d102      	bne.n	800d568 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d562:	2300      	movs	r3, #0
 800d564:	75fb      	strb	r3, [r7, #23]
 800d566:	e00a      	b.n	800d57e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d002      	beq.n	800d574 <USB_GetDevSpeed+0x32>
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b06      	cmp	r3, #6
 800d572:	d102      	bne.n	800d57a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d574:	2302      	movs	r3, #2
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	e001      	b.n	800d57e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d57a:	230f      	movs	r3, #15
 800d57c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d580:	4618      	mov	r0, r3
 800d582:	371c      	adds	r7, #28
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	785b      	ldrb	r3, [r3, #1]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d13a      	bne.n	800d61e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ae:	69da      	ldr	r2, [r3, #28]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	68f9      	ldr	r1, [r7, #12]
 800d5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d155      	bne.n	800d68c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	791b      	ldrb	r3, [r3, #4]
 800d5fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	059b      	lsls	r3, r3, #22
 800d602:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d604:	4313      	orrs	r3, r2
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	e036      	b.n	800d68c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d624:	69da      	ldr	r2, [r3, #28]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	2101      	movs	r1, #1
 800d630:	fa01 f303 	lsl.w	r3, r1, r3
 800d634:	041b      	lsls	r3, r3, #16
 800d636:	68f9      	ldr	r1, [r7, #12]
 800d638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d63c:	4313      	orrs	r3, r2
 800d63e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d11a      	bne.n	800d68c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	015a      	lsls	r2, r3, #5
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	4413      	add	r3, r2
 800d65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	791b      	ldrb	r3, [r3, #4]
 800d670:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d672:	430b      	orrs	r3, r1
 800d674:	4313      	orrs	r3, r2
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	0151      	lsls	r1, r2, #5
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	440a      	add	r2, r1
 800d67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d68a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3714      	adds	r7, #20
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
	...

0800d69c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	785b      	ldrb	r3, [r3, #1]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d161      	bne.n	800d77c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6ce:	d11f      	bne.n	800d710 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	0151      	lsls	r1, r2, #5
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	440a      	add	r2, r1
 800d6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d6ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	0151      	lsls	r1, r2, #5
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	440a      	add	r2, r1
 800d706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d70a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d70e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	f003 030f 	and.w	r3, r3, #15
 800d720:	2101      	movs	r1, #1
 800d722:	fa01 f303 	lsl.w	r3, r1, r3
 800d726:	b29b      	uxth	r3, r3
 800d728:	43db      	mvns	r3, r3
 800d72a:	68f9      	ldr	r1, [r7, #12]
 800d72c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d730:	4013      	ands	r3, r2
 800d732:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d73a:	69da      	ldr	r2, [r3, #28]
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f003 030f 	and.w	r3, r3, #15
 800d744:	2101      	movs	r1, #1
 800d746:	fa01 f303 	lsl.w	r3, r1, r3
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	43db      	mvns	r3, r3
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d754:	4013      	ands	r3, r2
 800d756:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	015a      	lsls	r2, r3, #5
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	4413      	add	r3, r2
 800d760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	0159      	lsls	r1, r3, #5
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	440b      	add	r3, r1
 800d76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d772:	4619      	mov	r1, r3
 800d774:	4b35      	ldr	r3, [pc, #212]	; (800d84c <USB_DeactivateEndpoint+0x1b0>)
 800d776:	4013      	ands	r3, r2
 800d778:	600b      	str	r3, [r1, #0]
 800d77a:	e060      	b.n	800d83e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d78e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d792:	d11f      	bne.n	800d7d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	015a      	lsls	r2, r3, #5
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4413      	add	r3, r2
 800d79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	0151      	lsls	r1, r2, #5
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	440a      	add	r2, r1
 800d7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d7b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	0151      	lsls	r1, r2, #5
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	440a      	add	r2, r1
 800d7ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 030f 	and.w	r3, r3, #15
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ea:	041b      	lsls	r3, r3, #16
 800d7ec:	43db      	mvns	r3, r3
 800d7ee:	68f9      	ldr	r1, [r7, #12]
 800d7f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7fe:	69da      	ldr	r2, [r3, #28]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	2101      	movs	r1, #1
 800d80a:	fa01 f303 	lsl.w	r3, r1, r3
 800d80e:	041b      	lsls	r3, r3, #16
 800d810:	43db      	mvns	r3, r3
 800d812:	68f9      	ldr	r1, [r7, #12]
 800d814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d818:	4013      	ands	r3, r2
 800d81a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	015a      	lsls	r2, r3, #5
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	4413      	add	r3, r2
 800d824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	0159      	lsls	r1, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	440b      	add	r3, r1
 800d832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d836:	4619      	mov	r1, r3
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <USB_DeactivateEndpoint+0x1b4>)
 800d83a:	4013      	ands	r3, r2
 800d83c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	ec337800 	.word	0xec337800
 800d850:	eff37800 	.word	0xeff37800

0800d854 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b08a      	sub	sp, #40	; 0x28
 800d858:	af02      	add	r7, sp, #8
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	2b01      	cmp	r3, #1
 800d872:	f040 815c 	bne.w	800db2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d132      	bne.n	800d8e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	0151      	lsls	r1, r2, #5
 800d890:	69fa      	ldr	r2, [r7, #28]
 800d892:	440a      	add	r2, r1
 800d894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d89c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d8a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	015a      	lsls	r2, r3, #5
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	69ba      	ldr	r2, [r7, #24]
 800d8b2:	0151      	lsls	r1, r2, #5
 800d8b4:	69fa      	ldr	r2, [r7, #28]
 800d8b6:	440a      	add	r2, r1
 800d8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	015a      	lsls	r2, r3, #5
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	0151      	lsls	r1, r2, #5
 800d8d4:	69fa      	ldr	r2, [r7, #28]
 800d8d6:	440a      	add	r2, r1
 800d8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8dc:	0cdb      	lsrs	r3, r3, #19
 800d8de:	04db      	lsls	r3, r3, #19
 800d8e0:	6113      	str	r3, [r2, #16]
 800d8e2:	e074      	b.n	800d9ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	0151      	lsls	r1, r2, #5
 800d8f6:	69fa      	ldr	r2, [r7, #28]
 800d8f8:	440a      	add	r2, r1
 800d8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8fe:	0cdb      	lsrs	r3, r3, #19
 800d900:	04db      	lsls	r3, r3, #19
 800d902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	0151      	lsls	r1, r2, #5
 800d916:	69fa      	ldr	r2, [r7, #28]
 800d918:	440a      	add	r2, r1
 800d91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d91e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d934:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6999      	ldr	r1, [r3, #24]
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	440b      	add	r3, r1
 800d940:	1e59      	subs	r1, r3, #1
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	fbb1 f3f3 	udiv	r3, r1, r3
 800d94a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d94c:	4b9d      	ldr	r3, [pc, #628]	; (800dbc4 <USB_EPStartXfer+0x370>)
 800d94e:	400b      	ands	r3, r1
 800d950:	69b9      	ldr	r1, [r7, #24]
 800d952:	0148      	lsls	r0, r1, #5
 800d954:	69f9      	ldr	r1, [r7, #28]
 800d956:	4401      	add	r1, r0
 800d958:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d95c:	4313      	orrs	r3, r2
 800d95e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96c:	691a      	ldr	r2, [r3, #16]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d976:	69b9      	ldr	r1, [r7, #24]
 800d978:	0148      	lsls	r0, r1, #5
 800d97a:	69f9      	ldr	r1, [r7, #28]
 800d97c:	4401      	add	r1, r0
 800d97e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d982:	4313      	orrs	r3, r2
 800d984:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	791b      	ldrb	r3, [r3, #4]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d11f      	bne.n	800d9ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	4413      	add	r3, r2
 800d996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	0151      	lsls	r1, r2, #5
 800d9a0:	69fa      	ldr	r2, [r7, #28]
 800d9a2:	440a      	add	r2, r1
 800d9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d9ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	0151      	lsls	r1, r2, #5
 800d9c0:	69fa      	ldr	r2, [r7, #28]
 800d9c2:	440a      	add	r2, r1
 800d9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d14b      	bne.n	800da6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d009      	beq.n	800d9f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	791b      	ldrb	r3, [r3, #4]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d128      	bne.n	800da4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da04:	2b00      	cmp	r3, #0
 800da06:	d110      	bne.n	800da2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	015a      	lsls	r2, r3, #5
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	4413      	add	r3, r2
 800da10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	0151      	lsls	r1, r2, #5
 800da1a:	69fa      	ldr	r2, [r7, #28]
 800da1c:	440a      	add	r2, r1
 800da1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da26:	6013      	str	r3, [r2, #0]
 800da28:	e00f      	b.n	800da4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	015a      	lsls	r2, r3, #5
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	4413      	add	r3, r2
 800da32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	69ba      	ldr	r2, [r7, #24]
 800da3a:	0151      	lsls	r1, r2, #5
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	440a      	add	r2, r1
 800da40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	015a      	lsls	r2, r3, #5
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	4413      	add	r3, r2
 800da52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69ba      	ldr	r2, [r7, #24]
 800da5a:	0151      	lsls	r1, r2, #5
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	440a      	add	r2, r1
 800da60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	e133      	b.n	800dcd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	015a      	lsls	r2, r3, #5
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	4413      	add	r3, r2
 800da74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	69ba      	ldr	r2, [r7, #24]
 800da7c:	0151      	lsls	r1, r2, #5
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	440a      	add	r2, r1
 800da82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	791b      	ldrb	r3, [r3, #4]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d015      	beq.n	800dac0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f000 811b 	beq.w	800dcd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	f003 030f 	and.w	r3, r3, #15
 800daae:	2101      	movs	r1, #1
 800dab0:	fa01 f303 	lsl.w	r3, r1, r3
 800dab4:	69f9      	ldr	r1, [r7, #28]
 800dab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800daba:	4313      	orrs	r3, r2
 800dabc:	634b      	str	r3, [r1, #52]	; 0x34
 800dabe:	e109      	b.n	800dcd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d110      	bne.n	800daf2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	015a      	lsls	r2, r3, #5
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	4413      	add	r3, r2
 800dad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	0151      	lsls	r1, r2, #5
 800dae2:	69fa      	ldr	r2, [r7, #28]
 800dae4:	440a      	add	r2, r1
 800dae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	e00f      	b.n	800db12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	015a      	lsls	r2, r3, #5
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	0151      	lsls	r1, r2, #5
 800db04:	69fa      	ldr	r2, [r7, #28]
 800db06:	440a      	add	r2, r1
 800db08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	6919      	ldr	r1, [r3, #16]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	b298      	uxth	r0, r3
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	4603      	mov	r3, r0
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 fade 	bl	800e0e8 <USB_WritePacket>
 800db2c:	e0d2      	b.n	800dcd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	4413      	add	r3, r2
 800db36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	69ba      	ldr	r2, [r7, #24]
 800db3e:	0151      	lsls	r1, r2, #5
 800db40:	69fa      	ldr	r2, [r7, #28]
 800db42:	440a      	add	r2, r1
 800db44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db48:	0cdb      	lsrs	r3, r3, #19
 800db4a:	04db      	lsls	r3, r3, #19
 800db4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	4413      	add	r3, r2
 800db56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	69ba      	ldr	r2, [r7, #24]
 800db5e:	0151      	lsls	r1, r2, #5
 800db60:	69fa      	ldr	r2, [r7, #28]
 800db62:	440a      	add	r2, r1
 800db64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d126      	bne.n	800dbc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	015a      	lsls	r2, r3, #5
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	4413      	add	r3, r2
 800db82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db86:	691a      	ldr	r2, [r3, #16]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db90:	69b9      	ldr	r1, [r7, #24]
 800db92:	0148      	lsls	r0, r1, #5
 800db94:	69f9      	ldr	r1, [r7, #28]
 800db96:	4401      	add	r1, r0
 800db98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db9c:	4313      	orrs	r3, r2
 800db9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	69ba      	ldr	r2, [r7, #24]
 800dbb0:	0151      	lsls	r1, r2, #5
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	440a      	add	r2, r1
 800dbb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbbe:	6113      	str	r3, [r2, #16]
 800dbc0:	e03a      	b.n	800dc38 <USB_EPStartXfer+0x3e4>
 800dbc2:	bf00      	nop
 800dbc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	699a      	ldr	r2, [r3, #24]
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	1e5a      	subs	r2, r3, #1
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbdc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	8afa      	ldrh	r2, [r7, #22]
 800dbe4:	fb03 f202 	mul.w	r2, r3, r2
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	691a      	ldr	r2, [r3, #16]
 800dbfa:	8afb      	ldrh	r3, [r7, #22]
 800dbfc:	04d9      	lsls	r1, r3, #19
 800dbfe:	4b38      	ldr	r3, [pc, #224]	; (800dce0 <USB_EPStartXfer+0x48c>)
 800dc00:	400b      	ands	r3, r1
 800dc02:	69b9      	ldr	r1, [r7, #24]
 800dc04:	0148      	lsls	r0, r1, #5
 800dc06:	69f9      	ldr	r1, [r7, #28]
 800dc08:	4401      	add	r1, r0
 800dc0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	015a      	lsls	r2, r3, #5
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	4413      	add	r3, r2
 800dc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc1e:	691a      	ldr	r2, [r3, #16]
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	69db      	ldr	r3, [r3, #28]
 800dc24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc28:	69b9      	ldr	r1, [r7, #24]
 800dc2a:	0148      	lsls	r0, r1, #5
 800dc2c:	69f9      	ldr	r1, [r7, #28]
 800dc2e:	4401      	add	r1, r0
 800dc30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc34:	4313      	orrs	r3, r2
 800dc36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d10d      	bne.n	800dc5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d009      	beq.n	800dc5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	6919      	ldr	r1, [r3, #16]
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	015a      	lsls	r2, r3, #5
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	4413      	add	r3, r2
 800dc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc56:	460a      	mov	r2, r1
 800dc58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	791b      	ldrb	r3, [r3, #4]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d128      	bne.n	800dcb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d110      	bne.n	800dc94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	015a      	lsls	r2, r3, #5
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	4413      	add	r3, r2
 800dc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	0151      	lsls	r1, r2, #5
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	440a      	add	r2, r1
 800dc88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc90:	6013      	str	r3, [r2, #0]
 800dc92:	e00f      	b.n	800dcb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69ba      	ldr	r2, [r7, #24]
 800dca4:	0151      	lsls	r1, r2, #5
 800dca6:	69fa      	ldr	r2, [r7, #28]
 800dca8:	440a      	add	r2, r1
 800dcaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	69ba      	ldr	r2, [r7, #24]
 800dcc4:	0151      	lsls	r1, r2, #5
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	440a      	add	r2, r1
 800dcca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3720      	adds	r7, #32
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	1ff80000 	.word	0x1ff80000

0800dce4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	785b      	ldrb	r3, [r3, #1]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	f040 80ce 	bne.w	800dea2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d132      	bne.n	800dd74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	015a      	lsls	r2, r3, #5
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	4413      	add	r3, r2
 800dd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	0151      	lsls	r1, r2, #5
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	440a      	add	r2, r1
 800dd24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	015a      	lsls	r2, r3, #5
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	0151      	lsls	r1, r2, #5
 800dd44:	697a      	ldr	r2, [r7, #20]
 800dd46:	440a      	add	r2, r1
 800dd48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	015a      	lsls	r2, r3, #5
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	4413      	add	r3, r2
 800dd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5e:	691b      	ldr	r3, [r3, #16]
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	0151      	lsls	r1, r2, #5
 800dd64:	697a      	ldr	r2, [r7, #20]
 800dd66:	440a      	add	r2, r1
 800dd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd6c:	0cdb      	lsrs	r3, r3, #19
 800dd6e:	04db      	lsls	r3, r3, #19
 800dd70:	6113      	str	r3, [r2, #16]
 800dd72:	e04e      	b.n	800de12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	0151      	lsls	r1, r2, #5
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	440a      	add	r2, r1
 800dd8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd8e:	0cdb      	lsrs	r3, r3, #19
 800dd90:	04db      	lsls	r3, r3, #19
 800dd92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	0151      	lsls	r1, r2, #5
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	440a      	add	r2, r1
 800ddaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ddb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ddb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	699a      	ldr	r2, [r3, #24]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d903      	bls.n	800ddcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	68da      	ldr	r2, [r3, #12]
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	0151      	lsls	r1, r2, #5
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	440a      	add	r2, r1
 800dde2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf8:	691a      	ldr	r2, [r3, #16]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de02:	6939      	ldr	r1, [r7, #16]
 800de04:	0148      	lsls	r0, r1, #5
 800de06:	6979      	ldr	r1, [r7, #20]
 800de08:	4401      	add	r1, r0
 800de0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800de0e:	4313      	orrs	r3, r2
 800de10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d11e      	bne.n	800de56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d009      	beq.n	800de34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	4413      	add	r3, r2
 800de28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2c:	461a      	mov	r2, r3
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	0151      	lsls	r1, r2, #5
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	440a      	add	r2, r1
 800de4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de52:	6013      	str	r3, [r2, #0]
 800de54:	e097      	b.n	800df86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	015a      	lsls	r2, r3, #5
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	4413      	add	r3, r2
 800de5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	0151      	lsls	r1, r2, #5
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	440a      	add	r2, r1
 800de6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 8083 	beq.w	800df86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	2101      	movs	r1, #1
 800de92:	fa01 f303 	lsl.w	r3, r1, r3
 800de96:	6979      	ldr	r1, [r7, #20]
 800de98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de9c:	4313      	orrs	r3, r2
 800de9e:	634b      	str	r3, [r1, #52]	; 0x34
 800dea0:	e071      	b.n	800df86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	015a      	lsls	r2, r3, #5
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	4413      	add	r3, r2
 800deaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	0151      	lsls	r1, r2, #5
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	440a      	add	r2, r1
 800deb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800debc:	0cdb      	lsrs	r3, r3, #19
 800debe:	04db      	lsls	r3, r3, #19
 800dec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	015a      	lsls	r2, r3, #5
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	4413      	add	r3, r2
 800deca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	693a      	ldr	r2, [r7, #16]
 800ded2:	0151      	lsls	r1, r2, #5
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	440a      	add	r2, r1
 800ded8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dedc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dee4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	68da      	ldr	r2, [r3, #12]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	015a      	lsls	r2, r3, #5
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	4413      	add	r3, r2
 800df06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	0151      	lsls	r1, r2, #5
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	440a      	add	r2, r1
 800df14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	015a      	lsls	r2, r3, #5
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	4413      	add	r3, r2
 800df26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df2a:	691a      	ldr	r2, [r3, #16]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	69db      	ldr	r3, [r3, #28]
 800df30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df34:	6939      	ldr	r1, [r7, #16]
 800df36:	0148      	lsls	r0, r1, #5
 800df38:	6979      	ldr	r1, [r7, #20]
 800df3a:	4401      	add	r1, r0
 800df3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800df40:	4313      	orrs	r3, r2
 800df42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d10d      	bne.n	800df66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6919      	ldr	r1, [r3, #16]
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	015a      	lsls	r2, r3, #5
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	4413      	add	r3, r2
 800df5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df62:	460a      	mov	r2, r1
 800df64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	0151      	lsls	r1, r2, #5
 800df78:	697a      	ldr	r2, [r7, #20]
 800df7a:	440a      	add	r2, r1
 800df7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	371c      	adds	r7, #28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	785b      	ldrb	r3, [r3, #1]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d14a      	bne.n	800e048 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfca:	f040 8086 	bne.w	800e0da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	7812      	ldrb	r2, [r2, #0]
 800dfe2:	0151      	lsls	r1, r2, #5
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	440a      	add	r2, r1
 800dfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dff0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	7812      	ldrb	r2, [r2, #0]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	3301      	adds	r3, #1
 800e01a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f242 7210 	movw	r2, #10000	; 0x2710
 800e022:	4293      	cmp	r3, r2
 800e024:	d902      	bls.n	800e02c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	75fb      	strb	r3, [r7, #23]
          break;
 800e02a:	e056      	b.n	800e0da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e044:	d0e7      	beq.n	800e016 <USB_EPStopXfer+0x82>
 800e046:	e048      	b.n	800e0da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	015a      	lsls	r2, r3, #5
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	4413      	add	r3, r2
 800e052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e05c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e060:	d13b      	bne.n	800e0da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	015a      	lsls	r2, r3, #5
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	4413      	add	r3, r2
 800e06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	7812      	ldrb	r2, [r2, #0]
 800e076:	0151      	lsls	r1, r2, #5
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	440a      	add	r2, r1
 800e07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e084:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	7812      	ldrb	r2, [r2, #0]
 800e09a:	0151      	lsls	r1, r2, #5
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	440a      	add	r2, r1
 800e0a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d902      	bls.n	800e0c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e0be:	e00c      	b.n	800e0da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	015a      	lsls	r2, r3, #5
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0d8:	d0e7      	beq.n	800e0aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b089      	sub	sp, #36	; 0x24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	71fb      	strb	r3, [r7, #7]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d123      	bne.n	800e156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e10e:	88bb      	ldrh	r3, [r7, #4]
 800e110:	3303      	adds	r3, #3
 800e112:	089b      	lsrs	r3, r3, #2
 800e114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e116:	2300      	movs	r3, #0
 800e118:	61bb      	str	r3, [r7, #24]
 800e11a:	e018      	b.n	800e14e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	031a      	lsls	r2, r3, #12
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	4413      	add	r3, r2
 800e124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e128:	461a      	mov	r2, r3
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	3301      	adds	r3, #1
 800e134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	3301      	adds	r3, #1
 800e13a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	3301      	adds	r3, #1
 800e140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	3301      	adds	r3, #1
 800e146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	3301      	adds	r3, #1
 800e14c:	61bb      	str	r3, [r7, #24]
 800e14e:	69ba      	ldr	r2, [r7, #24]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	429a      	cmp	r2, r3
 800e154:	d3e2      	bcc.n	800e11c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3724      	adds	r7, #36	; 0x24
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e164:	b480      	push	{r7}
 800e166:	b08b      	sub	sp, #44	; 0x2c
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e17a:	88fb      	ldrh	r3, [r7, #6]
 800e17c:	089b      	lsrs	r3, r3, #2
 800e17e:	b29b      	uxth	r3, r3
 800e180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	f003 0303 	and.w	r3, r3, #3
 800e188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e18a:	2300      	movs	r3, #0
 800e18c:	623b      	str	r3, [r7, #32]
 800e18e:	e014      	b.n	800e1ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	3301      	adds	r3, #1
 800e1a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	623b      	str	r3, [r7, #32]
 800e1ba:	6a3a      	ldr	r2, [r7, #32]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d3e6      	bcc.n	800e190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e1c2:	8bfb      	ldrh	r3, [r7, #30]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d01e      	beq.n	800e206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f107 0310 	add.w	r3, r7, #16
 800e1d8:	6812      	ldr	r2, [r2, #0]
 800e1da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e1dc:	693a      	ldr	r2, [r7, #16]
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	701a      	strb	r2, [r3, #0]
      i++;
 800e1ee:	6a3b      	ldr	r3, [r7, #32]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e1fa:	8bfb      	ldrh	r3, [r7, #30]
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e200:	8bfb      	ldrh	r3, [r7, #30]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1ea      	bne.n	800e1dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e208:	4618      	mov	r0, r3
 800e20a:	372c      	adds	r7, #44	; 0x2c
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	785b      	ldrb	r3, [r3, #1]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d12c      	bne.n	800e28a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	015a      	lsls	r2, r3, #5
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	4413      	add	r3, r2
 800e238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	db12      	blt.n	800e268 <USB_EPSetStall+0x54>
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00f      	beq.n	800e268 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	0151      	lsls	r1, r2, #5
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	440a      	add	r2, r1
 800e25e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e266:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	0151      	lsls	r1, r2, #5
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	440a      	add	r2, r1
 800e27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	e02b      	b.n	800e2e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	015a      	lsls	r2, r3, #5
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	4413      	add	r3, r2
 800e292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	db12      	blt.n	800e2c2 <USB_EPSetStall+0xae>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00f      	beq.n	800e2c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	015a      	lsls	r2, r3, #5
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	0151      	lsls	r1, r2, #5
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	440a      	add	r2, r1
 800e2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e2c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	015a      	lsls	r2, r3, #5
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	0151      	lsls	r1, r2, #5
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	440a      	add	r2, r1
 800e2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	785b      	ldrb	r3, [r3, #1]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d128      	bne.n	800e35e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	4413      	add	r3, r2
 800e314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	0151      	lsls	r1, r2, #5
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	440a      	add	r2, r1
 800e322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e32a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	791b      	ldrb	r3, [r3, #4]
 800e330:	2b03      	cmp	r3, #3
 800e332:	d003      	beq.n	800e33c <USB_EPClearStall+0x4c>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	791b      	ldrb	r3, [r3, #4]
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d138      	bne.n	800e3ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	015a      	lsls	r2, r3, #5
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	4413      	add	r3, r2
 800e344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	0151      	lsls	r1, r2, #5
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	440a      	add	r2, r1
 800e352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	e027      	b.n	800e3ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	0151      	lsls	r1, r2, #5
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	440a      	add	r2, r1
 800e374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e37c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	791b      	ldrb	r3, [r3, #4]
 800e382:	2b03      	cmp	r3, #3
 800e384:	d003      	beq.n	800e38e <USB_EPClearStall+0x9e>
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	791b      	ldrb	r3, [r3, #4]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d10f      	bne.n	800e3ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	015a      	lsls	r2, r3, #5
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	4413      	add	r3, r2
 800e396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	0151      	lsls	r1, r2, #5
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	440a      	add	r2, r1
 800e3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	617b      	str	r3, [r7, #20]
 800e3cc:	e016      	b.n	800e3fc <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	015a      	lsls	r2, r3, #5
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3da:	461a      	mov	r2, r3
 800e3dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e3e0:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	015a      	lsls	r2, r3, #5
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e3f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b0e      	cmp	r3, #14
 800e400:	d9e5      	bls.n	800e3ce <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e408:	461a      	mov	r2, r3
 800e40a:	2300      	movs	r3, #0
 800e40c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e414:	461a      	mov	r2, r3
 800e416:	2300      	movs	r3, #0
 800e418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e420:	461a      	mov	r2, r3
 800e422:	2300      	movs	r3, #0
 800e424:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff f842 	bl	800d4b0 <USB_FlushRxFifo>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <USB_StopDevice+0x7e>
  {
    return ret;
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	e00b      	b.n	800e452 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800e43a:	2110      	movs	r1, #16
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff f803 	bl	800d448 <USB_FlushTxFifo>
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <USB_StopDevice+0x94>
  {
    return ret;
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	e000      	b.n	800e452 <USB_StopDevice+0x96>
  }

  return ret;
 800e450:	7bfb      	ldrb	r3, [r7, #15]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e45a:	b480      	push	{r7}
 800e45c:	b085      	sub	sp, #20
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	460b      	mov	r3, r1
 800e464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e478:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e47c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	78fb      	ldrb	r3, [r7, #3]
 800e488:	011b      	lsls	r3, r3, #4
 800e48a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e494:	4313      	orrs	r3, r2
 800e496:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3714      	adds	r7, #20
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b085      	sub	sp, #20
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4c0:	f023 0303 	bic.w	r3, r3, #3
 800e4c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4d4:	f023 0302 	bic.w	r3, r3, #2
 800e4d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e516:	f043 0302 	orr.w	r3, r3, #2
 800e51a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr

0800e52a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e52a:	b480      	push	{r7}
 800e52c:	b085      	sub	sp, #20
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4013      	ands	r3, r2
 800e540:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e542:	68fb      	ldr	r3, [r7, #12]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e56c:	69db      	ldr	r3, [r3, #28]
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	4013      	ands	r3, r2
 800e572:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	0c1b      	lsrs	r3, r3, #16
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3714      	adds	r7, #20
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e596:	699b      	ldr	r3, [r3, #24]
 800e598:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	b29b      	uxth	r3, r3
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3714      	adds	r7, #20
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	015a      	lsls	r2, r3, #5
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	68ba      	ldr	r2, [r7, #8]
 800e5e2:	4013      	ands	r3, r2
 800e5e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5e6:	68bb      	ldr	r3, [r7, #8]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e616:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	f003 030f 	and.w	r3, r3, #15
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	fa22 f303 	lsr.w	r3, r2, r3
 800e624:	01db      	lsls	r3, r3, #7
 800e626:	b2db      	uxtb	r3, r3
 800e628:	693a      	ldr	r2, [r7, #16]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e62e:	78fb      	ldrb	r3, [r7, #3]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	4413      	add	r3, r2
 800e636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	4013      	ands	r3, r2
 800e640:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e642:	68bb      	ldr	r3, [r7, #8]
}
 800e644:	4618      	mov	r0, r3
 800e646:	371c      	adds	r7, #28
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	f003 0301 	and.w	r3, r3, #1
}
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e686:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e68a:	f023 0307 	bic.w	r3, r3, #7
 800e68e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e69e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	333c      	adds	r3, #60	; 0x3c
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	4a26      	ldr	r2, [pc, #152]	; (800e76c <USB_EP0_OutStart+0xb8>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d90a      	bls.n	800e6ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6e8:	d101      	bne.n	800e6ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e037      	b.n	800e75e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e71c:	f043 0318 	orr.w	r3, r3, #24
 800e720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e730:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e734:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e736:	7afb      	ldrb	r3, [r7, #11]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d10f      	bne.n	800e75c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e742:	461a      	mov	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	697a      	ldr	r2, [r7, #20]
 800e752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e756:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e75a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	371c      	adds	r7, #28
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	4f54300a 	.word	0x4f54300a

0800e770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	3301      	adds	r3, #1
 800e780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <USB_CoreReset+0x64>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d901      	bls.n	800e78e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e78a:	2303      	movs	r3, #3
 800e78c:	e01b      	b.n	800e7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	daf2      	bge.n	800e77c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e796:	2300      	movs	r3, #0
 800e798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	f043 0201 	orr.w	r2, r3, #1
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4a09      	ldr	r2, [pc, #36]	; (800e7d4 <USB_CoreReset+0x64>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d901      	bls.n	800e7b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	e006      	b.n	800e7c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	f003 0301 	and.w	r3, r3, #1
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d0f0      	beq.n	800e7a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	00030d40 	.word	0x00030d40

0800e7d8 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a13      	ldr	r2, [pc, #76]	; (800e830 <HAL_UART_RxCpltCallback+0x58>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d11f      	bne.n	800e828 <HAL_UART_RxCpltCallback+0x50>
 800e7e8:	4b12      	ldr	r3, [pc, #72]	; (800e834 <HAL_UART_RxCpltCallback+0x5c>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d01b      	beq.n	800e828 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	4911      	ldr	r1, [pc, #68]	; (800e838 <HAL_UART_RxCpltCallback+0x60>)
 800e7f4:	480e      	ldr	r0, [pc, #56]	; (800e830 <HAL_UART_RxCpltCallback+0x58>)
 800e7f6:	f7fc fe37 	bl	800b468 <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800e7fa:	4b10      	ldr	r3, [pc, #64]	; (800e83c <HAL_UART_RxCpltCallback+0x64>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10a      	bne.n	800e818 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800e802:	4b0d      	ldr	r3, [pc, #52]	; (800e838 <HAL_UART_RxCpltCallback+0x60>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800e808:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <HAL_UART_RxCpltCallback+0x68>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	7bfa      	ldrb	r2, [r7, #15]
 800e80e:	4611      	mov	r1, r2
 800e810:	4618      	mov	r0, r3
 800e812:	f001 fef9 	bl	8010608 <embeddedCliReceiveChar>
 800e816:	e002      	b.n	800e81e <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800e818:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <HAL_UART_RxCpltCallback+0x6c>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800e81e:	f7f4 febf 	bl	80035a0 <HAL_GetTick>
 800e822:	4603      	mov	r3, r0
 800e824:	4a08      	ldr	r2, [pc, #32]	; (800e848 <HAL_UART_RxCpltCallback+0x70>)
 800e826:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800e828:	bf00      	nop
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	200019d4 	.word	0x200019d4
 800e834:	20001a91 	.word	0x20001a91
 800e838:	20001a90 	.word	0x20001a90
 800e83c:	20001a92 	.word	0x20001a92
 800e840:	20001a84 	.word	0x20001a84
 800e844:	20001a93 	.word	0x20001a93
 800e848:	2000172c 	.word	0x2000172c

0800e84c <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800e858:	78fb      	ldrb	r3, [r7, #3]
 800e85a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800e85c:	f107 010f 	add.w	r1, r7, #15
 800e860:	2364      	movs	r3, #100	; 0x64
 800e862:	2201      	movs	r2, #1
 800e864:	4803      	ldr	r0, [pc, #12]	; (800e874 <writeCharToCli+0x28>)
 800e866:	f7fc fd6d 	bl	800b344 <HAL_UART_Transmit>
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	200019d4 	.word	0x200019d4

0800e878 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800e878:	b40e      	push	{r1, r2, r3}
 800e87a:	b580      	push	{r7, lr}
 800e87c:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800e880:	af00      	add	r7, sp, #0
 800e882:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e886:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e88a:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800e88c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800e890:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e894:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e898:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800e89a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e89e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e8a2:	f107 000c 	add.w	r0, r7, #12
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800e8ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8b0:	f00e fb4c 	bl	801cf4c <vsniprintf>
 800e8b4:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800e8b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	da08      	bge.n	800e8d2 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800e8c0:	4b0c      	ldr	r3, [pc, #48]	; (800e8f4 <cli_printf+0x7c>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	221d      	movs	r2, #29
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	480b      	ldr	r0, [pc, #44]	; (800e8f8 <cli_printf+0x80>)
 800e8cc:	f00c fb46 	bl	801af5c <fwrite>
 800e8d0:	e009      	b.n	800e8e6 <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800e8d2:	f107 020c 	add.w	r2, r7, #12
 800e8d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e8da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e8de:	4611      	mov	r1, r2
 800e8e0:	6818      	ldr	r0, [r3, #0]
 800e8e2:	f001 ff77 	bl	80107d4 <embeddedCliPrint>
}
 800e8e6:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8f0:	b003      	add	sp, #12
 800e8f2:	4770      	bx	lr
 800e8f4:	2000017c 	.word	0x2000017c
 800e8f8:	080200cc 	.word	0x080200cc

0800e8fc <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b088      	sub	sp, #32
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	61fb      	str	r3, [r7, #28]
	   int i, j;
	prev_max_wait_time = HAL_GetTick();
 800e90c:	f7f4 fe48 	bl	80035a0 <HAL_GetTick>
 800e910:	4603      	mov	r3, r0
 800e912:	4a48      	ldr	r2, [pc, #288]	; (800ea34 <receiveString+0x138>)
 800e914:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800e916:	4b48      	ldr	r3, [pc, #288]	; (800ea38 <receiveString+0x13c>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d079      	beq.n	800ea12 <receiveString+0x116>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800e91e:	4b47      	ldr	r3, [pc, #284]	; (800ea3c <receiveString+0x140>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b0d      	cmp	r3, #13
 800e924:	d004      	beq.n	800e930 <receiveString+0x34>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3b01      	subs	r3, #1
 800e92a:	69fa      	ldr	r2, [r7, #28]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d15e      	bne.n	800e9ee <receiveString+0xf2>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	4413      	add	r3, r2
 800e936:	2200      	movs	r2, #0
 800e938:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800e93a:	4b3f      	ldr	r3, [pc, #252]	; (800ea38 <receiveString+0x13c>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				  //Iterating each character and removing non alphabetical characters.
				    for( i = 0; buffer[i] != '\0'; ++i)
 800e940:	2300      	movs	r3, #0
 800e942:	61bb      	str	r3, [r7, #24]
 800e944:	e04c      	b.n	800e9e0 <receiveString+0xe4>
				        		|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
								|| buffer[i] == '_'
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
								|| buffer[i] == '\0') )
				        {
				            for( j = i; buffer[j] != '\0'; ++j)
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	617b      	str	r3, [r7, #20]
 800e94a:	e00b      	b.n	800e964 <receiveString+0x68>
				            {
				            	buffer[j] = buffer[j+1];
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	3301      	adds	r3, #1
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	441a      	add	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	68b9      	ldr	r1, [r7, #8]
 800e958:	440b      	add	r3, r1
 800e95a:	7812      	ldrb	r2, [r2, #0]
 800e95c:	701a      	strb	r2, [r3, #0]
				            for( j = i; buffer[j] != '\0'; ++j)
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	3301      	adds	r3, #1
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	4413      	add	r3, r2
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1ed      	bne.n	800e94c <receiveString+0x50>
				            }
				            buffer[j] = '\0';
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	4413      	add	r3, r2
 800e976:	2200      	movs	r2, #0
 800e978:	701a      	strb	r2, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	4413      	add	r3, r2
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2b60      	cmp	r3, #96	; 0x60
 800e984:	d905      	bls.n	800e992 <receiveString+0x96>
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	4413      	add	r3, r2
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	2b7a      	cmp	r3, #122	; 0x7a
 800e990:	d923      	bls.n	800e9da <receiveString+0xde>
				        		|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	4413      	add	r3, r2
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b40      	cmp	r3, #64	; 0x40
 800e99c:	d905      	bls.n	800e9aa <receiveString+0xae>
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b5a      	cmp	r3, #90	; 0x5a
 800e9a8:	d917      	bls.n	800e9da <receiveString+0xde>
								|| buffer[i] == '_'
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b5f      	cmp	r3, #95	; 0x5f
 800e9b4:	d011      	beq.n	800e9da <receiveString+0xde>
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b2f      	cmp	r3, #47	; 0x2f
 800e9c0:	d905      	bls.n	800e9ce <receiveString+0xd2>
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	2b39      	cmp	r3, #57	; 0x39
 800e9cc:	d905      	bls.n	800e9da <receiveString+0xde>
								|| buffer[i] == '\0') )
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1b5      	bne.n	800e946 <receiveString+0x4a>
				    for( i = 0; buffer[i] != '\0'; ++i)
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1c6      	bne.n	800e97a <receiveString+0x7e>
				        }
				    }
				break;
 800e9ec:	e01d      	b.n	800ea2a <receiveString+0x12e>
			} else {
				// Check if the received character is an alphabet character
				buffer[index++] = UART_CLI_rxBuffer[0];
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	61fa      	str	r2, [r7, #28]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	4a10      	ldr	r2, [pc, #64]	; (800ea3c <receiveString+0x140>)
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a0e      	ldr	r2, [pc, #56]	; (800ea3c <receiveString+0x140>)
 800ea04:	7812      	ldrb	r2, [r2, #0]
 800ea06:	4611      	mov	r1, r2
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	4798      	blx	r3
			}
			flag_cli = 0;
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <receiveString+0x13c>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800ea12:	f7f4 fdc5 	bl	80035a0 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	4b06      	ldr	r3, [pc, #24]	; (800ea34 <receiveString+0x138>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	1ad2      	subs	r2, r2, r3
 800ea1e:	4b08      	ldr	r3, [pc, #32]	; (800ea40 <receiveString+0x144>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d800      	bhi.n	800ea28 <receiveString+0x12c>
		if (flag_cli) {
 800ea26:	e776      	b.n	800e916 <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800ea28:	bf00      	nop
		}

	}
}
 800ea2a:	bf00      	nop
 800ea2c:	3720      	adds	r7, #32
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20001a88 	.word	0x20001a88
 800ea38:	20001a93 	.word	0x20001a93
 800ea3c:	20001a90 	.word	0x20001a90
 800ea40:	20000054 	.word	0x20000054

0800ea44 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800ea50:	4903      	ldr	r1, [pc, #12]	; (800ea60 <onClearCLI+0x1c>)
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f7ff ff10 	bl	800e878 <cli_printf>
}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	080200ec 	.word	0x080200ec

0800ea64 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b092      	sub	sp, #72	; 0x48
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800ea70:	4b24      	ldr	r3, [pc, #144]	; (800eb04 <debug_scd4x_PM25+0xa0>)
 800ea72:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800ea74:	4924      	ldr	r1, [pc, #144]	; (800eb08 <debug_scd4x_PM25+0xa4>)
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7ff fefe 	bl	800e878 <cli_printf>

	cli_other = 1;
 800ea7c:	4b23      	ldr	r3, [pc, #140]	; (800eb0c <debug_scd4x_PM25+0xa8>)
 800ea7e:	2201      	movs	r2, #1
 800ea80:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <debug_scd4x_PM25+0xac>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800ea88:	f107 0310 	add.w	r3, r7, #16
 800ea8c:	2232      	movs	r2, #50	; 0x32
 800ea8e:	4619      	mov	r1, r3
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7ff ff33 	bl	800e8fc <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ea96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea98:	f7f1 fbac 	bl	80001f4 <strlen>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eaa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaa6:	481b      	ldr	r0, [pc, #108]	; (800eb14 <debug_scd4x_PM25+0xb0>)
 800eaa8:	f7fc fc4c 	bl	800b344 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800eaac:	f107 0310 	add.w	r3, r7, #16
 800eab0:	2179      	movs	r1, #121	; 0x79
 800eab2:	4618      	mov	r0, r3
 800eab4:	f00d fade 	bl	801c074 <strchr>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800eabe:	4b16      	ldr	r3, [pc, #88]	; (800eb18 <debug_scd4x_PM25+0xb4>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800eac4:	4915      	ldr	r1, [pc, #84]	; (800eb1c <debug_scd4x_PM25+0xb8>)
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fed6 	bl	800e878 <cli_printf>
 800eacc:	e00f      	b.n	800eaee <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800eace:	f107 0310 	add.w	r3, r7, #16
 800ead2:	216e      	movs	r1, #110	; 0x6e
 800ead4:	4618      	mov	r0, r3
 800ead6:	f00d facd 	bl	801c074 <strchr>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d006      	beq.n	800eaee <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800eae0:	4b0d      	ldr	r3, [pc, #52]	; (800eb18 <debug_scd4x_PM25+0xb4>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800eae6:	490e      	ldr	r1, [pc, #56]	; (800eb20 <debug_scd4x_PM25+0xbc>)
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	f7ff fec5 	bl	800e878 <cli_printf>
		}


		flag_cli = 0;
 800eaee:	4b08      	ldr	r3, [pc, #32]	; (800eb10 <debug_scd4x_PM25+0xac>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800eaf4:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <debug_scd4x_PM25+0xa8>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
}
 800eafa:	bf00      	nop
 800eafc:	3748      	adds	r7, #72	; 0x48
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	080200f4 	.word	0x080200f4
 800eb08:	080200f8 	.word	0x080200f8
 800eb0c:	20001a92 	.word	0x20001a92
 800eb10:	20001a93 	.word	0x20001a93
 800eb14:	200019d4 	.word	0x200019d4
 800eb18:	200014e4 	.word	0x200014e4
 800eb1c:	0802012c 	.word	0x0802012c
 800eb20:	0802013c 	.word	0x0802013c

0800eb24 <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: TF241_%s.",	ver_GetUid());
 800eb30:	f7f3 f8d2 	bl	8001cd8 <ver_GetUid>
 800eb34:	4603      	mov	r3, r0
 800eb36:	461a      	mov	r2, r3
 800eb38:	4903      	ldr	r1, [pc, #12]	; (800eb48 <DeviceSignature+0x24>)
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f7ff fe9c 	bl	800e878 <cli_printf>
}
 800eb40:	bf00      	nop
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	0802014c 	.word	0x0802014c

0800eb4c <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b092      	sub	sp, #72	; 0x48
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800eb58:	4b2d      	ldr	r3, [pc, #180]	; (800ec10 <SetID+0xc4>)
 800eb5a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800eb5c:	492d      	ldr	r1, [pc, #180]	; (800ec14 <SetID+0xc8>)
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7ff fe8a 	bl	800e878 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800eb64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb66:	f7f1 fb45 	bl	80001f4 <strlen>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb74:	4828      	ldr	r0, [pc, #160]	; (800ec18 <SetID+0xcc>)
 800eb76:	f7fc fbe5 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800eb7a:	4928      	ldr	r1, [pc, #160]	; (800ec1c <SetID+0xd0>)
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff fe7b 	bl	800e878 <cli_printf>
	cli_other = 1;
 800eb82:	4b27      	ldr	r3, [pc, #156]	; (800ec20 <SetID+0xd4>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800eb88:	4b26      	ldr	r3, [pc, #152]	; (800ec24 <SetID+0xd8>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800eb8e:	f107 0310 	add.w	r3, r7, #16
 800eb92:	2232      	movs	r2, #50	; 0x32
 800eb94:	4619      	mov	r1, r3
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f7ff feb0 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800eb9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb9e:	f7f1 fb29 	bl	80001f4 <strlen>
 800eba2:	4603      	mov	r3, r0
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ebaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebac:	481a      	ldr	r0, [pc, #104]	; (800ec18 <SetID+0xcc>)
 800ebae:	f7fc fbc9 	bl	800b344 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ebb2:	f107 0310 	add.w	r3, r7, #16
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7f1 fb1c 	bl	80001f4 <strlen>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800ebc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebc6:	2b1d      	cmp	r3, #29
 800ebc8:	d814      	bhi.n	800ebf4 <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800ebca:	7c3b      	ldrb	r3, [r7, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d015      	beq.n	800ebfc <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800ebd0:	f107 0310 	add.w	r3, r7, #16
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4814      	ldr	r0, [pc, #80]	; (800ec28 <SetID+0xdc>)
 800ebd8:	f00d fa59 	bl	801c08e <strcpy>
			set_param_flags();
 800ebdc:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <SetID+0xe0>)
 800ebde:	2201      	movs	r2, #1
 800ebe0:	701a      	strb	r2, [r3, #0]
 800ebe2:	4b13      	ldr	r3, [pc, #76]	; (800ec30 <SetID+0xe4>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800ebe8:	4a0f      	ldr	r2, [pc, #60]	; (800ec28 <SetID+0xdc>)
 800ebea:	4912      	ldr	r1, [pc, #72]	; (800ec34 <SetID+0xe8>)
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff fe43 	bl	800e878 <cli_printf>
 800ebf2:	e003      	b.n	800ebfc <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800ebf4:	4910      	ldr	r1, [pc, #64]	; (800ec38 <SetID+0xec>)
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f7ff fe3e 	bl	800e878 <cli_printf>
	}

	flag_cli = 0;
 800ebfc:	4b09      	ldr	r3, [pc, #36]	; (800ec24 <SetID+0xd8>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ec02:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <SetID+0xd4>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]

}
 800ec08:	bf00      	nop
 800ec0a:	3748      	adds	r7, #72	; 0x48
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	080200f4 	.word	0x080200f4
 800ec14:	0802016c 	.word	0x0802016c
 800ec18:	200019d4 	.word	0x200019d4
 800ec1c:	080201a4 	.word	0x080201a4
 800ec20:	20001a92 	.word	0x20001a92
 800ec24:	20001a93 	.word	0x20001a93
 800ec28:	200013dd 	.word	0x200013dd
 800ec2c:	200014e5 	.word	0x200014e5
 800ec30:	200014e6 	.word	0x200014e6
 800ec34:	080201cc 	.word	0x080201cc
 800ec38:	080201e0 	.word	0x080201e0

0800ec3c <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b092      	sub	sp, #72	; 0x48
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ec48:	4b2d      	ldr	r3, [pc, #180]	; (800ed00 <SetLocation+0xc4>)
 800ec4a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ec4c:	492d      	ldr	r1, [pc, #180]	; (800ed04 <SetLocation+0xc8>)
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f7ff fe12 	bl	800e878 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ec54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec56:	f7f1 facd 	bl	80001f4 <strlen>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec64:	4828      	ldr	r0, [pc, #160]	; (800ed08 <SetLocation+0xcc>)
 800ec66:	f7fc fb6d 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800ec6a:	4928      	ldr	r1, [pc, #160]	; (800ed0c <SetLocation+0xd0>)
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f7ff fe03 	bl	800e878 <cli_printf>
	cli_other = 1;
 800ec72:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <SetLocation+0xd4>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ec78:	4b26      	ldr	r3, [pc, #152]	; (800ed14 <SetLocation+0xd8>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ec7e:	f107 0310 	add.w	r3, r7, #16
 800ec82:	2232      	movs	r2, #50	; 0x32
 800ec84:	4619      	mov	r1, r3
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f7ff fe38 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ec8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec8e:	f7f1 fab1 	bl	80001f4 <strlen>
 800ec92:	4603      	mov	r3, r0
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec9c:	481a      	ldr	r0, [pc, #104]	; (800ed08 <SetLocation+0xcc>)
 800ec9e:	f7fc fb51 	bl	800b344 <HAL_UART_Transmit>

	len = strlen(buffer);
 800eca2:	f107 0310 	add.w	r3, r7, #16
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f1 faa4 	bl	80001f4 <strlen>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ecb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ecb6:	2b0e      	cmp	r3, #14
 800ecb8:	d814      	bhi.n	800ece4 <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800ecba:	7c3b      	ldrb	r3, [r7, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d015      	beq.n	800ecec <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800ecc0:	f107 0310 	add.w	r3, r7, #16
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4814      	ldr	r0, [pc, #80]	; (800ed18 <SetLocation+0xdc>)
 800ecc8:	f00d f9e1 	bl	801c08e <strcpy>
			set_param_flags();
 800eccc:	4b13      	ldr	r3, [pc, #76]	; (800ed1c <SetLocation+0xe0>)
 800ecce:	2201      	movs	r2, #1
 800ecd0:	701a      	strb	r2, [r3, #0]
 800ecd2:	4b13      	ldr	r3, [pc, #76]	; (800ed20 <SetLocation+0xe4>)
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800ecd8:	4a0f      	ldr	r2, [pc, #60]	; (800ed18 <SetLocation+0xdc>)
 800ecda:	4912      	ldr	r1, [pc, #72]	; (800ed24 <SetLocation+0xe8>)
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7ff fdcb 	bl	800e878 <cli_printf>
 800ece2:	e003      	b.n	800ecec <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800ece4:	4910      	ldr	r1, [pc, #64]	; (800ed28 <SetLocation+0xec>)
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff fdc6 	bl	800e878 <cli_printf>
	}

	flag_cli = 0;
 800ecec:	4b09      	ldr	r3, [pc, #36]	; (800ed14 <SetLocation+0xd8>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ecf2:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <SetLocation+0xd4>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	701a      	strb	r2, [r3, #0]

}
 800ecf8:	bf00      	nop
 800ecfa:	3748      	adds	r7, #72	; 0x48
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	080200f4 	.word	0x080200f4
 800ed04:	0802016c 	.word	0x0802016c
 800ed08:	200019d4 	.word	0x200019d4
 800ed0c:	080201f0 	.word	0x080201f0
 800ed10:	20001a92 	.word	0x20001a92
 800ed14:	20001a93 	.word	0x20001a93
 800ed18:	2000140f 	.word	0x2000140f
 800ed1c:	200014e5 	.word	0x200014e5
 800ed20:	200014e6 	.word	0x200014e6
 800ed24:	08020224 	.word	0x08020224
 800ed28:	0802023c 	.word	0x0802023c

0800ed2c <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b092      	sub	sp, #72	; 0x48
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ed38:	4b2d      	ldr	r3, [pc, #180]	; (800edf0 <Setname+0xc4>)
 800ed3a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ed3c:	492d      	ldr	r1, [pc, #180]	; (800edf4 <Setname+0xc8>)
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f7ff fd9a 	bl	800e878 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ed44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed46:	f7f1 fa55 	bl	80001f4 <strlen>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed54:	4828      	ldr	r0, [pc, #160]	; (800edf8 <Setname+0xcc>)
 800ed56:	f7fc faf5 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800ed5a:	4928      	ldr	r1, [pc, #160]	; (800edfc <Setname+0xd0>)
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7ff fd8b 	bl	800e878 <cli_printf>
	cli_other = 1;
 800ed62:	4b27      	ldr	r3, [pc, #156]	; (800ee00 <Setname+0xd4>)
 800ed64:	2201      	movs	r2, #1
 800ed66:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ed68:	4b26      	ldr	r3, [pc, #152]	; (800ee04 <Setname+0xd8>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ed6e:	f107 0310 	add.w	r3, r7, #16
 800ed72:	2232      	movs	r2, #50	; 0x32
 800ed74:	4619      	mov	r1, r3
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f7ff fdc0 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ed7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed7e:	f7f1 fa39 	bl	80001f4 <strlen>
 800ed82:	4603      	mov	r3, r0
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed8c:	481a      	ldr	r0, [pc, #104]	; (800edf8 <Setname+0xcc>)
 800ed8e:	f7fc fad9 	bl	800b344 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ed92:	f107 0310 	add.w	r3, r7, #16
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7f1 fa2c 	bl	80001f4 <strlen>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800eda2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eda6:	2b0e      	cmp	r3, #14
 800eda8:	d814      	bhi.n	800edd4 <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800edaa:	7c3b      	ldrb	r3, [r7, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d015      	beq.n	800eddc <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800edb0:	f107 0310 	add.w	r3, r7, #16
 800edb4:	4619      	mov	r1, r3
 800edb6:	4814      	ldr	r0, [pc, #80]	; (800ee08 <Setname+0xdc>)
 800edb8:	f00d f969 	bl	801c08e <strcpy>
			set_param_flags();
 800edbc:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <Setname+0xe0>)
 800edbe:	2201      	movs	r2, #1
 800edc0:	701a      	strb	r2, [r3, #0]
 800edc2:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <Setname+0xe4>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800edc8:	4a0f      	ldr	r2, [pc, #60]	; (800ee08 <Setname+0xdc>)
 800edca:	4912      	ldr	r1, [pc, #72]	; (800ee14 <Setname+0xe8>)
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7ff fd53 	bl	800e878 <cli_printf>
 800edd2:	e003      	b.n	800eddc <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800edd4:	4910      	ldr	r1, [pc, #64]	; (800ee18 <Setname+0xec>)
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7ff fd4e 	bl	800e878 <cli_printf>
	}

	flag_cli = 0;
 800eddc:	4b09      	ldr	r3, [pc, #36]	; (800ee04 <Setname+0xd8>)
 800edde:	2200      	movs	r2, #0
 800ede0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <Setname+0xd4>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	701a      	strb	r2, [r3, #0]

}
 800ede8:	bf00      	nop
 800edea:	3748      	adds	r7, #72	; 0x48
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	080200f4 	.word	0x080200f4
 800edf4:	0802016c 	.word	0x0802016c
 800edf8:	200019d4 	.word	0x200019d4
 800edfc:	08020254 	.word	0x08020254
 800ee00:	20001a92 	.word	0x20001a92
 800ee04:	20001a93 	.word	0x20001a93
 800ee08:	20001441 	.word	0x20001441
 800ee0c:	200014e5 	.word	0x200014e5
 800ee10:	200014e6 	.word	0x200014e6
 800ee14:	08020280 	.word	0x08020280
 800ee18:	08020294 	.word	0x08020294

0800ee1c <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b092      	sub	sp, #72	; 0x48
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ee28:	4b2d      	ldr	r3, [pc, #180]	; (800eee0 <Setgroup+0xc4>)
 800ee2a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ee2c:	492d      	ldr	r1, [pc, #180]	; (800eee4 <Setgroup+0xc8>)
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f7ff fd22 	bl	800e878 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ee34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee36:	f7f1 f9dd 	bl	80001f4 <strlen>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee44:	4828      	ldr	r0, [pc, #160]	; (800eee8 <Setgroup+0xcc>)
 800ee46:	f7fc fa7d 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800ee4a:	4928      	ldr	r1, [pc, #160]	; (800eeec <Setgroup+0xd0>)
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f7ff fd13 	bl	800e878 <cli_printf>
	cli_other = 1;
 800ee52:	4b27      	ldr	r3, [pc, #156]	; (800eef0 <Setgroup+0xd4>)
 800ee54:	2201      	movs	r2, #1
 800ee56:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ee58:	4b26      	ldr	r3, [pc, #152]	; (800eef4 <Setgroup+0xd8>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ee5e:	f107 0310 	add.w	r3, r7, #16
 800ee62:	2232      	movs	r2, #50	; 0x32
 800ee64:	4619      	mov	r1, r3
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff fd48 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ee6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee6e:	f7f1 f9c1 	bl	80001f4 <strlen>
 800ee72:	4603      	mov	r3, r0
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee7c:	481a      	ldr	r0, [pc, #104]	; (800eee8 <Setgroup+0xcc>)
 800ee7e:	f7fc fa61 	bl	800b344 <HAL_UART_Transmit>

	len = strlen(buffer);
 800ee82:	f107 0310 	add.w	r3, r7, #16
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7f1 f9b4 	bl	80001f4 <strlen>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ee92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee96:	2b0e      	cmp	r3, #14
 800ee98:	d814      	bhi.n	800eec4 <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800ee9a:	7c3b      	ldrb	r3, [r7, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d015      	beq.n	800eecc <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800eea0:	f107 0310 	add.w	r3, r7, #16
 800eea4:	4619      	mov	r1, r3
 800eea6:	4814      	ldr	r0, [pc, #80]	; (800eef8 <Setgroup+0xdc>)
 800eea8:	f00d f8f1 	bl	801c08e <strcpy>
			set_param_flags();
 800eeac:	4b13      	ldr	r3, [pc, #76]	; (800eefc <Setgroup+0xe0>)
 800eeae:	2201      	movs	r2, #1
 800eeb0:	701a      	strb	r2, [r3, #0]
 800eeb2:	4b13      	ldr	r3, [pc, #76]	; (800ef00 <Setgroup+0xe4>)
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800eeb8:	4a0f      	ldr	r2, [pc, #60]	; (800eef8 <Setgroup+0xdc>)
 800eeba:	4912      	ldr	r1, [pc, #72]	; (800ef04 <Setgroup+0xe8>)
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7ff fcdb 	bl	800e878 <cli_printf>
 800eec2:	e003      	b.n	800eecc <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800eec4:	4910      	ldr	r1, [pc, #64]	; (800ef08 <Setgroup+0xec>)
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7ff fcd6 	bl	800e878 <cli_printf>
	}

	flag_cli = 0;
 800eecc:	4b09      	ldr	r3, [pc, #36]	; (800eef4 <Setgroup+0xd8>)
 800eece:	2200      	movs	r2, #0
 800eed0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800eed2:	4b07      	ldr	r3, [pc, #28]	; (800eef0 <Setgroup+0xd4>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	701a      	strb	r2, [r3, #0]

}
 800eed8:	bf00      	nop
 800eeda:	3748      	adds	r7, #72	; 0x48
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	080200f4 	.word	0x080200f4
 800eee4:	0802016c 	.word	0x0802016c
 800eee8:	200019d4 	.word	0x200019d4
 800eeec:	080202a8 	.word	0x080202a8
 800eef0:	20001a92 	.word	0x20001a92
 800eef4:	20001a93 	.word	0x20001a93
 800eef8:	20001473 	.word	0x20001473
 800eefc:	200014e5 	.word	0x200014e5
 800ef00:	200014e6 	.word	0x200014e6
 800ef04:	080202d8 	.word	0x080202d8
 800ef08:	080202ec 	.word	0x080202ec

0800ef0c <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800ef18:	4a04      	ldr	r2, [pc, #16]	; (800ef2c <GetID+0x20>)
 800ef1a:	4905      	ldr	r1, [pc, #20]	; (800ef30 <GetID+0x24>)
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f7ff fcab 	bl	800e878 <cli_printf>
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	200013dd 	.word	0x200013dd
 800ef30:	08020300 	.word	0x08020300

0800ef34 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800ef40:	4a04      	ldr	r2, [pc, #16]	; (800ef54 <GetLocation+0x20>)
 800ef42:	4905      	ldr	r1, [pc, #20]	; (800ef58 <GetLocation+0x24>)
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f7ff fc97 	bl	800e878 <cli_printf>

}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	2000140f 	.word	0x2000140f
 800ef58:	08020308 	.word	0x08020308

0800ef5c <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800ef68:	4a04      	ldr	r2, [pc, #16]	; (800ef7c <Getname+0x20>)
 800ef6a:	4905      	ldr	r1, [pc, #20]	; (800ef80 <Getname+0x24>)
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff fc83 	bl	800e878 <cli_printf>

}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20001441 	.word	0x20001441
 800ef80:	08020318 	.word	0x08020318

0800ef84 <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800ef90:	4a04      	ldr	r2, [pc, #16]	; (800efa4 <Getgroup+0x20>)
 800ef92:	4905      	ldr	r1, [pc, #20]	; (800efa8 <Getgroup+0x24>)
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7ff fc6f 	bl	800e878 <cli_printf>

}
 800ef9a:	bf00      	nop
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20001473 	.word	0x20001473
 800efa8:	08020324 	.word	0x08020324

0800efac <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800efac:	b580      	push	{r7, lr}
 800efae:	b09a      	sub	sp, #104	; 0x68
 800efb0:	af02      	add	r7, sp, #8
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800efb8:	4b26      	ldr	r3, [pc, #152]	; (800f054 <SetDate+0xa8>)
 800efba:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800efbc:	4926      	ldr	r1, [pc, #152]	; (800f058 <SetDate+0xac>)
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f7ff fc5a 	bl	800e878 <cli_printf>
	cli_other = 1;
 800efc4:	4b25      	ldr	r3, [pc, #148]	; (800f05c <SetDate+0xb0>)
 800efc6:	2201      	movs	r2, #1
 800efc8:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800efca:	4b25      	ldr	r3, [pc, #148]	; (800f060 <SetDate+0xb4>)
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800efd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efd4:	2232      	movs	r2, #50	; 0x32
 800efd6:	4619      	mov	r1, r3
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7ff fc8f 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800efde:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800efe0:	f7f1 f908 	bl	80001f4 <strlen>
 800efe4:	4603      	mov	r3, r0
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800efec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800efee:	481d      	ldr	r0, [pc, #116]	; (800f064 <SetDate+0xb8>)
 800eff0:	f7fc f9a8 	bl	800b344 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800eff4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d004      	beq.n	800f006 <SetDate+0x5a>
	{
	Set_Date(buffer);
 800effc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f000:	4618      	mov	r0, r3
 800f002:	f002 fdc1 	bl	8011b88 <Set_Date>
	}
	flag_cli = 0;
 800f006:	4b16      	ldr	r3, [pc, #88]	; (800f060 <SetDate+0xb4>)
 800f008:	2200      	movs	r2, #0
 800f00a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f00c:	4b13      	ldr	r3, [pc, #76]	; (800f05c <SetDate+0xb0>)
 800f00e:	2200      	movs	r2, #0
 800f010:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f016:	2200      	movs	r2, #0
 800f018:	4619      	mov	r1, r3
 800f01a:	4813      	ldr	r0, [pc, #76]	; (800f068 <SetDate+0xbc>)
 800f01c:	f7f9 fe4e 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f020:	f107 0310 	add.w	r3, r7, #16
 800f024:	2200      	movs	r2, #0
 800f026:	4619      	mov	r1, r3
 800f028:	480f      	ldr	r0, [pc, #60]	; (800f068 <SetDate+0xbc>)
 800f02a:	f7f9 fd65 	bl	8008af8 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f02e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f032:	461a      	mov	r2, r3
 800f034:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f038:	4619      	mov	r1, r3
 800f03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	460b      	mov	r3, r1
 800f042:	490a      	ldr	r1, [pc, #40]	; (800f06c <SetDate+0xc0>)
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f7ff fc17 	bl	800e878 <cli_printf>

}
 800f04a:	bf00      	nop
 800f04c:	3760      	adds	r7, #96	; 0x60
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	080200f4 	.word	0x080200f4
 800f058:	08020330 	.word	0x08020330
 800f05c:	20001a92 	.word	0x20001a92
 800f060:	20001a93 	.word	0x20001a93
 800f064:	200019d4 	.word	0x200019d4
 800f068:	200017f8 	.word	0x200017f8
 800f06c:	0802036c 	.word	0x0802036c

0800f070 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f070:	b580      	push	{r7, lr}
 800f072:	b09a      	sub	sp, #104	; 0x68
 800f074:	af02      	add	r7, sp, #8
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f07c:	4b26      	ldr	r3, [pc, #152]	; (800f118 <SetTime+0xa8>)
 800f07e:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800f080:	4926      	ldr	r1, [pc, #152]	; (800f11c <SetTime+0xac>)
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f7ff fbf8 	bl	800e878 <cli_printf>
	cli_other = 1;
 800f088:	4b25      	ldr	r3, [pc, #148]	; (800f120 <SetTime+0xb0>)
 800f08a:	2201      	movs	r2, #1
 800f08c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f08e:	4b25      	ldr	r3, [pc, #148]	; (800f124 <SetTime+0xb4>)
 800f090:	2200      	movs	r2, #0
 800f092:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f098:	2232      	movs	r2, #50	; 0x32
 800f09a:	4619      	mov	r1, r3
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f7ff fc2d 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f0a2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f0a4:	f7f1 f8a6 	bl	80001f4 <strlen>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0b2:	481d      	ldr	r0, [pc, #116]	; (800f128 <SetTime+0xb8>)
 800f0b4:	f7fc f946 	bl	800b344 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <SetTime+0x5a>
	{
	Set_Time(buffer);
 800f0c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f002 fe01 	bl	8011ccc <Set_Time>
    }
	flag_cli = 0;
 800f0ca:	4b16      	ldr	r3, [pc, #88]	; (800f124 <SetTime+0xb4>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f0d0:	4b13      	ldr	r3, [pc, #76]	; (800f120 <SetTime+0xb0>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f0d6:	4b15      	ldr	r3, [pc, #84]	; (800f12c <SetTime+0xbc>)
 800f0d8:	2201      	movs	r2, #1
 800f0da:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4812      	ldr	r0, [pc, #72]	; (800f130 <SetTime+0xc0>)
 800f0e6:	f7f9 fde9 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f0ea:	f107 0310 	add.w	r3, r7, #16
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	480f      	ldr	r0, [pc, #60]	; (800f130 <SetTime+0xc0>)
 800f0f4:	f7f9 fd00 	bl	8008af8 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f0f8:	7c3b      	ldrb	r3, [r7, #16]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	7c7b      	ldrb	r3, [r7, #17]
 800f0fe:	4619      	mov	r1, r3
 800f100:	7cbb      	ldrb	r3, [r7, #18]
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	460b      	mov	r3, r1
 800f106:	490b      	ldr	r1, [pc, #44]	; (800f134 <SetTime+0xc4>)
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f7ff fbb5 	bl	800e878 <cli_printf>

}
 800f10e:	bf00      	nop
 800f110:	3760      	adds	r7, #96	; 0x60
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	080200f4 	.word	0x080200f4
 800f11c:	08020388 	.word	0x08020388
 800f120:	20001a92 	.word	0x20001a92
 800f124:	20001a93 	.word	0x20001a93
 800f128:	200019d4 	.word	0x200019d4
 800f12c:	20000061 	.word	0x20000061
 800f130:	200017f8 	.word	0x200017f8
 800f134:	080203cc 	.word	0x080203cc

0800f138 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08c      	sub	sp, #48	; 0x30
 800f13c:	af02      	add	r7, sp, #8
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f148:	2200      	movs	r2, #0
 800f14a:	4619      	mov	r1, r3
 800f14c:	480f      	ldr	r0, [pc, #60]	; (800f18c <GetDate+0x54>)
 800f14e:	f7f9 fdb5 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f152:	f107 0310 	add.w	r3, r7, #16
 800f156:	2200      	movs	r2, #0
 800f158:	4619      	mov	r1, r3
 800f15a:	480c      	ldr	r0, [pc, #48]	; (800f18c <GetDate+0x54>)
 800f15c:	f7f9 fccc 	bl	8008af8 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f164:	461a      	mov	r2, r3
 800f166:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f16a:	4619      	mov	r1, r3
 800f16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	460b      	mov	r3, r1
 800f174:	4906      	ldr	r1, [pc, #24]	; (800f190 <GetDate+0x58>)
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f7ff fb7e 	bl	800e878 <cli_printf>
	HAL_Delay(100);
 800f17c:	2064      	movs	r0, #100	; 0x64
 800f17e:	f7f4 fa1b 	bl	80035b8 <HAL_Delay>
}
 800f182:	bf00      	nop
 800f184:	3728      	adds	r7, #40	; 0x28
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	200017f8 	.word	0x200017f8
 800f190:	080203e8 	.word	0x080203e8

0800f194 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f194:	b580      	push	{r7, lr}
 800f196:	b08c      	sub	sp, #48	; 0x30
 800f198:	af02      	add	r7, sp, #8
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f1a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	480d      	ldr	r0, [pc, #52]	; (800f1e0 <GetTime+0x4c>)
 800f1aa:	f7f9 fd87 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f1ae:	f107 0310 	add.w	r3, r7, #16
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	480a      	ldr	r0, [pc, #40]	; (800f1e0 <GetTime+0x4c>)
 800f1b8:	f7f9 fc9e 	bl	8008af8 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f1bc:	7c3b      	ldrb	r3, [r7, #16]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	7c7b      	ldrb	r3, [r7, #17]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	7cbb      	ldrb	r3, [r7, #18]
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4906      	ldr	r1, [pc, #24]	; (800f1e4 <GetTime+0x50>)
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7ff fb53 	bl	800e878 <cli_printf>
	HAL_Delay(100);
 800f1d2:	2064      	movs	r0, #100	; 0x64
 800f1d4:	f7f4 f9f0 	bl	80035b8 <HAL_Delay>
}
 800f1d8:	bf00      	nop
 800f1da:	3728      	adds	r7, #40	; 0x28
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	200017f8 	.word	0x200017f8
 800f1e4:	080203f8 	.word	0x080203f8

0800f1e8 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b092      	sub	sp, #72	; 0x48
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f1f4:	4b54      	ldr	r3, [pc, #336]	; (800f348 <SetInterval+0x160>)
 800f1f6:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f1f8:	4954      	ldr	r1, [pc, #336]	; (800f34c <SetInterval+0x164>)
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7ff fb3c 	bl	800e878 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f200:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f202:	f7f0 fff7 	bl	80001f4 <strlen>
 800f206:	4603      	mov	r3, r0
 800f208:	b29a      	uxth	r2, r3
 800f20a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f210:	484f      	ldr	r0, [pc, #316]	; (800f350 <SetInterval+0x168>)
 800f212:	f7fc f897 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800f216:	494f      	ldr	r1, [pc, #316]	; (800f354 <SetInterval+0x16c>)
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f7ff fb2d 	bl	800e878 <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800f21e:	494e      	ldr	r1, [pc, #312]	; (800f358 <SetInterval+0x170>)
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff fb29 	bl	800e878 <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800f226:	494d      	ldr	r1, [pc, #308]	; (800f35c <SetInterval+0x174>)
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7ff fb25 	bl	800e878 <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800f22e:	494c      	ldr	r1, [pc, #304]	; (800f360 <SetInterval+0x178>)
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f7ff fb21 	bl	800e878 <cli_printf>
	cli_other = 1;
 800f236:	4b4b      	ldr	r3, [pc, #300]	; (800f364 <SetInterval+0x17c>)
 800f238:	2201      	movs	r2, #1
 800f23a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f23c:	4b4a      	ldr	r3, [pc, #296]	; (800f368 <SetInterval+0x180>)
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f242:	f107 0310 	add.w	r3, r7, #16
 800f246:	2232      	movs	r2, #50	; 0x32
 800f248:	4619      	mov	r1, r3
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fb56 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f250:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f252:	f7f0 ffcf 	bl	80001f4 <strlen>
 800f256:	4603      	mov	r3, r0
 800f258:	b29a      	uxth	r2, r3
 800f25a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f25e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f260:	483b      	ldr	r0, [pc, #236]	; (800f350 <SetInterval+0x168>)
 800f262:	f7fc f86f 	bl	800b344 <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800f266:	f107 0310 	add.w	r3, r7, #16
 800f26a:	2131      	movs	r1, #49	; 0x31
 800f26c:	4618      	mov	r0, r3
 800f26e:	f00c ff01 	bl	801c074 <strchr>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d015      	beq.n	800f2a4 <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800f278:	4b3c      	ldr	r3, [pc, #240]	; (800f36c <SetInterval+0x184>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	f042 0205 	orr.w	r2, r2, #5
 800f280:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f284:	2200      	movs	r2, #0
 800f286:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f290:	2200      	movs	r2, #0
 800f292:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800f296:	4b36      	ldr	r3, [pc, #216]	; (800f370 <SetInterval+0x188>)
 800f298:	2201      	movs	r2, #1
 800f29a:	701a      	strb	r2, [r3, #0]
 800f29c:	4b35      	ldr	r3, [pc, #212]	; (800f374 <SetInterval+0x18c>)
 800f29e:	2201      	movs	r2, #1
 800f2a0:	701a      	strb	r2, [r3, #0]
 800f2a2:	e03c      	b.n	800f31e <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800f2a4:	f107 0310 	add.w	r3, r7, #16
 800f2a8:	2132      	movs	r1, #50	; 0x32
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f00c fee2 	bl	801c074 <strchr>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d015      	beq.n	800f2e2 <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800f2b6:	4b2d      	ldr	r3, [pc, #180]	; (800f36c <SetInterval+0x184>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f042 020f 	orr.w	r2, r2, #15
 800f2be:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f2d4:	4b26      	ldr	r3, [pc, #152]	; (800f370 <SetInterval+0x188>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	701a      	strb	r2, [r3, #0]
 800f2da:	4b26      	ldr	r3, [pc, #152]	; (800f374 <SetInterval+0x18c>)
 800f2dc:	2201      	movs	r2, #1
 800f2de:	701a      	strb	r2, [r3, #0]
 800f2e0:	e01d      	b.n	800f31e <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800f2e2:	f107 0310 	add.w	r3, r7, #16
 800f2e6:	2133      	movs	r1, #51	; 0x33
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f00c fec3 	bl	801c074 <strchr>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d014      	beq.n	800f31e <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800f2f4:	4b1d      	ldr	r3, [pc, #116]	; (800f36c <SetInterval+0x184>)
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f2fc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f300:	2200      	movs	r2, #0
 800f302:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f306:	2200      	movs	r2, #0
 800f308:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f312:	4b17      	ldr	r3, [pc, #92]	; (800f370 <SetInterval+0x188>)
 800f314:	2201      	movs	r2, #1
 800f316:	701a      	strb	r2, [r3, #0]
 800f318:	4b16      	ldr	r3, [pc, #88]	; (800f374 <SetInterval+0x18c>)
 800f31a:	2201      	movs	r2, #1
 800f31c:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f31e:	4b12      	ldr	r3, [pc, #72]	; (800f368 <SetInterval+0x180>)
 800f320:	2200      	movs	r2, #0
 800f322:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f324:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <SetInterval+0x17c>)
 800f326:	2200      	movs	r2, #0
 800f328:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800f32a:	4b10      	ldr	r3, [pc, #64]	; (800f36c <SetInterval+0x184>)
 800f32c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f330:	461a      	mov	r2, r3
 800f332:	4911      	ldr	r1, [pc, #68]	; (800f378 <SetInterval+0x190>)
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	f7ff fa9f 	bl	800e878 <cli_printf>
	set_alarm_Time = 1;
 800f33a:	4b10      	ldr	r3, [pc, #64]	; (800f37c <SetInterval+0x194>)
 800f33c:	2201      	movs	r2, #1
 800f33e:	701a      	strb	r2, [r3, #0]
}
 800f340:	bf00      	nop
 800f342:	3748      	adds	r7, #72	; 0x48
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	080200f4 	.word	0x080200f4
 800f34c:	0802016c 	.word	0x0802016c
 800f350:	200019d4 	.word	0x200019d4
 800f354:	08020408 	.word	0x08020408
 800f358:	0802041c 	.word	0x0802041c
 800f35c:	08020430 	.word	0x08020430
 800f360:	08020444 	.word	0x08020444
 800f364:	20001a92 	.word	0x20001a92
 800f368:	20001a93 	.word	0x20001a93
 800f36c:	20001310 	.word	0x20001310
 800f370:	200014e5 	.word	0x200014e5
 800f374:	200014e6 	.word	0x200014e6
 800f378:	0802048c 	.word	0x0802048c
 800f37c:	20000061 	.word	0x20000061

0800f380 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800f38c:	4b05      	ldr	r3, [pc, #20]	; (800f3a4 <GetInterval+0x24>)
 800f38e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f392:	461a      	mov	r2, r3
 800f394:	4904      	ldr	r1, [pc, #16]	; (800f3a8 <GetInterval+0x28>)
 800f396:	68f8      	ldr	r0, [r7, #12]
 800f398:	f7ff fa6e 	bl	800e878 <cli_printf>

}
 800f39c:	bf00      	nop
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20001310 	.word	0x20001310
 800f3a8:	080204a8 	.word	0x080204a8

0800f3ac <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b092      	sub	sp, #72	; 0x48
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800f3b8:	4b31      	ldr	r3, [pc, #196]	; (800f480 <SetFilename+0xd4>)
 800f3ba:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f3bc:	4931      	ldr	r1, [pc, #196]	; (800f484 <SetFilename+0xd8>)
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff fa5a 	bl	800e878 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f3c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3c6:	f7f0 ff15 	bl	80001f4 <strlen>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3d4:	482c      	ldr	r0, [pc, #176]	; (800f488 <SetFilename+0xdc>)
 800f3d6:	f7fb ffb5 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800f3da:	492c      	ldr	r1, [pc, #176]	; (800f48c <SetFilename+0xe0>)
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7ff fa4b 	bl	800e878 <cli_printf>
	cli_printf(cli,"If any special characters they will be omitted automatically.");
 800f3e2:	492b      	ldr	r1, [pc, #172]	; (800f490 <SetFilename+0xe4>)
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f7ff fa47 	bl	800e878 <cli_printf>

	cli_other = 1;
 800f3ea:	4b2a      	ldr	r3, [pc, #168]	; (800f494 <SetFilename+0xe8>)
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f3f0:	4b29      	ldr	r3, [pc, #164]	; (800f498 <SetFilename+0xec>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f3f6:	f107 0310 	add.w	r3, r7, #16
 800f3fa:	2232      	movs	r2, #50	; 0x32
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fa7c 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f404:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f406:	f7f0 fef5 	bl	80001f4 <strlen>
 800f40a:	4603      	mov	r3, r0
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f414:	481c      	ldr	r0, [pc, #112]	; (800f488 <SetFilename+0xdc>)
 800f416:	f7fb ff95 	bl	800b344 <HAL_UART_Transmit>

len = strlen(buffer);
 800f41a:	f107 0310 	add.w	r3, r7, #16
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f0 fee8 	bl	80001f4 <strlen>
 800f424:	4603      	mov	r3, r0
 800f426:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800f42a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f42e:	2b13      	cmp	r3, #19
 800f430:	d818      	bhi.n	800f464 <SetFilename+0xb8>
{
	   if(buffer[0] != '\0' )
 800f432:	7c3b      	ldrb	r3, [r7, #16]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d019      	beq.n	800f46c <SetFilename+0xc0>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800f438:	f107 0310 	add.w	r3, r7, #16
 800f43c:	4619      	mov	r1, r3
 800f43e:	4817      	ldr	r0, [pc, #92]	; (800f49c <SetFilename+0xf0>)
 800f440:	f00c fe25 	bl	801c08e <strcpy>
		set_param_flags();
 800f444:	4b16      	ldr	r3, [pc, #88]	; (800f4a0 <SetFilename+0xf4>)
 800f446:	2201      	movs	r2, #1
 800f448:	701a      	strb	r2, [r3, #0]
 800f44a:	4b16      	ldr	r3, [pc, #88]	; (800f4a4 <SetFilename+0xf8>)
 800f44c:	2201      	movs	r2, #1
 800f44e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800f450:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <SetFilename+0xfc>)
 800f452:	2201      	movs	r2, #1
 800f454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f458:	4a10      	ldr	r2, [pc, #64]	; (800f49c <SetFilename+0xf0>)
 800f45a:	4914      	ldr	r1, [pc, #80]	; (800f4ac <SetFilename+0x100>)
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fa0b 	bl	800e878 <cli_printf>
 800f462:	e003      	b.n	800f46c <SetFilename+0xc0>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800f464:	4912      	ldr	r1, [pc, #72]	; (800f4b0 <SetFilename+0x104>)
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f7ff fa06 	bl	800e878 <cli_printf>
}


	flag_cli = 0;
 800f46c:	4b0a      	ldr	r3, [pc, #40]	; (800f498 <SetFilename+0xec>)
 800f46e:	2200      	movs	r2, #0
 800f470:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f472:	4b08      	ldr	r3, [pc, #32]	; (800f494 <SetFilename+0xe8>)
 800f474:	2200      	movs	r2, #0
 800f476:	701a      	strb	r2, [r3, #0]


}
 800f478:	bf00      	nop
 800f47a:	3748      	adds	r7, #72	; 0x48
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	080200f4 	.word	0x080200f4
 800f484:	0802016c 	.word	0x0802016c
 800f488:	200019d4 	.word	0x200019d4
 800f48c:	080204c4 	.word	0x080204c4
 800f490:	08020538 	.word	0x08020538
 800f494:	20001a92 	.word	0x20001a92
 800f498:	20001a93 	.word	0x20001a93
 800f49c:	20001310 	.word	0x20001310
 800f4a0:	200014e5 	.word	0x200014e5
 800f4a4:	200014e6 	.word	0x200014e6
 800f4a8:	200014a8 	.word	0x200014a8
 800f4ac:	08020578 	.word	0x08020578
 800f4b0:	08020590 	.word	0x08020590

0800f4b4 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f4c0:	4a04      	ldr	r2, [pc, #16]	; (800f4d4 <GetFilename+0x20>)
 800f4c2:	4905      	ldr	r1, [pc, #20]	; (800f4d8 <GetFilename+0x24>)
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f7ff f9d7 	bl	800e878 <cli_printf>

}
 800f4ca:	bf00      	nop
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20001310 	.word	0x20001310
 800f4d8:	08020578 	.word	0x08020578

0800f4dc <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b092      	sub	sp, #72	; 0x48
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800f4e8:	4b41      	ldr	r3, [pc, #260]	; (800f5f0 <SetFileformat+0x114>)
 800f4ea:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f4ec:	4941      	ldr	r1, [pc, #260]	; (800f5f4 <SetFileformat+0x118>)
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7ff f9c2 	bl	800e878 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f4f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4f6:	f7f0 fe7d 	bl	80001f4 <strlen>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f504:	483c      	ldr	r0, [pc, #240]	; (800f5f8 <SetFileformat+0x11c>)
 800f506:	f7fb ff1d 	bl	800b344 <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800f50a:	493c      	ldr	r1, [pc, #240]	; (800f5fc <SetFileformat+0x120>)
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f7ff f9b3 	bl	800e878 <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800f512:	493b      	ldr	r1, [pc, #236]	; (800f600 <SetFileformat+0x124>)
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f7ff f9af 	bl	800e878 <cli_printf>
	cli_printf(cli,"2. (.json)");
 800f51a:	493a      	ldr	r1, [pc, #232]	; (800f604 <SetFileformat+0x128>)
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f7ff f9ab 	bl	800e878 <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800f522:	4939      	ldr	r1, [pc, #228]	; (800f608 <SetFileformat+0x12c>)
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff f9a7 	bl	800e878 <cli_printf>

	cli_other = 1;
 800f52a:	4b38      	ldr	r3, [pc, #224]	; (800f60c <SetFileformat+0x130>)
 800f52c:	2201      	movs	r2, #1
 800f52e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f530:	4b37      	ldr	r3, [pc, #220]	; (800f610 <SetFileformat+0x134>)
 800f532:	2200      	movs	r2, #0
 800f534:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f536:	f107 0310 	add.w	r3, r7, #16
 800f53a:	2232      	movs	r2, #50	; 0x32
 800f53c:	4619      	mov	r1, r3
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f7ff f9dc 	bl	800e8fc <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f544:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f546:	f7f0 fe55 	bl	80001f4 <strlen>
 800f54a:	4603      	mov	r3, r0
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f554:	4828      	ldr	r0, [pc, #160]	; (800f5f8 <SetFileformat+0x11c>)
 800f556:	f7fb fef5 	bl	800b344 <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800f55a:	f107 0310 	add.w	r3, r7, #16
 800f55e:	2131      	movs	r1, #49	; 0x31
 800f560:	4618      	mov	r0, r3
 800f562:	f00c fd87 	bl	801c074 <strchr>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d014      	beq.n	800f596 <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800f56c:	4b29      	ldr	r3, [pc, #164]	; (800f614 <SetFileformat+0x138>)
 800f56e:	4a2a      	ldr	r2, [pc, #168]	; (800f618 <SetFileformat+0x13c>)
 800f570:	6810      	ldr	r0, [r2, #0]
 800f572:	6018      	str	r0, [r3, #0]
 800f574:	7912      	ldrb	r2, [r2, #4]
 800f576:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800f578:	4b28      	ldr	r3, [pc, #160]	; (800f61c <SetFileformat+0x140>)
 800f57a:	2201      	movs	r2, #1
 800f57c:	701a      	strb	r2, [r3, #0]
 800f57e:	4b28      	ldr	r3, [pc, #160]	; (800f620 <SetFileformat+0x144>)
 800f580:	2201      	movs	r2, #1
 800f582:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f584:	4b27      	ldr	r3, [pc, #156]	; (800f624 <SetFileformat+0x148>)
 800f586:	2201      	movs	r2, #1
 800f588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800f58c:	4b25      	ldr	r3, [pc, #148]	; (800f624 <SetFileformat+0x148>)
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f594:	e01c      	b.n	800f5d0 <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	2132      	movs	r1, #50	; 0x32
 800f59c:	4618      	mov	r0, r3
 800f59e:	f00c fd69 	bl	801c074 <strchr>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d013      	beq.n	800f5d0 <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <SetFileformat+0x138>)
 800f5aa:	4a1f      	ldr	r2, [pc, #124]	; (800f628 <SetFileformat+0x14c>)
 800f5ac:	6810      	ldr	r0, [r2, #0]
 800f5ae:	6018      	str	r0, [r3, #0]
 800f5b0:	8892      	ldrh	r2, [r2, #4]
 800f5b2:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800f5b4:	4b19      	ldr	r3, [pc, #100]	; (800f61c <SetFileformat+0x140>)
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	4b19      	ldr	r3, [pc, #100]	; (800f620 <SetFileformat+0x144>)
 800f5bc:	2201      	movs	r2, #1
 800f5be:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f5c0:	4b18      	ldr	r3, [pc, #96]	; (800f624 <SetFileformat+0x148>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800f5c8:	4b16      	ldr	r3, [pc, #88]	; (800f624 <SetFileformat+0x148>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800f5d0:	4b0f      	ldr	r3, [pc, #60]	; (800f610 <SetFileformat+0x134>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f5d6:	4b0d      	ldr	r3, [pc, #52]	; (800f60c <SetFileformat+0x130>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f5dc:	4a0d      	ldr	r2, [pc, #52]	; (800f614 <SetFileformat+0x138>)
 800f5de:	4913      	ldr	r1, [pc, #76]	; (800f62c <SetFileformat+0x150>)
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f7ff f949 	bl	800e878 <cli_printf>

}
 800f5e6:	bf00      	nop
 800f5e8:	3748      	adds	r7, #72	; 0x48
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	080200f4 	.word	0x080200f4
 800f5f4:	0802016c 	.word	0x0802016c
 800f5f8:	200019d4 	.word	0x200019d4
 800f5fc:	080205a8 	.word	0x080205a8
 800f600:	080205cc 	.word	0x080205cc
 800f604:	080205d8 	.word	0x080205d8
 800f608:	080205e4 	.word	0x080205e4
 800f60c:	20001a92 	.word	0x20001a92
 800f610:	20001a93 	.word	0x20001a93
 800f614:	20001374 	.word	0x20001374
 800f618:	08020614 	.word	0x08020614
 800f61c:	200014e5 	.word	0x200014e5
 800f620:	200014e6 	.word	0x200014e6
 800f624:	200014a8 	.word	0x200014a8
 800f628:	0802061c 	.word	0x0802061c
 800f62c:	08020624 	.word	0x08020624

0800f630 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f63c:	4a04      	ldr	r2, [pc, #16]	; (800f650 <GetFileformat+0x20>)
 800f63e:	4905      	ldr	r1, [pc, #20]	; (800f654 <GetFileformat+0x24>)
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff f919 	bl	800e878 <cli_printf>

}
 800f646:	bf00      	nop
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20001374 	.word	0x20001374
 800f654:	08020624 	.word	0x08020624

0800f658 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800f658:	b580      	push	{r7, lr}
 800f65a:	b096      	sub	sp, #88	; 0x58
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f664:	4b49      	ldr	r3, [pc, #292]	; (800f78c <fanclean+0x134>)
 800f666:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800f668:	2300      	movs	r3, #0
 800f66a:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f66c:	4b48      	ldr	r3, [pc, #288]	; (800f790 <fanclean+0x138>)
 800f66e:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800f676:	4947      	ldr	r1, [pc, #284]	; (800f794 <fanclean+0x13c>)
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7ff f8fd 	bl	800e878 <cli_printf>

	cli_other = 1;
 800f67e:	4b46      	ldr	r3, [pc, #280]	; (800f798 <fanclean+0x140>)
 800f680:	2201      	movs	r2, #1
 800f682:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f684:	4b45      	ldr	r3, [pc, #276]	; (800f79c <fanclean+0x144>)
 800f686:	2200      	movs	r2, #0
 800f688:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f68a:	f107 0314 	add.w	r3, r7, #20
 800f68e:	2232      	movs	r2, #50	; 0x32
 800f690:	4619      	mov	r1, r3
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7ff f932 	bl	800e8fc <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f698:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f69a:	f7f0 fdab 	bl	80001f4 <strlen>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f6a8:	483d      	ldr	r0, [pc, #244]	; (800f7a0 <fanclean+0x148>)
 800f6aa:	f7fb fe4b 	bl	800b344 <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800f6ae:	f107 0314 	add.w	r3, r7, #20
 800f6b2:	216e      	movs	r1, #110	; 0x6e
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f00c fcdd 	bl	801c074 <strchr>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00f      	beq.n	800f6e0 <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800f6c0:	4b38      	ldr	r3, [pc, #224]	; (800f7a4 <fanclean+0x14c>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800f6c8:	4b37      	ldr	r3, [pc, #220]	; (800f7a8 <fanclean+0x150>)
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800f6d0:	4936      	ldr	r1, [pc, #216]	; (800f7ac <fanclean+0x154>)
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f7ff f8d0 	bl	800e878 <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f6de:	e00f      	b.n	800f700 <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800f6e0:	f107 0314 	add.w	r3, r7, #20
 800f6e4:	2179      	movs	r1, #121	; 0x79
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f00c fcc4 	bl	801c074 <strchr>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d006      	beq.n	800f700 <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800f6f2:	4b2d      	ldr	r3, [pc, #180]	; (800f7a8 <fanclean+0x150>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        	do_Calibration = 1;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800f700:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f704:	2b01      	cmp	r3, #1
 800f706:	d136      	bne.n	800f776 <fanclean+0x11e>
		   {

				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f708:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f70a:	f7f0 fd73 	bl	80001f4 <strlen>
 800f70e:	4603      	mov	r3, r0
 800f710:	b29a      	uxth	r2, r3
 800f712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f716:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f718:	4821      	ldr	r0, [pc, #132]	; (800f7a0 <fanclean+0x148>)
 800f71a:	f7fb fe13 	bl	800b344 <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800f71e:	4924      	ldr	r1, [pc, #144]	; (800f7b0 <fanclean+0x158>)
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f7ff f8a9 	bl	800e878 <cli_printf>
		   while(counter < 5 )
 800f726:	e014      	b.n	800f752 <fanclean+0xfa>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800f728:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f72a:	f7f0 fd63 	bl	80001f4 <strlen>
 800f72e:	4603      	mov	r3, r0
 800f730:	b29a      	uxth	r2, r3
 800f732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f738:	4819      	ldr	r0, [pc, #100]	; (800f7a0 <fanclean+0x148>)
 800f73a:	f7fb fe03 	bl	800b344 <HAL_UART_Transmit>
                HAL_Delay(200);
 800f73e:	20c8      	movs	r0, #200	; 0xc8
 800f740:	f7f3 ff3a 	bl	80035b8 <HAL_Delay>
                BLUE_LED_TOGGLE();
 800f744:	2108      	movs	r1, #8
 800f746:	481b      	ldr	r0, [pc, #108]	; (800f7b4 <fanclean+0x15c>)
 800f748:	f7f5 ff27 	bl	800559a <HAL_GPIO_TogglePin>
                counter++;
 800f74c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f74e:	3301      	adds	r3, #1
 800f750:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 5 )
 800f752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f754:	2b04      	cmp	r3, #4
 800f756:	dde7      	ble.n	800f728 <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f758:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f75a:	f7f0 fd4b 	bl	80001f4 <strlen>
 800f75e:	4603      	mov	r3, r0
 800f760:	b29a      	uxth	r2, r3
 800f762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f766:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f768:	480d      	ldr	r0, [pc, #52]	; (800f7a0 <fanclean+0x148>)
 800f76a:	f7fb fdeb 	bl	800b344 <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800f76e:	4912      	ldr	r1, [pc, #72]	; (800f7b8 <fanclean+0x160>)
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff f881 	bl	800e878 <cli_printf>


		   }

		flag_cli = 0;
 800f776:	4b09      	ldr	r3, [pc, #36]	; (800f79c <fanclean+0x144>)
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f77c:	4b06      	ldr	r3, [pc, #24]	; (800f798 <fanclean+0x140>)
 800f77e:	2200      	movs	r2, #0
 800f780:	701a      	strb	r2, [r3, #0]
}
 800f782:	bf00      	nop
 800f784:	3758      	adds	r7, #88	; 0x58
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	080200f4 	.word	0x080200f4
 800f790:	08020640 	.word	0x08020640
 800f794:	0802064c 	.word	0x0802064c
 800f798:	20001a92 	.word	0x20001a92
 800f79c:	20001a93 	.word	0x20001a93
 800f7a0:	200019d4 	.word	0x200019d4
 800f7a4:	20001310 	.word	0x20001310
 800f7a8:	200014a8 	.word	0x200014a8
 800f7ac:	08020688 	.word	0x08020688
 800f7b0:	080206b0 	.word	0x080206b0
 800f7b4:	40020400 	.word	0x40020400
 800f7b8:	080206e8 	.word	0x080206e8

0800f7bc <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b096      	sub	sp, #88	; 0x58
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f7c8:	4b50      	ldr	r3, [pc, #320]	; (800f90c <co2calibrate+0x150>)
 800f7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f7d0:	4b4f      	ldr	r3, [pc, #316]	; (800f910 <co2calibrate+0x154>)
 800f7d2:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800f7da:	4b4e      	ldr	r3, [pc, #312]	; (800f914 <co2calibrate+0x158>)
 800f7dc:	2201      	movs	r2, #1
 800f7de:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f7e0:	4b4d      	ldr	r3, [pc, #308]	; (800f918 <co2calibrate+0x15c>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800f7e6:	f107 0310 	add.w	r3, r7, #16
 800f7ea:	2232      	movs	r2, #50	; 0x32
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f00b fc1a 	bl	801b028 <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800f7f4:	4949      	ldr	r1, [pc, #292]	; (800f91c <co2calibrate+0x160>)
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f7ff f83e 	bl	800e878 <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800f7fc:	4948      	ldr	r1, [pc, #288]	; (800f920 <co2calibrate+0x164>)
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	f7ff f83a 	bl	800e878 <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800f804:	f107 0310 	add.w	r3, r7, #16
 800f808:	2232      	movs	r2, #50	; 0x32
 800f80a:	4619      	mov	r1, r3
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f7ff f875 	bl	800e8fc <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f812:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f814:	f7f0 fcee 	bl	80001f4 <strlen>
 800f818:	4603      	mov	r3, r0
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f820:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f822:	4840      	ldr	r0, [pc, #256]	; (800f924 <co2calibrate+0x168>)
 800f824:	f7fb fd8e 	bl	800b344 <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800f828:	7c3b      	ldrb	r3, [r7, #16]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d01e      	beq.n	800f86c <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800f82e:	4b3e      	ldr	r3, [pc, #248]	; (800f928 <co2calibrate+0x16c>)
 800f830:	2201      	movs	r2, #1
 800f832:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

                val = atoi(buffer);
 800f836:	f107 0310 	add.w	r3, r7, #16
 800f83a:	4618      	mov	r0, r3
 800f83c:	f00b fb24 	bl	801ae88 <atoi>
 800f840:	4603      	mov	r3, r0
 800f842:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800f844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f846:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d803      	bhi.n	800f856 <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800f84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f850:	b29a      	uxth	r2, r3
 800f852:	4b35      	ldr	r3, [pc, #212]	; (800f928 <co2calibrate+0x16c>)
 800f854:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800f856:	4b34      	ldr	r3, [pc, #208]	; (800f928 <co2calibrate+0x16c>)
 800f858:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f85a:	461a      	mov	r2, r3
 800f85c:	4933      	ldr	r1, [pc, #204]	; (800f92c <co2calibrate+0x170>)
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7ff f80a 	bl	800e878 <cli_printf>
            	do_Calibration = 1;
 800f864:	2301      	movs	r3, #1
 800f866:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f86a:	e00a      	b.n	800f882 <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800f86c:	4930      	ldr	r1, [pc, #192]	; (800f930 <co2calibrate+0x174>)
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff f802 	bl	800e878 <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800f874:	4b2c      	ldr	r3, [pc, #176]	; (800f928 <co2calibrate+0x16c>)
 800f876:	2200      	movs	r2, #0
 800f878:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				do_Calibration = 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800f882:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f886:	2b01      	cmp	r3, #1
 800f888:	d136      	bne.n	800f8f8 <co2calibrate+0x13c>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f88a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f88c:	f7f0 fcb2 	bl	80001f4 <strlen>
 800f890:	4603      	mov	r3, r0
 800f892:	b29a      	uxth	r2, r3
 800f894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f89a:	4822      	ldr	r0, [pc, #136]	; (800f924 <co2calibrate+0x168>)
 800f89c:	f7fb fd52 	bl	800b344 <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800f8a0:	4924      	ldr	r1, [pc, #144]	; (800f934 <co2calibrate+0x178>)
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f7fe ffe8 	bl	800e878 <cli_printf>
		   while(counter < 5 )
 800f8a8:	e014      	b.n	800f8d4 <co2calibrate+0x118>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800f8aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f8ac:	f7f0 fca2 	bl	80001f4 <strlen>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f8ba:	481a      	ldr	r0, [pc, #104]	; (800f924 <co2calibrate+0x168>)
 800f8bc:	f7fb fd42 	bl	800b344 <HAL_UART_Transmit>
			    HAL_Delay(200);
 800f8c0:	20c8      	movs	r0, #200	; 0xc8
 800f8c2:	f7f3 fe79 	bl	80035b8 <HAL_Delay>
			    BLUE_LED_TOGGLE();
 800f8c6:	2108      	movs	r1, #8
 800f8c8:	481b      	ldr	r0, [pc, #108]	; (800f938 <co2calibrate+0x17c>)
 800f8ca:	f7f5 fe66 	bl	800559a <HAL_GPIO_TogglePin>
                counter++;
 800f8ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 5 )
 800f8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d6:	2b04      	cmp	r3, #4
 800f8d8:	dde7      	ble.n	800f8aa <co2calibrate+0xee>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f8da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f8dc:	f7f0 fc8a 	bl	80001f4 <strlen>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	b29a      	uxth	r2, r3
 800f8e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f8ea:	480e      	ldr	r0, [pc, #56]	; (800f924 <co2calibrate+0x168>)
 800f8ec:	f7fb fd2a 	bl	800b344 <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800f8f0:	4912      	ldr	r1, [pc, #72]	; (800f93c <co2calibrate+0x180>)
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f7fe ffc0 	bl	800e878 <cli_printf>
		   }

		flag_cli = 0;
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <co2calibrate+0x15c>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f8fe:	4b05      	ldr	r3, [pc, #20]	; (800f914 <co2calibrate+0x158>)
 800f900:	2200      	movs	r2, #0
 800f902:	701a      	strb	r2, [r3, #0]
}
 800f904:	bf00      	nop
 800f906:	3758      	adds	r7, #88	; 0x58
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	080200f4 	.word	0x080200f4
 800f910:	08020640 	.word	0x08020640
 800f914:	20001a92 	.word	0x20001a92
 800f918:	20001a93 	.word	0x20001a93
 800f91c:	080206fc 	.word	0x080206fc
 800f920:	08020740 	.word	0x08020740
 800f924:	200019d4 	.word	0x200019d4
 800f928:	200014a8 	.word	0x200014a8
 800f92c:	08020794 	.word	0x08020794
 800f930:	080207e4 	.word	0x080207e4
 800f934:	08020804 	.word	0x08020804
 800f938:	40020400 	.word	0x40020400
 800f93c:	08020828 	.word	0x08020828

0800f940 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b092      	sub	sp, #72	; 0x48
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f94c:	4b22      	ldr	r3, [pc, #136]	; (800f9d8 <SystemRestart+0x98>)
 800f94e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800f950:	4922      	ldr	r1, [pc, #136]	; (800f9dc <SystemRestart+0x9c>)
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7fe ff90 	bl	800e878 <cli_printf>

	cli_other = 1;
 800f958:	4b21      	ldr	r3, [pc, #132]	; (800f9e0 <SystemRestart+0xa0>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f95e:	4b21      	ldr	r3, [pc, #132]	; (800f9e4 <SystemRestart+0xa4>)
 800f960:	2200      	movs	r2, #0
 800f962:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f964:	f107 0310 	add.w	r3, r7, #16
 800f968:	2232      	movs	r2, #50	; 0x32
 800f96a:	4619      	mov	r1, r3
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7fe ffc5 	bl	800e8fc <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f972:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f974:	f7f0 fc3e 	bl	80001f4 <strlen>
 800f978:	4603      	mov	r3, r0
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f982:	4819      	ldr	r0, [pc, #100]	; (800f9e8 <SystemRestart+0xa8>)
 800f984:	f7fb fcde 	bl	800b344 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	2179      	movs	r1, #121	; 0x79
 800f98e:	4618      	mov	r0, r3
 800f990:	f00c fb70 	bl	801c074 <strchr>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d006      	beq.n	800f9a8 <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800f99a:	4914      	ldr	r1, [pc, #80]	; (800f9ec <SystemRestart+0xac>)
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f7fe ff6b 	bl	800e878 <cli_printf>
			HAL_NVIC_SystemReset();
 800f9a2:	f7f4 fc18 	bl	80041d6 <HAL_NVIC_SystemReset>
 800f9a6:	e00c      	b.n	800f9c2 <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800f9a8:	f107 0310 	add.w	r3, r7, #16
 800f9ac:	216e      	movs	r1, #110	; 0x6e
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f00c fb60 	bl	801c074 <strchr>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d003      	beq.n	800f9c2 <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800f9ba:	490d      	ldr	r1, [pc, #52]	; (800f9f0 <SystemRestart+0xb0>)
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7fe ff5b 	bl	800e878 <cli_printf>
		}


		flag_cli = 0;
 800f9c2:	4b08      	ldr	r3, [pc, #32]	; (800f9e4 <SystemRestart+0xa4>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f9c8:	4b05      	ldr	r3, [pc, #20]	; (800f9e0 <SystemRestart+0xa0>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	701a      	strb	r2, [r3, #0]
}
 800f9ce:	bf00      	nop
 800f9d0:	3748      	adds	r7, #72	; 0x48
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	080200f4 	.word	0x080200f4
 800f9dc:	08020844 	.word	0x08020844
 800f9e0:	20001a92 	.word	0x20001a92
 800f9e4:	20001a93 	.word	0x20001a93
 800f9e8:	200019d4 	.word	0x200019d4
 800f9ec:	0802086c 	.word	0x0802086c
 800f9f0:	08020888 	.word	0x08020888

0800f9f4 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800fa00:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <Co2Level+0x24>)
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	4905      	ldr	r1, [pc, #20]	; (800fa1c <Co2Level+0x28>)
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f7fe ff35 	bl	800e878 <cli_printf>
}
 800fa0e:	bf00      	nop
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	200014a8 	.word	0x200014a8
 800fa1c:	080208a0 	.word	0x080208a0

0800fa20 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 800fa2c:	4b05      	ldr	r3, [pc, #20]	; (800fa44 <TempLevel+0x24>)
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	461a      	mov	r2, r3
 800fa32:	4905      	ldr	r1, [pc, #20]	; (800fa48 <TempLevel+0x28>)
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7fe ff1f 	bl	800e878 <cli_printf>
}
 800fa3a:	bf00      	nop
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	200014a8 	.word	0x200014a8
 800fa48:	080208b0 	.word	0x080208b0

0800fa4c <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 800fa58:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <HumidLevel+0x24>)
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4905      	ldr	r1, [pc, #20]	; (800fa74 <HumidLevel+0x28>)
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	f7fe ff09 	bl	800e878 <cli_printf>
}
 800fa66:	bf00      	nop
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	200014a8 	.word	0x200014a8
 800fa74:	080208c8 	.word	0x080208c8

0800fa78 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 800fa84:	491f      	ldr	r1, [pc, #124]	; (800fb04 <MotionDetection+0x8c>)
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f7fe fef6 	bl	800e878 <cli_printf>
	HAL_Delay(1500);
 800fa8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800fa90:	f7f3 fd92 	bl	80035b8 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 800fa94:	f7f3 fd84 	bl	80035a0 <HAL_GetTick>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	4a1b      	ldr	r2, [pc, #108]	; (800fb08 <MotionDetection+0x90>)
 800fa9c:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 800fa9e:	4b1b      	ldr	r3, [pc, #108]	; (800fb0c <MotionDetection+0x94>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800faa4:	e01c      	b.n	800fae0 <MotionDetection+0x68>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800faa6:	2101      	movs	r1, #1
 800faa8:	4819      	ldr	r0, [pc, #100]	; (800fb10 <MotionDetection+0x98>)
 800faaa:	f7f5 fd45 	bl	8005538 <HAL_GPIO_ReadPin>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 800fab4:	4b17      	ldr	r3, [pc, #92]	; (800fb14 <MotionDetection+0x9c>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	731a      	strb	r2, [r3, #12]
 800faba:	e002      	b.n	800fac2 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 800fabc:	4b15      	ldr	r3, [pc, #84]	; (800fb14 <MotionDetection+0x9c>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 800fac2:	4b14      	ldr	r3, [pc, #80]	; (800fb14 <MotionDetection+0x9c>)
 800fac4:	7b1b      	ldrb	r3, [r3, #12]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d101      	bne.n	800face <MotionDetection+0x56>
 800faca:	4b13      	ldr	r3, [pc, #76]	; (800fb18 <MotionDetection+0xa0>)
 800facc:	e000      	b.n	800fad0 <MotionDetection+0x58>
 800face:	4b13      	ldr	r3, [pc, #76]	; (800fb1c <MotionDetection+0xa4>)
 800fad0:	461a      	mov	r2, r3
 800fad2:	4913      	ldr	r1, [pc, #76]	; (800fb20 <MotionDetection+0xa8>)
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f7fe fecf 	bl	800e878 <cli_printf>
//	         	}
HAL_Delay(100);
 800fada:	2064      	movs	r0, #100	; 0x64
 800fadc:	f7f3 fd6c 	bl	80035b8 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800fae0:	f7f3 fd5e 	bl	80035a0 <HAL_GetTick>
 800fae4:	4602      	mov	r2, r0
 800fae6:	4b08      	ldr	r3, [pc, #32]	; (800fb08 <MotionDetection+0x90>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	1ad2      	subs	r2, r2, r3
 800faec:	4b0d      	ldr	r3, [pc, #52]	; (800fb24 <MotionDetection+0xac>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d3d8      	bcc.n	800faa6 <MotionDetection+0x2e>

	}

	cli_printf(cli,"Session ended");
 800faf4:	490c      	ldr	r1, [pc, #48]	; (800fb28 <MotionDetection+0xb0>)
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f7fe febe 	bl	800e878 <cli_printf>

}
 800fafc:	bf00      	nop
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	080208dc 	.word	0x080208dc
 800fb08:	20001a8c 	.word	0x20001a8c
 800fb0c:	20001a94 	.word	0x20001a94
 800fb10:	40020000 	.word	0x40020000
 800fb14:	200014a8 	.word	0x200014a8
 800fb18:	08020914 	.word	0x08020914
 800fb1c:	0802091c 	.word	0x0802091c
 800fb20:	08020924 	.word	0x08020924
 800fb24:	20000058 	.word	0x20000058
 800fb28:	08020938 	.word	0x08020938

0800fb2c <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 800fb38:	492c      	ldr	r1, [pc, #176]	; (800fbec <AirQuality+0xc0>)
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f7fe fe9c 	bl	800e878 <cli_printf>
	if(_RunTime_Packet.pm1_0 == 0 && _RunTime_Packet.pm2_5 == 0 && _RunTime_Packet.pm4_0 == 0 && _RunTime_Packet.pm10_0 == 0)
 800fb40:	4b2b      	ldr	r3, [pc, #172]	; (800fbf0 <AirQuality+0xc4>)
 800fb42:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	d11c      	bne.n	800fb8a <AirQuality+0x5e>
 800fb50:	4b27      	ldr	r3, [pc, #156]	; (800fbf0 <AirQuality+0xc4>)
 800fb52:	edd3 7a05 	vldr	s15, [r3, #20]
 800fb56:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	d114      	bne.n	800fb8a <AirQuality+0x5e>
 800fb60:	4b23      	ldr	r3, [pc, #140]	; (800fbf0 <AirQuality+0xc4>)
 800fb62:	edd3 7a06 	vldr	s15, [r3, #24]
 800fb66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6e:	d10c      	bne.n	800fb8a <AirQuality+0x5e>
 800fb70:	4b1f      	ldr	r3, [pc, #124]	; (800fbf0 <AirQuality+0xc4>)
 800fb72:	edd3 7a07 	vldr	s15, [r3, #28]
 800fb76:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7e:	d104      	bne.n	800fb8a <AirQuality+0x5e>
	{
		cli_printf(cli,"Calculating, try again later");
 800fb80:	491c      	ldr	r1, [pc, #112]	; (800fbf4 <AirQuality+0xc8>)
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7fe fe78 	bl	800e878 <cli_printf>
 800fb88:	e02c      	b.n	800fbe4 <AirQuality+0xb8>
	}
	else
	{
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 800fb8a:	4b19      	ldr	r3, [pc, #100]	; (800fbf0 <AirQuality+0xc4>)
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f0 fcf2 	bl	8000578 <__aeabi_f2d>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4917      	ldr	r1, [pc, #92]	; (800fbf8 <AirQuality+0xcc>)
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7fe fe6c 	bl	800e878 <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 800fba0:	4b13      	ldr	r3, [pc, #76]	; (800fbf0 <AirQuality+0xc4>)
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f0 fce7 	bl	8000578 <__aeabi_f2d>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	4913      	ldr	r1, [pc, #76]	; (800fbfc <AirQuality+0xd0>)
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f7fe fe61 	bl	800e878 <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 800fbb6:	4b0e      	ldr	r3, [pc, #56]	; (800fbf0 <AirQuality+0xc4>)
 800fbb8:	699b      	ldr	r3, [r3, #24]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f0 fcdc 	bl	8000578 <__aeabi_f2d>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	490e      	ldr	r1, [pc, #56]	; (800fc00 <AirQuality+0xd4>)
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7fe fe56 	bl	800e878 <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <AirQuality+0xc4>)
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7f0 fcd1 	bl	8000578 <__aeabi_f2d>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	490a      	ldr	r1, [pc, #40]	; (800fc04 <AirQuality+0xd8>)
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f7fe fe4b 	bl	800e878 <cli_printf>
	}


}
 800fbe2:	bf00      	nop
 800fbe4:	bf00      	nop
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	08020948 	.word	0x08020948
 800fbf0:	200014a8 	.word	0x200014a8
 800fbf4:	08020964 	.word	0x08020964
 800fbf8:	08020984 	.word	0x08020984
 800fbfc:	08020990 	.word	0x08020990
 800fc00:	080209a0 	.word	0x080209a0
 800fc04:	080209b0 	.word	0x080209b0

0800fc08 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 800fc14:	4808      	ldr	r0, [pc, #32]	; (800fc38 <BattVolt+0x30>)
 800fc16:	f002 f9e7 	bl	8011fe8 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 800fc1a:	4b08      	ldr	r3, [pc, #32]	; (800fc3c <BattVolt+0x34>)
 800fc1c:	6a1b      	ldr	r3, [r3, #32]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7f0 fcaa 	bl	8000578 <__aeabi_f2d>
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	4905      	ldr	r1, [pc, #20]	; (800fc40 <BattVolt+0x38>)
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f7fe fe24 	bl	800e878 <cli_printf>


}
 800fc30:	bf00      	nop
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	200014c8 	.word	0x200014c8
 800fc3c:	200014a8 	.word	0x200014a8
 800fc40:	080209c0 	.word	0x080209c0

0800fc44 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 800fc44:	b5b0      	push	{r4, r5, r7, lr}
 800fc46:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800fc4a:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 800fc4c:	f000 fcd1 	bl	80105f2 <embeddedCliNewDefault>
 800fc50:	4603      	mov	r3, r0
 800fc52:	4aac      	ldr	r2, [pc, #688]	; (800ff04 <initializeEmbeddedCli+0x2c0>)
 800fc54:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 800fc56:	4bac      	ldr	r3, [pc, #688]	; (800ff08 <initializeEmbeddedCli+0x2c4>)
 800fc58:	f507 7411 	add.w	r4, r7, #580	; 0x244
 800fc5c:	461d      	mov	r5, r3
 800fc5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc62:	682b      	ldr	r3, [r5, #0]
 800fc64:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 800fc66:	4ba9      	ldr	r3, [pc, #676]	; (800ff0c <initializeEmbeddedCli+0x2c8>)
 800fc68:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800fc6c:	461d      	mov	r5, r3
 800fc6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc72:	682b      	ldr	r3, [r5, #0]
 800fc74:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature", .help =
 800fc76:	4ba6      	ldr	r3, [pc, #664]	; (800ff10 <initializeEmbeddedCli+0x2cc>)
 800fc78:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 800fc7c:	461d      	mov	r5, r3
 800fc7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc82:	682b      	ldr	r3, [r5, #0]
 800fc84:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 800fc86:	4ba3      	ldr	r3, [pc, #652]	; (800ff14 <initializeEmbeddedCli+0x2d0>)
 800fc88:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800fc8c:	461d      	mov	r5, r3
 800fc8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc92:	682b      	ldr	r3, [r5, #0]
 800fc94:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 800fc96:	4ba0      	ldr	r3, [pc, #640]	; (800ff18 <initializeEmbeddedCli+0x2d4>)
 800fc98:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 800fc9c:	461d      	mov	r5, r3
 800fc9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 800fca6:	4b9d      	ldr	r3, [pc, #628]	; (800ff1c <initializeEmbeddedCli+0x2d8>)
 800fca8:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 800fcac:	461d      	mov	r5, r3
 800fcae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcb2:	682b      	ldr	r3, [r5, #0]
 800fcb4:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 800fcb6:	4b9a      	ldr	r3, [pc, #616]	; (800ff20 <initializeEmbeddedCli+0x2dc>)
 800fcb8:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 800fcbc:	461d      	mov	r5, r3
 800fcbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 800fcc6:	4b97      	ldr	r3, [pc, #604]	; (800ff24 <initializeEmbeddedCli+0x2e0>)
 800fcc8:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800fccc:	461d      	mov	r5, r3
 800fcce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcd2:	682b      	ldr	r3, [r5, #0]
 800fcd4:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 800fcd6:	4b94      	ldr	r3, [pc, #592]	; (800ff28 <initializeEmbeddedCli+0x2e4>)
 800fcd8:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800fcdc:	461d      	mov	r5, r3
 800fcde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fce2:	682b      	ldr	r3, [r5, #0]
 800fce4:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 800fce6:	4b91      	ldr	r3, [pc, #580]	; (800ff2c <initializeEmbeddedCli+0x2e8>)
 800fce8:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 800fcec:	461d      	mov	r5, r3
 800fcee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcf2:	682b      	ldr	r3, [r5, #0]
 800fcf4:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 800fcf6:	4b8e      	ldr	r3, [pc, #568]	; (800ff30 <initializeEmbeddedCli+0x2ec>)
 800fcf8:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 800fcfc:	461d      	mov	r5, r3
 800fcfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd02:	682b      	ldr	r3, [r5, #0]
 800fd04:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 800fd06:	4b8b      	ldr	r3, [pc, #556]	; (800ff34 <initializeEmbeddedCli+0x2f0>)
 800fd08:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800fd0c:	461d      	mov	r5, r3
 800fd0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd12:	682b      	ldr	r3, [r5, #0]
 800fd14:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 800fd16:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd1e:	4a86      	ldr	r2, [pc, #536]	; (800ff38 <initializeEmbeddedCli+0x2f4>)
 800fd20:	461c      	mov	r4, r3
 800fd22:	4615      	mov	r5, r2
 800fd24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd28:	682b      	ldr	r3, [r5, #0]
 800fd2a:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 800fd2c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800fd34:	4a81      	ldr	r2, [pc, #516]	; (800ff3c <initializeEmbeddedCli+0x2f8>)
 800fd36:	461c      	mov	r4, r3
 800fd38:	4615      	mov	r5, r2
 800fd3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd3e:	682b      	ldr	r3, [r5, #0]
 800fd40:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 800fd42:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd4a:	4a7d      	ldr	r2, [pc, #500]	; (800ff40 <initializeEmbeddedCli+0x2fc>)
 800fd4c:	461c      	mov	r4, r3
 800fd4e:	4615      	mov	r5, r2
 800fd50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd54:	682b      	ldr	r3, [r5, #0]
 800fd56:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 800fd58:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800fd60:	4a78      	ldr	r2, [pc, #480]	; (800ff44 <initializeEmbeddedCli+0x300>)
 800fd62:	461c      	mov	r4, r3
 800fd64:	4615      	mov	r5, r2
 800fd66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd6a:	682b      	ldr	r3, [r5, #0]
 800fd6c:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 800fd6e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800fd76:	4a74      	ldr	r2, [pc, #464]	; (800ff48 <initializeEmbeddedCli+0x304>)
 800fd78:	461c      	mov	r4, r3
 800fd7a:	4615      	mov	r5, r2
 800fd7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 800fd84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd88:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800fd8c:	4a6f      	ldr	r2, [pc, #444]	; (800ff4c <initializeEmbeddedCli+0x308>)
 800fd8e:	461c      	mov	r4, r3
 800fd90:	4615      	mov	r5, r2
 800fd92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 800fd9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fda2:	4a6b      	ldr	r2, [pc, #428]	; (800ff50 <initializeEmbeddedCli+0x30c>)
 800fda4:	461c      	mov	r4, r3
 800fda6:	4615      	mov	r5, r2
 800fda8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 800fdb0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fdb4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800fdb8:	4a66      	ldr	r2, [pc, #408]	; (800ff54 <initializeEmbeddedCli+0x310>)
 800fdba:	461c      	mov	r4, r3
 800fdbc:	4615      	mov	r5, r2
 800fdbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdc2:	682b      	ldr	r3, [r5, #0]
 800fdc4:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 800fdc6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fdca:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fdce:	4a62      	ldr	r2, [pc, #392]	; (800ff58 <initializeEmbeddedCli+0x314>)
 800fdd0:	461c      	mov	r4, r3
 800fdd2:	4615      	mov	r5, r2
 800fdd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 800fddc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fde0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800fde4:	4a5d      	ldr	r2, [pc, #372]	; (800ff5c <initializeEmbeddedCli+0x318>)
 800fde6:	461c      	mov	r4, r3
 800fde8:	4615      	mov	r5, r2
 800fdea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 800fdf2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fdf6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800fdfa:	4a59      	ldr	r2, [pc, #356]	; (800ff60 <initializeEmbeddedCli+0x31c>)
 800fdfc:	461c      	mov	r4, r3
 800fdfe:	4615      	mov	r5, r2
 800fe00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 800fe08:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800fe10:	4a54      	ldr	r2, [pc, #336]	; (800ff64 <initializeEmbeddedCli+0x320>)
 800fe12:	461c      	mov	r4, r3
 800fe14:	4615      	mov	r5, r2
 800fe16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 800fe1e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe22:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800fe26:	4a50      	ldr	r2, [pc, #320]	; (800ff68 <initializeEmbeddedCli+0x324>)
 800fe28:	461c      	mov	r4, r3
 800fe2a:	4615      	mov	r5, r2
 800fe2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 800fe34:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe38:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800fe3c:	4a4b      	ldr	r2, [pc, #300]	; (800ff6c <initializeEmbeddedCli+0x328>)
 800fe3e:	461c      	mov	r4, r3
 800fe40:	4615      	mov	r5, r2
 800fe42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe46:	682b      	ldr	r3, [r5, #0]
 800fe48:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 800fe4a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe4e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fe52:	4a47      	ldr	r2, [pc, #284]	; (800ff70 <initializeEmbeddedCli+0x32c>)
 800fe54:	461c      	mov	r4, r3
 800fe56:	4615      	mov	r5, r2
 800fe58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 800fe60:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe64:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe68:	4a42      	ldr	r2, [pc, #264]	; (800ff74 <initializeEmbeddedCli+0x330>)
 800fe6a:	461c      	mov	r4, r3
 800fe6c:	4615      	mov	r5, r2
 800fe6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe72:	682b      	ldr	r3, [r5, #0]
 800fe74:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 800fe76:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fe7e:	4a3e      	ldr	r2, [pc, #248]	; (800ff78 <initializeEmbeddedCli+0x334>)
 800fe80:	461c      	mov	r4, r3
 800fe82:	4615      	mov	r5, r2
 800fe84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-volt", .help =
 800fe8c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fe90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800fe94:	4a39      	ldr	r2, [pc, #228]	; (800ff7c <initializeEmbeddedCli+0x338>)
 800fe96:	461c      	mov	r4, r3
 800fe98:	4615      	mov	r5, r2
 800fe9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe9e:	682b      	ldr	r3, [r5, #0]
 800fea0:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 800fea2:	4b18      	ldr	r3, [pc, #96]	; (800ff04 <initializeEmbeddedCli+0x2c0>)
 800fea4:	681c      	ldr	r4, [r3, #0]
 800fea6:	466a      	mov	r2, sp
 800fea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800feac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800feb4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800feb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800feba:	4620      	mov	r0, r4
 800febc:	f000 fc57 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 800fec0:	4b10      	ldr	r3, [pc, #64]	; (800ff04 <initializeEmbeddedCli+0x2c0>)
 800fec2:	681c      	ldr	r4, [r3, #0]
 800fec4:	466a      	mov	r2, sp
 800fec6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800feca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fece:	e882 0003 	stmia.w	r2, {r0, r1}
 800fed2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800fed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fed8:	4620      	mov	r0, r4
 800feda:	f000 fc48 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <initializeEmbeddedCli+0x2c0>)
 800fee0:	681c      	ldr	r4, [r3, #0]
 800fee2:	466a      	mov	r2, sp
 800fee4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feec:	e882 0003 	stmia.w	r2, {r0, r1}
 800fef0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800fef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fef6:	4620      	mov	r0, r4
 800fef8:	f000 fc39 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 800fefc:	4b01      	ldr	r3, [pc, #4]	; (800ff04 <initializeEmbeddedCli+0x2c0>)
 800fefe:	681c      	ldr	r4, [r3, #0]
 800ff00:	466a      	mov	r2, sp
 800ff02:	e03d      	b.n	800ff80 <initializeEmbeddedCli+0x33c>
 800ff04:	20001a84 	.word	0x20001a84
 800ff08:	080209d8 	.word	0x080209d8
 800ff0c:	080209ec 	.word	0x080209ec
 800ff10:	08020a00 	.word	0x08020a00
 800ff14:	08020a14 	.word	0x08020a14
 800ff18:	08020a28 	.word	0x08020a28
 800ff1c:	08020a3c 	.word	0x08020a3c
 800ff20:	08020a50 	.word	0x08020a50
 800ff24:	08020a64 	.word	0x08020a64
 800ff28:	08020a78 	.word	0x08020a78
 800ff2c:	08020a8c 	.word	0x08020a8c
 800ff30:	08020aa0 	.word	0x08020aa0
 800ff34:	08020ab4 	.word	0x08020ab4
 800ff38:	08020ac8 	.word	0x08020ac8
 800ff3c:	08020adc 	.word	0x08020adc
 800ff40:	08020af0 	.word	0x08020af0
 800ff44:	08020b04 	.word	0x08020b04
 800ff48:	08020b18 	.word	0x08020b18
 800ff4c:	08020b2c 	.word	0x08020b2c
 800ff50:	08020b40 	.word	0x08020b40
 800ff54:	08020b54 	.word	0x08020b54
 800ff58:	08020b68 	.word	0x08020b68
 800ff5c:	08020b7c 	.word	0x08020b7c
 800ff60:	08020b90 	.word	0x08020b90
 800ff64:	08020ba4 	.word	0x08020ba4
 800ff68:	08020bb8 	.word	0x08020bb8
 800ff6c:	08020bcc 	.word	0x08020bcc
 800ff70:	08020be0 	.word	0x08020be0
 800ff74:	08020bf4 	.word	0x08020bf4
 800ff78:	08020c08 	.word	0x08020c08
 800ff7c:	08020c1c 	.word	0x08020c1c
 800ff80:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800ff84:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff88:	e882 0003 	stmia.w	r2, {r0, r1}
 800ff8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800ff90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff92:	4620      	mov	r0, r4
 800ff94:	f000 fbeb 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 800ff98:	4bd6      	ldr	r3, [pc, #856]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 800ff9a:	681c      	ldr	r4, [r3, #0]
 800ff9c:	466a      	mov	r2, sp
 800ff9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ffa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffa6:	e882 0003 	stmia.w	r2, {r0, r1}
 800ffaa:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800ffae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f000 fbdc 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 800ffb6:	4bcf      	ldr	r3, [pc, #828]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 800ffb8:	681c      	ldr	r4, [r3, #0]
 800ffba:	466a      	mov	r2, sp
 800ffbc:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800ffc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffc4:	e882 0003 	stmia.w	r2, {r0, r1}
 800ffc8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ffcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f000 fbcd 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 800ffd4:	4bc7      	ldr	r3, [pc, #796]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 800ffd6:	681c      	ldr	r4, [r3, #0]
 800ffd8:	466a      	mov	r2, sp
 800ffda:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800ffde:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffe2:	e882 0003 	stmia.w	r2, {r0, r1}
 800ffe6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ffea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffec:	4620      	mov	r0, r4
 800ffee:	f000 fbbe 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 800fff2:	4bc0      	ldr	r3, [pc, #768]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 800fff4:	681c      	ldr	r4, [r3, #0]
 800fff6:	466a      	mov	r2, sp
 800fff8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800fffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010000:	e882 0003 	stmia.w	r2, {r0, r1}
 8010004:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8010008:	cb0e      	ldmia	r3, {r1, r2, r3}
 801000a:	4620      	mov	r0, r4
 801000c:	f000 fbaf 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8010010:	4bb8      	ldr	r3, [pc, #736]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010012:	681c      	ldr	r4, [r3, #0]
 8010014:	466a      	mov	r2, sp
 8010016:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801001a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801001e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010022:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8010026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010028:	4620      	mov	r0, r4
 801002a:	f000 fba0 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 801002e:	4bb1      	ldr	r3, [pc, #708]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010030:	681c      	ldr	r4, [r3, #0]
 8010032:	466a      	mov	r2, sp
 8010034:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010038:	e893 0003 	ldmia.w	r3, {r0, r1}
 801003c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010040:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010046:	4620      	mov	r0, r4
 8010048:	f000 fb91 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 801004c:	4ba9      	ldr	r3, [pc, #676]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 801004e:	681c      	ldr	r4, [r3, #0]
 8010050:	466a      	mov	r2, sp
 8010052:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8010056:	e893 0003 	ldmia.w	r3, {r0, r1}
 801005a:	e882 0003 	stmia.w	r2, {r0, r1}
 801005e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010064:	4620      	mov	r0, r4
 8010066:	f000 fb82 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 801006a:	4ba2      	ldr	r3, [pc, #648]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 801006c:	681c      	ldr	r4, [r3, #0]
 801006e:	466a      	mov	r2, sp
 8010070:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010074:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010078:	e882 0003 	stmia.w	r2, {r0, r1}
 801007c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010082:	4620      	mov	r0, r4
 8010084:	f000 fb73 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8010088:	4b9a      	ldr	r3, [pc, #616]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 801008a:	681c      	ldr	r4, [r3, #0]
 801008c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010094:	466d      	mov	r5, sp
 8010096:	f103 020c 	add.w	r2, r3, #12
 801009a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801009e:	e885 0003 	stmia.w	r5, {r0, r1}
 80100a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 fb62 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 80100aa:	4b92      	ldr	r3, [pc, #584]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80100ac:	681c      	ldr	r4, [r3, #0]
 80100ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80100b6:	466d      	mov	r5, sp
 80100b8:	f103 020c 	add.w	r2, r3, #12
 80100bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80100c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100c6:	4620      	mov	r0, r4
 80100c8:	f000 fb51 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 80100cc:	4b89      	ldr	r3, [pc, #548]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80100ce:	681c      	ldr	r4, [r3, #0]
 80100d0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80100d8:	466d      	mov	r5, sp
 80100da:	f103 020c 	add.w	r2, r3, #12
 80100de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80100e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 fb40 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 80100ee:	4b81      	ldr	r3, [pc, #516]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80100f0:	681c      	ldr	r4, [r3, #0]
 80100f2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80100fa:	466d      	mov	r5, sp
 80100fc:	f103 020c 	add.w	r2, r3, #12
 8010100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010104:	e885 0003 	stmia.w	r5, {r0, r1}
 8010108:	cb0e      	ldmia	r3, {r1, r2, r3}
 801010a:	4620      	mov	r0, r4
 801010c:	f000 fb2f 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010110:	4b78      	ldr	r3, [pc, #480]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010112:	681c      	ldr	r4, [r3, #0]
 8010114:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010118:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801011c:	466d      	mov	r5, sp
 801011e:	f103 020c 	add.w	r2, r3, #12
 8010122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010126:	e885 0003 	stmia.w	r5, {r0, r1}
 801012a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801012c:	4620      	mov	r0, r4
 801012e:	f000 fb1e 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010132:	4b70      	ldr	r3, [pc, #448]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010134:	681c      	ldr	r4, [r3, #0]
 8010136:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801013a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801013e:	466d      	mov	r5, sp
 8010140:	f103 020c 	add.w	r2, r3, #12
 8010144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010148:	e885 0003 	stmia.w	r5, {r0, r1}
 801014c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801014e:	4620      	mov	r0, r4
 8010150:	f000 fb0d 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010154:	4b67      	ldr	r3, [pc, #412]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010156:	681c      	ldr	r4, [r3, #0]
 8010158:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801015c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010160:	466d      	mov	r5, sp
 8010162:	f103 020c 	add.w	r2, r3, #12
 8010166:	e892 0003 	ldmia.w	r2, {r0, r1}
 801016a:	e885 0003 	stmia.w	r5, {r0, r1}
 801016e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fafc 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8010176:	4b5f      	ldr	r3, [pc, #380]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010178:	681c      	ldr	r4, [r3, #0]
 801017a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801017e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010182:	466d      	mov	r5, sp
 8010184:	f103 020c 	add.w	r2, r3, #12
 8010188:	e892 0003 	ldmia.w	r2, {r0, r1}
 801018c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010192:	4620      	mov	r0, r4
 8010194:	f000 faeb 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010198:	4b56      	ldr	r3, [pc, #344]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 801019a:	681c      	ldr	r4, [r3, #0]
 801019c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80101a0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80101a4:	466d      	mov	r5, sp
 80101a6:	f103 020c 	add.w	r2, r3, #12
 80101aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80101b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101b4:	4620      	mov	r0, r4
 80101b6:	f000 fada 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 80101ba:	4b4e      	ldr	r3, [pc, #312]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80101bc:	681c      	ldr	r4, [r3, #0]
 80101be:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80101c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80101c6:	466d      	mov	r5, sp
 80101c8:	f103 020c 	add.w	r2, r3, #12
 80101cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80101d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 fac9 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 80101dc:	4b45      	ldr	r3, [pc, #276]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80101de:	681c      	ldr	r4, [r3, #0]
 80101e0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80101e4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80101e8:	466d      	mov	r5, sp
 80101ea:	f103 020c 	add.w	r2, r3, #12
 80101ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80101f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 fab8 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 80101fe:	4b3d      	ldr	r3, [pc, #244]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010200:	681c      	ldr	r4, [r3, #0]
 8010202:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010206:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801020a:	466d      	mov	r5, sp
 801020c:	f103 020c 	add.w	r2, r3, #12
 8010210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010214:	e885 0003 	stmia.w	r5, {r0, r1}
 8010218:	cb0e      	ldmia	r3, {r1, r2, r3}
 801021a:	4620      	mov	r0, r4
 801021c:	f000 faa7 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010220:	4b34      	ldr	r3, [pc, #208]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010222:	681c      	ldr	r4, [r3, #0]
 8010224:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010228:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801022c:	466d      	mov	r5, sp
 801022e:	f103 020c 	add.w	r2, r3, #12
 8010232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010236:	e885 0003 	stmia.w	r5, {r0, r1}
 801023a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801023c:	4620      	mov	r0, r4
 801023e:	f000 fa96 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010242:	4b2c      	ldr	r3, [pc, #176]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010244:	681c      	ldr	r4, [r3, #0]
 8010246:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801024a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801024e:	466d      	mov	r5, sp
 8010250:	f103 020c 	add.w	r2, r3, #12
 8010254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010258:	e885 0003 	stmia.w	r5, {r0, r1}
 801025c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801025e:	4620      	mov	r0, r4
 8010260:	f000 fa85 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010264:	4b23      	ldr	r3, [pc, #140]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010266:	681c      	ldr	r4, [r3, #0]
 8010268:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801026c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010270:	466d      	mov	r5, sp
 8010272:	f103 020c 	add.w	r2, r3, #12
 8010276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801027a:	e885 0003 	stmia.w	r5, {r0, r1}
 801027e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010280:	4620      	mov	r0, r4
 8010282:	f000 fa74 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010286:	4b1b      	ldr	r3, [pc, #108]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 8010288:	681c      	ldr	r4, [r3, #0]
 801028a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801028e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010292:	466d      	mov	r5, sp
 8010294:	f103 020c 	add.w	r2, r3, #12
 8010298:	e892 0003 	ldmia.w	r2, {r0, r1}
 801029c:	e885 0003 	stmia.w	r5, {r0, r1}
 80102a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 fa63 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 80102a8:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80102aa:	681c      	ldr	r4, [r3, #0]
 80102ac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80102b4:	466d      	mov	r5, sp
 80102b6:	f103 020c 	add.w	r2, r3, #12
 80102ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102be:	e885 0003 	stmia.w	r5, {r0, r1}
 80102c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102c4:	4620      	mov	r0, r4
 80102c6:	f000 fa52 	bl	801076e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 80102ca:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80102cc:	681c      	ldr	r4, [r3, #0]
 80102ce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80102d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80102d6:	466d      	mov	r5, sp
 80102d8:	f103 020c 	add.w	r2, r3, #12
 80102dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80102e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fa41 	bl	801076e <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 80102ec:	4b01      	ldr	r3, [pc, #4]	; (80102f4 <initializeEmbeddedCli+0x6b0>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	e002      	b.n	80102f8 <initializeEmbeddedCli+0x6b4>
 80102f2:	bf00      	nop
 80102f4:	20001a84 	.word	0x20001a84
 80102f8:	4a06      	ldr	r2, [pc, #24]	; (8010314 <initializeEmbeddedCli+0x6d0>)
 80102fa:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 80102fc:	4b06      	ldr	r3, [pc, #24]	; (8010318 <initializeEmbeddedCli+0x6d4>)
 80102fe:	2201      	movs	r2, #1
 8010300:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010302:	4b06      	ldr	r3, [pc, #24]	; (801031c <initializeEmbeddedCli+0x6d8>)
 8010304:	2200      	movs	r2, #0
 8010306:	701a      	strb	r2, [r3, #0]
}
 8010308:	bf00      	nop
 801030a:	f507 7716 	add.w	r7, r7, #600	; 0x258
 801030e:	46bd      	mov	sp, r7
 8010310:	bdb0      	pop	{r4, r5, r7, pc}
 8010312:	bf00      	nop
 8010314:	0800e84d 	.word	0x0800e84d
 8010318:	20001a91 	.word	0x20001a91
 801031c:	20001a92 	.word	0x20001a92

08010320 <console_process>:

void console_process(void) {
 8010320:	b580      	push	{r7, lr}
 8010322:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010324:	4b03      	ldr	r3, [pc, #12]	; (8010334 <console_process+0x14>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	4618      	mov	r0, r3
 801032a:	f000 f990 	bl	801064e <embeddedCliProcess>
}
 801032e:	bf00      	nop
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20001a84 	.word	0x20001a84

08010338 <console_uart_deinit>:



void console_uart_deinit()
{
 8010338:	b580      	push	{r7, lr}
 801033a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 801033c:	4803      	ldr	r0, [pc, #12]	; (801034c <console_uart_deinit+0x14>)
 801033e:	f7fa ffd2 	bl	800b2e6 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8010342:	4802      	ldr	r0, [pc, #8]	; (801034c <console_uart_deinit+0x14>)
 8010344:	f7f2 fee8 	bl	8003118 <HAL_UART_MspDeInit>
}
 8010348:	bf00      	nop
 801034a:	bd80      	pop	{r7, pc}
 801034c:	200019d4 	.word	0x200019d4

08010350 <console_uart_init>:
void console_uart_init()
{
 8010350:	b580      	push	{r7, lr}
 8010352:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010354:	4815      	ldr	r0, [pc, #84]	; (80103ac <console_uart_init+0x5c>)
 8010356:	f7fa ffc6 	bl	800b2e6 <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 801035a:	4b14      	ldr	r3, [pc, #80]	; (80103ac <console_uart_init+0x5c>)
 801035c:	4a14      	ldr	r2, [pc, #80]	; (80103b0 <console_uart_init+0x60>)
 801035e:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8010360:	4b12      	ldr	r3, [pc, #72]	; (80103ac <console_uart_init+0x5c>)
 8010362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010366:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010368:	4b10      	ldr	r3, [pc, #64]	; (80103ac <console_uart_init+0x5c>)
 801036a:	2200      	movs	r2, #0
 801036c:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 801036e:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <console_uart_init+0x5c>)
 8010370:	2200      	movs	r2, #0
 8010372:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8010374:	4b0d      	ldr	r3, [pc, #52]	; (80103ac <console_uart_init+0x5c>)
 8010376:	2200      	movs	r2, #0
 8010378:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 801037a:	4b0c      	ldr	r3, [pc, #48]	; (80103ac <console_uart_init+0x5c>)
 801037c:	220c      	movs	r2, #12
 801037e:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010380:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <console_uart_init+0x5c>)
 8010382:	2200      	movs	r2, #0
 8010384:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010386:	4b09      	ldr	r3, [pc, #36]	; (80103ac <console_uart_init+0x5c>)
 8010388:	2200      	movs	r2, #0
 801038a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 801038c:	4807      	ldr	r0, [pc, #28]	; (80103ac <console_uart_init+0x5c>)
 801038e:	f7fa ff5d 	bl	800b24c <HAL_UART_Init>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <console_uart_init+0x4c>
	  {
	    Error_Handler();
 8010398:	f7f2 fb9e 	bl	8002ad8 <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801039c:	2201      	movs	r2, #1
 801039e:	4905      	ldr	r1, [pc, #20]	; (80103b4 <console_uart_init+0x64>)
 80103a0:	4802      	ldr	r0, [pc, #8]	; (80103ac <console_uart_init+0x5c>)
 80103a2:	f7fb f861 	bl	800b468 <HAL_UART_Receive_IT>
}
 80103a6:	bf00      	nop
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	200019d4 	.word	0x200019d4
 80103b0:	40011000 	.word	0x40011000
 80103b4:	20001a90 	.word	0x20001a90

080103b8 <console_init>:

void console_init(void) {
 80103b8:	b580      	push	{r7, lr}
 80103ba:	af00      	add	r7, sp, #0
	console_uart_init();
 80103bc:	f7ff ffc8 	bl	8010350 <console_uart_init>
	initializeEmbeddedCli();
 80103c0:	f7ff fc40 	bl	800fc44 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80103c4:	2201      	movs	r2, #1
 80103c6:	4903      	ldr	r1, [pc, #12]	; (80103d4 <console_init+0x1c>)
 80103c8:	4803      	ldr	r0, [pc, #12]	; (80103d8 <console_init+0x20>)
 80103ca:	f7fb f84d 	bl	800b468 <HAL_UART_Receive_IT>
}
 80103ce:	bf00      	nop
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20001a90 	.word	0x20001a90
 80103d8:	200019d4 	.word	0x200019d4

080103dc <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 80103e0:	4b0e      	ldr	r3, [pc, #56]	; (801041c <embeddedCliDefaultConfig+0x40>)
 80103e2:	2240      	movs	r2, #64	; 0x40
 80103e4:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80103e6:	4b0d      	ldr	r3, [pc, #52]	; (801041c <embeddedCliDefaultConfig+0x40>)
 80103e8:	2240      	movs	r2, #64	; 0x40
 80103ea:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 80103ec:	4b0b      	ldr	r3, [pc, #44]	; (801041c <embeddedCliDefaultConfig+0x40>)
 80103ee:	2280      	movs	r2, #128	; 0x80
 80103f0:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80103f2:	4b0a      	ldr	r3, [pc, #40]	; (801041c <embeddedCliDefaultConfig+0x40>)
 80103f4:	2200      	movs	r2, #0
 80103f6:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 80103f8:	4b08      	ldr	r3, [pc, #32]	; (801041c <embeddedCliDefaultConfig+0x40>)
 80103fa:	2200      	movs	r2, #0
 80103fc:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 80103fe:	4b07      	ldr	r3, [pc, #28]	; (801041c <embeddedCliDefaultConfig+0x40>)
 8010400:	2232      	movs	r2, #50	; 0x32
 8010402:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010404:	4b05      	ldr	r3, [pc, #20]	; (801041c <embeddedCliDefaultConfig+0x40>)
 8010406:	2201      	movs	r2, #1
 8010408:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801040a:	4b04      	ldr	r3, [pc, #16]	; (801041c <embeddedCliDefaultConfig+0x40>)
 801040c:	4a04      	ldr	r2, [pc, #16]	; (8010420 <embeddedCliDefaultConfig+0x44>)
 801040e:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8010410:	4b02      	ldr	r3, [pc, #8]	; (801041c <embeddedCliDefaultConfig+0x40>)
}
 8010412:	4618      	mov	r0, r3
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr
 801041c:	20001a98 	.word	0x20001a98
 8010420:	08020c54 	.word	0x08020c54

08010424 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	895b      	ldrh	r3, [r3, #10]
 8010430:	2201      	movs	r2, #1
 8010432:	4413      	add	r3, r2
 8010434:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	889b      	ldrh	r3, [r3, #4]
 801043a:	3303      	adds	r3, #3
 801043c:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	88db      	ldrh	r3, [r3, #6]
 8010442:	3303      	adds	r3, #3
 8010444:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010446:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	891b      	ldrh	r3, [r3, #8]
 801044c:	3303      	adds	r3, #3
 801044e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010450:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010452:	89fa      	ldrh	r2, [r7, #14]
 8010454:	4613      	mov	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	3303      	adds	r3, #3
 801045e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010460:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8010462:	89fb      	ldrh	r3, [r7, #14]
 8010464:	3303      	adds	r3, #3
 8010466:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010468:	4413      	add	r3, r2
 801046a:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 801046c:	b29b      	uxth	r3, r3
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	b29b      	uxth	r3, r3
}
 8010472:	4618      	mov	r0, r3
 8010474:	3714      	adds	r7, #20
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 801047e:	b580      	push	{r7, lr}
 8010480:	b088      	sub	sp, #32
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	895b      	ldrh	r3, [r3, #10]
 801048e:	2201      	movs	r2, #1
 8010490:	4413      	add	r3, r2
 8010492:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff ffc5 	bl	8010424 <embeddedCliRequiredSize>
 801049a:	4603      	mov	r3, r0
 801049c:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 801049e:	2300      	movs	r3, #0
 80104a0:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10f      	bne.n	80104ca <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80104aa:	6938      	ldr	r0, [r7, #16]
 80104ac:	f00a fd8c 	bl	801afc8 <malloc>
 80104b0:	4603      	mov	r3, r0
 80104b2:	461a      	mov	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <embeddedCliNew+0x46>
            return NULL;
 80104c0:	2300      	movs	r3, #0
 80104c2:	e092      	b.n	80105ea <embeddedCliNew+0x16c>
        allocated = true;
 80104c4:	2301      	movs	r3, #1
 80104c6:	77fb      	strb	r3, [r7, #31]
 80104c8:	e007      	b.n	80104da <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8a1b      	ldrh	r3, [r3, #16]
 80104ce:	461a      	mov	r2, r3
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d901      	bls.n	80104da <embeddedCliNew+0x5c>
        return NULL;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e087      	b.n	80105ea <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 80104e0:	693a      	ldr	r2, [r7, #16]
 80104e2:	2100      	movs	r1, #0
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f00a fd9f 	bl	801b028 <memset>

    cli = (EmbeddedCli *) buf;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	3310      	adds	r3, #16
 80104f2:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3334      	adds	r3, #52	; 0x34
 80104fe:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	889b      	ldrh	r3, [r3, #4]
 8010510:	3303      	adds	r3, #3
 8010512:	f023 0303 	bic.w	r3, r3, #3
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	4413      	add	r3, r2
 801051a:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	68fa      	ldr	r2, [r7, #12]
 8010520:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	88db      	ldrh	r3, [r3, #6]
 8010526:	3303      	adds	r3, #3
 8010528:	f023 0303 	bic.w	r3, r3, #3
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8010538:	8afa      	ldrh	r2, [r7, #22]
 801053a:	4613      	mov	r3, r2
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	4413      	add	r3, r2
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	3303      	adds	r3, #3
 8010544:	f023 0303 	bic.w	r3, r3, #3
 8010548:	68fa      	ldr	r2, [r7, #12]
 801054a:	4413      	add	r3, r2
 801054c:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8010554:	8afb      	ldrh	r3, [r7, #22]
 8010556:	3303      	adds	r3, #3
 8010558:	f023 0303 	bic.w	r3, r3, #3
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	4413      	add	r3, r2
 8010560:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	891a      	ldrh	r2, [r3, #8]
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8010570:	7ffb      	ldrb	r3, [r7, #31]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d008      	beq.n	8010588 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801057c:	f043 0304 	orr.w	r3, r3, #4
 8010580:	b2da      	uxtb	r2, r3
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	7c9b      	ldrb	r3, [r3, #18]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d008      	beq.n	80105a2 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010596:	f043 0320 	orr.w	r3, r3, #32
 801059a:	b2da      	uxtb	r2, r3
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	889a      	ldrh	r2, [r3, #4]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2200      	movs	r2, #0
 80105ae:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2200      	movs	r2, #0
 80105b4:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	88da      	ldrh	r2, [r3, #6]
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	2200      	movs	r2, #0
 80105c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	895b      	ldrh	r3, [r3, #10]
 80105c8:	2201      	movs	r2, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 80105e2:	69b8      	ldr	r0, [r7, #24]
 80105e4:	f000 fc5e 	bl	8010ea4 <initInternalBindings>

    return cli;
 80105e8:	69bb      	ldr	r3, [r7, #24]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3720      	adds	r7, #32
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80105f2:	b580      	push	{r7, lr}
 80105f4:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80105f6:	f7ff fef1 	bl	80103dc <embeddedCliDefaultConfig>
 80105fa:	4603      	mov	r3, r0
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff ff3e 	bl	801047e <embeddedCliNew>
 8010602:	4603      	mov	r3, r0
}
 8010604:	4618      	mov	r0, r3
 8010606:	bd80      	pop	{r7, pc}

08010608 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	460b      	mov	r3, r1
 8010612:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	3310      	adds	r3, #16
 801061e:	78fa      	ldrb	r2, [r7, #3]
 8010620:	4611      	mov	r1, r2
 8010622:	4618      	mov	r0, r3
 8010624:	f000 ffe1 	bl	80115ea <fifoBufPush>
 8010628:	4603      	mov	r3, r0
 801062a:	f083 0301 	eor.w	r3, r3, #1
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d008      	beq.n	8010646 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801063a:	f043 0301 	orr.w	r3, r3, #1
 801063e:	b2da      	uxtb	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 8010646:	bf00      	nop
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 801064e:	b580      	push	{r7, lr}
 8010650:	b084      	sub	sp, #16
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 8083 	beq.w	8010766 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801066c:	f003 0302 	and.w	r3, r3, #2
 8010670:	2b00      	cmp	r3, #0
 8010672:	d155      	bne.n	8010720 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801067a:	f043 0302 	orr.w	r3, r3, #2
 801067e:	b2da      	uxtb	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 ff0b 	bl	80114a8 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010692:	e045      	b.n	8010720 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	3310      	adds	r3, #16
 8010698:	4618      	mov	r0, r3
 801069a:	f000 ff7e 	bl	801159a <fifoBufPop>
 801069e:	4603      	mov	r3, r0
 80106a0:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80106a8:	f003 0308 	and.w	r3, r3, #8
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d005      	beq.n	80106bc <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80106b0:	7afb      	ldrb	r3, [r7, #11]
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 fa17 	bl	8010ae8 <onEscapedInput>
 80106ba:	e02a      	b.n	8010712 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80106c2:	2b1b      	cmp	r3, #27
 80106c4:	d10c      	bne.n	80106e0 <embeddedCliProcess+0x92>
 80106c6:	7afb      	ldrb	r3, [r7, #11]
 80106c8:	2b5b      	cmp	r3, #91	; 0x5b
 80106ca:	d109      	bne.n	80106e0 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80106d2:	f043 0308 	orr.w	r3, r3, #8
 80106d6:	b2da      	uxtb	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80106de:	e018      	b.n	8010712 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80106e0:	7afb      	ldrb	r3, [r7, #11]
 80106e2:	4618      	mov	r0, r3
 80106e4:	f000 ff01 	bl	80114ea <isControlChar>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d005      	beq.n	80106fa <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80106ee:	7afb      	ldrb	r3, [r7, #11]
 80106f0:	4619      	mov	r1, r3
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 fa54 	bl	8010ba0 <onControlInput>
 80106f8:	e00b      	b.n	8010712 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80106fa:	7afb      	ldrb	r3, [r7, #11]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 ff14 	bl	801152a <isDisplayableChar>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d004      	beq.n	8010712 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8010708:	7afb      	ldrb	r3, [r7, #11]
 801070a:	4619      	mov	r1, r3
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fa17 	bl	8010b40 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 fdb1 	bl	801127a <printLiveAutocompletion>

        impl->lastChar = c;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	7afa      	ldrb	r2, [r7, #11]
 801071c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	3310      	adds	r3, #16
 8010724:	4618      	mov	r0, r3
 8010726:	f000 ff17 	bl	8011558 <fifoBufAvailable>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1b1      	bne.n	8010694 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	2b00      	cmp	r3, #0
 801073c:	d014      	beq.n	8010768 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2200      	movs	r2, #0
 8010742:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	8c12      	ldrh	r2, [r2, #32]
 801074c:	4413      	add	r3, r2
 801074e:	2200      	movs	r2, #0
 8010750:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010758:	f023 0301 	bic.w	r3, r3, #1
 801075c:	b2da      	uxtb	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010764:	e000      	b.n	8010768 <embeddedCliProcess+0x11a>
        return;
 8010766:	bf00      	nop
    }
}
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801076e:	b084      	sub	sp, #16
 8010770:	b4b0      	push	{r4, r5, r7}
 8010772:	b085      	sub	sp, #20
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801077c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801078e:	429a      	cmp	r2, r3
 8010790:	d101      	bne.n	8010796 <embeddedCliAddBinding+0x28>
        return false;
 8010792:	2300      	movs	r3, #0
 8010794:	e017      	b.n	80107c6 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801079e:	4619      	mov	r1, r3
 80107a0:	460b      	mov	r3, r1
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	4413      	add	r3, r2
 80107aa:	461d      	mov	r5, r3
 80107ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80107b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80107bc:	3301      	adds	r3, #1
 80107be:	b29a      	uxth	r2, r3
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 80107c4:	2301      	movs	r3, #1
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3714      	adds	r7, #20
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bcb0      	pop	{r4, r5, r7}
 80107ce:	b004      	add	sp, #16
 80107d0:	4770      	bx	lr
	...

080107d4 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d031      	beq.n	801084a <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80107f2:	f003 0310 	and.w	r3, r3, #16
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d102      	bne.n	8010800 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fe22 	bl	8011444 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8010800:	6839      	ldr	r1, [r7, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fe50 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8010808:	4b12      	ldr	r3, [pc, #72]	; (8010854 <embeddedCliPrint+0x80>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4619      	mov	r1, r3
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 fe4a 	bl	80114a8 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801081a:	f003 0310 	and.w	r3, r3, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	d114      	bne.n	801084c <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fe3d 	bl	80114a8 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	69db      	ldr	r3, [r3, #28]
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 fe37 	bl	80114a8 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	8c1a      	ldrh	r2, [r3, #32]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 fd19 	bl	801127a <printLiveAutocompletion>
 8010848:	e000      	b.n	801084c <embeddedCliPrint+0x78>
        return;
 801084a:	bf00      	nop
    }
}
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	2000005c 	.word	0x2000005c

08010858 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8010858:	b580      	push	{r7, lr}
 801085a:	b088      	sub	sp, #32
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d066      	beq.n	8010934 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8010866:	4b35      	ldr	r3, [pc, #212]	; (801093c <embeddedCliTokenizeArgs+0xe4>)
 8010868:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801086a:	2300      	movs	r3, #0
 801086c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801086e:	2300      	movs	r3, #0
 8010870:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 801087a:	e047      	b.n	801090c <embeddedCliTokenizeArgs+0xb4>
        ++i;
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	3301      	adds	r3, #1
 8010880:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8010882:	7fbb      	ldrb	r3, [r7, #30]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8010888:	2300      	movs	r3, #0
 801088a:	77bb      	strb	r3, [r7, #30]
 801088c:	e029      	b.n	80108e2 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801088e:	7cfb      	ldrb	r3, [r7, #19]
 8010890:	2b5c      	cmp	r3, #92	; 0x5c
 8010892:	d102      	bne.n	801089a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8010894:	2301      	movs	r3, #1
 8010896:	77bb      	strb	r3, [r7, #30]
            continue;
 8010898:	e038      	b.n	801090c <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801089a:	7cfb      	ldrb	r3, [r7, #19]
 801089c:	2b22      	cmp	r3, #34	; 0x22
 801089e:	d110      	bne.n	80108c2 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80108a0:	7ffb      	ldrb	r3, [r7, #31]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	bf14      	ite	ne
 80108a6:	2301      	movne	r3, #1
 80108a8:	2300      	moveq	r3, #0
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	f083 0301 	eor.w	r3, r3, #1
 80108b0:	b2db      	uxtb	r3, r3
 80108b2:	77fb      	strb	r3, [r7, #31]
 80108b4:	7ffb      	ldrb	r3, [r7, #31]
 80108b6:	f003 0301 	and.w	r3, r3, #1
 80108ba:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 80108bc:	2300      	movs	r3, #0
 80108be:	74fb      	strb	r3, [r7, #19]
 80108c0:	e00f      	b.n	80108e2 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 80108c2:	7ffb      	ldrb	r3, [r7, #31]
 80108c4:	f083 0301 	eor.w	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d009      	beq.n	80108e2 <embeddedCliTokenizeArgs+0x8a>
 80108ce:	7cfb      	ldrb	r3, [r7, #19]
 80108d0:	4619      	mov	r1, r3
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f00b fbce 	bl	801c074 <strchr>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80108de:	2300      	movs	r3, #0
 80108e0:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80108e2:	7cfb      	ldrb	r3, [r7, #19]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d109      	bne.n	80108fc <embeddedCliTokenizeArgs+0xa4>
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	dd0e      	ble.n	801090c <embeddedCliTokenizeArgs+0xb4>
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	3b01      	subs	r3, #1
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	4413      	add	r3, r2
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d007      	beq.n	801090c <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	4413      	add	r3, r2
 8010902:	7cfa      	ldrb	r2, [r7, #19]
 8010904:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	3301      	adds	r3, #1
 801090a:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4413      	add	r3, r2
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	74fb      	strb	r3, [r7, #19]
 8010916:	7cfb      	ldrb	r3, [r7, #19]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1af      	bne.n	801087c <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	4413      	add	r3, r2
 8010922:	2200      	movs	r2, #0
 8010924:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	3301      	adds	r3, #1
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	4413      	add	r3, r2
 801092e:	2200      	movs	r2, #0
 8010930:	701a      	strb	r2, [r3, #0]
 8010932:	e000      	b.n	8010936 <embeddedCliTokenizeArgs+0xde>
        return;
 8010934:	bf00      	nop
}
 8010936:	3720      	adds	r7, #32
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	08020c58 	.word	0x08020c58

08010940 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 801094c:	887b      	ldrh	r3, [r7, #2]
 801094e:	4619      	mov	r1, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 ff51 	bl	80117f8 <getTokenPosition>
 8010956:	4603      	mov	r3, r0
 8010958:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801095a:	89fb      	ldrh	r3, [r7, #14]
 801095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010960:	4293      	cmp	r3, r2
 8010962:	d003      	beq.n	801096c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8010964:	89fb      	ldrh	r3, [r7, #14]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	4413      	add	r3, r2
 801096a:	e000      	b.n	801096e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	460b      	mov	r3, r1
 8010980:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010982:	887b      	ldrh	r3, [r7, #2]
 8010984:	4619      	mov	r1, r3
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 ff36 	bl	80117f8 <getTokenPosition>
 801098c:	4603      	mov	r3, r0
 801098e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010990:	89fb      	ldrh	r3, [r7, #14]
 8010992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010996:	4293      	cmp	r3, r2
 8010998:	d003      	beq.n	80109a2 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801099a:	89fb      	ldrh	r3, [r7, #14]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	4413      	add	r3, r2
 80109a0:	e000      	b.n	80109a4 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d003      	beq.n	80109c2 <embeddedCliGetTokenCount+0x16>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d101      	bne.n	80109c6 <embeddedCliGetTokenCount+0x1a>
        return 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	e019      	b.n	80109fa <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80109ca:	2301      	movs	r3, #1
 80109cc:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	4413      	add	r3, r2
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d109      	bne.n	80109ee <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	3301      	adds	r3, #1
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	4413      	add	r3, r2
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d006      	beq.n	80109f6 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80109e8:	897b      	ldrh	r3, [r7, #10]
 80109ea:	3301      	adds	r3, #1
 80109ec:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	3301      	adds	r3, #1
 80109f2:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80109f4:	e7eb      	b.n	80109ce <embeddedCliGetTokenCount+0x22>
                break;
 80109f6:	bf00      	nop
    }

    return tokenCount;
 80109f8:	897b      	ldrh	r3, [r7, #10]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
	...

08010a08 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	899b      	ldrh	r3, [r3, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d05c      	beq.n	8010adc <navigateHistory+0xd4>
 8010a22:	78fb      	ldrb	r3, [r7, #3]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	895a      	ldrh	r2, [r3, #10]
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	899b      	ldrh	r3, [r3, #12]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d053      	beq.n	8010adc <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8010a34:	78fb      	ldrb	r3, [r7, #3]
 8010a36:	f083 0301 	eor.w	r3, r3, #1
 8010a3a:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d003      	beq.n	8010a48 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	895b      	ldrh	r3, [r3, #10]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d049      	beq.n	8010adc <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fcfb 	bl	8011444 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4619      	mov	r1, r3
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fd27 	bl	80114a8 <writeToOutput>

    if (navigateUp)
 8010a5a:	78fb      	ldrb	r3, [r7, #3]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d006      	beq.n	8010a6e <navigateHistory+0x66>
        ++impl->history.current;
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	895b      	ldrh	r3, [r3, #10]
 8010a64:	3301      	adds	r3, #1
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	815a      	strh	r2, [r3, #10]
 8010a6c:	e005      	b.n	8010a7a <navigateHistory+0x72>
    else
        --impl->history.current;
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	895b      	ldrh	r3, [r3, #10]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	895b      	ldrh	r3, [r3, #10]
 8010a82:	4619      	mov	r1, r3
 8010a84:	4610      	mov	r0, r2
 8010a86:	f000 fe3e 	bl	8011706 <historyGet>
 8010a8a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <navigateHistory+0x8e>
        item = "";
 8010a92:	4b14      	ldr	r3, [pc, #80]	; (8010ae4 <navigateHistory+0xdc>)
 8010a94:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8010a96:	6978      	ldr	r0, [r7, #20]
 8010a98:	f7ef fbac 	bl	80001f4 <strlen>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	69db      	ldr	r3, [r3, #28]
 8010aa4:	89fa      	ldrh	r2, [r7, #14]
 8010aa6:	6979      	ldr	r1, [r7, #20]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f00a fa95 	bl	801afd8 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	69da      	ldr	r2, [r3, #28]
 8010ab2:	89fb      	ldrh	r3, [r7, #14]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	89fa      	ldrh	r2, [r7, #14]
 8010abe:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	69db      	ldr	r3, [r3, #28]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 fcee 	bl	80114a8 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	8c1a      	ldrh	r2, [r3, #32]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fbd0 	bl	801127a <printLiveAutocompletion>
 8010ada:	e000      	b.n	8010ade <navigateHistory+0xd6>
        return;
 8010adc:	bf00      	nop
}
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	08020c5c 	.word	0x08020c5c

08010ae8 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8010afa:	78fb      	ldrb	r3, [r7, #3]
 8010afc:	2b3f      	cmp	r3, #63	; 0x3f
 8010afe:	d91b      	bls.n	8010b38 <onEscapedInput+0x50>
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	2b7e      	cmp	r3, #126	; 0x7e
 8010b04:	d818      	bhi.n	8010b38 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010b0c:	f023 0308 	bic.w	r3, r3, #8
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8010b18:	78fb      	ldrb	r3, [r7, #3]
 8010b1a:	2b41      	cmp	r3, #65	; 0x41
 8010b1c:	d002      	beq.n	8010b24 <onEscapedInput+0x3c>
 8010b1e:	78fb      	ldrb	r3, [r7, #3]
 8010b20:	2b42      	cmp	r3, #66	; 0x42
 8010b22:	d109      	bne.n	8010b38 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8010b24:	78fb      	ldrb	r3, [r7, #3]
 8010b26:	2b41      	cmp	r3, #65	; 0x41
 8010b28:	bf0c      	ite	eq
 8010b2a:	2301      	moveq	r3, #1
 8010b2c:	2300      	movne	r3, #0
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff ff68 	bl	8010a08 <navigateHistory>
        }
    }
}
 8010b38:	bf00      	nop
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	8c1b      	ldrh	r3, [r3, #32]
 8010b56:	3302      	adds	r3, #2
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	da1a      	bge.n	8010b96 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	69db      	ldr	r3, [r3, #28]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	8c12      	ldrh	r2, [r2, #32]
 8010b68:	4413      	add	r3, r2
 8010b6a:	78fa      	ldrb	r2, [r7, #3]
 8010b6c:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	8c1b      	ldrh	r3, [r3, #32]
 8010b72:	3301      	adds	r3, #1
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	69db      	ldr	r3, [r3, #28]
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	8c12      	ldrh	r2, [r2, #32]
 8010b82:	4413      	add	r3, r2
 8010b84:	2200      	movs	r2, #0
 8010b86:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	78fa      	ldrb	r2, [r7, #3]
 8010b8e:	4611      	mov	r1, r2
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	4798      	blx	r3
 8010b94:	e000      	b.n	8010b98 <onCharInput+0x58>
        return;
 8010b96:	bf00      	nop
}
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
	...

08010ba0 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010bb8:	2b0d      	cmp	r3, #13
 8010bba:	d102      	bne.n	8010bc2 <onControlInput+0x22>
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	2b0a      	cmp	r3, #10
 8010bc0:	d062      	beq.n	8010c88 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010bc8:	2b0a      	cmp	r3, #10
 8010bca:	d102      	bne.n	8010bd2 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8010bcc:	78fb      	ldrb	r3, [r7, #3]
 8010bce:	2b0d      	cmp	r3, #13
 8010bd0:	d05a      	beq.n	8010c88 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8010bd2:	78fb      	ldrb	r3, [r7, #3]
 8010bd4:	2b0d      	cmp	r3, #13
 8010bd6:	d002      	beq.n	8010bde <onControlInput+0x3e>
 8010bd8:	78fb      	ldrb	r3, [r7, #3]
 8010bda:	2b0a      	cmp	r3, #10
 8010bdc:	d126      	bne.n	8010c2c <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fba6 	bl	8011330 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8010be4:	4b2a      	ldr	r3, [pc, #168]	; (8010c90 <onControlInput+0xf0>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fc5c 	bl	80114a8 <writeToOutput>

        if (impl->cmdSize > 0)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	8c1b      	ldrh	r3, [r3, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <onControlInput+0x5e>
            parseCommand(cli);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f84b 	bl	8010c94 <parseCommand>
        impl->cmdSize = 0;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2200      	movs	r2, #0
 8010c02:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	69db      	ldr	r3, [r3, #28]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	8c12      	ldrh	r2, [r2, #32]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	2200      	movs	r2, #0
 8010c10:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2200      	movs	r2, #0
 8010c16:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fc3f 	bl	80114a8 <writeToOutput>
 8010c2a:	e02e      	b.n	8010c8a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8010c2c:	78fb      	ldrb	r3, [r7, #3]
 8010c2e:	2b08      	cmp	r3, #8
 8010c30:	d002      	beq.n	8010c38 <onControlInput+0x98>
 8010c32:	78fb      	ldrb	r3, [r7, #3]
 8010c34:	2b7f      	cmp	r3, #127	; 0x7f
 8010c36:	d120      	bne.n	8010c7a <onControlInput+0xda>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	8c1b      	ldrh	r3, [r3, #32]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d01c      	beq.n	8010c7a <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2108      	movs	r1, #8
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2120      	movs	r1, #32
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2108      	movs	r1, #8
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	8c1b      	ldrh	r3, [r3, #32]
 8010c62:	3b01      	subs	r3, #1
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	69db      	ldr	r3, [r3, #28]
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	8c12      	ldrh	r2, [r2, #32]
 8010c72:	4413      	add	r3, r2
 8010c74:	2200      	movs	r2, #0
 8010c76:	701a      	strb	r2, [r3, #0]
 8010c78:	e007      	b.n	8010c8a <onControlInput+0xea>
    } else if (c == '\t') {
 8010c7a:	78fb      	ldrb	r3, [r7, #3]
 8010c7c:	2b09      	cmp	r3, #9
 8010c7e:	d104      	bne.n	8010c8a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fb55 	bl	8011330 <onAutocompleteRequest>
 8010c86:	e000      	b.n	8010c8a <onControlInput+0xea>
        return;
 8010c88:	bf00      	nop
    }

}
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	2000005c 	.word	0x2000005c

08010c94 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8010c94:	b590      	push	{r4, r7, lr}
 8010c96:	b08f      	sub	sp, #60	; 0x3c
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8010ca8:	2300      	movs	r3, #0
 8010caa:	633b      	str	r3, [r7, #48]	; 0x30
 8010cac:	e00d      	b.n	8010cca <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8010cae:	69bb      	ldr	r3, [r7, #24]
 8010cb0:	69da      	ldr	r2, [r3, #28]
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	4413      	add	r3, r2
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b20      	cmp	r3, #32
 8010cba:	d003      	beq.n	8010cc4 <parseCommand+0x30>
            isEmpty = false;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8010cc2:	e008      	b.n	8010cd6 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	8c1b      	ldrh	r3, [r3, #32]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	dbeb      	blt.n	8010cae <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8010cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f040 80dc 	bne.w	8010e98 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	1d1a      	adds	r2, r3, #4
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	69db      	ldr	r3, [r3, #28]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	4610      	mov	r0, r2
 8010cec:	f000 fca7 	bl	801163e <historyPut>

    char *cmdName = NULL;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010cfe:	2300      	movs	r3, #0
 8010d00:	623b      	str	r3, [r7, #32]
 8010d02:	e030      	b.n	8010d66 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8010d04:	69bb      	ldr	r3, [r7, #24]
 8010d06:	69da      	ldr	r2, [r3, #28]
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	781b      	ldrb	r3, [r3, #0]
 8010d0e:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8010d10:	7dfb      	ldrb	r3, [r7, #23]
 8010d12:	2b20      	cmp	r3, #32
 8010d14:	d10f      	bne.n	8010d36 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d105      	bne.n	8010d28 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	69da      	ldr	r2, [r3, #28]
 8010d20:	6a3b      	ldr	r3, [r7, #32]
 8010d22:	4413      	add	r3, r2
 8010d24:	2200      	movs	r2, #0
 8010d26:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8010d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d018      	beq.n	8010d60 <parseCommand+0xcc>
                nameFinished = true;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d34:	e014      	b.n	8010d60 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8010d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	69da      	ldr	r2, [r3, #28]
 8010d40:	6a3b      	ldr	r3, [r7, #32]
 8010d42:	4413      	add	r3, r2
 8010d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d46:	e00b      	b.n	8010d60 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d108      	bne.n	8010d60 <parseCommand+0xcc>
 8010d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d004      	beq.n	8010d60 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	69da      	ldr	r2, [r3, #28]
 8010d5a:	6a3b      	ldr	r3, [r7, #32]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	3301      	adds	r3, #1
 8010d64:	623b      	str	r3, [r7, #32]
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	8c1b      	ldrh	r3, [r3, #32]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	dbc8      	blt.n	8010d04 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	69da      	ldr	r2, [r3, #28]
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	8c1b      	ldrh	r3, [r3, #32]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	4413      	add	r3, r2
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8010d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f000 8089 	beq.w	8010e9c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	61fb      	str	r3, [r7, #28]
 8010d8e:	e054      	b.n	8010e3a <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010d94:	69fa      	ldr	r2, [r7, #28]
 8010d96:	4613      	mov	r3, r2
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	440b      	add	r3, r1
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010da6:	f7ef fa1b 	bl	80001e0 <strcmp>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d141      	bne.n	8010e34 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	4613      	mov	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	440b      	add	r3, r1
 8010dc0:	691b      	ldr	r3, [r3, #16]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d040      	beq.n	8010e48 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010dca:	69fa      	ldr	r2, [r7, #28]
 8010dcc:	4613      	mov	r3, r2
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	4413      	add	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	440b      	add	r3, r1
 8010dd6:	7a1b      	ldrb	r3, [r3, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8010ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dde:	f7ff fd3b 	bl	8010858 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010de8:	f043 0310 	orr.w	r3, r3, #16
 8010dec:	b2da      	uxtb	r2, r3
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010df8:	69fa      	ldr	r2, [r7, #28]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	4413      	add	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	440b      	add	r3, r1
 8010e04:	691c      	ldr	r4, [r3, #16]
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010e0a:	69fa      	ldr	r2, [r7, #28]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4413      	add	r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	440b      	add	r3, r1
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010e26:	f023 0310 	bic.w	r3, r3, #16
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 8010e32:	e034      	b.n	8010e9e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	3301      	adds	r3, #1
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e3e:	461a      	mov	r2, r3
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	4293      	cmp	r3, r2
 8010e44:	dba4      	blt.n	8010d90 <parseCommand+0xfc>
 8010e46:	e000      	b.n	8010e4a <parseCommand+0x1b6>
                break;
 8010e48:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d01d      	beq.n	8010e8e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8010e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e54:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8010e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e58:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010e60:	f043 0310 	orr.w	r3, r3, #16
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	f107 020c 	add.w	r2, r7, #12
 8010e74:	4611      	mov	r1, r2
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010e80:	f023 0310 	bic.w	r3, r3, #16
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010e8c:	e007      	b.n	8010e9e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8010e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f913 	bl	80110bc <onUnknownCommand>
 8010e96:	e002      	b.n	8010e9e <parseCommand+0x20a>
        return;
 8010e98:	bf00      	nop
 8010e9a:	e000      	b.n	8010e9e <parseCommand+0x20a>
        return;
 8010e9c:	bf00      	nop
    }
}
 8010e9e:	373c      	adds	r7, #60	; 0x3c
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd90      	pop	{r4, r7, pc}

08010ea4 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8010ea4:	b5b0      	push	{r4, r5, r7, lr}
 8010ea6:	b08a      	sub	sp, #40	; 0x28
 8010ea8:	af02      	add	r7, sp, #8
 8010eaa:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8010eac:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <initInternalBindings+0x3c>)
 8010eae:	f107 040c 	add.w	r4, r7, #12
 8010eb2:	461d      	mov	r5, r3
 8010eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010eb8:	682b      	ldr	r3, [r5, #0]
 8010eba:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8010ebc:	466a      	mov	r2, sp
 8010ebe:	f107 0318 	add.w	r3, r7, #24
 8010ec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010ec6:	e882 0003 	stmia.w	r2, {r0, r1}
 8010eca:	f107 030c 	add.w	r3, r7, #12
 8010ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7ff fc4c 	bl	801076e <embeddedCliAddBinding>
}
 8010ed6:	bf00      	nop
 8010ed8:	3720      	adds	r7, #32
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bdb0      	pop	{r4, r5, r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	08020c60 	.word	0x08020c60

08010ee4 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08c      	sub	sp, #48	; 0x30
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10a      	bne.n	8010f14 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8010efe:	496b      	ldr	r1, [pc, #428]	; (80110ac <onHelp+0x1c8>)
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 fad1 	bl	80114a8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8010f06:	4b6a      	ldr	r3, [pc, #424]	; (80110b0 <onHelp+0x1cc>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f000 facb 	bl	80114a8 <writeToOutput>
        return;
 8010f12:	e0c8      	b.n	80110a6 <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8010f14:	68b8      	ldr	r0, [r7, #8]
 8010f16:	f7ff fd49 	bl	80109ac <embeddedCliGetTokenCount>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8010f1e:	8b7b      	ldrh	r3, [r7, #26]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d146      	bne.n	8010fb2 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010f24:	2300      	movs	r3, #0
 8010f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f28:	e03c      	b.n	8010fa4 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 8010f2a:	4962      	ldr	r1, [pc, #392]	; (80110b4 <onHelp+0x1d0>)
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f000 fabb 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	440b      	add	r3, r1
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4619      	mov	r1, r3
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f000 faae 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8010f4c:	4b58      	ldr	r3, [pc, #352]	; (80110b0 <onHelp+0x1cc>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4619      	mov	r1, r3
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f000 faa8 	bl	80114a8 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f5e:	4613      	mov	r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	4413      	add	r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	440b      	add	r3, r1
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d017      	beq.n	8010f9e <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2109      	movs	r1, #9
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f7e:	4613      	mov	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4413      	add	r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	440b      	add	r3, r1
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f000 fa8b 	bl	80114a8 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8010f92:	4b47      	ldr	r3, [pc, #284]	; (80110b0 <onHelp+0x1cc>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4619      	mov	r1, r3
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 fa85 	bl	80114a8 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010fa8:	461a      	mov	r2, r3
 8010faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fac:	4293      	cmp	r3, r2
 8010fae:	dbbc      	blt.n	8010f2a <onHelp+0x46>
 8010fb0:	e079      	b.n	80110a6 <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 8010fb2:	8b7b      	ldrh	r3, [r7, #26]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d16c      	bne.n	8011092 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	68b8      	ldr	r0, [r7, #8]
 8010fc0:	f7ff fcbe 	bl	8010940 <embeddedCliGetToken>
 8010fc4:	6178      	str	r0, [r7, #20]
        bool found = false;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010fcc:	2300      	movs	r3, #0
 8010fce:	623b      	str	r3, [r7, #32]
 8010fd0:	e020      	b.n	8011014 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010fd6:	6a3a      	ldr	r2, [r7, #32]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	4413      	add	r3, r2
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	440b      	add	r3, r1
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	6979      	ldr	r1, [r7, #20]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ef f8fa 	bl	80001e0 <strcmp>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10d      	bne.n	801100e <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010ff6:	6a3a      	ldr	r2, [r7, #32]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	4413      	add	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	440b      	add	r3, r1
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8011006:	2301      	movs	r3, #1
 8011008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 801100c:	e008      	b.n	8011020 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801100e:	6a3b      	ldr	r3, [r7, #32]
 8011010:	3301      	adds	r3, #1
 8011012:	623b      	str	r3, [r7, #32]
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011018:	461a      	mov	r2, r3
 801101a:	6a3b      	ldr	r3, [r7, #32]
 801101c:	4293      	cmp	r3, r2
 801101e:	dbd8      	blt.n	8010fd2 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 8011020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011024:	2b00      	cmp	r3, #0
 8011026:	d020      	beq.n	801106a <onHelp+0x186>
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	2b00      	cmp	r3, #0
 801102c:	d01d      	beq.n	801106a <onHelp+0x186>
            writeToOutput(cli, " * ");
 801102e:	4921      	ldr	r1, [pc, #132]	; (80110b4 <onHelp+0x1d0>)
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f000 fa39 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011036:	6979      	ldr	r1, [r7, #20]
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f000 fa35 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801103e:	4b1c      	ldr	r3, [pc, #112]	; (80110b0 <onHelp+0x1cc>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4619      	mov	r1, r3
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f000 fa2f 	bl	80114a8 <writeToOutput>
            cli->writeChar(cli, '\t');
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2109      	movs	r1, #9
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f000 fa26 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801105c:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <onHelp+0x1cc>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4619      	mov	r1, r3
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f000 fa20 	bl	80114a8 <writeToOutput>
 8011068:	e01d      	b.n	80110a6 <onHelp+0x1c2>
        } else if (found) {
 801106a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00a      	beq.n	8011088 <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8011072:	490e      	ldr	r1, [pc, #56]	; (80110ac <onHelp+0x1c8>)
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 fa17 	bl	80114a8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801107a:	4b0d      	ldr	r3, [pc, #52]	; (80110b0 <onHelp+0x1cc>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4619      	mov	r1, r3
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f000 fa11 	bl	80114a8 <writeToOutput>
 8011086:	e00e      	b.n	80110a6 <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 8011088:	6979      	ldr	r1, [r7, #20]
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	f000 f816 	bl	80110bc <onUnknownCommand>
 8011090:	e009      	b.n	80110a6 <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011092:	4909      	ldr	r1, [pc, #36]	; (80110b8 <onHelp+0x1d4>)
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f000 fa07 	bl	80114a8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 801109a:	4b05      	ldr	r3, [pc, #20]	; (80110b0 <onHelp+0x1cc>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4619      	mov	r1, r3
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f000 fa01 	bl	80114a8 <writeToOutput>
    }
}
 80110a6:	3730      	adds	r7, #48	; 0x30
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	08020c74 	.word	0x08020c74
 80110b0:	2000005c 	.word	0x2000005c
 80110b4:	08020c8c 	.word	0x08020c8c
 80110b8:	08020c90 	.word	0x08020c90

080110bc <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 80110c6:	490b      	ldr	r1, [pc, #44]	; (80110f4 <onUnknownCommand+0x38>)
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 f9ed 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, name);
 80110ce:	6839      	ldr	r1, [r7, #0]
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f000 f9e9 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 80110d6:	4908      	ldr	r1, [pc, #32]	; (80110f8 <onUnknownCommand+0x3c>)
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f9e5 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, lineBreak);
 80110de:	4b07      	ldr	r3, [pc, #28]	; (80110fc <onUnknownCommand+0x40>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4619      	mov	r1, r3
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 f9df 	bl	80114a8 <writeToOutput>
}
 80110ea:	bf00      	nop
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	08020cc0 	.word	0x08020cc0
 80110f8:	08020cd4 	.word	0x08020cd4
 80110fc:	2000005c 	.word	0x2000005c

08011100 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011100:	b580      	push	{r7, lr}
 8011102:	b08e      	sub	sp, #56	; 0x38
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 801110c:	2300      	movs	r3, #0
 801110e:	613b      	str	r3, [r7, #16]
 8011110:	2300      	movs	r3, #0
 8011112:	82bb      	strh	r3, [r7, #20]
 8011114:	2300      	movs	r3, #0
 8011116:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7ef f86b 	bl	80001f4 <strlen>
 801111e:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011126:	6a3b      	ldr	r3, [r7, #32]
 8011128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801112a:	2b00      	cmp	r3, #0
 801112c:	d002      	beq.n	8011134 <getAutocompletedCommand+0x34>
 801112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011130:	2b00      	cmp	r3, #0
 8011132:	d108      	bne.n	8011146 <getAutocompletedCommand+0x46>
        return cmd;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	461a      	mov	r2, r3
 8011138:	f107 0310 	add.w	r3, r7, #16
 801113c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011140:	e882 0003 	stmia.w	r2, {r0, r1}
 8011144:	e095      	b.n	8011272 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011146:	2300      	movs	r3, #0
 8011148:	637b      	str	r3, [r7, #52]	; 0x34
 801114a:	e083      	b.n	8011254 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011152:	4613      	mov	r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	440b      	add	r3, r1
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011160:	69f8      	ldr	r0, [r7, #28]
 8011162:	f7ef f847 	bl	80001f4 <strlen>
 8011166:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116e:	4413      	add	r3, r2
 8011170:	781a      	ldrb	r2, [r3, #0]
 8011172:	6a3b      	ldr	r3, [r7, #32]
 8011174:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011178:	440b      	add	r3, r1
 801117a:	f022 0201 	bic.w	r2, r2, #1
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011182:	69ba      	ldr	r2, [r7, #24]
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	429a      	cmp	r2, r3
 8011188:	d35e      	bcc.n	8011248 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 801118a:	2301      	movs	r3, #1
 801118c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011190:	2300      	movs	r3, #0
 8011192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011194:	e010      	b.n	80111b8 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119a:	4413      	add	r3, r2
 801119c:	781a      	ldrb	r2, [r3, #0]
 801119e:	69f9      	ldr	r1, [r7, #28]
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	440b      	add	r3, r1
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d003      	beq.n	80111b2 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80111aa:	2300      	movs	r3, #0
 80111ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 80111b0:	e006      	b.n	80111c0 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80111b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b4:	3301      	adds	r3, #1
 80111b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	429a      	cmp	r2, r3
 80111be:	d3ea      	bcc.n	8011196 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80111c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80111c4:	f083 0301 	eor.w	r3, r3, #1
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d13e      	bne.n	801124c <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d4:	4413      	add	r3, r2
 80111d6:	781a      	ldrb	r2, [r3, #0]
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80111dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111de:	440b      	add	r3, r1
 80111e0:	f042 0201 	orr.w	r2, r2, #1
 80111e4:	b2d2      	uxtb	r2, r2
 80111e6:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80111e8:	8afb      	ldrh	r3, [r7, #22]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d004      	beq.n	80111f8 <getAutocompletedCommand+0xf8>
 80111ee:	8abb      	ldrh	r3, [r7, #20]
 80111f0:	461a      	mov	r2, r3
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d202      	bcs.n	80111fe <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 80111fe:	8afb      	ldrh	r3, [r7, #22]
 8011200:	3301      	adds	r3, #1
 8011202:	b29b      	uxth	r3, r3
 8011204:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011206:	8afb      	ldrh	r3, [r7, #22]
 8011208:	2b01      	cmp	r3, #1
 801120a:	d102      	bne.n	8011212 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 801120c:	69fb      	ldr	r3, [r7, #28]
 801120e:	613b      	str	r3, [r7, #16]
            continue;
 8011210:	e01d      	b.n	801124e <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	8c1b      	ldrh	r3, [r3, #32]
 8011216:	62bb      	str	r3, [r7, #40]	; 0x28
 8011218:	e010      	b.n	801123c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 801121a:	693a      	ldr	r2, [r7, #16]
 801121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121e:	4413      	add	r3, r2
 8011220:	781a      	ldrb	r2, [r3, #0]
 8011222:	69f9      	ldr	r1, [r7, #28]
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	440b      	add	r3, r1
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d003      	beq.n	8011236 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	b29b      	uxth	r3, r3
 8011232:	82bb      	strh	r3, [r7, #20]
                break;
 8011234:	e00b      	b.n	801124e <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	3301      	adds	r3, #1
 801123a:	62bb      	str	r3, [r7, #40]	; 0x28
 801123c:	8abb      	ldrh	r3, [r7, #20]
 801123e:	461a      	mov	r2, r3
 8011240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011242:	4293      	cmp	r3, r2
 8011244:	d3e9      	bcc.n	801121a <getAutocompletedCommand+0x11a>
 8011246:	e002      	b.n	801124e <getAutocompletedCommand+0x14e>
            continue;
 8011248:	bf00      	nop
 801124a:	e000      	b.n	801124e <getAutocompletedCommand+0x14e>
            continue;
 801124c:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011250:	3301      	adds	r3, #1
 8011252:	637b      	str	r3, [r7, #52]	; 0x34
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011258:	461a      	mov	r2, r3
 801125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125c:	4293      	cmp	r3, r2
 801125e:	f6ff af75 	blt.w	801114c <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	461a      	mov	r2, r3
 8011266:	f107 0310 	add.w	r3, r7, #16
 801126a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801126e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	3738      	adds	r7, #56	; 0x38
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 801127a:	b580      	push	{r7, lr}
 801127c:	b088      	sub	sp, #32
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801128e:	f003 0320 	and.w	r3, r3, #32
 8011292:	2b00      	cmp	r3, #0
 8011294:	d048      	beq.n	8011328 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	69da      	ldr	r2, [r3, #28]
 801129a:	f107 030c 	add.w	r3, r7, #12
 801129e:	6879      	ldr	r1, [r7, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff ff2d 	bl	8011100 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80112a6:	8a7b      	ldrh	r3, [r7, #18]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	8c1b      	ldrh	r3, [r3, #32]
 80112b0:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	8c1b      	ldrh	r3, [r3, #32]
 80112b6:	61fb      	str	r3, [r7, #28]
 80112b8:	e00b      	b.n	80112d2 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	68f9      	ldr	r1, [r7, #12]
 80112c0:	69fa      	ldr	r2, [r7, #28]
 80112c2:	440a      	add	r2, r1
 80112c4:	7812      	ldrb	r2, [r2, #0]
 80112c6:	4611      	mov	r1, r2
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	3301      	adds	r3, #1
 80112d0:	61fb      	str	r3, [r7, #28]
 80112d2:	8a3b      	ldrh	r3, [r7, #16]
 80112d4:	461a      	mov	r2, r3
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	4293      	cmp	r3, r2
 80112da:	d3ee      	bcc.n	80112ba <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80112dc:	8a3b      	ldrh	r3, [r7, #16]
 80112de:	61bb      	str	r3, [r7, #24]
 80112e0:	e007      	b.n	80112f2 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2120      	movs	r1, #32
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	3301      	adds	r3, #1
 80112f0:	61bb      	str	r3, [r7, #24]
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80112f6:	461a      	mov	r2, r3
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d3f1      	bcc.n	80112e2 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 80112fe:	8a3a      	ldrh	r2, [r7, #16]
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	210d      	movs	r1, #13
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4619      	mov	r1, r3
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 f8c7 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	69db      	ldr	r3, [r3, #28]
 801131e:	4619      	mov	r1, r3
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 f8c1 	bl	80114a8 <writeToOutput>
 8011326:	e000      	b.n	801132a <printLiveAutocompletion+0xb0>
        return;
 8011328:	bf00      	nop
}
 801132a:	3720      	adds	r7, #32
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8011330:	b580      	push	{r7, lr}
 8011332:	b088      	sub	sp, #32
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	69da      	ldr	r2, [r3, #28]
 8011342:	f107 030c 	add.w	r3, r7, #12
 8011346:	6879      	ldr	r1, [r7, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fed9 	bl	8011100 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 801134e:	8a7b      	ldrh	r3, [r7, #18]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d071      	beq.n	8011438 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8011354:	8a7b      	ldrh	r3, [r7, #18]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d004      	beq.n	8011364 <onAutocompleteRequest+0x34>
 801135a:	8a3a      	ldrh	r2, [r7, #16]
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	8c1b      	ldrh	r3, [r3, #32]
 8011360:	429a      	cmp	r2, r3
 8011362:	d92a      	bls.n	80113ba <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	69db      	ldr	r3, [r3, #28]
 8011368:	68f9      	ldr	r1, [r7, #12]
 801136a:	8a3a      	ldrh	r2, [r7, #16]
 801136c:	4618      	mov	r0, r3
 801136e:	f009 fe33 	bl	801afd8 <memcpy>
        if (cmd.candidateCount == 1) {
 8011372:	8a7b      	ldrh	r3, [r7, #18]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d109      	bne.n	801138c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	69db      	ldr	r3, [r3, #28]
 801137c:	8a3a      	ldrh	r2, [r7, #16]
 801137e:	4413      	add	r3, r2
 8011380:	2220      	movs	r2, #32
 8011382:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011384:	8a3b      	ldrh	r3, [r7, #16]
 8011386:	3301      	adds	r3, #1
 8011388:	b29b      	uxth	r3, r3
 801138a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	8a3a      	ldrh	r2, [r7, #16]
 8011392:	4413      	add	r3, r2
 8011394:	2200      	movs	r2, #0
 8011396:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	69db      	ldr	r3, [r3, #28]
 801139c:	69ba      	ldr	r2, [r7, #24]
 801139e:	8c12      	ldrh	r2, [r2, #32]
 80113a0:	4413      	add	r3, r2
 80113a2:	4619      	mov	r1, r3
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 f87f 	bl	80114a8 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80113aa:	8a3a      	ldrh	r2, [r7, #16]
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	8c1a      	ldrh	r2, [r3, #32]
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 80113b8:	e03f      	b.n	801143a <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 f842 	bl	8011444 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80113c0:	2300      	movs	r3, #0
 80113c2:	61fb      	str	r3, [r7, #28]
 80113c4:	e021      	b.n	801140a <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	4413      	add	r3, r2
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 0301 	and.w	r3, r3, #1
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d014      	beq.n	8011402 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80113dc:	69fa      	ldr	r2, [r7, #28]
 80113de:	4613      	mov	r3, r2
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4413      	add	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	440b      	add	r3, r1
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80113ec:	6979      	ldr	r1, [r7, #20]
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 f85a 	bl	80114a8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80113f4:	4b12      	ldr	r3, [pc, #72]	; (8011440 <onAutocompleteRequest+0x110>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4619      	mov	r1, r3
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 f854 	bl	80114a8 <writeToOutput>
 8011400:	e000      	b.n	8011404 <onAutocompleteRequest+0xd4>
            continue;
 8011402:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	3301      	adds	r3, #1
 8011408:	61fb      	str	r3, [r7, #28]
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801140e:	461a      	mov	r2, r3
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	4293      	cmp	r3, r2
 8011414:	dbd7      	blt.n	80113c6 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4619      	mov	r1, r3
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f843 	bl	80114a8 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	69db      	ldr	r3, [r3, #28]
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f83d 	bl	80114a8 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	8c1a      	ldrh	r2, [r3, #32]
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	861a      	strh	r2, [r3, #48]	; 0x30
 8011436:	e000      	b.n	801143a <onAutocompleteRequest+0x10a>
        return;
 8011438:	bf00      	nop
}
 801143a:	3720      	adds	r7, #32
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	2000005c 	.word	0x2000005c

08011444 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8011444:	b590      	push	{r4, r7, lr}
 8011446:	b087      	sub	sp, #28
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011456:	461c      	mov	r4, r3
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4618      	mov	r0, r3
 801145e:	f7ee fec9 	bl	80001f4 <strlen>
 8011462:	4603      	mov	r3, r0
 8011464:	4423      	add	r3, r4
 8011466:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	210d      	movs	r1, #13
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011472:	2300      	movs	r3, #0
 8011474:	617b      	str	r3, [r7, #20]
 8011476:	e007      	b.n	8011488 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2120      	movs	r1, #32
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	3301      	adds	r3, #1
 8011486:	617b      	str	r3, [r7, #20]
 8011488:	697a      	ldr	r2, [r7, #20]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	429a      	cmp	r2, r3
 801148e:	d3f3      	bcc.n	8011478 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	210d      	movs	r1, #13
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	4798      	blx	r3
    impl->inputLineLength = 0;
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	2200      	movs	r2, #0
 801149e:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80114a0:	bf00      	nop
 80114a2:	371c      	adds	r7, #28
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd90      	pop	{r4, r7, pc}

080114a8 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80114b2:	6838      	ldr	r0, [r7, #0]
 80114b4:	f7ee fe9e 	bl	80001f4 <strlen>
 80114b8:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80114ba:	2300      	movs	r3, #0
 80114bc:	60fb      	str	r3, [r7, #12]
 80114be:	e00b      	b.n	80114d8 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	440a      	add	r2, r1
 80114ca:	7812      	ldrb	r2, [r2, #0]
 80114cc:	4611      	mov	r1, r2
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	3301      	adds	r3, #1
 80114d6:	60fb      	str	r3, [r7, #12]
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d3ef      	bcc.n	80114c0 <writeToOutput+0x18>
    }
}
 80114e0:	bf00      	nop
 80114e2:	bf00      	nop
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <isControlChar>:

static bool isControlChar(char c) {
 80114ea:	b480      	push	{r7}
 80114ec:	b083      	sub	sp, #12
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	4603      	mov	r3, r0
 80114f2:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80114f4:	79fb      	ldrb	r3, [r7, #7]
 80114f6:	2b0d      	cmp	r3, #13
 80114f8:	d00b      	beq.n	8011512 <isControlChar+0x28>
 80114fa:	79fb      	ldrb	r3, [r7, #7]
 80114fc:	2b0a      	cmp	r3, #10
 80114fe:	d008      	beq.n	8011512 <isControlChar+0x28>
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	2b08      	cmp	r3, #8
 8011504:	d005      	beq.n	8011512 <isControlChar+0x28>
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	2b09      	cmp	r3, #9
 801150a:	d002      	beq.n	8011512 <isControlChar+0x28>
 801150c:	79fb      	ldrb	r3, [r7, #7]
 801150e:	2b7f      	cmp	r3, #127	; 0x7f
 8011510:	d101      	bne.n	8011516 <isControlChar+0x2c>
 8011512:	2301      	movs	r3, #1
 8011514:	e000      	b.n	8011518 <isControlChar+0x2e>
 8011516:	2300      	movs	r3, #0
 8011518:	f003 0301 	and.w	r3, r3, #1
 801151c:	b2db      	uxtb	r3, r3
}
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	4603      	mov	r3, r0
 8011532:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8011534:	79fb      	ldrb	r3, [r7, #7]
 8011536:	2b1f      	cmp	r3, #31
 8011538:	d904      	bls.n	8011544 <isDisplayableChar+0x1a>
 801153a:	79fb      	ldrb	r3, [r7, #7]
 801153c:	2b7e      	cmp	r3, #126	; 0x7e
 801153e:	d801      	bhi.n	8011544 <isDisplayableChar+0x1a>
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <isDisplayableChar+0x1c>
 8011544:	2300      	movs	r3, #0
 8011546:	f003 0301 	and.w	r3, r3, #1
 801154a:	b2db      	uxtb	r3, r3
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	88da      	ldrh	r2, [r3, #6]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	889b      	ldrh	r3, [r3, #4]
 8011568:	429a      	cmp	r2, r3
 801156a:	d306      	bcc.n	801157a <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	88da      	ldrh	r2, [r3, #6]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	889b      	ldrh	r3, [r3, #4]
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	b29b      	uxth	r3, r3
 8011578:	e009      	b.n	801158e <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	891a      	ldrh	r2, [r3, #8]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	889b      	ldrh	r3, [r3, #4]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	88db      	ldrh	r3, [r3, #6]
 801158a:	4413      	add	r3, r2
 801158c:	b29b      	uxth	r3, r3
}
 801158e:	4618      	mov	r0, r3
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 801159a:	b480      	push	{r7}
 801159c:	b085      	sub	sp, #20
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80115a2:	2300      	movs	r3, #0
 80115a4:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	889a      	ldrh	r2, [r3, #4]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	88db      	ldrh	r3, [r3, #6]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d014      	beq.n	80115dc <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	8892      	ldrh	r2, [r2, #4]
 80115ba:	4413      	add	r3, r2
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	889b      	ldrh	r3, [r3, #4]
 80115c4:	3301      	adds	r3, #1
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	8912      	ldrh	r2, [r2, #8]
 80115cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80115d0:	fb01 f202 	mul.w	r2, r1, r2
 80115d4:	1a9b      	subs	r3, r3, r2
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr

080115ea <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80115ea:	b480      	push	{r7}
 80115ec:	b085      	sub	sp, #20
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
 80115f2:	460b      	mov	r3, r1
 80115f4:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	88db      	ldrh	r3, [r3, #6]
 80115fa:	3301      	adds	r3, #1
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	8912      	ldrh	r2, [r2, #8]
 8011602:	fbb3 f1f2 	udiv	r1, r3, r2
 8011606:	fb01 f202 	mul.w	r2, r1, r2
 801160a:	1a9b      	subs	r3, r3, r2
 801160c:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	889b      	ldrh	r3, [r3, #4]
 8011612:	89fa      	ldrh	r2, [r7, #14]
 8011614:	429a      	cmp	r2, r3
 8011616:	d00b      	beq.n	8011630 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	88d2      	ldrh	r2, [r2, #6]
 8011620:	4413      	add	r3, r2
 8011622:	78fa      	ldrb	r2, [r7, #3]
 8011624:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	89fa      	ldrh	r2, [r7, #14]
 801162a:	80da      	strh	r2, [r3, #6]
        return true;
 801162c:	2301      	movs	r3, #1
 801162e:	e000      	b.n	8011632 <fifoBufPush+0x48>
    }
    return false;
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	3714      	adds	r7, #20
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr

0801163e <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801163e:	b580      	push	{r7, lr}
 8011640:	b088      	sub	sp, #32
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011648:	6838      	ldr	r0, [r7, #0]
 801164a:	f7ee fdd3 	bl	80001f4 <strlen>
 801164e:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	889b      	ldrh	r3, [r3, #4]
 8011654:	461a      	mov	r2, r3
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	3301      	adds	r3, #1
 801165a:	429a      	cmp	r2, r3
 801165c:	d201      	bcs.n	8011662 <historyPut+0x24>
        return false;
 801165e:	2300      	movs	r3, #0
 8011660:	e04d      	b.n	80116fe <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 f86a 	bl	801173e <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 801166a:	e024      	b.n	80116b6 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	891b      	ldrh	r3, [r3, #8]
 8011670:	4619      	mov	r1, r3
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f847 	bl	8011706 <historyGet>
 8011678:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 801167a:	6978      	ldr	r0, [r7, #20]
 801167c:	f7ee fdba 	bl	80001f4 <strlen>
 8011680:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	697a      	ldr	r2, [r7, #20]
 8011688:	1ad3      	subs	r3, r2, r3
 801168a:	461a      	mov	r2, r3
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	4413      	add	r3, r2
 8011690:	3301      	adds	r3, #1
 8011692:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	889b      	ldrh	r3, [r3, #4]
 8011698:	461a      	mov	r2, r3
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	3301      	adds	r3, #1
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d20a      	bcs.n	80116c0 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	891b      	ldrh	r3, [r3, #8]
 80116ae:	3b01      	subs	r3, #1
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	891b      	ldrh	r3, [r3, #8]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1d6      	bne.n	801166c <historyPut+0x2e>
 80116be:	e000      	b.n	80116c2 <historyPut+0x84>
            break;
 80116c0:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	891b      	ldrh	r3, [r3, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00a      	beq.n	80116e0 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	3301      	adds	r3, #1
 80116d2:	18d0      	adds	r0, r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	69fa      	ldr	r2, [r7, #28]
 80116da:	4619      	mov	r1, r3
 80116dc:	f009 fc8a 	bl	801aff4 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6818      	ldr	r0, [r3, #0]
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	3301      	adds	r3, #1
 80116e8:	461a      	mov	r2, r3
 80116ea:	6839      	ldr	r1, [r7, #0]
 80116ec:	f009 fc74 	bl	801afd8 <memcpy>
    ++history->itemsCount;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	891b      	ldrh	r3, [r3, #8]
 80116f4:	3301      	adds	r3, #1
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	811a      	strh	r2, [r3, #8]

    return true;
 80116fc:	2301      	movs	r3, #1
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3720      	adds	r7, #32
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8011706:	b580      	push	{r7, lr}
 8011708:	b082      	sub	sp, #8
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	460b      	mov	r3, r1
 8011710:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8011712:	887b      	ldrh	r3, [r7, #2]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d004      	beq.n	8011722 <historyGet+0x1c>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	891b      	ldrh	r3, [r3, #8]
 801171c:	887a      	ldrh	r2, [r7, #2]
 801171e:	429a      	cmp	r2, r3
 8011720:	d901      	bls.n	8011726 <historyGet+0x20>
        return NULL;
 8011722:	2300      	movs	r3, #0
 8011724:	e007      	b.n	8011736 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	887a      	ldrh	r2, [r7, #2]
 801172c:	4611      	mov	r1, r2
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff f906 	bl	8010940 <embeddedCliGetToken>
 8011734:	4603      	mov	r3, r0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801173e:	b580      	push	{r7, lr}
 8011740:	b086      	sub	sp, #24
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d04c      	beq.n	80117e8 <historyRemove+0xaa>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	891b      	ldrh	r3, [r3, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d048      	beq.n	80117e8 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8011756:	2300      	movs	r3, #0
 8011758:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801175a:	2301      	movs	r3, #1
 801175c:	827b      	strh	r3, [r7, #18]
 801175e:	e013      	b.n	8011788 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	8a7a      	ldrh	r2, [r7, #18]
 8011766:	4611      	mov	r1, r2
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff f904 	bl	8010976 <embeddedCliGetTokenVariable>
 801176e:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8011770:	6839      	ldr	r1, [r7, #0]
 8011772:	6978      	ldr	r0, [r7, #20]
 8011774:	f7ee fd34 	bl	80001e0 <strcmp>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <historyRemove+0x56>
            break;
        }
        item = NULL;
 801177e:	2300      	movs	r3, #0
 8011780:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011782:	8a7b      	ldrh	r3, [r7, #18]
 8011784:	3301      	adds	r3, #1
 8011786:	827b      	strh	r3, [r7, #18]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	891b      	ldrh	r3, [r3, #8]
 801178c:	8a7a      	ldrh	r2, [r7, #18]
 801178e:	429a      	cmp	r2, r3
 8011790:	d9e6      	bls.n	8011760 <historyRemove+0x22>
 8011792:	e000      	b.n	8011796 <historyRemove+0x58>
            break;
 8011794:	bf00      	nop
    }
    if (item == NULL)
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d027      	beq.n	80117ec <historyRemove+0xae>
        return;

    --history->itemsCount;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	3b01      	subs	r3, #1
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80117a8:	8a7a      	ldrh	r2, [r7, #18]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	891b      	ldrh	r3, [r3, #8]
 80117ae:	3301      	adds	r3, #1
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d01d      	beq.n	80117f0 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80117b4:	6978      	ldr	r0, [r7, #20]
 80117b6:	f7ee fd1d 	bl	80001f4 <strlen>
 80117ba:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	889b      	ldrh	r3, [r3, #4]
 80117c0:	4619      	mov	r1, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	3301      	adds	r3, #1
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	441a      	add	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	1acb      	subs	r3, r1, r3
 80117d2:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3301      	adds	r3, #1
 80117d8:	697a      	ldr	r2, [r7, #20]
 80117da:	4413      	add	r3, r2
 80117dc:	68ba      	ldr	r2, [r7, #8]
 80117de:	4619      	mov	r1, r3
 80117e0:	6978      	ldr	r0, [r7, #20]
 80117e2:	f009 fc07 	bl	801aff4 <memmove>
 80117e6:	e004      	b.n	80117f2 <historyRemove+0xb4>
        return;
 80117e8:	bf00      	nop
 80117ea:	e002      	b.n	80117f2 <historyRemove+0xb4>
        return;
 80117ec:	bf00      	nop
 80117ee:	e000      	b.n	80117f2 <historyRemove+0xb4>
        return;
 80117f0:	bf00      	nop
}
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d002      	beq.n	8011810 <getTokenPosition+0x18>
 801180a:	887b      	ldrh	r3, [r7, #2]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8011810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011814:	e028      	b.n	8011868 <getTokenPosition+0x70>
    uint16_t i = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 801181a:	2301      	movs	r3, #1
 801181c:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801181e:	89ba      	ldrh	r2, [r7, #12]
 8011820:	887b      	ldrh	r3, [r7, #2]
 8011822:	429a      	cmp	r2, r3
 8011824:	d013      	beq.n	801184e <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8011826:	89fb      	ldrh	r3, [r7, #14]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	4413      	add	r3, r2
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d109      	bne.n	8011846 <getTokenPosition+0x4e>
            ++tokenCount;
 8011832:	89bb      	ldrh	r3, [r7, #12]
 8011834:	3301      	adds	r3, #1
 8011836:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8011838:	89fb      	ldrh	r3, [r7, #14]
 801183a:	3301      	adds	r3, #1
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	4413      	add	r3, r2
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d005      	beq.n	8011852 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8011846:	89fb      	ldrh	r3, [r7, #14]
 8011848:	3301      	adds	r3, #1
 801184a:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 801184c:	e7e7      	b.n	801181e <getTokenPosition+0x26>
            break;
 801184e:	bf00      	nop
 8011850:	e000      	b.n	8011854 <getTokenPosition+0x5c>
                break;
 8011852:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8011854:	89fb      	ldrh	r3, [r7, #14]
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	4413      	add	r3, r2
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <getTokenPosition+0x6c>
        return i;
 8011860:	89fb      	ldrh	r3, [r7, #14]
 8011862:	e001      	b.n	8011868 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8011864:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011868:	4618      	mov	r0, r3
 801186a:	3714      	adds	r7, #20
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011878:	4904      	ldr	r1, [pc, #16]	; (801188c <MX_FATFS_Init+0x18>)
 801187a:	4805      	ldr	r0, [pc, #20]	; (8011890 <MX_FATFS_Init+0x1c>)
 801187c:	f007 fefa 	bl	8019674 <FATFS_LinkDriver>
 8011880:	4603      	mov	r3, r0
 8011882:	461a      	mov	r2, r3
 8011884:	4b03      	ldr	r3, [pc, #12]	; (8011894 <MX_FATFS_Init+0x20>)
 8011886:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011888:	bf00      	nop
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20001ab0 	.word	0x20001ab0
 8011890:	08021548 	.word	0x08021548
 8011894:	20001aac 	.word	0x20001aac

08011898 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801189c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801189e:	4618      	mov	r0, r3
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80118b2:	f000 f86b 	bl	801198c <BSP_SD_IsDetected>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d001      	beq.n	80118c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	e005      	b.n	80118cc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80118c0:	4804      	ldr	r0, [pc, #16]	; (80118d4 <BSP_SD_Init+0x2c>)
 80118c2:	f7f7 fc9a 	bl	80091fa <HAL_SD_Init>
 80118c6:	4603      	mov	r3, r0
 80118c8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80118ca:	79fb      	ldrb	r3, [r7, #7]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20001818 	.word	0x20001818

080118d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b088      	sub	sp, #32
 80118dc:	af02      	add	r7, sp, #8
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80118e6:	2300      	movs	r3, #0
 80118e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	68f9      	ldr	r1, [r7, #12]
 80118f4:	4806      	ldr	r0, [pc, #24]	; (8011910 <BSP_SD_ReadBlocks+0x38>)
 80118f6:	f7f7 fd31 	bl	800935c <HAL_SD_ReadBlocks>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011900:	2301      	movs	r3, #1
 8011902:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011904:	7dfb      	ldrb	r3, [r7, #23]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	20001818 	.word	0x20001818

08011914 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b088      	sub	sp, #32
 8011918:	af02      	add	r7, sp, #8
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011922:	2300      	movs	r3, #0
 8011924:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	68ba      	ldr	r2, [r7, #8]
 801192e:	68f9      	ldr	r1, [r7, #12]
 8011930:	4806      	ldr	r0, [pc, #24]	; (801194c <BSP_SD_WriteBlocks+0x38>)
 8011932:	f7f7 fef1 	bl	8009718 <HAL_SD_WriteBlocks>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011940:	7dfb      	ldrb	r3, [r7, #23]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3718      	adds	r7, #24
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	20001818 	.word	0x20001818

08011950 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011954:	4805      	ldr	r0, [pc, #20]	; (801196c <BSP_SD_GetCardState+0x1c>)
 8011956:	f7f8 fa35 	bl	8009dc4 <HAL_SD_GetCardState>
 801195a:	4603      	mov	r3, r0
 801195c:	2b04      	cmp	r3, #4
 801195e:	bf14      	ite	ne
 8011960:	2301      	movne	r3, #1
 8011962:	2300      	moveq	r3, #0
 8011964:	b2db      	uxtb	r3, r3
}
 8011966:	4618      	mov	r0, r3
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	20001818 	.word	0x20001818

08011970 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	4803      	ldr	r0, [pc, #12]	; (8011988 <BSP_SD_GetCardInfo+0x18>)
 801197c:	f7f8 f9f6 	bl	8009d6c <HAL_SD_GetCardInfo>
}
 8011980:	bf00      	nop
 8011982:	3708      	adds	r7, #8
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20001818 	.word	0x20001818

0801198c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011992:	2301      	movs	r3, #1
 8011994:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011996:	79fb      	ldrb	r3, [r7, #7]
 8011998:	b2db      	uxtb	r3, r3
}
 801199a:	4618      	mov	r0, r3
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
	...

080119a8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	4603      	mov	r3, r0
 80119b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80119b2:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <SD_CheckStatus+0x38>)
 80119b4:	2201      	movs	r2, #1
 80119b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80119b8:	f7ff ffca 	bl	8011950 <BSP_SD_GetCardState>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d107      	bne.n	80119d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80119c2:	4b07      	ldr	r3, [pc, #28]	; (80119e0 <SD_CheckStatus+0x38>)
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	f023 0301 	bic.w	r3, r3, #1
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	4b04      	ldr	r3, [pc, #16]	; (80119e0 <SD_CheckStatus+0x38>)
 80119d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80119d2:	4b03      	ldr	r3, [pc, #12]	; (80119e0 <SD_CheckStatus+0x38>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	b2db      	uxtb	r3, r3
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	20000060 	.word	0x20000060

080119e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80119ee:	4b0b      	ldr	r3, [pc, #44]	; (8011a1c <SD_initialize+0x38>)
 80119f0:	2201      	movs	r2, #1
 80119f2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80119f4:	f7ff ff58 	bl	80118a8 <BSP_SD_Init>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d107      	bne.n	8011a0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80119fe:	79fb      	ldrb	r3, [r7, #7]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff ffd1 	bl	80119a8 <SD_CheckStatus>
 8011a06:	4603      	mov	r3, r0
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <SD_initialize+0x38>)
 8011a0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011a0e:	4b03      	ldr	r3, [pc, #12]	; (8011a1c <SD_initialize+0x38>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	b2db      	uxtb	r3, r3
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	20000060 	.word	0x20000060

08011a20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011a2a:	79fb      	ldrb	r3, [r7, #7]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7ff ffbb 	bl	80119a8 <SD_CheckStatus>
 8011a32:	4603      	mov	r3, r0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60b9      	str	r1, [r7, #8]
 8011a44:	607a      	str	r2, [r7, #4]
 8011a46:	603b      	str	r3, [r7, #0]
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011a50:	f04f 33ff 	mov.w	r3, #4294967295
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	68b8      	ldr	r0, [r7, #8]
 8011a5a:	f7ff ff3d 	bl	80118d8 <BSP_SD_ReadBlocks>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d107      	bne.n	8011a74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011a64:	bf00      	nop
 8011a66:	f7ff ff73 	bl	8011950 <BSP_SD_GetCardState>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1fa      	bne.n	8011a66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3718      	adds	r7, #24
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b086      	sub	sp, #24
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	603b      	str	r3, [r7, #0]
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011a92:	f04f 33ff 	mov.w	r3, #4294967295
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	6879      	ldr	r1, [r7, #4]
 8011a9a:	68b8      	ldr	r0, [r7, #8]
 8011a9c:	f7ff ff3a 	bl	8011914 <BSP_SD_WriteBlocks>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d107      	bne.n	8011ab6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011aa6:	bf00      	nop
 8011aa8:	f7ff ff52 	bl	8011950 <BSP_SD_GetCardState>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d1fa      	bne.n	8011aa8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3718      	adds	r7, #24
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08c      	sub	sp, #48	; 0x30
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	603a      	str	r2, [r7, #0]
 8011aca:	71fb      	strb	r3, [r7, #7]
 8011acc:	460b      	mov	r3, r1
 8011ace:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011ad6:	4b25      	ldr	r3, [pc, #148]	; (8011b6c <SD_ioctl+0xac>)
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <SD_ioctl+0x28>
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	e03c      	b.n	8011b62 <SD_ioctl+0xa2>

  switch (cmd)
 8011ae8:	79bb      	ldrb	r3, [r7, #6]
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d834      	bhi.n	8011b58 <SD_ioctl+0x98>
 8011aee:	a201      	add	r2, pc, #4	; (adr r2, 8011af4 <SD_ioctl+0x34>)
 8011af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af4:	08011b05 	.word	0x08011b05
 8011af8:	08011b0d 	.word	0x08011b0d
 8011afc:	08011b25 	.word	0x08011b25
 8011b00:	08011b3f 	.word	0x08011b3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011b04:	2300      	movs	r3, #0
 8011b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011b0a:	e028      	b.n	8011b5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b0c:	f107 030c 	add.w	r3, r7, #12
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ff2d 	bl	8011970 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011b22:	e01c      	b.n	8011b5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b24:	f107 030c 	add.w	r3, r7, #12
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7ff ff21 	bl	8011970 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011b3c:	e00f      	b.n	8011b5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b3e:	f107 030c 	add.w	r3, r7, #12
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ff ff14 	bl	8011970 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	0a5a      	lsrs	r2, r3, #9
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011b56:	e002      	b.n	8011b5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011b58:	2304      	movs	r3, #4
 8011b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3730      	adds	r7, #48	; 0x30
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	20000060 	.word	0x20000060

08011b70 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 8011b70:	b480      	push	{r7}
 8011b72:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8011b74:	4b03      	ldr	r3, [pc, #12]	; (8011b84 <RtcInt+0x14>)
 8011b76:	2201      	movs	r2, #1
 8011b78:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8011b7a:	bf00      	nop
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	20000061 	.word	0x20000061

08011b88 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b088      	sub	sp, #32
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8011b90:	f107 030c 	add.w	r3, r7, #12
 8011b94:	4619      	mov	r1, r3
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 f8c8 	bl	8011d2c <Parse_Date>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8011ba0:	7ffb      	ldrb	r3, [r7, #31]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d10c      	bne.n	8011bc0 <Set_Date+0x38>
		sDate.Date = date[0];
 8011ba6:	7b3b      	ldrb	r3, [r7, #12]
 8011ba8:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8011baa:	7b7b      	ldrb	r3, [r7, #13]
 8011bac:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8011bae:	7bbb      	ldrb	r3, [r7, #14]
 8011bb0:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011bb2:	f107 0318 	add.w	r3, r7, #24
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	4619      	mov	r1, r3
 8011bba:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <Set_Date+0x48>)
 8011bbc:	f7f6 fffa 	bl	8008bb4 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8011bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011bc4:	f7f1 fcf8 	bl	80035b8 <HAL_Delay>
}
 8011bc8:	bf00      	nop
 8011bca:	3720      	adds	r7, #32
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	200017f8 	.word	0x200017f8

08011bd4 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b092      	sub	sp, #72	; 0x48
 8011bd8:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 8011bda:	4b38      	ldr	r3, [pc, #224]	; (8011cbc <Rtc_set_alarm+0xe8>)
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d068      	beq.n	8011cb4 <Rtc_set_alarm+0xe0>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011be6:	2200      	movs	r2, #0
 8011be8:	4619      	mov	r1, r3
 8011bea:	4835      	ldr	r0, [pc, #212]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011bec:	f7f6 ff84 	bl	8008af8 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	4831      	ldr	r0, [pc, #196]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011bfa:	f7f7 f85f 	bl	8008cbc <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8011bfe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	4b2f      	ldr	r3, [pc, #188]	; (8011cc4 <Rtc_set_alarm+0xf0>)
 8011c06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	4413      	add	r3, r2
 8011c0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 8011c12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c16:	2b3b      	cmp	r3, #59	; 0x3b
 8011c18:	d912      	bls.n	8011c40 <Rtc_set_alarm+0x6c>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8011c1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c1e:	4a29      	ldr	r2, [pc, #164]	; (8011cc4 <Rtc_set_alarm+0xf0>)
 8011c20:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8011c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c28:	fb01 f202 	mul.w	r2, r1, r2
 8011c2c:	1a9b      	subs	r3, r3, r2
 8011c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	if(minute == 0)
 8011c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d102      	bne.n	8011c40 <Rtc_set_alarm+0x6c>
    	{
    		minute = 1;
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	}
    }

      RTC_AlarmTypeDef sAlarm = {0};
 8011c40:	1d3b      	adds	r3, r7, #4
 8011c42:	2228      	movs	r2, #40	; 0x28
 8011c44:	2100      	movs	r1, #0
 8011c46:	4618      	mov	r0, r3
 8011c48:	f009 f9ee 	bl	801b028 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8011c50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011c60:	2300      	movs	r3, #0
 8011c62:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011c64:	2300      	movs	r3, #0
 8011c66:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8011c68:	4b17      	ldr	r3, [pc, #92]	; (8011cc8 <Rtc_set_alarm+0xf4>)
 8011c6a:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8011c70:	2300      	movs	r3, #0
 8011c72:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8011c74:	2301      	movs	r3, #1
 8011c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8011c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8011c80:	1d3b      	adds	r3, r7, #4
 8011c82:	2200      	movs	r2, #0
 8011c84:	4619      	mov	r1, r3
 8011c86:	480e      	ldr	r0, [pc, #56]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011c88:	f7f7 f868 	bl	8008d5c <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8011c8c:	4b0c      	ldr	r3, [pc, #48]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	689a      	ldr	r2, [r3, #8]
 8011c92:	4b0b      	ldr	r3, [pc, #44]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011c9a:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8011c9c:	4b08      	ldr	r3, [pc, #32]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <Rtc_set_alarm+0xec>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8011cac:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8011cae:	4b03      	ldr	r3, [pc, #12]	; (8011cbc <Rtc_set_alarm+0xe8>)
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8011cb4:	bf00      	nop
 8011cb6:	3748      	adds	r7, #72	; 0x48
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	20000061 	.word	0x20000061
 8011cc0:	200017f8 	.word	0x200017f8
 8011cc4:	20001310 	.word	0x20001310
 8011cc8:	80800080 	.word	0x80800080

08011ccc <Set_Time>:
void Set_Time(char *Timebuffer) {
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08c      	sub	sp, #48	; 0x30
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8011cd4:	f107 030c 	add.w	r3, r7, #12
 8011cd8:	4619      	mov	r1, r3
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 f890 	bl	8011e00 <Parse_Time>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8011ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d113      	bne.n	8011d16 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8011cee:	7b3b      	ldrb	r3, [r7, #12]
 8011cf0:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8011cf2:	7b7b      	ldrb	r3, [r7, #13]
 8011cf4:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8011cf6:	7bbb      	ldrb	r3, [r7, #14]
 8011cf8:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8011d02:	f107 0318 	add.w	r3, r7, #24
 8011d06:	2200      	movs	r2, #0
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4807      	ldr	r0, [pc, #28]	; (8011d28 <Set_Time+0x5c>)
 8011d0c:	f7f6 fe5a 	bl	80089c4 <HAL_RTC_SetTime>
 8011d10:	4603      	mov	r3, r0
 8011d12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 8011d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011d1a:	f7f1 fc4d 	bl	80035b8 <HAL_Delay>

}
 8011d1e:	bf00      	nop
 8011d20:	3730      	adds	r7, #48	; 0x30
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	200017f8 	.word	0x200017f8

08011d2c <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8011d3e:	492e      	ldr	r1, [pc, #184]	; (8011df8 <Parse_Date+0xcc>)
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f00a ffed 	bl	801cd20 <strtok>
 8011d46:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d14b      	bne.n	8011de6 <Parse_Date+0xba>
		{
			return 1;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e04d      	b.n	8011dee <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8011d52:	68b8      	ldr	r0, [r7, #8]
 8011d54:	f009 f898 	bl	801ae88 <atoi>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8011d5c:	89fb      	ldrh	r3, [r7, #14]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10a      	bne.n	8011d78 <Parse_Date+0x4c>
 8011d62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011d66:	2b1f      	cmp	r3, #31
 8011d68:	dc03      	bgt.n	8011d72 <Parse_Date+0x46>
 8011d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	dc02      	bgt.n	8011d78 <Parse_Date+0x4c>
			{
				val= 1;
 8011d72:	2301      	movs	r3, #1
 8011d74:	81bb      	strh	r3, [r7, #12]
 8011d76:	e028      	b.n	8011dca <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8011d78:	89fb      	ldrh	r3, [r7, #14]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d10a      	bne.n	8011d94 <Parse_Date+0x68>
 8011d7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011d82:	2b0c      	cmp	r3, #12
 8011d84:	dc03      	bgt.n	8011d8e <Parse_Date+0x62>
 8011d86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	dc02      	bgt.n	8011d94 <Parse_Date+0x68>
			{
				val= 1;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	81bb      	strh	r3, [r7, #12]
 8011d92:	e01a      	b.n	8011dca <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8011d94:	89fb      	ldrh	r3, [r7, #14]
 8011d96:	2b02      	cmp	r3, #2
 8011d98:	d112      	bne.n	8011dc0 <Parse_Date+0x94>
 8011d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011da2:	dd0d      	ble.n	8011dc0 <Parse_Date+0x94>
			{
				val=val%100;
 8011da4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011da8:	4a14      	ldr	r2, [pc, #80]	; (8011dfc <Parse_Date+0xd0>)
 8011daa:	fb82 1203 	smull	r1, r2, r2, r3
 8011dae:	1151      	asrs	r1, r2, #5
 8011db0:	17da      	asrs	r2, r3, #31
 8011db2:	1a8a      	subs	r2, r1, r2
 8011db4:	2164      	movs	r1, #100	; 0x64
 8011db6:	fb01 f202 	mul.w	r2, r1, r2
 8011dba:	1a9b      	subs	r3, r3, r2
 8011dbc:	81bb      	strh	r3, [r7, #12]
 8011dbe:	e004      	b.n	8011dca <Parse_Date+0x9e>
			}
			else if(i > 2)
 8011dc0:	89fb      	ldrh	r3, [r7, #14]
 8011dc2:	2b02      	cmp	r3, #2
 8011dc4:	d901      	bls.n	8011dca <Parse_Date+0x9e>
			{
				return 1;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e011      	b.n	8011dee <Parse_Date+0xc2>
			}


		   date[i] =val;
 8011dca:	89fb      	ldrh	r3, [r7, #14]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	4413      	add	r3, r2
 8011dd0:	89ba      	ldrh	r2, [r7, #12]
 8011dd2:	b2d2      	uxtb	r2, r2
 8011dd4:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8011dd6:	4908      	ldr	r1, [pc, #32]	; (8011df8 <Parse_Date+0xcc>)
 8011dd8:	2000      	movs	r0, #0
 8011dda:	f00a ffa1 	bl	801cd20 <strtok>
 8011dde:	60b8      	str	r0, [r7, #8]
		i++;
 8011de0:	89fb      	ldrh	r3, [r7, #14]
 8011de2:	3301      	adds	r3, #1
 8011de4:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1b2      	bne.n	8011d52 <Parse_Date+0x26>
	}

	}

	return 0;
 8011dec:	2300      	movs	r3, #0

}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	08020d08 	.word	0x08020d08
 8011dfc:	51eb851f 	.word	0x51eb851f

08011e00 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8011e12:	492a      	ldr	r1, [pc, #168]	; (8011ebc <Parse_Time+0xbc>)
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f00a ff83 	bl	801cd20 <strtok>
 8011e1a:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d143      	bne.n	8011eaa <Parse_Time+0xaa>
			{
				return 1;
 8011e22:	2301      	movs	r3, #1
 8011e24:	e045      	b.n	8011eb2 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8011e26:	68b8      	ldr	r0, [r7, #8]
 8011e28:	f009 f82e 	bl	801ae88 <atoi>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8011e30:	89fb      	ldrh	r3, [r7, #14]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10a      	bne.n	8011e4c <Parse_Time+0x4c>
 8011e36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e3a:	2b18      	cmp	r3, #24
 8011e3c:	dc03      	bgt.n	8011e46 <Parse_Time+0x46>
 8011e3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	da02      	bge.n	8011e4c <Parse_Time+0x4c>
				{
					val= 24;
 8011e46:	2318      	movs	r3, #24
 8011e48:	81bb      	strh	r3, [r7, #12]
 8011e4a:	e020      	b.n	8011e8e <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8011e4c:	89fb      	ldrh	r3, [r7, #14]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d10a      	bne.n	8011e68 <Parse_Time+0x68>
 8011e52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e56:	2b3b      	cmp	r3, #59	; 0x3b
 8011e58:	dc03      	bgt.n	8011e62 <Parse_Time+0x62>
 8011e5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	da02      	bge.n	8011e68 <Parse_Time+0x68>
				{
					val= 59;
 8011e62:	233b      	movs	r3, #59	; 0x3b
 8011e64:	81bb      	strh	r3, [r7, #12]
 8011e66:	e012      	b.n	8011e8e <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8011e68:	89fb      	ldrh	r3, [r7, #14]
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d10a      	bne.n	8011e84 <Parse_Time+0x84>
 8011e6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e72:	2b3b      	cmp	r3, #59	; 0x3b
 8011e74:	dc03      	bgt.n	8011e7e <Parse_Time+0x7e>
 8011e76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	da02      	bge.n	8011e84 <Parse_Time+0x84>
				{
					val=59;
 8011e7e:	233b      	movs	r3, #59	; 0x3b
 8011e80:	81bb      	strh	r3, [r7, #12]
 8011e82:	e004      	b.n	8011e8e <Parse_Time+0x8e>
				}
				else if(i > 2)
 8011e84:	89fb      	ldrh	r3, [r7, #14]
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d901      	bls.n	8011e8e <Parse_Time+0x8e>
				{
					return 1;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e011      	b.n	8011eb2 <Parse_Time+0xb2>
				}


				time[i] =val;
 8011e8e:	89fb      	ldrh	r3, [r7, #14]
 8011e90:	683a      	ldr	r2, [r7, #0]
 8011e92:	4413      	add	r3, r2
 8011e94:	89ba      	ldrh	r2, [r7, #12]
 8011e96:	b2d2      	uxtb	r2, r2
 8011e98:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8011e9a:	4908      	ldr	r1, [pc, #32]	; (8011ebc <Parse_Time+0xbc>)
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	f00a ff3f 	bl	801cd20 <strtok>
 8011ea2:	60b8      	str	r0, [r7, #8]
			i++;
 8011ea4:	89fb      	ldrh	r3, [r7, #14]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1ba      	bne.n	8011e26 <Parse_Time+0x26>
		}

		}

		return 0;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	08020d08 	.word	0x08020d08

08011ec0 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8011ecc:	78fb      	ldrb	r3, [r7, #3]
 8011ece:	091b      	lsrs	r3, r3, #4
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	4619      	mov	r1, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	1c5a      	adds	r2, r3, #1
 8011ed8:	607a      	str	r2, [r7, #4]
 8011eda:	4a08      	ldr	r2, [pc, #32]	; (8011efc <CharToHexasc+0x3c>)
 8011edc:	5c52      	ldrb	r2, [r2, r1]
 8011ede:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8011ee0:	78fb      	ldrb	r3, [r7, #3]
 8011ee2:	f003 030f 	and.w	r3, r3, #15
 8011ee6:	4a05      	ldr	r2, [pc, #20]	; (8011efc <CharToHexasc+0x3c>)
 8011ee8:	5cd2      	ldrb	r2, [r2, r3]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	701a      	strb	r2, [r3, #0]
}
 8011eee:	bf00      	nop
 8011ef0:	370c      	adds	r7, #12
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	0802155c 	.word	0x0802155c

08011f00 <adc_InitOneShotMode>:
#define adc_Disable() HAL_ADC_DeInit(&hadc1)

#define ratio 1.27  //r1+r2/r2 465k/365k

static void adc_InitOneShotMode ()
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b088      	sub	sp, #32
 8011f04:	af00      	add	r7, sp, #0
	adc_Disable();
 8011f06:	4830      	ldr	r0, [pc, #192]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f08:	f7f1 fc01 	bl	800370e <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8011f0c:	f107 0314 	add.w	r3, r7, #20
 8011f10:	2200      	movs	r2, #0
 8011f12:	601a      	str	r2, [r3, #0]
 8011f14:	605a      	str	r2, [r3, #4]
 8011f16:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8011f18:	4b2b      	ldr	r3, [pc, #172]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f1a:	4a2c      	ldr	r2, [pc, #176]	; (8011fcc <adc_InitOneShotMode+0xcc>)
 8011f1c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011f1e:	4b2a      	ldr	r3, [pc, #168]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011f24:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011f26:	4b28      	ldr	r3, [pc, #160]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8011f2c:	4b26      	ldr	r3, [pc, #152]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f2e:	2200      	movs	r2, #0
 8011f30:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8011f32:	4b25      	ldr	r3, [pc, #148]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f34:	2200      	movs	r2, #0
 8011f36:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011f38:	4b23      	ldr	r3, [pc, #140]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011f40:	4b21      	ldr	r3, [pc, #132]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011f46:	4b20      	ldr	r3, [pc, #128]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f48:	4a21      	ldr	r2, [pc, #132]	; (8011fd0 <adc_InitOneShotMode+0xd0>)
 8011f4a:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011f4c:	4b1e      	ldr	r3, [pc, #120]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f4e:	2200      	movs	r2, #0
 8011f50:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8011f52:	4b1d      	ldr	r3, [pc, #116]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f54:	2201      	movs	r2, #1
 8011f56:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8011f58:	4b1b      	ldr	r3, [pc, #108]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011f60:	4b19      	ldr	r3, [pc, #100]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f62:	2201      	movs	r2, #1
 8011f64:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011f66:	4818      	ldr	r0, [pc, #96]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f68:	f7f1 fb8e 	bl	8003688 <HAL_ADC_Init>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8011f72:	f7f0 fdb1 	bl	8002ad8 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8011f76:	2300      	movs	r3, #0
 8011f78:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8011f7a:	f107 0314 	add.w	r3, r7, #20
 8011f7e:	4619      	mov	r1, r3
 8011f80:	4811      	ldr	r0, [pc, #68]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011f82:	f7f1 ff95 	bl	8003eb0 <HAL_ADCEx_MultiModeConfigChannel>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d001      	beq.n	8011f90 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8011f8c:	f7f0 fda4 	bl	8002ad8 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8011f90:	1d3b      	adds	r3, r7, #4
 8011f92:	2200      	movs	r2, #0
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	605a      	str	r2, [r3, #4]
 8011f98:	609a      	str	r2, [r3, #8]
 8011f9a:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8011f9c:	230a      	movs	r3, #10
 8011f9e:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8011fa4:	2302      	movs	r3, #2
 8011fa6:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011fac:	1d3b      	adds	r3, r7, #4
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4805      	ldr	r0, [pc, #20]	; (8011fc8 <adc_InitOneShotMode+0xc8>)
 8011fb2:	f7f1 fd5f 	bl	8003a74 <HAL_ADC_ConfigChannel>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8011fbc:	f7f0 fd8c 	bl	8002ad8 <Error_Handler>
		  }



}
 8011fc0:	bf00      	nop
 8011fc2:	3720      	adds	r7, #32
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	2000175c 	.word	0x2000175c
 8011fcc:	40012000 	.word	0x40012000
 8011fd0:	0f000001 	.word	0x0f000001

08011fd4 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8011fd8:	4802      	ldr	r0, [pc, #8]	; (8011fe4 <adc_Getval+0x10>)
 8011fda:	f7f1 fd3d 	bl	8003a58 <HAL_ADC_GetValue>
 8011fde:	4603      	mov	r3, r0

}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	2000175c 	.word	0x2000175c

08011fe8 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8011ff0:	f7ff ff86 	bl	8011f00 <adc_InitOneShotMode>
	HAL_Delay(1);
 8011ff4:	2001      	movs	r0, #1
 8011ff6:	f7f1 fadf 	bl	80035b8 <HAL_Delay>
	adc_Start();
 8011ffa:	4847      	ldr	r0, [pc, #284]	; (8012118 <adc_Measure+0x130>)
 8011ffc:	f7f1 fbba 	bl	8003774 <HAL_ADC_Start>
	HAL_Delay(1);
 8012000:	2001      	movs	r0, #1
 8012002:	f7f1 fad9 	bl	80035b8 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012006:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801200a:	4843      	ldr	r0, [pc, #268]	; (8012118 <adc_Measure+0x130>)
 801200c:	f7f1 fc99 	bl	8003942 <HAL_ADC_PollForConversion>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d01d      	beq.n	8012052 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012016:	2001      	movs	r0, #1
 8012018:	f7f1 face 	bl	80035b8 <HAL_Delay>
		   adc_Start();
 801201c:	483e      	ldr	r0, [pc, #248]	; (8012118 <adc_Measure+0x130>)
 801201e:	f7f1 fba9 	bl	8003774 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012026:	483c      	ldr	r0, [pc, #240]	; (8012118 <adc_Measure+0x130>)
 8012028:	f7f1 fc8b 	bl	8003942 <HAL_ADC_PollForConversion>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00f      	beq.n	8012052 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012032:	2001      	movs	r0, #1
 8012034:	f7f1 fac0 	bl	80035b8 <HAL_Delay>
				adc_Start();
 8012038:	4837      	ldr	r0, [pc, #220]	; (8012118 <adc_Measure+0x130>)
 801203a:	f7f1 fb9b 	bl	8003774 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801203e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012042:	4835      	ldr	r0, [pc, #212]	; (8012118 <adc_Measure+0x130>)
 8012044:	f7f1 fc7d 	bl	8003942 <HAL_ADC_PollForConversion>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <adc_Measure+0x6a>
				{
					return 0;
 801204e:	2300      	movs	r3, #0
 8012050:	e05a      	b.n	8012108 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012052:	4831      	ldr	r0, [pc, #196]	; (8012118 <adc_Measure+0x130>)
 8012054:	f7f1 fc42 	bl	80038dc <HAL_ADC_Stop>

	val = adc_Getval();
 8012058:	f7ff ffbc 	bl	8011fd4 <adc_Getval>
 801205c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 801205e:	2001      	movs	r0, #1
 8012060:	f7f1 faaa 	bl	80035b8 <HAL_Delay>
	adc_Start();
 8012064:	482c      	ldr	r0, [pc, #176]	; (8012118 <adc_Measure+0x130>)
 8012066:	f7f1 fb85 	bl	8003774 <HAL_ADC_Start>
	HAL_Delay(1);
 801206a:	2001      	movs	r0, #1
 801206c:	f7f1 faa4 	bl	80035b8 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012074:	4828      	ldr	r0, [pc, #160]	; (8012118 <adc_Measure+0x130>)
 8012076:	f7f1 fc64 	bl	8003942 <HAL_ADC_PollForConversion>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d01d      	beq.n	80120bc <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012080:	2001      	movs	r0, #1
 8012082:	f7f1 fa99 	bl	80035b8 <HAL_Delay>
		   adc_Start();
 8012086:	4824      	ldr	r0, [pc, #144]	; (8012118 <adc_Measure+0x130>)
 8012088:	f7f1 fb74 	bl	8003774 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801208c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012090:	4821      	ldr	r0, [pc, #132]	; (8012118 <adc_Measure+0x130>)
 8012092:	f7f1 fc56 	bl	8003942 <HAL_ADC_PollForConversion>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00f      	beq.n	80120bc <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 801209c:	2001      	movs	r0, #1
 801209e:	f7f1 fa8b 	bl	80035b8 <HAL_Delay>
				adc_Start();
 80120a2:	481d      	ldr	r0, [pc, #116]	; (8012118 <adc_Measure+0x130>)
 80120a4:	f7f1 fb66 	bl	8003774 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80120a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80120ac:	481a      	ldr	r0, [pc, #104]	; (8012118 <adc_Measure+0x130>)
 80120ae:	f7f1 fc48 	bl	8003942 <HAL_ADC_PollForConversion>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d001      	beq.n	80120bc <adc_Measure+0xd4>
				{
					return 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e025      	b.n	8012108 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80120bc:	4816      	ldr	r0, [pc, #88]	; (8012118 <adc_Measure+0x130>)
 80120be:	f7f1 fc0d 	bl	80038dc <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 80120c2:	f7ff ff87 	bl	8011fd4 <adc_Getval>
 80120c6:	4602      	mov	r2, r0
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	4413      	add	r3, r2
 80120cc:	085b      	lsrs	r3, r3, #1
 80120ce:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio);	// 12 bit
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	ee07 3a90 	vmov	s15, r3
 80120d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801211c <adc_Measure+0x134>
 80120de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120e2:	ee17 0a90 	vmov	r0, s15
 80120e6:	f7ee fa47 	bl	8000578 <__aeabi_f2d>
 80120ea:	a309      	add	r3, pc, #36	; (adr r3, 8012110 <adc_Measure+0x128>)
 80120ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f0:	f7ee fa9a 	bl	8000628 <__aeabi_dmul>
 80120f4:	4602      	mov	r2, r0
 80120f6:	460b      	mov	r3, r1
 80120f8:	4610      	mov	r0, r2
 80120fa:	4619      	mov	r1, r3
 80120fc:	f7ee fd8c 	bl	8000c18 <__aeabi_d2f>
 8012100:	4602      	mov	r2, r0
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	601a      	str	r2, [r3, #0]


	return 1;
 8012106:	2301      	movs	r3, #1


}
 8012108:	4618      	mov	r0, r3
 801210a:	3710      	adds	r7, #16
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	851eb852 	.word	0x851eb852
 8012114:	3ff451eb 	.word	0x3ff451eb
 8012118:	2000175c 	.word	0x2000175c
 801211c:	3a533333 	.word	0x3a533333

08012120 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 801212a:	88f9      	ldrh	r1, [r7, #6]
 801212c:	463b      	mov	r3, r7
 801212e:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8012132:	4618      	mov	r0, r3
 8012134:	f000 fa8d 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 8012138:	4603      	mov	r3, r0
 801213a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801213c:	88fa      	ldrh	r2, [r7, #6]
 801213e:	463b      	mov	r3, r7
 8012140:	4619      	mov	r1, r3
 8012142:	2062      	movs	r0, #98	; 0x62
 8012144:	f000 fad8 	bl	80126f8 <sensirion_i2c_write_data>
 8012148:	4603      	mov	r3, r0
 801214a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 801214c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d002      	beq.n	801215a <scd4x_start_periodic_measurement+0x3a>
        return error;
 8012154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012158:	e004      	b.n	8012164 <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 801215a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801215e:	f000 fbb9 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012162:	2300      	movs	r3, #0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 801216c:	b580      	push	{r7, lr}
 801216e:	b088      	sub	sp, #32
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 801217c:	8bf9      	ldrh	r1, [r7, #30]
 801217e:	f107 0310 	add.w	r3, r7, #16
 8012182:	f64e 4205 	movw	r2, #60421	; 0xec05
 8012186:	4618      	mov	r0, r3
 8012188:	f000 fa63 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 801218c:	4603      	mov	r3, r0
 801218e:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012190:	8bfa      	ldrh	r2, [r7, #30]
 8012192:	f107 0310 	add.w	r3, r7, #16
 8012196:	4619      	mov	r1, r3
 8012198:	2062      	movs	r0, #98	; 0x62
 801219a:	f000 faad 	bl	80126f8 <sensirion_i2c_write_data>
 801219e:	4603      	mov	r3, r0
 80121a0:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80121a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d002      	beq.n	80121b0 <scd4x_read_measurement_ticks+0x44>
        return error;
 80121aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80121ae:	e031      	b.n	8012214 <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80121b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80121b4:	f000 fb8e 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 80121b8:	f107 0310 	add.w	r3, r7, #16
 80121bc:	2206      	movs	r2, #6
 80121be:	4619      	mov	r1, r3
 80121c0:	2062      	movs	r0, #98	; 0x62
 80121c2:	f000 faad 	bl	8012720 <sensirion_i2c_read_data_inplace>
 80121c6:	4603      	mov	r3, r0
 80121c8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80121ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <scd4x_read_measurement_ticks+0x6c>
        return error;
 80121d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80121d6:	e01d      	b.n	8012214 <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80121d8:	f107 0310 	add.w	r3, r7, #16
 80121dc:	4618      	mov	r0, r3
 80121de:	f000 f9d2 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 80121e2:	4603      	mov	r3, r0
 80121e4:	461a      	mov	r2, r3
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80121ea:	f107 0310 	add.w	r3, r7, #16
 80121ee:	3302      	adds	r3, #2
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 f9c8 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80121fe:	f107 0310 	add.w	r3, r7, #16
 8012202:	3304      	adds	r3, #4
 8012204:	4618      	mov	r0, r3
 8012206:	f000 f9be 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 801220a:	4603      	mov	r3, r0
 801220c:	461a      	mov	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3720      	adds	r7, #32
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8012228:	f107 0212 	add.w	r2, r7, #18
 801222c:	f107 0314 	add.w	r3, r7, #20
 8012230:	4619      	mov	r1, r3
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f7ff ff9a 	bl	801216c <scd4x_read_measurement_ticks>
 8012238:	4603      	mov	r3, r0
 801223a:	82fb      	strh	r3, [r7, #22]
    if (error) {
 801223c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <scd4x_read_measurement+0x2e>
        return error;
 8012244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012248:	e015      	b.n	8012276 <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 801224a:	8abb      	ldrh	r3, [r7, #20]
 801224c:	461a      	mov	r2, r3
 801224e:	f245 5373 	movw	r3, #21875	; 0x5573
 8012252:	fb02 f303 	mul.w	r3, r2, r3
 8012256:	135b      	asrs	r3, r3, #13
 8012258:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 801225c:	3bc8      	subs	r3, #200	; 0xc8
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 8012262:	8a7b      	ldrh	r3, [r7, #18]
 8012264:	461a      	mov	r2, r3
 8012266:	f243 03d4 	movw	r3, #12500	; 0x30d4
 801226a:	fb02 f303 	mul.w	r3, r2, r3
 801226e:	135a      	asrs	r2, r3, #13
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8012274:	2300      	movs	r3, #0
}
 8012276:	4618      	mov	r0, r3
 8012278:	3718      	adds	r7, #24
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
	...

08012280 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 801228a:	88f9      	ldrh	r1, [r7, #6]
 801228c:	463b      	mov	r3, r7
 801228e:	f643 7286 	movw	r2, #16262	; 0x3f86
 8012292:	4618      	mov	r0, r3
 8012294:	f000 f9dd 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 8012298:	4603      	mov	r3, r0
 801229a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801229c:	88fa      	ldrh	r2, [r7, #6]
 801229e:	463b      	mov	r3, r7
 80122a0:	4619      	mov	r1, r3
 80122a2:	2062      	movs	r0, #98	; 0x62
 80122a4:	f000 fa28 	bl	80126f8 <sensirion_i2c_write_data>
 80122a8:	4603      	mov	r3, r0
 80122aa:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80122ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <scd4x_stop_periodic_measurement+0x3a>
        return error;
 80122b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122b8:	e003      	b.n	80122c2 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 80122ba:	4804      	ldr	r0, [pc, #16]	; (80122cc <scd4x_stop_periodic_measurement+0x4c>)
 80122bc:	f000 fb0a 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3708      	adds	r7, #8
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	0007a120 	.word	0x0007a120

080122d0 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	4603      	mov	r3, r0
 80122d8:	6039      	str	r1, [r7, #0]
 80122da:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 80122dc:	2300      	movs	r3, #0
 80122de:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 80122e0:	8af9      	ldrh	r1, [r7, #22]
 80122e2:	f107 030c 	add.w	r3, r7, #12
 80122e6:	f243 622f 	movw	r2, #13871	; 0x362f
 80122ea:	4618      	mov	r0, r3
 80122ec:	f000 f9b1 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 80122f0:	4603      	mov	r3, r0
 80122f2:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 80122f4:	88fa      	ldrh	r2, [r7, #6]
 80122f6:	8af9      	ldrh	r1, [r7, #22]
 80122f8:	f107 030c 	add.w	r3, r7, #12
 80122fc:	4618      	mov	r0, r3
 80122fe:	f000 f9cb 	bl	8012698 <sensirion_i2c_add_uint16_t_to_buffer>
 8012302:	4603      	mov	r3, r0
 8012304:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012306:	8afa      	ldrh	r2, [r7, #22]
 8012308:	f107 030c 	add.w	r3, r7, #12
 801230c:	4619      	mov	r1, r3
 801230e:	2062      	movs	r0, #98	; 0x62
 8012310:	f000 f9f2 	bl	80126f8 <sensirion_i2c_write_data>
 8012314:	4603      	mov	r3, r0
 8012316:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012318:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d002      	beq.n	8012326 <scd4x_perform_forced_recalibration+0x56>
        return error;
 8012320:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012324:	e01c      	b.n	8012360 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 8012326:	4810      	ldr	r0, [pc, #64]	; (8012368 <scd4x_perform_forced_recalibration+0x98>)
 8012328:	f000 fad4 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 801232c:	f107 030c 	add.w	r3, r7, #12
 8012330:	2202      	movs	r2, #2
 8012332:	4619      	mov	r1, r3
 8012334:	2062      	movs	r0, #98	; 0x62
 8012336:	f000 f9f3 	bl	8012720 <sensirion_i2c_read_data_inplace>
 801233a:	4603      	mov	r3, r0
 801233c:	82bb      	strh	r3, [r7, #20]
    if (error) {
 801233e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d002      	beq.n	801234c <scd4x_perform_forced_recalibration+0x7c>
        return error;
 8012346:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801234a:	e009      	b.n	8012360 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 801234c:	f107 030c 	add.w	r3, r7, #12
 8012350:	4618      	mov	r0, r3
 8012352:	f000 f918 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 8012356:	4603      	mov	r3, r0
 8012358:	461a      	mov	r2, r3
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3718      	adds	r7, #24
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	00061a80 	.word	0x00061a80

0801236c <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 8012378:	2300      	movs	r3, #0
 801237a:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 801237c:	8af9      	ldrh	r1, [r7, #22]
 801237e:	f107 030c 	add.w	r3, r7, #12
 8012382:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 8012386:	4618      	mov	r0, r3
 8012388:	f000 f963 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 801238c:	4603      	mov	r3, r0
 801238e:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012390:	8afa      	ldrh	r2, [r7, #22]
 8012392:	f107 030c 	add.w	r3, r7, #12
 8012396:	4619      	mov	r1, r3
 8012398:	2062      	movs	r0, #98	; 0x62
 801239a:	f000 f9ad 	bl	80126f8 <sensirion_i2c_write_data>
 801239e:	4603      	mov	r3, r0
 80123a0:	827b      	strh	r3, [r7, #18]
    if (error) {
 80123a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d002      	beq.n	80123b0 <scd4x_get_data_ready_flag+0x44>
        return error;
 80123aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123ae:	e025      	b.n	80123fc <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80123b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80123b4:	f000 fa8e 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 80123b8:	f107 030c 	add.w	r3, r7, #12
 80123bc:	2202      	movs	r2, #2
 80123be:	4619      	mov	r1, r3
 80123c0:	2062      	movs	r0, #98	; 0x62
 80123c2:	f000 f9ad 	bl	8012720 <sensirion_i2c_read_data_inplace>
 80123c6:	4603      	mov	r3, r0
 80123c8:	827b      	strh	r3, [r7, #18]
    if (error) {
 80123ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d002      	beq.n	80123d8 <scd4x_get_data_ready_flag+0x6c>
        return error;
 80123d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123d6:	e011      	b.n	80123fc <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80123d8:	f107 030c 	add.w	r3, r7, #12
 80123dc:	4618      	mov	r0, r3
 80123de:	f000 f8d2 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 80123e2:	4603      	mov	r3, r0
 80123e4:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 80123e6:	8abb      	ldrh	r3, [r7, #20]
 80123e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	bf14      	ite	ne
 80123f0:	2301      	movne	r3, #1
 80123f2:	2300      	moveq	r3, #0
 80123f4:	b2da      	uxtb	r2, r3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 8012404:	b580      	push	{r7, lr}
 8012406:	b088      	sub	sp, #32
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 8012414:	8bf9      	ldrh	r1, [r7, #30]
 8012416:	f107 0310 	add.w	r3, r7, #16
 801241a:	f243 6282 	movw	r2, #13954	; 0x3682
 801241e:	4618      	mov	r0, r3
 8012420:	f000 f917 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 8012424:	4603      	mov	r3, r0
 8012426:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012428:	8bfa      	ldrh	r2, [r7, #30]
 801242a:	f107 0310 	add.w	r3, r7, #16
 801242e:	4619      	mov	r1, r3
 8012430:	2062      	movs	r0, #98	; 0x62
 8012432:	f000 f961 	bl	80126f8 <sensirion_i2c_write_data>
 8012436:	4603      	mov	r3, r0
 8012438:	83bb      	strh	r3, [r7, #28]
    if (error) {
 801243a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d002      	beq.n	8012448 <scd4x_get_serial_number+0x44>
        return error;
 8012442:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012446:	e031      	b.n	80124ac <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801244c:	f000 fa42 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012450:	f107 0310 	add.w	r3, r7, #16
 8012454:	2206      	movs	r2, #6
 8012456:	4619      	mov	r1, r3
 8012458:	2062      	movs	r0, #98	; 0x62
 801245a:	f000 f961 	bl	8012720 <sensirion_i2c_read_data_inplace>
 801245e:	4603      	mov	r3, r0
 8012460:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012462:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d002      	beq.n	8012470 <scd4x_get_serial_number+0x6c>
        return error;
 801246a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801246e:	e01d      	b.n	80124ac <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012470:	f107 0310 	add.w	r3, r7, #16
 8012474:	4618      	mov	r0, r3
 8012476:	f000 f886 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 801247a:	4603      	mov	r3, r0
 801247c:	461a      	mov	r2, r3
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012482:	f107 0310 	add.w	r3, r7, #16
 8012486:	3302      	adds	r3, #2
 8012488:	4618      	mov	r0, r3
 801248a:	f000 f87c 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 801248e:	4603      	mov	r3, r0
 8012490:	461a      	mov	r2, r3
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012496:	f107 0310 	add.w	r3, r7, #16
 801249a:	3304      	adds	r3, #4
 801249c:	4618      	mov	r0, r3
 801249e:	f000 f872 	bl	8012586 <sensirion_common_bytes_to_uint16_t>
 80124a2:	4603      	mov	r3, r0
 80124a4:	461a      	mov	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3720      	adds	r7, #32
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80124ba:	2300      	movs	r3, #0
 80124bc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 80124be:	88f9      	ldrh	r1, [r7, #6]
 80124c0:	463b      	mov	r3, r7
 80124c2:	f243 6246 	movw	r2, #13894	; 0x3646
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 f8c3 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 80124cc:	4603      	mov	r3, r0
 80124ce:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80124d0:	88fa      	ldrh	r2, [r7, #6]
 80124d2:	463b      	mov	r3, r7
 80124d4:	4619      	mov	r1, r3
 80124d6:	2062      	movs	r0, #98	; 0x62
 80124d8:	f000 f90e 	bl	80126f8 <sensirion_i2c_write_data>
 80124dc:	4603      	mov	r3, r0
 80124de:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80124e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <scd4x_reinit+0x3a>
        return error;
 80124e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80124ec:	e004      	b.n	80124f8 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80124ee:	f644 6020 	movw	r0, #20000	; 0x4e20
 80124f2:	f000 f9ef 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80124f6:	2300      	movs	r3, #0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 801250a:	88f9      	ldrh	r1, [r7, #6]
 801250c:	463b      	mov	r3, r7
 801250e:	f243 62e0 	movw	r2, #14048	; 0x36e0
 8012512:	4618      	mov	r0, r3
 8012514:	f000 f89d 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 8012518:	4603      	mov	r3, r0
 801251a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801251c:	88fa      	ldrh	r2, [r7, #6]
 801251e:	463b      	mov	r3, r7
 8012520:	4619      	mov	r1, r3
 8012522:	2062      	movs	r0, #98	; 0x62
 8012524:	f000 f8e8 	bl	80126f8 <sensirion_i2c_write_data>
 8012528:	4603      	mov	r3, r0
 801252a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 801252c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d002      	beq.n	801253a <scd4x_power_down+0x3a>
        return error;
 8012534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012538:	e004      	b.n	8012544 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 801253a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801253e:	f000 f9c9 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012542:	2300      	movs	r3, #0
}
 8012544:	4618      	mov	r0, r3
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8012556:	88f9      	ldrh	r1, [r7, #6]
 8012558:	1d3b      	adds	r3, r7, #4
 801255a:	f243 62f6 	movw	r2, #14070	; 0x36f6
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f877 	bl	8012652 <sensirion_i2c_add_command_to_buffer>
 8012564:	4603      	mov	r3, r0
 8012566:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012568:	88fa      	ldrh	r2, [r7, #6]
 801256a:	1d3b      	adds	r3, r7, #4
 801256c:	4619      	mov	r1, r3
 801256e:	2062      	movs	r0, #98	; 0x62
 8012570:	f000 f8c2 	bl	80126f8 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8012574:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012578:	f000 f9ac 	bl	80128d4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	021b      	lsls	r3, r3, #8
 8012594:	b21a      	sxth	r2, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	3301      	adds	r3, #1
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	b21b      	sxth	r3, r3
 801259e:	4313      	orrs	r3, r2
 80125a0:	b21b      	sxth	r3, r3
 80125a2:	b29b      	uxth	r3, r3
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	460b      	mov	r3, r1
 80125ba:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80125bc:	23ff      	movs	r3, #255	; 0xff
 80125be:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80125c0:	2300      	movs	r3, #0
 80125c2:	81fb      	strh	r3, [r7, #14]
 80125c4:	e021      	b.n	801260a <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80125c6:	89fb      	ldrh	r3, [r7, #14]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	4413      	add	r3, r2
 80125cc:	781a      	ldrb	r2, [r3, #0]
 80125ce:	7b7b      	ldrb	r3, [r7, #13]
 80125d0:	4053      	eors	r3, r2
 80125d2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80125d4:	2308      	movs	r3, #8
 80125d6:	733b      	strb	r3, [r7, #12]
 80125d8:	e011      	b.n	80125fe <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 80125da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	da07      	bge.n	80125f2 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80125e2:	7b7b      	ldrb	r3, [r7, #13]
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	b25b      	sxtb	r3, r3
 80125e8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80125ec:	b25b      	sxtb	r3, r3
 80125ee:	737b      	strb	r3, [r7, #13]
 80125f0:	e002      	b.n	80125f8 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 80125f2:	7b7b      	ldrb	r3, [r7, #13]
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80125f8:	7b3b      	ldrb	r3, [r7, #12]
 80125fa:	3b01      	subs	r3, #1
 80125fc:	733b      	strb	r3, [r7, #12]
 80125fe:	7b3b      	ldrb	r3, [r7, #12]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1ea      	bne.n	80125da <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012604:	89fb      	ldrh	r3, [r7, #14]
 8012606:	3301      	adds	r3, #1
 8012608:	81fb      	strh	r3, [r7, #14]
 801260a:	89fa      	ldrh	r2, [r7, #14]
 801260c:	887b      	ldrh	r3, [r7, #2]
 801260e:	429a      	cmp	r2, r3
 8012610:	d3d9      	bcc.n	80125c6 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8012612:	7b7b      	ldrb	r3, [r7, #13]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3714      	adds	r7, #20
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	460b      	mov	r3, r1
 801262a:	807b      	strh	r3, [r7, #2]
 801262c:	4613      	mov	r3, r2
 801262e:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8012630:	887b      	ldrh	r3, [r7, #2]
 8012632:	4619      	mov	r1, r3
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7ff ffbb 	bl	80125b0 <sensirion_i2c_generate_crc>
 801263a:	4603      	mov	r3, r0
 801263c:	461a      	mov	r2, r3
 801263e:	787b      	ldrb	r3, [r7, #1]
 8012640:	4293      	cmp	r3, r2
 8012642:	d001      	beq.n	8012648 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	e000      	b.n	801264a <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3708      	adds	r7, #8
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8012652:	b480      	push	{r7}
 8012654:	b083      	sub	sp, #12
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	460b      	mov	r3, r1
 801265c:	807b      	strh	r3, [r7, #2]
 801265e:	4613      	mov	r3, r2
 8012660:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8012662:	883b      	ldrh	r3, [r7, #0]
 8012664:	0a1b      	lsrs	r3, r3, #8
 8012666:	b29a      	uxth	r2, r3
 8012668:	887b      	ldrh	r3, [r7, #2]
 801266a:	1c59      	adds	r1, r3, #1
 801266c:	8079      	strh	r1, [r7, #2]
 801266e:	4619      	mov	r1, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	440b      	add	r3, r1
 8012674:	b2d2      	uxtb	r2, r2
 8012676:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8012678:	887b      	ldrh	r3, [r7, #2]
 801267a:	1c5a      	adds	r2, r3, #1
 801267c:	807a      	strh	r2, [r7, #2]
 801267e:	461a      	mov	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4413      	add	r3, r2
 8012684:	883a      	ldrh	r2, [r7, #0]
 8012686:	b2d2      	uxtb	r2, r2
 8012688:	701a      	strb	r2, [r3, #0]
    return offset;
 801268a:	887b      	ldrh	r3, [r7, #2]
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8012698:	b590      	push	{r4, r7, lr}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	807b      	strh	r3, [r7, #2]
 80126a4:	4613      	mov	r3, r2
 80126a6:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80126a8:	883b      	ldrh	r3, [r7, #0]
 80126aa:	0a1b      	lsrs	r3, r3, #8
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	887b      	ldrh	r3, [r7, #2]
 80126b0:	1c59      	adds	r1, r3, #1
 80126b2:	8079      	strh	r1, [r7, #2]
 80126b4:	4619      	mov	r1, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	440b      	add	r3, r1
 80126ba:	b2d2      	uxtb	r2, r2
 80126bc:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 80126be:	887b      	ldrh	r3, [r7, #2]
 80126c0:	1c5a      	adds	r2, r3, #1
 80126c2:	807a      	strh	r2, [r7, #2]
 80126c4:	461a      	mov	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	4413      	add	r3, r2
 80126ca:	883a      	ldrh	r2, [r7, #0]
 80126cc:	b2d2      	uxtb	r2, r2
 80126ce:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 80126d0:	887b      	ldrh	r3, [r7, #2]
 80126d2:	3b02      	subs	r3, #2
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 80126d8:	887b      	ldrh	r3, [r7, #2]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	18d4      	adds	r4, r2, r3
 80126de:	2102      	movs	r1, #2
 80126e0:	f7ff ff66 	bl	80125b0 <sensirion_i2c_generate_crc>
 80126e4:	4603      	mov	r3, r0
 80126e6:	7023      	strb	r3, [r4, #0]
    offset++;
 80126e8:	887b      	ldrh	r3, [r7, #2]
 80126ea:	3301      	adds	r3, #1
 80126ec:	807b      	strh	r3, [r7, #2]

    return offset;
 80126ee:	887b      	ldrh	r3, [r7, #2]
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd90      	pop	{r4, r7, pc}

080126f8 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	4603      	mov	r3, r0
 8012700:	6039      	str	r1, [r7, #0]
 8012702:	71fb      	strb	r3, [r7, #7]
 8012704:	4613      	mov	r3, r2
 8012706:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8012708:	88ba      	ldrh	r2, [r7, #4]
 801270a:	79fb      	ldrb	r3, [r7, #7]
 801270c:	6839      	ldr	r1, [r7, #0]
 801270e:	4618      	mov	r0, r3
 8012710:	f000 f8c4 	bl	801289c <sensirion_i2c_hal_write>
 8012714:	4603      	mov	r3, r0
 8012716:	b21b      	sxth	r3, r3
}
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	4603      	mov	r3, r0
 8012728:	6039      	str	r1, [r7, #0]
 801272a:	71fb      	strb	r3, [r7, #7]
 801272c:	4613      	mov	r3, r2
 801272e:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8012730:	88bb      	ldrh	r3, [r7, #4]
 8012732:	085b      	lsrs	r3, r3, #1
 8012734:	b29b      	uxth	r3, r3
 8012736:	461a      	mov	r2, r3
 8012738:	0052      	lsls	r2, r2, #1
 801273a:	4413      	add	r3, r2
 801273c:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 801273e:	88bb      	ldrh	r3, [r7, #4]
 8012740:	f003 0301 	and.w	r3, r3, #1
 8012744:	b29b      	uxth	r3, r3
 8012746:	2b00      	cmp	r3, #0
 8012748:	d001      	beq.n	801274e <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 801274a:	2304      	movs	r3, #4
 801274c:	e047      	b.n	80127de <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 801274e:	897a      	ldrh	r2, [r7, #10]
 8012750:	79fb      	ldrb	r3, [r7, #7]
 8012752:	6839      	ldr	r1, [r7, #0]
 8012754:	4618      	mov	r0, r3
 8012756:	f000 f885 	bl	8012864 <sensirion_i2c_hal_read>
 801275a:	4603      	mov	r3, r0
 801275c:	813b      	strh	r3, [r7, #8]
    if (error) {
 801275e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d002      	beq.n	801276c <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8012766:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801276a:	e038      	b.n	80127de <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 801276c:	2300      	movs	r3, #0
 801276e:	81fb      	strh	r3, [r7, #14]
 8012770:	2300      	movs	r3, #0
 8012772:	81bb      	strh	r3, [r7, #12]
 8012774:	e02e      	b.n	80127d4 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012776:	89fb      	ldrh	r3, [r7, #14]
 8012778:	683a      	ldr	r2, [r7, #0]
 801277a:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 801277c:	89fb      	ldrh	r3, [r7, #14]
 801277e:	3302      	adds	r3, #2
 8012780:	683a      	ldr	r2, [r7, #0]
 8012782:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	461a      	mov	r2, r3
 8012788:	2102      	movs	r1, #2
 801278a:	f7ff ff49 	bl	8012620 <sensirion_i2c_check_crc>
 801278e:	4603      	mov	r3, r0
 8012790:	813b      	strh	r3, [r7, #8]
        if (error) {
 8012792:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d002      	beq.n	80127a0 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 801279a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801279e:	e01e      	b.n	80127de <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80127a0:	89fb      	ldrh	r3, [r7, #14]
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	441a      	add	r2, r3
 80127a6:	89bb      	ldrh	r3, [r7, #12]
 80127a8:	1c59      	adds	r1, r3, #1
 80127aa:	81b9      	strh	r1, [r7, #12]
 80127ac:	4619      	mov	r1, r3
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	440b      	add	r3, r1
 80127b2:	7812      	ldrb	r2, [r2, #0]
 80127b4:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80127b6:	89fb      	ldrh	r3, [r7, #14]
 80127b8:	3301      	adds	r3, #1
 80127ba:	683a      	ldr	r2, [r7, #0]
 80127bc:	441a      	add	r2, r3
 80127be:	89bb      	ldrh	r3, [r7, #12]
 80127c0:	1c59      	adds	r1, r3, #1
 80127c2:	81b9      	strh	r1, [r7, #12]
 80127c4:	4619      	mov	r1, r3
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	440b      	add	r3, r1
 80127ca:	7812      	ldrb	r2, [r2, #0]
 80127cc:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80127ce:	89fb      	ldrh	r3, [r7, #14]
 80127d0:	3303      	adds	r3, #3
 80127d2:	81fb      	strh	r3, [r7, #14]
 80127d4:	89fa      	ldrh	r2, [r7, #14]
 80127d6:	897b      	ldrh	r3, [r7, #10]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d3cc      	bcc.n	8012776 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
	...

080127e8 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 80127ec:	4814      	ldr	r0, [pc, #80]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 80127ee:	f7f3 f84b 	bl	8005888 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 80127f2:	4b13      	ldr	r3, [pc, #76]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 80127f4:	4a13      	ldr	r2, [pc, #76]	; (8012844 <sensirion_i2c_hal_init+0x5c>)
 80127f6:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 80127f8:	4b11      	ldr	r3, [pc, #68]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 80127fa:	4a13      	ldr	r2, [pc, #76]	; (8012848 <sensirion_i2c_hal_init+0x60>)
 80127fc:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80127fe:	4b10      	ldr	r3, [pc, #64]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 8012800:	2200      	movs	r2, #0
 8012802:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8012804:	4b0e      	ldr	r3, [pc, #56]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 8012806:	2200      	movs	r2, #0
 8012808:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801280a:	4b0d      	ldr	r3, [pc, #52]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 801280c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012810:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012812:	4b0b      	ldr	r3, [pc, #44]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 8012814:	2200      	movs	r2, #0
 8012816:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8012818:	4b09      	ldr	r3, [pc, #36]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 801281a:	2200      	movs	r2, #0
 801281c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801281e:	4b08      	ldr	r3, [pc, #32]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 8012820:	2200      	movs	r2, #0
 8012822:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012824:	4b06      	ldr	r3, [pc, #24]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 8012826:	2200      	movs	r2, #0
 8012828:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801282a:	4805      	ldr	r0, [pc, #20]	; (8012840 <sensirion_i2c_hal_init+0x58>)
 801282c:	f7f2 fee8 	bl	8005600 <HAL_I2C_Init>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8012836:	f7f0 f94f 	bl	8002ad8 <Error_Handler>
	  }
}
 801283a:	bf00      	nop
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	200017a4 	.word	0x200017a4
 8012844:	40005400 	.word	0x40005400
 8012848:	00061a80 	.word	0x00061a80

0801284c <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 801284c:	b580      	push	{r7, lr}
 801284e:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8012850:	4803      	ldr	r0, [pc, #12]	; (8012860 <sensirion_i2c_hal_free+0x14>)
 8012852:	f7f3 f819 	bl	8005888 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8012856:	4802      	ldr	r0, [pc, #8]	; (8012860 <sensirion_i2c_hal_free+0x14>)
 8012858:	f7f0 fa16 	bl	8002c88 <HAL_I2C_MspDeInit>
}
 801285c:	bf00      	nop
 801285e:	bd80      	pop	{r7, pc}
 8012860:	200017a4 	.word	0x200017a4

08012864 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af02      	add	r7, sp, #8
 801286a:	4603      	mov	r3, r0
 801286c:	6039      	str	r1, [r7, #0]
 801286e:	71fb      	strb	r3, [r7, #7]
 8012870:	4613      	mov	r3, r2
 8012872:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	b29b      	uxth	r3, r3
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	b299      	uxth	r1, r3
 801287c:	88bb      	ldrh	r3, [r7, #4]
 801287e:	f04f 32ff 	mov.w	r2, #4294967295
 8012882:	9200      	str	r2, [sp, #0]
 8012884:	683a      	ldr	r2, [r7, #0]
 8012886:	4804      	ldr	r0, [pc, #16]	; (8012898 <sensirion_i2c_hal_read+0x34>)
 8012888:	f7f3 f92c 	bl	8005ae4 <HAL_I2C_Master_Receive>
 801288c:	4603      	mov	r3, r0
 801288e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}
 8012898:	200017a4 	.word	0x200017a4

0801289c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af02      	add	r7, sp, #8
 80128a2:	4603      	mov	r3, r0
 80128a4:	6039      	str	r1, [r7, #0]
 80128a6:	71fb      	strb	r3, [r7, #7]
 80128a8:	4613      	mov	r3, r2
 80128aa:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 80128ac:	79fb      	ldrb	r3, [r7, #7]
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	b299      	uxth	r1, r3
 80128b4:	88bb      	ldrh	r3, [r7, #4]
 80128b6:	f04f 32ff 	mov.w	r2, #4294967295
 80128ba:	9200      	str	r2, [sp, #0]
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	4804      	ldr	r0, [pc, #16]	; (80128d0 <sensirion_i2c_hal_write+0x34>)
 80128c0:	f7f3 f812 	bl	80058e8 <HAL_I2C_Master_Transmit>
 80128c4:	4603      	mov	r3, r0
 80128c6:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	200017a4 	.word	0x200017a4

080128d4 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4a05      	ldr	r2, [pc, #20]	; (80128f4 <sensirion_i2c_hal_sleep_usec+0x20>)
 80128e0:	fba2 2303 	umull	r2, r3, r2, r3
 80128e4:	099b      	lsrs	r3, r3, #6
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f0 fe66 	bl	80035b8 <HAL_Delay>
}
 80128ec:	bf00      	nop
 80128ee:	3708      	adds	r7, #8
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	10624dd3 	.word	0x10624dd3

080128f8 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 80128f8:	b480      	push	{r7}
 80128fa:	b083      	sub	sp, #12
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	061a      	lsls	r2, r3, #24
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	3301      	adds	r3, #1
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	041b      	lsls	r3, r3, #16
 801290e:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	3302      	adds	r3, #2
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012918:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	3203      	adds	r2, #3
 801291e:	7812      	ldrb	r2, [r2, #0]
 8012920:	4313      	orrs	r3, r2
}
 8012922:	4618      	mov	r0, r3
 8012924:	370c      	adds	r7, #12
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr

0801292e <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 801292e:	b580      	push	{r7, lr}
 8012930:	b084      	sub	sp, #16
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff ffde 	bl	80128f8 <sensirion_bytes_to_uint32_t>
 801293c:	4603      	mov	r3, r0
 801293e:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	ee07 3a90 	vmov	s15, r3
}
 8012946:	eeb0 0a67 	vmov.f32	s0, s15
 801294a:	3710      	adds	r7, #16
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	4603      	mov	r3, r0
 8012958:	603a      	str	r2, [r7, #0]
 801295a:	71fb      	strb	r3, [r7, #7]
 801295c:	460b      	mov	r3, r1
 801295e:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8012960:	79fa      	ldrb	r2, [r7, #7]
 8012962:	79bb      	ldrb	r3, [r7, #6]
 8012964:	4413      	add	r3, r2
 8012966:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8012968:	e006      	b.n	8012978 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	603a      	str	r2, [r7, #0]
 8012970:	781a      	ldrb	r2, [r3, #0]
 8012972:	79fb      	ldrb	r3, [r7, #7]
 8012974:	4413      	add	r3, r2
 8012976:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8012978:	79bb      	ldrb	r3, [r7, #6]
 801297a:	1e5a      	subs	r2, r3, #1
 801297c:	71ba      	strb	r2, [r7, #6]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d1f3      	bne.n	801296a <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8012982:	79fb      	ldrb	r3, [r7, #7]
 8012984:	43db      	mvns	r3, r3
 8012986:	b2db      	uxtb	r3, r3
}
 8012988:	4618      	mov	r0, r3
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8012994:	b480      	push	{r7}
 8012996:	b087      	sub	sp, #28
 8012998:	af00      	add	r7, sp, #0
 801299a:	4603      	mov	r3, r0
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80129a6:	e026      	b.n	80129f6 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	60ba      	str	r2, [r7, #8]
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80129b2:	7d7b      	ldrb	r3, [r7, #21]
 80129b4:	2b7e      	cmp	r3, #126	; 0x7e
 80129b6:	dc16      	bgt.n	80129e6 <sensirion_shdlc_stuff_data+0x52>
 80129b8:	2b7d      	cmp	r3, #125	; 0x7d
 80129ba:	da03      	bge.n	80129c4 <sensirion_shdlc_stuff_data+0x30>
 80129bc:	2b11      	cmp	r3, #17
 80129be:	d001      	beq.n	80129c4 <sensirion_shdlc_stuff_data+0x30>
 80129c0:	2b13      	cmp	r3, #19
 80129c2:	d110      	bne.n	80129e6 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	607a      	str	r2, [r7, #4]
 80129ca:	227d      	movs	r2, #125	; 0x7d
 80129cc:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	607a      	str	r2, [r7, #4]
 80129d4:	7d7a      	ldrb	r2, [r7, #21]
 80129d6:	f082 0220 	eor.w	r2, r2, #32
 80129da:	b2d2      	uxtb	r2, r2
 80129dc:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 80129de:	8afb      	ldrh	r3, [r7, #22]
 80129e0:	3302      	adds	r3, #2
 80129e2:	82fb      	strh	r3, [r7, #22]
                break;
 80129e4:	e007      	b.n	80129f6 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	1c5a      	adds	r2, r3, #1
 80129ea:	607a      	str	r2, [r7, #4]
 80129ec:	7d7a      	ldrb	r2, [r7, #21]
 80129ee:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 80129f0:	8afb      	ldrh	r3, [r7, #22]
 80129f2:	3301      	adds	r3, #1
 80129f4:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
 80129f8:	1e5a      	subs	r2, r3, #1
 80129fa:	73fa      	strb	r2, [r7, #15]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1d3      	bne.n	80129a8 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8012a00:	8afb      	ldrh	r3, [r7, #22]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	371c      	adds	r7, #28
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr

08012a0e <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8012a0e:	b480      	push	{r7}
 8012a10:	b083      	sub	sp, #12
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	4603      	mov	r3, r0
 8012a16:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8012a18:	79fb      	ldrb	r3, [r7, #7]
 8012a1a:	2b7d      	cmp	r3, #125	; 0x7d
 8012a1c:	bf0c      	ite	eq
 8012a1e:	2301      	moveq	r3, #1
 8012a20:	2300      	movne	r3, #0
 8012a22:	b2db      	uxtb	r3, r3
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr

08012a30 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8012a30:	b480      	push	{r7}
 8012a32:	b083      	sub	sp, #12
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8012a3a:	79fb      	ldrb	r3, [r7, #7]
 8012a3c:	2b5e      	cmp	r3, #94	; 0x5e
 8012a3e:	d010      	beq.n	8012a62 <sensirion_shdlc_unstuff_byte+0x32>
 8012a40:	2b5e      	cmp	r3, #94	; 0x5e
 8012a42:	dc10      	bgt.n	8012a66 <sensirion_shdlc_unstuff_byte+0x36>
 8012a44:	2b5d      	cmp	r3, #93	; 0x5d
 8012a46:	d00a      	beq.n	8012a5e <sensirion_shdlc_unstuff_byte+0x2e>
 8012a48:	2b5d      	cmp	r3, #93	; 0x5d
 8012a4a:	dc0c      	bgt.n	8012a66 <sensirion_shdlc_unstuff_byte+0x36>
 8012a4c:	2b31      	cmp	r3, #49	; 0x31
 8012a4e:	d002      	beq.n	8012a56 <sensirion_shdlc_unstuff_byte+0x26>
 8012a50:	2b33      	cmp	r3, #51	; 0x33
 8012a52:	d002      	beq.n	8012a5a <sensirion_shdlc_unstuff_byte+0x2a>
 8012a54:	e007      	b.n	8012a66 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8012a56:	2311      	movs	r3, #17
 8012a58:	e006      	b.n	8012a68 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8012a5a:	2313      	movs	r3, #19
 8012a5c:	e004      	b.n	8012a68 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8012a5e:	237d      	movs	r3, #125	; 0x7d
 8012a60:	e002      	b.n	8012a68 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8012a62:	237e      	movs	r3, #126	; 0x7e
 8012a64:	e000      	b.n	8012a68 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8012a66:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr

08012a74 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	603b      	str	r3, [r7, #0]
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	71fb      	strb	r3, [r7, #7]
 8012a80:	460b      	mov	r3, r1
 8012a82:	71bb      	strb	r3, [r7, #6]
 8012a84:	4613      	mov	r3, r2
 8012a86:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8012a88:	797a      	ldrb	r2, [r7, #5]
 8012a8a:	79b9      	ldrb	r1, [r7, #6]
 8012a8c:	79f8      	ldrb	r0, [r7, #7]
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	f000 f818 	bl	8012ac4 <sensirion_shdlc_tx>
 8012a94:	4603      	mov	r3, r0
 8012a96:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8012a98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d002      	beq.n	8012aa6 <sensirion_shdlc_xcv+0x32>
        return ret;
 8012aa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012aa4:	e00a      	b.n	8012abc <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8012aa6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012aaa:	f000 fb07 	bl	80130bc <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 8012aae:	7e3b      	ldrb	r3, [r7, #24]
 8012ab0:	6a3a      	ldr	r2, [r7, #32]
 8012ab2:	69f9      	ldr	r1, [r7, #28]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f000 f8d7 	bl	8012c68 <sensirion_shdlc_rx>
 8012aba:	4603      	mov	r3, r0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8012ac4:	b590      	push	{r4, r7, lr}
 8012ac6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	4604      	mov	r4, r0
 8012ace:	4608      	mov	r0, r1
 8012ad0:	4611      	mov	r1, r2
 8012ad2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012ad6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8012ada:	6013      	str	r3, [r2, #0]
 8012adc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012ae0:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8012ae4:	4622      	mov	r2, r4
 8012ae6:	701a      	strb	r2, [r3, #0]
 8012ae8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012aec:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8012af0:	4602      	mov	r2, r0
 8012af2:	701a      	strb	r2, [r3, #0]
 8012af4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012af8:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012afc:	460a      	mov	r2, r1
 8012afe:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8012b06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b0a:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8012b0e:	781a      	ldrb	r2, [r3, #0]
 8012b10:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b14:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	b2d8      	uxtb	r0, r3
 8012b1e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b22:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012b26:	7819      	ldrb	r1, [r3, #0]
 8012b28:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b2c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	f7ff ff0d 	bl	8012950 <sensirion_shdlc_crc>
 8012b36:	4603      	mov	r3, r0
 8012b38:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8012b3c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b40:	1c5a      	adds	r2, r3, #1
 8012b42:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8012b46:	461a      	mov	r2, r3
 8012b48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012b4c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012b50:	217e      	movs	r1, #126	; 0x7e
 8012b52:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8012b54:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b58:	f107 0208 	add.w	r2, r7, #8
 8012b5c:	441a      	add	r2, r3
 8012b5e:	1dfb      	adds	r3, r7, #7
 8012b60:	4619      	mov	r1, r3
 8012b62:	2001      	movs	r0, #1
 8012b64:	f7ff ff16 	bl	8012994 <sensirion_shdlc_stuff_data>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b70:	4413      	add	r3, r2
 8012b72:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8012b76:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b7a:	f107 0208 	add.w	r2, r7, #8
 8012b7e:	441a      	add	r2, r3
 8012b80:	1dbb      	adds	r3, r7, #6
 8012b82:	4619      	mov	r1, r3
 8012b84:	2001      	movs	r0, #1
 8012b86:	f7ff ff05 	bl	8012994 <sensirion_shdlc_stuff_data>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b92:	4413      	add	r3, r2
 8012b94:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8012b98:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012b9c:	f107 0208 	add.w	r2, r7, #8
 8012ba0:	441a      	add	r2, r3
 8012ba2:	1d7b      	adds	r3, r7, #5
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	2001      	movs	r0, #1
 8012ba8:	f7ff fef4 	bl	8012994 <sensirion_shdlc_stuff_data>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012bb4:	4413      	add	r3, r2
 8012bb6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8012bba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012bbe:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012bc2:	7818      	ldrb	r0, [r3, #0]
 8012bc4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012bc8:	f107 0208 	add.w	r2, r7, #8
 8012bcc:	441a      	add	r2, r3
 8012bce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012bd2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012bd6:	6819      	ldr	r1, [r3, #0]
 8012bd8:	f7ff fedc 	bl	8012994 <sensirion_shdlc_stuff_data>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	461a      	mov	r2, r3
 8012be0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012be4:	4413      	add	r3, r2
 8012be6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8012bea:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012bee:	f107 0208 	add.w	r2, r7, #8
 8012bf2:	441a      	add	r2, r3
 8012bf4:	f207 2313 	addw	r3, r7, #531	; 0x213
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	2001      	movs	r0, #1
 8012bfc:	f7ff feca 	bl	8012994 <sensirion_shdlc_stuff_data>
 8012c00:	4603      	mov	r3, r0
 8012c02:	461a      	mov	r2, r3
 8012c04:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012c08:	4413      	add	r3, r2
 8012c0a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8012c0e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012c12:	1c5a      	adds	r2, r3, #1
 8012c14:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8012c18:	461a      	mov	r2, r3
 8012c1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012c1e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c22:	217e      	movs	r1, #126	; 0x7e
 8012c24:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8012c26:	f107 0208 	add.w	r2, r7, #8
 8012c2a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012c2e:	4611      	mov	r1, r2
 8012c30:	4618      	mov	r0, r3
 8012c32:	f000 f9db 	bl	8012fec <sensirion_uart_tx>
 8012c36:	4603      	mov	r3, r0
 8012c38:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 8012c3c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	da02      	bge.n	8012c4a <sensirion_shdlc_tx+0x186>
        return ret;
 8012c44:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012c48:	e009      	b.n	8012c5e <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8012c4a:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 8012c4e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d002      	beq.n	8012c5c <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8012c56:	f06f 0305 	mvn.w	r3, #5
 8012c5a:	e000      	b.n	8012c5e <sensirion_shdlc_tx+0x19a>
    return 0;
 8012c5c:	2300      	movs	r3, #0
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd90      	pop	{r4, r7, pc}

08012c68 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8012c68:	b590      	push	{r4, r7, lr}
 8012c6a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c74:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012c78:	6019      	str	r1, [r3, #0]
 8012c7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c7e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c88:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8012c90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c94:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8012c9e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ca2:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	3306      	adds	r3, #6
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	f107 0210 	add.w	r2, r7, #16
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f9d2 	bl	8013060 <sensirion_uart_rx>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8012cc2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd03      	ble.n	8012cd2 <sensirion_shdlc_rx+0x6a>
 8012cca:	4ba0      	ldr	r3, [pc, #640]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	2b7e      	cmp	r3, #126	; 0x7e
 8012cd0:	d002      	beq.n	8012cd8 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8012cd2:	f06f 0301 	mvn.w	r3, #1
 8012cd6:	e133      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012cde:	2301      	movs	r3, #1
 8012ce0:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012cea:	e03a      	b.n	8012d62 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8012cec:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d015      	beq.n	8012d20 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012cf4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012cf8:	4a94      	ldr	r2, [pc, #592]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012cfa:	5cd2      	ldrb	r2, [r2, r3]
 8012cfc:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012d00:	1c59      	adds	r1, r3, #1
 8012d02:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012d06:	4619      	mov	r1, r3
 8012d08:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012d0c:	185c      	adds	r4, r3, r1
 8012d0e:	4610      	mov	r0, r2
 8012d10:	f7ff fe8e 	bl	8012a30 <sensirion_shdlc_unstuff_byte>
 8012d14:	4603      	mov	r3, r0
 8012d16:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012d1e:	e01b      	b.n	8012d58 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012d20:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012d24:	4a89      	ldr	r2, [pc, #548]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012d26:	5cd3      	ldrb	r3, [r2, r3]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7ff fe70 	bl	8012a0e <sensirion_shdlc_check_unstuff>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012d34:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10d      	bne.n	8012d58 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8012d3c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012d40:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012d44:	1c59      	adds	r1, r3, #1
 8012d46:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012d50:	440b      	add	r3, r1
 8012d52:	497e      	ldr	r1, [pc, #504]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012d54:	5c8a      	ldrb	r2, [r1, r2]
 8012d56:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012d58:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012d62:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012d66:	2b03      	cmp	r3, #3
 8012d68:	d806      	bhi.n	8012d78 <sensirion_shdlc_rx+0x110>
 8012d6a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012d6e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012d72:	3b02      	subs	r3, #2
 8012d74:	429a      	cmp	r2, r3
 8012d76:	dbb9      	blt.n	8012cec <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8012d78:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	d103      	bne.n	8012d88 <sensirion_shdlc_rx+0x120>
 8012d80:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012d88:	f06f 0304 	mvn.w	r3, #4
 8012d8c:	e0d8      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8012d8e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d92:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	78db      	ldrb	r3, [r3, #3]
 8012d9a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8012d9e:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 8012da2:	7812      	ldrb	r2, [r2, #0]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d202      	bcs.n	8012dae <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8012da8:	f06f 0306 	mvn.w	r3, #6
 8012dac:	e0c8      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012dae:	2300      	movs	r3, #0
 8012db0:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012db4:	2300      	movs	r3, #0
 8012db6:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012dba:	e040      	b.n	8012e3e <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8012dbc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d018      	beq.n	8012df6 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012dc4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012dc8:	4a60      	ldr	r2, [pc, #384]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012dca:	5cd2      	ldrb	r2, [r2, r3]
 8012dcc:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012dd0:	1c59      	adds	r1, r3, #1
 8012dd2:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ddc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	185c      	adds	r4, r3, r1
 8012de4:	4610      	mov	r0, r2
 8012de6:	f7ff fe23 	bl	8012a30 <sensirion_shdlc_unstuff_byte>
 8012dea:	4603      	mov	r3, r0
 8012dec:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012dee:	2300      	movs	r3, #0
 8012df0:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012df4:	e01e      	b.n	8012e34 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012df6:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012dfa:	4a54      	ldr	r2, [pc, #336]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012dfc:	5cd3      	ldrb	r3, [r2, r3]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff fe05 	bl	8012a0e <sensirion_shdlc_check_unstuff>
 8012e04:	4603      	mov	r3, r0
 8012e06:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012e0a:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d110      	bne.n	8012e34 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8012e12:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012e16:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012e1a:	1c59      	adds	r1, r3, #1
 8012e1c:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012e20:	4619      	mov	r1, r3
 8012e22:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e26:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	440b      	add	r3, r1
 8012e2e:	4947      	ldr	r1, [pc, #284]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012e30:	5c8a      	ldrb	r2, [r1, r2]
 8012e32:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012e34:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012e38:	3301      	adds	r3, #1
 8012e3a:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012e3e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e42:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	78db      	ldrb	r3, [r3, #3]
 8012e4a:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d206      	bcs.n	8012e60 <sensirion_shdlc_rx+0x1f8>
 8012e52:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012e56:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012e5a:	3b02      	subs	r3, #2
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	dbad      	blt.n	8012dbc <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8012e60:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012e68:	f06f 0304 	mvn.w	r3, #4
 8012e6c:	e068      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8012e6e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012e72:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	78db      	ldrb	r3, [r3, #3]
 8012e7a:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d202      	bcs.n	8012e88 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012e82:	f06f 0304 	mvn.w	r3, #4
 8012e86:	e05b      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8012e88:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8012e92:	461a      	mov	r2, r3
 8012e94:	4b2d      	ldr	r3, [pc, #180]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012e96:	5c9b      	ldrb	r3, [r3, r2]
 8012e98:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8012e9c:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff fdb4 	bl	8012a0e <sensirion_shdlc_check_unstuff>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d00d      	beq.n	8012ec8 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8012eac:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012eb0:	1c5a      	adds	r2, r3, #1
 8012eb2:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	4b24      	ldr	r3, [pc, #144]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012eba:	5c9b      	ldrb	r3, [r3, r2]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7ff fdb7 	bl	8012a30 <sensirion_shdlc_unstuff_byte>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8012ec8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ecc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	781a      	ldrb	r2, [r3, #0]
 8012ed4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ed8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	785b      	ldrb	r3, [r3, #1]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	b2da      	uxtb	r2, r3
 8012ee4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ee8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	789b      	ldrb	r3, [r3, #2]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	b2d8      	uxtb	r0, r3
 8012ef4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012ef8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	78d9      	ldrb	r1, [r3, #3]
 8012f00:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012f04:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	f7ff fd21 	bl	8012950 <sensirion_shdlc_crc>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	461a      	mov	r2, r3
 8012f12:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d002      	beq.n	8012f20 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8012f1a:	f06f 0303 	mvn.w	r3, #3
 8012f1e:	e00f      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8012f20:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012f24:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	da05      	bge.n	8012f38 <sensirion_shdlc_rx+0x2d0>
 8012f2c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012f30:	4a06      	ldr	r2, [pc, #24]	; (8012f4c <sensirion_shdlc_rx+0x2e4>)
 8012f32:	5cd3      	ldrb	r3, [r2, r3]
 8012f34:	2b7e      	cmp	r3, #126	; 0x7e
 8012f36:	d002      	beq.n	8012f3e <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8012f38:	f06f 0302 	mvn.w	r3, #2
 8012f3c:	e000      	b.n	8012f40 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd90      	pop	{r4, r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	200014f8 	.word	0x200014f8

08012f50 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8012f50:	b580      	push	{r7, lr}
 8012f52:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8012f54:	4819      	ldr	r0, [pc, #100]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f56:	f7f8 f9c6 	bl	800b2e6 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8012f5a:	4b18      	ldr	r3, [pc, #96]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f5c:	4a18      	ldr	r2, [pc, #96]	; (8012fc0 <sensirion_uart_open+0x70>)
 8012f5e:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8012f60:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f62:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012f66:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012f68:	4b14      	ldr	r3, [pc, #80]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8012f6e:	4b13      	ldr	r3, [pc, #76]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8012f74:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f76:	2200      	movs	r2, #0
 8012f78:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8012f7a:	4b10      	ldr	r3, [pc, #64]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f7c:	220c      	movs	r2, #12
 8012f7e:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012f80:	4b0e      	ldr	r3, [pc, #56]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f82:	2200      	movs	r2, #0
 8012f84:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012f86:	4b0d      	ldr	r3, [pc, #52]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012f8c:	480b      	ldr	r0, [pc, #44]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012f8e:	f7f8 f95d 	bl	800b24c <HAL_UART_Init>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d001      	beq.n	8012f9c <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8012f98:	f7ef fd9e 	bl	8002ad8 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8012f9c:	f240 220a 	movw	r2, #522	; 0x20a
 8012fa0:	4908      	ldr	r1, [pc, #32]	; (8012fc4 <sensirion_uart_open+0x74>)
 8012fa2:	4806      	ldr	r0, [pc, #24]	; (8012fbc <sensirion_uart_open+0x6c>)
 8012fa4:	f7f8 fa90 	bl	800b4c8 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8012fa8:	4b07      	ldr	r3, [pc, #28]	; (8012fc8 <sensirion_uart_open+0x78>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8012fae:	4b07      	ldr	r3, [pc, #28]	; (8012fcc <sensirion_uart_open+0x7c>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20001a18 	.word	0x20001a18
 8012fc0:	40004400 	.word	0x40004400
 8012fc4:	200014f8 	.word	0x200014f8
 8012fc8:	20001ab4 	.word	0x20001ab4
 8012fcc:	20001ab6 	.word	0x20001ab6

08012fd0 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8012fd4:	4804      	ldr	r0, [pc, #16]	; (8012fe8 <sensirion_uart_close+0x18>)
 8012fd6:	f7f8 f986 	bl	800b2e6 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8012fda:	4803      	ldr	r0, [pc, #12]	; (8012fe8 <sensirion_uart_close+0x18>)
 8012fdc:	f7f0 f89c 	bl	8003118 <HAL_UART_MspDeInit>
    return 0;
 8012fe0:	2300      	movs	r3, #0
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	20001a18 	.word	0x20001a18

08012fec <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8012ff8:	88fa      	ldrh	r2, [r7, #6]
 8012ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8012ffe:	6839      	ldr	r1, [r7, #0]
 8013000:	4807      	ldr	r0, [pc, #28]	; (8013020 <sensirion_uart_tx+0x34>)
 8013002:	f7f8 f99f 	bl	800b344 <HAL_UART_Transmit>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d102      	bne.n	8013012 <sensirion_uart_tx+0x26>
		{
			return data_len;
 801300c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013010:	e001      	b.n	8013016 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013012:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013016:	4618      	mov	r0, r3
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	20001a18 	.word	0x20001a18

08013024 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013030:	4a07      	ldr	r2, [pc, #28]	; (8013050 <HAL_UARTEx_RxEventCallback+0x2c>)
 8013032:	887b      	ldrh	r3, [r7, #2]
 8013034:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013036:	4b07      	ldr	r3, [pc, #28]	; (8013054 <HAL_UARTEx_RxEventCallback+0x30>)
 8013038:	2201      	movs	r2, #1
 801303a:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 801303c:	f240 220a 	movw	r2, #522	; 0x20a
 8013040:	4905      	ldr	r1, [pc, #20]	; (8013058 <HAL_UARTEx_RxEventCallback+0x34>)
 8013042:	4806      	ldr	r0, [pc, #24]	; (801305c <HAL_UARTEx_RxEventCallback+0x38>)
 8013044:	f7f8 fa40 	bl	800b4c8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013048:	bf00      	nop
 801304a:	3708      	adds	r7, #8
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20001ab4 	.word	0x20001ab4
 8013054:	20001ab8 	.word	0x20001ab8
 8013058:	200014f8 	.word	0x200014f8
 801305c:	20001a18 	.word	0x20001a18

08013060 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	4603      	mov	r3, r0
 8013068:	6039      	str	r1, [r7, #0]
 801306a:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013070:	e005      	b.n	801307e <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	3301      	adds	r3, #1
 8013076:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013078:	200a      	movs	r0, #10
 801307a:	f7f0 fa9d 	bl	80035b8 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 801307e:	4b0b      	ldr	r3, [pc, #44]	; (80130ac <sensirion_uart_rx+0x4c>)
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d102      	bne.n	801308c <sensirion_uart_rx+0x2c>
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2b02      	cmp	r3, #2
 801308a:	d9f2      	bls.n	8013072 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 801308c:	4b07      	ldr	r3, [pc, #28]	; (80130ac <sensirion_uart_rx+0x4c>)
 801308e:	2200      	movs	r2, #0
 8013090:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8013092:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <sensirion_uart_rx+0x50>)
 8013094:	2200      	movs	r2, #0
 8013096:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013098:	4b06      	ldr	r3, [pc, #24]	; (80130b4 <sensirion_uart_rx+0x54>)
 801309a:	2200      	movs	r2, #0
 801309c:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 801309e:	4b06      	ldr	r3, [pc, #24]	; (80130b8 <sensirion_uart_rx+0x58>)
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	b21b      	sxth	r3, r3
	//return i;
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3710      	adds	r7, #16
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	20001ab8 	.word	0x20001ab8
 80130b0:	20001aba 	.word	0x20001aba
 80130b4:	20001ab6 	.word	0x20001ab6
 80130b8:	20001ab4 	.word	0x20001ab4

080130bc <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	4a06      	ldr	r2, [pc, #24]	; (80130e0 <sensirion_sleep_usec+0x24>)
 80130c8:	fba2 2303 	umull	r2, r3, r2, r3
 80130cc:	099b      	lsrs	r3, r3, #6
 80130ce:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7f0 fa71 	bl	80035b8 <HAL_Delay>
}
 80130d6:	bf00      	nop
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	10624dd3 	.word	0x10624dd3

080130e4 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b08a      	sub	sp, #40	; 0x28
 80130e8:	af04      	add	r7, sp, #16
 80130ea:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80130ec:	2303      	movs	r3, #3
 80130ee:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 80130f0:	f107 020c 	add.w	r2, r7, #12
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	9302      	str	r3, [sp, #8]
 80130f8:	f107 0310 	add.w	r3, r7, #16
 80130fc:	9301      	str	r3, [sp, #4]
 80130fe:	2320      	movs	r3, #32
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	4613      	mov	r3, r2
 8013104:	2201      	movs	r2, #1
 8013106:	21d0      	movs	r1, #208	; 0xd0
 8013108:	2000      	movs	r0, #0
 801310a:	f7ff fcb3 	bl	8012a74 <sensirion_shdlc_xcv>
 801310e:	4603      	mov	r3, r0
 8013110:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8013112:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013116:	2b00      	cmp	r3, #0
 8013118:	da02      	bge.n	8013120 <sps30_get_serial+0x3c>
        return ret;
 801311a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801311e:	e009      	b.n	8013134 <sps30_get_serial+0x50>

    if (header.state)
 8013120:	7cbb      	ldrb	r3, [r7, #18]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d005      	beq.n	8013132 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8013126:	7cbb      	ldrb	r3, [r7, #18]
 8013128:	b21b      	sxth	r3, r3
 801312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801312e:	b21b      	sxth	r3, r3
 8013130:	e000      	b.n	8013134 <sps30_get_serial+0x50>

    return 0;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3718      	adds	r7, #24
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8013142:	f240 3301 	movw	r3, #769	; 0x301
 8013146:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013148:	463a      	mov	r2, r7
 801314a:	2300      	movs	r3, #0
 801314c:	9302      	str	r3, [sp, #8]
 801314e:	1d3b      	adds	r3, r7, #4
 8013150:	9301      	str	r3, [sp, #4]
 8013152:	2300      	movs	r3, #0
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	4613      	mov	r3, r2
 8013158:	2202      	movs	r2, #2
 801315a:	2100      	movs	r1, #0
 801315c:	2000      	movs	r0, #0
 801315e:	f7ff fc89 	bl	8012a74 <sensirion_shdlc_xcv>
 8013162:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8013172:	2300      	movs	r3, #0
 8013174:	9302      	str	r3, [sp, #8]
 8013176:	1d3b      	adds	r3, r7, #4
 8013178:	9301      	str	r3, [sp, #4]
 801317a:	2300      	movs	r3, #0
 801317c:	9300      	str	r3, [sp, #0]
 801317e:	2300      	movs	r3, #0
 8013180:	2200      	movs	r2, #0
 8013182:	2101      	movs	r1, #1
 8013184:	2000      	movs	r0, #0
 8013186:	f7ff fc75 	bl	8012a74 <sensirion_shdlc_xcv>
 801318a:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8013194:	b580      	push	{r7, lr}
 8013196:	b092      	sub	sp, #72	; 0x48
 8013198:	af04      	add	r7, sp, #16
 801319a:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 801319c:	f107 0308 	add.w	r3, r7, #8
 80131a0:	9302      	str	r3, [sp, #8]
 80131a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80131a6:	9301      	str	r3, [sp, #4]
 80131a8:	2328      	movs	r3, #40	; 0x28
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	2300      	movs	r3, #0
 80131ae:	2200      	movs	r2, #0
 80131b0:	2103      	movs	r1, #3
 80131b2:	2000      	movs	r0, #0
 80131b4:	f7ff fc5e 	bl	8012a74 <sensirion_shdlc_xcv>
 80131b8:	4603      	mov	r3, r0
 80131ba:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80131bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d002      	beq.n	80131ca <sps30_read_measurement+0x36>
        return error;
 80131c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80131c8:	e07f      	b.n	80132ca <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80131ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131ce:	2b28      	cmp	r3, #40	; 0x28
 80131d0:	d002      	beq.n	80131d8 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80131d2:	f04f 33ff 	mov.w	r3, #4294967295
 80131d6:	e078      	b.n	80132ca <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80131d8:	f107 0308 	add.w	r3, r7, #8
 80131dc:	4618      	mov	r0, r3
 80131de:	f7ff fba6 	bl	801292e <sensirion_bytes_to_float>
 80131e2:	eef0 7a40 	vmov.f32	s15, s0
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80131ec:	f107 0308 	add.w	r3, r7, #8
 80131f0:	3304      	adds	r3, #4
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7ff fb9b 	bl	801292e <sensirion_bytes_to_float>
 80131f8:	eef0 7a40 	vmov.f32	s15, s0
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8013202:	f107 0308 	add.w	r3, r7, #8
 8013206:	3308      	adds	r3, #8
 8013208:	4618      	mov	r0, r3
 801320a:	f7ff fb90 	bl	801292e <sensirion_bytes_to_float>
 801320e:	eef0 7a40 	vmov.f32	s15, s0
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8013218:	f107 0308 	add.w	r3, r7, #8
 801321c:	330c      	adds	r3, #12
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff fb85 	bl	801292e <sensirion_bytes_to_float>
 8013224:	eef0 7a40 	vmov.f32	s15, s0
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 801322e:	f107 0308 	add.w	r3, r7, #8
 8013232:	3310      	adds	r3, #16
 8013234:	4618      	mov	r0, r3
 8013236:	f7ff fb7a 	bl	801292e <sensirion_bytes_to_float>
 801323a:	eef0 7a40 	vmov.f32	s15, s0
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8013244:	f107 0308 	add.w	r3, r7, #8
 8013248:	3314      	adds	r3, #20
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff fb6f 	bl	801292e <sensirion_bytes_to_float>
 8013250:	eef0 7a40 	vmov.f32	s15, s0
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 801325a:	f107 0308 	add.w	r3, r7, #8
 801325e:	3318      	adds	r3, #24
 8013260:	4618      	mov	r0, r3
 8013262:	f7ff fb64 	bl	801292e <sensirion_bytes_to_float>
 8013266:	eef0 7a40 	vmov.f32	s15, s0
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8013270:	f107 0308 	add.w	r3, r7, #8
 8013274:	331c      	adds	r3, #28
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff fb59 	bl	801292e <sensirion_bytes_to_float>
 801327c:	eef0 7a40 	vmov.f32	s15, s0
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8013286:	f107 0308 	add.w	r3, r7, #8
 801328a:	3320      	adds	r3, #32
 801328c:	4618      	mov	r0, r3
 801328e:	f7ff fb4e 	bl	801292e <sensirion_bytes_to_float>
 8013292:	eef0 7a40 	vmov.f32	s15, s0
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 801329c:	f107 0308 	add.w	r3, r7, #8
 80132a0:	3324      	adds	r3, #36	; 0x24
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7ff fb43 	bl	801292e <sensirion_bytes_to_float>
 80132a8:	eef0 7a40 	vmov.f32	s15, s0
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 80132b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d006      	beq.n	80132c8 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 80132ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80132be:	b21b      	sxth	r3, r3
 80132c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80132c4:	b21b      	sxth	r3, r3
 80132c6:	e000      	b.n	80132ca <sps30_read_measurement+0x136>
    }

    return 0;
 80132c8:	2300      	movs	r3, #0
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3738      	adds	r7, #56	; 0x38
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b086      	sub	sp, #24
 80132d6:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 80132d8:	2300      	movs	r3, #0
 80132da:	9302      	str	r3, [sp, #8]
 80132dc:	1d3b      	adds	r3, r7, #4
 80132de:	9301      	str	r3, [sp, #4]
 80132e0:	2300      	movs	r3, #0
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	2300      	movs	r3, #0
 80132e6:	2200      	movs	r2, #0
 80132e8:	2156      	movs	r1, #86	; 0x56
 80132ea:	2000      	movs	r0, #0
 80132ec:	f7ff fbc2 	bl	8012a74 <sensirion_shdlc_xcv>
 80132f0:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3708      	adds	r7, #8
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}

080132fa <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 80132fa:	b580      	push	{r7, lr}
 80132fc:	b08a      	sub	sp, #40	; 0x28
 80132fe:	af04      	add	r7, sp, #16
 8013300:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8013302:	f107 0308 	add.w	r3, r7, #8
 8013306:	9302      	str	r3, [sp, #8]
 8013308:	f107 0310 	add.w	r3, r7, #16
 801330c:	9301      	str	r3, [sp, #4]
 801330e:	2307      	movs	r3, #7
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	2300      	movs	r3, #0
 8013314:	2200      	movs	r2, #0
 8013316:	21d1      	movs	r1, #209	; 0xd1
 8013318:	2000      	movs	r0, #0
 801331a:	f7ff fbab 	bl	8012a74 <sensirion_shdlc_xcv>
 801331e:	4603      	mov	r3, r0
 8013320:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8013322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d002      	beq.n	8013330 <sps30_read_version+0x36>
        return error;
 801332a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801332e:	e01f      	b.n	8013370 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8013330:	7cfb      	ldrb	r3, [r7, #19]
 8013332:	2b07      	cmp	r3, #7
 8013334:	d002      	beq.n	801333c <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013336:	f04f 33ff 	mov.w	r3, #4294967295
 801333a:	e019      	b.n	8013370 <sps30_read_version+0x76>
    }

    if (header.state) {
 801333c:	7cbb      	ldrb	r3, [r7, #18]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d005      	beq.n	801334e <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8013342:	7cbb      	ldrb	r3, [r7, #18]
 8013344:	b21b      	sxth	r3, r3
 8013346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801334a:	b21b      	sxth	r3, r3
 801334c:	e010      	b.n	8013370 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 801334e:	7a3a      	ldrb	r2, [r7, #8]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8013354:	7a7a      	ldrb	r2, [r7, #9]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 801335a:	7afa      	ldrb	r2, [r7, #11]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8013360:	7b7a      	ldrb	r2, [r7, #13]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8013366:	7bba      	ldrb	r2, [r7, #14]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	711a      	strb	r2, [r3, #4]

    return error;
 801336c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3718      	adds	r7, #24
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	460b      	mov	r3, r1
 8013382:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013384:	f640 0074 	movw	r0, #2164	; 0x874
 8013388:	f007 fd3a 	bl	801ae00 <USBD_static_malloc>
 801338c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d109      	bne.n	80133a8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	32b0      	adds	r2, #176	; 0xb0
 801339e:	2100      	movs	r1, #0
 80133a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80133a4:	2302      	movs	r3, #2
 80133a6:	e06e      	b.n	8013486 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	32b0      	adds	r2, #176	; 0xb0
 80133b2:	68f9      	ldr	r1, [r7, #12]
 80133b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	32b0      	adds	r2, #176	; 0xb0
 80133c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	7c1b      	ldrb	r3, [r3, #16]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d12b      	bne.n	801342c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80133d4:	4b2e      	ldr	r3, [pc, #184]	; (8013490 <USBD_MSC_Init+0x118>)
 80133d6:	7819      	ldrb	r1, [r3, #0]
 80133d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133dc:	2202      	movs	r2, #2
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f007 fbcb 	bl	801ab7a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80133e4:	4b2a      	ldr	r3, [pc, #168]	; (8013490 <USBD_MSC_Init+0x118>)
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	f003 020f 	and.w	r2, r3, #15
 80133ec:	6879      	ldr	r1, [r7, #4]
 80133ee:	4613      	mov	r3, r2
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	4413      	add	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	440b      	add	r3, r1
 80133f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80133fc:	2201      	movs	r2, #1
 80133fe:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013400:	4b24      	ldr	r3, [pc, #144]	; (8013494 <USBD_MSC_Init+0x11c>)
 8013402:	7819      	ldrb	r1, [r3, #0]
 8013404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013408:	2202      	movs	r2, #2
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f007 fbb5 	bl	801ab7a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013410:	4b20      	ldr	r3, [pc, #128]	; (8013494 <USBD_MSC_Init+0x11c>)
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	f003 020f 	and.w	r2, r3, #15
 8013418:	6879      	ldr	r1, [r7, #4]
 801341a:	4613      	mov	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	4413      	add	r3, r2
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	440b      	add	r3, r1
 8013424:	3324      	adds	r3, #36	; 0x24
 8013426:	2201      	movs	r2, #1
 8013428:	801a      	strh	r2, [r3, #0]
 801342a:	e028      	b.n	801347e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801342c:	4b18      	ldr	r3, [pc, #96]	; (8013490 <USBD_MSC_Init+0x118>)
 801342e:	7819      	ldrb	r1, [r3, #0]
 8013430:	2340      	movs	r3, #64	; 0x40
 8013432:	2202      	movs	r2, #2
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f007 fba0 	bl	801ab7a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801343a:	4b15      	ldr	r3, [pc, #84]	; (8013490 <USBD_MSC_Init+0x118>)
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	f003 020f 	and.w	r2, r3, #15
 8013442:	6879      	ldr	r1, [r7, #4]
 8013444:	4613      	mov	r3, r2
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	4413      	add	r3, r2
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	440b      	add	r3, r1
 801344e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013452:	2201      	movs	r2, #1
 8013454:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013456:	4b0f      	ldr	r3, [pc, #60]	; (8013494 <USBD_MSC_Init+0x11c>)
 8013458:	7819      	ldrb	r1, [r3, #0]
 801345a:	2340      	movs	r3, #64	; 0x40
 801345c:	2202      	movs	r2, #2
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f007 fb8b 	bl	801ab7a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013464:	4b0b      	ldr	r3, [pc, #44]	; (8013494 <USBD_MSC_Init+0x11c>)
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	f003 020f 	and.w	r2, r3, #15
 801346c:	6879      	ldr	r1, [r7, #4]
 801346e:	4613      	mov	r3, r2
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	4413      	add	r3, r2
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	440b      	add	r3, r1
 8013478:	3324      	adds	r3, #36	; 0x24
 801347a:	2201      	movs	r2, #1
 801347c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 fa2c 	bl	80138dc <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013484:	2300      	movs	r3, #0
}
 8013486:	4618      	mov	r0, r3
 8013488:	3710      	adds	r7, #16
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	200000c7 	.word	0x200000c7
 8013494:	200000c6 	.word	0x200000c6

08013498 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	460b      	mov	r3, r1
 80134a2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80134a4:	4b26      	ldr	r3, [pc, #152]	; (8013540 <USBD_MSC_DeInit+0xa8>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	4619      	mov	r1, r3
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f007 fb8b 	bl	801abc6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80134b0:	4b23      	ldr	r3, [pc, #140]	; (8013540 <USBD_MSC_DeInit+0xa8>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	f003 020f 	and.w	r2, r3, #15
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	4613      	mov	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4413      	add	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	440b      	add	r3, r1
 80134c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80134c8:	2200      	movs	r2, #0
 80134ca:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80134cc:	4b1d      	ldr	r3, [pc, #116]	; (8013544 <USBD_MSC_DeInit+0xac>)
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	4619      	mov	r1, r3
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f007 fb77 	bl	801abc6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80134d8:	4b1a      	ldr	r3, [pc, #104]	; (8013544 <USBD_MSC_DeInit+0xac>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	f003 020f 	and.w	r2, r3, #15
 80134e0:	6879      	ldr	r1, [r7, #4]
 80134e2:	4613      	mov	r3, r2
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4413      	add	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	440b      	add	r3, r1
 80134ec:	3324      	adds	r3, #36	; 0x24
 80134ee:	2200      	movs	r2, #0
 80134f0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	32b0      	adds	r2, #176	; 0xb0
 80134fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d018      	beq.n	8013536 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 fa67 	bl	80139d8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	32b0      	adds	r2, #176	; 0xb0
 8013514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013518:	4618      	mov	r0, r3
 801351a:	f007 fc7f 	bl	801ae1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	32b0      	adds	r2, #176	; 0xb0
 8013528:	2100      	movs	r1, #0
 801352a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2200      	movs	r2, #0
 8013532:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013536:	2300      	movs	r3, #0
}
 8013538:	4618      	mov	r0, r3
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	200000c7 	.word	0x200000c7
 8013544:	200000c6 	.word	0x200000c6

08013548 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b086      	sub	sp, #24
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	32b0      	adds	r2, #176	; 0xb0
 801355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013560:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013562:	2300      	movs	r3, #0
 8013564:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013566:	2300      	movs	r3, #0
 8013568:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013570:	2303      	movs	r3, #3
 8013572:	e0e1      	b.n	8013738 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801357c:	2b00      	cmp	r3, #0
 801357e:	d053      	beq.n	8013628 <USBD_MSC_Setup+0xe0>
 8013580:	2b20      	cmp	r3, #32
 8013582:	f040 80d1 	bne.w	8013728 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	785b      	ldrb	r3, [r3, #1]
 801358a:	2bfe      	cmp	r3, #254	; 0xfe
 801358c:	d002      	beq.n	8013594 <USBD_MSC_Setup+0x4c>
 801358e:	2bff      	cmp	r3, #255	; 0xff
 8013590:	d02a      	beq.n	80135e8 <USBD_MSC_Setup+0xa0>
 8013592:	e041      	b.n	8013618 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	885b      	ldrh	r3, [r3, #2]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d11e      	bne.n	80135da <USBD_MSC_Setup+0x92>
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	88db      	ldrh	r3, [r3, #6]
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d11a      	bne.n	80135da <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	da15      	bge.n	80135da <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	33b0      	adds	r3, #176	; 0xb0
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	4413      	add	r3, r2
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	699b      	ldr	r3, [r3, #24]
 80135c0:	4798      	blx	r3
 80135c2:	4603      	mov	r3, r0
 80135c4:	461a      	mov	r2, r3
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	2201      	movs	r2, #1
 80135ce:	4619      	mov	r1, r3
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f003 f949 	bl	8016868 <USBD_CtlSendData>
 80135d6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135d8:	e025      	b.n	8013626 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80135da:	6839      	ldr	r1, [r7, #0]
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f003 f8d2 	bl	8016786 <USBD_CtlError>
            ret = USBD_FAIL;
 80135e2:	2303      	movs	r3, #3
 80135e4:	75fb      	strb	r3, [r7, #23]
          break;
 80135e6:	e01e      	b.n	8013626 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	885b      	ldrh	r3, [r3, #2]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10c      	bne.n	801360a <USBD_MSC_Setup+0xc2>
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	88db      	ldrh	r3, [r3, #6]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d108      	bne.n	801360a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80135fe:	2b00      	cmp	r3, #0
 8013600:	db03      	blt.n	801360a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 f9b4 	bl	8013970 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013608:	e00d      	b.n	8013626 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801360a:	6839      	ldr	r1, [r7, #0]
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f003 f8ba 	bl	8016786 <USBD_CtlError>
            ret = USBD_FAIL;
 8013612:	2303      	movs	r3, #3
 8013614:	75fb      	strb	r3, [r7, #23]
          break;
 8013616:	e006      	b.n	8013626 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f003 f8b3 	bl	8016786 <USBD_CtlError>
          ret = USBD_FAIL;
 8013620:	2303      	movs	r3, #3
 8013622:	75fb      	strb	r3, [r7, #23]
          break;
 8013624:	bf00      	nop
      }
      break;
 8013626:	e086      	b.n	8013736 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	785b      	ldrb	r3, [r3, #1]
 801362c:	2b0b      	cmp	r3, #11
 801362e:	d872      	bhi.n	8013716 <USBD_MSC_Setup+0x1ce>
 8013630:	a201      	add	r2, pc, #4	; (adr r2, 8013638 <USBD_MSC_Setup+0xf0>)
 8013632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013636:	bf00      	nop
 8013638:	08013669 	.word	0x08013669
 801363c:	080136e5 	.word	0x080136e5
 8013640:	08013717 	.word	0x08013717
 8013644:	08013717 	.word	0x08013717
 8013648:	08013717 	.word	0x08013717
 801364c:	08013717 	.word	0x08013717
 8013650:	08013717 	.word	0x08013717
 8013654:	08013717 	.word	0x08013717
 8013658:	08013717 	.word	0x08013717
 801365c:	08013717 	.word	0x08013717
 8013660:	08013693 	.word	0x08013693
 8013664:	080136bd 	.word	0x080136bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801366e:	b2db      	uxtb	r3, r3
 8013670:	2b03      	cmp	r3, #3
 8013672:	d107      	bne.n	8013684 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013674:	f107 030e 	add.w	r3, r7, #14
 8013678:	2202      	movs	r2, #2
 801367a:	4619      	mov	r1, r3
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f003 f8f3 	bl	8016868 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013682:	e050      	b.n	8013726 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013684:	6839      	ldr	r1, [r7, #0]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f003 f87d 	bl	8016786 <USBD_CtlError>
            ret = USBD_FAIL;
 801368c:	2303      	movs	r3, #3
 801368e:	75fb      	strb	r3, [r7, #23]
          break;
 8013690:	e049      	b.n	8013726 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b03      	cmp	r3, #3
 801369c:	d107      	bne.n	80136ae <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	3304      	adds	r3, #4
 80136a2:	2201      	movs	r2, #1
 80136a4:	4619      	mov	r1, r3
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f003 f8de 	bl	8016868 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80136ac:	e03b      	b.n	8013726 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f003 f868 	bl	8016786 <USBD_CtlError>
            ret = USBD_FAIL;
 80136b6:	2303      	movs	r3, #3
 80136b8:	75fb      	strb	r3, [r7, #23]
          break;
 80136ba:	e034      	b.n	8013726 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	2b03      	cmp	r3, #3
 80136c6:	d106      	bne.n	80136d6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	885b      	ldrh	r3, [r3, #2]
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	461a      	mov	r2, r3
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80136d4:	e027      	b.n	8013726 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80136d6:	6839      	ldr	r1, [r7, #0]
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f003 f854 	bl	8016786 <USBD_CtlError>
            ret = USBD_FAIL;
 80136de:	2303      	movs	r3, #3
 80136e0:	75fb      	strb	r3, [r7, #23]
          break;
 80136e2:	e020      	b.n	8013726 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136ea:	b2db      	uxtb	r3, r3
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	d119      	bne.n	8013724 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	885b      	ldrh	r3, [r3, #2]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d115      	bne.n	8013724 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	889b      	ldrh	r3, [r3, #4]
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	4619      	mov	r1, r3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f007 fa7f 	bl	801ac04 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	889b      	ldrh	r3, [r3, #4]
 801370a:	b2db      	uxtb	r3, r3
 801370c:	4619      	mov	r1, r3
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 fb2e 	bl	8013d70 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8013714:	e006      	b.n	8013724 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8013716:	6839      	ldr	r1, [r7, #0]
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f003 f834 	bl	8016786 <USBD_CtlError>
          ret = USBD_FAIL;
 801371e:	2303      	movs	r3, #3
 8013720:	75fb      	strb	r3, [r7, #23]
          break;
 8013722:	e000      	b.n	8013726 <USBD_MSC_Setup+0x1de>
          break;
 8013724:	bf00      	nop
      }
      break;
 8013726:	e006      	b.n	8013736 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8013728:	6839      	ldr	r1, [r7, #0]
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f003 f82b 	bl	8016786 <USBD_CtlError>
      ret = USBD_FAIL;
 8013730:	2303      	movs	r3, #3
 8013732:	75fb      	strb	r3, [r7, #23]
      break;
 8013734:	bf00      	nop
  }

  return (uint8_t)ret;
 8013736:	7dfb      	ldrb	r3, [r7, #23]
}
 8013738:	4618      	mov	r0, r3
 801373a:	3718      	adds	r7, #24
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	460b      	mov	r3, r1
 801374a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801374c:	78fb      	ldrb	r3, [r7, #3]
 801374e:	4619      	mov	r1, r3
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f000 f959 	bl	8013a08 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013756:	2300      	movs	r3, #0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801376c:	78fb      	ldrb	r3, [r7, #3]
 801376e:	4619      	mov	r1, r3
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f000 f983 	bl	8013a7c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013776:	2300      	movs	r3, #0
}
 8013778:	4618      	mov	r0, r3
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013788:	2181      	movs	r1, #129	; 0x81
 801378a:	4812      	ldr	r0, [pc, #72]	; (80137d4 <USBD_MSC_GetHSCfgDesc+0x54>)
 801378c:	f002 f9c3 	bl	8015b16 <USBD_GetEpDesc>
 8013790:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013792:	2101      	movs	r1, #1
 8013794:	480f      	ldr	r0, [pc, #60]	; (80137d4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8013796:	f002 f9be 	bl	8015b16 <USBD_GetEpDesc>
 801379a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	2200      	movs	r2, #0
 80137a6:	711a      	strb	r2, [r3, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f042 0202 	orr.w	r2, r2, #2
 80137ae:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d006      	beq.n	80137c4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	2200      	movs	r2, #0
 80137ba:	711a      	strb	r2, [r3, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	f042 0202 	orr.w	r2, r2, #2
 80137c2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2220      	movs	r2, #32
 80137c8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80137ca:	4b02      	ldr	r3, [pc, #8]	; (80137d4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	2000009c 	.word	0x2000009c

080137d8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80137e0:	2181      	movs	r1, #129	; 0x81
 80137e2:	4812      	ldr	r0, [pc, #72]	; (801382c <USBD_MSC_GetFSCfgDesc+0x54>)
 80137e4:	f002 f997 	bl	8015b16 <USBD_GetEpDesc>
 80137e8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80137ea:	2101      	movs	r1, #1
 80137ec:	480f      	ldr	r0, [pc, #60]	; (801382c <USBD_MSC_GetFSCfgDesc+0x54>)
 80137ee:	f002 f992 	bl	8015b16 <USBD_GetEpDesc>
 80137f2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d006      	beq.n	8013808 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2200      	movs	r2, #0
 80137fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013802:	711a      	strb	r2, [r3, #4]
 8013804:	2200      	movs	r2, #0
 8013806:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d006      	beq.n	801381c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	2200      	movs	r2, #0
 8013812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013816:	711a      	strb	r2, [r3, #4]
 8013818:	2200      	movs	r2, #0
 801381a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2220      	movs	r2, #32
 8013820:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013822:	4b02      	ldr	r3, [pc, #8]	; (801382c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013824:	4618      	mov	r0, r3
 8013826:	3710      	adds	r7, #16
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	2000009c 	.word	0x2000009c

08013830 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013838:	2181      	movs	r1, #129	; 0x81
 801383a:	4812      	ldr	r0, [pc, #72]	; (8013884 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801383c:	f002 f96b 	bl	8015b16 <USBD_GetEpDesc>
 8013840:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013842:	2101      	movs	r1, #1
 8013844:	480f      	ldr	r0, [pc, #60]	; (8013884 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013846:	f002 f966 	bl	8015b16 <USBD_GetEpDesc>
 801384a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d006      	beq.n	8013860 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2200      	movs	r2, #0
 8013856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801385a:	711a      	strb	r2, [r3, #4]
 801385c:	2200      	movs	r2, #0
 801385e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d006      	beq.n	8013874 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	2200      	movs	r2, #0
 801386a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801386e:	711a      	strb	r2, [r3, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2220      	movs	r2, #32
 8013878:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801387a:	4b02      	ldr	r3, [pc, #8]	; (8013884 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801387c:	4618      	mov	r0, r3
 801387e:	3710      	adds	r7, #16
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	2000009c 	.word	0x2000009c

08013888 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013888:	b480      	push	{r7}
 801388a:	b083      	sub	sp, #12
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	220a      	movs	r2, #10
 8013894:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013896:	4b03      	ldr	r3, [pc, #12]	; (80138a4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013898:	4618      	mov	r0, r3
 801389a:	370c      	adds	r7, #12
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr
 80138a4:	200000bc 	.word	0x200000bc

080138a8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b083      	sub	sp, #12
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d101      	bne.n	80138bc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80138b8:	2303      	movs	r3, #3
 80138ba:	e009      	b.n	80138d0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	33b0      	adds	r3, #176	; 0xb0
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4413      	add	r3, r2
 80138ca:	683a      	ldr	r2, [r7, #0]
 80138cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80138ce:	2300      	movs	r3, #0
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	32b0      	adds	r2, #176	; 0xb0
 80138ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138f2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d032      	beq.n	8013960 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2200      	movs	r2, #0
 801390a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2200      	movs	r2, #0
 8013912:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2200      	movs	r2, #0
 801391a:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	33b0      	adds	r3, #176	; 0xb0
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	4413      	add	r3, r2
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2000      	movs	r0, #0
 8013932:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013934:	4b0c      	ldr	r3, [pc, #48]	; (8013968 <MSC_BOT_Init+0x8c>)
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	4619      	mov	r1, r3
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f007 f962 	bl	801ac04 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013940:	4b0a      	ldr	r3, [pc, #40]	; (801396c <MSC_BOT_Init+0x90>)
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	4619      	mov	r1, r3
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f007 f95c 	bl	801ac04 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801394c:	4b06      	ldr	r3, [pc, #24]	; (8013968 <MSC_BOT_Init+0x8c>)
 801394e:	7819      	ldrb	r1, [r3, #0]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013956:	231f      	movs	r3, #31
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f007 fa1c 	bl	801ad96 <USBD_LL_PrepareReceive>
 801395e:	e000      	b.n	8013962 <MSC_BOT_Init+0x86>
    return;
 8013960:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013962:	3710      	adds	r7, #16
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	200000c7 	.word	0x200000c7
 801396c:	200000c6 	.word	0x200000c6

08013970 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	32b0      	adds	r2, #176	; 0xb0
 8013982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013986:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d01b      	beq.n	80139c6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2200      	movs	r2, #0
 8013992:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2201      	movs	r2, #1
 8013998:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801399a:	4b0d      	ldr	r3, [pc, #52]	; (80139d0 <MSC_BOT_Reset+0x60>)
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	4619      	mov	r1, r3
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f007 f96d 	bl	801ac80 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80139a6:	4b0b      	ldr	r3, [pc, #44]	; (80139d4 <MSC_BOT_Reset+0x64>)
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	4619      	mov	r1, r3
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f007 f967 	bl	801ac80 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80139b2:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <MSC_BOT_Reset+0x64>)
 80139b4:	7819      	ldrb	r1, [r3, #0]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 80139bc:	231f      	movs	r3, #31
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f007 f9e9 	bl	801ad96 <USBD_LL_PrepareReceive>
 80139c4:	e000      	b.n	80139c8 <MSC_BOT_Reset+0x58>
    return;
 80139c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	200000c6 	.word	0x200000c6
 80139d4:	200000c7 	.word	0x200000c7

080139d8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	32b0      	adds	r2, #176	; 0xb0
 80139ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ee:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2200      	movs	r2, #0
 80139fa:	721a      	strb	r2, [r3, #8]
  }
}
 80139fc:	bf00      	nop
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	460b      	mov	r3, r1
 8013a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	32b0      	adds	r2, #176	; 0xb0
 8013a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a22:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d020      	beq.n	8013a6c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7a1b      	ldrb	r3, [r3, #8]
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	d005      	beq.n	8013a3e <MSC_BOT_DataIn+0x36>
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	db1c      	blt.n	8013a70 <MSC_BOT_DataIn+0x68>
 8013a36:	3b03      	subs	r3, #3
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d819      	bhi.n	8013a70 <MSC_BOT_DataIn+0x68>
 8013a3c:	e011      	b.n	8013a62 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f9c9 	bl	8013de4 <SCSI_ProcessCmd>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	da0d      	bge.n	8013a74 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013a58:	2101      	movs	r1, #1
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f000 f90c 	bl	8013c78 <MSC_BOT_SendCSW>
      }
      break;
 8013a60:	e008      	b.n	8013a74 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013a62:	2100      	movs	r1, #0
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f000 f907 	bl	8013c78 <MSC_BOT_SendCSW>
      break;
 8013a6a:	e004      	b.n	8013a76 <MSC_BOT_DataIn+0x6e>
    return;
 8013a6c:	bf00      	nop
 8013a6e:	e002      	b.n	8013a76 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013a70:	bf00      	nop
 8013a72:	e000      	b.n	8013a76 <MSC_BOT_DataIn+0x6e>
      break;
 8013a74:	bf00      	nop
  }
}
 8013a76:	3710      	adds	r7, #16
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}

08013a7c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
 8013a84:	460b      	mov	r3, r1
 8013a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	32b0      	adds	r2, #176	; 0xb0
 8013a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a96:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d01c      	beq.n	8013ad8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	7a1b      	ldrb	r3, [r3, #8]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d002      	beq.n	8013aac <MSC_BOT_DataOut+0x30>
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	d004      	beq.n	8013ab4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013aaa:	e018      	b.n	8013ade <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 f819 	bl	8013ae4 <MSC_BOT_CBW_Decode>
      break;
 8013ab2:	e014      	b.n	8013ade <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f000 f98e 	bl	8013de4 <SCSI_ProcessCmd>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	da06      	bge.n	8013adc <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013ace:	2101      	movs	r1, #1
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f000 f8d1 	bl	8013c78 <MSC_BOT_SendCSW>
      break;
 8013ad6:	e001      	b.n	8013adc <MSC_BOT_DataOut+0x60>
    return;
 8013ad8:	bf00      	nop
 8013ada:	e000      	b.n	8013ade <MSC_BOT_DataOut+0x62>
      break;
 8013adc:	bf00      	nop
  }
}
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	32b0      	adds	r2, #176	; 0xb0
 8013af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d079      	beq.n	8013bf6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013b1a:	4b3a      	ldr	r3, [pc, #232]	; (8013c04 <MSC_BOT_CBW_Decode+0x120>)
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	4619      	mov	r1, r3
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f007 f959 	bl	801add8 <USBD_LL_GetRxDataSize>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b1f      	cmp	r3, #31
 8013b2a:	d114      	bne.n	8013b56 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013b32:	4a35      	ldr	r2, [pc, #212]	; (8013c08 <MSC_BOT_CBW_Decode+0x124>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d10e      	bne.n	8013b56 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d809      	bhi.n	8013b56 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d004      	beq.n	8013b56 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013b52:	2b10      	cmp	r3, #16
 8013b54:	d90e      	bls.n	8013b74 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013b5c:	2320      	movs	r3, #32
 8013b5e:	2205      	movs	r2, #5
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f000 fe2b 	bl	80147bc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2202      	movs	r2, #2
 8013b6a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 f8bd 	bl	8013cec <MSC_BOT_Abort>
 8013b72:	e043      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013b80:	461a      	mov	r2, r3
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f000 f92e 	bl	8013de4 <SCSI_ProcessCmd>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	da0c      	bge.n	8013ba8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	7a1b      	ldrb	r3, [r3, #8]
 8013b92:	2b05      	cmp	r3, #5
 8013b94:	d104      	bne.n	8013ba0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b96:	2101      	movs	r1, #1
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 f86d 	bl	8013c78 <MSC_BOT_SendCSW>
 8013b9e:	e02d      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f000 f8a3 	bl	8013cec <MSC_BOT_Abort>
 8013ba6:	e029      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	7a1b      	ldrb	r3, [r3, #8]
 8013bac:	2b02      	cmp	r3, #2
 8013bae:	d024      	beq.n	8013bfa <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d020      	beq.n	8013bfa <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013bbc:	2b03      	cmp	r3, #3
 8013bbe:	d01c      	beq.n	8013bfa <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d009      	beq.n	8013bdc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f103 0110 	add.w	r1, r3, #16
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f000 f819 	bl	8013c0c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013bda:	e00f      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d104      	bne.n	8013bee <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013be4:	2100      	movs	r1, #0
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 f846 	bl	8013c78 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013bec:	e006      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 f87c 	bl	8013cec <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013bf4:	e002      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
    return;
 8013bf6:	bf00      	nop
 8013bf8:	e000      	b.n	8013bfc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8013bfa:	bf00      	nop
    }
  }
}
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	200000c7 	.word	0x200000c7
 8013c08:	43425355 	.word	0x43425355

08013c0c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	32b0      	adds	r2, #176	; 0xb0
 8013c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c26:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d01e      	beq.n	8013c6c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	4293      	cmp	r3, r2
 8013c38:	bf28      	it	cs
 8013c3a:	4613      	movcs	r3, r2
 8013c3c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	1ad2      	subs	r2, r2, r3
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	2204      	movs	r2, #4
 8013c5a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8013c5c:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <MSC_BOT_SendData+0x68>)
 8013c5e:	7819      	ldrb	r1, [r3, #0]
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	68ba      	ldr	r2, [r7, #8]
 8013c64:	68f8      	ldr	r0, [r7, #12]
 8013c66:	f007 f875 	bl	801ad54 <USBD_LL_Transmit>
 8013c6a:	e000      	b.n	8013c6e <MSC_BOT_SendData+0x62>
    return;
 8013c6c:	bf00      	nop
}
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	200000c6 	.word	0x200000c6

08013c78 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	460b      	mov	r3, r1
 8013c82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	32b0      	adds	r2, #176	; 0xb0
 8013c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c92:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d01d      	beq.n	8013cd6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	4a10      	ldr	r2, [pc, #64]	; (8013ce0 <MSC_BOT_SendCSW+0x68>)
 8013c9e:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	78fa      	ldrb	r2, [r7, #3]
 8013ca6:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2200      	movs	r2, #0
 8013cae:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8013cb0:	4b0c      	ldr	r3, [pc, #48]	; (8013ce4 <MSC_BOT_SendCSW+0x6c>)
 8013cb2:	7819      	ldrb	r1, [r3, #0]
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8013cba:	230d      	movs	r3, #13
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f007 f849 	bl	801ad54 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013cc2:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <MSC_BOT_SendCSW+0x70>)
 8013cc4:	7819      	ldrb	r1, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013ccc:	231f      	movs	r3, #31
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f007 f861 	bl	801ad96 <USBD_LL_PrepareReceive>
 8013cd4:	e000      	b.n	8013cd8 <MSC_BOT_SendCSW+0x60>
    return;
 8013cd6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	53425355 	.word	0x53425355
 8013ce4:	200000c6 	.word	0x200000c6
 8013ce8:	200000c7 	.word	0x200000c7

08013cec <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	32b0      	adds	r2, #176	; 0xb0
 8013cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d02a      	beq.n	8013d60 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d10e      	bne.n	8013d32 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d009      	beq.n	8013d32 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d105      	bne.n	8013d32 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013d26:	4b10      	ldr	r3, [pc, #64]	; (8013d68 <MSC_BOT_Abort+0x7c>)
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f006 ff88 	bl	801ac42 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013d32:	4b0e      	ldr	r3, [pc, #56]	; (8013d6c <MSC_BOT_Abort+0x80>)
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	4619      	mov	r1, r3
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f006 ff82 	bl	801ac42 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	7a5b      	ldrb	r3, [r3, #9]
 8013d42:	2b02      	cmp	r3, #2
 8013d44:	d10d      	bne.n	8013d62 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013d46:	4b09      	ldr	r3, [pc, #36]	; (8013d6c <MSC_BOT_Abort+0x80>)
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f006 ff78 	bl	801ac42 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013d52:	4b05      	ldr	r3, [pc, #20]	; (8013d68 <MSC_BOT_Abort+0x7c>)
 8013d54:	781b      	ldrb	r3, [r3, #0]
 8013d56:	4619      	mov	r1, r3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f006 ff72 	bl	801ac42 <USBD_LL_StallEP>
 8013d5e:	e000      	b.n	8013d62 <MSC_BOT_Abort+0x76>
    return;
 8013d60:	bf00      	nop
  }
}
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	200000c7 	.word	0x200000c7
 8013d6c:	200000c6 	.word	0x200000c6

08013d70 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	460b      	mov	r3, r1
 8013d7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	32b0      	adds	r2, #176	; 0xb0
 8013d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d8a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d01d      	beq.n	8013dce <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	7a5b      	ldrb	r3, [r3, #9]
 8013d96:	2b02      	cmp	r3, #2
 8013d98:	d10c      	bne.n	8013db4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013d9a:	4b10      	ldr	r3, [pc, #64]	; (8013ddc <MSC_BOT_CplClrFeature+0x6c>)
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	4619      	mov	r1, r3
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f006 ff4e 	bl	801ac42 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013da6:	4b0e      	ldr	r3, [pc, #56]	; (8013de0 <MSC_BOT_CplClrFeature+0x70>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	4619      	mov	r1, r3
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f006 ff48 	bl	801ac42 <USBD_LL_StallEP>
 8013db2:	e00f      	b.n	8013dd4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	da0a      	bge.n	8013dd2 <MSC_BOT_CplClrFeature+0x62>
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	7a5b      	ldrb	r3, [r3, #9]
 8013dc0:	2b01      	cmp	r3, #1
 8013dc2:	d006      	beq.n	8013dd2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013dc4:	2101      	movs	r1, #1
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f7ff ff56 	bl	8013c78 <MSC_BOT_SendCSW>
 8013dcc:	e002      	b.n	8013dd4 <MSC_BOT_CplClrFeature+0x64>
    return;
 8013dce:	bf00      	nop
 8013dd0:	e000      	b.n	8013dd4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8013dd2:	bf00      	nop
  }
}
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	200000c6 	.word	0x200000c6
 8013de0:	200000c7 	.word	0x200000c7

08013de4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	460b      	mov	r3, r1
 8013dee:	607a      	str	r2, [r7, #4]
 8013df0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	32b0      	adds	r2, #176	; 0xb0
 8013dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e00:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d102      	bne.n	8013e0e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8013e08:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0c:	e168      	b.n	80140e0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	781b      	ldrb	r3, [r3, #0]
 8013e12:	2baa      	cmp	r3, #170	; 0xaa
 8013e14:	f000 8144 	beq.w	80140a0 <SCSI_ProcessCmd+0x2bc>
 8013e18:	2baa      	cmp	r3, #170	; 0xaa
 8013e1a:	f300 8153 	bgt.w	80140c4 <SCSI_ProcessCmd+0x2e0>
 8013e1e:	2ba8      	cmp	r3, #168	; 0xa8
 8013e20:	f000 812c 	beq.w	801407c <SCSI_ProcessCmd+0x298>
 8013e24:	2ba8      	cmp	r3, #168	; 0xa8
 8013e26:	f300 814d 	bgt.w	80140c4 <SCSI_ProcessCmd+0x2e0>
 8013e2a:	2b5a      	cmp	r3, #90	; 0x5a
 8013e2c:	f300 80c0 	bgt.w	8013fb0 <SCSI_ProcessCmd+0x1cc>
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f2c0 8147 	blt.w	80140c4 <SCSI_ProcessCmd+0x2e0>
 8013e36:	2b5a      	cmp	r3, #90	; 0x5a
 8013e38:	f200 8144 	bhi.w	80140c4 <SCSI_ProcessCmd+0x2e0>
 8013e3c:	a201      	add	r2, pc, #4	; (adr r2, 8013e44 <SCSI_ProcessCmd+0x60>)
 8013e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e42:	bf00      	nop
 8013e44:	08013fb7 	.word	0x08013fb7
 8013e48:	080140c5 	.word	0x080140c5
 8013e4c:	080140c5 	.word	0x080140c5
 8013e50:	08013fc9 	.word	0x08013fc9
 8013e54:	080140c5 	.word	0x080140c5
 8013e58:	080140c5 	.word	0x080140c5
 8013e5c:	080140c5 	.word	0x080140c5
 8013e60:	080140c5 	.word	0x080140c5
 8013e64:	080140c5 	.word	0x080140c5
 8013e68:	080140c5 	.word	0x080140c5
 8013e6c:	080140c5 	.word	0x080140c5
 8013e70:	080140c5 	.word	0x080140c5
 8013e74:	080140c5 	.word	0x080140c5
 8013e78:	080140c5 	.word	0x080140c5
 8013e7c:	080140c5 	.word	0x080140c5
 8013e80:	080140c5 	.word	0x080140c5
 8013e84:	080140c5 	.word	0x080140c5
 8013e88:	080140c5 	.word	0x080140c5
 8013e8c:	08013fdb 	.word	0x08013fdb
 8013e90:	080140c5 	.word	0x080140c5
 8013e94:	080140c5 	.word	0x080140c5
 8013e98:	080140c5 	.word	0x080140c5
 8013e9c:	080140c5 	.word	0x080140c5
 8013ea0:	080140c5 	.word	0x080140c5
 8013ea4:	080140c5 	.word	0x080140c5
 8013ea8:	080140c5 	.word	0x080140c5
 8013eac:	08014011 	.word	0x08014011
 8013eb0:	08013fed 	.word	0x08013fed
 8013eb4:	080140c5 	.word	0x080140c5
 8013eb8:	080140c5 	.word	0x080140c5
 8013ebc:	08013fff 	.word	0x08013fff
 8013ec0:	080140c5 	.word	0x080140c5
 8013ec4:	080140c5 	.word	0x080140c5
 8013ec8:	080140c5 	.word	0x080140c5
 8013ecc:	080140c5 	.word	0x080140c5
 8013ed0:	08014035 	.word	0x08014035
 8013ed4:	080140c5 	.word	0x080140c5
 8013ed8:	08014047 	.word	0x08014047
 8013edc:	080140c5 	.word	0x080140c5
 8013ee0:	080140c5 	.word	0x080140c5
 8013ee4:	0801406b 	.word	0x0801406b
 8013ee8:	080140c5 	.word	0x080140c5
 8013eec:	0801408f 	.word	0x0801408f
 8013ef0:	080140c5 	.word	0x080140c5
 8013ef4:	080140c5 	.word	0x080140c5
 8013ef8:	080140c5 	.word	0x080140c5
 8013efc:	080140c5 	.word	0x080140c5
 8013f00:	080140b3 	.word	0x080140b3
 8013f04:	080140c5 	.word	0x080140c5
 8013f08:	080140c5 	.word	0x080140c5
 8013f0c:	080140c5 	.word	0x080140c5
 8013f10:	080140c5 	.word	0x080140c5
 8013f14:	080140c5 	.word	0x080140c5
 8013f18:	080140c5 	.word	0x080140c5
 8013f1c:	080140c5 	.word	0x080140c5
 8013f20:	080140c5 	.word	0x080140c5
 8013f24:	080140c5 	.word	0x080140c5
 8013f28:	080140c5 	.word	0x080140c5
 8013f2c:	080140c5 	.word	0x080140c5
 8013f30:	080140c5 	.word	0x080140c5
 8013f34:	080140c5 	.word	0x080140c5
 8013f38:	080140c5 	.word	0x080140c5
 8013f3c:	080140c5 	.word	0x080140c5
 8013f40:	080140c5 	.word	0x080140c5
 8013f44:	080140c5 	.word	0x080140c5
 8013f48:	080140c5 	.word	0x080140c5
 8013f4c:	080140c5 	.word	0x080140c5
 8013f50:	080140c5 	.word	0x080140c5
 8013f54:	080140c5 	.word	0x080140c5
 8013f58:	080140c5 	.word	0x080140c5
 8013f5c:	080140c5 	.word	0x080140c5
 8013f60:	080140c5 	.word	0x080140c5
 8013f64:	080140c5 	.word	0x080140c5
 8013f68:	080140c5 	.word	0x080140c5
 8013f6c:	080140c5 	.word	0x080140c5
 8013f70:	080140c5 	.word	0x080140c5
 8013f74:	080140c5 	.word	0x080140c5
 8013f78:	080140c5 	.word	0x080140c5
 8013f7c:	080140c5 	.word	0x080140c5
 8013f80:	080140c5 	.word	0x080140c5
 8013f84:	080140c5 	.word	0x080140c5
 8013f88:	080140c5 	.word	0x080140c5
 8013f8c:	080140c5 	.word	0x080140c5
 8013f90:	080140c5 	.word	0x080140c5
 8013f94:	080140c5 	.word	0x080140c5
 8013f98:	080140c5 	.word	0x080140c5
 8013f9c:	080140c5 	.word	0x080140c5
 8013fa0:	080140c5 	.word	0x080140c5
 8013fa4:	080140c5 	.word	0x080140c5
 8013fa8:	080140c5 	.word	0x080140c5
 8013fac:	08014023 	.word	0x08014023
 8013fb0:	2b9e      	cmp	r3, #158	; 0x9e
 8013fb2:	d051      	beq.n	8014058 <SCSI_ProcessCmd+0x274>
 8013fb4:	e086      	b.n	80140c4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013fb6:	7afb      	ldrb	r3, [r7, #11]
 8013fb8:	687a      	ldr	r2, [r7, #4]
 8013fba:	4619      	mov	r1, r3
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f000 f893 	bl	80140e8 <SCSI_TestUnitReady>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8013fc6:	e089      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8013fc8:	7afb      	ldrb	r3, [r7, #11]
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	4619      	mov	r1, r3
 8013fce:	68f8      	ldr	r0, [r7, #12]
 8013fd0:	f000 fb6e 	bl	80146b0 <SCSI_RequestSense>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8013fd8:	e080      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8013fda:	7afb      	ldrb	r3, [r7, #11]
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	4619      	mov	r1, r3
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f000 f8db 	bl	801419c <SCSI_Inquiry>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8013fea:	e077      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013fec:	7afb      	ldrb	r3, [r7, #11]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	68f8      	ldr	r0, [r7, #12]
 8013ff4:	f000 fc30 	bl	8014858 <SCSI_StartStopUnit>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8013ffc:	e06e      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013ffe:	7afb      	ldrb	r3, [r7, #11]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	4619      	mov	r1, r3
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	f000 fc7c 	bl	8014902 <SCSI_AllowPreventRemovable>
 801400a:	4603      	mov	r3, r0
 801400c:	75fb      	strb	r3, [r7, #23]
      break;
 801400e:	e065      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014010:	7afb      	ldrb	r3, [r7, #11]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	4619      	mov	r1, r3
 8014016:	68f8      	ldr	r0, [r7, #12]
 8014018:	f000 faea 	bl	80145f0 <SCSI_ModeSense6>
 801401c:	4603      	mov	r3, r0
 801401e:	75fb      	strb	r3, [r7, #23]
      break;
 8014020:	e05c      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014022:	7afb      	ldrb	r3, [r7, #11]
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4619      	mov	r1, r3
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f000 fb11 	bl	8014650 <SCSI_ModeSense10>
 801402e:	4603      	mov	r3, r0
 8014030:	75fb      	strb	r3, [r7, #23]
      break;
 8014032:	e053      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014034:	7afb      	ldrb	r3, [r7, #11]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	4619      	mov	r1, r3
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f000 fa5d 	bl	80144fa <SCSI_ReadFormatCapacity>
 8014040:	4603      	mov	r3, r0
 8014042:	75fb      	strb	r3, [r7, #23]
      break;
 8014044:	e04a      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014046:	7afb      	ldrb	r3, [r7, #11]
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	4619      	mov	r1, r3
 801404c:	68f8      	ldr	r0, [r7, #12]
 801404e:	f000 f923 	bl	8014298 <SCSI_ReadCapacity10>
 8014052:	4603      	mov	r3, r0
 8014054:	75fb      	strb	r3, [r7, #23]
      break;
 8014056:	e041      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014058:	7afb      	ldrb	r3, [r7, #11]
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	4619      	mov	r1, r3
 801405e:	68f8      	ldr	r0, [r7, #12]
 8014060:	f000 f998 	bl	8014394 <SCSI_ReadCapacity16>
 8014064:	4603      	mov	r3, r0
 8014066:	75fb      	strb	r3, [r7, #23]
      break;
 8014068:	e038      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801406a:	7afb      	ldrb	r3, [r7, #11]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	4619      	mov	r1, r3
 8014070:	68f8      	ldr	r0, [r7, #12]
 8014072:	f000 fc73 	bl	801495c <SCSI_Read10>
 8014076:	4603      	mov	r3, r0
 8014078:	75fb      	strb	r3, [r7, #23]
      break;
 801407a:	e02f      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801407c:	7afb      	ldrb	r3, [r7, #11]
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	4619      	mov	r1, r3
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f000 fd14 	bl	8014ab0 <SCSI_Read12>
 8014088:	4603      	mov	r3, r0
 801408a:	75fb      	strb	r3, [r7, #23]
      break;
 801408c:	e026      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801408e:	7afb      	ldrb	r3, [r7, #11]
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	4619      	mov	r1, r3
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	f000 fdbf 	bl	8014c18 <SCSI_Write10>
 801409a:	4603      	mov	r3, r0
 801409c:	75fb      	strb	r3, [r7, #23]
      break;
 801409e:	e01d      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80140a0:	7afb      	ldrb	r3, [r7, #11]
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	4619      	mov	r1, r3
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	f000 fe8c 	bl	8014dc4 <SCSI_Write12>
 80140ac:	4603      	mov	r3, r0
 80140ae:	75fb      	strb	r3, [r7, #23]
      break;
 80140b0:	e014      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80140b2:	7afb      	ldrb	r3, [r7, #11]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4619      	mov	r1, r3
 80140b8:	68f8      	ldr	r0, [r7, #12]
 80140ba:	f000 ff69 	bl	8014f90 <SCSI_Verify10>
 80140be:	4603      	mov	r3, r0
 80140c0:	75fb      	strb	r3, [r7, #23]
      break;
 80140c2:	e00b      	b.n	80140dc <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80140c4:	7af9      	ldrb	r1, [r7, #11]
 80140c6:	2320      	movs	r3, #32
 80140c8:	2205      	movs	r2, #5
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f000 fb76 	bl	80147bc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	2202      	movs	r2, #2
 80140d4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80140d6:	23ff      	movs	r3, #255	; 0xff
 80140d8:	75fb      	strb	r3, [r7, #23]
      break;
 80140da:	bf00      	nop
  }

  return ret;
 80140dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3718      	adds	r7, #24
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	460b      	mov	r3, r1
 80140f2:	607a      	str	r2, [r7, #4]
 80140f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	32b0      	adds	r2, #176	; 0xb0
 8014100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014104:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d102      	bne.n	8014112 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 801410c:	f04f 33ff 	mov.w	r3, #4294967295
 8014110:	e03f      	b.n	8014192 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00a      	beq.n	8014132 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014122:	2320      	movs	r3, #32
 8014124:	2205      	movs	r2, #5
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	f000 fb48 	bl	80147bc <SCSI_SenseCode>

    return -1;
 801412c:	f04f 33ff 	mov.w	r3, #4294967295
 8014130:	e02f      	b.n	8014192 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014138:	2b02      	cmp	r3, #2
 801413a:	d10b      	bne.n	8014154 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801413c:	7af9      	ldrb	r1, [r7, #11]
 801413e:	233a      	movs	r3, #58	; 0x3a
 8014140:	2202      	movs	r2, #2
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f000 fb3a 	bl	80147bc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	2205      	movs	r2, #5
 801414c:	721a      	strb	r2, [r3, #8]
    return -1;
 801414e:	f04f 33ff 	mov.w	r3, #4294967295
 8014152:	e01e      	b.n	8014192 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	33b0      	adds	r3, #176	; 0xb0
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	689b      	ldr	r3, [r3, #8]
 8014166:	7afa      	ldrb	r2, [r7, #11]
 8014168:	4610      	mov	r0, r2
 801416a:	4798      	blx	r3
 801416c:	4603      	mov	r3, r0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00b      	beq.n	801418a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014172:	7af9      	ldrb	r1, [r7, #11]
 8014174:	233a      	movs	r3, #58	; 0x3a
 8014176:	2202      	movs	r2, #2
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f000 fb1f 	bl	80147bc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	2205      	movs	r2, #5
 8014182:	721a      	strb	r2, [r3, #8]

    return -1;
 8014184:	f04f 33ff 	mov.w	r3, #4294967295
 8014188:	e003      	b.n	8014192 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	2200      	movs	r2, #0
 801418e:	60da      	str	r2, [r3, #12]

  return 0;
 8014190:	2300      	movs	r3, #0
}
 8014192:	4618      	mov	r0, r3
 8014194:	3718      	adds	r7, #24
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
	...

0801419c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b088      	sub	sp, #32
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	460b      	mov	r3, r1
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	32b0      	adds	r2, #176	; 0xb0
 80141b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141b8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d102      	bne.n	80141c6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80141c0:	f04f 33ff 	mov.w	r3, #4294967295
 80141c4:	e05f      	b.n	8014286 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10a      	bne.n	80141e6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80141d0:	69bb      	ldr	r3, [r7, #24]
 80141d2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80141d6:	2320      	movs	r3, #32
 80141d8:	2205      	movs	r2, #5
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f000 faee 	bl	80147bc <SCSI_SenseCode>
    return -1;
 80141e0:	f04f 33ff 	mov.w	r3, #4294967295
 80141e4:	e04f      	b.n	8014286 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	3301      	adds	r3, #1
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	f003 0301 	and.w	r3, r3, #1
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d020      	beq.n	8014236 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	3302      	adds	r3, #2
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d105      	bne.n	801420a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80141fe:	2206      	movs	r2, #6
 8014200:	4923      	ldr	r1, [pc, #140]	; (8014290 <SCSI_Inquiry+0xf4>)
 8014202:	69b8      	ldr	r0, [r7, #24]
 8014204:	f001 f84a 	bl	801529c <SCSI_UpdateBotData>
 8014208:	e03c      	b.n	8014284 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	3302      	adds	r3, #2
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	2b80      	cmp	r3, #128	; 0x80
 8014212:	d105      	bne.n	8014220 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014214:	2208      	movs	r2, #8
 8014216:	491f      	ldr	r1, [pc, #124]	; (8014294 <SCSI_Inquiry+0xf8>)
 8014218:	69b8      	ldr	r0, [r7, #24]
 801421a:	f001 f83f 	bl	801529c <SCSI_UpdateBotData>
 801421e:	e031      	b.n	8014284 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014226:	2324      	movs	r3, #36	; 0x24
 8014228:	2205      	movs	r2, #5
 801422a:	68f8      	ldr	r0, [r7, #12]
 801422c:	f000 fac6 	bl	80147bc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014230:	f04f 33ff 	mov.w	r3, #4294967295
 8014234:	e027      	b.n	8014286 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	33b0      	adds	r3, #176	; 0xb0
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	4413      	add	r3, r2
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	69d9      	ldr	r1, [r3, #28]
 8014248:	7afa      	ldrb	r2, [r7, #11]
 801424a:	4613      	mov	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	4413      	add	r3, r2
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	440b      	add	r3, r1
 8014254:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	3304      	adds	r3, #4
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	b29b      	uxth	r3, r3
 801425e:	3305      	adds	r3, #5
 8014260:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	3304      	adds	r3, #4
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	b29b      	uxth	r3, r3
 801426a:	8bfa      	ldrh	r2, [r7, #30]
 801426c:	429a      	cmp	r2, r3
 801426e:	d303      	bcc.n	8014278 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	3304      	adds	r3, #4
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014278:	8bfb      	ldrh	r3, [r7, #30]
 801427a:	461a      	mov	r2, r3
 801427c:	6979      	ldr	r1, [r7, #20]
 801427e:	69b8      	ldr	r0, [r7, #24]
 8014280:	f001 f80c 	bl	801529c <SCSI_UpdateBotData>
  }

  return 0;
 8014284:	2300      	movs	r3, #0
}
 8014286:	4618      	mov	r0, r3
 8014288:	3720      	adds	r7, #32
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	200000c8 	.word	0x200000c8
 8014294:	200000d0 	.word	0x200000d0

08014298 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	460b      	mov	r3, r1
 80142a2:	607a      	str	r2, [r7, #4]
 80142a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	32b0      	adds	r2, #176	; 0xb0
 80142b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d102      	bne.n	80142c2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80142bc:	f04f 33ff 	mov.w	r3, #4294967295
 80142c0:	e064      	b.n	801438c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	33b0      	adds	r3, #176	; 0xb0
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	4413      	add	r3, r2
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	697a      	ldr	r2, [r7, #20]
 80142d6:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80142da:	697a      	ldr	r2, [r7, #20]
 80142dc:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80142e0:	7af8      	ldrb	r0, [r7, #11]
 80142e2:	4798      	blx	r3
 80142e4:	4603      	mov	r3, r0
 80142e6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d104      	bne.n	80142fa <SCSI_ReadCapacity10+0x62>
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80142f6:	2b02      	cmp	r3, #2
 80142f8:	d108      	bne.n	801430c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80142fa:	7af9      	ldrb	r1, [r7, #11]
 80142fc:	233a      	movs	r3, #58	; 0x3a
 80142fe:	2202      	movs	r2, #2
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	f000 fa5b 	bl	80147bc <SCSI_SenseCode>
    return -1;
 8014306:	f04f 33ff 	mov.w	r3, #4294967295
 801430a:	e03f      	b.n	801438c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014312:	3b01      	subs	r3, #1
 8014314:	0e1b      	lsrs	r3, r3, #24
 8014316:	b2da      	uxtb	r2, r3
 8014318:	697b      	ldr	r3, [r7, #20]
 801431a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014322:	3b01      	subs	r3, #1
 8014324:	0c1b      	lsrs	r3, r3, #16
 8014326:	b2da      	uxtb	r2, r3
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014332:	3b01      	subs	r3, #1
 8014334:	0a1b      	lsrs	r3, r3, #8
 8014336:	b2da      	uxtb	r2, r3
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014342:	b2db      	uxtb	r3, r3
 8014344:	3b01      	subs	r3, #1
 8014346:	b2da      	uxtb	r2, r3
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014352:	161b      	asrs	r3, r3, #24
 8014354:	b2da      	uxtb	r2, r3
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014360:	141b      	asrs	r3, r3, #16
 8014362:	b2da      	uxtb	r2, r3
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801436e:	0a1b      	lsrs	r3, r3, #8
 8014370:	b29b      	uxth	r3, r3
 8014372:	b2da      	uxtb	r2, r3
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801437e:	b2da      	uxtb	r2, r3
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	2208      	movs	r2, #8
 8014388:	60da      	str	r2, [r3, #12]

  return 0;
 801438a:	2300      	movs	r3, #0

}
 801438c:	4618      	mov	r0, r3
 801438e:	3718      	adds	r7, #24
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b088      	sub	sp, #32
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	460b      	mov	r3, r1
 801439e:	607a      	str	r2, [r7, #4]
 80143a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	32b0      	adds	r2, #176	; 0xb0
 80143ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d102      	bne.n	80143be <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80143b8:	f04f 33ff 	mov.w	r3, #4294967295
 80143bc:	e099      	b.n	80144f2 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143c4:	68fa      	ldr	r2, [r7, #12]
 80143c6:	33b0      	adds	r3, #176	; 0xb0
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	4413      	add	r3, r2
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80143d6:	69ba      	ldr	r2, [r7, #24]
 80143d8:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80143dc:	7af8      	ldrb	r0, [r7, #11]
 80143de:	4798      	blx	r3
 80143e0:	4603      	mov	r3, r0
 80143e2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80143e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d104      	bne.n	80143f6 <SCSI_ReadCapacity16+0x62>
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d108      	bne.n	8014408 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80143f6:	7af9      	ldrb	r1, [r7, #11]
 80143f8:	233a      	movs	r3, #58	; 0x3a
 80143fa:	2202      	movs	r2, #2
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f000 f9dd 	bl	80147bc <SCSI_SenseCode>
    return -1;
 8014402:	f04f 33ff 	mov.w	r3, #4294967295
 8014406:	e074      	b.n	80144f2 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	330a      	adds	r3, #10
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	330b      	adds	r3, #11
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014418:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	330c      	adds	r3, #12
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014422:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	320d      	adds	r2, #13
 8014428:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801442a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014430:	2300      	movs	r3, #0
 8014432:	77fb      	strb	r3, [r7, #31]
 8014434:	e007      	b.n	8014446 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014436:	7ffb      	ldrb	r3, [r7, #31]
 8014438:	69ba      	ldr	r2, [r7, #24]
 801443a:	4413      	add	r3, r2
 801443c:	2200      	movs	r2, #0
 801443e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014440:	7ffb      	ldrb	r3, [r7, #31]
 8014442:	3301      	adds	r3, #1
 8014444:	77fb      	strb	r3, [r7, #31]
 8014446:	7ffa      	ldrb	r2, [r7, #31]
 8014448:	69bb      	ldr	r3, [r7, #24]
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	429a      	cmp	r2, r3
 801444e:	d3f2      	bcc.n	8014436 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014456:	3b01      	subs	r3, #1
 8014458:	0e1b      	lsrs	r3, r3, #24
 801445a:	b2da      	uxtb	r2, r3
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014460:	69bb      	ldr	r3, [r7, #24]
 8014462:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014466:	3b01      	subs	r3, #1
 8014468:	0c1b      	lsrs	r3, r3, #16
 801446a:	b2da      	uxtb	r2, r3
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014476:	3b01      	subs	r3, #1
 8014478:	0a1b      	lsrs	r3, r3, #8
 801447a:	b2da      	uxtb	r2, r3
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014486:	b2db      	uxtb	r3, r3
 8014488:	3b01      	subs	r3, #1
 801448a:	b2da      	uxtb	r2, r3
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014496:	161b      	asrs	r3, r3, #24
 8014498:	b2da      	uxtb	r2, r3
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80144a4:	141b      	asrs	r3, r3, #16
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80144b2:	0a1b      	lsrs	r3, r3, #8
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80144c2:	b2da      	uxtb	r2, r3
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	330a      	adds	r3, #10
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	330b      	adds	r3, #11
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144d8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	330c      	adds	r3, #12
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80144e2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	320d      	adds	r2, #13
 80144e8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80144ea:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	60da      	str	r2, [r3, #12]

  return 0;
 80144f0:	2300      	movs	r3, #0
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	3720      	adds	r7, #32
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}

080144fa <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b088      	sub	sp, #32
 80144fe:	af00      	add	r7, sp, #0
 8014500:	60f8      	str	r0, [r7, #12]
 8014502:	460b      	mov	r3, r1
 8014504:	607a      	str	r2, [r7, #4]
 8014506:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	32b0      	adds	r2, #176	; 0xb0
 8014512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014516:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d102      	bne.n	8014524 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 801451e:	f04f 33ff 	mov.w	r3, #4294967295
 8014522:	e061      	b.n	80145e8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801452a:	68fa      	ldr	r2, [r7, #12]
 801452c:	33b0      	adds	r3, #176	; 0xb0
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	4413      	add	r3, r2
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	f107 0214 	add.w	r2, r7, #20
 801453a:	f107 0110 	add.w	r1, r7, #16
 801453e:	7af8      	ldrb	r0, [r7, #11]
 8014540:	4798      	blx	r3
 8014542:	4603      	mov	r3, r0
 8014544:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014546:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d104      	bne.n	8014558 <SCSI_ReadFormatCapacity+0x5e>
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014554:	2b02      	cmp	r3, #2
 8014556:	d108      	bne.n	801456a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014558:	7af9      	ldrb	r1, [r7, #11]
 801455a:	233a      	movs	r3, #58	; 0x3a
 801455c:	2202      	movs	r2, #2
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f000 f92c 	bl	80147bc <SCSI_SenseCode>
    return -1;
 8014564:	f04f 33ff 	mov.w	r3, #4294967295
 8014568:	e03e      	b.n	80145e8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 801456a:	2300      	movs	r3, #0
 801456c:	83fb      	strh	r3, [r7, #30]
 801456e:	e007      	b.n	8014580 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014570:	8bfb      	ldrh	r3, [r7, #30]
 8014572:	69ba      	ldr	r2, [r7, #24]
 8014574:	4413      	add	r3, r2
 8014576:	2200      	movs	r2, #0
 8014578:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801457a:	8bfb      	ldrh	r3, [r7, #30]
 801457c:	3301      	adds	r3, #1
 801457e:	83fb      	strh	r3, [r7, #30]
 8014580:	8bfb      	ldrh	r3, [r7, #30]
 8014582:	2b0b      	cmp	r3, #11
 8014584:	d9f4      	bls.n	8014570 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	2208      	movs	r2, #8
 801458a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	3b01      	subs	r3, #1
 8014590:	0e1b      	lsrs	r3, r3, #24
 8014592:	b2da      	uxtb	r2, r3
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	3b01      	subs	r3, #1
 801459c:	0c1b      	lsrs	r3, r3, #16
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	3b01      	subs	r3, #1
 80145a8:	0a1b      	lsrs	r3, r3, #8
 80145aa:	b2da      	uxtb	r2, r3
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	3b01      	subs	r3, #1
 80145b6:	b2da      	uxtb	r2, r3
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80145bc:	69bb      	ldr	r3, [r7, #24]
 80145be:	2202      	movs	r2, #2
 80145c0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80145c2:	8abb      	ldrh	r3, [r7, #20]
 80145c4:	141b      	asrs	r3, r3, #16
 80145c6:	b2da      	uxtb	r2, r3
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80145cc:	8abb      	ldrh	r3, [r7, #20]
 80145ce:	0a1b      	lsrs	r3, r3, #8
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80145d8:	8abb      	ldrh	r3, [r7, #20]
 80145da:	b2da      	uxtb	r2, r3
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	220c      	movs	r2, #12
 80145e4:	60da      	str	r2, [r3, #12]

  return 0;
 80145e6:	2300      	movs	r3, #0
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3720      	adds	r7, #32
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b086      	sub	sp, #24
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	460b      	mov	r3, r1
 80145fa:	607a      	str	r2, [r7, #4]
 80145fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	32b0      	adds	r2, #176	; 0xb0
 8014608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801460c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801460e:	2317      	movs	r3, #23
 8014610:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d102      	bne.n	801461e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8014618:	f04f 33ff 	mov.w	r3, #4294967295
 801461c:	e011      	b.n	8014642 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	3304      	adds	r3, #4
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	b29b      	uxth	r3, r3
 8014626:	8afa      	ldrh	r2, [r7, #22]
 8014628:	429a      	cmp	r2, r3
 801462a:	d303      	bcc.n	8014634 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	3304      	adds	r3, #4
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014634:	8afb      	ldrh	r3, [r7, #22]
 8014636:	461a      	mov	r2, r3
 8014638:	4904      	ldr	r1, [pc, #16]	; (801464c <SCSI_ModeSense6+0x5c>)
 801463a:	6938      	ldr	r0, [r7, #16]
 801463c:	f000 fe2e 	bl	801529c <SCSI_UpdateBotData>

  return 0;
 8014640:	2300      	movs	r3, #0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3718      	adds	r7, #24
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	200000d8 	.word	0x200000d8

08014650 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b086      	sub	sp, #24
 8014654:	af00      	add	r7, sp, #0
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	460b      	mov	r3, r1
 801465a:	607a      	str	r2, [r7, #4]
 801465c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	32b0      	adds	r2, #176	; 0xb0
 8014668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801466e:	231b      	movs	r3, #27
 8014670:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d102      	bne.n	801467e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014678:	f04f 33ff 	mov.w	r3, #4294967295
 801467c:	e011      	b.n	80146a2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	3308      	adds	r3, #8
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	b29b      	uxth	r3, r3
 8014686:	8afa      	ldrh	r2, [r7, #22]
 8014688:	429a      	cmp	r2, r3
 801468a:	d303      	bcc.n	8014694 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	3308      	adds	r3, #8
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014694:	8afb      	ldrh	r3, [r7, #22]
 8014696:	461a      	mov	r2, r3
 8014698:	4904      	ldr	r1, [pc, #16]	; (80146ac <SCSI_ModeSense10+0x5c>)
 801469a:	6938      	ldr	r0, [r7, #16]
 801469c:	f000 fdfe 	bl	801529c <SCSI_UpdateBotData>

  return 0;
 80146a0:	2300      	movs	r3, #0
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3718      	adds	r7, #24
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	200000f0 	.word	0x200000f0

080146b0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b086      	sub	sp, #24
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	460b      	mov	r3, r1
 80146ba:	607a      	str	r2, [r7, #4]
 80146bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	32b0      	adds	r2, #176	; 0xb0
 80146c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146cc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d102      	bne.n	80146da <SCSI_RequestSense+0x2a>
  {
    return -1;
 80146d4:	f04f 33ff 	mov.w	r3, #4294967295
 80146d8:	e06c      	b.n	80147b4 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d10a      	bne.n	80146fa <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80146ea:	2320      	movs	r3, #32
 80146ec:	2205      	movs	r2, #5
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f000 f864 	bl	80147bc <SCSI_SenseCode>
    return -1;
 80146f4:	f04f 33ff 	mov.w	r3, #4294967295
 80146f8:	e05c      	b.n	80147b4 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80146fa:	2300      	movs	r3, #0
 80146fc:	75fb      	strb	r3, [r7, #23]
 80146fe:	e007      	b.n	8014710 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014700:	7dfb      	ldrb	r3, [r7, #23]
 8014702:	693a      	ldr	r2, [r7, #16]
 8014704:	4413      	add	r3, r2
 8014706:	2200      	movs	r2, #0
 8014708:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	3301      	adds	r3, #1
 801470e:	75fb      	strb	r3, [r7, #23]
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	2b11      	cmp	r3, #17
 8014714:	d9f4      	bls.n	8014700 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	2270      	movs	r2, #112	; 0x70
 801471a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	220c      	movs	r2, #12
 8014720:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801472e:	429a      	cmp	r2, r3
 8014730:	d031      	beq.n	8014796 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014738:	461a      	mov	r2, r3
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014740:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801474e:	693a      	ldr	r2, [r7, #16]
 8014750:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	4413      	add	r3, r2
 8014758:	791a      	ldrb	r2, [r3, #4]
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014764:	693a      	ldr	r2, [r7, #16]
 8014766:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	4413      	add	r3, r2
 801476e:	795a      	ldrb	r2, [r3, #5]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801477a:	3301      	adds	r3, #1
 801477c:	b2da      	uxtb	r2, r3
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801478a:	2b04      	cmp	r3, #4
 801478c:	d103      	bne.n	8014796 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	2200      	movs	r2, #0
 8014792:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	2212      	movs	r2, #18
 801479a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	3304      	adds	r3, #4
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b12      	cmp	r3, #18
 80147a4:	d805      	bhi.n	80147b2 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3304      	adds	r3, #4
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	461a      	mov	r2, r3
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80147b2:	2300      	movs	r3, #0
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3718      	adds	r7, #24
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	4608      	mov	r0, r1
 80147c6:	4611      	mov	r1, r2
 80147c8:	461a      	mov	r2, r3
 80147ca:	4603      	mov	r3, r0
 80147cc:	70fb      	strb	r3, [r7, #3]
 80147ce:	460b      	mov	r3, r1
 80147d0:	70bb      	strb	r3, [r7, #2]
 80147d2:	4613      	mov	r3, r2
 80147d4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	32b0      	adds	r2, #176	; 0xb0
 80147e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147e4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d02f      	beq.n	801484c <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80147f2:	461a      	mov	r2, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80147fa:	78b9      	ldrb	r1, [r7, #2]
 80147fc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	4413      	add	r3, r2
 8014810:	787a      	ldrb	r2, [r7, #1]
 8014812:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014820:	00db      	lsls	r3, r3, #3
 8014822:	4413      	add	r3, r2
 8014824:	2200      	movs	r2, #0
 8014826:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801482e:	3301      	adds	r3, #1
 8014830:	b2da      	uxtb	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801483e:	2b04      	cmp	r3, #4
 8014840:	d105      	bne.n	801484e <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 801484a:	e000      	b.n	801484e <SCSI_SenseCode+0x92>
    return;
 801484c:	bf00      	nop
  }
}
 801484e:	3714      	adds	r7, #20
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	460b      	mov	r3, r1
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	32b0      	adds	r2, #176	; 0xb0
 8014870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014874:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d102      	bne.n	8014882 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 801487c:	f04f 33ff 	mov.w	r3, #4294967295
 8014880:	e03b      	b.n	80148fa <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014888:	2b01      	cmp	r3, #1
 801488a:	d10f      	bne.n	80148ac <SCSI_StartStopUnit+0x54>
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	3304      	adds	r3, #4
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	f003 0303 	and.w	r3, r3, #3
 8014896:	2b02      	cmp	r3, #2
 8014898:	d108      	bne.n	80148ac <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801489a:	7af9      	ldrb	r1, [r7, #11]
 801489c:	2324      	movs	r3, #36	; 0x24
 801489e:	2205      	movs	r2, #5
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f7ff ff8b 	bl	80147bc <SCSI_SenseCode>

    return -1;
 80148a6:	f04f 33ff 	mov.w	r3, #4294967295
 80148aa:	e026      	b.n	80148fa <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3304      	adds	r3, #4
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	f003 0303 	and.w	r3, r3, #3
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d104      	bne.n	80148c4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	2200      	movs	r2, #0
 80148be:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 80148c2:	e016      	b.n	80148f2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3304      	adds	r3, #4
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	f003 0303 	and.w	r3, r3, #3
 80148ce:	2b02      	cmp	r3, #2
 80148d0:	d104      	bne.n	80148dc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	2202      	movs	r2, #2
 80148d6:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 80148da:	e00a      	b.n	80148f2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	3304      	adds	r3, #4
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	f003 0303 	and.w	r3, r3, #3
 80148e6:	2b03      	cmp	r3, #3
 80148e8:	d103      	bne.n	80148f2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	2200      	movs	r2, #0
 80148ee:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	2200      	movs	r2, #0
 80148f6:	60da      	str	r2, [r3, #12]

  return 0;
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3718      	adds	r7, #24
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014902:	b480      	push	{r7}
 8014904:	b087      	sub	sp, #28
 8014906:	af00      	add	r7, sp, #0
 8014908:	60f8      	str	r0, [r7, #12]
 801490a:	460b      	mov	r3, r1
 801490c:	607a      	str	r2, [r7, #4]
 801490e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	32b0      	adds	r2, #176	; 0xb0
 801491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801491e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d102      	bne.n	801492c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014926:	f04f 33ff 	mov.w	r3, #4294967295
 801492a:	e011      	b.n	8014950 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	3304      	adds	r3, #4
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d104      	bne.n	8014940 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2200      	movs	r2, #0
 801493a:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 801493e:	e003      	b.n	8014948 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	2201      	movs	r2, #1
 8014944:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	2200      	movs	r2, #0
 801494c:	60da      	str	r2, [r3, #12]

  return 0;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	371c      	adds	r7, #28
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr

0801495c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	460b      	mov	r3, r1
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	32b0      	adds	r2, #176	; 0xb0
 8014974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014978:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d102      	bne.n	8014986 <SCSI_Read10+0x2a>
  {
    return -1;
 8014980:	f04f 33ff 	mov.w	r3, #4294967295
 8014984:	e090      	b.n	8014aa8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	7a1b      	ldrb	r3, [r3, #8]
 801498a:	2b00      	cmp	r3, #0
 801498c:	f040 8082 	bne.w	8014a94 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014996:	b25b      	sxtb	r3, r3
 8014998:	2b00      	cmp	r3, #0
 801499a:	db0a      	blt.n	80149b2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80149a2:	2320      	movs	r3, #32
 80149a4:	2205      	movs	r2, #5
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f7ff ff08 	bl	80147bc <SCSI_SenseCode>
      return -1;
 80149ac:	f04f 33ff 	mov.w	r3, #4294967295
 80149b0:	e07a      	b.n	8014aa8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80149b8:	2b02      	cmp	r3, #2
 80149ba:	d108      	bne.n	80149ce <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149bc:	7af9      	ldrb	r1, [r7, #11]
 80149be:	233a      	movs	r3, #58	; 0x3a
 80149c0:	2202      	movs	r2, #2
 80149c2:	68f8      	ldr	r0, [r7, #12]
 80149c4:	f7ff fefa 	bl	80147bc <SCSI_SenseCode>

      return -1;
 80149c8:	f04f 33ff 	mov.w	r3, #4294967295
 80149cc:	e06c      	b.n	8014aa8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149d4:	68fa      	ldr	r2, [r7, #12]
 80149d6:	33b0      	adds	r3, #176	; 0xb0
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	4413      	add	r3, r2
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	689b      	ldr	r3, [r3, #8]
 80149e0:	7afa      	ldrb	r2, [r7, #11]
 80149e2:	4610      	mov	r0, r2
 80149e4:	4798      	blx	r3
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d008      	beq.n	80149fe <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149ec:	7af9      	ldrb	r1, [r7, #11]
 80149ee:	233a      	movs	r3, #58	; 0x3a
 80149f0:	2202      	movs	r2, #2
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f7ff fee2 	bl	80147bc <SCSI_SenseCode>
      return -1;
 80149f8:	f04f 33ff 	mov.w	r3, #4294967295
 80149fc:	e054      	b.n	8014aa8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	3302      	adds	r3, #2
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	3303      	adds	r3, #3
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a0e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	3304      	adds	r3, #4
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a18:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	3205      	adds	r2, #5
 8014a1e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a20:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3307      	adds	r3, #7
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	021b      	lsls	r3, r3, #8
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	3208      	adds	r2, #8
 8014a34:	7812      	ldrb	r2, [r2, #0]
 8014a36:	431a      	orrs	r2, r3
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014a4a:	7af9      	ldrb	r1, [r7, #11]
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 fadc 	bl	801500a <SCSI_CheckAddressRange>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	da02      	bge.n	8014a5e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014a58:	f04f 33ff 	mov.w	r3, #4294967295
 8014a5c:	e024      	b.n	8014aa8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014a6a:	6979      	ldr	r1, [r7, #20]
 8014a6c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014a70:	fb01 f303 	mul.w	r3, r1, r3
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d00a      	beq.n	8014a8e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014a7e:	2320      	movs	r3, #32
 8014a80:	2205      	movs	r2, #5
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f7ff fe9a 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014a88:	f04f 33ff 	mov.w	r3, #4294967295
 8014a8c:	e00c      	b.n	8014aa8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	2202      	movs	r2, #2
 8014a92:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a9a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014a9c:	7afb      	ldrb	r3, [r7, #11]
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f000 fadf 	bl	8015064 <SCSI_ProcessRead>
 8014aa6:	4603      	mov	r3, r0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3718      	adds	r7, #24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	32b0      	adds	r2, #176	; 0xb0
 8014ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014acc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <SCSI_Read12+0x2a>
  {
    return -1;
 8014ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad8:	e09a      	b.n	8014c10 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	7a1b      	ldrb	r3, [r3, #8]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f040 808c 	bne.w	8014bfc <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014aea:	b25b      	sxtb	r3, r3
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	db0a      	blt.n	8014b06 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014af6:	2320      	movs	r3, #32
 8014af8:	2205      	movs	r2, #5
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f7ff fe5e 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014b00:	f04f 33ff 	mov.w	r3, #4294967295
 8014b04:	e084      	b.n	8014c10 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014b0c:	2b02      	cmp	r3, #2
 8014b0e:	d108      	bne.n	8014b22 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b10:	7af9      	ldrb	r1, [r7, #11]
 8014b12:	233a      	movs	r3, #58	; 0x3a
 8014b14:	2202      	movs	r2, #2
 8014b16:	68f8      	ldr	r0, [r7, #12]
 8014b18:	f7ff fe50 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b20:	e076      	b.n	8014c10 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	33b0      	adds	r3, #176	; 0xb0
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4413      	add	r3, r2
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	689b      	ldr	r3, [r3, #8]
 8014b34:	7afa      	ldrb	r2, [r7, #11]
 8014b36:	4610      	mov	r0, r2
 8014b38:	4798      	blx	r3
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d008      	beq.n	8014b52 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b40:	7af9      	ldrb	r1, [r7, #11]
 8014b42:	233a      	movs	r3, #58	; 0x3a
 8014b44:	2202      	movs	r2, #2
 8014b46:	68f8      	ldr	r0, [r7, #12]
 8014b48:	f7ff fe38 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b50:	e05e      	b.n	8014c10 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	3302      	adds	r3, #2
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	3303      	adds	r3, #3
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b62:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	3304      	adds	r3, #4
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014b6c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	3205      	adds	r2, #5
 8014b72:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014b74:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	3306      	adds	r3, #6
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	3307      	adds	r3, #7
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014b8c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	3308      	adds	r3, #8
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014b96:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	3209      	adds	r2, #9
 8014b9c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014b9e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014bb2:	7af9      	ldrb	r1, [r7, #11]
 8014bb4:	68f8      	ldr	r0, [r7, #12]
 8014bb6:	f000 fa28 	bl	801500a <SCSI_CheckAddressRange>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	da02      	bge.n	8014bc6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc4:	e024      	b.n	8014c10 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014bd2:	6979      	ldr	r1, [r7, #20]
 8014bd4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014bd8:	fb01 f303 	mul.w	r3, r1, r3
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d00a      	beq.n	8014bf6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014be6:	2320      	movs	r3, #32
 8014be8:	2205      	movs	r2, #5
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7ff fde6 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf4:	e00c      	b.n	8014c10 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	2202      	movs	r2, #2
 8014bfa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c02:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014c04:	7afb      	ldrb	r3, [r7, #11]
 8014c06:	4619      	mov	r1, r3
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f000 fa2b 	bl	8015064 <SCSI_ProcessRead>
 8014c0e:	4603      	mov	r3, r0
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3718      	adds	r7, #24
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b086      	sub	sp, #24
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	460b      	mov	r3, r1
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	32b0      	adds	r2, #176	; 0xb0
 8014c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c34:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d102      	bne.n	8014c42 <SCSI_Write10+0x2a>
  {
    return -1;
 8014c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c40:	e0ba      	b.n	8014db8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	7a1b      	ldrb	r3, [r3, #8]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f040 80b0 	bne.w	8014dac <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d10a      	bne.n	8014c6c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c5c:	2320      	movs	r3, #32
 8014c5e:	2205      	movs	r2, #5
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f7ff fdab 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6a:	e0a5      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014c72:	b25b      	sxtb	r3, r3
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	da0a      	bge.n	8014c8e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c7e:	2320      	movs	r3, #32
 8014c80:	2205      	movs	r2, #5
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f7ff fd9a 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014c88:	f04f 33ff 	mov.w	r3, #4294967295
 8014c8c:	e094      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	33b0      	adds	r3, #176	; 0xb0
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	4413      	add	r3, r2
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	689b      	ldr	r3, [r3, #8]
 8014ca0:	7afa      	ldrb	r2, [r7, #11]
 8014ca2:	4610      	mov	r0, r2
 8014ca4:	4798      	blx	r3
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d008      	beq.n	8014cbe <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014cac:	7af9      	ldrb	r1, [r7, #11]
 8014cae:	233a      	movs	r3, #58	; 0x3a
 8014cb0:	2202      	movs	r2, #2
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f7ff fd82 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014cbc:	e07c      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cc4:	68fa      	ldr	r2, [r7, #12]
 8014cc6:	33b0      	adds	r3, #176	; 0xb0
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	7afa      	ldrb	r2, [r7, #11]
 8014cd2:	4610      	mov	r0, r2
 8014cd4:	4798      	blx	r3
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d008      	beq.n	8014cee <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014cdc:	7af9      	ldrb	r1, [r7, #11]
 8014cde:	2327      	movs	r3, #39	; 0x27
 8014ce0:	2202      	movs	r2, #2
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f7ff fd6a 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8014cec:	e064      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	3302      	adds	r3, #2
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	3303      	adds	r3, #3
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014cfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	3304      	adds	r3, #4
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014d08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	3205      	adds	r2, #5
 8014d0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014d10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	3307      	adds	r3, #7
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	3208      	adds	r2, #8
 8014d24:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014d26:	431a      	orrs	r2, r3
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014d3a:	7af9      	ldrb	r1, [r7, #11]
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f000 f964 	bl	801500a <SCSI_CheckAddressRange>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	da02      	bge.n	8014d4e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4c:	e034      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014d54:	697a      	ldr	r2, [r7, #20]
 8014d56:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014d5a:	fb02 f303 	mul.w	r3, r2, r3
 8014d5e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014d66:	693a      	ldr	r2, [r7, #16]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d00a      	beq.n	8014d82 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014d72:	2320      	movs	r3, #32
 8014d74:	2205      	movs	r2, #5
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f7ff fd20 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d80:	e01a      	b.n	8014db8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d88:	bf28      	it	cs
 8014d8a:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014d8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	2201      	movs	r2, #1
 8014d94:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014d96:	4b0a      	ldr	r3, [pc, #40]	; (8014dc0 <SCSI_Write10+0x1a8>)
 8014d98:	7819      	ldrb	r1, [r3, #0]
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	f103 0210 	add.w	r2, r3, #16
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f005 fff7 	bl	801ad96 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014da8:	2300      	movs	r3, #0
 8014daa:	e005      	b.n	8014db8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8014dac:	7afb      	ldrb	r3, [r7, #11]
 8014dae:	4619      	mov	r1, r3
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f000 f9dd 	bl	8015170 <SCSI_ProcessWrite>
 8014db6:	4603      	mov	r3, r0
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3718      	adds	r7, #24
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	200000c7 	.word	0x200000c7

08014dc4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	60f8      	str	r0, [r7, #12]
 8014dcc:	460b      	mov	r3, r1
 8014dce:	607a      	str	r2, [r7, #4]
 8014dd0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	32b0      	adds	r2, #176	; 0xb0
 8014ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <SCSI_Write12+0x2a>
  {
    return -1;
 8014de8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dec:	e0ca      	b.n	8014f84 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	7a1b      	ldrb	r3, [r3, #8]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	f040 80c0 	bne.w	8014f78 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d10a      	bne.n	8014e18 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014e08:	2320      	movs	r3, #32
 8014e0a:	2205      	movs	r2, #5
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7ff fcd5 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014e12:	f04f 33ff 	mov.w	r3, #4294967295
 8014e16:	e0b5      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014e1e:	b25b      	sxtb	r3, r3
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	da0a      	bge.n	8014e3a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014e2a:	2320      	movs	r3, #32
 8014e2c:	2205      	movs	r2, #5
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f7ff fcc4 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014e34:	f04f 33ff 	mov.w	r3, #4294967295
 8014e38:	e0a4      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e40:	68fa      	ldr	r2, [r7, #12]
 8014e42:	33b0      	adds	r3, #176	; 0xb0
 8014e44:	009b      	lsls	r3, r3, #2
 8014e46:	4413      	add	r3, r2
 8014e48:	685b      	ldr	r3, [r3, #4]
 8014e4a:	689b      	ldr	r3, [r3, #8]
 8014e4c:	7afa      	ldrb	r2, [r7, #11]
 8014e4e:	4610      	mov	r0, r2
 8014e50:	4798      	blx	r3
 8014e52:	4603      	mov	r3, r0
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00b      	beq.n	8014e70 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014e58:	7af9      	ldrb	r1, [r7, #11]
 8014e5a:	233a      	movs	r3, #58	; 0x3a
 8014e5c:	2202      	movs	r2, #2
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f7ff fcac 	bl	80147bc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	2205      	movs	r2, #5
 8014e68:	721a      	strb	r2, [r3, #8]
      return -1;
 8014e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e6e:	e089      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	33b0      	adds	r3, #176	; 0xb0
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	4413      	add	r3, r2
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	68db      	ldr	r3, [r3, #12]
 8014e82:	7afa      	ldrb	r2, [r7, #11]
 8014e84:	4610      	mov	r0, r2
 8014e86:	4798      	blx	r3
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d00b      	beq.n	8014ea6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014e8e:	7af9      	ldrb	r1, [r7, #11]
 8014e90:	2327      	movs	r3, #39	; 0x27
 8014e92:	2202      	movs	r2, #2
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f7ff fc91 	bl	80147bc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2205      	movs	r2, #5
 8014e9e:	721a      	strb	r2, [r3, #8]
      return -1;
 8014ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea4:	e06e      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	3302      	adds	r3, #2
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	3303      	adds	r3, #3
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014eb6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	3304      	adds	r3, #4
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ec0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	3205      	adds	r2, #5
 8014ec6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014ec8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	3306      	adds	r3, #6
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3307      	adds	r3, #7
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ee0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	3308      	adds	r3, #8
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014eea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014eec:	687a      	ldr	r2, [r7, #4]
 8014eee:	3209      	adds	r2, #9
 8014ef0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014ef2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014f06:	7af9      	ldrb	r1, [r7, #11]
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f000 f87e 	bl	801500a <SCSI_CheckAddressRange>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	da02      	bge.n	8014f1a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295
 8014f18:	e034      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014f20:	697a      	ldr	r2, [r7, #20]
 8014f22:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014f26:	fb02 f303 	mul.w	r3, r2, r3
 8014f2a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014f32:	693a      	ldr	r2, [r7, #16]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d00a      	beq.n	8014f4e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014f3e:	2320      	movs	r3, #32
 8014f40:	2205      	movs	r2, #5
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f7ff fc3a 	bl	80147bc <SCSI_SenseCode>
      return -1;
 8014f48:	f04f 33ff 	mov.w	r3, #4294967295
 8014f4c:	e01a      	b.n	8014f84 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f54:	bf28      	it	cs
 8014f56:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014f5a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	2201      	movs	r2, #1
 8014f60:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014f62:	4b0a      	ldr	r3, [pc, #40]	; (8014f8c <SCSI_Write12+0x1c8>)
 8014f64:	7819      	ldrb	r1, [r3, #0]
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	f103 0210 	add.w	r2, r3, #16
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	68f8      	ldr	r0, [r7, #12]
 8014f70:	f005 ff11 	bl	801ad96 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	e005      	b.n	8014f84 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8014f78:	7afb      	ldrb	r3, [r7, #11]
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	68f8      	ldr	r0, [r7, #12]
 8014f7e:	f000 f8f7 	bl	8015170 <SCSI_ProcessWrite>
 8014f82:	4603      	mov	r3, r0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	200000c7 	.word	0x200000c7

08014f90 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b086      	sub	sp, #24
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	460b      	mov	r3, r1
 8014f9a:	607a      	str	r2, [r7, #4]
 8014f9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	32b0      	adds	r2, #176	; 0xb0
 8014fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d102      	bne.n	8014fba <SCSI_Verify10+0x2a>
  {
    return -1;
 8014fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb8:	e023      	b.n	8015002 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 0302 	and.w	r3, r3, #2
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d008      	beq.n	8014fda <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014fc8:	7af9      	ldrb	r1, [r7, #11]
 8014fca:	2324      	movs	r3, #36	; 0x24
 8014fcc:	2205      	movs	r2, #5
 8014fce:	68f8      	ldr	r0, [r7, #12]
 8014fd0:	f7ff fbf4 	bl	80147bc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd8:	e013      	b.n	8015002 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014fe6:	7af9      	ldrb	r1, [r7, #11]
 8014fe8:	68f8      	ldr	r0, [r7, #12]
 8014fea:	f000 f80e 	bl	801500a <SCSI_CheckAddressRange>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	da02      	bge.n	8014ffa <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8014ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff8:	e003      	b.n	8015002 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	60da      	str	r2, [r3, #12]

  return 0;
 8015000:	2300      	movs	r3, #0
}
 8015002:	4618      	mov	r0, r3
 8015004:	3718      	adds	r7, #24
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b086      	sub	sp, #24
 801500e:	af00      	add	r7, sp, #0
 8015010:	60f8      	str	r0, [r7, #12]
 8015012:	607a      	str	r2, [r7, #4]
 8015014:	603b      	str	r3, [r7, #0]
 8015016:	460b      	mov	r3, r1
 8015018:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	32b0      	adds	r2, #176	; 0xb0
 8015024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015028:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d102      	bne.n	8015036 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015030:	f04f 33ff 	mov.w	r3, #4294967295
 8015034:	e011      	b.n	801505a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015036:	687a      	ldr	r2, [r7, #4]
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	441a      	add	r2, r3
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8015042:	429a      	cmp	r2, r3
 8015044:	d908      	bls.n	8015058 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015046:	7af9      	ldrb	r1, [r7, #11]
 8015048:	2321      	movs	r3, #33	; 0x21
 801504a:	2205      	movs	r2, #5
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f7ff fbb5 	bl	80147bc <SCSI_SenseCode>
    return -1;
 8015052:	f04f 33ff 	mov.w	r3, #4294967295
 8015056:	e000      	b.n	801505a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3718      	adds	r7, #24
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
	...

08015064 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015064:	b590      	push	{r4, r7, lr}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	460b      	mov	r3, r1
 801506e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	32b0      	adds	r2, #176	; 0xb0
 801507a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801507e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d102      	bne.n	801508c <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015086:	f04f 33ff 	mov.w	r3, #4294967295
 801508a:	e06a      	b.n	8015162 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015098:	fb02 f303 	mul.w	r3, r2, r3
 801509c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80150a4:	bf28      	it	cs
 80150a6:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80150aa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	33b0      	adds	r3, #176	; 0xb0
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4413      	add	r3, r2
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	691c      	ldr	r4, [r3, #16]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f103 0110 	add.w	r1, r3, #16
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80150d0:	4618      	mov	r0, r3
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80150d8:	b29b      	uxth	r3, r3
 80150da:	78f8      	ldrb	r0, [r7, #3]
 80150dc:	47a0      	blx	r4
 80150de:	4603      	mov	r3, r0
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	da08      	bge.n	80150f6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80150e4:	78f9      	ldrb	r1, [r7, #3]
 80150e6:	2311      	movs	r3, #17
 80150e8:	2204      	movs	r2, #4
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f7ff fb66 	bl	80147bc <SCSI_SenseCode>
    return -1;
 80150f0:	f04f 33ff 	mov.w	r3, #4294967295
 80150f4:	e035      	b.n	8015162 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80150f6:	4b1d      	ldr	r3, [pc, #116]	; (801516c <SCSI_ProcessRead+0x108>)
 80150f8:	7819      	ldrb	r1, [r3, #0]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f103 0210 	add.w	r2, r3, #16
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f005 fe26 	bl	801ad54 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015114:	4619      	mov	r1, r3
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	fbb3 f3f1 	udiv	r3, r3, r1
 801511c:	441a      	add	r2, r3
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015130:	4619      	mov	r1, r3
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	fbb3 f3f1 	udiv	r3, r3, r1
 8015138:	1ad2      	subs	r2, r2, r3
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	1ad2      	subs	r2, r2, r3
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2203      	movs	r2, #3
 801515e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3714      	adds	r7, #20
 8015166:	46bd      	mov	sp, r7
 8015168:	bd90      	pop	{r4, r7, pc}
 801516a:	bf00      	nop
 801516c:	200000c6 	.word	0x200000c6

08015170 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015170:	b590      	push	{r4, r7, lr}
 8015172:	b085      	sub	sp, #20
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	460b      	mov	r3, r1
 801517a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	32b0      	adds	r2, #176	; 0xb0
 8015186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801518a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d102      	bne.n	8015198 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015192:	f04f 33ff 	mov.w	r3, #4294967295
 8015196:	e07a      	b.n	801528e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801519e:	68fa      	ldr	r2, [r7, #12]
 80151a0:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80151a4:	fb02 f303 	mul.w	r3, r2, r3
 80151a8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80151b0:	bf28      	it	cs
 80151b2:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80151b6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	33b0      	adds	r3, #176	; 0xb0
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4413      	add	r3, r2
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	695c      	ldr	r4, [r3, #20]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f103 0110 	add.w	r1, r3, #16
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80151dc:	4618      	mov	r0, r3
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	78f8      	ldrb	r0, [r7, #3]
 80151e8:	47a0      	blx	r4
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	da08      	bge.n	8015202 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80151f0:	78f9      	ldrb	r1, [r7, #3]
 80151f2:	2303      	movs	r3, #3
 80151f4:	2204      	movs	r2, #4
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7ff fae0 	bl	80147bc <SCSI_SenseCode>
    return -1;
 80151fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015200:	e045      	b.n	801528e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801520e:	4619      	mov	r1, r3
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	fbb3 f3f1 	udiv	r3, r3, r1
 8015216:	441a      	add	r2, r3
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801522a:	4619      	mov	r1, r3
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015232:	1ad2      	subs	r2, r2, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	1ad2      	subs	r2, r2, r3
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015250:	2b00      	cmp	r3, #0
 8015252:	d104      	bne.n	801525e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015254:	2100      	movs	r1, #0
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f7fe fd0e 	bl	8013c78 <MSC_BOT_SendCSW>
 801525c:	e016      	b.n	801528c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801526a:	fb02 f303 	mul.w	r3, r2, r3
 801526e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015272:	bf28      	it	cs
 8015274:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015278:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801527a:	4b07      	ldr	r3, [pc, #28]	; (8015298 <SCSI_ProcessWrite+0x128>)
 801527c:	7819      	ldrb	r1, [r3, #0]
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f103 0210 	add.w	r2, r3, #16
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f005 fd85 	bl	801ad96 <USBD_LL_PrepareReceive>
  }

  return 0;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3714      	adds	r7, #20
 8015292:	46bd      	mov	sp, r7
 8015294:	bd90      	pop	{r4, r7, pc}
 8015296:	bf00      	nop
 8015298:	200000c7 	.word	0x200000c7

0801529c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801529c:	b480      	push	{r7}
 801529e:	b087      	sub	sp, #28
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	60b9      	str	r1, [r7, #8]
 80152a6:	4613      	mov	r3, r2
 80152a8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80152aa:	88fb      	ldrh	r3, [r7, #6]
 80152ac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d102      	bne.n	80152ba <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80152b4:	f04f 33ff 	mov.w	r3, #4294967295
 80152b8:	e013      	b.n	80152e2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80152ba:	8afa      	ldrh	r2, [r7, #22]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80152c0:	e00b      	b.n	80152da <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80152c2:	8afb      	ldrh	r3, [r7, #22]
 80152c4:	3b01      	subs	r3, #1
 80152c6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80152c8:	8afb      	ldrh	r3, [r7, #22]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	441a      	add	r2, r3
 80152ce:	8afb      	ldrh	r3, [r7, #22]
 80152d0:	7811      	ldrb	r1, [r2, #0]
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	4413      	add	r3, r2
 80152d6:	460a      	mov	r2, r1
 80152d8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80152da:	8afb      	ldrh	r3, [r7, #22]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1f0      	bne.n	80152c2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80152e0:	2300      	movs	r3, #0
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	371c      	adds	r7, #28
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr

080152ee <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b086      	sub	sp, #24
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	4613      	mov	r3, r2
 80152fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d101      	bne.n	8015306 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015302:	2303      	movs	r3, #3
 8015304:	e01f      	b.n	8015346 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2200      	movs	r2, #0
 801530a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2200      	movs	r2, #0
 8015312:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	2200      	movs	r2, #0
 801531a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d003      	beq.n	801532c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	68ba      	ldr	r2, [r7, #8]
 8015328:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2201      	movs	r2, #1
 8015330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	79fa      	ldrb	r2, [r7, #7]
 8015338:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f005 fb80 	bl	801aa40 <USBD_LL_Init>
 8015340:	4603      	mov	r3, r0
 8015342:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015344:	7dfb      	ldrb	r3, [r7, #23]
}
 8015346:	4618      	mov	r0, r3
 8015348:	3718      	adds	r7, #24
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}

0801534e <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 801534e:	b580      	push	{r7, lr}
 8015350:	b084      	sub	sp, #16
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f005 fbf4 	bl	801ab44 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2201      	movs	r2, #1
 8015360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801536a:	2b00      	cmp	r3, #0
 801536c:	d009      	beq.n	8015382 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	687a      	ldr	r2, [r7, #4]
 8015378:	6852      	ldr	r2, [r2, #4]
 801537a:	b2d2      	uxtb	r2, r2
 801537c:	4611      	mov	r1, r2
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2200      	movs	r2, #0
 8015386:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2200      	movs	r2, #0
 801538e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2200      	movs	r2, #0
 8015396:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f005 fb9c 	bl	801aad8 <USBD_LL_DeInit>
 80153a0:	4603      	mov	r3, r0
 80153a2:	73fb      	strb	r3, [r7, #15]

  return ret;
 80153a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b084      	sub	sp, #16
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
 80153b6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80153b8:	2300      	movs	r3, #0
 80153ba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80153c2:	2303      	movs	r3, #3
 80153c4:	e025      	b.n	8015412 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	683a      	ldr	r2, [r7, #0]
 80153ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	32ae      	adds	r2, #174	; 0xae
 80153d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d00f      	beq.n	8015402 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	32ae      	adds	r2, #174	; 0xae
 80153ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153f2:	f107 020e 	add.w	r2, r7, #14
 80153f6:	4610      	mov	r0, r2
 80153f8:	4798      	blx	r3
 80153fa:	4602      	mov	r2, r0
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015408:	1c5a      	adds	r2, r3, #1
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801541a:	b580      	push	{r7, lr}
 801541c:	b082      	sub	sp, #8
 801541e:	af00      	add	r7, sp, #0
 8015420:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015422:	6878      	ldr	r0, [r7, #4]
 8015424:	f005 fb73 	bl	801ab0e <USBD_LL_Start>
 8015428:	4603      	mov	r3, r0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3708      	adds	r7, #8
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b082      	sub	sp, #8
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f005 fb82 	bl	801ab44 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015446:	2b00      	cmp	r3, #0
 8015448:	d009      	beq.n	801545e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	6852      	ldr	r2, [r2, #4]
 8015456:	b2d2      	uxtb	r2, r2
 8015458:	4611      	mov	r1, r2
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015470:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015472:	4618      	mov	r0, r3
 8015474:	370c      	adds	r7, #12
 8015476:	46bd      	mov	sp, r7
 8015478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547c:	4770      	bx	lr

0801547e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801547e:	b580      	push	{r7, lr}
 8015480:	b084      	sub	sp, #16
 8015482:	af00      	add	r7, sp, #0
 8015484:	6078      	str	r0, [r7, #4]
 8015486:	460b      	mov	r3, r1
 8015488:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801548a:	2300      	movs	r3, #0
 801548c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015494:	2b00      	cmp	r3, #0
 8015496:	d009      	beq.n	80154ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	78fa      	ldrb	r2, [r7, #3]
 80154a2:	4611      	mov	r1, r2
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	4798      	blx	r3
 80154a8:	4603      	mov	r3, r0
 80154aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b084      	sub	sp, #16
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
 80154be:	460b      	mov	r3, r1
 80154c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80154c2:	2300      	movs	r3, #0
 80154c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	78fa      	ldrb	r2, [r7, #3]
 80154d0:	4611      	mov	r1, r2
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	4798      	blx	r3
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80154dc:	2303      	movs	r3, #3
 80154de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b084      	sub	sp, #16
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
 80154f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154fa:	6839      	ldr	r1, [r7, #0]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f001 f908 	bl	8016712 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2201      	movs	r2, #1
 8015506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015510:	461a      	mov	r2, r3
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801551e:	f003 031f 	and.w	r3, r3, #31
 8015522:	2b02      	cmp	r3, #2
 8015524:	d01a      	beq.n	801555c <USBD_LL_SetupStage+0x72>
 8015526:	2b02      	cmp	r3, #2
 8015528:	d822      	bhi.n	8015570 <USBD_LL_SetupStage+0x86>
 801552a:	2b00      	cmp	r3, #0
 801552c:	d002      	beq.n	8015534 <USBD_LL_SetupStage+0x4a>
 801552e:	2b01      	cmp	r3, #1
 8015530:	d00a      	beq.n	8015548 <USBD_LL_SetupStage+0x5e>
 8015532:	e01d      	b.n	8015570 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801553a:	4619      	mov	r1, r3
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f000 fb5f 	bl	8015c00 <USBD_StdDevReq>
 8015542:	4603      	mov	r3, r0
 8015544:	73fb      	strb	r3, [r7, #15]
      break;
 8015546:	e020      	b.n	801558a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801554e:	4619      	mov	r1, r3
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f000 fbc7 	bl	8015ce4 <USBD_StdItfReq>
 8015556:	4603      	mov	r3, r0
 8015558:	73fb      	strb	r3, [r7, #15]
      break;
 801555a:	e016      	b.n	801558a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015562:	4619      	mov	r1, r3
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f000 fc29 	bl	8015dbc <USBD_StdEPReq>
 801556a:	4603      	mov	r3, r0
 801556c:	73fb      	strb	r3, [r7, #15]
      break;
 801556e:	e00c      	b.n	801558a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015576:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801557a:	b2db      	uxtb	r3, r3
 801557c:	4619      	mov	r1, r3
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f005 fb5f 	bl	801ac42 <USBD_LL_StallEP>
 8015584:	4603      	mov	r3, r0
 8015586:	73fb      	strb	r3, [r7, #15]
      break;
 8015588:	bf00      	nop
  }

  return ret;
 801558a:	7bfb      	ldrb	r3, [r7, #15]
}
 801558c:	4618      	mov	r0, r3
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b086      	sub	sp, #24
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	460b      	mov	r3, r1
 801559e:	607a      	str	r2, [r7, #4]
 80155a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80155a2:	2300      	movs	r3, #0
 80155a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80155a6:	7afb      	ldrb	r3, [r7, #11]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d16e      	bne.n	801568a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80155b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80155ba:	2b03      	cmp	r3, #3
 80155bc:	f040 8098 	bne.w	80156f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	689a      	ldr	r2, [r3, #8]
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d913      	bls.n	80155f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	689a      	ldr	r2, [r3, #8]
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	1ad2      	subs	r2, r2, r3
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	68da      	ldr	r2, [r3, #12]
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	689b      	ldr	r3, [r3, #8]
 80155e2:	4293      	cmp	r3, r2
 80155e4:	bf28      	it	cs
 80155e6:	4613      	movcs	r3, r2
 80155e8:	461a      	mov	r2, r3
 80155ea:	6879      	ldr	r1, [r7, #4]
 80155ec:	68f8      	ldr	r0, [r7, #12]
 80155ee:	f001 f967 	bl	80168c0 <USBD_CtlContinueRx>
 80155f2:	e07d      	b.n	80156f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80155fa:	f003 031f 	and.w	r3, r3, #31
 80155fe:	2b02      	cmp	r3, #2
 8015600:	d014      	beq.n	801562c <USBD_LL_DataOutStage+0x98>
 8015602:	2b02      	cmp	r3, #2
 8015604:	d81d      	bhi.n	8015642 <USBD_LL_DataOutStage+0xae>
 8015606:	2b00      	cmp	r3, #0
 8015608:	d002      	beq.n	8015610 <USBD_LL_DataOutStage+0x7c>
 801560a:	2b01      	cmp	r3, #1
 801560c:	d003      	beq.n	8015616 <USBD_LL_DataOutStage+0x82>
 801560e:	e018      	b.n	8015642 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015610:	2300      	movs	r3, #0
 8015612:	75bb      	strb	r3, [r7, #22]
            break;
 8015614:	e018      	b.n	8015648 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801561c:	b2db      	uxtb	r3, r3
 801561e:	4619      	mov	r1, r3
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f000 fa5e 	bl	8015ae2 <USBD_CoreFindIF>
 8015626:	4603      	mov	r3, r0
 8015628:	75bb      	strb	r3, [r7, #22]
            break;
 801562a:	e00d      	b.n	8015648 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015632:	b2db      	uxtb	r3, r3
 8015634:	4619      	mov	r1, r3
 8015636:	68f8      	ldr	r0, [r7, #12]
 8015638:	f000 fa60 	bl	8015afc <USBD_CoreFindEP>
 801563c:	4603      	mov	r3, r0
 801563e:	75bb      	strb	r3, [r7, #22]
            break;
 8015640:	e002      	b.n	8015648 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015642:	2300      	movs	r3, #0
 8015644:	75bb      	strb	r3, [r7, #22]
            break;
 8015646:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015648:	7dbb      	ldrb	r3, [r7, #22]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d119      	bne.n	8015682 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015654:	b2db      	uxtb	r3, r3
 8015656:	2b03      	cmp	r3, #3
 8015658:	d113      	bne.n	8015682 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801565a:	7dba      	ldrb	r2, [r7, #22]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	32ae      	adds	r2, #174	; 0xae
 8015660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015664:	691b      	ldr	r3, [r3, #16]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d00b      	beq.n	8015682 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801566a:	7dba      	ldrb	r2, [r7, #22]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015672:	7dba      	ldrb	r2, [r7, #22]
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	32ae      	adds	r2, #174	; 0xae
 8015678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567c:	691b      	ldr	r3, [r3, #16]
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f001 f92d 	bl	80168e2 <USBD_CtlSendStatus>
 8015688:	e032      	b.n	80156f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801568a:	7afb      	ldrb	r3, [r7, #11]
 801568c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015690:	b2db      	uxtb	r3, r3
 8015692:	4619      	mov	r1, r3
 8015694:	68f8      	ldr	r0, [r7, #12]
 8015696:	f000 fa31 	bl	8015afc <USBD_CoreFindEP>
 801569a:	4603      	mov	r3, r0
 801569c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801569e:	7dbb      	ldrb	r3, [r7, #22]
 80156a0:	2bff      	cmp	r3, #255	; 0xff
 80156a2:	d025      	beq.n	80156f0 <USBD_LL_DataOutStage+0x15c>
 80156a4:	7dbb      	ldrb	r3, [r7, #22]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d122      	bne.n	80156f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	2b03      	cmp	r3, #3
 80156b4:	d117      	bne.n	80156e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80156b6:	7dba      	ldrb	r2, [r7, #22]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	32ae      	adds	r2, #174	; 0xae
 80156bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156c0:	699b      	ldr	r3, [r3, #24]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d00f      	beq.n	80156e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80156c6:	7dba      	ldrb	r2, [r7, #22]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80156ce:	7dba      	ldrb	r2, [r7, #22]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	32ae      	adds	r2, #174	; 0xae
 80156d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156d8:	699b      	ldr	r3, [r3, #24]
 80156da:	7afa      	ldrb	r2, [r7, #11]
 80156dc:	4611      	mov	r1, r2
 80156de:	68f8      	ldr	r0, [r7, #12]
 80156e0:	4798      	blx	r3
 80156e2:	4603      	mov	r3, r0
 80156e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80156e6:	7dfb      	ldrb	r3, [r7, #23]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d001      	beq.n	80156f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80156ec:	7dfb      	ldrb	r3, [r7, #23]
 80156ee:	e000      	b.n	80156f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80156f0:	2300      	movs	r3, #0
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3718      	adds	r7, #24
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}

080156fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b086      	sub	sp, #24
 80156fe:	af00      	add	r7, sp, #0
 8015700:	60f8      	str	r0, [r7, #12]
 8015702:	460b      	mov	r3, r1
 8015704:	607a      	str	r2, [r7, #4]
 8015706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015708:	7afb      	ldrb	r3, [r7, #11]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d16f      	bne.n	80157ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	3314      	adds	r3, #20
 8015712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801571a:	2b02      	cmp	r3, #2
 801571c:	d15a      	bne.n	80157d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	689a      	ldr	r2, [r3, #8]
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	68db      	ldr	r3, [r3, #12]
 8015726:	429a      	cmp	r2, r3
 8015728:	d914      	bls.n	8015754 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	689a      	ldr	r2, [r3, #8]
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	68db      	ldr	r3, [r3, #12]
 8015732:	1ad2      	subs	r2, r2, r3
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	461a      	mov	r2, r3
 801573e:	6879      	ldr	r1, [r7, #4]
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f001 f8ac 	bl	801689e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015746:	2300      	movs	r3, #0
 8015748:	2200      	movs	r2, #0
 801574a:	2100      	movs	r1, #0
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f005 fb22 	bl	801ad96 <USBD_LL_PrepareReceive>
 8015752:	e03f      	b.n	80157d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	68da      	ldr	r2, [r3, #12]
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	689b      	ldr	r3, [r3, #8]
 801575c:	429a      	cmp	r2, r3
 801575e:	d11c      	bne.n	801579a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	685a      	ldr	r2, [r3, #4]
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015768:	429a      	cmp	r2, r3
 801576a:	d316      	bcc.n	801579a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801576c:	693b      	ldr	r3, [r7, #16]
 801576e:	685a      	ldr	r2, [r3, #4]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015776:	429a      	cmp	r2, r3
 8015778:	d20f      	bcs.n	801579a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801577a:	2200      	movs	r2, #0
 801577c:	2100      	movs	r1, #0
 801577e:	68f8      	ldr	r0, [r7, #12]
 8015780:	f001 f88d 	bl	801689e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2200      	movs	r2, #0
 8015788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801578c:	2300      	movs	r3, #0
 801578e:	2200      	movs	r2, #0
 8015790:	2100      	movs	r1, #0
 8015792:	68f8      	ldr	r0, [r7, #12]
 8015794:	f005 faff 	bl	801ad96 <USBD_LL_PrepareReceive>
 8015798:	e01c      	b.n	80157d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	2b03      	cmp	r3, #3
 80157a4:	d10f      	bne.n	80157c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ac:	68db      	ldr	r3, [r3, #12]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d009      	beq.n	80157c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2200      	movs	r2, #0
 80157b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	68f8      	ldr	r0, [r7, #12]
 80157c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80157c6:	2180      	movs	r1, #128	; 0x80
 80157c8:	68f8      	ldr	r0, [r7, #12]
 80157ca:	f005 fa3a 	bl	801ac42 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f001 f89a 	bl	8016908 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d03a      	beq.n	8015854 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f7ff fe42 	bl	8015468 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2200      	movs	r2, #0
 80157e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80157ec:	e032      	b.n	8015854 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80157ee:	7afb      	ldrb	r3, [r7, #11]
 80157f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	4619      	mov	r1, r3
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f000 f97f 	bl	8015afc <USBD_CoreFindEP>
 80157fe:	4603      	mov	r3, r0
 8015800:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015802:	7dfb      	ldrb	r3, [r7, #23]
 8015804:	2bff      	cmp	r3, #255	; 0xff
 8015806:	d025      	beq.n	8015854 <USBD_LL_DataInStage+0x15a>
 8015808:	7dfb      	ldrb	r3, [r7, #23]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d122      	bne.n	8015854 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015814:	b2db      	uxtb	r3, r3
 8015816:	2b03      	cmp	r3, #3
 8015818:	d11c      	bne.n	8015854 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801581a:	7dfa      	ldrb	r2, [r7, #23]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	32ae      	adds	r2, #174	; 0xae
 8015820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015824:	695b      	ldr	r3, [r3, #20]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d014      	beq.n	8015854 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801582a:	7dfa      	ldrb	r2, [r7, #23]
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015832:	7dfa      	ldrb	r2, [r7, #23]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	32ae      	adds	r2, #174	; 0xae
 8015838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801583c:	695b      	ldr	r3, [r3, #20]
 801583e:	7afa      	ldrb	r2, [r7, #11]
 8015840:	4611      	mov	r1, r2
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	4798      	blx	r3
 8015846:	4603      	mov	r3, r0
 8015848:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801584a:	7dbb      	ldrb	r3, [r7, #22]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d001      	beq.n	8015854 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015850:	7dbb      	ldrb	r3, [r7, #22]
 8015852:	e000      	b.n	8015856 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015854:	2300      	movs	r3, #0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3718      	adds	r7, #24
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}

0801585e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b084      	sub	sp, #16
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015866:	2300      	movs	r3, #0
 8015868:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2201      	movs	r2, #1
 801586e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2200      	movs	r2, #0
 8015876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2200      	movs	r2, #0
 801588c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015896:	2b00      	cmp	r3, #0
 8015898:	d014      	beq.n	80158c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d00e      	beq.n	80158c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	6852      	ldr	r2, [r2, #4]
 80158b2:	b2d2      	uxtb	r2, r2
 80158b4:	4611      	mov	r1, r2
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	4798      	blx	r3
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d001      	beq.n	80158c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80158c0:	2303      	movs	r3, #3
 80158c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80158c4:	2340      	movs	r3, #64	; 0x40
 80158c6:	2200      	movs	r2, #0
 80158c8:	2100      	movs	r1, #0
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f005 f955 	bl	801ab7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2201      	movs	r2, #1
 80158d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2240      	movs	r2, #64	; 0x40
 80158dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80158e0:	2340      	movs	r3, #64	; 0x40
 80158e2:	2200      	movs	r2, #0
 80158e4:	2180      	movs	r1, #128	; 0x80
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f005 f947 	bl	801ab7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2201      	movs	r2, #1
 80158f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2240      	movs	r2, #64	; 0x40
 80158f6:	621a      	str	r2, [r3, #32]

  return ret;
 80158f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015902:	b480      	push	{r7}
 8015904:	b083      	sub	sp, #12
 8015906:	af00      	add	r7, sp, #0
 8015908:	6078      	str	r0, [r7, #4]
 801590a:	460b      	mov	r3, r1
 801590c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	78fa      	ldrb	r2, [r7, #3]
 8015912:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015914:	2300      	movs	r3, #0
}
 8015916:	4618      	mov	r0, r3
 8015918:	370c      	adds	r7, #12
 801591a:	46bd      	mov	sp, r7
 801591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015920:	4770      	bx	lr

08015922 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015922:	b480      	push	{r7}
 8015924:	b083      	sub	sp, #12
 8015926:	af00      	add	r7, sp, #0
 8015928:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015930:	b2da      	uxtb	r2, r3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2204      	movs	r2, #4
 801593c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015940:	2300      	movs	r3, #0
}
 8015942:	4618      	mov	r0, r3
 8015944:	370c      	adds	r7, #12
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr

0801594e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801594e:	b480      	push	{r7}
 8015950:	b083      	sub	sp, #12
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801595c:	b2db      	uxtb	r3, r3
 801595e:	2b04      	cmp	r3, #4
 8015960:	d106      	bne.n	8015970 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015968:	b2da      	uxtb	r2, r3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015970:	2300      	movs	r3, #0
}
 8015972:	4618      	mov	r0, r3
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801597e:	b580      	push	{r7, lr}
 8015980:	b082      	sub	sp, #8
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801598c:	b2db      	uxtb	r3, r3
 801598e:	2b03      	cmp	r3, #3
 8015990:	d110      	bne.n	80159b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015998:	2b00      	cmp	r3, #0
 801599a:	d00b      	beq.n	80159b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a2:	69db      	ldr	r3, [r3, #28]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d005      	beq.n	80159b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159ae:	69db      	ldr	r3, [r3, #28]
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80159b4:	2300      	movs	r3, #0
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3708      	adds	r7, #8
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}

080159be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b082      	sub	sp, #8
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
 80159c6:	460b      	mov	r3, r1
 80159c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	32ae      	adds	r2, #174	; 0xae
 80159d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d101      	bne.n	80159e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80159dc:	2303      	movs	r3, #3
 80159de:	e01c      	b.n	8015a1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	2b03      	cmp	r3, #3
 80159ea:	d115      	bne.n	8015a18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	32ae      	adds	r2, #174	; 0xae
 80159f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159fa:	6a1b      	ldr	r3, [r3, #32]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d00b      	beq.n	8015a18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	32ae      	adds	r2, #174	; 0xae
 8015a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a0e:	6a1b      	ldr	r3, [r3, #32]
 8015a10:	78fa      	ldrb	r2, [r7, #3]
 8015a12:	4611      	mov	r1, r2
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a18:	2300      	movs	r3, #0
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}

08015a22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015a22:	b580      	push	{r7, lr}
 8015a24:	b082      	sub	sp, #8
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	32ae      	adds	r2, #174	; 0xae
 8015a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d101      	bne.n	8015a44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015a40:	2303      	movs	r3, #3
 8015a42:	e01c      	b.n	8015a7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a4a:	b2db      	uxtb	r3, r3
 8015a4c:	2b03      	cmp	r3, #3
 8015a4e:	d115      	bne.n	8015a7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	32ae      	adds	r2, #174	; 0xae
 8015a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00b      	beq.n	8015a7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	32ae      	adds	r2, #174	; 0xae
 8015a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a74:	78fa      	ldrb	r2, [r7, #3]
 8015a76:	4611      	mov	r1, r2
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a7c:	2300      	movs	r3, #0
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3708      	adds	r7, #8
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}

08015a86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015a86:	b480      	push	{r7}
 8015a88:	b083      	sub	sp, #12
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015a8e:	2300      	movs	r3, #0
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2201      	movs	r2, #1
 8015aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d00e      	beq.n	8015ad8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	6852      	ldr	r2, [r2, #4]
 8015ac6:	b2d2      	uxtb	r2, r2
 8015ac8:	4611      	mov	r1, r2
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	4798      	blx	r3
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d001      	beq.n	8015ad8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015ad4:	2303      	movs	r3, #3
 8015ad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}

08015ae2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015ae2:	b480      	push	{r7}
 8015ae4:	b083      	sub	sp, #12
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	6078      	str	r0, [r7, #4]
 8015aea:	460b      	mov	r3, r1
 8015aec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015aee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	370c      	adds	r7, #12
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr

08015afc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	460b      	mov	r3, r1
 8015b06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015b08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	370c      	adds	r7, #12
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr

08015b16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b086      	sub	sp, #24
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
 8015b1e:	460b      	mov	r3, r1
 8015b20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	885b      	ldrh	r3, [r3, #2]
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d920      	bls.n	8015b80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	b29b      	uxth	r3, r3
 8015b44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015b46:	e013      	b.n	8015b70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015b48:	f107 030a 	add.w	r3, r7, #10
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	6978      	ldr	r0, [r7, #20]
 8015b50:	f000 f81b 	bl	8015b8a <USBD_GetNextDesc>
 8015b54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	785b      	ldrb	r3, [r3, #1]
 8015b5a:	2b05      	cmp	r3, #5
 8015b5c:	d108      	bne.n	8015b70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	789b      	ldrb	r3, [r3, #2]
 8015b66:	78fa      	ldrb	r2, [r7, #3]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d008      	beq.n	8015b7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	885b      	ldrh	r3, [r3, #2]
 8015b74:	b29a      	uxth	r2, r3
 8015b76:	897b      	ldrh	r3, [r7, #10]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d8e5      	bhi.n	8015b48 <USBD_GetEpDesc+0x32>
 8015b7c:	e000      	b.n	8015b80 <USBD_GetEpDesc+0x6a>
          break;
 8015b7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015b80:	693b      	ldr	r3, [r7, #16]
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3718      	adds	r7, #24
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015b8a:	b480      	push	{r7}
 8015b8c:	b085      	sub	sp, #20
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
 8015b92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	881a      	ldrh	r2, [r3, #0]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	4413      	add	r3, r2
 8015ba4:	b29a      	uxth	r2, r3
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	461a      	mov	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3714      	adds	r7, #20
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc2:	4770      	bx	lr

08015bc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b087      	sub	sp, #28
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015be2:	8a3b      	ldrh	r3, [r7, #16]
 8015be4:	021b      	lsls	r3, r3, #8
 8015be6:	b21a      	sxth	r2, r3
 8015be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015bec:	4313      	orrs	r3, r2
 8015bee:	b21b      	sxth	r3, r3
 8015bf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	371c      	adds	r7, #28
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c16:	2b40      	cmp	r3, #64	; 0x40
 8015c18:	d005      	beq.n	8015c26 <USBD_StdDevReq+0x26>
 8015c1a:	2b40      	cmp	r3, #64	; 0x40
 8015c1c:	d857      	bhi.n	8015cce <USBD_StdDevReq+0xce>
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d00f      	beq.n	8015c42 <USBD_StdDevReq+0x42>
 8015c22:	2b20      	cmp	r3, #32
 8015c24:	d153      	bne.n	8015cce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	32ae      	adds	r2, #174	; 0xae
 8015c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c34:	689b      	ldr	r3, [r3, #8]
 8015c36:	6839      	ldr	r1, [r7, #0]
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	4798      	blx	r3
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8015c40:	e04a      	b.n	8015cd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	785b      	ldrb	r3, [r3, #1]
 8015c46:	2b09      	cmp	r3, #9
 8015c48:	d83b      	bhi.n	8015cc2 <USBD_StdDevReq+0xc2>
 8015c4a:	a201      	add	r2, pc, #4	; (adr r2, 8015c50 <USBD_StdDevReq+0x50>)
 8015c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c50:	08015ca5 	.word	0x08015ca5
 8015c54:	08015cb9 	.word	0x08015cb9
 8015c58:	08015cc3 	.word	0x08015cc3
 8015c5c:	08015caf 	.word	0x08015caf
 8015c60:	08015cc3 	.word	0x08015cc3
 8015c64:	08015c83 	.word	0x08015c83
 8015c68:	08015c79 	.word	0x08015c79
 8015c6c:	08015cc3 	.word	0x08015cc3
 8015c70:	08015c9b 	.word	0x08015c9b
 8015c74:	08015c8d 	.word	0x08015c8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 fa3c 	bl	80160f8 <USBD_GetDescriptor>
          break;
 8015c80:	e024      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015c82:	6839      	ldr	r1, [r7, #0]
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f000 fba1 	bl	80163cc <USBD_SetAddress>
          break;
 8015c8a:	e01f      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015c8c:	6839      	ldr	r1, [r7, #0]
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 fbe0 	bl	8016454 <USBD_SetConfig>
 8015c94:	4603      	mov	r3, r0
 8015c96:	73fb      	strb	r3, [r7, #15]
          break;
 8015c98:	e018      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015c9a:	6839      	ldr	r1, [r7, #0]
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f000 fc83 	bl	80165a8 <USBD_GetConfig>
          break;
 8015ca2:	e013      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015ca4:	6839      	ldr	r1, [r7, #0]
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f000 fcb4 	bl	8016614 <USBD_GetStatus>
          break;
 8015cac:	e00e      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015cae:	6839      	ldr	r1, [r7, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 fce3 	bl	801667c <USBD_SetFeature>
          break;
 8015cb6:	e009      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015cb8:	6839      	ldr	r1, [r7, #0]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 fd07 	bl	80166ce <USBD_ClrFeature>
          break;
 8015cc0:	e004      	b.n	8015ccc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015cc2:	6839      	ldr	r1, [r7, #0]
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 fd5e 	bl	8016786 <USBD_CtlError>
          break;
 8015cca:	bf00      	nop
      }
      break;
 8015ccc:	e004      	b.n	8015cd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015cce:	6839      	ldr	r1, [r7, #0]
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f000 fd58 	bl	8016786 <USBD_CtlError>
      break;
 8015cd6:	bf00      	nop
  }

  return ret;
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop

08015ce4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	781b      	ldrb	r3, [r3, #0]
 8015cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015cfa:	2b40      	cmp	r3, #64	; 0x40
 8015cfc:	d005      	beq.n	8015d0a <USBD_StdItfReq+0x26>
 8015cfe:	2b40      	cmp	r3, #64	; 0x40
 8015d00:	d852      	bhi.n	8015da8 <USBD_StdItfReq+0xc4>
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d001      	beq.n	8015d0a <USBD_StdItfReq+0x26>
 8015d06:	2b20      	cmp	r3, #32
 8015d08:	d14e      	bne.n	8015da8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	3b01      	subs	r3, #1
 8015d14:	2b02      	cmp	r3, #2
 8015d16:	d840      	bhi.n	8015d9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	889b      	ldrh	r3, [r3, #4]
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	2b01      	cmp	r3, #1
 8015d20:	d836      	bhi.n	8015d90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	889b      	ldrh	r3, [r3, #4]
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	4619      	mov	r1, r3
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f7ff fed9 	bl	8015ae2 <USBD_CoreFindIF>
 8015d30:	4603      	mov	r3, r0
 8015d32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d34:	7bbb      	ldrb	r3, [r7, #14]
 8015d36:	2bff      	cmp	r3, #255	; 0xff
 8015d38:	d01d      	beq.n	8015d76 <USBD_StdItfReq+0x92>
 8015d3a:	7bbb      	ldrb	r3, [r7, #14]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d11a      	bne.n	8015d76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015d40:	7bba      	ldrb	r2, [r7, #14]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	32ae      	adds	r2, #174	; 0xae
 8015d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4a:	689b      	ldr	r3, [r3, #8]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d00f      	beq.n	8015d70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015d50:	7bba      	ldrb	r2, [r7, #14]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015d58:	7bba      	ldrb	r2, [r7, #14]
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	32ae      	adds	r2, #174	; 0xae
 8015d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d62:	689b      	ldr	r3, [r3, #8]
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	4798      	blx	r3
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015d6e:	e004      	b.n	8015d7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015d70:	2303      	movs	r3, #3
 8015d72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015d74:	e001      	b.n	8015d7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015d76:	2303      	movs	r3, #3
 8015d78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	88db      	ldrh	r3, [r3, #6]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d110      	bne.n	8015da4 <USBD_StdItfReq+0xc0>
 8015d82:	7bfb      	ldrb	r3, [r7, #15]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d10d      	bne.n	8015da4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f000 fdaa 	bl	80168e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015d8e:	e009      	b.n	8015da4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f000 fcf7 	bl	8016786 <USBD_CtlError>
          break;
 8015d98:	e004      	b.n	8015da4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015d9a:	6839      	ldr	r1, [r7, #0]
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f000 fcf2 	bl	8016786 <USBD_CtlError>
          break;
 8015da2:	e000      	b.n	8015da6 <USBD_StdItfReq+0xc2>
          break;
 8015da4:	bf00      	nop
      }
      break;
 8015da6:	e004      	b.n	8015db2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f000 fceb 	bl	8016786 <USBD_CtlError>
      break;
 8015db0:	bf00      	nop
  }

  return ret;
 8015db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	889b      	ldrh	r3, [r3, #4]
 8015dce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015dd8:	2b40      	cmp	r3, #64	; 0x40
 8015dda:	d007      	beq.n	8015dec <USBD_StdEPReq+0x30>
 8015ddc:	2b40      	cmp	r3, #64	; 0x40
 8015dde:	f200 817f 	bhi.w	80160e0 <USBD_StdEPReq+0x324>
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d02a      	beq.n	8015e3c <USBD_StdEPReq+0x80>
 8015de6:	2b20      	cmp	r3, #32
 8015de8:	f040 817a 	bne.w	80160e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015dec:	7bbb      	ldrb	r3, [r7, #14]
 8015dee:	4619      	mov	r1, r3
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f7ff fe83 	bl	8015afc <USBD_CoreFindEP>
 8015df6:	4603      	mov	r3, r0
 8015df8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015dfa:	7b7b      	ldrb	r3, [r7, #13]
 8015dfc:	2bff      	cmp	r3, #255	; 0xff
 8015dfe:	f000 8174 	beq.w	80160ea <USBD_StdEPReq+0x32e>
 8015e02:	7b7b      	ldrb	r3, [r7, #13]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	f040 8170 	bne.w	80160ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015e0a:	7b7a      	ldrb	r2, [r7, #13]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015e12:	7b7a      	ldrb	r2, [r7, #13]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	32ae      	adds	r2, #174	; 0xae
 8015e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e1c:	689b      	ldr	r3, [r3, #8]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f000 8163 	beq.w	80160ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015e24:	7b7a      	ldrb	r2, [r7, #13]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	32ae      	adds	r2, #174	; 0xae
 8015e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e2e:	689b      	ldr	r3, [r3, #8]
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	4798      	blx	r3
 8015e36:	4603      	mov	r3, r0
 8015e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015e3a:	e156      	b.n	80160ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	785b      	ldrb	r3, [r3, #1]
 8015e40:	2b03      	cmp	r3, #3
 8015e42:	d008      	beq.n	8015e56 <USBD_StdEPReq+0x9a>
 8015e44:	2b03      	cmp	r3, #3
 8015e46:	f300 8145 	bgt.w	80160d4 <USBD_StdEPReq+0x318>
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f000 809b 	beq.w	8015f86 <USBD_StdEPReq+0x1ca>
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d03c      	beq.n	8015ece <USBD_StdEPReq+0x112>
 8015e54:	e13e      	b.n	80160d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	2b02      	cmp	r3, #2
 8015e60:	d002      	beq.n	8015e68 <USBD_StdEPReq+0xac>
 8015e62:	2b03      	cmp	r3, #3
 8015e64:	d016      	beq.n	8015e94 <USBD_StdEPReq+0xd8>
 8015e66:	e02c      	b.n	8015ec2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e68:	7bbb      	ldrb	r3, [r7, #14]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d00d      	beq.n	8015e8a <USBD_StdEPReq+0xce>
 8015e6e:	7bbb      	ldrb	r3, [r7, #14]
 8015e70:	2b80      	cmp	r3, #128	; 0x80
 8015e72:	d00a      	beq.n	8015e8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e74:	7bbb      	ldrb	r3, [r7, #14]
 8015e76:	4619      	mov	r1, r3
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f004 fee2 	bl	801ac42 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e7e:	2180      	movs	r1, #128	; 0x80
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f004 fede 	bl	801ac42 <USBD_LL_StallEP>
 8015e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e88:	e020      	b.n	8015ecc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015e8a:	6839      	ldr	r1, [r7, #0]
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f000 fc7a 	bl	8016786 <USBD_CtlError>
              break;
 8015e92:	e01b      	b.n	8015ecc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	885b      	ldrh	r3, [r3, #2]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d10e      	bne.n	8015eba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015e9c:	7bbb      	ldrb	r3, [r7, #14]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d00b      	beq.n	8015eba <USBD_StdEPReq+0xfe>
 8015ea2:	7bbb      	ldrb	r3, [r7, #14]
 8015ea4:	2b80      	cmp	r3, #128	; 0x80
 8015ea6:	d008      	beq.n	8015eba <USBD_StdEPReq+0xfe>
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	88db      	ldrh	r3, [r3, #6]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d104      	bne.n	8015eba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015eb0:	7bbb      	ldrb	r3, [r7, #14]
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f004 fec4 	bl	801ac42 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 fd11 	bl	80168e2 <USBD_CtlSendStatus>

              break;
 8015ec0:	e004      	b.n	8015ecc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ec2:	6839      	ldr	r1, [r7, #0]
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f000 fc5e 	bl	8016786 <USBD_CtlError>
              break;
 8015eca:	bf00      	nop
          }
          break;
 8015ecc:	e107      	b.n	80160de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	2b02      	cmp	r3, #2
 8015ed8:	d002      	beq.n	8015ee0 <USBD_StdEPReq+0x124>
 8015eda:	2b03      	cmp	r3, #3
 8015edc:	d016      	beq.n	8015f0c <USBD_StdEPReq+0x150>
 8015ede:	e04b      	b.n	8015f78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ee0:	7bbb      	ldrb	r3, [r7, #14]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d00d      	beq.n	8015f02 <USBD_StdEPReq+0x146>
 8015ee6:	7bbb      	ldrb	r3, [r7, #14]
 8015ee8:	2b80      	cmp	r3, #128	; 0x80
 8015eea:	d00a      	beq.n	8015f02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015eec:	7bbb      	ldrb	r3, [r7, #14]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f004 fea6 	bl	801ac42 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ef6:	2180      	movs	r1, #128	; 0x80
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f004 fea2 	bl	801ac42 <USBD_LL_StallEP>
 8015efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015f00:	e040      	b.n	8015f84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015f02:	6839      	ldr	r1, [r7, #0]
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f000 fc3e 	bl	8016786 <USBD_CtlError>
              break;
 8015f0a:	e03b      	b.n	8015f84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	885b      	ldrh	r3, [r3, #2]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d136      	bne.n	8015f82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015f14:	7bbb      	ldrb	r3, [r7, #14]
 8015f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d004      	beq.n	8015f28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015f1e:	7bbb      	ldrb	r3, [r7, #14]
 8015f20:	4619      	mov	r1, r3
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f004 feac 	bl	801ac80 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f000 fcda 	bl	80168e2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f2e:	7bbb      	ldrb	r3, [r7, #14]
 8015f30:	4619      	mov	r1, r3
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff fde2 	bl	8015afc <USBD_CoreFindEP>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f3c:	7b7b      	ldrb	r3, [r7, #13]
 8015f3e:	2bff      	cmp	r3, #255	; 0xff
 8015f40:	d01f      	beq.n	8015f82 <USBD_StdEPReq+0x1c6>
 8015f42:	7b7b      	ldrb	r3, [r7, #13]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d11c      	bne.n	8015f82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015f48:	7b7a      	ldrb	r2, [r7, #13]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015f50:	7b7a      	ldrb	r2, [r7, #13]
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	32ae      	adds	r2, #174	; 0xae
 8015f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f5a:	689b      	ldr	r3, [r3, #8]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d010      	beq.n	8015f82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015f60:	7b7a      	ldrb	r2, [r7, #13]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	32ae      	adds	r2, #174	; 0xae
 8015f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f6a:	689b      	ldr	r3, [r3, #8]
 8015f6c:	6839      	ldr	r1, [r7, #0]
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	4798      	blx	r3
 8015f72:	4603      	mov	r3, r0
 8015f74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015f76:	e004      	b.n	8015f82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 fc03 	bl	8016786 <USBD_CtlError>
              break;
 8015f80:	e000      	b.n	8015f84 <USBD_StdEPReq+0x1c8>
              break;
 8015f82:	bf00      	nop
          }
          break;
 8015f84:	e0ab      	b.n	80160de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f8c:	b2db      	uxtb	r3, r3
 8015f8e:	2b02      	cmp	r3, #2
 8015f90:	d002      	beq.n	8015f98 <USBD_StdEPReq+0x1dc>
 8015f92:	2b03      	cmp	r3, #3
 8015f94:	d032      	beq.n	8015ffc <USBD_StdEPReq+0x240>
 8015f96:	e097      	b.n	80160c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f98:	7bbb      	ldrb	r3, [r7, #14]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d007      	beq.n	8015fae <USBD_StdEPReq+0x1f2>
 8015f9e:	7bbb      	ldrb	r3, [r7, #14]
 8015fa0:	2b80      	cmp	r3, #128	; 0x80
 8015fa2:	d004      	beq.n	8015fae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 fbed 	bl	8016786 <USBD_CtlError>
                break;
 8015fac:	e091      	b.n	80160d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	da0b      	bge.n	8015fce <USBD_StdEPReq+0x212>
 8015fb6:	7bbb      	ldrb	r3, [r7, #14]
 8015fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	4413      	add	r3, r2
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	3310      	adds	r3, #16
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	4413      	add	r3, r2
 8015fca:	3304      	adds	r3, #4
 8015fcc:	e00b      	b.n	8015fe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fce:	7bbb      	ldrb	r3, [r7, #14]
 8015fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	4413      	add	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	2200      	movs	r2, #0
 8015fec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	2202      	movs	r2, #2
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 fc37 	bl	8016868 <USBD_CtlSendData>
              break;
 8015ffa:	e06a      	b.n	80160d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016000:	2b00      	cmp	r3, #0
 8016002:	da11      	bge.n	8016028 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016004:	7bbb      	ldrb	r3, [r7, #14]
 8016006:	f003 020f 	and.w	r2, r3, #15
 801600a:	6879      	ldr	r1, [r7, #4]
 801600c:	4613      	mov	r3, r2
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	4413      	add	r3, r2
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	440b      	add	r3, r1
 8016016:	3324      	adds	r3, #36	; 0x24
 8016018:	881b      	ldrh	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d117      	bne.n	801604e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801601e:	6839      	ldr	r1, [r7, #0]
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fbb0 	bl	8016786 <USBD_CtlError>
                  break;
 8016026:	e054      	b.n	80160d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016028:	7bbb      	ldrb	r3, [r7, #14]
 801602a:	f003 020f 	and.w	r2, r3, #15
 801602e:	6879      	ldr	r1, [r7, #4]
 8016030:	4613      	mov	r3, r2
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	4413      	add	r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	440b      	add	r3, r1
 801603a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801603e:	881b      	ldrh	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d104      	bne.n	801604e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 fb9d 	bl	8016786 <USBD_CtlError>
                  break;
 801604c:	e041      	b.n	80160d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801604e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016052:	2b00      	cmp	r3, #0
 8016054:	da0b      	bge.n	801606e <USBD_StdEPReq+0x2b2>
 8016056:	7bbb      	ldrb	r3, [r7, #14]
 8016058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801605c:	4613      	mov	r3, r2
 801605e:	009b      	lsls	r3, r3, #2
 8016060:	4413      	add	r3, r2
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	3310      	adds	r3, #16
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	4413      	add	r3, r2
 801606a:	3304      	adds	r3, #4
 801606c:	e00b      	b.n	8016086 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801606e:	7bbb      	ldrb	r3, [r7, #14]
 8016070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016074:	4613      	mov	r3, r2
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	4413      	add	r3, r2
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	4413      	add	r3, r2
 8016084:	3304      	adds	r3, #4
 8016086:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016088:	7bbb      	ldrb	r3, [r7, #14]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d002      	beq.n	8016094 <USBD_StdEPReq+0x2d8>
 801608e:	7bbb      	ldrb	r3, [r7, #14]
 8016090:	2b80      	cmp	r3, #128	; 0x80
 8016092:	d103      	bne.n	801609c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	2200      	movs	r2, #0
 8016098:	601a      	str	r2, [r3, #0]
 801609a:	e00e      	b.n	80160ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801609c:	7bbb      	ldrb	r3, [r7, #14]
 801609e:	4619      	mov	r1, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f004 fe0c 	bl	801acbe <USBD_LL_IsStallEP>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d003      	beq.n	80160b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	2201      	movs	r2, #1
 80160b0:	601a      	str	r2, [r3, #0]
 80160b2:	e002      	b.n	80160ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2200      	movs	r2, #0
 80160b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	2202      	movs	r2, #2
 80160be:	4619      	mov	r1, r3
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 fbd1 	bl	8016868 <USBD_CtlSendData>
              break;
 80160c6:	e004      	b.n	80160d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80160c8:	6839      	ldr	r1, [r7, #0]
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 fb5b 	bl	8016786 <USBD_CtlError>
              break;
 80160d0:	bf00      	nop
          }
          break;
 80160d2:	e004      	b.n	80160de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80160d4:	6839      	ldr	r1, [r7, #0]
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 fb55 	bl	8016786 <USBD_CtlError>
          break;
 80160dc:	bf00      	nop
      }
      break;
 80160de:	e005      	b.n	80160ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80160e0:	6839      	ldr	r1, [r7, #0]
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f000 fb4f 	bl	8016786 <USBD_CtlError>
      break;
 80160e8:	e000      	b.n	80160ec <USBD_StdEPReq+0x330>
      break;
 80160ea:	bf00      	nop
  }

  return ret;
 80160ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3710      	adds	r7, #16
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
	...

080160f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016102:	2300      	movs	r3, #0
 8016104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016106:	2300      	movs	r3, #0
 8016108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801610a:	2300      	movs	r3, #0
 801610c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	885b      	ldrh	r3, [r3, #2]
 8016112:	0a1b      	lsrs	r3, r3, #8
 8016114:	b29b      	uxth	r3, r3
 8016116:	3b01      	subs	r3, #1
 8016118:	2b06      	cmp	r3, #6
 801611a:	f200 8128 	bhi.w	801636e <USBD_GetDescriptor+0x276>
 801611e:	a201      	add	r2, pc, #4	; (adr r2, 8016124 <USBD_GetDescriptor+0x2c>)
 8016120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016124:	08016141 	.word	0x08016141
 8016128:	08016159 	.word	0x08016159
 801612c:	08016199 	.word	0x08016199
 8016130:	0801636f 	.word	0x0801636f
 8016134:	0801636f 	.word	0x0801636f
 8016138:	0801630f 	.word	0x0801630f
 801613c:	0801633b 	.word	0x0801633b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	7c12      	ldrb	r2, [r2, #16]
 801614c:	f107 0108 	add.w	r1, r7, #8
 8016150:	4610      	mov	r0, r2
 8016152:	4798      	blx	r3
 8016154:	60f8      	str	r0, [r7, #12]
      break;
 8016156:	e112      	b.n	801637e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	7c1b      	ldrb	r3, [r3, #16]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d10d      	bne.n	801617c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016168:	f107 0208 	add.w	r2, r7, #8
 801616c:	4610      	mov	r0, r2
 801616e:	4798      	blx	r3
 8016170:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	3301      	adds	r3, #1
 8016176:	2202      	movs	r2, #2
 8016178:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801617a:	e100      	b.n	801637e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016184:	f107 0208 	add.w	r2, r7, #8
 8016188:	4610      	mov	r0, r2
 801618a:	4798      	blx	r3
 801618c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	3301      	adds	r3, #1
 8016192:	2202      	movs	r2, #2
 8016194:	701a      	strb	r2, [r3, #0]
      break;
 8016196:	e0f2      	b.n	801637e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	885b      	ldrh	r3, [r3, #2]
 801619c:	b2db      	uxtb	r3, r3
 801619e:	2b05      	cmp	r3, #5
 80161a0:	f200 80ac 	bhi.w	80162fc <USBD_GetDescriptor+0x204>
 80161a4:	a201      	add	r2, pc, #4	; (adr r2, 80161ac <USBD_GetDescriptor+0xb4>)
 80161a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161aa:	bf00      	nop
 80161ac:	080161c5 	.word	0x080161c5
 80161b0:	080161f9 	.word	0x080161f9
 80161b4:	0801622d 	.word	0x0801622d
 80161b8:	08016261 	.word	0x08016261
 80161bc:	08016295 	.word	0x08016295
 80161c0:	080162c9 	.word	0x080162c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d00b      	beq.n	80161e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	7c12      	ldrb	r2, [r2, #16]
 80161dc:	f107 0108 	add.w	r1, r7, #8
 80161e0:	4610      	mov	r0, r2
 80161e2:	4798      	blx	r3
 80161e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161e6:	e091      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161e8:	6839      	ldr	r1, [r7, #0]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 facb 	bl	8016786 <USBD_CtlError>
            err++;
 80161f0:	7afb      	ldrb	r3, [r7, #11]
 80161f2:	3301      	adds	r3, #1
 80161f4:	72fb      	strb	r3, [r7, #11]
          break;
 80161f6:	e089      	b.n	801630c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161fe:	689b      	ldr	r3, [r3, #8]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00b      	beq.n	801621c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801620a:	689b      	ldr	r3, [r3, #8]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	7c12      	ldrb	r2, [r2, #16]
 8016210:	f107 0108 	add.w	r1, r7, #8
 8016214:	4610      	mov	r0, r2
 8016216:	4798      	blx	r3
 8016218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801621a:	e077      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 fab1 	bl	8016786 <USBD_CtlError>
            err++;
 8016224:	7afb      	ldrb	r3, [r7, #11]
 8016226:	3301      	adds	r3, #1
 8016228:	72fb      	strb	r3, [r7, #11]
          break;
 801622a:	e06f      	b.n	801630c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016232:	68db      	ldr	r3, [r3, #12]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00b      	beq.n	8016250 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	7c12      	ldrb	r2, [r2, #16]
 8016244:	f107 0108 	add.w	r1, r7, #8
 8016248:	4610      	mov	r0, r2
 801624a:	4798      	blx	r3
 801624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801624e:	e05d      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016250:	6839      	ldr	r1, [r7, #0]
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f000 fa97 	bl	8016786 <USBD_CtlError>
            err++;
 8016258:	7afb      	ldrb	r3, [r7, #11]
 801625a:	3301      	adds	r3, #1
 801625c:	72fb      	strb	r3, [r7, #11]
          break;
 801625e:	e055      	b.n	801630c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016266:	691b      	ldr	r3, [r3, #16]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00b      	beq.n	8016284 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016272:	691b      	ldr	r3, [r3, #16]
 8016274:	687a      	ldr	r2, [r7, #4]
 8016276:	7c12      	ldrb	r2, [r2, #16]
 8016278:	f107 0108 	add.w	r1, r7, #8
 801627c:	4610      	mov	r0, r2
 801627e:	4798      	blx	r3
 8016280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016282:	e043      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016284:	6839      	ldr	r1, [r7, #0]
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 fa7d 	bl	8016786 <USBD_CtlError>
            err++;
 801628c:	7afb      	ldrb	r3, [r7, #11]
 801628e:	3301      	adds	r3, #1
 8016290:	72fb      	strb	r3, [r7, #11]
          break;
 8016292:	e03b      	b.n	801630c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801629a:	695b      	ldr	r3, [r3, #20]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d00b      	beq.n	80162b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162a6:	695b      	ldr	r3, [r3, #20]
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	7c12      	ldrb	r2, [r2, #16]
 80162ac:	f107 0108 	add.w	r1, r7, #8
 80162b0:	4610      	mov	r0, r2
 80162b2:	4798      	blx	r3
 80162b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162b6:	e029      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f000 fa63 	bl	8016786 <USBD_CtlError>
            err++;
 80162c0:	7afb      	ldrb	r3, [r7, #11]
 80162c2:	3301      	adds	r3, #1
 80162c4:	72fb      	strb	r3, [r7, #11]
          break;
 80162c6:	e021      	b.n	801630c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162ce:	699b      	ldr	r3, [r3, #24]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d00b      	beq.n	80162ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162da:	699b      	ldr	r3, [r3, #24]
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	7c12      	ldrb	r2, [r2, #16]
 80162e0:	f107 0108 	add.w	r1, r7, #8
 80162e4:	4610      	mov	r0, r2
 80162e6:	4798      	blx	r3
 80162e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162ea:	e00f      	b.n	801630c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162ec:	6839      	ldr	r1, [r7, #0]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f000 fa49 	bl	8016786 <USBD_CtlError>
            err++;
 80162f4:	7afb      	ldrb	r3, [r7, #11]
 80162f6:	3301      	adds	r3, #1
 80162f8:	72fb      	strb	r3, [r7, #11]
          break;
 80162fa:	e007      	b.n	801630c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80162fc:	6839      	ldr	r1, [r7, #0]
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fa41 	bl	8016786 <USBD_CtlError>
          err++;
 8016304:	7afb      	ldrb	r3, [r7, #11]
 8016306:	3301      	adds	r3, #1
 8016308:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801630a:	bf00      	nop
      }
      break;
 801630c:	e037      	b.n	801637e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	7c1b      	ldrb	r3, [r3, #16]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d109      	bne.n	801632a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801631e:	f107 0208 	add.w	r2, r7, #8
 8016322:	4610      	mov	r0, r2
 8016324:	4798      	blx	r3
 8016326:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016328:	e029      	b.n	801637e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801632a:	6839      	ldr	r1, [r7, #0]
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f000 fa2a 	bl	8016786 <USBD_CtlError>
        err++;
 8016332:	7afb      	ldrb	r3, [r7, #11]
 8016334:	3301      	adds	r3, #1
 8016336:	72fb      	strb	r3, [r7, #11]
      break;
 8016338:	e021      	b.n	801637e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	7c1b      	ldrb	r3, [r3, #16]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d10d      	bne.n	801635e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801634a:	f107 0208 	add.w	r2, r7, #8
 801634e:	4610      	mov	r0, r2
 8016350:	4798      	blx	r3
 8016352:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	3301      	adds	r3, #1
 8016358:	2207      	movs	r2, #7
 801635a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801635c:	e00f      	b.n	801637e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801635e:	6839      	ldr	r1, [r7, #0]
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f000 fa10 	bl	8016786 <USBD_CtlError>
        err++;
 8016366:	7afb      	ldrb	r3, [r7, #11]
 8016368:	3301      	adds	r3, #1
 801636a:	72fb      	strb	r3, [r7, #11]
      break;
 801636c:	e007      	b.n	801637e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801636e:	6839      	ldr	r1, [r7, #0]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 fa08 	bl	8016786 <USBD_CtlError>
      err++;
 8016376:	7afb      	ldrb	r3, [r7, #11]
 8016378:	3301      	adds	r3, #1
 801637a:	72fb      	strb	r3, [r7, #11]
      break;
 801637c:	bf00      	nop
  }

  if (err != 0U)
 801637e:	7afb      	ldrb	r3, [r7, #11]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d11e      	bne.n	80163c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	88db      	ldrh	r3, [r3, #6]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d016      	beq.n	80163ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801638c:	893b      	ldrh	r3, [r7, #8]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00e      	beq.n	80163b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	88da      	ldrh	r2, [r3, #6]
 8016396:	893b      	ldrh	r3, [r7, #8]
 8016398:	4293      	cmp	r3, r2
 801639a:	bf28      	it	cs
 801639c:	4613      	movcs	r3, r2
 801639e:	b29b      	uxth	r3, r3
 80163a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80163a2:	893b      	ldrh	r3, [r7, #8]
 80163a4:	461a      	mov	r2, r3
 80163a6:	68f9      	ldr	r1, [r7, #12]
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 fa5d 	bl	8016868 <USBD_CtlSendData>
 80163ae:	e009      	b.n	80163c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80163b0:	6839      	ldr	r1, [r7, #0]
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 f9e7 	bl	8016786 <USBD_CtlError>
 80163b8:	e004      	b.n	80163c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 fa91 	bl	80168e2 <USBD_CtlSendStatus>
 80163c0:	e000      	b.n	80163c4 <USBD_GetDescriptor+0x2cc>
    return;
 80163c2:	bf00      	nop
  }
}
 80163c4:	3710      	adds	r7, #16
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop

080163cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	889b      	ldrh	r3, [r3, #4]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d131      	bne.n	8016442 <USBD_SetAddress+0x76>
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	88db      	ldrh	r3, [r3, #6]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d12d      	bne.n	8016442 <USBD_SetAddress+0x76>
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	885b      	ldrh	r3, [r3, #2]
 80163ea:	2b7f      	cmp	r3, #127	; 0x7f
 80163ec:	d829      	bhi.n	8016442 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	885b      	ldrh	r3, [r3, #2]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80163f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016400:	b2db      	uxtb	r3, r3
 8016402:	2b03      	cmp	r3, #3
 8016404:	d104      	bne.n	8016410 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016406:	6839      	ldr	r1, [r7, #0]
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f000 f9bc 	bl	8016786 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801640e:	e01d      	b.n	801644c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	7bfa      	ldrb	r2, [r7, #15]
 8016414:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016418:	7bfb      	ldrb	r3, [r7, #15]
 801641a:	4619      	mov	r1, r3
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f004 fc7a 	bl	801ad16 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f000 fa5d 	bl	80168e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016428:	7bfb      	ldrb	r3, [r7, #15]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d004      	beq.n	8016438 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2202      	movs	r2, #2
 8016432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016436:	e009      	b.n	801644c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2201      	movs	r2, #1
 801643c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016440:	e004      	b.n	801644c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016442:	6839      	ldr	r1, [r7, #0]
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f000 f99e 	bl	8016786 <USBD_CtlError>
  }
}
 801644a:	bf00      	nop
 801644c:	bf00      	nop
 801644e:	3710      	adds	r7, #16
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801645e:	2300      	movs	r3, #0
 8016460:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	885b      	ldrh	r3, [r3, #2]
 8016466:	b2da      	uxtb	r2, r3
 8016468:	4b4e      	ldr	r3, [pc, #312]	; (80165a4 <USBD_SetConfig+0x150>)
 801646a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801646c:	4b4d      	ldr	r3, [pc, #308]	; (80165a4 <USBD_SetConfig+0x150>)
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	2b01      	cmp	r3, #1
 8016472:	d905      	bls.n	8016480 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016474:	6839      	ldr	r1, [r7, #0]
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 f985 	bl	8016786 <USBD_CtlError>
    return USBD_FAIL;
 801647c:	2303      	movs	r3, #3
 801647e:	e08c      	b.n	801659a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2b02      	cmp	r3, #2
 801648a:	d002      	beq.n	8016492 <USBD_SetConfig+0x3e>
 801648c:	2b03      	cmp	r3, #3
 801648e:	d029      	beq.n	80164e4 <USBD_SetConfig+0x90>
 8016490:	e075      	b.n	801657e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016492:	4b44      	ldr	r3, [pc, #272]	; (80165a4 <USBD_SetConfig+0x150>)
 8016494:	781b      	ldrb	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d020      	beq.n	80164dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801649a:	4b42      	ldr	r3, [pc, #264]	; (80165a4 <USBD_SetConfig+0x150>)
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	461a      	mov	r2, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80164a4:	4b3f      	ldr	r3, [pc, #252]	; (80165a4 <USBD_SetConfig+0x150>)
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	4619      	mov	r1, r3
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f7fe ffe7 	bl	801547e <USBD_SetClassConfig>
 80164b0:	4603      	mov	r3, r0
 80164b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80164b4:	7bfb      	ldrb	r3, [r7, #15]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d008      	beq.n	80164cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80164ba:	6839      	ldr	r1, [r7, #0]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f000 f962 	bl	8016786 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2202      	movs	r2, #2
 80164c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80164ca:	e065      	b.n	8016598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	f000 fa08 	bl	80168e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2203      	movs	r2, #3
 80164d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80164da:	e05d      	b.n	8016598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f000 fa00 	bl	80168e2 <USBD_CtlSendStatus>
      break;
 80164e2:	e059      	b.n	8016598 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80164e4:	4b2f      	ldr	r3, [pc, #188]	; (80165a4 <USBD_SetConfig+0x150>)
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d112      	bne.n	8016512 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2202      	movs	r2, #2
 80164f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80164f4:	4b2b      	ldr	r3, [pc, #172]	; (80165a4 <USBD_SetConfig+0x150>)
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	461a      	mov	r2, r3
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80164fe:	4b29      	ldr	r3, [pc, #164]	; (80165a4 <USBD_SetConfig+0x150>)
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	4619      	mov	r1, r3
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7fe ffd6 	bl	80154b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f000 f9e9 	bl	80168e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016510:	e042      	b.n	8016598 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016512:	4b24      	ldr	r3, [pc, #144]	; (80165a4 <USBD_SetConfig+0x150>)
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	461a      	mov	r2, r3
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	429a      	cmp	r2, r3
 801651e:	d02a      	beq.n	8016576 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	b2db      	uxtb	r3, r3
 8016526:	4619      	mov	r1, r3
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f7fe ffc4 	bl	80154b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801652e:	4b1d      	ldr	r3, [pc, #116]	; (80165a4 <USBD_SetConfig+0x150>)
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	461a      	mov	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016538:	4b1a      	ldr	r3, [pc, #104]	; (80165a4 <USBD_SetConfig+0x150>)
 801653a:	781b      	ldrb	r3, [r3, #0]
 801653c:	4619      	mov	r1, r3
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7fe ff9d 	bl	801547e <USBD_SetClassConfig>
 8016544:	4603      	mov	r3, r0
 8016546:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016548:	7bfb      	ldrb	r3, [r7, #15]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d00f      	beq.n	801656e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801654e:	6839      	ldr	r1, [r7, #0]
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f000 f918 	bl	8016786 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	b2db      	uxtb	r3, r3
 801655c:	4619      	mov	r1, r3
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f7fe ffa9 	bl	80154b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2202      	movs	r2, #2
 8016568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801656c:	e014      	b.n	8016598 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 f9b7 	bl	80168e2 <USBD_CtlSendStatus>
      break;
 8016574:	e010      	b.n	8016598 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 f9b3 	bl	80168e2 <USBD_CtlSendStatus>
      break;
 801657c:	e00c      	b.n	8016598 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801657e:	6839      	ldr	r1, [r7, #0]
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f000 f900 	bl	8016786 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016586:	4b07      	ldr	r3, [pc, #28]	; (80165a4 <USBD_SetConfig+0x150>)
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	4619      	mov	r1, r3
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7fe ff92 	bl	80154b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016592:	2303      	movs	r3, #3
 8016594:	73fb      	strb	r3, [r7, #15]
      break;
 8016596:	bf00      	nop
  }

  return ret;
 8016598:	7bfb      	ldrb	r3, [r7, #15]
}
 801659a:	4618      	mov	r0, r3
 801659c:	3710      	adds	r7, #16
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	20001abc 	.word	0x20001abc

080165a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	88db      	ldrh	r3, [r3, #6]
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d004      	beq.n	80165c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80165ba:	6839      	ldr	r1, [r7, #0]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f000 f8e2 	bl	8016786 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80165c2:	e023      	b.n	801660c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	dc02      	bgt.n	80165d6 <USBD_GetConfig+0x2e>
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	dc03      	bgt.n	80165dc <USBD_GetConfig+0x34>
 80165d4:	e015      	b.n	8016602 <USBD_GetConfig+0x5a>
 80165d6:	2b03      	cmp	r3, #3
 80165d8:	d00b      	beq.n	80165f2 <USBD_GetConfig+0x4a>
 80165da:	e012      	b.n	8016602 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2200      	movs	r2, #0
 80165e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	3308      	adds	r3, #8
 80165e6:	2201      	movs	r2, #1
 80165e8:	4619      	mov	r1, r3
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f000 f93c 	bl	8016868 <USBD_CtlSendData>
        break;
 80165f0:	e00c      	b.n	801660c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	3304      	adds	r3, #4
 80165f6:	2201      	movs	r2, #1
 80165f8:	4619      	mov	r1, r3
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 f934 	bl	8016868 <USBD_CtlSendData>
        break;
 8016600:	e004      	b.n	801660c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016602:	6839      	ldr	r1, [r7, #0]
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f000 f8be 	bl	8016786 <USBD_CtlError>
        break;
 801660a:	bf00      	nop
}
 801660c:	bf00      	nop
 801660e:	3708      	adds	r7, #8
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}

08016614 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016624:	b2db      	uxtb	r3, r3
 8016626:	3b01      	subs	r3, #1
 8016628:	2b02      	cmp	r3, #2
 801662a:	d81e      	bhi.n	801666a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	88db      	ldrh	r3, [r3, #6]
 8016630:	2b02      	cmp	r3, #2
 8016632:	d004      	beq.n	801663e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016634:	6839      	ldr	r1, [r7, #0]
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f000 f8a5 	bl	8016786 <USBD_CtlError>
        break;
 801663c:	e01a      	b.n	8016674 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	2201      	movs	r2, #1
 8016642:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801664a:	2b00      	cmp	r3, #0
 801664c:	d005      	beq.n	801665a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	f043 0202 	orr.w	r2, r3, #2
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	330c      	adds	r3, #12
 801665e:	2202      	movs	r2, #2
 8016660:	4619      	mov	r1, r3
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 f900 	bl	8016868 <USBD_CtlSendData>
      break;
 8016668:	e004      	b.n	8016674 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 f88a 	bl	8016786 <USBD_CtlError>
      break;
 8016672:	bf00      	nop
  }
}
 8016674:	bf00      	nop
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}

0801667c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	885b      	ldrh	r3, [r3, #2]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d107      	bne.n	801669e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2201      	movs	r2, #1
 8016692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f000 f923 	bl	80168e2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801669c:	e013      	b.n	80166c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	885b      	ldrh	r3, [r3, #2]
 80166a2:	2b02      	cmp	r3, #2
 80166a4:	d10b      	bne.n	80166be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	889b      	ldrh	r3, [r3, #4]
 80166aa:	0a1b      	lsrs	r3, r3, #8
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	b2da      	uxtb	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f000 f913 	bl	80168e2 <USBD_CtlSendStatus>
}
 80166bc:	e003      	b.n	80166c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80166be:	6839      	ldr	r1, [r7, #0]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f000 f860 	bl	8016786 <USBD_CtlError>
}
 80166c6:	bf00      	nop
 80166c8:	3708      	adds	r7, #8
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}

080166ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166ce:	b580      	push	{r7, lr}
 80166d0:	b082      	sub	sp, #8
 80166d2:	af00      	add	r7, sp, #0
 80166d4:	6078      	str	r0, [r7, #4]
 80166d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	3b01      	subs	r3, #1
 80166e2:	2b02      	cmp	r3, #2
 80166e4:	d80b      	bhi.n	80166fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	885b      	ldrh	r3, [r3, #2]
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d10c      	bne.n	8016708 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f000 f8f3 	bl	80168e2 <USBD_CtlSendStatus>
      }
      break;
 80166fc:	e004      	b.n	8016708 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80166fe:	6839      	ldr	r1, [r7, #0]
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f000 f840 	bl	8016786 <USBD_CtlError>
      break;
 8016706:	e000      	b.n	801670a <USBD_ClrFeature+0x3c>
      break;
 8016708:	bf00      	nop
  }
}
 801670a:	bf00      	nop
 801670c:	3708      	adds	r7, #8
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}

08016712 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016712:	b580      	push	{r7, lr}
 8016714:	b084      	sub	sp, #16
 8016716:	af00      	add	r7, sp, #0
 8016718:	6078      	str	r0, [r7, #4]
 801671a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	781a      	ldrb	r2, [r3, #0]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	3301      	adds	r3, #1
 801672c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	781a      	ldrb	r2, [r3, #0]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	3301      	adds	r3, #1
 801673a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	f7ff fa41 	bl	8015bc4 <SWAPBYTE>
 8016742:	4603      	mov	r3, r0
 8016744:	461a      	mov	r2, r3
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	3301      	adds	r3, #1
 801674e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	3301      	adds	r3, #1
 8016754:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	f7ff fa34 	bl	8015bc4 <SWAPBYTE>
 801675c:	4603      	mov	r3, r0
 801675e:	461a      	mov	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	3301      	adds	r3, #1
 8016768:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	3301      	adds	r3, #1
 801676e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016770:	68f8      	ldr	r0, [r7, #12]
 8016772:	f7ff fa27 	bl	8015bc4 <SWAPBYTE>
 8016776:	4603      	mov	r3, r0
 8016778:	461a      	mov	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	80da      	strh	r2, [r3, #6]
}
 801677e:	bf00      	nop
 8016780:	3710      	adds	r7, #16
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}

08016786 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016786:	b580      	push	{r7, lr}
 8016788:	b082      	sub	sp, #8
 801678a:	af00      	add	r7, sp, #0
 801678c:	6078      	str	r0, [r7, #4]
 801678e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016790:	2180      	movs	r1, #128	; 0x80
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f004 fa55 	bl	801ac42 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016798:	2100      	movs	r1, #0
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f004 fa51 	bl	801ac42 <USBD_LL_StallEP>
}
 80167a0:	bf00      	nop
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b086      	sub	sp, #24
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80167b4:	2300      	movs	r3, #0
 80167b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d036      	beq.n	801682c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80167c2:	6938      	ldr	r0, [r7, #16]
 80167c4:	f000 f836 	bl	8016834 <USBD_GetLen>
 80167c8:	4603      	mov	r3, r0
 80167ca:	3301      	adds	r3, #1
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80167d6:	7dfb      	ldrb	r3, [r7, #23]
 80167d8:	68ba      	ldr	r2, [r7, #8]
 80167da:	4413      	add	r3, r2
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	7812      	ldrb	r2, [r2, #0]
 80167e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80167e2:	7dfb      	ldrb	r3, [r7, #23]
 80167e4:	3301      	adds	r3, #1
 80167e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80167e8:	7dfb      	ldrb	r3, [r7, #23]
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	4413      	add	r3, r2
 80167ee:	2203      	movs	r2, #3
 80167f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80167f2:	7dfb      	ldrb	r3, [r7, #23]
 80167f4:	3301      	adds	r3, #1
 80167f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80167f8:	e013      	b.n	8016822 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80167fa:	7dfb      	ldrb	r3, [r7, #23]
 80167fc:	68ba      	ldr	r2, [r7, #8]
 80167fe:	4413      	add	r3, r2
 8016800:	693a      	ldr	r2, [r7, #16]
 8016802:	7812      	ldrb	r2, [r2, #0]
 8016804:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016806:	693b      	ldr	r3, [r7, #16]
 8016808:	3301      	adds	r3, #1
 801680a:	613b      	str	r3, [r7, #16]
    idx++;
 801680c:	7dfb      	ldrb	r3, [r7, #23]
 801680e:	3301      	adds	r3, #1
 8016810:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016812:	7dfb      	ldrb	r3, [r7, #23]
 8016814:	68ba      	ldr	r2, [r7, #8]
 8016816:	4413      	add	r3, r2
 8016818:	2200      	movs	r2, #0
 801681a:	701a      	strb	r2, [r3, #0]
    idx++;
 801681c:	7dfb      	ldrb	r3, [r7, #23]
 801681e:	3301      	adds	r3, #1
 8016820:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d1e7      	bne.n	80167fa <USBD_GetString+0x52>
 801682a:	e000      	b.n	801682e <USBD_GetString+0x86>
    return;
 801682c:	bf00      	nop
  }
}
 801682e:	3718      	adds	r7, #24
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016834:	b480      	push	{r7}
 8016836:	b085      	sub	sp, #20
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801683c:	2300      	movs	r3, #0
 801683e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016844:	e005      	b.n	8016852 <USBD_GetLen+0x1e>
  {
    len++;
 8016846:	7bfb      	ldrb	r3, [r7, #15]
 8016848:	3301      	adds	r3, #1
 801684a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	3301      	adds	r3, #1
 8016850:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d1f5      	bne.n	8016846 <USBD_GetLen+0x12>
  }

  return len;
 801685a:	7bfb      	ldrb	r3, [r7, #15]
}
 801685c:	4618      	mov	r0, r3
 801685e:	3714      	adds	r7, #20
 8016860:	46bd      	mov	sp, r7
 8016862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016866:	4770      	bx	lr

08016868 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b084      	sub	sp, #16
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2202      	movs	r2, #2
 8016878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	687a      	ldr	r2, [r7, #4]
 8016886:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	68ba      	ldr	r2, [r7, #8]
 801688c:	2100      	movs	r1, #0
 801688e:	68f8      	ldr	r0, [r7, #12]
 8016890:	f004 fa60 	bl	801ad54 <USBD_LL_Transmit>

  return USBD_OK;
 8016894:	2300      	movs	r3, #0
}
 8016896:	4618      	mov	r0, r3
 8016898:	3710      	adds	r7, #16
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b084      	sub	sp, #16
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	60f8      	str	r0, [r7, #12]
 80168a6:	60b9      	str	r1, [r7, #8]
 80168a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	68ba      	ldr	r2, [r7, #8]
 80168ae:	2100      	movs	r1, #0
 80168b0:	68f8      	ldr	r0, [r7, #12]
 80168b2:	f004 fa4f 	bl	801ad54 <USBD_LL_Transmit>

  return USBD_OK;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	68ba      	ldr	r2, [r7, #8]
 80168d0:	2100      	movs	r1, #0
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	f004 fa5f 	bl	801ad96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168d8:	2300      	movs	r3, #0
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b082      	sub	sp, #8
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2204      	movs	r2, #4
 80168ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80168f2:	2300      	movs	r3, #0
 80168f4:	2200      	movs	r2, #0
 80168f6:	2100      	movs	r1, #0
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f004 fa2b 	bl	801ad54 <USBD_LL_Transmit>

  return USBD_OK;
 80168fe:	2300      	movs	r3, #0
}
 8016900:	4618      	mov	r0, r3
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2205      	movs	r2, #5
 8016914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016918:	2300      	movs	r3, #0
 801691a:	2200      	movs	r2, #0
 801691c:	2100      	movs	r1, #0
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f004 fa39 	bl	801ad96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016924:	2300      	movs	r3, #0
}
 8016926:	4618      	mov	r0, r3
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
	...

08016930 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
 8016936:	4603      	mov	r3, r0
 8016938:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801693a:	79fb      	ldrb	r3, [r7, #7]
 801693c:	4a08      	ldr	r2, [pc, #32]	; (8016960 <disk_status+0x30>)
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	4413      	add	r3, r2
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	79fa      	ldrb	r2, [r7, #7]
 8016948:	4905      	ldr	r1, [pc, #20]	; (8016960 <disk_status+0x30>)
 801694a:	440a      	add	r2, r1
 801694c:	7a12      	ldrb	r2, [r2, #8]
 801694e:	4610      	mov	r0, r2
 8016950:	4798      	blx	r3
 8016952:	4603      	mov	r3, r0
 8016954:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016956:	7bfb      	ldrb	r3, [r7, #15]
}
 8016958:	4618      	mov	r0, r3
 801695a:	3710      	adds	r7, #16
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}
 8016960:	20001ce8 	.word	0x20001ce8

08016964 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b084      	sub	sp, #16
 8016968:	af00      	add	r7, sp, #0
 801696a:	4603      	mov	r3, r0
 801696c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801696e:	2300      	movs	r3, #0
 8016970:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016972:	79fb      	ldrb	r3, [r7, #7]
 8016974:	4a0d      	ldr	r2, [pc, #52]	; (80169ac <disk_initialize+0x48>)
 8016976:	5cd3      	ldrb	r3, [r2, r3]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d111      	bne.n	80169a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801697c:	79fb      	ldrb	r3, [r7, #7]
 801697e:	4a0b      	ldr	r2, [pc, #44]	; (80169ac <disk_initialize+0x48>)
 8016980:	2101      	movs	r1, #1
 8016982:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016984:	79fb      	ldrb	r3, [r7, #7]
 8016986:	4a09      	ldr	r2, [pc, #36]	; (80169ac <disk_initialize+0x48>)
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	4413      	add	r3, r2
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	79fa      	ldrb	r2, [r7, #7]
 8016992:	4906      	ldr	r1, [pc, #24]	; (80169ac <disk_initialize+0x48>)
 8016994:	440a      	add	r2, r1
 8016996:	7a12      	ldrb	r2, [r2, #8]
 8016998:	4610      	mov	r0, r2
 801699a:	4798      	blx	r3
 801699c:	4603      	mov	r3, r0
 801699e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80169a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
 80169aa:	bf00      	nop
 80169ac:	20001ce8 	.word	0x20001ce8

080169b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80169b0:	b590      	push	{r4, r7, lr}
 80169b2:	b087      	sub	sp, #28
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60b9      	str	r1, [r7, #8]
 80169b8:	607a      	str	r2, [r7, #4]
 80169ba:	603b      	str	r3, [r7, #0]
 80169bc:	4603      	mov	r3, r0
 80169be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80169c0:	7bfb      	ldrb	r3, [r7, #15]
 80169c2:	4a0a      	ldr	r2, [pc, #40]	; (80169ec <disk_read+0x3c>)
 80169c4:	009b      	lsls	r3, r3, #2
 80169c6:	4413      	add	r3, r2
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	689c      	ldr	r4, [r3, #8]
 80169cc:	7bfb      	ldrb	r3, [r7, #15]
 80169ce:	4a07      	ldr	r2, [pc, #28]	; (80169ec <disk_read+0x3c>)
 80169d0:	4413      	add	r3, r2
 80169d2:	7a18      	ldrb	r0, [r3, #8]
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	68b9      	ldr	r1, [r7, #8]
 80169da:	47a0      	blx	r4
 80169dc:	4603      	mov	r3, r0
 80169de:	75fb      	strb	r3, [r7, #23]
  return res;
 80169e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80169e2:	4618      	mov	r0, r3
 80169e4:	371c      	adds	r7, #28
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd90      	pop	{r4, r7, pc}
 80169ea:	bf00      	nop
 80169ec:	20001ce8 	.word	0x20001ce8

080169f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80169f0:	b590      	push	{r4, r7, lr}
 80169f2:	b087      	sub	sp, #28
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60b9      	str	r1, [r7, #8]
 80169f8:	607a      	str	r2, [r7, #4]
 80169fa:	603b      	str	r3, [r7, #0]
 80169fc:	4603      	mov	r3, r0
 80169fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016a00:	7bfb      	ldrb	r3, [r7, #15]
 8016a02:	4a0a      	ldr	r2, [pc, #40]	; (8016a2c <disk_write+0x3c>)
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	4413      	add	r3, r2
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	68dc      	ldr	r4, [r3, #12]
 8016a0c:	7bfb      	ldrb	r3, [r7, #15]
 8016a0e:	4a07      	ldr	r2, [pc, #28]	; (8016a2c <disk_write+0x3c>)
 8016a10:	4413      	add	r3, r2
 8016a12:	7a18      	ldrb	r0, [r3, #8]
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	68b9      	ldr	r1, [r7, #8]
 8016a1a:	47a0      	blx	r4
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8016a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	371c      	adds	r7, #28
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd90      	pop	{r4, r7, pc}
 8016a2a:	bf00      	nop
 8016a2c:	20001ce8 	.word	0x20001ce8

08016a30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b084      	sub	sp, #16
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	4603      	mov	r3, r0
 8016a38:	603a      	str	r2, [r7, #0]
 8016a3a:	71fb      	strb	r3, [r7, #7]
 8016a3c:	460b      	mov	r3, r1
 8016a3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016a40:	79fb      	ldrb	r3, [r7, #7]
 8016a42:	4a09      	ldr	r2, [pc, #36]	; (8016a68 <disk_ioctl+0x38>)
 8016a44:	009b      	lsls	r3, r3, #2
 8016a46:	4413      	add	r3, r2
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	691b      	ldr	r3, [r3, #16]
 8016a4c:	79fa      	ldrb	r2, [r7, #7]
 8016a4e:	4906      	ldr	r1, [pc, #24]	; (8016a68 <disk_ioctl+0x38>)
 8016a50:	440a      	add	r2, r1
 8016a52:	7a10      	ldrb	r0, [r2, #8]
 8016a54:	79b9      	ldrb	r1, [r7, #6]
 8016a56:	683a      	ldr	r2, [r7, #0]
 8016a58:	4798      	blx	r3
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8016a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3710      	adds	r7, #16
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	20001ce8 	.word	0x20001ce8

08016a6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016a6c:	b480      	push	{r7}
 8016a6e:	b085      	sub	sp, #20
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	3301      	adds	r3, #1
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016a7c:	89fb      	ldrh	r3, [r7, #14]
 8016a7e:	021b      	lsls	r3, r3, #8
 8016a80:	b21a      	sxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	b21b      	sxth	r3, r3
 8016a88:	4313      	orrs	r3, r2
 8016a8a:	b21b      	sxth	r3, r3
 8016a8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016a8e:	89fb      	ldrh	r3, [r7, #14]
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3714      	adds	r7, #20
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr

08016a9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016a9c:	b480      	push	{r7}
 8016a9e:	b085      	sub	sp, #20
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	3303      	adds	r3, #3
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	021b      	lsls	r3, r3, #8
 8016ab0:	687a      	ldr	r2, [r7, #4]
 8016ab2:	3202      	adds	r2, #2
 8016ab4:	7812      	ldrb	r2, [r2, #0]
 8016ab6:	4313      	orrs	r3, r2
 8016ab8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	021b      	lsls	r3, r3, #8
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	3201      	adds	r2, #1
 8016ac2:	7812      	ldrb	r2, [r2, #0]
 8016ac4:	4313      	orrs	r3, r2
 8016ac6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	021b      	lsls	r3, r3, #8
 8016acc:	687a      	ldr	r2, [r7, #4]
 8016ace:	7812      	ldrb	r2, [r2, #0]
 8016ad0:	4313      	orrs	r3, r2
 8016ad2:	60fb      	str	r3, [r7, #12]
	return rv;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3714      	adds	r7, #20
 8016ada:	46bd      	mov	sp, r7
 8016adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae0:	4770      	bx	lr

08016ae2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016ae2:	b480      	push	{r7}
 8016ae4:	b083      	sub	sp, #12
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	6078      	str	r0, [r7, #4]
 8016aea:	460b      	mov	r3, r1
 8016aec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	1c5a      	adds	r2, r3, #1
 8016af2:	607a      	str	r2, [r7, #4]
 8016af4:	887a      	ldrh	r2, [r7, #2]
 8016af6:	b2d2      	uxtb	r2, r2
 8016af8:	701a      	strb	r2, [r3, #0]
 8016afa:	887b      	ldrh	r3, [r7, #2]
 8016afc:	0a1b      	lsrs	r3, r3, #8
 8016afe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	1c5a      	adds	r2, r3, #1
 8016b04:	607a      	str	r2, [r7, #4]
 8016b06:	887a      	ldrh	r2, [r7, #2]
 8016b08:	b2d2      	uxtb	r2, r2
 8016b0a:	701a      	strb	r2, [r3, #0]
}
 8016b0c:	bf00      	nop
 8016b0e:	370c      	adds	r7, #12
 8016b10:	46bd      	mov	sp, r7
 8016b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b16:	4770      	bx	lr

08016b18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	1c5a      	adds	r2, r3, #1
 8016b26:	607a      	str	r2, [r7, #4]
 8016b28:	683a      	ldr	r2, [r7, #0]
 8016b2a:	b2d2      	uxtb	r2, r2
 8016b2c:	701a      	strb	r2, [r3, #0]
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	0a1b      	lsrs	r3, r3, #8
 8016b32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	1c5a      	adds	r2, r3, #1
 8016b38:	607a      	str	r2, [r7, #4]
 8016b3a:	683a      	ldr	r2, [r7, #0]
 8016b3c:	b2d2      	uxtb	r2, r2
 8016b3e:	701a      	strb	r2, [r3, #0]
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	0a1b      	lsrs	r3, r3, #8
 8016b44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	1c5a      	adds	r2, r3, #1
 8016b4a:	607a      	str	r2, [r7, #4]
 8016b4c:	683a      	ldr	r2, [r7, #0]
 8016b4e:	b2d2      	uxtb	r2, r2
 8016b50:	701a      	strb	r2, [r3, #0]
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	0a1b      	lsrs	r3, r3, #8
 8016b56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	607a      	str	r2, [r7, #4]
 8016b5e:	683a      	ldr	r2, [r7, #0]
 8016b60:	b2d2      	uxtb	r2, r2
 8016b62:	701a      	strb	r2, [r3, #0]
}
 8016b64:	bf00      	nop
 8016b66:	370c      	adds	r7, #12
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr

08016b70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016b70:	b480      	push	{r7}
 8016b72:	b087      	sub	sp, #28
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	60f8      	str	r0, [r7, #12]
 8016b78:	60b9      	str	r1, [r7, #8]
 8016b7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d00d      	beq.n	8016ba6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016b8a:	693a      	ldr	r2, [r7, #16]
 8016b8c:	1c53      	adds	r3, r2, #1
 8016b8e:	613b      	str	r3, [r7, #16]
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	1c59      	adds	r1, r3, #1
 8016b94:	6179      	str	r1, [r7, #20]
 8016b96:	7812      	ldrb	r2, [r2, #0]
 8016b98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	3b01      	subs	r3, #1
 8016b9e:	607b      	str	r3, [r7, #4]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1f1      	bne.n	8016b8a <mem_cpy+0x1a>
	}
}
 8016ba6:	bf00      	nop
 8016ba8:	371c      	adds	r7, #28
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr

08016bb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016bb2:	b480      	push	{r7}
 8016bb4:	b087      	sub	sp, #28
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	60f8      	str	r0, [r7, #12]
 8016bba:	60b9      	str	r1, [r7, #8]
 8016bbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	1c5a      	adds	r2, r3, #1
 8016bc6:	617a      	str	r2, [r7, #20]
 8016bc8:	68ba      	ldr	r2, [r7, #8]
 8016bca:	b2d2      	uxtb	r2, r2
 8016bcc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	3b01      	subs	r3, #1
 8016bd2:	607b      	str	r3, [r7, #4]
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d1f3      	bne.n	8016bc2 <mem_set+0x10>
}
 8016bda:	bf00      	nop
 8016bdc:	bf00      	nop
 8016bde:	371c      	adds	r7, #28
 8016be0:	46bd      	mov	sp, r7
 8016be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be6:	4770      	bx	lr

08016be8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016be8:	b480      	push	{r7}
 8016bea:	b089      	sub	sp, #36	; 0x24
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	60f8      	str	r0, [r7, #12]
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	61fb      	str	r3, [r7, #28]
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016c00:	69fb      	ldr	r3, [r7, #28]
 8016c02:	1c5a      	adds	r2, r3, #1
 8016c04:	61fa      	str	r2, [r7, #28]
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	4619      	mov	r1, r3
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	61ba      	str	r2, [r7, #24]
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	1acb      	subs	r3, r1, r3
 8016c14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	3b01      	subs	r3, #1
 8016c1a:	607b      	str	r3, [r7, #4]
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d002      	beq.n	8016c28 <mem_cmp+0x40>
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d0eb      	beq.n	8016c00 <mem_cmp+0x18>

	return r;
 8016c28:	697b      	ldr	r3, [r7, #20]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3724      	adds	r7, #36	; 0x24
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c34:	4770      	bx	lr

08016c36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016c36:	b480      	push	{r7}
 8016c38:	b083      	sub	sp, #12
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	6078      	str	r0, [r7, #4]
 8016c3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016c40:	e002      	b.n	8016c48 <chk_chr+0x12>
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	3301      	adds	r3, #1
 8016c46:	607b      	str	r3, [r7, #4]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d005      	beq.n	8016c5c <chk_chr+0x26>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	461a      	mov	r2, r3
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	4293      	cmp	r3, r2
 8016c5a:	d1f2      	bne.n	8016c42 <chk_chr+0xc>
	return *str;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	781b      	ldrb	r3, [r3, #0]
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b085      	sub	sp, #20
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016c76:	2300      	movs	r3, #0
 8016c78:	60bb      	str	r3, [r7, #8]
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	60fb      	str	r3, [r7, #12]
 8016c7e:	e029      	b.n	8016cd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016c80:	4a27      	ldr	r2, [pc, #156]	; (8016d20 <chk_lock+0xb4>)
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	011b      	lsls	r3, r3, #4
 8016c86:	4413      	add	r3, r2
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d01d      	beq.n	8016cca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016c8e:	4a24      	ldr	r2, [pc, #144]	; (8016d20 <chk_lock+0xb4>)
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	011b      	lsls	r3, r3, #4
 8016c94:	4413      	add	r3, r2
 8016c96:	681a      	ldr	r2, [r3, #0]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d116      	bne.n	8016cce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016ca0:	4a1f      	ldr	r2, [pc, #124]	; (8016d20 <chk_lock+0xb4>)
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	011b      	lsls	r3, r3, #4
 8016ca6:	4413      	add	r3, r2
 8016ca8:	3304      	adds	r3, #4
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d10c      	bne.n	8016cce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016cb4:	4a1a      	ldr	r2, [pc, #104]	; (8016d20 <chk_lock+0xb4>)
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	011b      	lsls	r3, r3, #4
 8016cba:	4413      	add	r3, r2
 8016cbc:	3308      	adds	r3, #8
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d102      	bne.n	8016cce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016cc8:	e007      	b.n	8016cda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016cca:	2301      	movs	r3, #1
 8016ccc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	3301      	adds	r3, #1
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2b01      	cmp	r3, #1
 8016cd8:	d9d2      	bls.n	8016c80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	2b02      	cmp	r3, #2
 8016cde:	d109      	bne.n	8016cf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d102      	bne.n	8016cec <chk_lock+0x80>
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	d101      	bne.n	8016cf0 <chk_lock+0x84>
 8016cec:	2300      	movs	r3, #0
 8016cee:	e010      	b.n	8016d12 <chk_lock+0xa6>
 8016cf0:	2312      	movs	r3, #18
 8016cf2:	e00e      	b.n	8016d12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d108      	bne.n	8016d0c <chk_lock+0xa0>
 8016cfa:	4a09      	ldr	r2, [pc, #36]	; (8016d20 <chk_lock+0xb4>)
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	011b      	lsls	r3, r3, #4
 8016d00:	4413      	add	r3, r2
 8016d02:	330c      	adds	r3, #12
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d0a:	d101      	bne.n	8016d10 <chk_lock+0xa4>
 8016d0c:	2310      	movs	r3, #16
 8016d0e:	e000      	b.n	8016d12 <chk_lock+0xa6>
 8016d10:	2300      	movs	r3, #0
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	3714      	adds	r7, #20
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr
 8016d1e:	bf00      	nop
 8016d20:	20001ac8 	.word	0x20001ac8

08016d24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	607b      	str	r3, [r7, #4]
 8016d2e:	e002      	b.n	8016d36 <enq_lock+0x12>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	3301      	adds	r3, #1
 8016d34:	607b      	str	r3, [r7, #4]
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d806      	bhi.n	8016d4a <enq_lock+0x26>
 8016d3c:	4a09      	ldr	r2, [pc, #36]	; (8016d64 <enq_lock+0x40>)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	011b      	lsls	r3, r3, #4
 8016d42:	4413      	add	r3, r2
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1f2      	bne.n	8016d30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	2b02      	cmp	r3, #2
 8016d4e:	bf14      	ite	ne
 8016d50:	2301      	movne	r3, #1
 8016d52:	2300      	moveq	r3, #0
 8016d54:	b2db      	uxtb	r3, r3
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	370c      	adds	r7, #12
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop
 8016d64:	20001ac8 	.word	0x20001ac8

08016d68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b085      	sub	sp, #20
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016d72:	2300      	movs	r3, #0
 8016d74:	60fb      	str	r3, [r7, #12]
 8016d76:	e01f      	b.n	8016db8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016d78:	4a41      	ldr	r2, [pc, #260]	; (8016e80 <inc_lock+0x118>)
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	011b      	lsls	r3, r3, #4
 8016d7e:	4413      	add	r3, r2
 8016d80:	681a      	ldr	r2, [r3, #0]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d113      	bne.n	8016db2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016d8a:	4a3d      	ldr	r2, [pc, #244]	; (8016e80 <inc_lock+0x118>)
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	011b      	lsls	r3, r3, #4
 8016d90:	4413      	add	r3, r2
 8016d92:	3304      	adds	r3, #4
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d109      	bne.n	8016db2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016d9e:	4a38      	ldr	r2, [pc, #224]	; (8016e80 <inc_lock+0x118>)
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	011b      	lsls	r3, r3, #4
 8016da4:	4413      	add	r3, r2
 8016da6:	3308      	adds	r3, #8
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d006      	beq.n	8016dc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	3301      	adds	r3, #1
 8016db6:	60fb      	str	r3, [r7, #12]
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2b01      	cmp	r3, #1
 8016dbc:	d9dc      	bls.n	8016d78 <inc_lock+0x10>
 8016dbe:	e000      	b.n	8016dc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016dc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	2b02      	cmp	r3, #2
 8016dc6:	d132      	bne.n	8016e2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	60fb      	str	r3, [r7, #12]
 8016dcc:	e002      	b.n	8016dd4 <inc_lock+0x6c>
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	60fb      	str	r3, [r7, #12]
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	2b01      	cmp	r3, #1
 8016dd8:	d806      	bhi.n	8016de8 <inc_lock+0x80>
 8016dda:	4a29      	ldr	r2, [pc, #164]	; (8016e80 <inc_lock+0x118>)
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	011b      	lsls	r3, r3, #4
 8016de0:	4413      	add	r3, r2
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d1f2      	bne.n	8016dce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	2b02      	cmp	r3, #2
 8016dec:	d101      	bne.n	8016df2 <inc_lock+0x8a>
 8016dee:	2300      	movs	r3, #0
 8016df0:	e040      	b.n	8016e74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	4922      	ldr	r1, [pc, #136]	; (8016e80 <inc_lock+0x118>)
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	011b      	lsls	r3, r3, #4
 8016dfc:	440b      	add	r3, r1
 8016dfe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	689a      	ldr	r2, [r3, #8]
 8016e04:	491e      	ldr	r1, [pc, #120]	; (8016e80 <inc_lock+0x118>)
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	011b      	lsls	r3, r3, #4
 8016e0a:	440b      	add	r3, r1
 8016e0c:	3304      	adds	r3, #4
 8016e0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	695a      	ldr	r2, [r3, #20]
 8016e14:	491a      	ldr	r1, [pc, #104]	; (8016e80 <inc_lock+0x118>)
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	011b      	lsls	r3, r3, #4
 8016e1a:	440b      	add	r3, r1
 8016e1c:	3308      	adds	r3, #8
 8016e1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016e20:	4a17      	ldr	r2, [pc, #92]	; (8016e80 <inc_lock+0x118>)
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	011b      	lsls	r3, r3, #4
 8016e26:	4413      	add	r3, r2
 8016e28:	330c      	adds	r3, #12
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d009      	beq.n	8016e48 <inc_lock+0xe0>
 8016e34:	4a12      	ldr	r2, [pc, #72]	; (8016e80 <inc_lock+0x118>)
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	011b      	lsls	r3, r3, #4
 8016e3a:	4413      	add	r3, r2
 8016e3c:	330c      	adds	r3, #12
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d001      	beq.n	8016e48 <inc_lock+0xe0>
 8016e44:	2300      	movs	r3, #0
 8016e46:	e015      	b.n	8016e74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d108      	bne.n	8016e60 <inc_lock+0xf8>
 8016e4e:	4a0c      	ldr	r2, [pc, #48]	; (8016e80 <inc_lock+0x118>)
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	011b      	lsls	r3, r3, #4
 8016e54:	4413      	add	r3, r2
 8016e56:	330c      	adds	r3, #12
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	b29a      	uxth	r2, r3
 8016e5e:	e001      	b.n	8016e64 <inc_lock+0xfc>
 8016e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e64:	4906      	ldr	r1, [pc, #24]	; (8016e80 <inc_lock+0x118>)
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	011b      	lsls	r3, r3, #4
 8016e6a:	440b      	add	r3, r1
 8016e6c:	330c      	adds	r3, #12
 8016e6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	3301      	adds	r3, #1
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3714      	adds	r7, #20
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	20001ac8 	.word	0x20001ac8

08016e84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016e84:	b480      	push	{r7}
 8016e86:	b085      	sub	sp, #20
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	3b01      	subs	r3, #1
 8016e90:	607b      	str	r3, [r7, #4]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	d825      	bhi.n	8016ee4 <dec_lock+0x60>
		n = Files[i].ctr;
 8016e98:	4a17      	ldr	r2, [pc, #92]	; (8016ef8 <dec_lock+0x74>)
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	011b      	lsls	r3, r3, #4
 8016e9e:	4413      	add	r3, r2
 8016ea0:	330c      	adds	r3, #12
 8016ea2:	881b      	ldrh	r3, [r3, #0]
 8016ea4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016ea6:	89fb      	ldrh	r3, [r7, #14]
 8016ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016eac:	d101      	bne.n	8016eb2 <dec_lock+0x2e>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016eb2:	89fb      	ldrh	r3, [r7, #14]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d002      	beq.n	8016ebe <dec_lock+0x3a>
 8016eb8:	89fb      	ldrh	r3, [r7, #14]
 8016eba:	3b01      	subs	r3, #1
 8016ebc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016ebe:	4a0e      	ldr	r2, [pc, #56]	; (8016ef8 <dec_lock+0x74>)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	011b      	lsls	r3, r3, #4
 8016ec4:	4413      	add	r3, r2
 8016ec6:	330c      	adds	r3, #12
 8016ec8:	89fa      	ldrh	r2, [r7, #14]
 8016eca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016ecc:	89fb      	ldrh	r3, [r7, #14]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d105      	bne.n	8016ede <dec_lock+0x5a>
 8016ed2:	4a09      	ldr	r2, [pc, #36]	; (8016ef8 <dec_lock+0x74>)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	011b      	lsls	r3, r3, #4
 8016ed8:	4413      	add	r3, r2
 8016eda:	2200      	movs	r2, #0
 8016edc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	737b      	strb	r3, [r7, #13]
 8016ee2:	e001      	b.n	8016ee8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016ee4:	2302      	movs	r3, #2
 8016ee6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016ee8:	7b7b      	ldrb	r3, [r7, #13]
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3714      	adds	r7, #20
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	20001ac8 	.word	0x20001ac8

08016efc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b085      	sub	sp, #20
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016f04:	2300      	movs	r3, #0
 8016f06:	60fb      	str	r3, [r7, #12]
 8016f08:	e010      	b.n	8016f2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016f0a:	4a0d      	ldr	r2, [pc, #52]	; (8016f40 <clear_lock+0x44>)
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	011b      	lsls	r3, r3, #4
 8016f10:	4413      	add	r3, r2
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d105      	bne.n	8016f26 <clear_lock+0x2a>
 8016f1a:	4a09      	ldr	r2, [pc, #36]	; (8016f40 <clear_lock+0x44>)
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	011b      	lsls	r3, r3, #4
 8016f20:	4413      	add	r3, r2
 8016f22:	2200      	movs	r2, #0
 8016f24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	60fb      	str	r3, [r7, #12]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2b01      	cmp	r3, #1
 8016f30:	d9eb      	bls.n	8016f0a <clear_lock+0xe>
	}
}
 8016f32:	bf00      	nop
 8016f34:	bf00      	nop
 8016f36:	3714      	adds	r7, #20
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr
 8016f40:	20001ac8 	.word	0x20001ac8

08016f44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b086      	sub	sp, #24
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	78db      	ldrb	r3, [r3, #3]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d034      	beq.n	8016fc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	7858      	ldrb	r0, [r3, #1]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016f68:	2301      	movs	r3, #1
 8016f6a:	697a      	ldr	r2, [r7, #20]
 8016f6c:	f7ff fd40 	bl	80169f0 <disk_write>
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d002      	beq.n	8016f7c <sync_window+0x38>
			res = FR_DISK_ERR;
 8016f76:	2301      	movs	r3, #1
 8016f78:	73fb      	strb	r3, [r7, #15]
 8016f7a:	e022      	b.n	8016fc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f86:	697a      	ldr	r2, [r7, #20]
 8016f88:	1ad2      	subs	r2, r2, r3
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	69db      	ldr	r3, [r3, #28]
 8016f8e:	429a      	cmp	r2, r3
 8016f90:	d217      	bcs.n	8016fc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	789b      	ldrb	r3, [r3, #2]
 8016f96:	613b      	str	r3, [r7, #16]
 8016f98:	e010      	b.n	8016fbc <sync_window+0x78>
					wsect += fs->fsize;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	69db      	ldr	r3, [r3, #28]
 8016f9e:	697a      	ldr	r2, [r7, #20]
 8016fa0:	4413      	add	r3, r2
 8016fa2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	7858      	ldrb	r0, [r3, #1]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016fae:	2301      	movs	r3, #1
 8016fb0:	697a      	ldr	r2, [r7, #20]
 8016fb2:	f7ff fd1d 	bl	80169f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	613b      	str	r3, [r7, #16]
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d8eb      	bhi.n	8016f9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3718      	adds	r7, #24
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}

08016fcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fde:	683a      	ldr	r2, [r7, #0]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	d01b      	beq.n	801701c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016fe4:	6878      	ldr	r0, [r7, #4]
 8016fe6:	f7ff ffad 	bl	8016f44 <sync_window>
 8016fea:	4603      	mov	r3, r0
 8016fec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016fee:	7bfb      	ldrb	r3, [r7, #15]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d113      	bne.n	801701c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	7858      	ldrb	r0, [r3, #1]
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016ffe:	2301      	movs	r3, #1
 8017000:	683a      	ldr	r2, [r7, #0]
 8017002:	f7ff fcd5 	bl	80169b0 <disk_read>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d004      	beq.n	8017016 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801700c:	f04f 33ff 	mov.w	r3, #4294967295
 8017010:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017012:	2301      	movs	r3, #1
 8017014:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801701c:	7bfb      	ldrb	r3, [r7, #15]
}
 801701e:	4618      	mov	r0, r3
 8017020:	3710      	adds	r7, #16
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
	...

08017028 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7ff ff87 	bl	8016f44 <sync_window>
 8017036:	4603      	mov	r3, r0
 8017038:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801703a:	7bfb      	ldrb	r3, [r7, #15]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d158      	bne.n	80170f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	2b03      	cmp	r3, #3
 8017046:	d148      	bne.n	80170da <sync_fs+0xb2>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	791b      	ldrb	r3, [r3, #4]
 801704c:	2b01      	cmp	r3, #1
 801704e:	d144      	bne.n	80170da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	3334      	adds	r3, #52	; 0x34
 8017054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017058:	2100      	movs	r1, #0
 801705a:	4618      	mov	r0, r3
 801705c:	f7ff fda9 	bl	8016bb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3334      	adds	r3, #52	; 0x34
 8017064:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017068:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801706c:	4618      	mov	r0, r3
 801706e:	f7ff fd38 	bl	8016ae2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	3334      	adds	r3, #52	; 0x34
 8017076:	4921      	ldr	r1, [pc, #132]	; (80170fc <sync_fs+0xd4>)
 8017078:	4618      	mov	r0, r3
 801707a:	f7ff fd4d 	bl	8016b18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	3334      	adds	r3, #52	; 0x34
 8017082:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017086:	491e      	ldr	r1, [pc, #120]	; (8017100 <sync_fs+0xd8>)
 8017088:	4618      	mov	r0, r3
 801708a:	f7ff fd45 	bl	8016b18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	3334      	adds	r3, #52	; 0x34
 8017092:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	695b      	ldr	r3, [r3, #20]
 801709a:	4619      	mov	r1, r3
 801709c:	4610      	mov	r0, r2
 801709e:	f7ff fd3b 	bl	8016b18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	3334      	adds	r3, #52	; 0x34
 80170a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	691b      	ldr	r3, [r3, #16]
 80170ae:	4619      	mov	r1, r3
 80170b0:	4610      	mov	r0, r2
 80170b2:	f7ff fd31 	bl	8016b18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6a1b      	ldr	r3, [r3, #32]
 80170ba:	1c5a      	adds	r2, r3, #1
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7858      	ldrb	r0, [r3, #1]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170ce:	2301      	movs	r3, #1
 80170d0:	f7ff fc8e 	bl	80169f0 <disk_write>
			fs->fsi_flag = 0;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	785b      	ldrb	r3, [r3, #1]
 80170de:	2200      	movs	r2, #0
 80170e0:	2100      	movs	r1, #0
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7ff fca4 	bl	8016a30 <disk_ioctl>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d001      	beq.n	80170f2 <sync_fs+0xca>
 80170ee:	2301      	movs	r3, #1
 80170f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80170f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3710      	adds	r7, #16
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	41615252 	.word	0x41615252
 8017100:	61417272 	.word	0x61417272

08017104 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017104:	b480      	push	{r7}
 8017106:	b083      	sub	sp, #12
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	3b02      	subs	r3, #2
 8017112:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	699b      	ldr	r3, [r3, #24]
 8017118:	3b02      	subs	r3, #2
 801711a:	683a      	ldr	r2, [r7, #0]
 801711c:	429a      	cmp	r2, r3
 801711e:	d301      	bcc.n	8017124 <clust2sect+0x20>
 8017120:	2300      	movs	r3, #0
 8017122:	e008      	b.n	8017136 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	895b      	ldrh	r3, [r3, #10]
 8017128:	461a      	mov	r2, r3
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	fb03 f202 	mul.w	r2, r3, r2
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017134:	4413      	add	r3, r2
}
 8017136:	4618      	mov	r0, r3
 8017138:	370c      	adds	r7, #12
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	4770      	bx	lr

08017142 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017142:	b580      	push	{r7, lr}
 8017144:	b086      	sub	sp, #24
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
 801714a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	2b01      	cmp	r3, #1
 8017156:	d904      	bls.n	8017162 <get_fat+0x20>
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	699b      	ldr	r3, [r3, #24]
 801715c:	683a      	ldr	r2, [r7, #0]
 801715e:	429a      	cmp	r2, r3
 8017160:	d302      	bcc.n	8017168 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017162:	2301      	movs	r3, #1
 8017164:	617b      	str	r3, [r7, #20]
 8017166:	e08f      	b.n	8017288 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017168:	f04f 33ff 	mov.w	r3, #4294967295
 801716c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	2b03      	cmp	r3, #3
 8017174:	d062      	beq.n	801723c <get_fat+0xfa>
 8017176:	2b03      	cmp	r3, #3
 8017178:	dc7c      	bgt.n	8017274 <get_fat+0x132>
 801717a:	2b01      	cmp	r3, #1
 801717c:	d002      	beq.n	8017184 <get_fat+0x42>
 801717e:	2b02      	cmp	r3, #2
 8017180:	d042      	beq.n	8017208 <get_fat+0xc6>
 8017182:	e077      	b.n	8017274 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	60fb      	str	r3, [r7, #12]
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	085b      	lsrs	r3, r3, #1
 801718c:	68fa      	ldr	r2, [r7, #12]
 801718e:	4413      	add	r3, r2
 8017190:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	0a5b      	lsrs	r3, r3, #9
 801719a:	4413      	add	r3, r2
 801719c:	4619      	mov	r1, r3
 801719e:	6938      	ldr	r0, [r7, #16]
 80171a0:	f7ff ff14 	bl	8016fcc <move_window>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d167      	bne.n	801727a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	1c5a      	adds	r2, r3, #1
 80171ae:	60fa      	str	r2, [r7, #12]
 80171b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171b4:	693a      	ldr	r2, [r7, #16]
 80171b6:	4413      	add	r3, r2
 80171b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80171bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	0a5b      	lsrs	r3, r3, #9
 80171c6:	4413      	add	r3, r2
 80171c8:	4619      	mov	r1, r3
 80171ca:	6938      	ldr	r0, [r7, #16]
 80171cc:	f7ff fefe 	bl	8016fcc <move_window>
 80171d0:	4603      	mov	r3, r0
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d153      	bne.n	801727e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171dc:	693a      	ldr	r2, [r7, #16]
 80171de:	4413      	add	r3, r2
 80171e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80171e4:	021b      	lsls	r3, r3, #8
 80171e6:	461a      	mov	r2, r3
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	4313      	orrs	r3, r2
 80171ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	f003 0301 	and.w	r3, r3, #1
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d002      	beq.n	80171fe <get_fat+0xbc>
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	091b      	lsrs	r3, r3, #4
 80171fc:	e002      	b.n	8017204 <get_fat+0xc2>
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017204:	617b      	str	r3, [r7, #20]
			break;
 8017206:	e03f      	b.n	8017288 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	0a1b      	lsrs	r3, r3, #8
 8017210:	4413      	add	r3, r2
 8017212:	4619      	mov	r1, r3
 8017214:	6938      	ldr	r0, [r7, #16]
 8017216:	f7ff fed9 	bl	8016fcc <move_window>
 801721a:	4603      	mov	r3, r0
 801721c:	2b00      	cmp	r3, #0
 801721e:	d130      	bne.n	8017282 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	005b      	lsls	r3, r3, #1
 801722a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801722e:	4413      	add	r3, r2
 8017230:	4618      	mov	r0, r3
 8017232:	f7ff fc1b 	bl	8016a6c <ld_word>
 8017236:	4603      	mov	r3, r0
 8017238:	617b      	str	r3, [r7, #20]
			break;
 801723a:	e025      	b.n	8017288 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	09db      	lsrs	r3, r3, #7
 8017244:	4413      	add	r3, r2
 8017246:	4619      	mov	r1, r3
 8017248:	6938      	ldr	r0, [r7, #16]
 801724a:	f7ff febf 	bl	8016fcc <move_window>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d118      	bne.n	8017286 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	009b      	lsls	r3, r3, #2
 801725e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017262:	4413      	add	r3, r2
 8017264:	4618      	mov	r0, r3
 8017266:	f7ff fc19 	bl	8016a9c <ld_dword>
 801726a:	4603      	mov	r3, r0
 801726c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017270:	617b      	str	r3, [r7, #20]
			break;
 8017272:	e009      	b.n	8017288 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017274:	2301      	movs	r3, #1
 8017276:	617b      	str	r3, [r7, #20]
 8017278:	e006      	b.n	8017288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801727a:	bf00      	nop
 801727c:	e004      	b.n	8017288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801727e:	bf00      	nop
 8017280:	e002      	b.n	8017288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017282:	bf00      	nop
 8017284:	e000      	b.n	8017288 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017286:	bf00      	nop
		}
	}

	return val;
 8017288:	697b      	ldr	r3, [r7, #20]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3718      	adds	r7, #24
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}

08017292 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017292:	b590      	push	{r4, r7, lr}
 8017294:	b089      	sub	sp, #36	; 0x24
 8017296:	af00      	add	r7, sp, #0
 8017298:	60f8      	str	r0, [r7, #12]
 801729a:	60b9      	str	r1, [r7, #8]
 801729c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801729e:	2302      	movs	r3, #2
 80172a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	f240 80d2 	bls.w	801744e <put_fat+0x1bc>
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	699b      	ldr	r3, [r3, #24]
 80172ae:	68ba      	ldr	r2, [r7, #8]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	f080 80cc 	bcs.w	801744e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	2b03      	cmp	r3, #3
 80172bc:	f000 8096 	beq.w	80173ec <put_fat+0x15a>
 80172c0:	2b03      	cmp	r3, #3
 80172c2:	f300 80cd 	bgt.w	8017460 <put_fat+0x1ce>
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d002      	beq.n	80172d0 <put_fat+0x3e>
 80172ca:	2b02      	cmp	r3, #2
 80172cc:	d06e      	beq.n	80173ac <put_fat+0x11a>
 80172ce:	e0c7      	b.n	8017460 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	61bb      	str	r3, [r7, #24]
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	085b      	lsrs	r3, r3, #1
 80172d8:	69ba      	ldr	r2, [r7, #24]
 80172da:	4413      	add	r3, r2
 80172dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	0a5b      	lsrs	r3, r3, #9
 80172e6:	4413      	add	r3, r2
 80172e8:	4619      	mov	r1, r3
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f7ff fe6e 	bl	8016fcc <move_window>
 80172f0:	4603      	mov	r3, r0
 80172f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80172f4:	7ffb      	ldrb	r3, [r7, #31]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	f040 80ab 	bne.w	8017452 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	1c59      	adds	r1, r3, #1
 8017306:	61b9      	str	r1, [r7, #24]
 8017308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801730c:	4413      	add	r3, r2
 801730e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	f003 0301 	and.w	r3, r3, #1
 8017316:	2b00      	cmp	r3, #0
 8017318:	d00d      	beq.n	8017336 <put_fat+0xa4>
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	b25b      	sxtb	r3, r3
 8017320:	f003 030f 	and.w	r3, r3, #15
 8017324:	b25a      	sxtb	r2, r3
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	b2db      	uxtb	r3, r3
 801732a:	011b      	lsls	r3, r3, #4
 801732c:	b25b      	sxtb	r3, r3
 801732e:	4313      	orrs	r3, r2
 8017330:	b25b      	sxtb	r3, r3
 8017332:	b2db      	uxtb	r3, r3
 8017334:	e001      	b.n	801733a <put_fat+0xa8>
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	b2db      	uxtb	r3, r3
 801733a:	697a      	ldr	r2, [r7, #20]
 801733c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	2201      	movs	r2, #1
 8017342:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017348:	69bb      	ldr	r3, [r7, #24]
 801734a:	0a5b      	lsrs	r3, r3, #9
 801734c:	4413      	add	r3, r2
 801734e:	4619      	mov	r1, r3
 8017350:	68f8      	ldr	r0, [r7, #12]
 8017352:	f7ff fe3b 	bl	8016fcc <move_window>
 8017356:	4603      	mov	r3, r0
 8017358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801735a:	7ffb      	ldrb	r3, [r7, #31]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d17a      	bne.n	8017456 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801736c:	4413      	add	r3, r2
 801736e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	f003 0301 	and.w	r3, r3, #1
 8017376:	2b00      	cmp	r3, #0
 8017378:	d003      	beq.n	8017382 <put_fat+0xf0>
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	091b      	lsrs	r3, r3, #4
 801737e:	b2db      	uxtb	r3, r3
 8017380:	e00e      	b.n	80173a0 <put_fat+0x10e>
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	b25b      	sxtb	r3, r3
 8017388:	f023 030f 	bic.w	r3, r3, #15
 801738c:	b25a      	sxtb	r2, r3
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	0a1b      	lsrs	r3, r3, #8
 8017392:	b25b      	sxtb	r3, r3
 8017394:	f003 030f 	and.w	r3, r3, #15
 8017398:	b25b      	sxtb	r3, r3
 801739a:	4313      	orrs	r3, r2
 801739c:	b25b      	sxtb	r3, r3
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	697a      	ldr	r2, [r7, #20]
 80173a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2201      	movs	r2, #1
 80173a8:	70da      	strb	r2, [r3, #3]
			break;
 80173aa:	e059      	b.n	8017460 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	0a1b      	lsrs	r3, r3, #8
 80173b4:	4413      	add	r3, r2
 80173b6:	4619      	mov	r1, r3
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f7ff fe07 	bl	8016fcc <move_window>
 80173be:	4603      	mov	r3, r0
 80173c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80173c2:	7ffb      	ldrb	r3, [r7, #31]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d148      	bne.n	801745a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80173ce:	68bb      	ldr	r3, [r7, #8]
 80173d0:	005b      	lsls	r3, r3, #1
 80173d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80173d6:	4413      	add	r3, r2
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	b292      	uxth	r2, r2
 80173dc:	4611      	mov	r1, r2
 80173de:	4618      	mov	r0, r3
 80173e0:	f7ff fb7f 	bl	8016ae2 <st_word>
			fs->wflag = 1;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	2201      	movs	r2, #1
 80173e8:	70da      	strb	r2, [r3, #3]
			break;
 80173ea:	e039      	b.n	8017460 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	09db      	lsrs	r3, r3, #7
 80173f4:	4413      	add	r3, r2
 80173f6:	4619      	mov	r1, r3
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f7ff fde7 	bl	8016fcc <move_window>
 80173fe:	4603      	mov	r3, r0
 8017400:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017402:	7ffb      	ldrb	r3, [r7, #31]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d12a      	bne.n	801745e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801741c:	4413      	add	r3, r2
 801741e:	4618      	mov	r0, r3
 8017420:	f7ff fb3c 	bl	8016a9c <ld_dword>
 8017424:	4603      	mov	r3, r0
 8017426:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801742a:	4323      	orrs	r3, r4
 801742c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	009b      	lsls	r3, r3, #2
 8017438:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801743c:	4413      	add	r3, r2
 801743e:	6879      	ldr	r1, [r7, #4]
 8017440:	4618      	mov	r0, r3
 8017442:	f7ff fb69 	bl	8016b18 <st_dword>
			fs->wflag = 1;
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	2201      	movs	r2, #1
 801744a:	70da      	strb	r2, [r3, #3]
			break;
 801744c:	e008      	b.n	8017460 <put_fat+0x1ce>
		}
	}
 801744e:	bf00      	nop
 8017450:	e006      	b.n	8017460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017452:	bf00      	nop
 8017454:	e004      	b.n	8017460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017456:	bf00      	nop
 8017458:	e002      	b.n	8017460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801745a:	bf00      	nop
 801745c:	e000      	b.n	8017460 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801745e:	bf00      	nop
	return res;
 8017460:	7ffb      	ldrb	r3, [r7, #31]
}
 8017462:	4618      	mov	r0, r3
 8017464:	3724      	adds	r7, #36	; 0x24
 8017466:	46bd      	mov	sp, r7
 8017468:	bd90      	pop	{r4, r7, pc}

0801746a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b088      	sub	sp, #32
 801746e:	af00      	add	r7, sp, #0
 8017470:	60f8      	str	r0, [r7, #12]
 8017472:	60b9      	str	r1, [r7, #8]
 8017474:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017476:	2300      	movs	r3, #0
 8017478:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	2b01      	cmp	r3, #1
 8017484:	d904      	bls.n	8017490 <remove_chain+0x26>
 8017486:	69bb      	ldr	r3, [r7, #24]
 8017488:	699b      	ldr	r3, [r3, #24]
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	429a      	cmp	r2, r3
 801748e:	d301      	bcc.n	8017494 <remove_chain+0x2a>
 8017490:	2302      	movs	r3, #2
 8017492:	e04b      	b.n	801752c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00c      	beq.n	80174b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801749a:	f04f 32ff 	mov.w	r2, #4294967295
 801749e:	6879      	ldr	r1, [r7, #4]
 80174a0:	69b8      	ldr	r0, [r7, #24]
 80174a2:	f7ff fef6 	bl	8017292 <put_fat>
 80174a6:	4603      	mov	r3, r0
 80174a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80174aa:	7ffb      	ldrb	r3, [r7, #31]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d001      	beq.n	80174b4 <remove_chain+0x4a>
 80174b0:	7ffb      	ldrb	r3, [r7, #31]
 80174b2:	e03b      	b.n	801752c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80174b4:	68b9      	ldr	r1, [r7, #8]
 80174b6:	68f8      	ldr	r0, [r7, #12]
 80174b8:	f7ff fe43 	bl	8017142 <get_fat>
 80174bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d031      	beq.n	8017528 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	2b01      	cmp	r3, #1
 80174c8:	d101      	bne.n	80174ce <remove_chain+0x64>
 80174ca:	2302      	movs	r3, #2
 80174cc:	e02e      	b.n	801752c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174d4:	d101      	bne.n	80174da <remove_chain+0x70>
 80174d6:	2301      	movs	r3, #1
 80174d8:	e028      	b.n	801752c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80174da:	2200      	movs	r2, #0
 80174dc:	68b9      	ldr	r1, [r7, #8]
 80174de:	69b8      	ldr	r0, [r7, #24]
 80174e0:	f7ff fed7 	bl	8017292 <put_fat>
 80174e4:	4603      	mov	r3, r0
 80174e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80174e8:	7ffb      	ldrb	r3, [r7, #31]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d001      	beq.n	80174f2 <remove_chain+0x88>
 80174ee:	7ffb      	ldrb	r3, [r7, #31]
 80174f0:	e01c      	b.n	801752c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80174f2:	69bb      	ldr	r3, [r7, #24]
 80174f4:	695a      	ldr	r2, [r3, #20]
 80174f6:	69bb      	ldr	r3, [r7, #24]
 80174f8:	699b      	ldr	r3, [r3, #24]
 80174fa:	3b02      	subs	r3, #2
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d20b      	bcs.n	8017518 <remove_chain+0xae>
			fs->free_clst++;
 8017500:	69bb      	ldr	r3, [r7, #24]
 8017502:	695b      	ldr	r3, [r3, #20]
 8017504:	1c5a      	adds	r2, r3, #1
 8017506:	69bb      	ldr	r3, [r7, #24]
 8017508:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801750a:	69bb      	ldr	r3, [r7, #24]
 801750c:	791b      	ldrb	r3, [r3, #4]
 801750e:	f043 0301 	orr.w	r3, r3, #1
 8017512:	b2da      	uxtb	r2, r3
 8017514:	69bb      	ldr	r3, [r7, #24]
 8017516:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	699b      	ldr	r3, [r3, #24]
 8017520:	68ba      	ldr	r2, [r7, #8]
 8017522:	429a      	cmp	r2, r3
 8017524:	d3c6      	bcc.n	80174b4 <remove_chain+0x4a>
 8017526:	e000      	b.n	801752a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017528:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801752a:	2300      	movs	r3, #0
}
 801752c:	4618      	mov	r0, r3
 801752e:	3720      	adds	r7, #32
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b088      	sub	sp, #32
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d10d      	bne.n	8017566 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	691b      	ldr	r3, [r3, #16]
 801754e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017550:	69bb      	ldr	r3, [r7, #24]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d004      	beq.n	8017560 <create_chain+0x2c>
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	699b      	ldr	r3, [r3, #24]
 801755a:	69ba      	ldr	r2, [r7, #24]
 801755c:	429a      	cmp	r2, r3
 801755e:	d31b      	bcc.n	8017598 <create_chain+0x64>
 8017560:	2301      	movs	r3, #1
 8017562:	61bb      	str	r3, [r7, #24]
 8017564:	e018      	b.n	8017598 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017566:	6839      	ldr	r1, [r7, #0]
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f7ff fdea 	bl	8017142 <get_fat>
 801756e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	2b01      	cmp	r3, #1
 8017574:	d801      	bhi.n	801757a <create_chain+0x46>
 8017576:	2301      	movs	r3, #1
 8017578:	e070      	b.n	801765c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017580:	d101      	bne.n	8017586 <create_chain+0x52>
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	e06a      	b.n	801765c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	699b      	ldr	r3, [r3, #24]
 801758a:	68fa      	ldr	r2, [r7, #12]
 801758c:	429a      	cmp	r2, r3
 801758e:	d201      	bcs.n	8017594 <create_chain+0x60>
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	e063      	b.n	801765c <create_chain+0x128>
		scl = clst;
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	3301      	adds	r3, #1
 80175a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	699b      	ldr	r3, [r3, #24]
 80175a6:	69fa      	ldr	r2, [r7, #28]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d307      	bcc.n	80175bc <create_chain+0x88>
				ncl = 2;
 80175ac:	2302      	movs	r3, #2
 80175ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80175b0:	69fa      	ldr	r2, [r7, #28]
 80175b2:	69bb      	ldr	r3, [r7, #24]
 80175b4:	429a      	cmp	r2, r3
 80175b6:	d901      	bls.n	80175bc <create_chain+0x88>
 80175b8:	2300      	movs	r3, #0
 80175ba:	e04f      	b.n	801765c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80175bc:	69f9      	ldr	r1, [r7, #28]
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f7ff fdbf 	bl	8017142 <get_fat>
 80175c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d00e      	beq.n	80175ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b01      	cmp	r3, #1
 80175d0:	d003      	beq.n	80175da <create_chain+0xa6>
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175d8:	d101      	bne.n	80175de <create_chain+0xaa>
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	e03e      	b.n	801765c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80175de:	69fa      	ldr	r2, [r7, #28]
 80175e0:	69bb      	ldr	r3, [r7, #24]
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d1da      	bne.n	801759c <create_chain+0x68>
 80175e6:	2300      	movs	r3, #0
 80175e8:	e038      	b.n	801765c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80175ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80175ec:	f04f 32ff 	mov.w	r2, #4294967295
 80175f0:	69f9      	ldr	r1, [r7, #28]
 80175f2:	6938      	ldr	r0, [r7, #16]
 80175f4:	f7ff fe4d 	bl	8017292 <put_fat>
 80175f8:	4603      	mov	r3, r0
 80175fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80175fc:	7dfb      	ldrb	r3, [r7, #23]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d109      	bne.n	8017616 <create_chain+0xe2>
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d006      	beq.n	8017616 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017608:	69fa      	ldr	r2, [r7, #28]
 801760a:	6839      	ldr	r1, [r7, #0]
 801760c:	6938      	ldr	r0, [r7, #16]
 801760e:	f7ff fe40 	bl	8017292 <put_fat>
 8017612:	4603      	mov	r3, r0
 8017614:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017616:	7dfb      	ldrb	r3, [r7, #23]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d116      	bne.n	801764a <create_chain+0x116>
		fs->last_clst = ncl;
 801761c:	693b      	ldr	r3, [r7, #16]
 801761e:	69fa      	ldr	r2, [r7, #28]
 8017620:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017622:	693b      	ldr	r3, [r7, #16]
 8017624:	695a      	ldr	r2, [r3, #20]
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	699b      	ldr	r3, [r3, #24]
 801762a:	3b02      	subs	r3, #2
 801762c:	429a      	cmp	r2, r3
 801762e:	d804      	bhi.n	801763a <create_chain+0x106>
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	695b      	ldr	r3, [r3, #20]
 8017634:	1e5a      	subs	r2, r3, #1
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	791b      	ldrb	r3, [r3, #4]
 801763e:	f043 0301 	orr.w	r3, r3, #1
 8017642:	b2da      	uxtb	r2, r3
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	711a      	strb	r2, [r3, #4]
 8017648:	e007      	b.n	801765a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801764a:	7dfb      	ldrb	r3, [r7, #23]
 801764c:	2b01      	cmp	r3, #1
 801764e:	d102      	bne.n	8017656 <create_chain+0x122>
 8017650:	f04f 33ff 	mov.w	r3, #4294967295
 8017654:	e000      	b.n	8017658 <create_chain+0x124>
 8017656:	2301      	movs	r3, #1
 8017658:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801765a:	69fb      	ldr	r3, [r7, #28]
}
 801765c:	4618      	mov	r0, r3
 801765e:	3720      	adds	r7, #32
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017664:	b480      	push	{r7}
 8017666:	b087      	sub	sp, #28
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017678:	3304      	adds	r3, #4
 801767a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	0a5b      	lsrs	r3, r3, #9
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	8952      	ldrh	r2, [r2, #10]
 8017684:	fbb3 f3f2 	udiv	r3, r3, r2
 8017688:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	1d1a      	adds	r2, r3, #4
 801768e:	613a      	str	r2, [r7, #16]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d101      	bne.n	801769e <clmt_clust+0x3a>
 801769a:	2300      	movs	r3, #0
 801769c:	e010      	b.n	80176c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801769e:	697a      	ldr	r2, [r7, #20]
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d307      	bcc.n	80176b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80176a6:	697a      	ldr	r2, [r7, #20]
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	1ad3      	subs	r3, r2, r3
 80176ac:	617b      	str	r3, [r7, #20]
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	3304      	adds	r3, #4
 80176b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80176b4:	e7e9      	b.n	801768a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80176b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80176b8:	693b      	ldr	r3, [r7, #16]
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	4413      	add	r3, r2
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	371c      	adds	r7, #28
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr

080176cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b086      	sub	sp, #24
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80176e2:	d204      	bcs.n	80176ee <dir_sdi+0x22>
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	f003 031f 	and.w	r3, r3, #31
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d001      	beq.n	80176f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80176ee:	2302      	movs	r3, #2
 80176f0:	e063      	b.n	80177ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	683a      	ldr	r2, [r7, #0]
 80176f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	689b      	ldr	r3, [r3, #8]
 80176fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d106      	bne.n	8017712 <dir_sdi+0x46>
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b02      	cmp	r3, #2
 801770a:	d902      	bls.n	8017712 <dir_sdi+0x46>
		clst = fs->dirbase;
 801770c:	693b      	ldr	r3, [r7, #16]
 801770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017710:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d10c      	bne.n	8017732 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	095b      	lsrs	r3, r3, #5
 801771c:	693a      	ldr	r2, [r7, #16]
 801771e:	8912      	ldrh	r2, [r2, #8]
 8017720:	4293      	cmp	r3, r2
 8017722:	d301      	bcc.n	8017728 <dir_sdi+0x5c>
 8017724:	2302      	movs	r3, #2
 8017726:	e048      	b.n	80177ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	61da      	str	r2, [r3, #28]
 8017730:	e029      	b.n	8017786 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	895b      	ldrh	r3, [r3, #10]
 8017736:	025b      	lsls	r3, r3, #9
 8017738:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801773a:	e019      	b.n	8017770 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	6979      	ldr	r1, [r7, #20]
 8017740:	4618      	mov	r0, r3
 8017742:	f7ff fcfe 	bl	8017142 <get_fat>
 8017746:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801774e:	d101      	bne.n	8017754 <dir_sdi+0x88>
 8017750:	2301      	movs	r3, #1
 8017752:	e032      	b.n	80177ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	2b01      	cmp	r3, #1
 8017758:	d904      	bls.n	8017764 <dir_sdi+0x98>
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	699b      	ldr	r3, [r3, #24]
 801775e:	697a      	ldr	r2, [r7, #20]
 8017760:	429a      	cmp	r2, r3
 8017762:	d301      	bcc.n	8017768 <dir_sdi+0x9c>
 8017764:	2302      	movs	r3, #2
 8017766:	e028      	b.n	80177ba <dir_sdi+0xee>
			ofs -= csz;
 8017768:	683a      	ldr	r2, [r7, #0]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	1ad3      	subs	r3, r2, r3
 801776e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017770:	683a      	ldr	r2, [r7, #0]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	429a      	cmp	r2, r3
 8017776:	d2e1      	bcs.n	801773c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017778:	6979      	ldr	r1, [r7, #20]
 801777a:	6938      	ldr	r0, [r7, #16]
 801777c:	f7ff fcc2 	bl	8017104 <clust2sect>
 8017780:	4602      	mov	r2, r0
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	697a      	ldr	r2, [r7, #20]
 801778a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	69db      	ldr	r3, [r3, #28]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d101      	bne.n	8017798 <dir_sdi+0xcc>
 8017794:	2302      	movs	r3, #2
 8017796:	e010      	b.n	80177ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	69da      	ldr	r2, [r3, #28]
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	0a5b      	lsrs	r3, r3, #9
 80177a0:	441a      	add	r2, r3
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80177a6:	693b      	ldr	r3, [r7, #16]
 80177a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177b2:	441a      	add	r2, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3718      	adds	r7, #24
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b086      	sub	sp, #24
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
 80177ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	695b      	ldr	r3, [r3, #20]
 80177d6:	3320      	adds	r3, #32
 80177d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	69db      	ldr	r3, [r3, #28]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d003      	beq.n	80177ea <dir_next+0x28>
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80177e8:	d301      	bcc.n	80177ee <dir_next+0x2c>
 80177ea:	2304      	movs	r3, #4
 80177ec:	e0aa      	b.n	8017944 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	f040 8098 	bne.w	801792a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	69db      	ldr	r3, [r3, #28]
 80177fe:	1c5a      	adds	r2, r3, #1
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	699b      	ldr	r3, [r3, #24]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d10b      	bne.n	8017824 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	095b      	lsrs	r3, r3, #5
 8017810:	68fa      	ldr	r2, [r7, #12]
 8017812:	8912      	ldrh	r2, [r2, #8]
 8017814:	4293      	cmp	r3, r2
 8017816:	f0c0 8088 	bcc.w	801792a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2200      	movs	r2, #0
 801781e:	61da      	str	r2, [r3, #28]
 8017820:	2304      	movs	r3, #4
 8017822:	e08f      	b.n	8017944 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	0a5b      	lsrs	r3, r3, #9
 8017828:	68fa      	ldr	r2, [r7, #12]
 801782a:	8952      	ldrh	r2, [r2, #10]
 801782c:	3a01      	subs	r2, #1
 801782e:	4013      	ands	r3, r2
 8017830:	2b00      	cmp	r3, #0
 8017832:	d17a      	bne.n	801792a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017834:	687a      	ldr	r2, [r7, #4]
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	699b      	ldr	r3, [r3, #24]
 801783a:	4619      	mov	r1, r3
 801783c:	4610      	mov	r0, r2
 801783e:	f7ff fc80 	bl	8017142 <get_fat>
 8017842:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017844:	697b      	ldr	r3, [r7, #20]
 8017846:	2b01      	cmp	r3, #1
 8017848:	d801      	bhi.n	801784e <dir_next+0x8c>
 801784a:	2302      	movs	r3, #2
 801784c:	e07a      	b.n	8017944 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017854:	d101      	bne.n	801785a <dir_next+0x98>
 8017856:	2301      	movs	r3, #1
 8017858:	e074      	b.n	8017944 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	699b      	ldr	r3, [r3, #24]
 801785e:	697a      	ldr	r2, [r7, #20]
 8017860:	429a      	cmp	r2, r3
 8017862:	d358      	bcc.n	8017916 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d104      	bne.n	8017874 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	2200      	movs	r2, #0
 801786e:	61da      	str	r2, [r3, #28]
 8017870:	2304      	movs	r3, #4
 8017872:	e067      	b.n	8017944 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017874:	687a      	ldr	r2, [r7, #4]
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	699b      	ldr	r3, [r3, #24]
 801787a:	4619      	mov	r1, r3
 801787c:	4610      	mov	r0, r2
 801787e:	f7ff fe59 	bl	8017534 <create_chain>
 8017882:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d101      	bne.n	801788e <dir_next+0xcc>
 801788a:	2307      	movs	r3, #7
 801788c:	e05a      	b.n	8017944 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801788e:	697b      	ldr	r3, [r7, #20]
 8017890:	2b01      	cmp	r3, #1
 8017892:	d101      	bne.n	8017898 <dir_next+0xd6>
 8017894:	2302      	movs	r3, #2
 8017896:	e055      	b.n	8017944 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801789e:	d101      	bne.n	80178a4 <dir_next+0xe2>
 80178a0:	2301      	movs	r3, #1
 80178a2:	e04f      	b.n	8017944 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80178a4:	68f8      	ldr	r0, [r7, #12]
 80178a6:	f7ff fb4d 	bl	8016f44 <sync_window>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d001      	beq.n	80178b4 <dir_next+0xf2>
 80178b0:	2301      	movs	r3, #1
 80178b2:	e047      	b.n	8017944 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	3334      	adds	r3, #52	; 0x34
 80178b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80178bc:	2100      	movs	r1, #0
 80178be:	4618      	mov	r0, r3
 80178c0:	f7ff f977 	bl	8016bb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80178c4:	2300      	movs	r3, #0
 80178c6:	613b      	str	r3, [r7, #16]
 80178c8:	6979      	ldr	r1, [r7, #20]
 80178ca:	68f8      	ldr	r0, [r7, #12]
 80178cc:	f7ff fc1a 	bl	8017104 <clust2sect>
 80178d0:	4602      	mov	r2, r0
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	631a      	str	r2, [r3, #48]	; 0x30
 80178d6:	e012      	b.n	80178fe <dir_next+0x13c>
						fs->wflag = 1;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2201      	movs	r2, #1
 80178dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	f7ff fb30 	bl	8016f44 <sync_window>
 80178e4:	4603      	mov	r3, r0
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d001      	beq.n	80178ee <dir_next+0x12c>
 80178ea:	2301      	movs	r3, #1
 80178ec:	e02a      	b.n	8017944 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	3301      	adds	r3, #1
 80178f2:	613b      	str	r3, [r7, #16]
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178f8:	1c5a      	adds	r2, r3, #1
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	631a      	str	r2, [r3, #48]	; 0x30
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	895b      	ldrh	r3, [r3, #10]
 8017902:	461a      	mov	r2, r3
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	4293      	cmp	r3, r2
 8017908:	d3e6      	bcc.n	80178d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	1ad2      	subs	r2, r2, r3
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	697a      	ldr	r2, [r7, #20]
 801791a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801791c:	6979      	ldr	r1, [r7, #20]
 801791e:	68f8      	ldr	r0, [r7, #12]
 8017920:	f7ff fbf0 	bl	8017104 <clust2sect>
 8017924:	4602      	mov	r2, r0
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	68ba      	ldr	r2, [r7, #8]
 801792e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801793c:	441a      	add	r2, r3
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3718      	adds	r7, #24
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b086      	sub	sp, #24
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801795c:	2100      	movs	r1, #0
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f7ff feb4 	bl	80176cc <dir_sdi>
 8017964:	4603      	mov	r3, r0
 8017966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017968:	7dfb      	ldrb	r3, [r7, #23]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d12b      	bne.n	80179c6 <dir_alloc+0x7a>
		n = 0;
 801796e:	2300      	movs	r3, #0
 8017970:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	69db      	ldr	r3, [r3, #28]
 8017976:	4619      	mov	r1, r3
 8017978:	68f8      	ldr	r0, [r7, #12]
 801797a:	f7ff fb27 	bl	8016fcc <move_window>
 801797e:	4603      	mov	r3, r0
 8017980:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017982:	7dfb      	ldrb	r3, [r7, #23]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d11d      	bne.n	80179c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6a1b      	ldr	r3, [r3, #32]
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	2be5      	cmp	r3, #229	; 0xe5
 8017990:	d004      	beq.n	801799c <dir_alloc+0x50>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6a1b      	ldr	r3, [r3, #32]
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d107      	bne.n	80179ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	3301      	adds	r3, #1
 80179a0:	613b      	str	r3, [r7, #16]
 80179a2:	693a      	ldr	r2, [r7, #16]
 80179a4:	683b      	ldr	r3, [r7, #0]
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d102      	bne.n	80179b0 <dir_alloc+0x64>
 80179aa:	e00c      	b.n	80179c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80179ac:	2300      	movs	r3, #0
 80179ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80179b0:	2101      	movs	r1, #1
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f7ff ff05 	bl	80177c2 <dir_next>
 80179b8:	4603      	mov	r3, r0
 80179ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80179bc:	7dfb      	ldrb	r3, [r7, #23]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d0d7      	beq.n	8017972 <dir_alloc+0x26>
 80179c2:	e000      	b.n	80179c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80179c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80179c6:	7dfb      	ldrb	r3, [r7, #23]
 80179c8:	2b04      	cmp	r3, #4
 80179ca:	d101      	bne.n	80179d0 <dir_alloc+0x84>
 80179cc:	2307      	movs	r3, #7
 80179ce:	75fb      	strb	r3, [r7, #23]
	return res;
 80179d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3718      	adds	r7, #24
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80179da:	b580      	push	{r7, lr}
 80179dc:	b084      	sub	sp, #16
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
 80179e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	331a      	adds	r3, #26
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7ff f83f 	bl	8016a6c <ld_word>
 80179ee:	4603      	mov	r3, r0
 80179f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	2b03      	cmp	r3, #3
 80179f8:	d109      	bne.n	8017a0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	3314      	adds	r3, #20
 80179fe:	4618      	mov	r0, r3
 8017a00:	f7ff f834 	bl	8016a6c <ld_word>
 8017a04:	4603      	mov	r3, r0
 8017a06:	041b      	lsls	r3, r3, #16
 8017a08:	68fa      	ldr	r2, [r7, #12]
 8017a0a:	4313      	orrs	r3, r2
 8017a0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3710      	adds	r7, #16
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b084      	sub	sp, #16
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	60f8      	str	r0, [r7, #12]
 8017a20:	60b9      	str	r1, [r7, #8]
 8017a22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	331a      	adds	r3, #26
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	b292      	uxth	r2, r2
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7ff f857 	bl	8016ae2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	2b03      	cmp	r3, #3
 8017a3a:	d109      	bne.n	8017a50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	f103 0214 	add.w	r2, r3, #20
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	0c1b      	lsrs	r3, r3, #16
 8017a46:	b29b      	uxth	r3, r3
 8017a48:	4619      	mov	r1, r3
 8017a4a:	4610      	mov	r0, r2
 8017a4c:	f7ff f849 	bl	8016ae2 <st_word>
	}
}
 8017a50:	bf00      	nop
 8017a52:	3710      	adds	r7, #16
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017a58:	b590      	push	{r4, r7, lr}
 8017a5a:	b087      	sub	sp, #28
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8017a62:	683b      	ldr	r3, [r7, #0]
 8017a64:	331a      	adds	r3, #26
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7ff f800 	bl	8016a6c <ld_word>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d001      	beq.n	8017a76 <cmp_lfn+0x1e>
 8017a72:	2300      	movs	r3, #0
 8017a74:	e059      	b.n	8017b2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8017a76:	683b      	ldr	r3, [r7, #0]
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a7e:	1e5a      	subs	r2, r3, #1
 8017a80:	4613      	mov	r3, r2
 8017a82:	005b      	lsls	r3, r3, #1
 8017a84:	4413      	add	r3, r2
 8017a86:	009b      	lsls	r3, r3, #2
 8017a88:	4413      	add	r3, r2
 8017a8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	81fb      	strh	r3, [r7, #14]
 8017a90:	2300      	movs	r3, #0
 8017a92:	613b      	str	r3, [r7, #16]
 8017a94:	e033      	b.n	8017afe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8017a96:	4a27      	ldr	r2, [pc, #156]	; (8017b34 <cmp_lfn+0xdc>)
 8017a98:	693b      	ldr	r3, [r7, #16]
 8017a9a:	4413      	add	r3, r2
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	461a      	mov	r2, r3
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	4413      	add	r3, r2
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7fe ffe1 	bl	8016a6c <ld_word>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8017aae:	89fb      	ldrh	r3, [r7, #14]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d01a      	beq.n	8017aea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8017ab4:	697b      	ldr	r3, [r7, #20]
 8017ab6:	2bfe      	cmp	r3, #254	; 0xfe
 8017ab8:	d812      	bhi.n	8017ae0 <cmp_lfn+0x88>
 8017aba:	89bb      	ldrh	r3, [r7, #12]
 8017abc:	4618      	mov	r0, r3
 8017abe:	f001 fe25 	bl	801970c <ff_wtoupper>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	461c      	mov	r4, r3
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	1c5a      	adds	r2, r3, #1
 8017aca:	617a      	str	r2, [r7, #20]
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	4413      	add	r3, r2
 8017ad2:	881b      	ldrh	r3, [r3, #0]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f001 fe19 	bl	801970c <ff_wtoupper>
 8017ada:	4603      	mov	r3, r0
 8017adc:	429c      	cmp	r4, r3
 8017ade:	d001      	beq.n	8017ae4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	e022      	b.n	8017b2a <cmp_lfn+0xd2>
			}
			wc = uc;
 8017ae4:	89bb      	ldrh	r3, [r7, #12]
 8017ae6:	81fb      	strh	r3, [r7, #14]
 8017ae8:	e006      	b.n	8017af8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8017aea:	89bb      	ldrh	r3, [r7, #12]
 8017aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017af0:	4293      	cmp	r3, r2
 8017af2:	d001      	beq.n	8017af8 <cmp_lfn+0xa0>
 8017af4:	2300      	movs	r3, #0
 8017af6:	e018      	b.n	8017b2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	3301      	adds	r3, #1
 8017afc:	613b      	str	r3, [r7, #16]
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	2b0c      	cmp	r3, #12
 8017b02:	d9c8      	bls.n	8017a96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	781b      	ldrb	r3, [r3, #0]
 8017b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d00b      	beq.n	8017b28 <cmp_lfn+0xd0>
 8017b10:	89fb      	ldrh	r3, [r7, #14]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d008      	beq.n	8017b28 <cmp_lfn+0xd0>
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	005b      	lsls	r3, r3, #1
 8017b1a:	687a      	ldr	r2, [r7, #4]
 8017b1c:	4413      	add	r3, r2
 8017b1e:	881b      	ldrh	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d001      	beq.n	8017b28 <cmp_lfn+0xd0>
 8017b24:	2300      	movs	r3, #0
 8017b26:	e000      	b.n	8017b2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017b28:	2301      	movs	r3, #1
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	371c      	adds	r7, #28
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd90      	pop	{r4, r7, pc}
 8017b32:	bf00      	nop
 8017b34:	080215ec 	.word	0x080215ec

08017b38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b088      	sub	sp, #32
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	4611      	mov	r1, r2
 8017b44:	461a      	mov	r2, r3
 8017b46:	460b      	mov	r3, r1
 8017b48:	71fb      	strb	r3, [r7, #7]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	330d      	adds	r3, #13
 8017b52:	79ba      	ldrb	r2, [r7, #6]
 8017b54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	330b      	adds	r3, #11
 8017b5a:	220f      	movs	r2, #15
 8017b5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017b5e:	68bb      	ldr	r3, [r7, #8]
 8017b60:	330c      	adds	r3, #12
 8017b62:	2200      	movs	r2, #0
 8017b64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	331a      	adds	r3, #26
 8017b6a:	2100      	movs	r1, #0
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f7fe ffb8 	bl	8016ae2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017b72:	79fb      	ldrb	r3, [r7, #7]
 8017b74:	1e5a      	subs	r2, r3, #1
 8017b76:	4613      	mov	r3, r2
 8017b78:	005b      	lsls	r3, r3, #1
 8017b7a:	4413      	add	r3, r2
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	4413      	add	r3, r2
 8017b80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8017b82:	2300      	movs	r3, #0
 8017b84:	82fb      	strh	r3, [r7, #22]
 8017b86:	2300      	movs	r3, #0
 8017b88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017b8a:	8afb      	ldrh	r3, [r7, #22]
 8017b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d007      	beq.n	8017ba4 <put_lfn+0x6c>
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	61fa      	str	r2, [r7, #28]
 8017b9a:	005b      	lsls	r3, r3, #1
 8017b9c:	68fa      	ldr	r2, [r7, #12]
 8017b9e:	4413      	add	r3, r2
 8017ba0:	881b      	ldrh	r3, [r3, #0]
 8017ba2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8017ba4:	4a17      	ldr	r2, [pc, #92]	; (8017c04 <put_lfn+0xcc>)
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	4413      	add	r3, r2
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	461a      	mov	r2, r3
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	8afa      	ldrh	r2, [r7, #22]
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7fe ff93 	bl	8016ae2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8017bbc:	8afb      	ldrh	r3, [r7, #22]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d102      	bne.n	8017bc8 <put_lfn+0x90>
 8017bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	61bb      	str	r3, [r7, #24]
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	2b0c      	cmp	r3, #12
 8017bd2:	d9da      	bls.n	8017b8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8017bd4:	8afb      	ldrh	r3, [r7, #22]
 8017bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bda:	4293      	cmp	r3, r2
 8017bdc:	d006      	beq.n	8017bec <put_lfn+0xb4>
 8017bde:	69fb      	ldr	r3, [r7, #28]
 8017be0:	005b      	lsls	r3, r3, #1
 8017be2:	68fa      	ldr	r2, [r7, #12]
 8017be4:	4413      	add	r3, r2
 8017be6:	881b      	ldrh	r3, [r3, #0]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d103      	bne.n	8017bf4 <put_lfn+0xbc>
 8017bec:	79fb      	ldrb	r3, [r7, #7]
 8017bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	79fa      	ldrb	r2, [r7, #7]
 8017bf8:	701a      	strb	r2, [r3, #0]
}
 8017bfa:	bf00      	nop
 8017bfc:	3720      	adds	r7, #32
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
 8017c02:	bf00      	nop
 8017c04:	080215ec 	.word	0x080215ec

08017c08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b08c      	sub	sp, #48	; 0x30
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	607a      	str	r2, [r7, #4]
 8017c14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8017c16:	220b      	movs	r2, #11
 8017c18:	68b9      	ldr	r1, [r7, #8]
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7fe ffa8 	bl	8016b70 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	2b05      	cmp	r3, #5
 8017c24:	d92b      	bls.n	8017c7e <gen_numname+0x76>
		sr = seq;
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017c2a:	e022      	b.n	8017c72 <gen_numname+0x6a>
			wc = *lfn++;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	1c9a      	adds	r2, r3, #2
 8017c30:	607a      	str	r2, [r7, #4]
 8017c32:	881b      	ldrh	r3, [r3, #0]
 8017c34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8017c36:	2300      	movs	r3, #0
 8017c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c3a:	e017      	b.n	8017c6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8017c3c:	69fb      	ldr	r3, [r7, #28]
 8017c3e:	005a      	lsls	r2, r3, #1
 8017c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c42:	f003 0301 	and.w	r3, r3, #1
 8017c46:	4413      	add	r3, r2
 8017c48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c4c:	085b      	lsrs	r3, r3, #1
 8017c4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d005      	beq.n	8017c66 <gen_numname+0x5e>
 8017c5a:	69fb      	ldr	r3, [r7, #28]
 8017c5c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8017c60:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8017c64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8017c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c68:	3301      	adds	r3, #1
 8017c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6e:	2b0f      	cmp	r3, #15
 8017c70:	d9e4      	bls.n	8017c3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	881b      	ldrh	r3, [r3, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d1d8      	bne.n	8017c2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017c7e:	2307      	movs	r3, #7
 8017c80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017c82:	683b      	ldr	r3, [r7, #0]
 8017c84:	b2db      	uxtb	r3, r3
 8017c86:	f003 030f 	and.w	r3, r3, #15
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	3330      	adds	r3, #48	; 0x30
 8017c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8017c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c96:	2b39      	cmp	r3, #57	; 0x39
 8017c98:	d904      	bls.n	8017ca4 <gen_numname+0x9c>
 8017c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c9e:	3307      	adds	r3, #7
 8017ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8017ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca6:	1e5a      	subs	r2, r3, #1
 8017ca8:	62ba      	str	r2, [r7, #40]	; 0x28
 8017caa:	3330      	adds	r3, #48	; 0x30
 8017cac:	443b      	add	r3, r7
 8017cae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017cb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8017cb6:	683b      	ldr	r3, [r7, #0]
 8017cb8:	091b      	lsrs	r3, r3, #4
 8017cba:	603b      	str	r3, [r7, #0]
	} while (seq);
 8017cbc:	683b      	ldr	r3, [r7, #0]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d1df      	bne.n	8017c82 <gen_numname+0x7a>
	ns[i] = '~';
 8017cc2:	f107 0214 	add.w	r2, r7, #20
 8017cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc8:	4413      	add	r3, r2
 8017cca:	227e      	movs	r2, #126	; 0x7e
 8017ccc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017cce:	2300      	movs	r3, #0
 8017cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8017cd2:	e002      	b.n	8017cda <gen_numname+0xd2>
 8017cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8017cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	d205      	bcs.n	8017cee <gen_numname+0xe6>
 8017ce2:	68fa      	ldr	r2, [r7, #12]
 8017ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce6:	4413      	add	r3, r2
 8017ce8:	781b      	ldrb	r3, [r3, #0]
 8017cea:	2b20      	cmp	r3, #32
 8017cec:	d1f2      	bne.n	8017cd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf0:	2b07      	cmp	r3, #7
 8017cf2:	d807      	bhi.n	8017d04 <gen_numname+0xfc>
 8017cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf6:	1c5a      	adds	r2, r3, #1
 8017cf8:	62ba      	str	r2, [r7, #40]	; 0x28
 8017cfa:	3330      	adds	r3, #48	; 0x30
 8017cfc:	443b      	add	r3, r7
 8017cfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017d02:	e000      	b.n	8017d06 <gen_numname+0xfe>
 8017d04:	2120      	movs	r1, #32
 8017d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d08:	1c5a      	adds	r2, r3, #1
 8017d0a:	627a      	str	r2, [r7, #36]	; 0x24
 8017d0c:	68fa      	ldr	r2, [r7, #12]
 8017d0e:	4413      	add	r3, r2
 8017d10:	460a      	mov	r2, r1
 8017d12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d16:	2b07      	cmp	r3, #7
 8017d18:	d9e9      	bls.n	8017cee <gen_numname+0xe6>
}
 8017d1a:	bf00      	nop
 8017d1c:	bf00      	nop
 8017d1e:	3730      	adds	r7, #48	; 0x30
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}

08017d24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017d24:	b480      	push	{r7}
 8017d26:	b085      	sub	sp, #20
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017d30:	230b      	movs	r3, #11
 8017d32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017d34:	7bfb      	ldrb	r3, [r7, #15]
 8017d36:	b2da      	uxtb	r2, r3
 8017d38:	0852      	lsrs	r2, r2, #1
 8017d3a:	01db      	lsls	r3, r3, #7
 8017d3c:	4313      	orrs	r3, r2
 8017d3e:	b2da      	uxtb	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	1c59      	adds	r1, r3, #1
 8017d44:	6079      	str	r1, [r7, #4]
 8017d46:	781b      	ldrb	r3, [r3, #0]
 8017d48:	4413      	add	r3, r2
 8017d4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	3b01      	subs	r3, #1
 8017d50:	60bb      	str	r3, [r7, #8]
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d1ed      	bne.n	8017d34 <sum_sfn+0x10>
	return sum;
 8017d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3714      	adds	r7, #20
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr

08017d66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017d66:	b580      	push	{r7, lr}
 8017d68:	b086      	sub	sp, #24
 8017d6a:	af00      	add	r7, sp, #0
 8017d6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017d74:	2100      	movs	r1, #0
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f7ff fca8 	bl	80176cc <dir_sdi>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017d80:	7dfb      	ldrb	r3, [r7, #23]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d001      	beq.n	8017d8a <dir_find+0x24>
 8017d86:	7dfb      	ldrb	r3, [r7, #23]
 8017d88:	e0a9      	b.n	8017ede <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017d8a:	23ff      	movs	r3, #255	; 0xff
 8017d8c:	753b      	strb	r3, [r7, #20]
 8017d8e:	7d3b      	ldrb	r3, [r7, #20]
 8017d90:	757b      	strb	r3, [r7, #21]
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	f04f 32ff 	mov.w	r2, #4294967295
 8017d98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	69db      	ldr	r3, [r3, #28]
 8017d9e:	4619      	mov	r1, r3
 8017da0:	6938      	ldr	r0, [r7, #16]
 8017da2:	f7ff f913 	bl	8016fcc <move_window>
 8017da6:	4603      	mov	r3, r0
 8017da8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	f040 8090 	bne.w	8017ed2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	6a1b      	ldr	r3, [r3, #32]
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017dba:	7dbb      	ldrb	r3, [r7, #22]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d102      	bne.n	8017dc6 <dir_find+0x60>
 8017dc0:	2304      	movs	r3, #4
 8017dc2:	75fb      	strb	r3, [r7, #23]
 8017dc4:	e08a      	b.n	8017edc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6a1b      	ldr	r3, [r3, #32]
 8017dca:	330b      	adds	r3, #11
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dd2:	73fb      	strb	r3, [r7, #15]
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	7bfa      	ldrb	r2, [r7, #15]
 8017dd8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017dda:	7dbb      	ldrb	r3, [r7, #22]
 8017ddc:	2be5      	cmp	r3, #229	; 0xe5
 8017dde:	d007      	beq.n	8017df0 <dir_find+0x8a>
 8017de0:	7bfb      	ldrb	r3, [r7, #15]
 8017de2:	f003 0308 	and.w	r3, r3, #8
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d009      	beq.n	8017dfe <dir_find+0x98>
 8017dea:	7bfb      	ldrb	r3, [r7, #15]
 8017dec:	2b0f      	cmp	r3, #15
 8017dee:	d006      	beq.n	8017dfe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017df0:	23ff      	movs	r3, #255	; 0xff
 8017df2:	757b      	strb	r3, [r7, #21]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	f04f 32ff 	mov.w	r2, #4294967295
 8017dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8017dfc:	e05e      	b.n	8017ebc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017dfe:	7bfb      	ldrb	r3, [r7, #15]
 8017e00:	2b0f      	cmp	r3, #15
 8017e02:	d136      	bne.n	8017e72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d154      	bne.n	8017ebc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017e12:	7dbb      	ldrb	r3, [r7, #22]
 8017e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00d      	beq.n	8017e38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6a1b      	ldr	r3, [r3, #32]
 8017e20:	7b5b      	ldrb	r3, [r3, #13]
 8017e22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017e24:	7dbb      	ldrb	r3, [r7, #22]
 8017e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017e2a:	75bb      	strb	r3, [r7, #22]
 8017e2c:	7dbb      	ldrb	r3, [r7, #22]
 8017e2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	695a      	ldr	r2, [r3, #20]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017e38:	7dba      	ldrb	r2, [r7, #22]
 8017e3a:	7d7b      	ldrb	r3, [r7, #21]
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d115      	bne.n	8017e6c <dir_find+0x106>
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	6a1b      	ldr	r3, [r3, #32]
 8017e44:	330d      	adds	r3, #13
 8017e46:	781b      	ldrb	r3, [r3, #0]
 8017e48:	7d3a      	ldrb	r2, [r7, #20]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d10e      	bne.n	8017e6c <dir_find+0x106>
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	68da      	ldr	r2, [r3, #12]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	6a1b      	ldr	r3, [r3, #32]
 8017e56:	4619      	mov	r1, r3
 8017e58:	4610      	mov	r0, r2
 8017e5a:	f7ff fdfd 	bl	8017a58 <cmp_lfn>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d003      	beq.n	8017e6c <dir_find+0x106>
 8017e64:	7d7b      	ldrb	r3, [r7, #21]
 8017e66:	3b01      	subs	r3, #1
 8017e68:	b2db      	uxtb	r3, r3
 8017e6a:	e000      	b.n	8017e6e <dir_find+0x108>
 8017e6c:	23ff      	movs	r3, #255	; 0xff
 8017e6e:	757b      	strb	r3, [r7, #21]
 8017e70:	e024      	b.n	8017ebc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017e72:	7d7b      	ldrb	r3, [r7, #21]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d109      	bne.n	8017e8c <dir_find+0x126>
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	6a1b      	ldr	r3, [r3, #32]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7ff ff51 	bl	8017d24 <sum_sfn>
 8017e82:	4603      	mov	r3, r0
 8017e84:	461a      	mov	r2, r3
 8017e86:	7d3b      	ldrb	r3, [r7, #20]
 8017e88:	4293      	cmp	r3, r2
 8017e8a:	d024      	beq.n	8017ed6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017e92:	f003 0301 	and.w	r3, r3, #1
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d10a      	bne.n	8017eb0 <dir_find+0x14a>
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6a18      	ldr	r0, [r3, #32]
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	3324      	adds	r3, #36	; 0x24
 8017ea2:	220b      	movs	r2, #11
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	f7fe fe9f 	bl	8016be8 <mem_cmp>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d014      	beq.n	8017eda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017eb0:	23ff      	movs	r3, #255	; 0xff
 8017eb2:	757b      	strb	r3, [r7, #21]
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8017eba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f7ff fc7f 	bl	80177c2 <dir_next>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017ec8:	7dfb      	ldrb	r3, [r7, #23]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	f43f af65 	beq.w	8017d9a <dir_find+0x34>
 8017ed0:	e004      	b.n	8017edc <dir_find+0x176>
		if (res != FR_OK) break;
 8017ed2:	bf00      	nop
 8017ed4:	e002      	b.n	8017edc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017ed6:	bf00      	nop
 8017ed8:	e000      	b.n	8017edc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017eda:	bf00      	nop

	return res;
 8017edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3718      	adds	r7, #24
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
	...

08017ee8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b08c      	sub	sp, #48	; 0x30
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017efc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d001      	beq.n	8017f08 <dir_register+0x20>
 8017f04:	2306      	movs	r3, #6
 8017f06:	e0e0      	b.n	80180ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017f08:	2300      	movs	r3, #0
 8017f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8017f0c:	e002      	b.n	8017f14 <dir_register+0x2c>
 8017f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f10:	3301      	adds	r3, #1
 8017f12:	627b      	str	r3, [r7, #36]	; 0x24
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	68da      	ldr	r2, [r3, #12]
 8017f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1a:	005b      	lsls	r3, r3, #1
 8017f1c:	4413      	add	r3, r2
 8017f1e:	881b      	ldrh	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d1f4      	bne.n	8017f0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017f2a:	f107 030c 	add.w	r3, r7, #12
 8017f2e:	220c      	movs	r2, #12
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fe fe1d 	bl	8016b70 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8017f36:	7dfb      	ldrb	r3, [r7, #23]
 8017f38:	f003 0301 	and.w	r3, r3, #1
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d032      	beq.n	8017fa6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2240      	movs	r2, #64	; 0x40
 8017f44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017f48:	2301      	movs	r3, #1
 8017f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f4c:	e016      	b.n	8017f7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	68da      	ldr	r2, [r3, #12]
 8017f58:	f107 010c 	add.w	r1, r7, #12
 8017f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5e:	f7ff fe53 	bl	8017c08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7ff feff 	bl	8017d66 <dir_find>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8017f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d106      	bne.n	8017f84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8017f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f78:	3301      	adds	r3, #1
 8017f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7e:	2b63      	cmp	r3, #99	; 0x63
 8017f80:	d9e5      	bls.n	8017f4e <dir_register+0x66>
 8017f82:	e000      	b.n	8017f86 <dir_register+0x9e>
			if (res != FR_OK) break;
 8017f84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f88:	2b64      	cmp	r3, #100	; 0x64
 8017f8a:	d101      	bne.n	8017f90 <dir_register+0xa8>
 8017f8c:	2307      	movs	r3, #7
 8017f8e:	e09c      	b.n	80180ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f94:	2b04      	cmp	r3, #4
 8017f96:	d002      	beq.n	8017f9e <dir_register+0xb6>
 8017f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f9c:	e095      	b.n	80180ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017f9e:	7dfa      	ldrb	r2, [r7, #23]
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017fa6:	7dfb      	ldrb	r3, [r7, #23]
 8017fa8:	f003 0302 	and.w	r3, r3, #2
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d007      	beq.n	8017fc0 <dir_register+0xd8>
 8017fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb2:	330c      	adds	r3, #12
 8017fb4:	4a47      	ldr	r2, [pc, #284]	; (80180d4 <dir_register+0x1ec>)
 8017fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8017fba:	089b      	lsrs	r3, r3, #2
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	e000      	b.n	8017fc2 <dir_register+0xda>
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017fc4:	6a39      	ldr	r1, [r7, #32]
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f7ff fcc0 	bl	801794c <dir_alloc>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d148      	bne.n	801806c <dir_register+0x184>
 8017fda:	6a3b      	ldr	r3, [r7, #32]
 8017fdc:	3b01      	subs	r3, #1
 8017fde:	623b      	str	r3, [r7, #32]
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d042      	beq.n	801806c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	695a      	ldr	r2, [r3, #20]
 8017fea:	6a3b      	ldr	r3, [r7, #32]
 8017fec:	015b      	lsls	r3, r3, #5
 8017fee:	1ad3      	subs	r3, r2, r3
 8017ff0:	4619      	mov	r1, r3
 8017ff2:	6878      	ldr	r0, [r7, #4]
 8017ff4:	f7ff fb6a 	bl	80176cc <dir_sdi>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018002:	2b00      	cmp	r3, #0
 8018004:	d132      	bne.n	801806c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	3324      	adds	r3, #36	; 0x24
 801800a:	4618      	mov	r0, r3
 801800c:	f7ff fe8a 	bl	8017d24 <sum_sfn>
 8018010:	4603      	mov	r3, r0
 8018012:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	69db      	ldr	r3, [r3, #28]
 8018018:	4619      	mov	r1, r3
 801801a:	69f8      	ldr	r0, [r7, #28]
 801801c:	f7fe ffd6 	bl	8016fcc <move_window>
 8018020:	4603      	mov	r3, r0
 8018022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801802a:	2b00      	cmp	r3, #0
 801802c:	d11d      	bne.n	801806a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	68d8      	ldr	r0, [r3, #12]
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6a19      	ldr	r1, [r3, #32]
 8018036:	6a3b      	ldr	r3, [r7, #32]
 8018038:	b2da      	uxtb	r2, r3
 801803a:	7efb      	ldrb	r3, [r7, #27]
 801803c:	f7ff fd7c 	bl	8017b38 <put_lfn>
				fs->wflag = 1;
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	2201      	movs	r2, #1
 8018044:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018046:	2100      	movs	r1, #0
 8018048:	6878      	ldr	r0, [r7, #4]
 801804a:	f7ff fbba 	bl	80177c2 <dir_next>
 801804e:	4603      	mov	r3, r0
 8018050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018058:	2b00      	cmp	r3, #0
 801805a:	d107      	bne.n	801806c <dir_register+0x184>
 801805c:	6a3b      	ldr	r3, [r7, #32]
 801805e:	3b01      	subs	r3, #1
 8018060:	623b      	str	r3, [r7, #32]
 8018062:	6a3b      	ldr	r3, [r7, #32]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d1d5      	bne.n	8018014 <dir_register+0x12c>
 8018068:	e000      	b.n	801806c <dir_register+0x184>
				if (res != FR_OK) break;
 801806a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801806c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018070:	2b00      	cmp	r3, #0
 8018072:	d128      	bne.n	80180c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	69db      	ldr	r3, [r3, #28]
 8018078:	4619      	mov	r1, r3
 801807a:	69f8      	ldr	r0, [r7, #28]
 801807c:	f7fe ffa6 	bl	8016fcc <move_window>
 8018080:	4603      	mov	r3, r0
 8018082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801808a:	2b00      	cmp	r3, #0
 801808c:	d11b      	bne.n	80180c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6a1b      	ldr	r3, [r3, #32]
 8018092:	2220      	movs	r2, #32
 8018094:	2100      	movs	r1, #0
 8018096:	4618      	mov	r0, r3
 8018098:	f7fe fd8b 	bl	8016bb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6a18      	ldr	r0, [r3, #32]
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	3324      	adds	r3, #36	; 0x24
 80180a4:	220b      	movs	r2, #11
 80180a6:	4619      	mov	r1, r3
 80180a8:	f7fe fd62 	bl	8016b70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6a1b      	ldr	r3, [r3, #32]
 80180b6:	330c      	adds	r3, #12
 80180b8:	f002 0218 	and.w	r2, r2, #24
 80180bc:	b2d2      	uxtb	r2, r2
 80180be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80180c0:	69fb      	ldr	r3, [r7, #28]
 80180c2:	2201      	movs	r2, #1
 80180c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80180c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	3730      	adds	r7, #48	; 0x30
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}
 80180d2:	bf00      	nop
 80180d4:	4ec4ec4f 	.word	0x4ec4ec4f

080180d8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b088      	sub	sp, #32
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	2200      	movs	r2, #0
 80180ec:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	69db      	ldr	r3, [r3, #28]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f000 80c9 	beq.w	801828a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018100:	d032      	beq.n	8018168 <get_fileinfo+0x90>
			i = j = 0;
 8018102:	2300      	movs	r3, #0
 8018104:	61bb      	str	r3, [r7, #24]
 8018106:	69bb      	ldr	r3, [r7, #24]
 8018108:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801810a:	e01b      	b.n	8018144 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801810c:	89fb      	ldrh	r3, [r7, #14]
 801810e:	2100      	movs	r1, #0
 8018110:	4618      	mov	r0, r3
 8018112:	f001 fabf 	bl	8019694 <ff_convert>
 8018116:	4603      	mov	r3, r0
 8018118:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801811a:	89fb      	ldrh	r3, [r7, #14]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d102      	bne.n	8018126 <get_fileinfo+0x4e>
 8018120:	2300      	movs	r3, #0
 8018122:	61fb      	str	r3, [r7, #28]
 8018124:	e01a      	b.n	801815c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018126:	69fb      	ldr	r3, [r7, #28]
 8018128:	2bfe      	cmp	r3, #254	; 0xfe
 801812a:	d902      	bls.n	8018132 <get_fileinfo+0x5a>
 801812c:	2300      	movs	r3, #0
 801812e:	61fb      	str	r3, [r7, #28]
 8018130:	e014      	b.n	801815c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018132:	69fb      	ldr	r3, [r7, #28]
 8018134:	1c5a      	adds	r2, r3, #1
 8018136:	61fa      	str	r2, [r7, #28]
 8018138:	89fa      	ldrh	r2, [r7, #14]
 801813a:	b2d1      	uxtb	r1, r2
 801813c:	683a      	ldr	r2, [r7, #0]
 801813e:	4413      	add	r3, r2
 8018140:	460a      	mov	r2, r1
 8018142:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	68da      	ldr	r2, [r3, #12]
 8018148:	69bb      	ldr	r3, [r7, #24]
 801814a:	1c59      	adds	r1, r3, #1
 801814c:	61b9      	str	r1, [r7, #24]
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	4413      	add	r3, r2
 8018152:	881b      	ldrh	r3, [r3, #0]
 8018154:	81fb      	strh	r3, [r7, #14]
 8018156:	89fb      	ldrh	r3, [r7, #14]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d1d7      	bne.n	801810c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801815c:	683a      	ldr	r2, [r7, #0]
 801815e:	69fb      	ldr	r3, [r7, #28]
 8018160:	4413      	add	r3, r2
 8018162:	3316      	adds	r3, #22
 8018164:	2200      	movs	r2, #0
 8018166:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018168:	2300      	movs	r3, #0
 801816a:	61bb      	str	r3, [r7, #24]
 801816c:	69bb      	ldr	r3, [r7, #24]
 801816e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018170:	683a      	ldr	r2, [r7, #0]
 8018172:	69fb      	ldr	r3, [r7, #28]
 8018174:	4413      	add	r3, r2
 8018176:	3316      	adds	r3, #22
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801817c:	e04c      	b.n	8018218 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6a1a      	ldr	r2, [r3, #32]
 8018182:	69fb      	ldr	r3, [r7, #28]
 8018184:	1c59      	adds	r1, r3, #1
 8018186:	61f9      	str	r1, [r7, #28]
 8018188:	4413      	add	r3, r2
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801818e:	7dfb      	ldrb	r3, [r7, #23]
 8018190:	2b20      	cmp	r3, #32
 8018192:	d100      	bne.n	8018196 <get_fileinfo+0xbe>
 8018194:	e040      	b.n	8018218 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018196:	7dfb      	ldrb	r3, [r7, #23]
 8018198:	2b05      	cmp	r3, #5
 801819a:	d101      	bne.n	80181a0 <get_fileinfo+0xc8>
 801819c:	23e5      	movs	r3, #229	; 0xe5
 801819e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80181a0:	69fb      	ldr	r3, [r7, #28]
 80181a2:	2b09      	cmp	r3, #9
 80181a4:	d10f      	bne.n	80181c6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80181a6:	89bb      	ldrh	r3, [r7, #12]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d105      	bne.n	80181b8 <get_fileinfo+0xe0>
 80181ac:	683a      	ldr	r2, [r7, #0]
 80181ae:	69bb      	ldr	r3, [r7, #24]
 80181b0:	4413      	add	r3, r2
 80181b2:	3316      	adds	r3, #22
 80181b4:	222e      	movs	r2, #46	; 0x2e
 80181b6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80181b8:	69bb      	ldr	r3, [r7, #24]
 80181ba:	1c5a      	adds	r2, r3, #1
 80181bc:	61ba      	str	r2, [r7, #24]
 80181be:	683a      	ldr	r2, [r7, #0]
 80181c0:	4413      	add	r3, r2
 80181c2:	222e      	movs	r2, #46	; 0x2e
 80181c4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80181c6:	683a      	ldr	r2, [r7, #0]
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	4413      	add	r3, r2
 80181cc:	3309      	adds	r3, #9
 80181ce:	7dfa      	ldrb	r2, [r7, #23]
 80181d0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80181d2:	89bb      	ldrh	r3, [r7, #12]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d11c      	bne.n	8018212 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80181d8:	7dfb      	ldrb	r3, [r7, #23]
 80181da:	2b40      	cmp	r3, #64	; 0x40
 80181dc:	d913      	bls.n	8018206 <get_fileinfo+0x12e>
 80181de:	7dfb      	ldrb	r3, [r7, #23]
 80181e0:	2b5a      	cmp	r3, #90	; 0x5a
 80181e2:	d810      	bhi.n	8018206 <get_fileinfo+0x12e>
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6a1b      	ldr	r3, [r3, #32]
 80181e8:	330c      	adds	r3, #12
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	461a      	mov	r2, r3
 80181ee:	69fb      	ldr	r3, [r7, #28]
 80181f0:	2b08      	cmp	r3, #8
 80181f2:	d901      	bls.n	80181f8 <get_fileinfo+0x120>
 80181f4:	2310      	movs	r3, #16
 80181f6:	e000      	b.n	80181fa <get_fileinfo+0x122>
 80181f8:	2308      	movs	r3, #8
 80181fa:	4013      	ands	r3, r2
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d002      	beq.n	8018206 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8018200:	7dfb      	ldrb	r3, [r7, #23]
 8018202:	3320      	adds	r3, #32
 8018204:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8018206:	683a      	ldr	r2, [r7, #0]
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	4413      	add	r3, r2
 801820c:	3316      	adds	r3, #22
 801820e:	7dfa      	ldrb	r2, [r7, #23]
 8018210:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	3301      	adds	r3, #1
 8018216:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8018218:	69fb      	ldr	r3, [r7, #28]
 801821a:	2b0a      	cmp	r3, #10
 801821c:	d9af      	bls.n	801817e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801821e:	89bb      	ldrh	r3, [r7, #12]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d10d      	bne.n	8018240 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8018224:	683a      	ldr	r2, [r7, #0]
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	4413      	add	r3, r2
 801822a:	3316      	adds	r3, #22
 801822c:	2200      	movs	r2, #0
 801822e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6a1b      	ldr	r3, [r3, #32]
 8018234:	330c      	adds	r3, #12
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d101      	bne.n	8018240 <get_fileinfo+0x168>
 801823c:	2300      	movs	r3, #0
 801823e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018240:	683a      	ldr	r2, [r7, #0]
 8018242:	69bb      	ldr	r3, [r7, #24]
 8018244:	4413      	add	r3, r2
 8018246:	3309      	adds	r3, #9
 8018248:	2200      	movs	r2, #0
 801824a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6a1b      	ldr	r3, [r3, #32]
 8018250:	7ada      	ldrb	r2, [r3, #11]
 8018252:	683b      	ldr	r3, [r7, #0]
 8018254:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	6a1b      	ldr	r3, [r3, #32]
 801825a:	331c      	adds	r3, #28
 801825c:	4618      	mov	r0, r3
 801825e:	f7fe fc1d 	bl	8016a9c <ld_dword>
 8018262:	4602      	mov	r2, r0
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	6a1b      	ldr	r3, [r3, #32]
 801826c:	3316      	adds	r3, #22
 801826e:	4618      	mov	r0, r3
 8018270:	f7fe fc14 	bl	8016a9c <ld_dword>
 8018274:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	b29a      	uxth	r2, r3
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	80da      	strh	r2, [r3, #6]
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	0c1b      	lsrs	r3, r3, #16
 8018282:	b29a      	uxth	r2, r3
 8018284:	683b      	ldr	r3, [r7, #0]
 8018286:	809a      	strh	r2, [r3, #4]
 8018288:	e000      	b.n	801828c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801828a:	bf00      	nop
}
 801828c:	3720      	adds	r7, #32
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}
	...

08018294 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b08a      	sub	sp, #40	; 0x28
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	613b      	str	r3, [r7, #16]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	68db      	ldr	r3, [r3, #12]
 80182aa:	60fb      	str	r3, [r7, #12]
 80182ac:	2300      	movs	r3, #0
 80182ae:	617b      	str	r3, [r7, #20]
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	1c5a      	adds	r2, r3, #1
 80182b8:	61ba      	str	r2, [r7, #24]
 80182ba:	693a      	ldr	r2, [r7, #16]
 80182bc:	4413      	add	r3, r2
 80182be:	781b      	ldrb	r3, [r3, #0]
 80182c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80182c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182c4:	2b1f      	cmp	r3, #31
 80182c6:	d940      	bls.n	801834a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80182c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182ca:	2b2f      	cmp	r3, #47	; 0x2f
 80182cc:	d006      	beq.n	80182dc <create_name+0x48>
 80182ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182d0:	2b5c      	cmp	r3, #92	; 0x5c
 80182d2:	d110      	bne.n	80182f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80182d4:	e002      	b.n	80182dc <create_name+0x48>
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	3301      	adds	r3, #1
 80182da:	61bb      	str	r3, [r7, #24]
 80182dc:	693a      	ldr	r2, [r7, #16]
 80182de:	69bb      	ldr	r3, [r7, #24]
 80182e0:	4413      	add	r3, r2
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	2b2f      	cmp	r3, #47	; 0x2f
 80182e6:	d0f6      	beq.n	80182d6 <create_name+0x42>
 80182e8:	693a      	ldr	r2, [r7, #16]
 80182ea:	69bb      	ldr	r3, [r7, #24]
 80182ec:	4413      	add	r3, r2
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	2b5c      	cmp	r3, #92	; 0x5c
 80182f2:	d0f0      	beq.n	80182d6 <create_name+0x42>
			break;
 80182f4:	e02a      	b.n	801834c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	2bfe      	cmp	r3, #254	; 0xfe
 80182fa:	d901      	bls.n	8018300 <create_name+0x6c>
 80182fc:	2306      	movs	r3, #6
 80182fe:	e17d      	b.n	80185fc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018302:	b2db      	uxtb	r3, r3
 8018304:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018308:	2101      	movs	r1, #1
 801830a:	4618      	mov	r0, r3
 801830c:	f001 f9c2 	bl	8019694 <ff_convert>
 8018310:	4603      	mov	r3, r0
 8018312:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018316:	2b00      	cmp	r3, #0
 8018318:	d101      	bne.n	801831e <create_name+0x8a>
 801831a:	2306      	movs	r3, #6
 801831c:	e16e      	b.n	80185fc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801831e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018320:	2b7f      	cmp	r3, #127	; 0x7f
 8018322:	d809      	bhi.n	8018338 <create_name+0xa4>
 8018324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018326:	4619      	mov	r1, r3
 8018328:	488d      	ldr	r0, [pc, #564]	; (8018560 <create_name+0x2cc>)
 801832a:	f7fe fc84 	bl	8016c36 <chk_chr>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d001      	beq.n	8018338 <create_name+0xa4>
 8018334:	2306      	movs	r3, #6
 8018336:	e161      	b.n	80185fc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	1c5a      	adds	r2, r3, #1
 801833c:	617a      	str	r2, [r7, #20]
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	68fa      	ldr	r2, [r7, #12]
 8018342:	4413      	add	r3, r2
 8018344:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018346:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018348:	e7b4      	b.n	80182b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801834a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801834c:	693a      	ldr	r2, [r7, #16]
 801834e:	69bb      	ldr	r3, [r7, #24]
 8018350:	441a      	add	r2, r3
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018358:	2b1f      	cmp	r3, #31
 801835a:	d801      	bhi.n	8018360 <create_name+0xcc>
 801835c:	2304      	movs	r3, #4
 801835e:	e000      	b.n	8018362 <create_name+0xce>
 8018360:	2300      	movs	r3, #0
 8018362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018366:	e011      	b.n	801838c <create_name+0xf8>
		w = lfn[di - 1];
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801836e:	3b01      	subs	r3, #1
 8018370:	005b      	lsls	r3, r3, #1
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	4413      	add	r3, r2
 8018376:	881b      	ldrh	r3, [r3, #0]
 8018378:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801837a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801837c:	2b20      	cmp	r3, #32
 801837e:	d002      	beq.n	8018386 <create_name+0xf2>
 8018380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018382:	2b2e      	cmp	r3, #46	; 0x2e
 8018384:	d106      	bne.n	8018394 <create_name+0x100>
		di--;
 8018386:	697b      	ldr	r3, [r7, #20]
 8018388:	3b01      	subs	r3, #1
 801838a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d1ea      	bne.n	8018368 <create_name+0xd4>
 8018392:	e000      	b.n	8018396 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018394:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018396:	697b      	ldr	r3, [r7, #20]
 8018398:	005b      	lsls	r3, r3, #1
 801839a:	68fa      	ldr	r2, [r7, #12]
 801839c:	4413      	add	r3, r2
 801839e:	2200      	movs	r2, #0
 80183a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d101      	bne.n	80183ac <create_name+0x118>
 80183a8:	2306      	movs	r3, #6
 80183aa:	e127      	b.n	80185fc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	3324      	adds	r3, #36	; 0x24
 80183b0:	220b      	movs	r2, #11
 80183b2:	2120      	movs	r1, #32
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7fe fbfc 	bl	8016bb2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80183ba:	2300      	movs	r3, #0
 80183bc:	61bb      	str	r3, [r7, #24]
 80183be:	e002      	b.n	80183c6 <create_name+0x132>
 80183c0:	69bb      	ldr	r3, [r7, #24]
 80183c2:	3301      	adds	r3, #1
 80183c4:	61bb      	str	r3, [r7, #24]
 80183c6:	69bb      	ldr	r3, [r7, #24]
 80183c8:	005b      	lsls	r3, r3, #1
 80183ca:	68fa      	ldr	r2, [r7, #12]
 80183cc:	4413      	add	r3, r2
 80183ce:	881b      	ldrh	r3, [r3, #0]
 80183d0:	2b20      	cmp	r3, #32
 80183d2:	d0f5      	beq.n	80183c0 <create_name+0x12c>
 80183d4:	69bb      	ldr	r3, [r7, #24]
 80183d6:	005b      	lsls	r3, r3, #1
 80183d8:	68fa      	ldr	r2, [r7, #12]
 80183da:	4413      	add	r3, r2
 80183dc:	881b      	ldrh	r3, [r3, #0]
 80183de:	2b2e      	cmp	r3, #46	; 0x2e
 80183e0:	d0ee      	beq.n	80183c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80183e2:	69bb      	ldr	r3, [r7, #24]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d009      	beq.n	80183fc <create_name+0x168>
 80183e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183ec:	f043 0303 	orr.w	r3, r3, #3
 80183f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80183f4:	e002      	b.n	80183fc <create_name+0x168>
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	3b01      	subs	r3, #1
 80183fa:	617b      	str	r3, [r7, #20]
 80183fc:	697b      	ldr	r3, [r7, #20]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d009      	beq.n	8018416 <create_name+0x182>
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018408:	3b01      	subs	r3, #1
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	68fa      	ldr	r2, [r7, #12]
 801840e:	4413      	add	r3, r2
 8018410:	881b      	ldrh	r3, [r3, #0]
 8018412:	2b2e      	cmp	r3, #46	; 0x2e
 8018414:	d1ef      	bne.n	80183f6 <create_name+0x162>

	i = b = 0; ni = 8;
 8018416:	2300      	movs	r3, #0
 8018418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801841c:	2300      	movs	r3, #0
 801841e:	623b      	str	r3, [r7, #32]
 8018420:	2308      	movs	r3, #8
 8018422:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018424:	69bb      	ldr	r3, [r7, #24]
 8018426:	1c5a      	adds	r2, r3, #1
 8018428:	61ba      	str	r2, [r7, #24]
 801842a:	005b      	lsls	r3, r3, #1
 801842c:	68fa      	ldr	r2, [r7, #12]
 801842e:	4413      	add	r3, r2
 8018430:	881b      	ldrh	r3, [r3, #0]
 8018432:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018436:	2b00      	cmp	r3, #0
 8018438:	f000 8090 	beq.w	801855c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801843c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801843e:	2b20      	cmp	r3, #32
 8018440:	d006      	beq.n	8018450 <create_name+0x1bc>
 8018442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018444:	2b2e      	cmp	r3, #46	; 0x2e
 8018446:	d10a      	bne.n	801845e <create_name+0x1ca>
 8018448:	69ba      	ldr	r2, [r7, #24]
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	429a      	cmp	r2, r3
 801844e:	d006      	beq.n	801845e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018454:	f043 0303 	orr.w	r3, r3, #3
 8018458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801845c:	e07d      	b.n	801855a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801845e:	6a3a      	ldr	r2, [r7, #32]
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	429a      	cmp	r2, r3
 8018464:	d203      	bcs.n	801846e <create_name+0x1da>
 8018466:	69ba      	ldr	r2, [r7, #24]
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	429a      	cmp	r2, r3
 801846c:	d123      	bne.n	80184b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801846e:	69fb      	ldr	r3, [r7, #28]
 8018470:	2b0b      	cmp	r3, #11
 8018472:	d106      	bne.n	8018482 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018478:	f043 0303 	orr.w	r3, r3, #3
 801847c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018480:	e075      	b.n	801856e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018482:	69ba      	ldr	r2, [r7, #24]
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	429a      	cmp	r2, r3
 8018488:	d005      	beq.n	8018496 <create_name+0x202>
 801848a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801848e:	f043 0303 	orr.w	r3, r3, #3
 8018492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018496:	69ba      	ldr	r2, [r7, #24]
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	429a      	cmp	r2, r3
 801849c:	d866      	bhi.n	801856c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	61bb      	str	r3, [r7, #24]
 80184a2:	2308      	movs	r3, #8
 80184a4:	623b      	str	r3, [r7, #32]
 80184a6:	230b      	movs	r3, #11
 80184a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80184aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80184b4:	e051      	b.n	801855a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80184b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184b8:	2b7f      	cmp	r3, #127	; 0x7f
 80184ba:	d914      	bls.n	80184e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80184bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184be:	2100      	movs	r1, #0
 80184c0:	4618      	mov	r0, r3
 80184c2:	f001 f8e7 	bl	8019694 <ff_convert>
 80184c6:	4603      	mov	r3, r0
 80184c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80184ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d004      	beq.n	80184da <create_name+0x246>
 80184d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184d2:	3b80      	subs	r3, #128	; 0x80
 80184d4:	4a23      	ldr	r2, [pc, #140]	; (8018564 <create_name+0x2d0>)
 80184d6:	5cd3      	ldrb	r3, [r2, r3]
 80184d8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80184da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184de:	f043 0302 	orr.w	r3, r3, #2
 80184e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80184e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d007      	beq.n	80184fc <create_name+0x268>
 80184ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184ee:	4619      	mov	r1, r3
 80184f0:	481d      	ldr	r0, [pc, #116]	; (8018568 <create_name+0x2d4>)
 80184f2:	f7fe fba0 	bl	8016c36 <chk_chr>
 80184f6:	4603      	mov	r3, r0
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d008      	beq.n	801850e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80184fc:	235f      	movs	r3, #95	; 0x5f
 80184fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018504:	f043 0303 	orr.w	r3, r3, #3
 8018508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801850c:	e01b      	b.n	8018546 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801850e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018510:	2b40      	cmp	r3, #64	; 0x40
 8018512:	d909      	bls.n	8018528 <create_name+0x294>
 8018514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018516:	2b5a      	cmp	r3, #90	; 0x5a
 8018518:	d806      	bhi.n	8018528 <create_name+0x294>
					b |= 2;
 801851a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801851e:	f043 0302 	orr.w	r3, r3, #2
 8018522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018526:	e00e      	b.n	8018546 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801852a:	2b60      	cmp	r3, #96	; 0x60
 801852c:	d90b      	bls.n	8018546 <create_name+0x2b2>
 801852e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018530:	2b7a      	cmp	r3, #122	; 0x7a
 8018532:	d808      	bhi.n	8018546 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018538:	f043 0301 	orr.w	r3, r3, #1
 801853c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018542:	3b20      	subs	r3, #32
 8018544:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018546:	6a3b      	ldr	r3, [r7, #32]
 8018548:	1c5a      	adds	r2, r3, #1
 801854a:	623a      	str	r2, [r7, #32]
 801854c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801854e:	b2d1      	uxtb	r1, r2
 8018550:	687a      	ldr	r2, [r7, #4]
 8018552:	4413      	add	r3, r2
 8018554:	460a      	mov	r2, r1
 8018556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801855a:	e763      	b.n	8018424 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801855c:	bf00      	nop
 801855e:	e006      	b.n	801856e <create_name+0x2da>
 8018560:	08020d0c 	.word	0x08020d0c
 8018564:	0802156c 	.word	0x0802156c
 8018568:	08020d18 	.word	0x08020d18
			if (si > di) break;			/* No extension */
 801856c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018574:	2be5      	cmp	r3, #229	; 0xe5
 8018576:	d103      	bne.n	8018580 <create_name+0x2ec>
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2205      	movs	r2, #5
 801857c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018580:	69fb      	ldr	r3, [r7, #28]
 8018582:	2b08      	cmp	r3, #8
 8018584:	d104      	bne.n	8018590 <create_name+0x2fc>
 8018586:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801858a:	009b      	lsls	r3, r3, #2
 801858c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018594:	f003 030c 	and.w	r3, r3, #12
 8018598:	2b0c      	cmp	r3, #12
 801859a:	d005      	beq.n	80185a8 <create_name+0x314>
 801859c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185a0:	f003 0303 	and.w	r3, r3, #3
 80185a4:	2b03      	cmp	r3, #3
 80185a6:	d105      	bne.n	80185b4 <create_name+0x320>
 80185a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185ac:	f043 0302 	orr.w	r3, r3, #2
 80185b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80185b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185b8:	f003 0302 	and.w	r3, r3, #2
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d117      	bne.n	80185f0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80185c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185c4:	f003 0303 	and.w	r3, r3, #3
 80185c8:	2b01      	cmp	r3, #1
 80185ca:	d105      	bne.n	80185d8 <create_name+0x344>
 80185cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185d0:	f043 0310 	orr.w	r3, r3, #16
 80185d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80185d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185dc:	f003 030c 	and.w	r3, r3, #12
 80185e0:	2b04      	cmp	r3, #4
 80185e2:	d105      	bne.n	80185f0 <create_name+0x35c>
 80185e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185e8:	f043 0308 	orr.w	r3, r3, #8
 80185ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80185f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80185fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3728      	adds	r7, #40	; 0x28
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b086      	sub	sp, #24
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018618:	e002      	b.n	8018620 <follow_path+0x1c>
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	3301      	adds	r3, #1
 801861e:	603b      	str	r3, [r7, #0]
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	781b      	ldrb	r3, [r3, #0]
 8018624:	2b2f      	cmp	r3, #47	; 0x2f
 8018626:	d0f8      	beq.n	801861a <follow_path+0x16>
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	2b5c      	cmp	r3, #92	; 0x5c
 801862e:	d0f4      	beq.n	801861a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	2200      	movs	r2, #0
 8018634:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	2b1f      	cmp	r3, #31
 801863c:	d80a      	bhi.n	8018654 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2280      	movs	r2, #128	; 0x80
 8018642:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018646:	2100      	movs	r1, #0
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f7ff f83f 	bl	80176cc <dir_sdi>
 801864e:	4603      	mov	r3, r0
 8018650:	75fb      	strb	r3, [r7, #23]
 8018652:	e043      	b.n	80186dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018654:	463b      	mov	r3, r7
 8018656:	4619      	mov	r1, r3
 8018658:	6878      	ldr	r0, [r7, #4]
 801865a:	f7ff fe1b 	bl	8018294 <create_name>
 801865e:	4603      	mov	r3, r0
 8018660:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018662:	7dfb      	ldrb	r3, [r7, #23]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d134      	bne.n	80186d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f7ff fb7c 	bl	8017d66 <dir_find>
 801866e:	4603      	mov	r3, r0
 8018670:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018678:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801867a:	7dfb      	ldrb	r3, [r7, #23]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d00a      	beq.n	8018696 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018680:	7dfb      	ldrb	r3, [r7, #23]
 8018682:	2b04      	cmp	r3, #4
 8018684:	d127      	bne.n	80186d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018686:	7afb      	ldrb	r3, [r7, #11]
 8018688:	f003 0304 	and.w	r3, r3, #4
 801868c:	2b00      	cmp	r3, #0
 801868e:	d122      	bne.n	80186d6 <follow_path+0xd2>
 8018690:	2305      	movs	r3, #5
 8018692:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018694:	e01f      	b.n	80186d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018696:	7afb      	ldrb	r3, [r7, #11]
 8018698:	f003 0304 	and.w	r3, r3, #4
 801869c:	2b00      	cmp	r3, #0
 801869e:	d11c      	bne.n	80186da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80186a0:	693b      	ldr	r3, [r7, #16]
 80186a2:	799b      	ldrb	r3, [r3, #6]
 80186a4:	f003 0310 	and.w	r3, r3, #16
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d102      	bne.n	80186b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80186ac:	2305      	movs	r3, #5
 80186ae:	75fb      	strb	r3, [r7, #23]
 80186b0:	e014      	b.n	80186dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	695b      	ldr	r3, [r3, #20]
 80186bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186c0:	4413      	add	r3, r2
 80186c2:	4619      	mov	r1, r3
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f7ff f988 	bl	80179da <ld_clust>
 80186ca:	4602      	mov	r2, r0
 80186cc:	693b      	ldr	r3, [r7, #16]
 80186ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80186d0:	e7c0      	b.n	8018654 <follow_path+0x50>
			if (res != FR_OK) break;
 80186d2:	bf00      	nop
 80186d4:	e002      	b.n	80186dc <follow_path+0xd8>
				break;
 80186d6:	bf00      	nop
 80186d8:	e000      	b.n	80186dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80186da:	bf00      	nop
			}
		}
	}

	return res;
 80186dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3718      	adds	r7, #24
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}

080186e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80186e6:	b480      	push	{r7}
 80186e8:	b087      	sub	sp, #28
 80186ea:	af00      	add	r7, sp, #0
 80186ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80186ee:	f04f 33ff 	mov.w	r3, #4294967295
 80186f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d031      	beq.n	8018760 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	617b      	str	r3, [r7, #20]
 8018702:	e002      	b.n	801870a <get_ldnumber+0x24>
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	3301      	adds	r3, #1
 8018708:	617b      	str	r3, [r7, #20]
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2b1f      	cmp	r3, #31
 8018710:	d903      	bls.n	801871a <get_ldnumber+0x34>
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	2b3a      	cmp	r3, #58	; 0x3a
 8018718:	d1f4      	bne.n	8018704 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	2b3a      	cmp	r3, #58	; 0x3a
 8018720:	d11c      	bne.n	801875c <get_ldnumber+0x76>
			tp = *path;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	1c5a      	adds	r2, r3, #1
 801872c:	60fa      	str	r2, [r7, #12]
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	3b30      	subs	r3, #48	; 0x30
 8018732:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	2b09      	cmp	r3, #9
 8018738:	d80e      	bhi.n	8018758 <get_ldnumber+0x72>
 801873a:	68fa      	ldr	r2, [r7, #12]
 801873c:	697b      	ldr	r3, [r7, #20]
 801873e:	429a      	cmp	r2, r3
 8018740:	d10a      	bne.n	8018758 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018742:	68bb      	ldr	r3, [r7, #8]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d107      	bne.n	8018758 <get_ldnumber+0x72>
					vol = (int)i;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801874c:	697b      	ldr	r3, [r7, #20]
 801874e:	3301      	adds	r3, #1
 8018750:	617b      	str	r3, [r7, #20]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	697a      	ldr	r2, [r7, #20]
 8018756:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	e002      	b.n	8018762 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801875c:	2300      	movs	r3, #0
 801875e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018760:	693b      	ldr	r3, [r7, #16]
}
 8018762:	4618      	mov	r0, r3
 8018764:	371c      	adds	r7, #28
 8018766:	46bd      	mov	sp, r7
 8018768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801876c:	4770      	bx	lr
	...

08018770 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b082      	sub	sp, #8
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
 8018778:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	2200      	movs	r2, #0
 801877e:	70da      	strb	r2, [r3, #3]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f04f 32ff 	mov.w	r2, #4294967295
 8018786:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018788:	6839      	ldr	r1, [r7, #0]
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f7fe fc1e 	bl	8016fcc <move_window>
 8018790:	4603      	mov	r3, r0
 8018792:	2b00      	cmp	r3, #0
 8018794:	d001      	beq.n	801879a <check_fs+0x2a>
 8018796:	2304      	movs	r3, #4
 8018798:	e038      	b.n	801880c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	3334      	adds	r3, #52	; 0x34
 801879e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7fe f962 	bl	8016a6c <ld_word>
 80187a8:	4603      	mov	r3, r0
 80187aa:	461a      	mov	r2, r3
 80187ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d001      	beq.n	80187b8 <check_fs+0x48>
 80187b4:	2303      	movs	r3, #3
 80187b6:	e029      	b.n	801880c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80187be:	2be9      	cmp	r3, #233	; 0xe9
 80187c0:	d009      	beq.n	80187d6 <check_fs+0x66>
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80187c8:	2beb      	cmp	r3, #235	; 0xeb
 80187ca:	d11e      	bne.n	801880a <check_fs+0x9a>
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80187d2:	2b90      	cmp	r3, #144	; 0x90
 80187d4:	d119      	bne.n	801880a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	3334      	adds	r3, #52	; 0x34
 80187da:	3336      	adds	r3, #54	; 0x36
 80187dc:	4618      	mov	r0, r3
 80187de:	f7fe f95d 	bl	8016a9c <ld_dword>
 80187e2:	4603      	mov	r3, r0
 80187e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80187e8:	4a0a      	ldr	r2, [pc, #40]	; (8018814 <check_fs+0xa4>)
 80187ea:	4293      	cmp	r3, r2
 80187ec:	d101      	bne.n	80187f2 <check_fs+0x82>
 80187ee:	2300      	movs	r3, #0
 80187f0:	e00c      	b.n	801880c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	3334      	adds	r3, #52	; 0x34
 80187f6:	3352      	adds	r3, #82	; 0x52
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7fe f94f 	bl	8016a9c <ld_dword>
 80187fe:	4603      	mov	r3, r0
 8018800:	4a05      	ldr	r2, [pc, #20]	; (8018818 <check_fs+0xa8>)
 8018802:	4293      	cmp	r3, r2
 8018804:	d101      	bne.n	801880a <check_fs+0x9a>
 8018806:	2300      	movs	r3, #0
 8018808:	e000      	b.n	801880c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801880a:	2302      	movs	r3, #2
}
 801880c:	4618      	mov	r0, r3
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}
 8018814:	00544146 	.word	0x00544146
 8018818:	33544146 	.word	0x33544146

0801881c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b096      	sub	sp, #88	; 0x58
 8018820:	af00      	add	r7, sp, #0
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	4613      	mov	r3, r2
 8018828:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	2200      	movs	r2, #0
 801882e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018830:	68f8      	ldr	r0, [r7, #12]
 8018832:	f7ff ff58 	bl	80186e6 <get_ldnumber>
 8018836:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801883a:	2b00      	cmp	r3, #0
 801883c:	da01      	bge.n	8018842 <find_volume+0x26>
 801883e:	230b      	movs	r3, #11
 8018840:	e230      	b.n	8018ca4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018842:	4aa1      	ldr	r2, [pc, #644]	; (8018ac8 <find_volume+0x2ac>)
 8018844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801884a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801884e:	2b00      	cmp	r3, #0
 8018850:	d101      	bne.n	8018856 <find_volume+0x3a>
 8018852:	230c      	movs	r3, #12
 8018854:	e226      	b.n	8018ca4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801885a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801885c:	79fb      	ldrb	r3, [r7, #7]
 801885e:	f023 0301 	bic.w	r3, r3, #1
 8018862:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018866:	781b      	ldrb	r3, [r3, #0]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d01a      	beq.n	80188a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801886e:	785b      	ldrb	r3, [r3, #1]
 8018870:	4618      	mov	r0, r3
 8018872:	f7fe f85d 	bl	8016930 <disk_status>
 8018876:	4603      	mov	r3, r0
 8018878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801887c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018880:	f003 0301 	and.w	r3, r3, #1
 8018884:	2b00      	cmp	r3, #0
 8018886:	d10c      	bne.n	80188a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018888:	79fb      	ldrb	r3, [r7, #7]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d007      	beq.n	801889e <find_volume+0x82>
 801888e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018892:	f003 0304 	and.w	r3, r3, #4
 8018896:	2b00      	cmp	r3, #0
 8018898:	d001      	beq.n	801889e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801889a:	230a      	movs	r3, #10
 801889c:	e202      	b.n	8018ca4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801889e:	2300      	movs	r3, #0
 80188a0:	e200      	b.n	8018ca4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80188a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a4:	2200      	movs	r2, #0
 80188a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80188a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188aa:	b2da      	uxtb	r2, r3
 80188ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80188b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188b2:	785b      	ldrb	r3, [r3, #1]
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7fe f855 	bl	8016964 <disk_initialize>
 80188ba:	4603      	mov	r3, r0
 80188bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80188c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80188c4:	f003 0301 	and.w	r3, r3, #1
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d001      	beq.n	80188d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80188cc:	2303      	movs	r3, #3
 80188ce:	e1e9      	b.n	8018ca4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80188d0:	79fb      	ldrb	r3, [r7, #7]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d007      	beq.n	80188e6 <find_volume+0xca>
 80188d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80188da:	f003 0304 	and.w	r3, r3, #4
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d001      	beq.n	80188e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80188e2:	230a      	movs	r3, #10
 80188e4:	e1de      	b.n	8018ca4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80188e6:	2300      	movs	r3, #0
 80188e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80188ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80188ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80188ee:	f7ff ff3f 	bl	8018770 <check_fs>
 80188f2:	4603      	mov	r3, r0
 80188f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80188f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80188fc:	2b02      	cmp	r3, #2
 80188fe:	d149      	bne.n	8018994 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018900:	2300      	movs	r3, #0
 8018902:	643b      	str	r3, [r7, #64]	; 0x40
 8018904:	e01e      	b.n	8018944 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018908:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801890c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801890e:	011b      	lsls	r3, r3, #4
 8018910:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018914:	4413      	add	r3, r2
 8018916:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801891a:	3304      	adds	r3, #4
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d006      	beq.n	8018930 <find_volume+0x114>
 8018922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018924:	3308      	adds	r3, #8
 8018926:	4618      	mov	r0, r3
 8018928:	f7fe f8b8 	bl	8016a9c <ld_dword>
 801892c:	4602      	mov	r2, r0
 801892e:	e000      	b.n	8018932 <find_volume+0x116>
 8018930:	2200      	movs	r2, #0
 8018932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018934:	009b      	lsls	r3, r3, #2
 8018936:	3358      	adds	r3, #88	; 0x58
 8018938:	443b      	add	r3, r7
 801893a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801893e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018940:	3301      	adds	r3, #1
 8018942:	643b      	str	r3, [r7, #64]	; 0x40
 8018944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018946:	2b03      	cmp	r3, #3
 8018948:	d9dd      	bls.n	8018906 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801894a:	2300      	movs	r3, #0
 801894c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801894e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018950:	2b00      	cmp	r3, #0
 8018952:	d002      	beq.n	801895a <find_volume+0x13e>
 8018954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018956:	3b01      	subs	r3, #1
 8018958:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801895a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	3358      	adds	r3, #88	; 0x58
 8018960:	443b      	add	r3, r7
 8018962:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018966:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801896a:	2b00      	cmp	r3, #0
 801896c:	d005      	beq.n	801897a <find_volume+0x15e>
 801896e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018972:	f7ff fefd 	bl	8018770 <check_fs>
 8018976:	4603      	mov	r3, r0
 8018978:	e000      	b.n	801897c <find_volume+0x160>
 801897a:	2303      	movs	r3, #3
 801897c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018984:	2b01      	cmp	r3, #1
 8018986:	d905      	bls.n	8018994 <find_volume+0x178>
 8018988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801898a:	3301      	adds	r3, #1
 801898c:	643b      	str	r3, [r7, #64]	; 0x40
 801898e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018990:	2b03      	cmp	r3, #3
 8018992:	d9e2      	bls.n	801895a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018998:	2b04      	cmp	r3, #4
 801899a:	d101      	bne.n	80189a0 <find_volume+0x184>
 801899c:	2301      	movs	r3, #1
 801899e:	e181      	b.n	8018ca4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80189a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80189a4:	2b01      	cmp	r3, #1
 80189a6:	d901      	bls.n	80189ac <find_volume+0x190>
 80189a8:	230d      	movs	r3, #13
 80189aa:	e17b      	b.n	8018ca4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80189ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ae:	3334      	adds	r3, #52	; 0x34
 80189b0:	330b      	adds	r3, #11
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7fe f85a 	bl	8016a6c <ld_word>
 80189b8:	4603      	mov	r3, r0
 80189ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189be:	d001      	beq.n	80189c4 <find_volume+0x1a8>
 80189c0:	230d      	movs	r3, #13
 80189c2:	e16f      	b.n	8018ca4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80189c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c6:	3334      	adds	r3, #52	; 0x34
 80189c8:	3316      	adds	r3, #22
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fe f84e 	bl	8016a6c <ld_word>
 80189d0:	4603      	mov	r3, r0
 80189d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80189d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d106      	bne.n	80189e8 <find_volume+0x1cc>
 80189da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189dc:	3334      	adds	r3, #52	; 0x34
 80189de:	3324      	adds	r3, #36	; 0x24
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7fe f85b 	bl	8016a9c <ld_dword>
 80189e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80189e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80189ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80189ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80189f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80189f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189fa:	789b      	ldrb	r3, [r3, #2]
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d005      	beq.n	8018a0c <find_volume+0x1f0>
 8018a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a02:	789b      	ldrb	r3, [r3, #2]
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	d001      	beq.n	8018a0c <find_volume+0x1f0>
 8018a08:	230d      	movs	r3, #13
 8018a0a:	e14b      	b.n	8018ca4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0e:	789b      	ldrb	r3, [r3, #2]
 8018a10:	461a      	mov	r2, r3
 8018a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a14:	fb02 f303 	mul.w	r3, r2, r3
 8018a18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a28:	895b      	ldrh	r3, [r3, #10]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d008      	beq.n	8018a40 <find_volume+0x224>
 8018a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a30:	895b      	ldrh	r3, [r3, #10]
 8018a32:	461a      	mov	r2, r3
 8018a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a36:	895b      	ldrh	r3, [r3, #10]
 8018a38:	3b01      	subs	r3, #1
 8018a3a:	4013      	ands	r3, r2
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d001      	beq.n	8018a44 <find_volume+0x228>
 8018a40:	230d      	movs	r3, #13
 8018a42:	e12f      	b.n	8018ca4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a46:	3334      	adds	r3, #52	; 0x34
 8018a48:	3311      	adds	r3, #17
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7fe f80e 	bl	8016a6c <ld_word>
 8018a50:	4603      	mov	r3, r0
 8018a52:	461a      	mov	r2, r3
 8018a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a5a:	891b      	ldrh	r3, [r3, #8]
 8018a5c:	f003 030f 	and.w	r3, r3, #15
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d001      	beq.n	8018a6a <find_volume+0x24e>
 8018a66:	230d      	movs	r3, #13
 8018a68:	e11c      	b.n	8018ca4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a6c:	3334      	adds	r3, #52	; 0x34
 8018a6e:	3313      	adds	r3, #19
 8018a70:	4618      	mov	r0, r3
 8018a72:	f7fd fffb 	bl	8016a6c <ld_word>
 8018a76:	4603      	mov	r3, r0
 8018a78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d106      	bne.n	8018a8e <find_volume+0x272>
 8018a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a82:	3334      	adds	r3, #52	; 0x34
 8018a84:	3320      	adds	r3, #32
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7fe f808 	bl	8016a9c <ld_dword>
 8018a8c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8018a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a90:	3334      	adds	r3, #52	; 0x34
 8018a92:	330e      	adds	r3, #14
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7fd ffe9 	bl	8016a6c <ld_word>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d101      	bne.n	8018aa8 <find_volume+0x28c>
 8018aa4:	230d      	movs	r3, #13
 8018aa6:	e0fd      	b.n	8018ca4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018aa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018aac:	4413      	add	r3, r2
 8018aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ab0:	8912      	ldrh	r2, [r2, #8]
 8018ab2:	0912      	lsrs	r2, r2, #4
 8018ab4:	b292      	uxth	r2, r2
 8018ab6:	4413      	add	r3, r2
 8018ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d204      	bcs.n	8018acc <find_volume+0x2b0>
 8018ac2:	230d      	movs	r3, #13
 8018ac4:	e0ee      	b.n	8018ca4 <find_volume+0x488>
 8018ac6:	bf00      	nop
 8018ac8:	20001ac0 	.word	0x20001ac0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad0:	1ad3      	subs	r3, r2, r3
 8018ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ad4:	8952      	ldrh	r2, [r2, #10]
 8018ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ada:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d101      	bne.n	8018ae6 <find_volume+0x2ca>
 8018ae2:	230d      	movs	r3, #13
 8018ae4:	e0de      	b.n	8018ca4 <find_volume+0x488>
		fmt = FS_FAT32;
 8018ae6:	2303      	movs	r3, #3
 8018ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018af2:	4293      	cmp	r3, r2
 8018af4:	d802      	bhi.n	8018afc <find_volume+0x2e0>
 8018af6:	2302      	movs	r3, #2
 8018af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018b02:	4293      	cmp	r3, r2
 8018b04:	d802      	bhi.n	8018b0c <find_volume+0x2f0>
 8018b06:	2301      	movs	r3, #1
 8018b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0e:	1c9a      	adds	r2, r3, #2
 8018b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b12:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8018b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018b18:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018b1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b1e:	441a      	add	r2, r3
 8018b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b22:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8018b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b28:	441a      	add	r2, r3
 8018b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b2c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8018b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b32:	2b03      	cmp	r3, #3
 8018b34:	d11e      	bne.n	8018b74 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b38:	3334      	adds	r3, #52	; 0x34
 8018b3a:	332a      	adds	r3, #42	; 0x2a
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7fd ff95 	bl	8016a6c <ld_word>
 8018b42:	4603      	mov	r3, r0
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d001      	beq.n	8018b4c <find_volume+0x330>
 8018b48:	230d      	movs	r3, #13
 8018b4a:	e0ab      	b.n	8018ca4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b4e:	891b      	ldrh	r3, [r3, #8]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <find_volume+0x33c>
 8018b54:	230d      	movs	r3, #13
 8018b56:	e0a5      	b.n	8018ca4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5a:	3334      	adds	r3, #52	; 0x34
 8018b5c:	332c      	adds	r3, #44	; 0x2c
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7fd ff9c 	bl	8016a9c <ld_dword>
 8018b64:	4602      	mov	r2, r0
 8018b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b68:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b6c:	699b      	ldr	r3, [r3, #24]
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	647b      	str	r3, [r7, #68]	; 0x44
 8018b72:	e01f      	b.n	8018bb4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b76:	891b      	ldrh	r3, [r3, #8]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d101      	bne.n	8018b80 <find_volume+0x364>
 8018b7c:	230d      	movs	r3, #13
 8018b7e:	e091      	b.n	8018ca4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b86:	441a      	add	r2, r3
 8018b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b90:	2b02      	cmp	r3, #2
 8018b92:	d103      	bne.n	8018b9c <find_volume+0x380>
 8018b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b96:	699b      	ldr	r3, [r3, #24]
 8018b98:	005b      	lsls	r3, r3, #1
 8018b9a:	e00a      	b.n	8018bb2 <find_volume+0x396>
 8018b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9e:	699a      	ldr	r2, [r3, #24]
 8018ba0:	4613      	mov	r3, r2
 8018ba2:	005b      	lsls	r3, r3, #1
 8018ba4:	4413      	add	r3, r2
 8018ba6:	085a      	lsrs	r2, r3, #1
 8018ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018baa:	699b      	ldr	r3, [r3, #24]
 8018bac:	f003 0301 	and.w	r3, r3, #1
 8018bb0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018bb2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bb6:	69da      	ldr	r2, [r3, #28]
 8018bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018bba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018bbe:	0a5b      	lsrs	r3, r3, #9
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	d201      	bcs.n	8018bc8 <find_volume+0x3ac>
 8018bc4:	230d      	movs	r3, #13
 8018bc6:	e06d      	b.n	8018ca4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bca:	f04f 32ff 	mov.w	r2, #4294967295
 8018bce:	615a      	str	r2, [r3, #20]
 8018bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bd2:	695a      	ldr	r2, [r3, #20]
 8018bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bd6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8018bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bda:	2280      	movs	r2, #128	; 0x80
 8018bdc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018bde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018be2:	2b03      	cmp	r3, #3
 8018be4:	d149      	bne.n	8018c7a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018be8:	3334      	adds	r3, #52	; 0x34
 8018bea:	3330      	adds	r3, #48	; 0x30
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fd ff3d 	bl	8016a6c <ld_word>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b01      	cmp	r3, #1
 8018bf6:	d140      	bne.n	8018c7a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c00:	f7fe f9e4 	bl	8016fcc <move_window>
 8018c04:	4603      	mov	r3, r0
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d137      	bne.n	8018c7a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8018c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c12:	3334      	adds	r3, #52	; 0x34
 8018c14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f7fd ff27 	bl	8016a6c <ld_word>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	461a      	mov	r2, r3
 8018c22:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d127      	bne.n	8018c7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c2c:	3334      	adds	r3, #52	; 0x34
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7fd ff34 	bl	8016a9c <ld_dword>
 8018c34:	4603      	mov	r3, r0
 8018c36:	4a1d      	ldr	r2, [pc, #116]	; (8018cac <find_volume+0x490>)
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d11e      	bne.n	8018c7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c3e:	3334      	adds	r3, #52	; 0x34
 8018c40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7fd ff29 	bl	8016a9c <ld_dword>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	4a18      	ldr	r2, [pc, #96]	; (8018cb0 <find_volume+0x494>)
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d113      	bne.n	8018c7a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c54:	3334      	adds	r3, #52	; 0x34
 8018c56:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7fd ff1e 	bl	8016a9c <ld_dword>
 8018c60:	4602      	mov	r2, r0
 8018c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c64:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c68:	3334      	adds	r3, #52	; 0x34
 8018c6a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f7fd ff14 	bl	8016a9c <ld_dword>
 8018c74:	4602      	mov	r2, r0
 8018c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c78:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c7c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018c80:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018c82:	4b0c      	ldr	r3, [pc, #48]	; (8018cb4 <find_volume+0x498>)
 8018c84:	881b      	ldrh	r3, [r3, #0]
 8018c86:	3301      	adds	r3, #1
 8018c88:	b29a      	uxth	r2, r3
 8018c8a:	4b0a      	ldr	r3, [pc, #40]	; (8018cb4 <find_volume+0x498>)
 8018c8c:	801a      	strh	r2, [r3, #0]
 8018c8e:	4b09      	ldr	r3, [pc, #36]	; (8018cb4 <find_volume+0x498>)
 8018c90:	881a      	ldrh	r2, [r3, #0]
 8018c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c94:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c98:	4a07      	ldr	r2, [pc, #28]	; (8018cb8 <find_volume+0x49c>)
 8018c9a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018c9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c9e:	f7fe f92d 	bl	8016efc <clear_lock>
#endif
	return FR_OK;
 8018ca2:	2300      	movs	r3, #0
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3758      	adds	r7, #88	; 0x58
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	41615252 	.word	0x41615252
 8018cb0:	61417272 	.word	0x61417272
 8018cb4:	20001ac4 	.word	0x20001ac4
 8018cb8:	20001ae8 	.word	0x20001ae8

08018cbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b084      	sub	sp, #16
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018cc6:	2309      	movs	r3, #9
 8018cc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d01c      	beq.n	8018d0a <validate+0x4e>
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d018      	beq.n	8018d0a <validate+0x4e>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d013      	beq.n	8018d0a <validate+0x4e>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	889a      	ldrh	r2, [r3, #4]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	88db      	ldrh	r3, [r3, #6]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d10c      	bne.n	8018d0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	785b      	ldrb	r3, [r3, #1]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fd fe1a 	bl	8016930 <disk_status>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	f003 0301 	and.w	r3, r3, #1
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d101      	bne.n	8018d0a <validate+0x4e>
			res = FR_OK;
 8018d06:	2300      	movs	r3, #0
 8018d08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018d0a:	7bfb      	ldrb	r3, [r7, #15]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d102      	bne.n	8018d16 <validate+0x5a>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	e000      	b.n	8018d18 <validate+0x5c>
 8018d16:	2300      	movs	r3, #0
 8018d18:	683a      	ldr	r2, [r7, #0]
 8018d1a:	6013      	str	r3, [r2, #0]
	return res;
 8018d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3710      	adds	r7, #16
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
	...

08018d28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b088      	sub	sp, #32
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	4613      	mov	r3, r2
 8018d34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018d3a:	f107 0310 	add.w	r3, r7, #16
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7ff fcd1 	bl	80186e6 <get_ldnumber>
 8018d44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018d46:	69fb      	ldr	r3, [r7, #28]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	da01      	bge.n	8018d50 <f_mount+0x28>
 8018d4c:	230b      	movs	r3, #11
 8018d4e:	e02b      	b.n	8018da8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018d50:	4a17      	ldr	r2, [pc, #92]	; (8018db0 <f_mount+0x88>)
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018d5a:	69bb      	ldr	r3, [r7, #24]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d005      	beq.n	8018d6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018d60:	69b8      	ldr	r0, [r7, #24]
 8018d62:	f7fe f8cb 	bl	8016efc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018d66:	69bb      	ldr	r3, [r7, #24]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d002      	beq.n	8018d78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	2200      	movs	r2, #0
 8018d76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	490d      	ldr	r1, [pc, #52]	; (8018db0 <f_mount+0x88>)
 8018d7c:	69fb      	ldr	r3, [r7, #28]
 8018d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d002      	beq.n	8018d8e <f_mount+0x66>
 8018d88:	79fb      	ldrb	r3, [r7, #7]
 8018d8a:	2b01      	cmp	r3, #1
 8018d8c:	d001      	beq.n	8018d92 <f_mount+0x6a>
 8018d8e:	2300      	movs	r3, #0
 8018d90:	e00a      	b.n	8018da8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018d92:	f107 010c 	add.w	r1, r7, #12
 8018d96:	f107 0308 	add.w	r3, r7, #8
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7ff fd3d 	bl	801881c <find_volume>
 8018da2:	4603      	mov	r3, r0
 8018da4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3720      	adds	r7, #32
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	20001ac0 	.word	0x20001ac0

08018db4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b09a      	sub	sp, #104	; 0x68
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	60f8      	str	r0, [r7, #12]
 8018dbc:	60b9      	str	r1, [r7, #8]
 8018dbe:	4613      	mov	r3, r2
 8018dc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d101      	bne.n	8018dcc <f_open+0x18>
 8018dc8:	2309      	movs	r3, #9
 8018dca:	e1ad      	b.n	8019128 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018dcc:	79fb      	ldrb	r3, [r7, #7]
 8018dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018dd4:	79fa      	ldrb	r2, [r7, #7]
 8018dd6:	f107 0114 	add.w	r1, r7, #20
 8018dda:	f107 0308 	add.w	r3, r7, #8
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7ff fd1c 	bl	801881c <find_volume>
 8018de4:	4603      	mov	r3, r0
 8018de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8018dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	f040 8191 	bne.w	8019116 <f_open+0x362>
		dj.obj.fs = fs;
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018df8:	68ba      	ldr	r2, [r7, #8]
 8018dfa:	f107 0318 	add.w	r3, r7, #24
 8018dfe:	4611      	mov	r1, r2
 8018e00:	4618      	mov	r0, r3
 8018e02:	f7ff fbff 	bl	8018604 <follow_path>
 8018e06:	4603      	mov	r3, r0
 8018e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d11a      	bne.n	8018e4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018e18:	b25b      	sxtb	r3, r3
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	da03      	bge.n	8018e26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8018e1e:	2306      	movs	r3, #6
 8018e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018e24:	e011      	b.n	8018e4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018e26:	79fb      	ldrb	r3, [r7, #7]
 8018e28:	f023 0301 	bic.w	r3, r3, #1
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	bf14      	ite	ne
 8018e30:	2301      	movne	r3, #1
 8018e32:	2300      	moveq	r3, #0
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	461a      	mov	r2, r3
 8018e38:	f107 0318 	add.w	r3, r7, #24
 8018e3c:	4611      	mov	r1, r2
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f7fd ff14 	bl	8016c6c <chk_lock>
 8018e44:	4603      	mov	r3, r0
 8018e46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018e4a:	79fb      	ldrb	r3, [r7, #7]
 8018e4c:	f003 031c 	and.w	r3, r3, #28
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d07f      	beq.n	8018f54 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018e54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d017      	beq.n	8018e8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e60:	2b04      	cmp	r3, #4
 8018e62:	d10e      	bne.n	8018e82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018e64:	f7fd ff5e 	bl	8016d24 <enq_lock>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d006      	beq.n	8018e7c <f_open+0xc8>
 8018e6e:	f107 0318 	add.w	r3, r7, #24
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7ff f838 	bl	8017ee8 <dir_register>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	e000      	b.n	8018e7e <f_open+0xca>
 8018e7c:	2312      	movs	r3, #18
 8018e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018e82:	79fb      	ldrb	r3, [r7, #7]
 8018e84:	f043 0308 	orr.w	r3, r3, #8
 8018e88:	71fb      	strb	r3, [r7, #7]
 8018e8a:	e010      	b.n	8018eae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018e8c:	7fbb      	ldrb	r3, [r7, #30]
 8018e8e:	f003 0311 	and.w	r3, r3, #17
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d003      	beq.n	8018e9e <f_open+0xea>
					res = FR_DENIED;
 8018e96:	2307      	movs	r3, #7
 8018e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018e9c:	e007      	b.n	8018eae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018e9e:	79fb      	ldrb	r3, [r7, #7]
 8018ea0:	f003 0304 	and.w	r3, r3, #4
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d002      	beq.n	8018eae <f_open+0xfa>
 8018ea8:	2308      	movs	r3, #8
 8018eaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d168      	bne.n	8018f88 <f_open+0x1d4>
 8018eb6:	79fb      	ldrb	r3, [r7, #7]
 8018eb8:	f003 0308 	and.w	r3, r3, #8
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d063      	beq.n	8018f88 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018ec0:	f7f8 fcea 	bl	8011898 <get_fattime>
 8018ec4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec8:	330e      	adds	r3, #14
 8018eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fd fe23 	bl	8016b18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ed4:	3316      	adds	r3, #22
 8018ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7fd fe1d 	bl	8016b18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ee0:	330b      	adds	r3, #11
 8018ee2:	2220      	movs	r2, #32
 8018ee4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018eea:	4611      	mov	r1, r2
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7fe fd74 	bl	80179da <ld_clust>
 8018ef2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018ef4:	697b      	ldr	r3, [r7, #20]
 8018ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018ef8:	2200      	movs	r2, #0
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7fe fd8c 	bl	8017a18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f02:	331c      	adds	r3, #28
 8018f04:	2100      	movs	r1, #0
 8018f06:	4618      	mov	r0, r3
 8018f08:	f7fd fe06 	bl	8016b18 <st_dword>
					fs->wflag = 1;
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	2201      	movs	r2, #1
 8018f10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d037      	beq.n	8018f88 <f_open+0x1d4>
						dw = fs->winsect;
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f1c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8018f1e:	f107 0318 	add.w	r3, r7, #24
 8018f22:	2200      	movs	r2, #0
 8018f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7fe fa9f 	bl	801746a <remove_chain>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018f32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d126      	bne.n	8018f88 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fe f844 	bl	8016fcc <move_window>
 8018f44:	4603      	mov	r3, r0
 8018f46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018f4e:	3a01      	subs	r2, #1
 8018f50:	611a      	str	r2, [r3, #16]
 8018f52:	e019      	b.n	8018f88 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d115      	bne.n	8018f88 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018f5c:	7fbb      	ldrb	r3, [r7, #30]
 8018f5e:	f003 0310 	and.w	r3, r3, #16
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d003      	beq.n	8018f6e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018f66:	2304      	movs	r3, #4
 8018f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018f6c:	e00c      	b.n	8018f88 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018f6e:	79fb      	ldrb	r3, [r7, #7]
 8018f70:	f003 0302 	and.w	r3, r3, #2
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d007      	beq.n	8018f88 <f_open+0x1d4>
 8018f78:	7fbb      	ldrb	r3, [r7, #30]
 8018f7a:	f003 0301 	and.w	r3, r3, #1
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d002      	beq.n	8018f88 <f_open+0x1d4>
						res = FR_DENIED;
 8018f82:	2307      	movs	r3, #7
 8018f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018f88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d128      	bne.n	8018fe2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018f90:	79fb      	ldrb	r3, [r7, #7]
 8018f92:	f003 0308 	and.w	r3, r3, #8
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018f9a:	79fb      	ldrb	r3, [r7, #7]
 8018f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fa0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018fa2:	697b      	ldr	r3, [r7, #20]
 8018fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018fb0:	79fb      	ldrb	r3, [r7, #7]
 8018fb2:	f023 0301 	bic.w	r3, r3, #1
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	bf14      	ite	ne
 8018fba:	2301      	movne	r3, #1
 8018fbc:	2300      	moveq	r3, #0
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	f107 0318 	add.w	r3, r7, #24
 8018fc6:	4611      	mov	r1, r2
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f7fd fecd 	bl	8016d68 <inc_lock>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	691b      	ldr	r3, [r3, #16]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d102      	bne.n	8018fe2 <f_open+0x22e>
 8018fdc:	2302      	movs	r3, #2
 8018fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018fe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	f040 8095 	bne.w	8019116 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ff0:	4611      	mov	r1, r2
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fe fcf1 	bl	80179da <ld_clust>
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019000:	331c      	adds	r3, #28
 8019002:	4618      	mov	r0, r3
 8019004:	f7fd fd4a 	bl	8016a9c <ld_dword>
 8019008:	4602      	mov	r2, r0
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	2200      	movs	r2, #0
 8019012:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019014:	697a      	ldr	r2, [r7, #20]
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801901a:	697b      	ldr	r3, [r7, #20]
 801901c:	88da      	ldrh	r2, [r3, #6]
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	79fa      	ldrb	r2, [r7, #7]
 8019026:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	2200      	movs	r2, #0
 801902c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2200      	movs	r2, #0
 8019032:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	2200      	movs	r2, #0
 8019038:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	3330      	adds	r3, #48	; 0x30
 801903e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019042:	2100      	movs	r1, #0
 8019044:	4618      	mov	r0, r3
 8019046:	f7fd fdb4 	bl	8016bb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801904a:	79fb      	ldrb	r3, [r7, #7]
 801904c:	f003 0320 	and.w	r3, r3, #32
 8019050:	2b00      	cmp	r3, #0
 8019052:	d060      	beq.n	8019116 <f_open+0x362>
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	68db      	ldr	r3, [r3, #12]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d05c      	beq.n	8019116 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	68da      	ldr	r2, [r3, #12]
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	895b      	ldrh	r3, [r3, #10]
 8019068:	025b      	lsls	r3, r3, #9
 801906a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	689b      	ldr	r3, [r3, #8]
 8019070:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	68db      	ldr	r3, [r3, #12]
 8019076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019078:	e016      	b.n	80190a8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801907e:	4618      	mov	r0, r3
 8019080:	f7fe f85f 	bl	8017142 <get_fat>
 8019084:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019088:	2b01      	cmp	r3, #1
 801908a:	d802      	bhi.n	8019092 <f_open+0x2de>
 801908c:	2302      	movs	r3, #2
 801908e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019098:	d102      	bne.n	80190a0 <f_open+0x2ec>
 801909a:	2301      	movs	r3, #1
 801909c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80190a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80190a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190a4:	1ad3      	subs	r3, r2, r3
 80190a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80190a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d103      	bne.n	80190b8 <f_open+0x304>
 80190b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80190b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d8e0      	bhi.n	801907a <f_open+0x2c6>
				}
				fp->clust = clst;
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80190bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80190be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d127      	bne.n	8019116 <f_open+0x362>
 80190c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d022      	beq.n	8019116 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7fe f815 	bl	8017104 <clust2sect>
 80190da:	64f8      	str	r0, [r7, #76]	; 0x4c
 80190dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d103      	bne.n	80190ea <f_open+0x336>
						res = FR_INT_ERR;
 80190e2:	2302      	movs	r3, #2
 80190e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80190e8:	e015      	b.n	8019116 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80190ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190ec:	0a5a      	lsrs	r2, r3, #9
 80190ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190f0:	441a      	add	r2, r3
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	7858      	ldrb	r0, [r3, #1]
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	6a1a      	ldr	r2, [r3, #32]
 8019104:	2301      	movs	r3, #1
 8019106:	f7fd fc53 	bl	80169b0 <disk_read>
 801910a:	4603      	mov	r3, r0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d002      	beq.n	8019116 <f_open+0x362>
 8019110:	2301      	movs	r3, #1
 8019112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019116:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801911a:	2b00      	cmp	r3, #0
 801911c:	d002      	beq.n	8019124 <f_open+0x370>
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	2200      	movs	r2, #0
 8019122:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019128:	4618      	mov	r0, r3
 801912a:	3768      	adds	r7, #104	; 0x68
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b08c      	sub	sp, #48	; 0x30
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	607a      	str	r2, [r7, #4]
 801913c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	2200      	movs	r2, #0
 8019146:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	f107 0210 	add.w	r2, r7, #16
 801914e:	4611      	mov	r1, r2
 8019150:	4618      	mov	r0, r3
 8019152:	f7ff fdb3 	bl	8018cbc <validate>
 8019156:	4603      	mov	r3, r0
 8019158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801915c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019160:	2b00      	cmp	r3, #0
 8019162:	d107      	bne.n	8019174 <f_write+0x44>
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	7d5b      	ldrb	r3, [r3, #21]
 8019168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801916c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <f_write+0x4a>
 8019174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019178:	e14b      	b.n	8019412 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	7d1b      	ldrb	r3, [r3, #20]
 801917e:	f003 0302 	and.w	r3, r3, #2
 8019182:	2b00      	cmp	r3, #0
 8019184:	d101      	bne.n	801918a <f_write+0x5a>
 8019186:	2307      	movs	r3, #7
 8019188:	e143      	b.n	8019412 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	699a      	ldr	r2, [r3, #24]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	441a      	add	r2, r3
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	699b      	ldr	r3, [r3, #24]
 8019196:	429a      	cmp	r2, r3
 8019198:	f080 812d 	bcs.w	80193f6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	699b      	ldr	r3, [r3, #24]
 80191a0:	43db      	mvns	r3, r3
 80191a2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80191a4:	e127      	b.n	80193f6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	699b      	ldr	r3, [r3, #24]
 80191aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f040 80e3 	bne.w	801937a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	699b      	ldr	r3, [r3, #24]
 80191b8:	0a5b      	lsrs	r3, r3, #9
 80191ba:	693a      	ldr	r2, [r7, #16]
 80191bc:	8952      	ldrh	r2, [r2, #10]
 80191be:	3a01      	subs	r2, #1
 80191c0:	4013      	ands	r3, r2
 80191c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80191c4:	69bb      	ldr	r3, [r7, #24]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d143      	bne.n	8019252 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	699b      	ldr	r3, [r3, #24]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d10c      	bne.n	80191ec <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	689b      	ldr	r3, [r3, #8]
 80191d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80191d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d11a      	bne.n	8019214 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	2100      	movs	r1, #0
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7fe f9a6 	bl	8017534 <create_chain>
 80191e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80191ea:	e013      	b.n	8019214 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d007      	beq.n	8019204 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	699b      	ldr	r3, [r3, #24]
 80191f8:	4619      	mov	r1, r3
 80191fa:	68f8      	ldr	r0, [r7, #12]
 80191fc:	f7fe fa32 	bl	8017664 <clmt_clust>
 8019200:	62b8      	str	r0, [r7, #40]	; 0x28
 8019202:	e007      	b.n	8019214 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019204:	68fa      	ldr	r2, [r7, #12]
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	69db      	ldr	r3, [r3, #28]
 801920a:	4619      	mov	r1, r3
 801920c:	4610      	mov	r0, r2
 801920e:	f7fe f991 	bl	8017534 <create_chain>
 8019212:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019216:	2b00      	cmp	r3, #0
 8019218:	f000 80f2 	beq.w	8019400 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801921e:	2b01      	cmp	r3, #1
 8019220:	d104      	bne.n	801922c <f_write+0xfc>
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2202      	movs	r2, #2
 8019226:	755a      	strb	r2, [r3, #21]
 8019228:	2302      	movs	r3, #2
 801922a:	e0f2      	b.n	8019412 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019232:	d104      	bne.n	801923e <f_write+0x10e>
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	2201      	movs	r2, #1
 8019238:	755a      	strb	r2, [r3, #21]
 801923a:	2301      	movs	r3, #1
 801923c:	e0e9      	b.n	8019412 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019242:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	689b      	ldr	r3, [r3, #8]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d102      	bne.n	8019252 <f_write+0x122>
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019250:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	7d1b      	ldrb	r3, [r3, #20]
 8019256:	b25b      	sxtb	r3, r3
 8019258:	2b00      	cmp	r3, #0
 801925a:	da18      	bge.n	801928e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	7858      	ldrb	r0, [r3, #1]
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	6a1a      	ldr	r2, [r3, #32]
 801926a:	2301      	movs	r3, #1
 801926c:	f7fd fbc0 	bl	80169f0 <disk_write>
 8019270:	4603      	mov	r3, r0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d004      	beq.n	8019280 <f_write+0x150>
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	2201      	movs	r2, #1
 801927a:	755a      	strb	r2, [r3, #21]
 801927c:	2301      	movs	r3, #1
 801927e:	e0c8      	b.n	8019412 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	7d1b      	ldrb	r3, [r3, #20]
 8019284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019288:	b2da      	uxtb	r2, r3
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801928e:	693a      	ldr	r2, [r7, #16]
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	69db      	ldr	r3, [r3, #28]
 8019294:	4619      	mov	r1, r3
 8019296:	4610      	mov	r0, r2
 8019298:	f7fd ff34 	bl	8017104 <clust2sect>
 801929c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d104      	bne.n	80192ae <f_write+0x17e>
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	2202      	movs	r2, #2
 80192a8:	755a      	strb	r2, [r3, #21]
 80192aa:	2302      	movs	r3, #2
 80192ac:	e0b1      	b.n	8019412 <f_write+0x2e2>
			sect += csect;
 80192ae:	697a      	ldr	r2, [r7, #20]
 80192b0:	69bb      	ldr	r3, [r7, #24]
 80192b2:	4413      	add	r3, r2
 80192b4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	0a5b      	lsrs	r3, r3, #9
 80192ba:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80192bc:	6a3b      	ldr	r3, [r7, #32]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d03c      	beq.n	801933c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80192c2:	69ba      	ldr	r2, [r7, #24]
 80192c4:	6a3b      	ldr	r3, [r7, #32]
 80192c6:	4413      	add	r3, r2
 80192c8:	693a      	ldr	r2, [r7, #16]
 80192ca:	8952      	ldrh	r2, [r2, #10]
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d905      	bls.n	80192dc <f_write+0x1ac>
					cc = fs->csize - csect;
 80192d0:	693b      	ldr	r3, [r7, #16]
 80192d2:	895b      	ldrh	r3, [r3, #10]
 80192d4:	461a      	mov	r2, r3
 80192d6:	69bb      	ldr	r3, [r7, #24]
 80192d8:	1ad3      	subs	r3, r2, r3
 80192da:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80192dc:	693b      	ldr	r3, [r7, #16]
 80192de:	7858      	ldrb	r0, [r3, #1]
 80192e0:	6a3b      	ldr	r3, [r7, #32]
 80192e2:	697a      	ldr	r2, [r7, #20]
 80192e4:	69f9      	ldr	r1, [r7, #28]
 80192e6:	f7fd fb83 	bl	80169f0 <disk_write>
 80192ea:	4603      	mov	r3, r0
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d004      	beq.n	80192fa <f_write+0x1ca>
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	2201      	movs	r2, #1
 80192f4:	755a      	strb	r2, [r3, #21]
 80192f6:	2301      	movs	r3, #1
 80192f8:	e08b      	b.n	8019412 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	6a1a      	ldr	r2, [r3, #32]
 80192fe:	697b      	ldr	r3, [r7, #20]
 8019300:	1ad3      	subs	r3, r2, r3
 8019302:	6a3a      	ldr	r2, [r7, #32]
 8019304:	429a      	cmp	r2, r3
 8019306:	d915      	bls.n	8019334 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	6a1a      	ldr	r2, [r3, #32]
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	1ad3      	subs	r3, r2, r3
 8019316:	025b      	lsls	r3, r3, #9
 8019318:	69fa      	ldr	r2, [r7, #28]
 801931a:	4413      	add	r3, r2
 801931c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019320:	4619      	mov	r1, r3
 8019322:	f7fd fc25 	bl	8016b70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	7d1b      	ldrb	r3, [r3, #20]
 801932a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801932e:	b2da      	uxtb	r2, r3
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019334:	6a3b      	ldr	r3, [r7, #32]
 8019336:	025b      	lsls	r3, r3, #9
 8019338:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801933a:	e03f      	b.n	80193bc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	6a1b      	ldr	r3, [r3, #32]
 8019340:	697a      	ldr	r2, [r7, #20]
 8019342:	429a      	cmp	r2, r3
 8019344:	d016      	beq.n	8019374 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	699a      	ldr	r2, [r3, #24]
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801934e:	429a      	cmp	r2, r3
 8019350:	d210      	bcs.n	8019374 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	7858      	ldrb	r0, [r3, #1]
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801935c:	2301      	movs	r3, #1
 801935e:	697a      	ldr	r2, [r7, #20]
 8019360:	f7fd fb26 	bl	80169b0 <disk_read>
 8019364:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019366:	2b00      	cmp	r3, #0
 8019368:	d004      	beq.n	8019374 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	2201      	movs	r2, #1
 801936e:	755a      	strb	r2, [r3, #21]
 8019370:	2301      	movs	r3, #1
 8019372:	e04e      	b.n	8019412 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	697a      	ldr	r2, [r7, #20]
 8019378:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	699b      	ldr	r3, [r3, #24]
 801937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019382:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019386:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	429a      	cmp	r2, r3
 801938e:	d901      	bls.n	8019394 <f_write+0x264>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	699b      	ldr	r3, [r3, #24]
 801939e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80193a2:	4413      	add	r3, r2
 80193a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193a6:	69f9      	ldr	r1, [r7, #28]
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7fd fbe1 	bl	8016b70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	7d1b      	ldrb	r3, [r3, #20]
 80193b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80193b6:	b2da      	uxtb	r2, r3
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80193bc:	69fa      	ldr	r2, [r7, #28]
 80193be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c0:	4413      	add	r3, r2
 80193c2:	61fb      	str	r3, [r7, #28]
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	699a      	ldr	r2, [r3, #24]
 80193c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ca:	441a      	add	r2, r3
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	619a      	str	r2, [r3, #24]
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	68da      	ldr	r2, [r3, #12]
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	699b      	ldr	r3, [r3, #24]
 80193d8:	429a      	cmp	r2, r3
 80193da:	bf38      	it	cc
 80193dc:	461a      	movcc	r2, r3
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	60da      	str	r2, [r3, #12]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	681a      	ldr	r2, [r3, #0]
 80193e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e8:	441a      	add	r2, r3
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	601a      	str	r2, [r3, #0]
 80193ee:	687a      	ldr	r2, [r7, #4]
 80193f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f2:	1ad3      	subs	r3, r2, r3
 80193f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	f47f aed4 	bne.w	80191a6 <f_write+0x76>
 80193fe:	e000      	b.n	8019402 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019400:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	7d1b      	ldrb	r3, [r3, #20]
 8019406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801940a:	b2da      	uxtb	r2, r3
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019410:	2300      	movs	r3, #0
}
 8019412:	4618      	mov	r0, r3
 8019414:	3730      	adds	r7, #48	; 0x30
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}

0801941a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801941a:	b580      	push	{r7, lr}
 801941c:	b086      	sub	sp, #24
 801941e:	af00      	add	r7, sp, #0
 8019420:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f107 0208 	add.w	r2, r7, #8
 8019428:	4611      	mov	r1, r2
 801942a:	4618      	mov	r0, r3
 801942c:	f7ff fc46 	bl	8018cbc <validate>
 8019430:	4603      	mov	r3, r0
 8019432:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019434:	7dfb      	ldrb	r3, [r7, #23]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d168      	bne.n	801950c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	7d1b      	ldrb	r3, [r3, #20]
 801943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019442:	2b00      	cmp	r3, #0
 8019444:	d062      	beq.n	801950c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	7d1b      	ldrb	r3, [r3, #20]
 801944a:	b25b      	sxtb	r3, r3
 801944c:	2b00      	cmp	r3, #0
 801944e:	da15      	bge.n	801947c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	7858      	ldrb	r0, [r3, #1]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6a1a      	ldr	r2, [r3, #32]
 801945e:	2301      	movs	r3, #1
 8019460:	f7fd fac6 	bl	80169f0 <disk_write>
 8019464:	4603      	mov	r3, r0
 8019466:	2b00      	cmp	r3, #0
 8019468:	d001      	beq.n	801946e <f_sync+0x54>
 801946a:	2301      	movs	r3, #1
 801946c:	e04f      	b.n	801950e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	7d1b      	ldrb	r3, [r3, #20]
 8019472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019476:	b2da      	uxtb	r2, r3
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801947c:	f7f8 fa0c 	bl	8011898 <get_fattime>
 8019480:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019488:	4619      	mov	r1, r3
 801948a:	4610      	mov	r0, r2
 801948c:	f7fd fd9e 	bl	8016fcc <move_window>
 8019490:	4603      	mov	r3, r0
 8019492:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019494:	7dfb      	ldrb	r3, [r7, #23]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d138      	bne.n	801950c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801949e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	330b      	adds	r3, #11
 80194a4:	781a      	ldrb	r2, [r3, #0]
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	330b      	adds	r3, #11
 80194aa:	f042 0220 	orr.w	r2, r2, #32
 80194ae:	b2d2      	uxtb	r2, r2
 80194b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6818      	ldr	r0, [r3, #0]
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	689b      	ldr	r3, [r3, #8]
 80194ba:	461a      	mov	r2, r3
 80194bc:	68f9      	ldr	r1, [r7, #12]
 80194be:	f7fe faab 	bl	8017a18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	f103 021c 	add.w	r2, r3, #28
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	68db      	ldr	r3, [r3, #12]
 80194cc:	4619      	mov	r1, r3
 80194ce:	4610      	mov	r0, r2
 80194d0:	f7fd fb22 	bl	8016b18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	3316      	adds	r3, #22
 80194d8:	6939      	ldr	r1, [r7, #16]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7fd fb1c 	bl	8016b18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	3312      	adds	r3, #18
 80194e4:	2100      	movs	r1, #0
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7fd fafb 	bl	8016ae2 <st_word>
					fs->wflag = 1;
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	2201      	movs	r2, #1
 80194f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7fd fd97 	bl	8017028 <sync_fs>
 80194fa:	4603      	mov	r3, r0
 80194fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	7d1b      	ldrb	r3, [r3, #20]
 8019502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019506:	b2da      	uxtb	r2, r3
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801950c:	7dfb      	ldrb	r3, [r7, #23]
}
 801950e:	4618      	mov	r0, r3
 8019510:	3718      	adds	r7, #24
 8019512:	46bd      	mov	sp, r7
 8019514:	bd80      	pop	{r7, pc}

08019516 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019516:	b580      	push	{r7, lr}
 8019518:	b084      	sub	sp, #16
 801951a:	af00      	add	r7, sp, #0
 801951c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	f7ff ff7b 	bl	801941a <f_sync>
 8019524:	4603      	mov	r3, r0
 8019526:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019528:	7bfb      	ldrb	r3, [r7, #15]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d118      	bne.n	8019560 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	f107 0208 	add.w	r2, r7, #8
 8019534:	4611      	mov	r1, r2
 8019536:	4618      	mov	r0, r3
 8019538:	f7ff fbc0 	bl	8018cbc <validate>
 801953c:	4603      	mov	r3, r0
 801953e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019540:	7bfb      	ldrb	r3, [r7, #15]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d10c      	bne.n	8019560 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	691b      	ldr	r3, [r3, #16]
 801954a:	4618      	mov	r0, r3
 801954c:	f7fd fc9a 	bl	8016e84 <dec_lock>
 8019550:	4603      	mov	r3, r0
 8019552:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019554:	7bfb      	ldrb	r3, [r7, #15]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d102      	bne.n	8019560 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2200      	movs	r2, #0
 801955e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019560:	7bfb      	ldrb	r3, [r7, #15]
}
 8019562:	4618      	mov	r0, r3
 8019564:	3710      	adds	r7, #16
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801956a:	b580      	push	{r7, lr}
 801956c:	b090      	sub	sp, #64	; 0x40
 801956e:	af00      	add	r7, sp, #0
 8019570:	6078      	str	r0, [r7, #4]
 8019572:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019574:	f107 0108 	add.w	r1, r7, #8
 8019578:	1d3b      	adds	r3, r7, #4
 801957a:	2200      	movs	r2, #0
 801957c:	4618      	mov	r0, r3
 801957e:	f7ff f94d 	bl	801881c <find_volume>
 8019582:	4603      	mov	r3, r0
 8019584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801958c:	2b00      	cmp	r3, #0
 801958e:	d11f      	bne.n	80195d0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	f107 0308 	add.w	r3, r7, #8
 8019596:	4611      	mov	r1, r2
 8019598:	4618      	mov	r0, r3
 801959a:	f7ff f833 	bl	8018604 <follow_path>
 801959e:	4603      	mov	r3, r0
 80195a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80195a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d111      	bne.n	80195d0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80195ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80195b0:	b25b      	sxtb	r3, r3
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	da03      	bge.n	80195be <f_stat+0x54>
				res = FR_INVALID_NAME;
 80195b6:	2306      	movs	r3, #6
 80195b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80195bc:	e008      	b.n	80195d0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d005      	beq.n	80195d0 <f_stat+0x66>
 80195c4:	f107 0308 	add.w	r3, r7, #8
 80195c8:	6839      	ldr	r1, [r7, #0]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fe fd84 	bl	80180d8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80195d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3740      	adds	r7, #64	; 0x40
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}

080195dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80195dc:	b480      	push	{r7}
 80195de:	b087      	sub	sp, #28
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	60f8      	str	r0, [r7, #12]
 80195e4:	60b9      	str	r1, [r7, #8]
 80195e6:	4613      	mov	r3, r2
 80195e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80195ea:	2301      	movs	r3, #1
 80195ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80195ee:	2300      	movs	r3, #0
 80195f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80195f2:	4b1f      	ldr	r3, [pc, #124]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 80195f4:	7a5b      	ldrb	r3, [r3, #9]
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d131      	bne.n	8019660 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80195fc:	4b1c      	ldr	r3, [pc, #112]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 80195fe:	7a5b      	ldrb	r3, [r3, #9]
 8019600:	b2db      	uxtb	r3, r3
 8019602:	461a      	mov	r2, r3
 8019604:	4b1a      	ldr	r3, [pc, #104]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 8019606:	2100      	movs	r1, #0
 8019608:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801960a:	4b19      	ldr	r3, [pc, #100]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 801960c:	7a5b      	ldrb	r3, [r3, #9]
 801960e:	b2db      	uxtb	r3, r3
 8019610:	4a17      	ldr	r2, [pc, #92]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 8019612:	009b      	lsls	r3, r3, #2
 8019614:	4413      	add	r3, r2
 8019616:	68fa      	ldr	r2, [r7, #12]
 8019618:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801961a:	4b15      	ldr	r3, [pc, #84]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 801961c:	7a5b      	ldrb	r3, [r3, #9]
 801961e:	b2db      	uxtb	r3, r3
 8019620:	461a      	mov	r2, r3
 8019622:	4b13      	ldr	r3, [pc, #76]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 8019624:	4413      	add	r3, r2
 8019626:	79fa      	ldrb	r2, [r7, #7]
 8019628:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801962a:	4b11      	ldr	r3, [pc, #68]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 801962c:	7a5b      	ldrb	r3, [r3, #9]
 801962e:	b2db      	uxtb	r3, r3
 8019630:	1c5a      	adds	r2, r3, #1
 8019632:	b2d1      	uxtb	r1, r2
 8019634:	4a0e      	ldr	r2, [pc, #56]	; (8019670 <FATFS_LinkDriverEx+0x94>)
 8019636:	7251      	strb	r1, [r2, #9]
 8019638:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801963a:	7dbb      	ldrb	r3, [r7, #22]
 801963c:	3330      	adds	r3, #48	; 0x30
 801963e:	b2da      	uxtb	r2, r3
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	3301      	adds	r3, #1
 8019648:	223a      	movs	r2, #58	; 0x3a
 801964a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	3302      	adds	r3, #2
 8019650:	222f      	movs	r2, #47	; 0x2f
 8019652:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	3303      	adds	r3, #3
 8019658:	2200      	movs	r2, #0
 801965a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801965c:	2300      	movs	r3, #0
 801965e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019660:	7dfb      	ldrb	r3, [r7, #23]
}
 8019662:	4618      	mov	r0, r3
 8019664:	371c      	adds	r7, #28
 8019666:	46bd      	mov	sp, r7
 8019668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966c:	4770      	bx	lr
 801966e:	bf00      	nop
 8019670:	20001ce8 	.word	0x20001ce8

08019674 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801967e:	2200      	movs	r2, #0
 8019680:	6839      	ldr	r1, [r7, #0]
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	f7ff ffaa 	bl	80195dc <FATFS_LinkDriverEx>
 8019688:	4603      	mov	r3, r0
}
 801968a:	4618      	mov	r0, r3
 801968c:	3708      	adds	r7, #8
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
	...

08019694 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019694:	b480      	push	{r7}
 8019696:	b085      	sub	sp, #20
 8019698:	af00      	add	r7, sp, #0
 801969a:	4603      	mov	r3, r0
 801969c:	6039      	str	r1, [r7, #0]
 801969e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	2b7f      	cmp	r3, #127	; 0x7f
 80196a4:	d802      	bhi.n	80196ac <ff_convert+0x18>
		c = chr;
 80196a6:	88fb      	ldrh	r3, [r7, #6]
 80196a8:	81fb      	strh	r3, [r7, #14]
 80196aa:	e025      	b.n	80196f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d00b      	beq.n	80196ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80196b2:	88fb      	ldrh	r3, [r7, #6]
 80196b4:	2bff      	cmp	r3, #255	; 0xff
 80196b6:	d805      	bhi.n	80196c4 <ff_convert+0x30>
 80196b8:	88fb      	ldrh	r3, [r7, #6]
 80196ba:	3b80      	subs	r3, #128	; 0x80
 80196bc:	4a12      	ldr	r2, [pc, #72]	; (8019708 <ff_convert+0x74>)
 80196be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80196c2:	e000      	b.n	80196c6 <ff_convert+0x32>
 80196c4:	2300      	movs	r3, #0
 80196c6:	81fb      	strh	r3, [r7, #14]
 80196c8:	e016      	b.n	80196f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80196ca:	2300      	movs	r3, #0
 80196cc:	81fb      	strh	r3, [r7, #14]
 80196ce:	e009      	b.n	80196e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80196d0:	89fb      	ldrh	r3, [r7, #14]
 80196d2:	4a0d      	ldr	r2, [pc, #52]	; (8019708 <ff_convert+0x74>)
 80196d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80196d8:	88fa      	ldrh	r2, [r7, #6]
 80196da:	429a      	cmp	r2, r3
 80196dc:	d006      	beq.n	80196ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80196de:	89fb      	ldrh	r3, [r7, #14]
 80196e0:	3301      	adds	r3, #1
 80196e2:	81fb      	strh	r3, [r7, #14]
 80196e4:	89fb      	ldrh	r3, [r7, #14]
 80196e6:	2b7f      	cmp	r3, #127	; 0x7f
 80196e8:	d9f2      	bls.n	80196d0 <ff_convert+0x3c>
 80196ea:	e000      	b.n	80196ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80196ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80196ee:	89fb      	ldrh	r3, [r7, #14]
 80196f0:	3380      	adds	r3, #128	; 0x80
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80196f8:	89fb      	ldrh	r3, [r7, #14]
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3714      	adds	r7, #20
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop
 8019708:	080215fc 	.word	0x080215fc

0801970c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801970c:	b480      	push	{r7}
 801970e:	b087      	sub	sp, #28
 8019710:	af00      	add	r7, sp, #0
 8019712:	4603      	mov	r3, r0
 8019714:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8019716:	88fb      	ldrh	r3, [r7, #6]
 8019718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801971c:	d201      	bcs.n	8019722 <ff_wtoupper+0x16>
 801971e:	4b3e      	ldr	r3, [pc, #248]	; (8019818 <ff_wtoupper+0x10c>)
 8019720:	e000      	b.n	8019724 <ff_wtoupper+0x18>
 8019722:	4b3e      	ldr	r3, [pc, #248]	; (801981c <ff_wtoupper+0x110>)
 8019724:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019726:	697b      	ldr	r3, [r7, #20]
 8019728:	1c9a      	adds	r2, r3, #2
 801972a:	617a      	str	r2, [r7, #20]
 801972c:	881b      	ldrh	r3, [r3, #0]
 801972e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019730:	8a7b      	ldrh	r3, [r7, #18]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d068      	beq.n	8019808 <ff_wtoupper+0xfc>
 8019736:	88fa      	ldrh	r2, [r7, #6]
 8019738:	8a7b      	ldrh	r3, [r7, #18]
 801973a:	429a      	cmp	r2, r3
 801973c:	d364      	bcc.n	8019808 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	1c9a      	adds	r2, r3, #2
 8019742:	617a      	str	r2, [r7, #20]
 8019744:	881b      	ldrh	r3, [r3, #0]
 8019746:	823b      	strh	r3, [r7, #16]
 8019748:	8a3b      	ldrh	r3, [r7, #16]
 801974a:	0a1b      	lsrs	r3, r3, #8
 801974c:	81fb      	strh	r3, [r7, #14]
 801974e:	8a3b      	ldrh	r3, [r7, #16]
 8019750:	b2db      	uxtb	r3, r3
 8019752:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019754:	88fa      	ldrh	r2, [r7, #6]
 8019756:	8a79      	ldrh	r1, [r7, #18]
 8019758:	8a3b      	ldrh	r3, [r7, #16]
 801975a:	440b      	add	r3, r1
 801975c:	429a      	cmp	r2, r3
 801975e:	da49      	bge.n	80197f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8019760:	89fb      	ldrh	r3, [r7, #14]
 8019762:	2b08      	cmp	r3, #8
 8019764:	d84f      	bhi.n	8019806 <ff_wtoupper+0xfa>
 8019766:	a201      	add	r2, pc, #4	; (adr r2, 801976c <ff_wtoupper+0x60>)
 8019768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801976c:	08019791 	.word	0x08019791
 8019770:	080197a3 	.word	0x080197a3
 8019774:	080197b9 	.word	0x080197b9
 8019778:	080197c1 	.word	0x080197c1
 801977c:	080197c9 	.word	0x080197c9
 8019780:	080197d1 	.word	0x080197d1
 8019784:	080197d9 	.word	0x080197d9
 8019788:	080197e1 	.word	0x080197e1
 801978c:	080197e9 	.word	0x080197e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019790:	88fa      	ldrh	r2, [r7, #6]
 8019792:	8a7b      	ldrh	r3, [r7, #18]
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	005b      	lsls	r3, r3, #1
 8019798:	697a      	ldr	r2, [r7, #20]
 801979a:	4413      	add	r3, r2
 801979c:	881b      	ldrh	r3, [r3, #0]
 801979e:	80fb      	strh	r3, [r7, #6]
 80197a0:	e027      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80197a2:	88fa      	ldrh	r2, [r7, #6]
 80197a4:	8a7b      	ldrh	r3, [r7, #18]
 80197a6:	1ad3      	subs	r3, r2, r3
 80197a8:	b29b      	uxth	r3, r3
 80197aa:	f003 0301 	and.w	r3, r3, #1
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	88fa      	ldrh	r2, [r7, #6]
 80197b2:	1ad3      	subs	r3, r2, r3
 80197b4:	80fb      	strh	r3, [r7, #6]
 80197b6:	e01c      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80197b8:	88fb      	ldrh	r3, [r7, #6]
 80197ba:	3b10      	subs	r3, #16
 80197bc:	80fb      	strh	r3, [r7, #6]
 80197be:	e018      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80197c0:	88fb      	ldrh	r3, [r7, #6]
 80197c2:	3b20      	subs	r3, #32
 80197c4:	80fb      	strh	r3, [r7, #6]
 80197c6:	e014      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80197c8:	88fb      	ldrh	r3, [r7, #6]
 80197ca:	3b30      	subs	r3, #48	; 0x30
 80197cc:	80fb      	strh	r3, [r7, #6]
 80197ce:	e010      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80197d0:	88fb      	ldrh	r3, [r7, #6]
 80197d2:	3b1a      	subs	r3, #26
 80197d4:	80fb      	strh	r3, [r7, #6]
 80197d6:	e00c      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80197d8:	88fb      	ldrh	r3, [r7, #6]
 80197da:	3308      	adds	r3, #8
 80197dc:	80fb      	strh	r3, [r7, #6]
 80197de:	e008      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80197e0:	88fb      	ldrh	r3, [r7, #6]
 80197e2:	3b50      	subs	r3, #80	; 0x50
 80197e4:	80fb      	strh	r3, [r7, #6]
 80197e6:	e004      	b.n	80197f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80197e8:	88fb      	ldrh	r3, [r7, #6]
 80197ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80197ee:	80fb      	strh	r3, [r7, #6]
 80197f0:	bf00      	nop
			}
			break;
 80197f2:	e008      	b.n	8019806 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80197f4:	89fb      	ldrh	r3, [r7, #14]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d195      	bne.n	8019726 <ff_wtoupper+0x1a>
 80197fa:	8a3b      	ldrh	r3, [r7, #16]
 80197fc:	005b      	lsls	r3, r3, #1
 80197fe:	697a      	ldr	r2, [r7, #20]
 8019800:	4413      	add	r3, r2
 8019802:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8019804:	e78f      	b.n	8019726 <ff_wtoupper+0x1a>
			break;
 8019806:	bf00      	nop
	}

	return chr;
 8019808:	88fb      	ldrh	r3, [r7, #6]
}
 801980a:	4618      	mov	r0, r3
 801980c:	371c      	adds	r7, #28
 801980e:	46bd      	mov	sp, r7
 8019810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019814:	4770      	bx	lr
 8019816:	bf00      	nop
 8019818:	080216fc 	.word	0x080216fc
 801981c:	080218f0 	.word	0x080218f0

08019820 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b082      	sub	sp, #8
 8019824:	af00      	add	r7, sp, #0
 8019826:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8019828:	2201      	movs	r2, #1
 801982a:	6879      	ldr	r1, [r7, #4]
 801982c:	480e      	ldr	r0, [pc, #56]	; (8019868 <Mount_SD+0x48>)
 801982e:	f7ff fa7b 	bl	8018d28 <f_mount>
 8019832:	4603      	mov	r3, r0
 8019834:	461a      	mov	r2, r3
 8019836:	4b0d      	ldr	r3, [pc, #52]	; (801986c <Mount_SD+0x4c>)
 8019838:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801983a:	4b0c      	ldr	r3, [pc, #48]	; (801986c <Mount_SD+0x4c>)
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d006      	beq.n	8019850 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8019842:	2300      	movs	r3, #0
 8019844:	2b00      	cmp	r3, #0
 8019846:	d009      	beq.n	801985c <Mount_SD+0x3c>
 8019848:	4809      	ldr	r0, [pc, #36]	; (8019870 <Mount_SD+0x50>)
 801984a:	f002 fbd5 	bl	801bff8 <puts>
 801984e:	e005      	b.n	801985c <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8019850:	2300      	movs	r3, #0
 8019852:	2b00      	cmp	r3, #0
 8019854:	d002      	beq.n	801985c <Mount_SD+0x3c>
 8019856:	4807      	ldr	r0, [pc, #28]	; (8019874 <Mount_SD+0x54>)
 8019858:	f002 fbce 	bl	801bff8 <puts>

	return fresult;
 801985c:	4b03      	ldr	r3, [pc, #12]	; (801986c <Mount_SD+0x4c>)
 801985e:	781b      	ldrb	r3, [r3, #0]
}
 8019860:	4618      	mov	r0, r3
 8019862:	3708      	adds	r7, #8
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}
 8019868:	20001cf4 	.word	0x20001cf4
 801986c:	20002270 	.word	0x20002270
 8019870:	08020d54 	.word	0x08020d54
 8019874:	08020d74 	.word	0x08020d74

08019878 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8019880:	2201      	movs	r2, #1
 8019882:	6879      	ldr	r1, [r7, #4]
 8019884:	2000      	movs	r0, #0
 8019886:	f7ff fa4f 	bl	8018d28 <f_mount>
 801988a:	4603      	mov	r3, r0
 801988c:	461a      	mov	r2, r3
 801988e:	4b0b      	ldr	r3, [pc, #44]	; (80198bc <Unmount_SD+0x44>)
 8019890:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8019892:	4b0a      	ldr	r3, [pc, #40]	; (80198bc <Unmount_SD+0x44>)
 8019894:	781b      	ldrb	r3, [r3, #0]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d106      	bne.n	80198a8 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 801989a:	2300      	movs	r3, #0
 801989c:	2b00      	cmp	r3, #0
 801989e:	d009      	beq.n	80198b4 <Unmount_SD+0x3c>
 80198a0:	4807      	ldr	r0, [pc, #28]	; (80198c0 <Unmount_SD+0x48>)
 80198a2:	f002 fba9 	bl	801bff8 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 80198a6:	e005      	b.n	80198b4 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 80198a8:	2300      	movs	r3, #0
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d002      	beq.n	80198b4 <Unmount_SD+0x3c>
 80198ae:	4805      	ldr	r0, [pc, #20]	; (80198c4 <Unmount_SD+0x4c>)
 80198b0:	f002 fba2 	bl	801bff8 <puts>
}
 80198b4:	bf00      	nop
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	20002270 	.word	0x20002270
 80198c0:	08020d94 	.word	0x08020d94
 80198c4:	08020db8 	.word	0x08020db8

080198c8 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b0a8      	sub	sp, #160	; 0xa0
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat (name, &fno);
 80198d0:	4941      	ldr	r1, [pc, #260]	; (80199d8 <Create_File+0x110>)
 80198d2:	6878      	ldr	r0, [r7, #4]
 80198d4:	f7ff fe49 	bl	801956a <f_stat>
 80198d8:	4603      	mov	r3, r0
 80198da:	461a      	mov	r2, r3
 80198dc:	4b3f      	ldr	r3, [pc, #252]	; (80199dc <Create_File+0x114>)
 80198de:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80198e0:	4b3e      	ldr	r3, [pc, #248]	; (80199dc <Create_File+0x114>)
 80198e2:	781b      	ldrb	r3, [r3, #0]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d114      	bne.n	8019912 <Create_File+0x4a>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 80198e8:	4b3d      	ldr	r3, [pc, #244]	; (80199e0 <Create_File+0x118>)
 80198ea:	2201      	movs	r2, #1
 80198ec:	701a      	strb	r2, [r3, #0]

		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80198ee:	f107 0308 	add.w	r3, r7, #8
 80198f2:	687a      	ldr	r2, [r7, #4]
 80198f4:	493b      	ldr	r1, [pc, #236]	; (80199e4 <Create_File+0x11c>)
 80198f6:	4618      	mov	r0, r3
 80198f8:	f002 fb9c 	bl	801c034 <siprintf>
		if(sdioPrints) printf(buf);
 80198fc:	2300      	movs	r3, #0
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d004      	beq.n	801990c <Create_File+0x44>
 8019902:	f107 0308 	add.w	r3, r7, #8
 8019906:	4618      	mov	r0, r3
 8019908:	f002 faf0 	bl	801beec <iprintf>

	    return fresult;
 801990c:	4b33      	ldr	r3, [pc, #204]	; (80199dc <Create_File+0x114>)
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	e05d      	b.n	80199ce <Create_File+0x106>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8019912:	220b      	movs	r2, #11
 8019914:	6879      	ldr	r1, [r7, #4]
 8019916:	4834      	ldr	r0, [pc, #208]	; (80199e8 <Create_File+0x120>)
 8019918:	f7ff fa4c 	bl	8018db4 <f_open>
 801991c:	4603      	mov	r3, r0
 801991e:	461a      	mov	r2, r3
 8019920:	4b2e      	ldr	r3, [pc, #184]	; (80199dc <Create_File+0x114>)
 8019922:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019924:	4b2d      	ldr	r3, [pc, #180]	; (80199dc <Create_File+0x114>)
 8019926:	781b      	ldrb	r3, [r3, #0]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d013      	beq.n	8019954 <Create_File+0x8c>
		{

			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 801992c:	4b2b      	ldr	r3, [pc, #172]	; (80199dc <Create_File+0x114>)
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	461a      	mov	r2, r3
 8019932:	f107 0008 	add.w	r0, r7, #8
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	492c      	ldr	r1, [pc, #176]	; (80199ec <Create_File+0x124>)
 801993a:	f002 fb7b 	bl	801c034 <siprintf>
			if(sdioPrints) printf(buf);
 801993e:	2300      	movs	r3, #0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d004      	beq.n	801994e <Create_File+0x86>
 8019944:	f107 0308 	add.w	r3, r7, #8
 8019948:	4618      	mov	r0, r3
 801994a:	f002 facf 	bl	801beec <iprintf>

		    return fresult;
 801994e:	4b23      	ldr	r3, [pc, #140]	; (80199dc <Create_File+0x114>)
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	e03c      	b.n	80199ce <Create_File+0x106>
		}
		else
		{

			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8019954:	f107 0308 	add.w	r3, r7, #8
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	4925      	ldr	r1, [pc, #148]	; (80199f0 <Create_File+0x128>)
 801995c:	4618      	mov	r0, r3
 801995e:	f002 fb69 	bl	801c034 <siprintf>
			if(sdioPrints) printf(buf);
 8019962:	2300      	movs	r3, #0
 8019964:	2b00      	cmp	r3, #0
 8019966:	d004      	beq.n	8019972 <Create_File+0xaa>
 8019968:	f107 0308 	add.w	r3, r7, #8
 801996c:	4618      	mov	r0, r3
 801996e:	f002 fabd 	bl	801beec <iprintf>

		}

		fresult = f_close(&fil);
 8019972:	481d      	ldr	r0, [pc, #116]	; (80199e8 <Create_File+0x120>)
 8019974:	f7ff fdcf 	bl	8019516 <f_close>
 8019978:	4603      	mov	r3, r0
 801997a:	461a      	mov	r2, r3
 801997c:	4b17      	ldr	r3, [pc, #92]	; (80199dc <Create_File+0x114>)
 801997e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019980:	4b16      	ldr	r3, [pc, #88]	; (80199dc <Create_File+0x114>)
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d011      	beq.n	80199ac <Create_File+0xe4>
		{

			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8019988:	4b14      	ldr	r3, [pc, #80]	; (80199dc <Create_File+0x114>)
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	461a      	mov	r2, r3
 801998e:	f107 0008 	add.w	r0, r7, #8
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	4917      	ldr	r1, [pc, #92]	; (80199f4 <Create_File+0x12c>)
 8019996:	f002 fb4d 	bl	801c034 <siprintf>
			if(sdioPrints) printf(buf);
 801999a:	2300      	movs	r3, #0
 801999c:	2b00      	cmp	r3, #0
 801999e:	d014      	beq.n	80199ca <Create_File+0x102>
 80199a0:	f107 0308 	add.w	r3, r7, #8
 80199a4:	4618      	mov	r0, r3
 80199a6:	f002 faa1 	bl	801beec <iprintf>
 80199aa:	e00e      	b.n	80199ca <Create_File+0x102>

		}
		else
		{

			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80199ac:	f107 0308 	add.w	r3, r7, #8
 80199b0:	687a      	ldr	r2, [r7, #4]
 80199b2:	4911      	ldr	r1, [pc, #68]	; (80199f8 <Create_File+0x130>)
 80199b4:	4618      	mov	r0, r3
 80199b6:	f002 fb3d 	bl	801c034 <siprintf>
			if(sdioPrints) printf(buf);
 80199ba:	2300      	movs	r3, #0
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d004      	beq.n	80199ca <Create_File+0x102>
 80199c0:	f107 0308 	add.w	r3, r7, #8
 80199c4:	4618      	mov	r0, r3
 80199c6:	f002 fa91 	bl	801beec <iprintf>

		}
	}
    return fresult;
 80199ca:	4b04      	ldr	r3, [pc, #16]	; (80199dc <Create_File+0x114>)
 80199cc:	781b      	ldrb	r3, [r3, #0]
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	37a0      	adds	r7, #160	; 0xa0
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
 80199d6:	bf00      	nop
 80199d8:	20002158 	.word	0x20002158
 80199dc:	20002270 	.word	0x20002270
 80199e0:	200022e0 	.word	0x200022e0
 80199e4:	08020f7c 	.word	0x08020f7c
 80199e8:	20001f28 	.word	0x20001f28
 80199ec:	08020fb0 	.word	0x08020fb0
 80199f0:	08020fd8 	.word	0x08020fd8
 80199f4:	08021018 	.word	0x08021018
 80199f8:	08020f5c 	.word	0x08020f5c

080199fc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b0a8      	sub	sp, #160	; 0xa0
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8019a06:	4951      	ldr	r1, [pc, #324]	; (8019b4c <Update_File+0x150>)
 8019a08:	6878      	ldr	r0, [r7, #4]
 8019a0a:	f7ff fdae 	bl	801956a <f_stat>
 8019a0e:	4603      	mov	r3, r0
 8019a10:	461a      	mov	r2, r3
 8019a12:	4b4f      	ldr	r3, [pc, #316]	; (8019b50 <Update_File+0x154>)
 8019a14:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8019a16:	4b4e      	ldr	r3, [pc, #312]	; (8019b50 <Update_File+0x154>)
 8019a18:	781b      	ldrb	r3, [r3, #0]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d011      	beq.n	8019a42 <Update_File+0x46>
	{

		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8019a1e:	f107 0308 	add.w	r3, r7, #8
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	494b      	ldr	r1, [pc, #300]	; (8019b54 <Update_File+0x158>)
 8019a26:	4618      	mov	r0, r3
 8019a28:	f002 fb04 	bl	801c034 <siprintf>
		if(sdioPrints) printf (buf);
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d004      	beq.n	8019a3c <Update_File+0x40>
 8019a32:	f107 0308 	add.w	r3, r7, #8
 8019a36:	4618      	mov	r0, r3
 8019a38:	f002 fa58 	bl	801beec <iprintf>

	    return fresult;
 8019a3c:	4b44      	ldr	r3, [pc, #272]	; (8019b50 <Update_File+0x154>)
 8019a3e:	781b      	ldrb	r3, [r3, #0]
 8019a40:	e080      	b.n	8019b44 <Update_File+0x148>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8019a42:	2232      	movs	r2, #50	; 0x32
 8019a44:	6879      	ldr	r1, [r7, #4]
 8019a46:	4844      	ldr	r0, [pc, #272]	; (8019b58 <Update_File+0x15c>)
 8019a48:	f7ff f9b4 	bl	8018db4 <f_open>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	461a      	mov	r2, r3
 8019a50:	4b3f      	ldr	r3, [pc, #252]	; (8019b50 <Update_File+0x154>)
 8019a52:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019a54:	4b3e      	ldr	r3, [pc, #248]	; (8019b50 <Update_File+0x154>)
 8019a56:	781b      	ldrb	r3, [r3, #0]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d013      	beq.n	8019a84 <Update_File+0x88>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 8019a5c:	4b3c      	ldr	r3, [pc, #240]	; (8019b50 <Update_File+0x154>)
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	461a      	mov	r2, r3
 8019a62:	f107 0008 	add.w	r0, r7, #8
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	493c      	ldr	r1, [pc, #240]	; (8019b5c <Update_File+0x160>)
 8019a6a:	f002 fae3 	bl	801c034 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019a6e:	2300      	movs	r3, #0
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d004      	beq.n	8019a7e <Update_File+0x82>
 8019a74:	f107 0308 	add.w	r3, r7, #8
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f002 fa37 	bl	801beec <iprintf>

	        return fresult;
 8019a7e:	4b34      	ldr	r3, [pc, #208]	; (8019b50 <Update_File+0x154>)
 8019a80:	781b      	ldrb	r3, [r3, #0]
 8019a82:	e05f      	b.n	8019b44 <Update_File+0x148>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8019a84:	6838      	ldr	r0, [r7, #0]
 8019a86:	f7e6 fbb5 	bl	80001f4 <strlen>
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	4b34      	ldr	r3, [pc, #208]	; (8019b60 <Update_File+0x164>)
 8019a8e:	6839      	ldr	r1, [r7, #0]
 8019a90:	4831      	ldr	r0, [pc, #196]	; (8019b58 <Update_File+0x15c>)
 8019a92:	f7ff fb4d 	bl	8019130 <f_write>
 8019a96:	4603      	mov	r3, r0
 8019a98:	461a      	mov	r2, r3
 8019a9a:	4b2d      	ldr	r3, [pc, #180]	; (8019b50 <Update_File+0x154>)
 8019a9c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019a9e:	4b2c      	ldr	r3, [pc, #176]	; (8019b50 <Update_File+0x154>)
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d011      	beq.n	8019aca <Update_File+0xce>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8019aa6:	4b2a      	ldr	r3, [pc, #168]	; (8019b50 <Update_File+0x154>)
 8019aa8:	781b      	ldrb	r3, [r3, #0]
 8019aaa:	461a      	mov	r2, r3
 8019aac:	f107 0008 	add.w	r0, r7, #8
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	492c      	ldr	r1, [pc, #176]	; (8019b64 <Update_File+0x168>)
 8019ab4:	f002 fabe 	bl	801c034 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019ab8:	2300      	movs	r3, #0
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d014      	beq.n	8019ae8 <Update_File+0xec>
 8019abe:	f107 0308 	add.w	r3, r7, #8
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f002 fa12 	bl	801beec <iprintf>
 8019ac8:	e00e      	b.n	8019ae8 <Update_File+0xec>
	    }

	    else
	    {

	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8019aca:	f107 0308 	add.w	r3, r7, #8
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	4925      	ldr	r1, [pc, #148]	; (8019b68 <Update_File+0x16c>)
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f002 faae 	bl	801c034 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019ad8:	2300      	movs	r3, #0
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d004      	beq.n	8019ae8 <Update_File+0xec>
 8019ade:	f107 0308 	add.w	r3, r7, #8
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f002 fa02 	bl	801beec <iprintf>

	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8019ae8:	481b      	ldr	r0, [pc, #108]	; (8019b58 <Update_File+0x15c>)
 8019aea:	f7ff fd14 	bl	8019516 <f_close>
 8019aee:	4603      	mov	r3, r0
 8019af0:	461a      	mov	r2, r3
 8019af2:	4b17      	ldr	r3, [pc, #92]	; (8019b50 <Update_File+0x154>)
 8019af4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019af6:	4b16      	ldr	r3, [pc, #88]	; (8019b50 <Update_File+0x154>)
 8019af8:	781b      	ldrb	r3, [r3, #0]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d011      	beq.n	8019b22 <Update_File+0x126>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 8019afe:	4b14      	ldr	r3, [pc, #80]	; (8019b50 <Update_File+0x154>)
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	461a      	mov	r2, r3
 8019b04:	f107 0008 	add.w	r0, r7, #8
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	4918      	ldr	r1, [pc, #96]	; (8019b6c <Update_File+0x170>)
 8019b0c:	f002 fa92 	bl	801c034 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019b10:	2300      	movs	r3, #0
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d014      	beq.n	8019b40 <Update_File+0x144>
 8019b16:	f107 0308 	add.w	r3, r7, #8
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f002 f9e6 	bl	801beec <iprintf>
 8019b20:	e00e      	b.n	8019b40 <Update_File+0x144>

	    }
	    else
	    {

	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019b22:	f107 0308 	add.w	r3, r7, #8
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	4911      	ldr	r1, [pc, #68]	; (8019b70 <Update_File+0x174>)
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f002 fa82 	bl	801c034 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019b30:	2300      	movs	r3, #0
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d004      	beq.n	8019b40 <Update_File+0x144>
 8019b36:	f107 0308 	add.w	r3, r7, #8
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f002 f9d6 	bl	801beec <iprintf>

	     }
	}
    return fresult;
 8019b40:	4b03      	ldr	r3, [pc, #12]	; (8019b50 <Update_File+0x154>)
 8019b42:	781b      	ldrb	r3, [r3, #0]
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	37a0      	adds	r7, #160	; 0xa0
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	20002158 	.word	0x20002158
 8019b50:	20002270 	.word	0x20002270
 8019b54:	08020e0c 	.word	0x08020e0c
 8019b58:	20001f28 	.word	0x20001f28
 8019b5c:	08020e2c 	.word	0x08020e2c
 8019b60:	20002274 	.word	0x20002274
 8019b64:	0802103c 	.word	0x0802103c
 8019b68:	08021064 	.word	0x08021064
 8019b6c:	08020f34 	.word	0x08020f34
 8019b70:	08020f5c 	.word	0x08020f5c

08019b74 <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b088      	sub	sp, #32
 8019b78:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019b7a:	f107 0314 	add.w	r3, r7, #20
 8019b7e:	2200      	movs	r2, #0
 8019b80:	4619      	mov	r1, r3
 8019b82:	4889      	ldr	r0, [pc, #548]	; (8019da8 <json_update+0x234>)
 8019b84:	f7ef f89a 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019b88:	463b      	mov	r3, r7
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	4886      	ldr	r0, [pc, #536]	; (8019da8 <json_update+0x234>)
 8019b90:	f7ee ffb2 	bl	8008af8 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019b94:	4885      	ldr	r0, [pc, #532]	; (8019dac <json_update+0x238>)
 8019b96:	f7ff fe43 	bl	8019820 <Mount_SD>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	461a      	mov	r2, r3
 8019b9e:	4b84      	ldr	r3, [pc, #528]	; (8019db0 <json_update+0x23c>)
 8019ba0:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019ba2:	4b83      	ldr	r3, [pc, #524]	; (8019db0 <json_update+0x23c>)
 8019ba4:	781b      	ldrb	r3, [r3, #0]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	f040 80f3 	bne.w	8019d92 <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 8019bac:	4981      	ldr	r1, [pc, #516]	; (8019db4 <json_update+0x240>)
 8019bae:	4882      	ldr	r0, [pc, #520]	; (8019db8 <json_update+0x244>)
 8019bb0:	f002 fa40 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019bb4:	4980      	ldr	r1, [pc, #512]	; (8019db8 <json_update+0x244>)
 8019bb6:	4881      	ldr	r0, [pc, #516]	; (8019dbc <json_update+0x248>)
 8019bb8:	f7ff ff20 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bbc:	22ff      	movs	r2, #255	; 0xff
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	487d      	ldr	r0, [pc, #500]	; (8019db8 <json_update+0x244>)
 8019bc2:	f001 fa31 	bl	801b028 <memset>
		sprintf(buffer, "\"devEUI\":\"TF241_%s\",\n", ver_GetUid());
 8019bc6:	f7e8 f887 	bl	8001cd8 <ver_GetUid>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	461a      	mov	r2, r3
 8019bce:	497c      	ldr	r1, [pc, #496]	; (8019dc0 <json_update+0x24c>)
 8019bd0:	4879      	ldr	r0, [pc, #484]	; (8019db8 <json_update+0x244>)
 8019bd2:	f002 fa2f 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019bd6:	4978      	ldr	r1, [pc, #480]	; (8019db8 <json_update+0x244>)
 8019bd8:	4878      	ldr	r0, [pc, #480]	; (8019dbc <json_update+0x248>)
 8019bda:	f7ff ff0f 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bde:	22ff      	movs	r2, #255	; 0xff
 8019be0:	2100      	movs	r1, #0
 8019be2:	4875      	ldr	r0, [pc, #468]	; (8019db8 <json_update+0x244>)
 8019be4:	f001 fa20 	bl	801b028 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 8019be8:	4a76      	ldr	r2, [pc, #472]	; (8019dc4 <json_update+0x250>)
 8019bea:	4977      	ldr	r1, [pc, #476]	; (8019dc8 <json_update+0x254>)
 8019bec:	4872      	ldr	r0, [pc, #456]	; (8019db8 <json_update+0x244>)
 8019bee:	f002 fa21 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019bf2:	4971      	ldr	r1, [pc, #452]	; (8019db8 <json_update+0x244>)
 8019bf4:	4871      	ldr	r0, [pc, #452]	; (8019dbc <json_update+0x248>)
 8019bf6:	f7ff ff01 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bfa:	22ff      	movs	r2, #255	; 0xff
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	486e      	ldr	r0, [pc, #440]	; (8019db8 <json_update+0x244>)
 8019c00:	f001 fa12 	bl	801b028 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019c04:	783b      	ldrb	r3, [r7, #0]
 8019c06:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 8019c08:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019c0a:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 8019c0c:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	460b      	mov	r3, r1
 8019c12:	496e      	ldr	r1, [pc, #440]	; (8019dcc <json_update+0x258>)
 8019c14:	4868      	ldr	r0, [pc, #416]	; (8019db8 <json_update+0x244>)
 8019c16:	f002 fa0d 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c1a:	4967      	ldr	r1, [pc, #412]	; (8019db8 <json_update+0x244>)
 8019c1c:	4867      	ldr	r0, [pc, #412]	; (8019dbc <json_update+0x248>)
 8019c1e:	f7ff feed 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c22:	22ff      	movs	r2, #255	; 0xff
 8019c24:	2100      	movs	r1, #0
 8019c26:	4864      	ldr	r0, [pc, #400]	; (8019db8 <json_update+0x244>)
 8019c28:	f001 f9fe 	bl	801b028 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 8019c2c:	4a68      	ldr	r2, [pc, #416]	; (8019dd0 <json_update+0x25c>)
 8019c2e:	4969      	ldr	r1, [pc, #420]	; (8019dd4 <json_update+0x260>)
 8019c30:	4861      	ldr	r0, [pc, #388]	; (8019db8 <json_update+0x244>)
 8019c32:	f002 f9ff 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c36:	4960      	ldr	r1, [pc, #384]	; (8019db8 <json_update+0x244>)
 8019c38:	4860      	ldr	r0, [pc, #384]	; (8019dbc <json_update+0x248>)
 8019c3a:	f7ff fedf 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c3e:	22ff      	movs	r2, #255	; 0xff
 8019c40:	2100      	movs	r1, #0
 8019c42:	485d      	ldr	r0, [pc, #372]	; (8019db8 <json_update+0x244>)
 8019c44:	f001 f9f0 	bl	801b028 <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 8019c48:	4a63      	ldr	r2, [pc, #396]	; (8019dd8 <json_update+0x264>)
 8019c4a:	4964      	ldr	r1, [pc, #400]	; (8019ddc <json_update+0x268>)
 8019c4c:	485a      	ldr	r0, [pc, #360]	; (8019db8 <json_update+0x244>)
 8019c4e:	f002 f9f1 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c52:	4959      	ldr	r1, [pc, #356]	; (8019db8 <json_update+0x244>)
 8019c54:	4859      	ldr	r0, [pc, #356]	; (8019dbc <json_update+0x248>)
 8019c56:	f7ff fed1 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c5a:	22ff      	movs	r2, #255	; 0xff
 8019c5c:	2100      	movs	r1, #0
 8019c5e:	4856      	ldr	r0, [pc, #344]	; (8019db8 <json_update+0x244>)
 8019c60:	f001 f9e2 	bl	801b028 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 8019c64:	4a5e      	ldr	r2, [pc, #376]	; (8019de0 <json_update+0x26c>)
 8019c66:	495f      	ldr	r1, [pc, #380]	; (8019de4 <json_update+0x270>)
 8019c68:	4853      	ldr	r0, [pc, #332]	; (8019db8 <json_update+0x244>)
 8019c6a:	f002 f9e3 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c6e:	4952      	ldr	r1, [pc, #328]	; (8019db8 <json_update+0x244>)
 8019c70:	4852      	ldr	r0, [pc, #328]	; (8019dbc <json_update+0x248>)
 8019c72:	f7ff fec3 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c76:	22ff      	movs	r2, #255	; 0xff
 8019c78:	2100      	movs	r1, #0
 8019c7a:	484f      	ldr	r0, [pc, #316]	; (8019db8 <json_update+0x244>)
 8019c7c:	f001 f9d4 	bl	801b028 <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 8019c80:	4b59      	ldr	r3, [pc, #356]	; (8019de8 <json_update+0x274>)
 8019c82:	881b      	ldrh	r3, [r3, #0]
 8019c84:	461a      	mov	r2, r3
 8019c86:	4959      	ldr	r1, [pc, #356]	; (8019dec <json_update+0x278>)
 8019c88:	484b      	ldr	r0, [pc, #300]	; (8019db8 <json_update+0x244>)
 8019c8a:	f002 f9d3 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c8e:	494a      	ldr	r1, [pc, #296]	; (8019db8 <json_update+0x244>)
 8019c90:	484a      	ldr	r0, [pc, #296]	; (8019dbc <json_update+0x248>)
 8019c92:	f7ff feb3 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c96:	22ff      	movs	r2, #255	; 0xff
 8019c98:	2100      	movs	r1, #0
 8019c9a:	4847      	ldr	r0, [pc, #284]	; (8019db8 <json_update+0x244>)
 8019c9c:	f001 f9c4 	bl	801b028 <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 8019ca0:	4b51      	ldr	r3, [pc, #324]	; (8019de8 <json_update+0x274>)
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	461a      	mov	r2, r3
 8019ca6:	4952      	ldr	r1, [pc, #328]	; (8019df0 <json_update+0x27c>)
 8019ca8:	4843      	ldr	r0, [pc, #268]	; (8019db8 <json_update+0x244>)
 8019caa:	f002 f9c3 	bl	801c034 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 8019cae:	4942      	ldr	r1, [pc, #264]	; (8019db8 <json_update+0x244>)
 8019cb0:	4842      	ldr	r0, [pc, #264]	; (8019dbc <json_update+0x248>)
 8019cb2:	f7ff fea3 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019cb6:	22ff      	movs	r2, #255	; 0xff
 8019cb8:	2100      	movs	r1, #0
 8019cba:	483f      	ldr	r0, [pc, #252]	; (8019db8 <json_update+0x244>)
 8019cbc:	f001 f9b4 	bl	801b028 <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 8019cc0:	4b49      	ldr	r3, [pc, #292]	; (8019de8 <json_update+0x274>)
 8019cc2:	689b      	ldr	r3, [r3, #8]
 8019cc4:	461a      	mov	r2, r3
 8019cc6:	494b      	ldr	r1, [pc, #300]	; (8019df4 <json_update+0x280>)
 8019cc8:	483b      	ldr	r0, [pc, #236]	; (8019db8 <json_update+0x244>)
 8019cca:	f002 f9b3 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019cce:	493a      	ldr	r1, [pc, #232]	; (8019db8 <json_update+0x244>)
 8019cd0:	483a      	ldr	r0, [pc, #232]	; (8019dbc <json_update+0x248>)
 8019cd2:	f7ff fe93 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019cd6:	22ff      	movs	r2, #255	; 0xff
 8019cd8:	2100      	movs	r1, #0
 8019cda:	4837      	ldr	r0, [pc, #220]	; (8019db8 <json_update+0x244>)
 8019cdc:	f001 f9a4 	bl	801b028 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 8019ce0:	4b41      	ldr	r3, [pc, #260]	; (8019de8 <json_update+0x274>)
 8019ce2:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d001      	beq.n	8019cec <json_update+0x178>
 8019ce8:	4b43      	ldr	r3, [pc, #268]	; (8019df8 <json_update+0x284>)
 8019cea:	e000      	b.n	8019cee <json_update+0x17a>
 8019cec:	4b43      	ldr	r3, [pc, #268]	; (8019dfc <json_update+0x288>)
 8019cee:	461a      	mov	r2, r3
 8019cf0:	4943      	ldr	r1, [pc, #268]	; (8019e00 <json_update+0x28c>)
 8019cf2:	4831      	ldr	r0, [pc, #196]	; (8019db8 <json_update+0x244>)
 8019cf4:	f002 f99e 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019cf8:	492f      	ldr	r1, [pc, #188]	; (8019db8 <json_update+0x244>)
 8019cfa:	4830      	ldr	r0, [pc, #192]	; (8019dbc <json_update+0x248>)
 8019cfc:	f7ff fe7e 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d00:	22ff      	movs	r2, #255	; 0xff
 8019d02:	2100      	movs	r1, #0
 8019d04:	482c      	ldr	r0, [pc, #176]	; (8019db8 <json_update+0x244>)
 8019d06:	f001 f98f 	bl	801b028 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 8019d0a:	4b37      	ldr	r3, [pc, #220]	; (8019de8 <json_update+0x274>)
 8019d0c:	695b      	ldr	r3, [r3, #20]
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f7e6 fc32 	bl	8000578 <__aeabi_f2d>
 8019d14:	4602      	mov	r2, r0
 8019d16:	460b      	mov	r3, r1
 8019d18:	493a      	ldr	r1, [pc, #232]	; (8019e04 <json_update+0x290>)
 8019d1a:	4827      	ldr	r0, [pc, #156]	; (8019db8 <json_update+0x244>)
 8019d1c:	f002 f98a 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d20:	4925      	ldr	r1, [pc, #148]	; (8019db8 <json_update+0x244>)
 8019d22:	4826      	ldr	r0, [pc, #152]	; (8019dbc <json_update+0x248>)
 8019d24:	f7ff fe6a 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d28:	22ff      	movs	r2, #255	; 0xff
 8019d2a:	2100      	movs	r1, #0
 8019d2c:	4822      	ldr	r0, [pc, #136]	; (8019db8 <json_update+0x244>)
 8019d2e:	f001 f97b 	bl	801b028 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 8019d32:	4935      	ldr	r1, [pc, #212]	; (8019e08 <json_update+0x294>)
 8019d34:	4820      	ldr	r0, [pc, #128]	; (8019db8 <json_update+0x244>)
 8019d36:	f002 f97d 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d3a:	491f      	ldr	r1, [pc, #124]	; (8019db8 <json_update+0x244>)
 8019d3c:	481f      	ldr	r0, [pc, #124]	; (8019dbc <json_update+0x248>)
 8019d3e:	f7ff fe5d 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d42:	22ff      	movs	r2, #255	; 0xff
 8019d44:	2100      	movs	r1, #0
 8019d46:	481c      	ldr	r0, [pc, #112]	; (8019db8 <json_update+0x244>)
 8019d48:	f001 f96e 	bl	801b028 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 8019d4c:	4b26      	ldr	r3, [pc, #152]	; (8019de8 <json_update+0x274>)
 8019d4e:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7e6 fc11 	bl	8000578 <__aeabi_f2d>
 8019d56:	4602      	mov	r2, r0
 8019d58:	460b      	mov	r3, r1
 8019d5a:	492c      	ldr	r1, [pc, #176]	; (8019e0c <json_update+0x298>)
 8019d5c:	4816      	ldr	r0, [pc, #88]	; (8019db8 <json_update+0x244>)
 8019d5e:	f002 f969 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d62:	4915      	ldr	r1, [pc, #84]	; (8019db8 <json_update+0x244>)
 8019d64:	4815      	ldr	r0, [pc, #84]	; (8019dbc <json_update+0x248>)
 8019d66:	f7ff fe49 	bl	80199fc <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 8019d6a:	22ff      	movs	r2, #255	; 0xff
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	4812      	ldr	r0, [pc, #72]	; (8019db8 <json_update+0x244>)
 8019d70:	f001 f95a 	bl	801b028 <memset>
		sprintf(buffer, "}\n\n");
 8019d74:	4926      	ldr	r1, [pc, #152]	; (8019e10 <json_update+0x29c>)
 8019d76:	4810      	ldr	r0, [pc, #64]	; (8019db8 <json_update+0x244>)
 8019d78:	f002 f95c 	bl	801c034 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 8019d7c:	490e      	ldr	r1, [pc, #56]	; (8019db8 <json_update+0x244>)
 8019d7e:	480f      	ldr	r0, [pc, #60]	; (8019dbc <json_update+0x248>)
 8019d80:	f7ff fe3c 	bl	80199fc <Update_File>
 8019d84:	4603      	mov	r3, r0
 8019d86:	461a      	mov	r2, r3
 8019d88:	4b09      	ldr	r3, [pc, #36]	; (8019db0 <json_update+0x23c>)
 8019d8a:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 8019d8c:	4807      	ldr	r0, [pc, #28]	; (8019dac <json_update+0x238>)
 8019d8e:	f7ff fd73 	bl	8019878 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 8019d92:	4b07      	ldr	r3, [pc, #28]	; (8019db0 <json_update+0x23c>)
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	b25a      	sxtb	r2, r3
 8019d98:	4b13      	ldr	r3, [pc, #76]	; (8019de8 <json_update+0x274>)
 8019d9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8019d9e:	bf00      	nop
 8019da0:	3718      	adds	r7, #24
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	200017f8 	.word	0x200017f8
 8019dac:	08021150 	.word	0x08021150
 8019db0:	20002278 	.word	0x20002278
 8019db4:	08021154 	.word	0x08021154
 8019db8:	200022e4 	.word	0x200022e4
 8019dbc:	2000227c 	.word	0x2000227c
 8019dc0:	08021158 	.word	0x08021158
 8019dc4:	200013dd 	.word	0x200013dd
 8019dc8:	08021170 	.word	0x08021170
 8019dcc:	0802117c 	.word	0x0802117c
 8019dd0:	2000140f 	.word	0x2000140f
 8019dd4:	0802119c 	.word	0x0802119c
 8019dd8:	20001441 	.word	0x20001441
 8019ddc:	080211b0 	.word	0x080211b0
 8019de0:	20001473 	.word	0x20001473
 8019de4:	080211c0 	.word	0x080211c0
 8019de8:	200014a8 	.word	0x200014a8
 8019dec:	080211d0 	.word	0x080211d0
 8019df0:	080211e0 	.word	0x080211e0
 8019df4:	080211f8 	.word	0x080211f8
 8019df8:	0802120c 	.word	0x0802120c
 8019dfc:	08021214 	.word	0x08021214
 8019e00:	0802121c 	.word	0x0802121c
 8019e04:	0802122c 	.word	0x0802122c
 8019e08:	08021240 	.word	0x08021240
 8019e0c:	08021250 	.word	0x08021250
 8019e10:	08021264 	.word	0x08021264

08019e14 <csv_update>:
void csv_update() {
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b088      	sub	sp, #32
 8019e18:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019e1a:	f107 0314 	add.w	r3, r7, #20
 8019e1e:	2200      	movs	r2, #0
 8019e20:	4619      	mov	r1, r3
 8019e22:	4880      	ldr	r0, [pc, #512]	; (801a024 <csv_update+0x210>)
 8019e24:	f7ee ff4a 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019e28:	463b      	mov	r3, r7
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	4619      	mov	r1, r3
 8019e2e:	487d      	ldr	r0, [pc, #500]	; (801a024 <csv_update+0x210>)
 8019e30:	f7ee fe62 	bl	8008af8 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019e34:	487c      	ldr	r0, [pc, #496]	; (801a028 <csv_update+0x214>)
 8019e36:	f7ff fcf3 	bl	8019820 <Mount_SD>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	4b7b      	ldr	r3, [pc, #492]	; (801a02c <csv_update+0x218>)
 8019e40:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019e42:	4b7a      	ldr	r3, [pc, #488]	; (801a02c <csv_update+0x218>)
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f040 80e2 	bne.w	801a010 <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "TF241_%s ,", ver_GetUid());
 8019e4c:	f7e7 ff44 	bl	8001cd8 <ver_GetUid>
 8019e50:	4603      	mov	r3, r0
 8019e52:	461a      	mov	r2, r3
 8019e54:	4976      	ldr	r1, [pc, #472]	; (801a030 <csv_update+0x21c>)
 8019e56:	4877      	ldr	r0, [pc, #476]	; (801a034 <csv_update+0x220>)
 8019e58:	f002 f8ec 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e5c:	4975      	ldr	r1, [pc, #468]	; (801a034 <csv_update+0x220>)
 8019e5e:	4876      	ldr	r0, [pc, #472]	; (801a038 <csv_update+0x224>)
 8019e60:	f7ff fdcc 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e64:	22ff      	movs	r2, #255	; 0xff
 8019e66:	2100      	movs	r1, #0
 8019e68:	4872      	ldr	r0, [pc, #456]	; (801a034 <csv_update+0x220>)
 8019e6a:	f001 f8dd 	bl	801b028 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 8019e6e:	4a73      	ldr	r2, [pc, #460]	; (801a03c <csv_update+0x228>)
 8019e70:	4973      	ldr	r1, [pc, #460]	; (801a040 <csv_update+0x22c>)
 8019e72:	4870      	ldr	r0, [pc, #448]	; (801a034 <csv_update+0x220>)
 8019e74:	f002 f8de 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e78:	496e      	ldr	r1, [pc, #440]	; (801a034 <csv_update+0x220>)
 8019e7a:	486f      	ldr	r0, [pc, #444]	; (801a038 <csv_update+0x224>)
 8019e7c:	f7ff fdbe 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e80:	22ff      	movs	r2, #255	; 0xff
 8019e82:	2100      	movs	r1, #0
 8019e84:	486b      	ldr	r0, [pc, #428]	; (801a034 <csv_update+0x220>)
 8019e86:	f001 f8cf 	bl	801b028 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8019e8a:	783b      	ldrb	r3, [r7, #0]
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	787b      	ldrb	r3, [r7, #1]
 8019e90:	4619      	mov	r1, r3
 8019e92:	78bb      	ldrb	r3, [r7, #2]
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	460b      	mov	r3, r1
 8019e98:	496a      	ldr	r1, [pc, #424]	; (801a044 <csv_update+0x230>)
 8019e9a:	4866      	ldr	r0, [pc, #408]	; (801a034 <csv_update+0x220>)
 8019e9c:	f002 f8ca 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ea0:	4964      	ldr	r1, [pc, #400]	; (801a034 <csv_update+0x220>)
 8019ea2:	4865      	ldr	r0, [pc, #404]	; (801a038 <csv_update+0x224>)
 8019ea4:	f7ff fdaa 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ea8:	22ff      	movs	r2, #255	; 0xff
 8019eaa:	2100      	movs	r1, #0
 8019eac:	4861      	ldr	r0, [pc, #388]	; (801a034 <csv_update+0x220>)
 8019eae:	f001 f8bb 	bl	801b028 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 8019eb2:	4a65      	ldr	r2, [pc, #404]	; (801a048 <csv_update+0x234>)
 8019eb4:	4962      	ldr	r1, [pc, #392]	; (801a040 <csv_update+0x22c>)
 8019eb6:	485f      	ldr	r0, [pc, #380]	; (801a034 <csv_update+0x220>)
 8019eb8:	f002 f8bc 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ebc:	495d      	ldr	r1, [pc, #372]	; (801a034 <csv_update+0x220>)
 8019ebe:	485e      	ldr	r0, [pc, #376]	; (801a038 <csv_update+0x224>)
 8019ec0:	f7ff fd9c 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ec4:	22ff      	movs	r2, #255	; 0xff
 8019ec6:	2100      	movs	r1, #0
 8019ec8:	485a      	ldr	r0, [pc, #360]	; (801a034 <csv_update+0x220>)
 8019eca:	f001 f8ad 	bl	801b028 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 8019ece:	4a5f      	ldr	r2, [pc, #380]	; (801a04c <csv_update+0x238>)
 8019ed0:	495b      	ldr	r1, [pc, #364]	; (801a040 <csv_update+0x22c>)
 8019ed2:	4858      	ldr	r0, [pc, #352]	; (801a034 <csv_update+0x220>)
 8019ed4:	f002 f8ae 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ed8:	4956      	ldr	r1, [pc, #344]	; (801a034 <csv_update+0x220>)
 8019eda:	4857      	ldr	r0, [pc, #348]	; (801a038 <csv_update+0x224>)
 8019edc:	f7ff fd8e 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ee0:	22ff      	movs	r2, #255	; 0xff
 8019ee2:	2100      	movs	r1, #0
 8019ee4:	4853      	ldr	r0, [pc, #332]	; (801a034 <csv_update+0x220>)
 8019ee6:	f001 f89f 	bl	801b028 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 8019eea:	4a59      	ldr	r2, [pc, #356]	; (801a050 <csv_update+0x23c>)
 8019eec:	4954      	ldr	r1, [pc, #336]	; (801a040 <csv_update+0x22c>)
 8019eee:	4851      	ldr	r0, [pc, #324]	; (801a034 <csv_update+0x220>)
 8019ef0:	f002 f8a0 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ef4:	494f      	ldr	r1, [pc, #316]	; (801a034 <csv_update+0x220>)
 8019ef6:	4850      	ldr	r0, [pc, #320]	; (801a038 <csv_update+0x224>)
 8019ef8:	f7ff fd80 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019efc:	22ff      	movs	r2, #255	; 0xff
 8019efe:	2100      	movs	r1, #0
 8019f00:	484c      	ldr	r0, [pc, #304]	; (801a034 <csv_update+0x220>)
 8019f02:	f001 f891 	bl	801b028 <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 8019f06:	4b53      	ldr	r3, [pc, #332]	; (801a054 <csv_update+0x240>)
 8019f08:	881b      	ldrh	r3, [r3, #0]
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	4952      	ldr	r1, [pc, #328]	; (801a058 <csv_update+0x244>)
 8019f0e:	4849      	ldr	r0, [pc, #292]	; (801a034 <csv_update+0x220>)
 8019f10:	f002 f890 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f14:	4947      	ldr	r1, [pc, #284]	; (801a034 <csv_update+0x220>)
 8019f16:	4848      	ldr	r0, [pc, #288]	; (801a038 <csv_update+0x224>)
 8019f18:	f7ff fd70 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f1c:	22ff      	movs	r2, #255	; 0xff
 8019f1e:	2100      	movs	r1, #0
 8019f20:	4844      	ldr	r0, [pc, #272]	; (801a034 <csv_update+0x220>)
 8019f22:	f001 f881 	bl	801b028 <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 8019f26:	4b4b      	ldr	r3, [pc, #300]	; (801a054 <csv_update+0x240>)
 8019f28:	685b      	ldr	r3, [r3, #4]
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	494b      	ldr	r1, [pc, #300]	; (801a05c <csv_update+0x248>)
 8019f2e:	4841      	ldr	r0, [pc, #260]	; (801a034 <csv_update+0x220>)
 8019f30:	f002 f880 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f34:	493f      	ldr	r1, [pc, #252]	; (801a034 <csv_update+0x220>)
 8019f36:	4840      	ldr	r0, [pc, #256]	; (801a038 <csv_update+0x224>)
 8019f38:	f7ff fd60 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f3c:	22ff      	movs	r2, #255	; 0xff
 8019f3e:	2100      	movs	r1, #0
 8019f40:	483c      	ldr	r0, [pc, #240]	; (801a034 <csv_update+0x220>)
 8019f42:	f001 f871 	bl	801b028 <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 8019f46:	4b43      	ldr	r3, [pc, #268]	; (801a054 <csv_update+0x240>)
 8019f48:	689b      	ldr	r3, [r3, #8]
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	4943      	ldr	r1, [pc, #268]	; (801a05c <csv_update+0x248>)
 8019f4e:	4839      	ldr	r0, [pc, #228]	; (801a034 <csv_update+0x220>)
 8019f50:	f002 f870 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f54:	4937      	ldr	r1, [pc, #220]	; (801a034 <csv_update+0x220>)
 8019f56:	4838      	ldr	r0, [pc, #224]	; (801a038 <csv_update+0x224>)
 8019f58:	f7ff fd50 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f5c:	22ff      	movs	r2, #255	; 0xff
 8019f5e:	2100      	movs	r1, #0
 8019f60:	4834      	ldr	r0, [pc, #208]	; (801a034 <csv_update+0x220>)
 8019f62:	f001 f861 	bl	801b028 <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8019f66:	4b3b      	ldr	r3, [pc, #236]	; (801a054 <csv_update+0x240>)
 8019f68:	7b1b      	ldrb	r3, [r3, #12]
 8019f6a:	2b01      	cmp	r3, #1
 8019f6c:	d101      	bne.n	8019f72 <csv_update+0x15e>
 8019f6e:	4b3c      	ldr	r3, [pc, #240]	; (801a060 <csv_update+0x24c>)
 8019f70:	e000      	b.n	8019f74 <csv_update+0x160>
 8019f72:	4b3c      	ldr	r3, [pc, #240]	; (801a064 <csv_update+0x250>)
 8019f74:	461a      	mov	r2, r3
 8019f76:	4932      	ldr	r1, [pc, #200]	; (801a040 <csv_update+0x22c>)
 8019f78:	482e      	ldr	r0, [pc, #184]	; (801a034 <csv_update+0x220>)
 8019f7a:	f002 f85b 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f7e:	492d      	ldr	r1, [pc, #180]	; (801a034 <csv_update+0x220>)
 8019f80:	482d      	ldr	r0, [pc, #180]	; (801a038 <csv_update+0x224>)
 8019f82:	f7ff fd3b 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f86:	22ff      	movs	r2, #255	; 0xff
 8019f88:	2100      	movs	r1, #0
 8019f8a:	482a      	ldr	r0, [pc, #168]	; (801a034 <csv_update+0x220>)
 8019f8c:	f001 f84c 	bl	801b028 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 8019f90:	4b30      	ldr	r3, [pc, #192]	; (801a054 <csv_update+0x240>)
 8019f92:	695b      	ldr	r3, [r3, #20]
 8019f94:	4618      	mov	r0, r3
 8019f96:	f7e6 faef 	bl	8000578 <__aeabi_f2d>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	460b      	mov	r3, r1
 8019f9e:	4932      	ldr	r1, [pc, #200]	; (801a068 <csv_update+0x254>)
 8019fa0:	4824      	ldr	r0, [pc, #144]	; (801a034 <csv_update+0x220>)
 8019fa2:	f002 f847 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019fa6:	4923      	ldr	r1, [pc, #140]	; (801a034 <csv_update+0x220>)
 8019fa8:	4823      	ldr	r0, [pc, #140]	; (801a038 <csv_update+0x224>)
 8019faa:	f7ff fd27 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019fae:	22ff      	movs	r2, #255	; 0xff
 8019fb0:	2100      	movs	r1, #0
 8019fb2:	4820      	ldr	r0, [pc, #128]	; (801a034 <csv_update+0x220>)
 8019fb4:	f001 f838 	bl	801b028 <memset>
		sprintf(buffer, "NONE ,");
 8019fb8:	492c      	ldr	r1, [pc, #176]	; (801a06c <csv_update+0x258>)
 8019fba:	481e      	ldr	r0, [pc, #120]	; (801a034 <csv_update+0x220>)
 8019fbc:	f002 f83a 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019fc0:	491c      	ldr	r1, [pc, #112]	; (801a034 <csv_update+0x220>)
 8019fc2:	481d      	ldr	r0, [pc, #116]	; (801a038 <csv_update+0x224>)
 8019fc4:	f7ff fd1a 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019fc8:	22ff      	movs	r2, #255	; 0xff
 8019fca:	2100      	movs	r1, #0
 8019fcc:	4819      	ldr	r0, [pc, #100]	; (801a034 <csv_update+0x220>)
 8019fce:	f001 f82b 	bl	801b028 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 8019fd2:	4b20      	ldr	r3, [pc, #128]	; (801a054 <csv_update+0x240>)
 8019fd4:	6a1b      	ldr	r3, [r3, #32]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7e6 face 	bl	8000578 <__aeabi_f2d>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	460b      	mov	r3, r1
 8019fe0:	4921      	ldr	r1, [pc, #132]	; (801a068 <csv_update+0x254>)
 8019fe2:	4814      	ldr	r0, [pc, #80]	; (801a034 <csv_update+0x220>)
 8019fe4:	f002 f826 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 8019fe8:	4912      	ldr	r1, [pc, #72]	; (801a034 <csv_update+0x220>)
 8019fea:	4813      	ldr	r0, [pc, #76]	; (801a038 <csv_update+0x224>)
 8019fec:	f7ff fd06 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ff0:	22ff      	movs	r2, #255	; 0xff
 8019ff2:	2100      	movs	r1, #0
 8019ff4:	480f      	ldr	r0, [pc, #60]	; (801a034 <csv_update+0x220>)
 8019ff6:	f001 f817 	bl	801b028 <memset>
		sprintf(buffer, "\n");
 8019ffa:	491d      	ldr	r1, [pc, #116]	; (801a070 <csv_update+0x25c>)
 8019ffc:	480d      	ldr	r0, [pc, #52]	; (801a034 <csv_update+0x220>)
 8019ffe:	f002 f819 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a002:	490c      	ldr	r1, [pc, #48]	; (801a034 <csv_update+0x220>)
 801a004:	480c      	ldr	r0, [pc, #48]	; (801a038 <csv_update+0x224>)
 801a006:	f7ff fcf9 	bl	80199fc <Update_File>

		Unmount_SD("/");
 801a00a:	4807      	ldr	r0, [pc, #28]	; (801a028 <csv_update+0x214>)
 801a00c:	f7ff fc34 	bl	8019878 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a010:	4b06      	ldr	r3, [pc, #24]	; (801a02c <csv_update+0x218>)
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	b25a      	sxtb	r2, r3
 801a016:	4b0f      	ldr	r3, [pc, #60]	; (801a054 <csv_update+0x240>)
 801a018:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a01c:	bf00      	nop
 801a01e:	3718      	adds	r7, #24
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}
 801a024:	200017f8 	.word	0x200017f8
 801a028:	08021150 	.word	0x08021150
 801a02c:	20002278 	.word	0x20002278
 801a030:	08021268 	.word	0x08021268
 801a034:	200022e4 	.word	0x200022e4
 801a038:	2000227c 	.word	0x2000227c
 801a03c:	200013dd 	.word	0x200013dd
 801a040:	08021274 	.word	0x08021274
 801a044:	0802127c 	.word	0x0802127c
 801a048:	2000140f 	.word	0x2000140f
 801a04c:	20001441 	.word	0x20001441
 801a050:	20001473 	.word	0x20001473
 801a054:	200014a8 	.word	0x200014a8
 801a058:	08021290 	.word	0x08021290
 801a05c:	08021298 	.word	0x08021298
 801a060:	0802120c 	.word	0x0802120c
 801a064:	08021214 	.word	0x08021214
 801a068:	080212a0 	.word	0x080212a0
 801a06c:	080212a8 	.word	0x080212a8
 801a070:	080212b0 	.word	0x080212b0

0801a074 <csv_header>:
void csv_header() {
 801a074:	b580      	push	{r7, lr}
 801a076:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801a078:	485d      	ldr	r0, [pc, #372]	; (801a1f0 <csv_header+0x17c>)
 801a07a:	f7ff fbd1 	bl	8019820 <Mount_SD>
 801a07e:	4603      	mov	r3, r0
 801a080:	461a      	mov	r2, r3
 801a082:	4b5c      	ldr	r3, [pc, #368]	; (801a1f4 <csv_header+0x180>)
 801a084:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a086:	4b5b      	ldr	r3, [pc, #364]	; (801a1f4 <csv_header+0x180>)
 801a088:	781b      	ldrb	r3, [r3, #0]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	f040 80a7 	bne.w	801a1de <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801a090:	4959      	ldr	r1, [pc, #356]	; (801a1f8 <csv_header+0x184>)
 801a092:	485a      	ldr	r0, [pc, #360]	; (801a1fc <csv_header+0x188>)
 801a094:	f001 ffce 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a098:	4958      	ldr	r1, [pc, #352]	; (801a1fc <csv_header+0x188>)
 801a09a:	4859      	ldr	r0, [pc, #356]	; (801a200 <csv_header+0x18c>)
 801a09c:	f7ff fcae 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0a0:	22ff      	movs	r2, #255	; 0xff
 801a0a2:	2100      	movs	r1, #0
 801a0a4:	4855      	ldr	r0, [pc, #340]	; (801a1fc <csv_header+0x188>)
 801a0a6:	f000 ffbf 	bl	801b028 <memset>
		sprintf(buffer, "id ,");
 801a0aa:	4956      	ldr	r1, [pc, #344]	; (801a204 <csv_header+0x190>)
 801a0ac:	4853      	ldr	r0, [pc, #332]	; (801a1fc <csv_header+0x188>)
 801a0ae:	f001 ffc1 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0b2:	4952      	ldr	r1, [pc, #328]	; (801a1fc <csv_header+0x188>)
 801a0b4:	4852      	ldr	r0, [pc, #328]	; (801a200 <csv_header+0x18c>)
 801a0b6:	f7ff fca1 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0ba:	22ff      	movs	r2, #255	; 0xff
 801a0bc:	2100      	movs	r1, #0
 801a0be:	484f      	ldr	r0, [pc, #316]	; (801a1fc <csv_header+0x188>)
 801a0c0:	f000 ffb2 	bl	801b028 <memset>
		sprintf(buffer, "timestamp ,");
 801a0c4:	4950      	ldr	r1, [pc, #320]	; (801a208 <csv_header+0x194>)
 801a0c6:	484d      	ldr	r0, [pc, #308]	; (801a1fc <csv_header+0x188>)
 801a0c8:	f001 ffb4 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0cc:	494b      	ldr	r1, [pc, #300]	; (801a1fc <csv_header+0x188>)
 801a0ce:	484c      	ldr	r0, [pc, #304]	; (801a200 <csv_header+0x18c>)
 801a0d0:	f7ff fc94 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0d4:	22ff      	movs	r2, #255	; 0xff
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	4848      	ldr	r0, [pc, #288]	; (801a1fc <csv_header+0x188>)
 801a0da:	f000 ffa5 	bl	801b028 <memset>
		sprintf(buffer, "location ,");
 801a0de:	494b      	ldr	r1, [pc, #300]	; (801a20c <csv_header+0x198>)
 801a0e0:	4846      	ldr	r0, [pc, #280]	; (801a1fc <csv_header+0x188>)
 801a0e2:	f001 ffa7 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0e6:	4945      	ldr	r1, [pc, #276]	; (801a1fc <csv_header+0x188>)
 801a0e8:	4845      	ldr	r0, [pc, #276]	; (801a200 <csv_header+0x18c>)
 801a0ea:	f7ff fc87 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0ee:	22ff      	movs	r2, #255	; 0xff
 801a0f0:	2100      	movs	r1, #0
 801a0f2:	4842      	ldr	r0, [pc, #264]	; (801a1fc <csv_header+0x188>)
 801a0f4:	f000 ff98 	bl	801b028 <memset>
		sprintf(buffer, "name ,");
 801a0f8:	4945      	ldr	r1, [pc, #276]	; (801a210 <csv_header+0x19c>)
 801a0fa:	4840      	ldr	r0, [pc, #256]	; (801a1fc <csv_header+0x188>)
 801a0fc:	f001 ff9a 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a100:	493e      	ldr	r1, [pc, #248]	; (801a1fc <csv_header+0x188>)
 801a102:	483f      	ldr	r0, [pc, #252]	; (801a200 <csv_header+0x18c>)
 801a104:	f7ff fc7a 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a108:	22ff      	movs	r2, #255	; 0xff
 801a10a:	2100      	movs	r1, #0
 801a10c:	483b      	ldr	r0, [pc, #236]	; (801a1fc <csv_header+0x188>)
 801a10e:	f000 ff8b 	bl	801b028 <memset>
		sprintf(buffer, "group ,");
 801a112:	4940      	ldr	r1, [pc, #256]	; (801a214 <csv_header+0x1a0>)
 801a114:	4839      	ldr	r0, [pc, #228]	; (801a1fc <csv_header+0x188>)
 801a116:	f001 ff8d 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a11a:	4938      	ldr	r1, [pc, #224]	; (801a1fc <csv_header+0x188>)
 801a11c:	4838      	ldr	r0, [pc, #224]	; (801a200 <csv_header+0x18c>)
 801a11e:	f7ff fc6d 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a122:	22ff      	movs	r2, #255	; 0xff
 801a124:	2100      	movs	r1, #0
 801a126:	4835      	ldr	r0, [pc, #212]	; (801a1fc <csv_header+0x188>)
 801a128:	f000 ff7e 	bl	801b028 <memset>
		sprintf(buffer, "co2 ,");
 801a12c:	493a      	ldr	r1, [pc, #232]	; (801a218 <csv_header+0x1a4>)
 801a12e:	4833      	ldr	r0, [pc, #204]	; (801a1fc <csv_header+0x188>)
 801a130:	f001 ff80 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a134:	4931      	ldr	r1, [pc, #196]	; (801a1fc <csv_header+0x188>)
 801a136:	4832      	ldr	r0, [pc, #200]	; (801a200 <csv_header+0x18c>)
 801a138:	f7ff fc60 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a13c:	22ff      	movs	r2, #255	; 0xff
 801a13e:	2100      	movs	r1, #0
 801a140:	482e      	ldr	r0, [pc, #184]	; (801a1fc <csv_header+0x188>)
 801a142:	f000 ff71 	bl	801b028 <memset>
		sprintf(buffer, "temperature ,");
 801a146:	4935      	ldr	r1, [pc, #212]	; (801a21c <csv_header+0x1a8>)
 801a148:	482c      	ldr	r0, [pc, #176]	; (801a1fc <csv_header+0x188>)
 801a14a:	f001 ff73 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a14e:	492b      	ldr	r1, [pc, #172]	; (801a1fc <csv_header+0x188>)
 801a150:	482b      	ldr	r0, [pc, #172]	; (801a200 <csv_header+0x18c>)
 801a152:	f7ff fc53 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a156:	22ff      	movs	r2, #255	; 0xff
 801a158:	2100      	movs	r1, #0
 801a15a:	4828      	ldr	r0, [pc, #160]	; (801a1fc <csv_header+0x188>)
 801a15c:	f000 ff64 	bl	801b028 <memset>
		sprintf(buffer, "humidity ,");
 801a160:	492f      	ldr	r1, [pc, #188]	; (801a220 <csv_header+0x1ac>)
 801a162:	4826      	ldr	r0, [pc, #152]	; (801a1fc <csv_header+0x188>)
 801a164:	f001 ff66 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a168:	4924      	ldr	r1, [pc, #144]	; (801a1fc <csv_header+0x188>)
 801a16a:	4825      	ldr	r0, [pc, #148]	; (801a200 <csv_header+0x18c>)
 801a16c:	f7ff fc46 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a170:	22ff      	movs	r2, #255	; 0xff
 801a172:	2100      	movs	r1, #0
 801a174:	4821      	ldr	r0, [pc, #132]	; (801a1fc <csv_header+0x188>)
 801a176:	f000 ff57 	bl	801b028 <memset>
		sprintf(buffer, "pir ,");
 801a17a:	492a      	ldr	r1, [pc, #168]	; (801a224 <csv_header+0x1b0>)
 801a17c:	481f      	ldr	r0, [pc, #124]	; (801a1fc <csv_header+0x188>)
 801a17e:	f001 ff59 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a182:	491e      	ldr	r1, [pc, #120]	; (801a1fc <csv_header+0x188>)
 801a184:	481e      	ldr	r0, [pc, #120]	; (801a200 <csv_header+0x18c>)
 801a186:	f7ff fc39 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a18a:	22ff      	movs	r2, #255	; 0xff
 801a18c:	2100      	movs	r1, #0
 801a18e:	481b      	ldr	r0, [pc, #108]	; (801a1fc <csv_header+0x188>)
 801a190:	f000 ff4a 	bl	801b028 <memset>
		sprintf(buffer, "pm2.5 ,");
 801a194:	4924      	ldr	r1, [pc, #144]	; (801a228 <csv_header+0x1b4>)
 801a196:	4819      	ldr	r0, [pc, #100]	; (801a1fc <csv_header+0x188>)
 801a198:	f001 ff4c 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a19c:	4917      	ldr	r1, [pc, #92]	; (801a1fc <csv_header+0x188>)
 801a19e:	4818      	ldr	r0, [pc, #96]	; (801a200 <csv_header+0x18c>)
 801a1a0:	f7ff fc2c 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1a4:	22ff      	movs	r2, #255	; 0xff
 801a1a6:	2100      	movs	r1, #0
 801a1a8:	4814      	ldr	r0, [pc, #80]	; (801a1fc <csv_header+0x188>)
 801a1aa:	f000 ff3d 	bl	801b028 <memset>
		sprintf(buffer, "port ,");
 801a1ae:	491f      	ldr	r1, [pc, #124]	; (801a22c <csv_header+0x1b8>)
 801a1b0:	4812      	ldr	r0, [pc, #72]	; (801a1fc <csv_header+0x188>)
 801a1b2:	f001 ff3f 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1b6:	4911      	ldr	r1, [pc, #68]	; (801a1fc <csv_header+0x188>)
 801a1b8:	4811      	ldr	r0, [pc, #68]	; (801a200 <csv_header+0x18c>)
 801a1ba:	f7ff fc1f 	bl	80199fc <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1be:	22ff      	movs	r2, #255	; 0xff
 801a1c0:	2100      	movs	r1, #0
 801a1c2:	480e      	ldr	r0, [pc, #56]	; (801a1fc <csv_header+0x188>)
 801a1c4:	f000 ff30 	bl	801b028 <memset>
		sprintf(buffer, "battery \n\n");
 801a1c8:	4919      	ldr	r1, [pc, #100]	; (801a230 <csv_header+0x1bc>)
 801a1ca:	480c      	ldr	r0, [pc, #48]	; (801a1fc <csv_header+0x188>)
 801a1cc:	f001 ff32 	bl	801c034 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1d0:	490a      	ldr	r1, [pc, #40]	; (801a1fc <csv_header+0x188>)
 801a1d2:	480b      	ldr	r0, [pc, #44]	; (801a200 <csv_header+0x18c>)
 801a1d4:	f7ff fc12 	bl	80199fc <Update_File>

		Unmount_SD("/");
 801a1d8:	4805      	ldr	r0, [pc, #20]	; (801a1f0 <csv_header+0x17c>)
 801a1da:	f7ff fb4d 	bl	8019878 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a1de:	4b05      	ldr	r3, [pc, #20]	; (801a1f4 <csv_header+0x180>)
 801a1e0:	781b      	ldrb	r3, [r3, #0]
 801a1e2:	b25a      	sxtb	r2, r3
 801a1e4:	4b13      	ldr	r3, [pc, #76]	; (801a234 <csv_header+0x1c0>)
 801a1e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


}
 801a1ea:	bf00      	nop
 801a1ec:	bd80      	pop	{r7, pc}
 801a1ee:	bf00      	nop
 801a1f0:	08021150 	.word	0x08021150
 801a1f4:	20002278 	.word	0x20002278
 801a1f8:	080212b4 	.word	0x080212b4
 801a1fc:	200022e4 	.word	0x200022e4
 801a200:	2000227c 	.word	0x2000227c
 801a204:	080212c0 	.word	0x080212c0
 801a208:	080212c8 	.word	0x080212c8
 801a20c:	080212d4 	.word	0x080212d4
 801a210:	080212e0 	.word	0x080212e0
 801a214:	080212e8 	.word	0x080212e8
 801a218:	080212f0 	.word	0x080212f0
 801a21c:	080212f8 	.word	0x080212f8
 801a220:	08021308 	.word	0x08021308
 801a224:	08021314 	.word	0x08021314
 801a228:	0802131c 	.word	0x0802131c
 801a22c:	08021324 	.word	0x08021324
 801a230:	0802132c 	.word	0x0802132c
 801a234:	200014a8 	.word	0x200014a8

0801a238 <filesaving_process>:
void filesaving_process() {
 801a238:	b580      	push	{r7, lr}
 801a23a:	af00      	add	r7, sp, #0
//	__disable_irq();
	memset(buffer,0,sizeof(buffer));
 801a23c:	22ff      	movs	r2, #255	; 0xff
 801a23e:	2100      	movs	r1, #0
 801a240:	4807      	ldr	r0, [pc, #28]	; (801a260 <filesaving_process+0x28>)
 801a242:	f000 fef1 	bl	801b028 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801a246:	4b07      	ldr	r3, [pc, #28]	; (801a264 <filesaving_process+0x2c>)
 801a248:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d002      	beq.n	801a256 <filesaving_process+0x1e>
		csv_update();
 801a250:	f7ff fde0 	bl	8019e14 <csv_update>
	} else {
		json_update();
	}
//	__enable_irq();
}
 801a254:	e001      	b.n	801a25a <filesaving_process+0x22>
		json_update();
 801a256:	f7ff fc8d 	bl	8019b74 <json_update>
}
 801a25a:	bf00      	nop
 801a25c:	bd80      	pop	{r7, pc}
 801a25e:	bf00      	nop
 801a260:	200022e4 	.word	0x200022e4
 801a264:	200014a8 	.word	0x200014a8

0801a268 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801a268:	b580      	push	{r7, lr}
 801a26a:	b08c      	sub	sp, #48	; 0x30
 801a26c:	af04      	add	r7, sp, #16
 801a26e:	6078      	str	r0, [r7, #4]
 801a270:	6039      	str	r1, [r7, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801a272:	482b      	ldr	r0, [pc, #172]	; (801a320 <createfile+0xb8>)
 801a274:	f7ff fad4 	bl	8019820 <Mount_SD>
 801a278:	4603      	mov	r3, r0
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d002      	beq.n	801a284 <createfile+0x1c>
	} else {
	//	__enable_irq();
		return -1;
 801a27e:	f04f 33ff 	mov.w	r3, #4294967295
 801a282:	e049      	b.n	801a318 <createfile+0xb0>
	}
	Unmount_SD("/");
 801a284:	4826      	ldr	r0, [pc, #152]	; (801a320 <createfile+0xb8>)
 801a286:	f7ff faf7 	bl	8019878 <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a28a:	f107 031c 	add.w	r3, r7, #28
 801a28e:	2200      	movs	r2, #0
 801a290:	4619      	mov	r1, r3
 801a292:	4824      	ldr	r0, [pc, #144]	; (801a324 <createfile+0xbc>)
 801a294:	f7ee fd12 	bl	8008cbc <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a298:	f107 0308 	add.w	r3, r7, #8
 801a29c:	2200      	movs	r2, #0
 801a29e:	4619      	mov	r1, r3
 801a2a0:	4820      	ldr	r0, [pc, #128]	; (801a324 <createfile+0xbc>)
 801a2a2:	f7ee fc29 	bl	8008af8 <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 801a2a6:	481e      	ldr	r0, [pc, #120]	; (801a320 <createfile+0xb8>)
 801a2a8:	f7ff faba 	bl	8019820 <Mount_SD>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	4b1d      	ldr	r3, [pc, #116]	; (801a328 <createfile+0xc0>)
 801a2b2:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801a2b4:	4b1c      	ldr	r3, [pc, #112]	; (801a328 <createfile+0xc0>)
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d129      	bne.n	801a310 <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a2bc:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a2be:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a2c0:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a2c2:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a2c4:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a2c6:	4619      	mov	r1, r3
 801a2c8:	683b      	ldr	r3, [r7, #0]
 801a2ca:	9302      	str	r3, [sp, #8]
 801a2cc:	9101      	str	r1, [sp, #4]
 801a2ce:	9200      	str	r2, [sp, #0]
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	687a      	ldr	r2, [r7, #4]
 801a2d4:	4915      	ldr	r1, [pc, #84]	; (801a32c <createfile+0xc4>)
 801a2d6:	4816      	ldr	r0, [pc, #88]	; (801a330 <createfile+0xc8>)
 801a2d8:	f001 feac 	bl	801c034 <siprintf>

		fresult1 = Create_File(filename_with_format);
 801a2dc:	4814      	ldr	r0, [pc, #80]	; (801a330 <createfile+0xc8>)
 801a2de:	f7ff faf3 	bl	80198c8 <Create_File>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	461a      	mov	r2, r3
 801a2e6:	4b10      	ldr	r3, [pc, #64]	; (801a328 <createfile+0xc0>)
 801a2e8:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a2ea:	480d      	ldr	r0, [pc, #52]	; (801a320 <createfile+0xb8>)
 801a2ec:	f7ff fac4 	bl	8019878 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801a2f0:	4b10      	ldr	r3, [pc, #64]	; (801a334 <createfile+0xcc>)
 801a2f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d00d      	beq.n	801a316 <createfile+0xae>
			if (file_already_exist) {
 801a2fa:	4b0f      	ldr	r3, [pc, #60]	; (801a338 <createfile+0xd0>)
 801a2fc:	781b      	ldrb	r3, [r3, #0]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d003      	beq.n	801a30a <createfile+0xa2>
				file_already_exist = 0;
 801a302:	4b0d      	ldr	r3, [pc, #52]	; (801a338 <createfile+0xd0>)
 801a304:	2200      	movs	r2, #0
 801a306:	701a      	strb	r2, [r3, #0]
 801a308:	e005      	b.n	801a316 <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 801a30a:	f7ff feb3 	bl	801a074 <csv_header>
 801a30e:	e002      	b.n	801a316 <createfile+0xae>
			}
		}

	} else {
	//	__enable_irq();
		return -1;
 801a310:	f04f 33ff 	mov.w	r3, #4294967295
 801a314:	e000      	b.n	801a318 <createfile+0xb0>
	}
//	__enable_irq();
	return 0;
 801a316:	2300      	movs	r3, #0
}
 801a318:	4618      	mov	r0, r3
 801a31a:	3720      	adds	r7, #32
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	08021150 	.word	0x08021150
 801a324:	200017f8 	.word	0x200017f8
 801a328:	20002278 	.word	0x20002278
 801a32c:	08021338 	.word	0x08021338
 801a330:	2000227c 	.word	0x2000227c
 801a334:	200014a8 	.word	0x200014a8
 801a338:	200022e0 	.word	0x200022e0

0801a33c <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801a340:	4905      	ldr	r1, [pc, #20]	; (801a358 <MX_USB_DEVICE_DeInit+0x1c>)
 801a342:	4806      	ldr	r0, [pc, #24]	; (801a35c <MX_USB_DEVICE_DeInit+0x20>)
 801a344:	f7f9 f8a8 	bl	8013498 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801a348:	4804      	ldr	r0, [pc, #16]	; (801a35c <MX_USB_DEVICE_DeInit+0x20>)
 801a34a:	f7fb f872 	bl	8015432 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801a34e:	4803      	ldr	r0, [pc, #12]	; (801a35c <MX_USB_DEVICE_DeInit+0x20>)
 801a350:	f7fa fffd 	bl	801534e <USBD_DeInit>

}
 801a354:	bf00      	nop
 801a356:	bd80      	pop	{r7, pc}
 801a358:	2000015c 	.word	0x2000015c
 801a35c:	200023e4 	.word	0x200023e4

0801a360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a364:	2200      	movs	r2, #0
 801a366:	4912      	ldr	r1, [pc, #72]	; (801a3b0 <MX_USB_DEVICE_Init+0x50>)
 801a368:	4812      	ldr	r0, [pc, #72]	; (801a3b4 <MX_USB_DEVICE_Init+0x54>)
 801a36a:	f7fa ffc0 	bl	80152ee <USBD_Init>
 801a36e:	4603      	mov	r3, r0
 801a370:	2b00      	cmp	r3, #0
 801a372:	d001      	beq.n	801a378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a374:	f7e8 fbb0 	bl	8002ad8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a378:	490f      	ldr	r1, [pc, #60]	; (801a3b8 <MX_USB_DEVICE_Init+0x58>)
 801a37a:	480e      	ldr	r0, [pc, #56]	; (801a3b4 <MX_USB_DEVICE_Init+0x54>)
 801a37c:	f7fb f817 	bl	80153ae <USBD_RegisterClass>
 801a380:	4603      	mov	r3, r0
 801a382:	2b00      	cmp	r3, #0
 801a384:	d001      	beq.n	801a38a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a386:	f7e8 fba7 	bl	8002ad8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a38a:	490c      	ldr	r1, [pc, #48]	; (801a3bc <MX_USB_DEVICE_Init+0x5c>)
 801a38c:	4809      	ldr	r0, [pc, #36]	; (801a3b4 <MX_USB_DEVICE_Init+0x54>)
 801a38e:	f7f9 fa8b 	bl	80138a8 <USBD_MSC_RegisterStorage>
 801a392:	4603      	mov	r3, r0
 801a394:	2b00      	cmp	r3, #0
 801a396:	d001      	beq.n	801a39c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a398:	f7e8 fb9e 	bl	8002ad8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a39c:	4805      	ldr	r0, [pc, #20]	; (801a3b4 <MX_USB_DEVICE_Init+0x54>)
 801a39e:	f7fb f83c 	bl	801541a <USBD_Start>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d001      	beq.n	801a3ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a3a8:	f7e8 fb96 	bl	8002ad8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a3ac:	bf00      	nop
 801a3ae:	bd80      	pop	{r7, pc}
 801a3b0:	2000010c 	.word	0x2000010c
 801a3b4:	200023e4 	.word	0x200023e4
 801a3b8:	20000064 	.word	0x20000064
 801a3bc:	2000015c 	.word	0x2000015c

0801a3c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3c0:	b480      	push	{r7}
 801a3c2:	b083      	sub	sp, #12
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	6039      	str	r1, [r7, #0]
 801a3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	2212      	movs	r2, #18
 801a3d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a3d2:	4b03      	ldr	r3, [pc, #12]	; (801a3e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	370c      	adds	r7, #12
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3de:	4770      	bx	lr
 801a3e0:	20000128 	.word	0x20000128

0801a3e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b083      	sub	sp, #12
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	6039      	str	r1, [r7, #0]
 801a3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	2204      	movs	r2, #4
 801a3f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a3f6:	4b03      	ldr	r3, [pc, #12]	; (801a404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	370c      	adds	r7, #12
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a402:	4770      	bx	lr
 801a404:	2000013c 	.word	0x2000013c

0801a408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	4603      	mov	r3, r0
 801a410:	6039      	str	r1, [r7, #0]
 801a412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a414:	79fb      	ldrb	r3, [r7, #7]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d105      	bne.n	801a426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a41a:	683a      	ldr	r2, [r7, #0]
 801a41c:	4907      	ldr	r1, [pc, #28]	; (801a43c <USBD_FS_ProductStrDescriptor+0x34>)
 801a41e:	4808      	ldr	r0, [pc, #32]	; (801a440 <USBD_FS_ProductStrDescriptor+0x38>)
 801a420:	f7fc f9c2 	bl	80167a8 <USBD_GetString>
 801a424:	e004      	b.n	801a430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a426:	683a      	ldr	r2, [r7, #0]
 801a428:	4904      	ldr	r1, [pc, #16]	; (801a43c <USBD_FS_ProductStrDescriptor+0x34>)
 801a42a:	4805      	ldr	r0, [pc, #20]	; (801a440 <USBD_FS_ProductStrDescriptor+0x38>)
 801a42c:	f7fc f9bc 	bl	80167a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a430:	4b02      	ldr	r3, [pc, #8]	; (801a43c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a432:	4618      	mov	r0, r3
 801a434:	3708      	adds	r7, #8
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	bf00      	nop
 801a43c:	200026c0 	.word	0x200026c0
 801a440:	0802134c 	.word	0x0802134c

0801a444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
 801a44a:	4603      	mov	r3, r0
 801a44c:	6039      	str	r1, [r7, #0]
 801a44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a450:	683a      	ldr	r2, [r7, #0]
 801a452:	4904      	ldr	r1, [pc, #16]	; (801a464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a454:	4804      	ldr	r0, [pc, #16]	; (801a468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a456:	f7fc f9a7 	bl	80167a8 <USBD_GetString>
  return USBD_StrDesc;
 801a45a:	4b02      	ldr	r3, [pc, #8]	; (801a464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}
 801a464:	200026c0 	.word	0x200026c0
 801a468:	08021360 	.word	0x08021360

0801a46c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b082      	sub	sp, #8
 801a470:	af00      	add	r7, sp, #0
 801a472:	4603      	mov	r3, r0
 801a474:	6039      	str	r1, [r7, #0]
 801a476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	221a      	movs	r2, #26
 801a47c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a47e:	f000 f843 	bl	801a508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a482:	4b02      	ldr	r3, [pc, #8]	; (801a48c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a484:	4618      	mov	r0, r3
 801a486:	3708      	adds	r7, #8
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}
 801a48c:	20000140 	.word	0x20000140

0801a490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b082      	sub	sp, #8
 801a494:	af00      	add	r7, sp, #0
 801a496:	4603      	mov	r3, r0
 801a498:	6039      	str	r1, [r7, #0]
 801a49a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a49c:	79fb      	ldrb	r3, [r7, #7]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d105      	bne.n	801a4ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4a2:	683a      	ldr	r2, [r7, #0]
 801a4a4:	4907      	ldr	r1, [pc, #28]	; (801a4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4a6:	4808      	ldr	r0, [pc, #32]	; (801a4c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4a8:	f7fc f97e 	bl	80167a8 <USBD_GetString>
 801a4ac:	e004      	b.n	801a4b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4ae:	683a      	ldr	r2, [r7, #0]
 801a4b0:	4904      	ldr	r1, [pc, #16]	; (801a4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4b2:	4805      	ldr	r0, [pc, #20]	; (801a4c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4b4:	f7fc f978 	bl	80167a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4b8:	4b02      	ldr	r3, [pc, #8]	; (801a4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	3708      	adds	r7, #8
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	bd80      	pop	{r7, pc}
 801a4c2:	bf00      	nop
 801a4c4:	200026c0 	.word	0x200026c0
 801a4c8:	08021374 	.word	0x08021374

0801a4cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b082      	sub	sp, #8
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	6039      	str	r1, [r7, #0]
 801a4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a4d8:	79fb      	ldrb	r3, [r7, #7]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d105      	bne.n	801a4ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4de:	683a      	ldr	r2, [r7, #0]
 801a4e0:	4907      	ldr	r1, [pc, #28]	; (801a500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4e2:	4808      	ldr	r0, [pc, #32]	; (801a504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4e4:	f7fc f960 	bl	80167a8 <USBD_GetString>
 801a4e8:	e004      	b.n	801a4f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4ea:	683a      	ldr	r2, [r7, #0]
 801a4ec:	4904      	ldr	r1, [pc, #16]	; (801a500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4ee:	4805      	ldr	r0, [pc, #20]	; (801a504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4f0:	f7fc f95a 	bl	80167a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4f4:	4b02      	ldr	r3, [pc, #8]	; (801a500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	3708      	adds	r7, #8
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
 801a4fe:	bf00      	nop
 801a500:	200026c0 	.word	0x200026c0
 801a504:	08021380 	.word	0x08021380

0801a508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b084      	sub	sp, #16
 801a50c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a50e:	4b0f      	ldr	r3, [pc, #60]	; (801a54c <Get_SerialNum+0x44>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a514:	4b0e      	ldr	r3, [pc, #56]	; (801a550 <Get_SerialNum+0x48>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a51a:	4b0e      	ldr	r3, [pc, #56]	; (801a554 <Get_SerialNum+0x4c>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a520:	68fa      	ldr	r2, [r7, #12]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	4413      	add	r3, r2
 801a526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d009      	beq.n	801a542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a52e:	2208      	movs	r2, #8
 801a530:	4909      	ldr	r1, [pc, #36]	; (801a558 <Get_SerialNum+0x50>)
 801a532:	68f8      	ldr	r0, [r7, #12]
 801a534:	f000 f814 	bl	801a560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a538:	2204      	movs	r2, #4
 801a53a:	4908      	ldr	r1, [pc, #32]	; (801a55c <Get_SerialNum+0x54>)
 801a53c:	68b8      	ldr	r0, [r7, #8]
 801a53e:	f000 f80f 	bl	801a560 <IntToUnicode>
  }
}
 801a542:	bf00      	nop
 801a544:	3710      	adds	r7, #16
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}
 801a54a:	bf00      	nop
 801a54c:	1fff7a10 	.word	0x1fff7a10
 801a550:	1fff7a14 	.word	0x1fff7a14
 801a554:	1fff7a18 	.word	0x1fff7a18
 801a558:	20000142 	.word	0x20000142
 801a55c:	20000152 	.word	0x20000152

0801a560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a560:	b480      	push	{r7}
 801a562:	b087      	sub	sp, #28
 801a564:	af00      	add	r7, sp, #0
 801a566:	60f8      	str	r0, [r7, #12]
 801a568:	60b9      	str	r1, [r7, #8]
 801a56a:	4613      	mov	r3, r2
 801a56c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a56e:	2300      	movs	r3, #0
 801a570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a572:	2300      	movs	r3, #0
 801a574:	75fb      	strb	r3, [r7, #23]
 801a576:	e027      	b.n	801a5c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	0f1b      	lsrs	r3, r3, #28
 801a57c:	2b09      	cmp	r3, #9
 801a57e:	d80b      	bhi.n	801a598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	0f1b      	lsrs	r3, r3, #28
 801a584:	b2da      	uxtb	r2, r3
 801a586:	7dfb      	ldrb	r3, [r7, #23]
 801a588:	005b      	lsls	r3, r3, #1
 801a58a:	4619      	mov	r1, r3
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	440b      	add	r3, r1
 801a590:	3230      	adds	r2, #48	; 0x30
 801a592:	b2d2      	uxtb	r2, r2
 801a594:	701a      	strb	r2, [r3, #0]
 801a596:	e00a      	b.n	801a5ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	0f1b      	lsrs	r3, r3, #28
 801a59c:	b2da      	uxtb	r2, r3
 801a59e:	7dfb      	ldrb	r3, [r7, #23]
 801a5a0:	005b      	lsls	r3, r3, #1
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	440b      	add	r3, r1
 801a5a8:	3237      	adds	r2, #55	; 0x37
 801a5aa:	b2d2      	uxtb	r2, r2
 801a5ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	011b      	lsls	r3, r3, #4
 801a5b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a5b4:	7dfb      	ldrb	r3, [r7, #23]
 801a5b6:	005b      	lsls	r3, r3, #1
 801a5b8:	3301      	adds	r3, #1
 801a5ba:	68ba      	ldr	r2, [r7, #8]
 801a5bc:	4413      	add	r3, r2
 801a5be:	2200      	movs	r2, #0
 801a5c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a5c2:	7dfb      	ldrb	r3, [r7, #23]
 801a5c4:	3301      	adds	r3, #1
 801a5c6:	75fb      	strb	r3, [r7, #23]
 801a5c8:	7dfa      	ldrb	r2, [r7, #23]
 801a5ca:	79fb      	ldrb	r3, [r7, #7]
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d3d3      	bcc.n	801a578 <IntToUnicode+0x18>
  }
}
 801a5d0:	bf00      	nop
 801a5d2:	bf00      	nop
 801a5d4:	371c      	adds	r7, #28
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5dc:	4770      	bx	lr

0801a5de <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801a5de:	b480      	push	{r7}
 801a5e0:	b083      	sub	sp, #12
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801a5e8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	370c      	adds	r7, #12
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f4:	4770      	bx	lr
	...

0801a5f8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b08e      	sub	sp, #56	; 0x38
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	4603      	mov	r3, r0
 801a600:	60b9      	str	r1, [r7, #8]
 801a602:	607a      	str	r2, [r7, #4]
 801a604:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801a606:	23ff      	movs	r3, #255	; 0xff
 801a608:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801a60c:	f107 0314 	add.w	r3, r7, #20
 801a610:	4619      	mov	r1, r3
 801a612:	480a      	ldr	r0, [pc, #40]	; (801a63c <STORAGE_GetCapacity_FS+0x44>)
 801a614:	f7ef fbaa 	bl	8009d6c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61a:	1e5a      	subs	r2, r3, #1
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a622:	b29a      	uxth	r2, r3
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801a628:	2300      	movs	r3, #0
 801a62a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801a62e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801a632:	4618      	mov	r0, r3
 801a634:	3738      	adds	r7, #56	; 0x38
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}
 801a63a:	bf00      	nop
 801a63c:	20001818 	.word	0x20001818

0801a640 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801a640:	b480      	push	{r7}
 801a642:	b083      	sub	sp, #12
 801a644:	af00      	add	r7, sp, #0
 801a646:	4603      	mov	r3, r0
 801a648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801a64a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a64c:	4618      	mov	r0, r3
 801a64e:	370c      	adds	r7, #12
 801a650:	46bd      	mov	sp, r7
 801a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a656:	4770      	bx	lr

0801a658 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801a658:	b480      	push	{r7}
 801a65a:	b083      	sub	sp, #12
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	4603      	mov	r3, r0
 801a660:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801a662:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a664:	4618      	mov	r0, r3
 801a666:	370c      	adds	r7, #12
 801a668:	46bd      	mov	sp, r7
 801a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66e:	4770      	bx	lr

0801a670 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b088      	sub	sp, #32
 801a674:	af02      	add	r7, sp, #8
 801a676:	60b9      	str	r1, [r7, #8]
 801a678:	607a      	str	r2, [r7, #4]
 801a67a:	461a      	mov	r2, r3
 801a67c:	4603      	mov	r3, r0
 801a67e:	73fb      	strb	r3, [r7, #15]
 801a680:	4613      	mov	r3, r2
 801a682:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801a684:	23ff      	movs	r3, #255	; 0xff
 801a686:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801a688:	f7e8 ff8a 	bl	80035a0 <HAL_GetTick>
 801a68c:	4603      	mov	r3, r0
 801a68e:	4a0d      	ldr	r2, [pc, #52]	; (801a6c4 <STORAGE_Read_FS+0x54>)
 801a690:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a692:	89bb      	ldrh	r3, [r7, #12]
 801a694:	f04f 32ff 	mov.w	r2, #4294967295
 801a698:	9200      	str	r2, [sp, #0]
 801a69a:	687a      	ldr	r2, [r7, #4]
 801a69c:	68b9      	ldr	r1, [r7, #8]
 801a69e:	480a      	ldr	r0, [pc, #40]	; (801a6c8 <STORAGE_Read_FS+0x58>)
 801a6a0:	f7ee fe5c 	bl	800935c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a6a4:	bf00      	nop
 801a6a6:	4808      	ldr	r0, [pc, #32]	; (801a6c8 <STORAGE_Read_FS+0x58>)
 801a6a8:	f7ef fb8c 	bl	8009dc4 <HAL_SD_GetCardState>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	2b04      	cmp	r3, #4
 801a6b0:	d1f9      	bne.n	801a6a6 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	3718      	adds	r7, #24
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	bd80      	pop	{r7, pc}
 801a6c2:	bf00      	nop
 801a6c4:	2000172c 	.word	0x2000172c
 801a6c8:	20001818 	.word	0x20001818

0801a6cc <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b088      	sub	sp, #32
 801a6d0:	af02      	add	r7, sp, #8
 801a6d2:	60b9      	str	r1, [r7, #8]
 801a6d4:	607a      	str	r2, [r7, #4]
 801a6d6:	461a      	mov	r2, r3
 801a6d8:	4603      	mov	r3, r0
 801a6da:	73fb      	strb	r3, [r7, #15]
 801a6dc:	4613      	mov	r3, r2
 801a6de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801a6e0:	23ff      	movs	r3, #255	; 0xff
 801a6e2:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a6e4:	89bb      	ldrh	r3, [r7, #12]
 801a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ea:	9200      	str	r2, [sp, #0]
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	68b9      	ldr	r1, [r7, #8]
 801a6f0:	4808      	ldr	r0, [pc, #32]	; (801a714 <STORAGE_Write_FS+0x48>)
 801a6f2:	f7ef f811 	bl	8009718 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a6f6:	bf00      	nop
 801a6f8:	4806      	ldr	r0, [pc, #24]	; (801a714 <STORAGE_Write_FS+0x48>)
 801a6fa:	f7ef fb63 	bl	8009dc4 <HAL_SD_GetCardState>
 801a6fe:	4603      	mov	r3, r0
 801a700:	2b04      	cmp	r3, #4
 801a702:	d1f9      	bne.n	801a6f8 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801a704:	2300      	movs	r3, #0
 801a706:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a708:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801a70c:	4618      	mov	r0, r3
 801a70e:	3718      	adds	r7, #24
 801a710:	46bd      	mov	sp, r7
 801a712:	bd80      	pop	{r7, pc}
 801a714:	20001818 	.word	0x20001818

0801a718 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801a718:	b480      	push	{r7}
 801a71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801a71c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a71e:	4618      	mov	r0, r3
 801a720:	46bd      	mov	sp, r7
 801a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a726:	4770      	bx	lr

0801a728 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b08a      	sub	sp, #40	; 0x28
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a730:	f107 0314 	add.w	r3, r7, #20
 801a734:	2200      	movs	r2, #0
 801a736:	601a      	str	r2, [r3, #0]
 801a738:	605a      	str	r2, [r3, #4]
 801a73a:	609a      	str	r2, [r3, #8]
 801a73c:	60da      	str	r2, [r3, #12]
 801a73e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a748:	d15c      	bne.n	801a804 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a74a:	2300      	movs	r3, #0
 801a74c:	613b      	str	r3, [r7, #16]
 801a74e:	4b2f      	ldr	r3, [pc, #188]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a752:	4a2e      	ldr	r2, [pc, #184]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a754:	f043 0301 	orr.w	r3, r3, #1
 801a758:	6313      	str	r3, [r2, #48]	; 0x30
 801a75a:	4b2c      	ldr	r3, [pc, #176]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a75e:	f003 0301 	and.w	r3, r3, #1
 801a762:	613b      	str	r3, [r7, #16]
 801a764:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a766:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a76a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a76c:	2302      	movs	r3, #2
 801a76e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a770:	2300      	movs	r3, #0
 801a772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a774:	2303      	movs	r3, #3
 801a776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a778:	230a      	movs	r3, #10
 801a77a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a77c:	f107 0314 	add.w	r3, r7, #20
 801a780:	4619      	mov	r1, r3
 801a782:	4823      	ldr	r0, [pc, #140]	; (801a810 <HAL_PCD_MspInit+0xe8>)
 801a784:	f7ea fc70 	bl	8005068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a788:	4b20      	ldr	r3, [pc, #128]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a78c:	4a1f      	ldr	r2, [pc, #124]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a792:	6353      	str	r3, [r2, #52]	; 0x34
 801a794:	2300      	movs	r3, #0
 801a796:	60fb      	str	r3, [r7, #12]
 801a798:	4b1c      	ldr	r3, [pc, #112]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a79c:	4a1b      	ldr	r2, [pc, #108]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a79e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a7a2:	6453      	str	r3, [r2, #68]	; 0x44
 801a7a4:	4b19      	ldr	r3, [pc, #100]	; (801a80c <HAL_PCD_MspInit+0xe4>)
 801a7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a7ac:	60fb      	str	r3, [r7, #12]
 801a7ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	2043      	movs	r0, #67	; 0x43
 801a7b6:	f7e9 fcd6 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a7ba:	2043      	movs	r0, #67	; 0x43
 801a7bc:	f7e9 fcef 	bl	800419e <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	6a1b      	ldr	r3, [r3, #32]
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d11d      	bne.n	801a804 <HAL_PCD_MspInit+0xdc>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 801a7c8:	4b12      	ldr	r3, [pc, #72]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a7ce:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 801a7d0:	4b10      	ldr	r3, [pc, #64]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7d2:	68db      	ldr	r3, [r3, #12]
 801a7d4:	4a0f      	ldr	r2, [pc, #60]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a7da:	60d3      	str	r3, [r2, #12]
 801a7dc:	4b0d      	ldr	r3, [pc, #52]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7de:	689b      	ldr	r3, [r3, #8]
 801a7e0:	4a0c      	ldr	r2, [pc, #48]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a7e6:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 801a7e8:	4b0a      	ldr	r3, [pc, #40]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	4a09      	ldr	r2, [pc, #36]	; (801a814 <HAL_PCD_MspInit+0xec>)
 801a7ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a7f2:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	2100      	movs	r1, #0
 801a7f8:	202a      	movs	r0, #42	; 0x2a
 801a7fa:	f7e9 fcb4 	bl	8004166 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 801a7fe:	202a      	movs	r0, #42	; 0x2a
 801a800:	f7e9 fccd 	bl	800419e <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a804:	bf00      	nop
 801a806:	3728      	adds	r7, #40	; 0x28
 801a808:	46bd      	mov	sp, r7
 801a80a:	bd80      	pop	{r7, pc}
 801a80c:	40023800 	.word	0x40023800
 801a810:	40020000 	.word	0x40020000
 801a814:	40013c00 	.word	0x40013c00

0801a818 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b082      	sub	sp, #8
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a828:	d110      	bne.n	801a84c <HAL_PCD_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801a82a:	4b0a      	ldr	r3, [pc, #40]	; (801a854 <HAL_PCD_MspDeInit+0x3c>)
 801a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a82e:	4a09      	ldr	r2, [pc, #36]	; (801a854 <HAL_PCD_MspDeInit+0x3c>)
 801a830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a834:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801a836:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801a83a:	4807      	ldr	r0, [pc, #28]	; (801a858 <HAL_PCD_MspDeInit+0x40>)
 801a83c:	f7ea fd98 	bl	8005370 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_WKUP_IRQn);
 801a840:	202a      	movs	r0, #42	; 0x2a
 801a842:	f7e9 fcba 	bl	80041ba <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801a846:	2043      	movs	r0, #67	; 0x43
 801a848:	f7e9 fcb7 	bl	80041ba <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801a84c:	bf00      	nop
 801a84e:	3708      	adds	r7, #8
 801a850:	46bd      	mov	sp, r7
 801a852:	bd80      	pop	{r7, pc}
 801a854:	40023800 	.word	0x40023800
 801a858:	40020000 	.word	0x40020000

0801a85c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b082      	sub	sp, #8
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a870:	4619      	mov	r1, r3
 801a872:	4610      	mov	r0, r2
 801a874:	f7fa fe39 	bl	80154ea <USBD_LL_SetupStage>
}
 801a878:	bf00      	nop
 801a87a:	3708      	adds	r7, #8
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bd80      	pop	{r7, pc}

0801a880 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
 801a888:	460b      	mov	r3, r1
 801a88a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a892:	78fa      	ldrb	r2, [r7, #3]
 801a894:	6879      	ldr	r1, [r7, #4]
 801a896:	4613      	mov	r3, r2
 801a898:	00db      	lsls	r3, r3, #3
 801a89a:	4413      	add	r3, r2
 801a89c:	009b      	lsls	r3, r3, #2
 801a89e:	440b      	add	r3, r1
 801a8a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a8a4:	681a      	ldr	r2, [r3, #0]
 801a8a6:	78fb      	ldrb	r3, [r7, #3]
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	f7fa fe73 	bl	8015594 <USBD_LL_DataOutStage>
}
 801a8ae:	bf00      	nop
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}

0801a8b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8b6:	b580      	push	{r7, lr}
 801a8b8:	b082      	sub	sp, #8
 801a8ba:	af00      	add	r7, sp, #0
 801a8bc:	6078      	str	r0, [r7, #4]
 801a8be:	460b      	mov	r3, r1
 801a8c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a8c8:	78fa      	ldrb	r2, [r7, #3]
 801a8ca:	6879      	ldr	r1, [r7, #4]
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	00db      	lsls	r3, r3, #3
 801a8d0:	4413      	add	r3, r2
 801a8d2:	009b      	lsls	r3, r3, #2
 801a8d4:	440b      	add	r3, r1
 801a8d6:	334c      	adds	r3, #76	; 0x4c
 801a8d8:	681a      	ldr	r2, [r3, #0]
 801a8da:	78fb      	ldrb	r3, [r7, #3]
 801a8dc:	4619      	mov	r1, r3
 801a8de:	f7fa ff0c 	bl	80156fa <USBD_LL_DataInStage>
}
 801a8e2:	bf00      	nop
 801a8e4:	3708      	adds	r7, #8
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}

0801a8ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8ea:	b580      	push	{r7, lr}
 801a8ec:	b082      	sub	sp, #8
 801a8ee:	af00      	add	r7, sp, #0
 801a8f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7fb f840 	bl	801597e <USBD_LL_SOF>
}
 801a8fe:	bf00      	nop
 801a900:	3708      	adds	r7, #8
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}

0801a906 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a906:	b580      	push	{r7, lr}
 801a908:	b084      	sub	sp, #16
 801a90a:	af00      	add	r7, sp, #0
 801a90c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a90e:	2301      	movs	r3, #1
 801a910:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	68db      	ldr	r3, [r3, #12]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d102      	bne.n	801a920 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a91a:	2300      	movs	r3, #0
 801a91c:	73fb      	strb	r3, [r7, #15]
 801a91e:	e008      	b.n	801a932 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	68db      	ldr	r3, [r3, #12]
 801a924:	2b02      	cmp	r3, #2
 801a926:	d102      	bne.n	801a92e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a928:	2301      	movs	r3, #1
 801a92a:	73fb      	strb	r3, [r7, #15]
 801a92c:	e001      	b.n	801a932 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a92e:	f7e8 f8d3 	bl	8002ad8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a938:	7bfa      	ldrb	r2, [r7, #15]
 801a93a:	4611      	mov	r1, r2
 801a93c:	4618      	mov	r0, r3
 801a93e:	f7fa ffe0 	bl	8015902 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a948:	4618      	mov	r0, r3
 801a94a:	f7fa ff88 	bl	801585e <USBD_LL_Reset>
}
 801a94e:	bf00      	nop
 801a950:	3710      	adds	r7, #16
 801a952:	46bd      	mov	sp, r7
 801a954:	bd80      	pop	{r7, pc}
	...

0801a958 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a966:	4618      	mov	r0, r3
 801a968:	f7fa ffdb 	bl	8015922 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	6812      	ldr	r2, [r2, #0]
 801a97a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a97e:	f043 0301 	orr.w	r3, r3, #1
 801a982:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	6a1b      	ldr	r3, [r3, #32]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d005      	beq.n	801a998 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a98c:	4b04      	ldr	r3, [pc, #16]	; (801a9a0 <HAL_PCD_SuspendCallback+0x48>)
 801a98e:	691b      	ldr	r3, [r3, #16]
 801a990:	4a03      	ldr	r2, [pc, #12]	; (801a9a0 <HAL_PCD_SuspendCallback+0x48>)
 801a992:	f043 0306 	orr.w	r3, r3, #6
 801a996:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a998:	bf00      	nop
 801a99a:	3708      	adds	r7, #8
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd80      	pop	{r7, pc}
 801a9a0:	e000ed00 	.word	0xe000ed00

0801a9a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b082      	sub	sp, #8
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7fa ffcb 	bl	801594e <USBD_LL_Resume>
}
 801a9b8:	bf00      	nop
 801a9ba:	3708      	adds	r7, #8
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}

0801a9c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
 801a9c8:	460b      	mov	r3, r1
 801a9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9d2:	78fa      	ldrb	r2, [r7, #3]
 801a9d4:	4611      	mov	r1, r2
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	f7fb f823 	bl	8015a22 <USBD_LL_IsoOUTIncomplete>
}
 801a9dc:	bf00      	nop
 801a9de:	3708      	adds	r7, #8
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b082      	sub	sp, #8
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	460b      	mov	r3, r1
 801a9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9f6:	78fa      	ldrb	r2, [r7, #3]
 801a9f8:	4611      	mov	r1, r2
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7fa ffdf 	bl	80159be <USBD_LL_IsoINIncomplete>
}
 801aa00:	bf00      	nop
 801aa02:	3708      	adds	r7, #8
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7fb f835 	bl	8015a86 <USBD_LL_DevConnected>
}
 801aa1c:	bf00      	nop
 801aa1e:	3708      	adds	r7, #8
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}

0801aa24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa32:	4618      	mov	r0, r3
 801aa34:	f7fb f832 	bl	8015a9c <USBD_LL_DevDisconnected>
}
 801aa38:	bf00      	nop
 801aa3a:	3708      	adds	r7, #8
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	bd80      	pop	{r7, pc}

0801aa40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d13c      	bne.n	801aaca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801aa50:	4a20      	ldr	r2, [pc, #128]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	4a1e      	ldr	r2, [pc, #120]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801aa60:	4b1c      	ldr	r3, [pc, #112]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801aa66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801aa68:	4b1a      	ldr	r3, [pc, #104]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa6a:	2204      	movs	r2, #4
 801aa6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801aa6e:	4b19      	ldr	r3, [pc, #100]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa70:	2202      	movs	r2, #2
 801aa72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801aa74:	4b17      	ldr	r3, [pc, #92]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa76:	2200      	movs	r2, #0
 801aa78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801aa7a:	4b16      	ldr	r3, [pc, #88]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa7c:	2202      	movs	r2, #2
 801aa7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801aa80:	4b14      	ldr	r3, [pc, #80]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa82:	2200      	movs	r2, #0
 801aa84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 801aa86:	4b13      	ldr	r3, [pc, #76]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa88:	2201      	movs	r2, #1
 801aa8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801aa8c:	4b11      	ldr	r3, [pc, #68]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa8e:	2200      	movs	r2, #0
 801aa90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801aa92:	4b10      	ldr	r3, [pc, #64]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa94:	2200      	movs	r2, #0
 801aa96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801aa98:	4b0e      	ldr	r3, [pc, #56]	; (801aad4 <USBD_LL_Init+0x94>)
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801aa9e:	480d      	ldr	r0, [pc, #52]	; (801aad4 <USBD_LL_Init+0x94>)
 801aaa0:	f7eb fea1 	bl	80067e6 <HAL_PCD_Init>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d001      	beq.n	801aaae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801aaaa:	f7e8 f815 	bl	8002ad8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801aaae:	2180      	movs	r1, #128	; 0x80
 801aab0:	4808      	ldr	r0, [pc, #32]	; (801aad4 <USBD_LL_Init+0x94>)
 801aab2:	f7ed f982 	bl	8007dba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801aab6:	2240      	movs	r2, #64	; 0x40
 801aab8:	2100      	movs	r1, #0
 801aaba:	4806      	ldr	r0, [pc, #24]	; (801aad4 <USBD_LL_Init+0x94>)
 801aabc:	f7ed f936 	bl	8007d2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801aac0:	2280      	movs	r2, #128	; 0x80
 801aac2:	2101      	movs	r1, #1
 801aac4:	4803      	ldr	r0, [pc, #12]	; (801aad4 <USBD_LL_Init+0x94>)
 801aac6:	f7ed f931 	bl	8007d2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801aaca:	2300      	movs	r3, #0
}
 801aacc:	4618      	mov	r0, r3
 801aace:	3708      	adds	r7, #8
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}
 801aad4:	200028c0 	.word	0x200028c0

0801aad8 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b084      	sub	sp, #16
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aae0:	2300      	movs	r3, #0
 801aae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aae4:	2300      	movs	r3, #0
 801aae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7eb ff96 	bl	8006a20 <HAL_PCD_DeInit>
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aaf8:	7bfb      	ldrb	r3, [r7, #15]
 801aafa:	4618      	mov	r0, r3
 801aafc:	f000 f998 	bl	801ae30 <USBD_Get_USB_Status>
 801ab00:	4603      	mov	r3, r0
 801ab02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab04:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	3710      	adds	r7, #16
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}

0801ab0e <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab0e:	b580      	push	{r7, lr}
 801ab10:	b084      	sub	sp, #16
 801ab12:	af00      	add	r7, sp, #0
 801ab14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab16:	2300      	movs	r3, #0
 801ab18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab24:	4618      	mov	r0, r3
 801ab26:	f7eb ff9e 	bl	8006a66 <HAL_PCD_Start>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab2e:	7bfb      	ldrb	r3, [r7, #15]
 801ab30:	4618      	mov	r0, r3
 801ab32:	f000 f97d 	bl	801ae30 <USBD_Get_USB_Status>
 801ab36:	4603      	mov	r3, r0
 801ab38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab3a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	3710      	adds	r7, #16
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bd80      	pop	{r7, pc}

0801ab44 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b084      	sub	sp, #16
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab50:	2300      	movs	r3, #0
 801ab52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7eb ffb6 	bl	8006acc <HAL_PCD_Stop>
 801ab60:	4603      	mov	r3, r0
 801ab62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab64:	7bfb      	ldrb	r3, [r7, #15]
 801ab66:	4618      	mov	r0, r3
 801ab68:	f000 f962 	bl	801ae30 <USBD_Get_USB_Status>
 801ab6c:	4603      	mov	r3, r0
 801ab6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab70:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab72:	4618      	mov	r0, r3
 801ab74:	3710      	adds	r7, #16
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}

0801ab7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ab7a:	b580      	push	{r7, lr}
 801ab7c:	b084      	sub	sp, #16
 801ab7e:	af00      	add	r7, sp, #0
 801ab80:	6078      	str	r0, [r7, #4]
 801ab82:	4608      	mov	r0, r1
 801ab84:	4611      	mov	r1, r2
 801ab86:	461a      	mov	r2, r3
 801ab88:	4603      	mov	r3, r0
 801ab8a:	70fb      	strb	r3, [r7, #3]
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	70bb      	strb	r3, [r7, #2]
 801ab90:	4613      	mov	r3, r2
 801ab92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab94:	2300      	movs	r3, #0
 801ab96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab98:	2300      	movs	r3, #0
 801ab9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aba2:	78bb      	ldrb	r3, [r7, #2]
 801aba4:	883a      	ldrh	r2, [r7, #0]
 801aba6:	78f9      	ldrb	r1, [r7, #3]
 801aba8:	f7ec fc8d 	bl	80074c6 <HAL_PCD_EP_Open>
 801abac:	4603      	mov	r3, r0
 801abae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abb0:	7bfb      	ldrb	r3, [r7, #15]
 801abb2:	4618      	mov	r0, r3
 801abb4:	f000 f93c 	bl	801ae30 <USBD_Get_USB_Status>
 801abb8:	4603      	mov	r3, r0
 801abba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abbc:	7bbb      	ldrb	r3, [r7, #14]
}
 801abbe:	4618      	mov	r0, r3
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}

0801abc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abc6:	b580      	push	{r7, lr}
 801abc8:	b084      	sub	sp, #16
 801abca:	af00      	add	r7, sp, #0
 801abcc:	6078      	str	r0, [r7, #4]
 801abce:	460b      	mov	r3, r1
 801abd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abd2:	2300      	movs	r3, #0
 801abd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abd6:	2300      	movs	r3, #0
 801abd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abe0:	78fa      	ldrb	r2, [r7, #3]
 801abe2:	4611      	mov	r1, r2
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7ec fcd6 	bl	8007596 <HAL_PCD_EP_Close>
 801abea:	4603      	mov	r3, r0
 801abec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abee:	7bfb      	ldrb	r3, [r7, #15]
 801abf0:	4618      	mov	r0, r3
 801abf2:	f000 f91d 	bl	801ae30 <USBD_Get_USB_Status>
 801abf6:	4603      	mov	r3, r0
 801abf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abfa:	7bbb      	ldrb	r3, [r7, #14]
}
 801abfc:	4618      	mov	r0, r3
 801abfe:	3710      	adds	r7, #16
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b084      	sub	sp, #16
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac10:	2300      	movs	r3, #0
 801ac12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac14:	2300      	movs	r3, #0
 801ac16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac1e:	78fa      	ldrb	r2, [r7, #3]
 801ac20:	4611      	mov	r1, r2
 801ac22:	4618      	mov	r0, r3
 801ac24:	f7ec fe99 	bl	800795a <HAL_PCD_EP_Flush>
 801ac28:	4603      	mov	r3, r0
 801ac2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac2c:	7bfb      	ldrb	r3, [r7, #15]
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f000 f8fe 	bl	801ae30 <USBD_Get_USB_Status>
 801ac34:	4603      	mov	r3, r0
 801ac36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac38:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3710      	adds	r7, #16
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	bd80      	pop	{r7, pc}

0801ac42 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac42:	b580      	push	{r7, lr}
 801ac44:	b084      	sub	sp, #16
 801ac46:	af00      	add	r7, sp, #0
 801ac48:	6078      	str	r0, [r7, #4]
 801ac4a:	460b      	mov	r3, r1
 801ac4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac52:	2300      	movs	r3, #0
 801ac54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac5c:	78fa      	ldrb	r2, [r7, #3]
 801ac5e:	4611      	mov	r1, r2
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7ec fd8f 	bl	8007784 <HAL_PCD_EP_SetStall>
 801ac66:	4603      	mov	r3, r0
 801ac68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac6a:	7bfb      	ldrb	r3, [r7, #15]
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	f000 f8df 	bl	801ae30 <USBD_Get_USB_Status>
 801ac72:	4603      	mov	r3, r0
 801ac74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac76:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac78:	4618      	mov	r0, r3
 801ac7a:	3710      	adds	r7, #16
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bd80      	pop	{r7, pc}

0801ac80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b084      	sub	sp, #16
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
 801ac88:	460b      	mov	r3, r1
 801ac8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac90:	2300      	movs	r3, #0
 801ac92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac9a:	78fa      	ldrb	r2, [r7, #3]
 801ac9c:	4611      	mov	r1, r2
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7ec fdd4 	bl	800784c <HAL_PCD_EP_ClrStall>
 801aca4:	4603      	mov	r3, r0
 801aca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aca8:	7bfb      	ldrb	r3, [r7, #15]
 801acaa:	4618      	mov	r0, r3
 801acac:	f000 f8c0 	bl	801ae30 <USBD_Get_USB_Status>
 801acb0:	4603      	mov	r3, r0
 801acb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acb4:	7bbb      	ldrb	r3, [r7, #14]
}
 801acb6:	4618      	mov	r0, r3
 801acb8:	3710      	adds	r7, #16
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}

0801acbe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acbe:	b480      	push	{r7}
 801acc0:	b085      	sub	sp, #20
 801acc2:	af00      	add	r7, sp, #0
 801acc4:	6078      	str	r0, [r7, #4]
 801acc6:	460b      	mov	r3, r1
 801acc8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acd0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801acd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	da0b      	bge.n	801acf2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acda:	78fb      	ldrb	r3, [r7, #3]
 801acdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ace0:	68f9      	ldr	r1, [r7, #12]
 801ace2:	4613      	mov	r3, r2
 801ace4:	00db      	lsls	r3, r3, #3
 801ace6:	4413      	add	r3, r2
 801ace8:	009b      	lsls	r3, r3, #2
 801acea:	440b      	add	r3, r1
 801acec:	333e      	adds	r3, #62	; 0x3e
 801acee:	781b      	ldrb	r3, [r3, #0]
 801acf0:	e00b      	b.n	801ad0a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801acf2:	78fb      	ldrb	r3, [r7, #3]
 801acf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acf8:	68f9      	ldr	r1, [r7, #12]
 801acfa:	4613      	mov	r3, r2
 801acfc:	00db      	lsls	r3, r3, #3
 801acfe:	4413      	add	r3, r2
 801ad00:	009b      	lsls	r3, r3, #2
 801ad02:	440b      	add	r3, r1
 801ad04:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ad08:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3714      	adds	r7, #20
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad14:	4770      	bx	lr

0801ad16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad16:	b580      	push	{r7, lr}
 801ad18:	b084      	sub	sp, #16
 801ad1a:	af00      	add	r7, sp, #0
 801ad1c:	6078      	str	r0, [r7, #4]
 801ad1e:	460b      	mov	r3, r1
 801ad20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad22:	2300      	movs	r3, #0
 801ad24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad26:	2300      	movs	r3, #0
 801ad28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad30:	78fa      	ldrb	r2, [r7, #3]
 801ad32:	4611      	mov	r1, r2
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7ec fba1 	bl	800747c <HAL_PCD_SetAddress>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad3e:	7bfb      	ldrb	r3, [r7, #15]
 801ad40:	4618      	mov	r0, r3
 801ad42:	f000 f875 	bl	801ae30 <USBD_Get_USB_Status>
 801ad46:	4603      	mov	r3, r0
 801ad48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad4a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3710      	adds	r7, #16
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}

0801ad54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b086      	sub	sp, #24
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	60f8      	str	r0, [r7, #12]
 801ad5c:	607a      	str	r2, [r7, #4]
 801ad5e:	603b      	str	r3, [r7, #0]
 801ad60:	460b      	mov	r3, r1
 801ad62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad64:	2300      	movs	r3, #0
 801ad66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad68:	2300      	movs	r3, #0
 801ad6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad72:	7af9      	ldrb	r1, [r7, #11]
 801ad74:	683b      	ldr	r3, [r7, #0]
 801ad76:	687a      	ldr	r2, [r7, #4]
 801ad78:	f7ec fcba 	bl	80076f0 <HAL_PCD_EP_Transmit>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad80:	7dfb      	ldrb	r3, [r7, #23]
 801ad82:	4618      	mov	r0, r3
 801ad84:	f000 f854 	bl	801ae30 <USBD_Get_USB_Status>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad8c:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad8e:	4618      	mov	r0, r3
 801ad90:	3718      	adds	r7, #24
 801ad92:	46bd      	mov	sp, r7
 801ad94:	bd80      	pop	{r7, pc}

0801ad96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad96:	b580      	push	{r7, lr}
 801ad98:	b086      	sub	sp, #24
 801ad9a:	af00      	add	r7, sp, #0
 801ad9c:	60f8      	str	r0, [r7, #12]
 801ad9e:	607a      	str	r2, [r7, #4]
 801ada0:	603b      	str	r3, [r7, #0]
 801ada2:	460b      	mov	r3, r1
 801ada4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ada6:	2300      	movs	r3, #0
 801ada8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adaa:	2300      	movs	r3, #0
 801adac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801adb4:	7af9      	ldrb	r1, [r7, #11]
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	687a      	ldr	r2, [r7, #4]
 801adba:	f7ec fc36 	bl	800762a <HAL_PCD_EP_Receive>
 801adbe:	4603      	mov	r3, r0
 801adc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adc2:	7dfb      	ldrb	r3, [r7, #23]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f000 f833 	bl	801ae30 <USBD_Get_USB_Status>
 801adca:	4603      	mov	r3, r0
 801adcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adce:	7dbb      	ldrb	r3, [r7, #22]
}
 801add0:	4618      	mov	r0, r3
 801add2:	3718      	adds	r7, #24
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}

0801add8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b082      	sub	sp, #8
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
 801ade0:	460b      	mov	r3, r1
 801ade2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801adea:	78fa      	ldrb	r2, [r7, #3]
 801adec:	4611      	mov	r1, r2
 801adee:	4618      	mov	r0, r3
 801adf0:	f7ec fc66 	bl	80076c0 <HAL_PCD_EP_GetRxCount>
 801adf4:	4603      	mov	r3, r0
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	3708      	adds	r7, #8
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}
	...

0801ae00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b083      	sub	sp, #12
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ae08:	4b03      	ldr	r3, [pc, #12]	; (801ae18 <USBD_static_malloc+0x18>)
}
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	370c      	adds	r7, #12
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae14:	4770      	bx	lr
 801ae16:	bf00      	nop
 801ae18:	20002dcc 	.word	0x20002dcc

0801ae1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae1c:	b480      	push	{r7}
 801ae1e:	b083      	sub	sp, #12
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]

}
 801ae24:	bf00      	nop
 801ae26:	370c      	adds	r7, #12
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae2e:	4770      	bx	lr

0801ae30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae30:	b480      	push	{r7}
 801ae32:	b085      	sub	sp, #20
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	4603      	mov	r3, r0
 801ae38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae3e:	79fb      	ldrb	r3, [r7, #7]
 801ae40:	2b03      	cmp	r3, #3
 801ae42:	d817      	bhi.n	801ae74 <USBD_Get_USB_Status+0x44>
 801ae44:	a201      	add	r2, pc, #4	; (adr r2, 801ae4c <USBD_Get_USB_Status+0x1c>)
 801ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae4a:	bf00      	nop
 801ae4c:	0801ae5d 	.word	0x0801ae5d
 801ae50:	0801ae63 	.word	0x0801ae63
 801ae54:	0801ae69 	.word	0x0801ae69
 801ae58:	0801ae6f 	.word	0x0801ae6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	73fb      	strb	r3, [r7, #15]
    break;
 801ae60:	e00b      	b.n	801ae7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae62:	2303      	movs	r3, #3
 801ae64:	73fb      	strb	r3, [r7, #15]
    break;
 801ae66:	e008      	b.n	801ae7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae68:	2301      	movs	r3, #1
 801ae6a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae6c:	e005      	b.n	801ae7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae6e:	2303      	movs	r3, #3
 801ae70:	73fb      	strb	r3, [r7, #15]
    break;
 801ae72:	e002      	b.n	801ae7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae74:	2303      	movs	r3, #3
 801ae76:	73fb      	strb	r3, [r7, #15]
    break;
 801ae78:	bf00      	nop
  }
  return usb_status;
 801ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3714      	adds	r7, #20
 801ae80:	46bd      	mov	sp, r7
 801ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae86:	4770      	bx	lr

0801ae88 <atoi>:
 801ae88:	220a      	movs	r2, #10
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	f002 b828 	b.w	801cee0 <strtol>

0801ae90 <__errno>:
 801ae90:	4b01      	ldr	r3, [pc, #4]	; (801ae98 <__errno+0x8>)
 801ae92:	6818      	ldr	r0, [r3, #0]
 801ae94:	4770      	bx	lr
 801ae96:	bf00      	nop
 801ae98:	2000017c 	.word	0x2000017c

0801ae9c <_fwrite_r>:
 801ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aea0:	9c08      	ldr	r4, [sp, #32]
 801aea2:	468a      	mov	sl, r1
 801aea4:	4690      	mov	r8, r2
 801aea6:	fb02 f903 	mul.w	r9, r2, r3
 801aeaa:	4605      	mov	r5, r0
 801aeac:	b118      	cbz	r0, 801aeb6 <_fwrite_r+0x1a>
 801aeae:	6983      	ldr	r3, [r0, #24]
 801aeb0:	b90b      	cbnz	r3, 801aeb6 <_fwrite_r+0x1a>
 801aeb2:	f003 f8cd 	bl	801e050 <__sinit>
 801aeb6:	4b26      	ldr	r3, [pc, #152]	; (801af50 <_fwrite_r+0xb4>)
 801aeb8:	429c      	cmp	r4, r3
 801aeba:	d123      	bne.n	801af04 <_fwrite_r+0x68>
 801aebc:	686c      	ldr	r4, [r5, #4]
 801aebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aec0:	07de      	lsls	r6, r3, #31
 801aec2:	d405      	bmi.n	801aed0 <_fwrite_r+0x34>
 801aec4:	89a3      	ldrh	r3, [r4, #12]
 801aec6:	0598      	lsls	r0, r3, #22
 801aec8:	d402      	bmi.n	801aed0 <_fwrite_r+0x34>
 801aeca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aecc:	f000 f879 	bl	801afc2 <__retarget_lock_acquire_recursive>
 801aed0:	89a3      	ldrh	r3, [r4, #12]
 801aed2:	0719      	lsls	r1, r3, #28
 801aed4:	d520      	bpl.n	801af18 <_fwrite_r+0x7c>
 801aed6:	6923      	ldr	r3, [r4, #16]
 801aed8:	b1f3      	cbz	r3, 801af18 <_fwrite_r+0x7c>
 801aeda:	2600      	movs	r6, #0
 801aedc:	454e      	cmp	r6, r9
 801aede:	d029      	beq.n	801af34 <_fwrite_r+0x98>
 801aee0:	68a7      	ldr	r7, [r4, #8]
 801aee2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801aee6:	3f01      	subs	r7, #1
 801aee8:	2f00      	cmp	r7, #0
 801aeea:	60a7      	str	r7, [r4, #8]
 801aeec:	da04      	bge.n	801aef8 <_fwrite_r+0x5c>
 801aeee:	69a3      	ldr	r3, [r4, #24]
 801aef0:	429f      	cmp	r7, r3
 801aef2:	db19      	blt.n	801af28 <_fwrite_r+0x8c>
 801aef4:	290a      	cmp	r1, #10
 801aef6:	d017      	beq.n	801af28 <_fwrite_r+0x8c>
 801aef8:	6823      	ldr	r3, [r4, #0]
 801aefa:	1c5a      	adds	r2, r3, #1
 801aefc:	6022      	str	r2, [r4, #0]
 801aefe:	7019      	strb	r1, [r3, #0]
 801af00:	3601      	adds	r6, #1
 801af02:	e7eb      	b.n	801aedc <_fwrite_r+0x40>
 801af04:	4b13      	ldr	r3, [pc, #76]	; (801af54 <_fwrite_r+0xb8>)
 801af06:	429c      	cmp	r4, r3
 801af08:	d101      	bne.n	801af0e <_fwrite_r+0x72>
 801af0a:	68ac      	ldr	r4, [r5, #8]
 801af0c:	e7d7      	b.n	801aebe <_fwrite_r+0x22>
 801af0e:	4b12      	ldr	r3, [pc, #72]	; (801af58 <_fwrite_r+0xbc>)
 801af10:	429c      	cmp	r4, r3
 801af12:	bf08      	it	eq
 801af14:	68ec      	ldreq	r4, [r5, #12]
 801af16:	e7d2      	b.n	801aebe <_fwrite_r+0x22>
 801af18:	4621      	mov	r1, r4
 801af1a:	4628      	mov	r0, r5
 801af1c:	f002 f876 	bl	801d00c <__swsetup_r>
 801af20:	2800      	cmp	r0, #0
 801af22:	d0da      	beq.n	801aeda <_fwrite_r+0x3e>
 801af24:	2600      	movs	r6, #0
 801af26:	e005      	b.n	801af34 <_fwrite_r+0x98>
 801af28:	4622      	mov	r2, r4
 801af2a:	4628      	mov	r0, r5
 801af2c:	f002 f81c 	bl	801cf68 <__swbuf_r>
 801af30:	3001      	adds	r0, #1
 801af32:	d1e5      	bne.n	801af00 <_fwrite_r+0x64>
 801af34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af36:	07da      	lsls	r2, r3, #31
 801af38:	d405      	bmi.n	801af46 <_fwrite_r+0xaa>
 801af3a:	89a3      	ldrh	r3, [r4, #12]
 801af3c:	059b      	lsls	r3, r3, #22
 801af3e:	d402      	bmi.n	801af46 <_fwrite_r+0xaa>
 801af40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af42:	f000 f83f 	bl	801afc4 <__retarget_lock_release_recursive>
 801af46:	fbb6 f0f8 	udiv	r0, r6, r8
 801af4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af4e:	bf00      	nop
 801af50:	08021cac 	.word	0x08021cac
 801af54:	08021ccc 	.word	0x08021ccc
 801af58:	08021c8c 	.word	0x08021c8c

0801af5c <fwrite>:
 801af5c:	b507      	push	{r0, r1, r2, lr}
 801af5e:	9300      	str	r3, [sp, #0]
 801af60:	4613      	mov	r3, r2
 801af62:	460a      	mov	r2, r1
 801af64:	4601      	mov	r1, r0
 801af66:	4803      	ldr	r0, [pc, #12]	; (801af74 <fwrite+0x18>)
 801af68:	6800      	ldr	r0, [r0, #0]
 801af6a:	f7ff ff97 	bl	801ae9c <_fwrite_r>
 801af6e:	b003      	add	sp, #12
 801af70:	f85d fb04 	ldr.w	pc, [sp], #4
 801af74:	2000017c 	.word	0x2000017c

0801af78 <__libc_init_array>:
 801af78:	b570      	push	{r4, r5, r6, lr}
 801af7a:	4d0d      	ldr	r5, [pc, #52]	; (801afb0 <__libc_init_array+0x38>)
 801af7c:	4c0d      	ldr	r4, [pc, #52]	; (801afb4 <__libc_init_array+0x3c>)
 801af7e:	1b64      	subs	r4, r4, r5
 801af80:	10a4      	asrs	r4, r4, #2
 801af82:	2600      	movs	r6, #0
 801af84:	42a6      	cmp	r6, r4
 801af86:	d109      	bne.n	801af9c <__libc_init_array+0x24>
 801af88:	4d0b      	ldr	r5, [pc, #44]	; (801afb8 <__libc_init_array+0x40>)
 801af8a:	4c0c      	ldr	r4, [pc, #48]	; (801afbc <__libc_init_array+0x44>)
 801af8c:	f004 fdec 	bl	801fb68 <_init>
 801af90:	1b64      	subs	r4, r4, r5
 801af92:	10a4      	asrs	r4, r4, #2
 801af94:	2600      	movs	r6, #0
 801af96:	42a6      	cmp	r6, r4
 801af98:	d105      	bne.n	801afa6 <__libc_init_array+0x2e>
 801af9a:	bd70      	pop	{r4, r5, r6, pc}
 801af9c:	f855 3b04 	ldr.w	r3, [r5], #4
 801afa0:	4798      	blx	r3
 801afa2:	3601      	adds	r6, #1
 801afa4:	e7ee      	b.n	801af84 <__libc_init_array+0xc>
 801afa6:	f855 3b04 	ldr.w	r3, [r5], #4
 801afaa:	4798      	blx	r3
 801afac:	3601      	adds	r6, #1
 801afae:	e7f2      	b.n	801af96 <__libc_init_array+0x1e>
 801afb0:	08021ee0 	.word	0x08021ee0
 801afb4:	08021ee0 	.word	0x08021ee0
 801afb8:	08021ee0 	.word	0x08021ee0
 801afbc:	08021ee4 	.word	0x08021ee4

0801afc0 <__retarget_lock_init_recursive>:
 801afc0:	4770      	bx	lr

0801afc2 <__retarget_lock_acquire_recursive>:
 801afc2:	4770      	bx	lr

0801afc4 <__retarget_lock_release_recursive>:
 801afc4:	4770      	bx	lr
	...

0801afc8 <malloc>:
 801afc8:	4b02      	ldr	r3, [pc, #8]	; (801afd4 <malloc+0xc>)
 801afca:	4601      	mov	r1, r0
 801afcc:	6818      	ldr	r0, [r3, #0]
 801afce:	f000 b89f 	b.w	801b110 <_malloc_r>
 801afd2:	bf00      	nop
 801afd4:	2000017c 	.word	0x2000017c

0801afd8 <memcpy>:
 801afd8:	440a      	add	r2, r1
 801afda:	4291      	cmp	r1, r2
 801afdc:	f100 33ff 	add.w	r3, r0, #4294967295
 801afe0:	d100      	bne.n	801afe4 <memcpy+0xc>
 801afe2:	4770      	bx	lr
 801afe4:	b510      	push	{r4, lr}
 801afe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801afea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801afee:	4291      	cmp	r1, r2
 801aff0:	d1f9      	bne.n	801afe6 <memcpy+0xe>
 801aff2:	bd10      	pop	{r4, pc}

0801aff4 <memmove>:
 801aff4:	4288      	cmp	r0, r1
 801aff6:	b510      	push	{r4, lr}
 801aff8:	eb01 0402 	add.w	r4, r1, r2
 801affc:	d902      	bls.n	801b004 <memmove+0x10>
 801affe:	4284      	cmp	r4, r0
 801b000:	4623      	mov	r3, r4
 801b002:	d807      	bhi.n	801b014 <memmove+0x20>
 801b004:	1e43      	subs	r3, r0, #1
 801b006:	42a1      	cmp	r1, r4
 801b008:	d008      	beq.n	801b01c <memmove+0x28>
 801b00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b012:	e7f8      	b.n	801b006 <memmove+0x12>
 801b014:	4402      	add	r2, r0
 801b016:	4601      	mov	r1, r0
 801b018:	428a      	cmp	r2, r1
 801b01a:	d100      	bne.n	801b01e <memmove+0x2a>
 801b01c:	bd10      	pop	{r4, pc}
 801b01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b026:	e7f7      	b.n	801b018 <memmove+0x24>

0801b028 <memset>:
 801b028:	4402      	add	r2, r0
 801b02a:	4603      	mov	r3, r0
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d100      	bne.n	801b032 <memset+0xa>
 801b030:	4770      	bx	lr
 801b032:	f803 1b01 	strb.w	r1, [r3], #1
 801b036:	e7f9      	b.n	801b02c <memset+0x4>

0801b038 <_free_r>:
 801b038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b03a:	2900      	cmp	r1, #0
 801b03c:	d044      	beq.n	801b0c8 <_free_r+0x90>
 801b03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b042:	9001      	str	r0, [sp, #4]
 801b044:	2b00      	cmp	r3, #0
 801b046:	f1a1 0404 	sub.w	r4, r1, #4
 801b04a:	bfb8      	it	lt
 801b04c:	18e4      	addlt	r4, r4, r3
 801b04e:	f003 fc99 	bl	801e984 <__malloc_lock>
 801b052:	4a1e      	ldr	r2, [pc, #120]	; (801b0cc <_free_r+0x94>)
 801b054:	9801      	ldr	r0, [sp, #4]
 801b056:	6813      	ldr	r3, [r2, #0]
 801b058:	b933      	cbnz	r3, 801b068 <_free_r+0x30>
 801b05a:	6063      	str	r3, [r4, #4]
 801b05c:	6014      	str	r4, [r2, #0]
 801b05e:	b003      	add	sp, #12
 801b060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b064:	f003 bc94 	b.w	801e990 <__malloc_unlock>
 801b068:	42a3      	cmp	r3, r4
 801b06a:	d908      	bls.n	801b07e <_free_r+0x46>
 801b06c:	6825      	ldr	r5, [r4, #0]
 801b06e:	1961      	adds	r1, r4, r5
 801b070:	428b      	cmp	r3, r1
 801b072:	bf01      	itttt	eq
 801b074:	6819      	ldreq	r1, [r3, #0]
 801b076:	685b      	ldreq	r3, [r3, #4]
 801b078:	1949      	addeq	r1, r1, r5
 801b07a:	6021      	streq	r1, [r4, #0]
 801b07c:	e7ed      	b.n	801b05a <_free_r+0x22>
 801b07e:	461a      	mov	r2, r3
 801b080:	685b      	ldr	r3, [r3, #4]
 801b082:	b10b      	cbz	r3, 801b088 <_free_r+0x50>
 801b084:	42a3      	cmp	r3, r4
 801b086:	d9fa      	bls.n	801b07e <_free_r+0x46>
 801b088:	6811      	ldr	r1, [r2, #0]
 801b08a:	1855      	adds	r5, r2, r1
 801b08c:	42a5      	cmp	r5, r4
 801b08e:	d10b      	bne.n	801b0a8 <_free_r+0x70>
 801b090:	6824      	ldr	r4, [r4, #0]
 801b092:	4421      	add	r1, r4
 801b094:	1854      	adds	r4, r2, r1
 801b096:	42a3      	cmp	r3, r4
 801b098:	6011      	str	r1, [r2, #0]
 801b09a:	d1e0      	bne.n	801b05e <_free_r+0x26>
 801b09c:	681c      	ldr	r4, [r3, #0]
 801b09e:	685b      	ldr	r3, [r3, #4]
 801b0a0:	6053      	str	r3, [r2, #4]
 801b0a2:	4421      	add	r1, r4
 801b0a4:	6011      	str	r1, [r2, #0]
 801b0a6:	e7da      	b.n	801b05e <_free_r+0x26>
 801b0a8:	d902      	bls.n	801b0b0 <_free_r+0x78>
 801b0aa:	230c      	movs	r3, #12
 801b0ac:	6003      	str	r3, [r0, #0]
 801b0ae:	e7d6      	b.n	801b05e <_free_r+0x26>
 801b0b0:	6825      	ldr	r5, [r4, #0]
 801b0b2:	1961      	adds	r1, r4, r5
 801b0b4:	428b      	cmp	r3, r1
 801b0b6:	bf04      	itt	eq
 801b0b8:	6819      	ldreq	r1, [r3, #0]
 801b0ba:	685b      	ldreq	r3, [r3, #4]
 801b0bc:	6063      	str	r3, [r4, #4]
 801b0be:	bf04      	itt	eq
 801b0c0:	1949      	addeq	r1, r1, r5
 801b0c2:	6021      	streq	r1, [r4, #0]
 801b0c4:	6054      	str	r4, [r2, #4]
 801b0c6:	e7ca      	b.n	801b05e <_free_r+0x26>
 801b0c8:	b003      	add	sp, #12
 801b0ca:	bd30      	pop	{r4, r5, pc}
 801b0cc:	20003648 	.word	0x20003648

0801b0d0 <sbrk_aligned>:
 801b0d0:	b570      	push	{r4, r5, r6, lr}
 801b0d2:	4e0e      	ldr	r6, [pc, #56]	; (801b10c <sbrk_aligned+0x3c>)
 801b0d4:	460c      	mov	r4, r1
 801b0d6:	6831      	ldr	r1, [r6, #0]
 801b0d8:	4605      	mov	r5, r0
 801b0da:	b911      	cbnz	r1, 801b0e2 <sbrk_aligned+0x12>
 801b0dc:	f000 ff94 	bl	801c008 <_sbrk_r>
 801b0e0:	6030      	str	r0, [r6, #0]
 801b0e2:	4621      	mov	r1, r4
 801b0e4:	4628      	mov	r0, r5
 801b0e6:	f000 ff8f 	bl	801c008 <_sbrk_r>
 801b0ea:	1c43      	adds	r3, r0, #1
 801b0ec:	d00a      	beq.n	801b104 <sbrk_aligned+0x34>
 801b0ee:	1cc4      	adds	r4, r0, #3
 801b0f0:	f024 0403 	bic.w	r4, r4, #3
 801b0f4:	42a0      	cmp	r0, r4
 801b0f6:	d007      	beq.n	801b108 <sbrk_aligned+0x38>
 801b0f8:	1a21      	subs	r1, r4, r0
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	f000 ff84 	bl	801c008 <_sbrk_r>
 801b100:	3001      	adds	r0, #1
 801b102:	d101      	bne.n	801b108 <sbrk_aligned+0x38>
 801b104:	f04f 34ff 	mov.w	r4, #4294967295
 801b108:	4620      	mov	r0, r4
 801b10a:	bd70      	pop	{r4, r5, r6, pc}
 801b10c:	2000364c 	.word	0x2000364c

0801b110 <_malloc_r>:
 801b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b114:	1ccd      	adds	r5, r1, #3
 801b116:	f025 0503 	bic.w	r5, r5, #3
 801b11a:	3508      	adds	r5, #8
 801b11c:	2d0c      	cmp	r5, #12
 801b11e:	bf38      	it	cc
 801b120:	250c      	movcc	r5, #12
 801b122:	2d00      	cmp	r5, #0
 801b124:	4607      	mov	r7, r0
 801b126:	db01      	blt.n	801b12c <_malloc_r+0x1c>
 801b128:	42a9      	cmp	r1, r5
 801b12a:	d905      	bls.n	801b138 <_malloc_r+0x28>
 801b12c:	230c      	movs	r3, #12
 801b12e:	603b      	str	r3, [r7, #0]
 801b130:	2600      	movs	r6, #0
 801b132:	4630      	mov	r0, r6
 801b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b138:	4e2e      	ldr	r6, [pc, #184]	; (801b1f4 <_malloc_r+0xe4>)
 801b13a:	f003 fc23 	bl	801e984 <__malloc_lock>
 801b13e:	6833      	ldr	r3, [r6, #0]
 801b140:	461c      	mov	r4, r3
 801b142:	bb34      	cbnz	r4, 801b192 <_malloc_r+0x82>
 801b144:	4629      	mov	r1, r5
 801b146:	4638      	mov	r0, r7
 801b148:	f7ff ffc2 	bl	801b0d0 <sbrk_aligned>
 801b14c:	1c43      	adds	r3, r0, #1
 801b14e:	4604      	mov	r4, r0
 801b150:	d14d      	bne.n	801b1ee <_malloc_r+0xde>
 801b152:	6834      	ldr	r4, [r6, #0]
 801b154:	4626      	mov	r6, r4
 801b156:	2e00      	cmp	r6, #0
 801b158:	d140      	bne.n	801b1dc <_malloc_r+0xcc>
 801b15a:	6823      	ldr	r3, [r4, #0]
 801b15c:	4631      	mov	r1, r6
 801b15e:	4638      	mov	r0, r7
 801b160:	eb04 0803 	add.w	r8, r4, r3
 801b164:	f000 ff50 	bl	801c008 <_sbrk_r>
 801b168:	4580      	cmp	r8, r0
 801b16a:	d13a      	bne.n	801b1e2 <_malloc_r+0xd2>
 801b16c:	6821      	ldr	r1, [r4, #0]
 801b16e:	3503      	adds	r5, #3
 801b170:	1a6d      	subs	r5, r5, r1
 801b172:	f025 0503 	bic.w	r5, r5, #3
 801b176:	3508      	adds	r5, #8
 801b178:	2d0c      	cmp	r5, #12
 801b17a:	bf38      	it	cc
 801b17c:	250c      	movcc	r5, #12
 801b17e:	4629      	mov	r1, r5
 801b180:	4638      	mov	r0, r7
 801b182:	f7ff ffa5 	bl	801b0d0 <sbrk_aligned>
 801b186:	3001      	adds	r0, #1
 801b188:	d02b      	beq.n	801b1e2 <_malloc_r+0xd2>
 801b18a:	6823      	ldr	r3, [r4, #0]
 801b18c:	442b      	add	r3, r5
 801b18e:	6023      	str	r3, [r4, #0]
 801b190:	e00e      	b.n	801b1b0 <_malloc_r+0xa0>
 801b192:	6822      	ldr	r2, [r4, #0]
 801b194:	1b52      	subs	r2, r2, r5
 801b196:	d41e      	bmi.n	801b1d6 <_malloc_r+0xc6>
 801b198:	2a0b      	cmp	r2, #11
 801b19a:	d916      	bls.n	801b1ca <_malloc_r+0xba>
 801b19c:	1961      	adds	r1, r4, r5
 801b19e:	42a3      	cmp	r3, r4
 801b1a0:	6025      	str	r5, [r4, #0]
 801b1a2:	bf18      	it	ne
 801b1a4:	6059      	strne	r1, [r3, #4]
 801b1a6:	6863      	ldr	r3, [r4, #4]
 801b1a8:	bf08      	it	eq
 801b1aa:	6031      	streq	r1, [r6, #0]
 801b1ac:	5162      	str	r2, [r4, r5]
 801b1ae:	604b      	str	r3, [r1, #4]
 801b1b0:	4638      	mov	r0, r7
 801b1b2:	f104 060b 	add.w	r6, r4, #11
 801b1b6:	f003 fbeb 	bl	801e990 <__malloc_unlock>
 801b1ba:	f026 0607 	bic.w	r6, r6, #7
 801b1be:	1d23      	adds	r3, r4, #4
 801b1c0:	1af2      	subs	r2, r6, r3
 801b1c2:	d0b6      	beq.n	801b132 <_malloc_r+0x22>
 801b1c4:	1b9b      	subs	r3, r3, r6
 801b1c6:	50a3      	str	r3, [r4, r2]
 801b1c8:	e7b3      	b.n	801b132 <_malloc_r+0x22>
 801b1ca:	6862      	ldr	r2, [r4, #4]
 801b1cc:	42a3      	cmp	r3, r4
 801b1ce:	bf0c      	ite	eq
 801b1d0:	6032      	streq	r2, [r6, #0]
 801b1d2:	605a      	strne	r2, [r3, #4]
 801b1d4:	e7ec      	b.n	801b1b0 <_malloc_r+0xa0>
 801b1d6:	4623      	mov	r3, r4
 801b1d8:	6864      	ldr	r4, [r4, #4]
 801b1da:	e7b2      	b.n	801b142 <_malloc_r+0x32>
 801b1dc:	4634      	mov	r4, r6
 801b1de:	6876      	ldr	r6, [r6, #4]
 801b1e0:	e7b9      	b.n	801b156 <_malloc_r+0x46>
 801b1e2:	230c      	movs	r3, #12
 801b1e4:	603b      	str	r3, [r7, #0]
 801b1e6:	4638      	mov	r0, r7
 801b1e8:	f003 fbd2 	bl	801e990 <__malloc_unlock>
 801b1ec:	e7a1      	b.n	801b132 <_malloc_r+0x22>
 801b1ee:	6025      	str	r5, [r4, #0]
 801b1f0:	e7de      	b.n	801b1b0 <_malloc_r+0xa0>
 801b1f2:	bf00      	nop
 801b1f4:	20003648 	.word	0x20003648

0801b1f8 <__cvt>:
 801b1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b1fc:	ec55 4b10 	vmov	r4, r5, d0
 801b200:	2d00      	cmp	r5, #0
 801b202:	460e      	mov	r6, r1
 801b204:	4619      	mov	r1, r3
 801b206:	462b      	mov	r3, r5
 801b208:	bfbb      	ittet	lt
 801b20a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b20e:	461d      	movlt	r5, r3
 801b210:	2300      	movge	r3, #0
 801b212:	232d      	movlt	r3, #45	; 0x2d
 801b214:	700b      	strb	r3, [r1, #0]
 801b216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b218:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b21c:	4691      	mov	r9, r2
 801b21e:	f023 0820 	bic.w	r8, r3, #32
 801b222:	bfbc      	itt	lt
 801b224:	4622      	movlt	r2, r4
 801b226:	4614      	movlt	r4, r2
 801b228:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b22c:	d005      	beq.n	801b23a <__cvt+0x42>
 801b22e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b232:	d100      	bne.n	801b236 <__cvt+0x3e>
 801b234:	3601      	adds	r6, #1
 801b236:	2102      	movs	r1, #2
 801b238:	e000      	b.n	801b23c <__cvt+0x44>
 801b23a:	2103      	movs	r1, #3
 801b23c:	ab03      	add	r3, sp, #12
 801b23e:	9301      	str	r3, [sp, #4]
 801b240:	ab02      	add	r3, sp, #8
 801b242:	9300      	str	r3, [sp, #0]
 801b244:	ec45 4b10 	vmov	d0, r4, r5
 801b248:	4653      	mov	r3, sl
 801b24a:	4632      	mov	r2, r6
 801b24c:	f001 fff8 	bl	801d240 <_dtoa_r>
 801b250:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b254:	4607      	mov	r7, r0
 801b256:	d102      	bne.n	801b25e <__cvt+0x66>
 801b258:	f019 0f01 	tst.w	r9, #1
 801b25c:	d022      	beq.n	801b2a4 <__cvt+0xac>
 801b25e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b262:	eb07 0906 	add.w	r9, r7, r6
 801b266:	d110      	bne.n	801b28a <__cvt+0x92>
 801b268:	783b      	ldrb	r3, [r7, #0]
 801b26a:	2b30      	cmp	r3, #48	; 0x30
 801b26c:	d10a      	bne.n	801b284 <__cvt+0x8c>
 801b26e:	2200      	movs	r2, #0
 801b270:	2300      	movs	r3, #0
 801b272:	4620      	mov	r0, r4
 801b274:	4629      	mov	r1, r5
 801b276:	f7e5 fc3f 	bl	8000af8 <__aeabi_dcmpeq>
 801b27a:	b918      	cbnz	r0, 801b284 <__cvt+0x8c>
 801b27c:	f1c6 0601 	rsb	r6, r6, #1
 801b280:	f8ca 6000 	str.w	r6, [sl]
 801b284:	f8da 3000 	ldr.w	r3, [sl]
 801b288:	4499      	add	r9, r3
 801b28a:	2200      	movs	r2, #0
 801b28c:	2300      	movs	r3, #0
 801b28e:	4620      	mov	r0, r4
 801b290:	4629      	mov	r1, r5
 801b292:	f7e5 fc31 	bl	8000af8 <__aeabi_dcmpeq>
 801b296:	b108      	cbz	r0, 801b29c <__cvt+0xa4>
 801b298:	f8cd 900c 	str.w	r9, [sp, #12]
 801b29c:	2230      	movs	r2, #48	; 0x30
 801b29e:	9b03      	ldr	r3, [sp, #12]
 801b2a0:	454b      	cmp	r3, r9
 801b2a2:	d307      	bcc.n	801b2b4 <__cvt+0xbc>
 801b2a4:	9b03      	ldr	r3, [sp, #12]
 801b2a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b2a8:	1bdb      	subs	r3, r3, r7
 801b2aa:	4638      	mov	r0, r7
 801b2ac:	6013      	str	r3, [r2, #0]
 801b2ae:	b004      	add	sp, #16
 801b2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2b4:	1c59      	adds	r1, r3, #1
 801b2b6:	9103      	str	r1, [sp, #12]
 801b2b8:	701a      	strb	r2, [r3, #0]
 801b2ba:	e7f0      	b.n	801b29e <__cvt+0xa6>

0801b2bc <__exponent>:
 801b2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b2be:	4603      	mov	r3, r0
 801b2c0:	2900      	cmp	r1, #0
 801b2c2:	bfb8      	it	lt
 801b2c4:	4249      	neglt	r1, r1
 801b2c6:	f803 2b02 	strb.w	r2, [r3], #2
 801b2ca:	bfb4      	ite	lt
 801b2cc:	222d      	movlt	r2, #45	; 0x2d
 801b2ce:	222b      	movge	r2, #43	; 0x2b
 801b2d0:	2909      	cmp	r1, #9
 801b2d2:	7042      	strb	r2, [r0, #1]
 801b2d4:	dd2a      	ble.n	801b32c <__exponent+0x70>
 801b2d6:	f10d 0407 	add.w	r4, sp, #7
 801b2da:	46a4      	mov	ip, r4
 801b2dc:	270a      	movs	r7, #10
 801b2de:	46a6      	mov	lr, r4
 801b2e0:	460a      	mov	r2, r1
 801b2e2:	fb91 f6f7 	sdiv	r6, r1, r7
 801b2e6:	fb07 1516 	mls	r5, r7, r6, r1
 801b2ea:	3530      	adds	r5, #48	; 0x30
 801b2ec:	2a63      	cmp	r2, #99	; 0x63
 801b2ee:	f104 34ff 	add.w	r4, r4, #4294967295
 801b2f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b2f6:	4631      	mov	r1, r6
 801b2f8:	dcf1      	bgt.n	801b2de <__exponent+0x22>
 801b2fa:	3130      	adds	r1, #48	; 0x30
 801b2fc:	f1ae 0502 	sub.w	r5, lr, #2
 801b300:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b304:	1c44      	adds	r4, r0, #1
 801b306:	4629      	mov	r1, r5
 801b308:	4561      	cmp	r1, ip
 801b30a:	d30a      	bcc.n	801b322 <__exponent+0x66>
 801b30c:	f10d 0209 	add.w	r2, sp, #9
 801b310:	eba2 020e 	sub.w	r2, r2, lr
 801b314:	4565      	cmp	r5, ip
 801b316:	bf88      	it	hi
 801b318:	2200      	movhi	r2, #0
 801b31a:	4413      	add	r3, r2
 801b31c:	1a18      	subs	r0, r3, r0
 801b31e:	b003      	add	sp, #12
 801b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b322:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b326:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b32a:	e7ed      	b.n	801b308 <__exponent+0x4c>
 801b32c:	2330      	movs	r3, #48	; 0x30
 801b32e:	3130      	adds	r1, #48	; 0x30
 801b330:	7083      	strb	r3, [r0, #2]
 801b332:	70c1      	strb	r1, [r0, #3]
 801b334:	1d03      	adds	r3, r0, #4
 801b336:	e7f1      	b.n	801b31c <__exponent+0x60>

0801b338 <_printf_float>:
 801b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b33c:	ed2d 8b02 	vpush	{d8}
 801b340:	b08d      	sub	sp, #52	; 0x34
 801b342:	460c      	mov	r4, r1
 801b344:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b348:	4616      	mov	r6, r2
 801b34a:	461f      	mov	r7, r3
 801b34c:	4605      	mov	r5, r0
 801b34e:	f003 fa9d 	bl	801e88c <_localeconv_r>
 801b352:	f8d0 a000 	ldr.w	sl, [r0]
 801b356:	4650      	mov	r0, sl
 801b358:	f7e4 ff4c 	bl	80001f4 <strlen>
 801b35c:	2300      	movs	r3, #0
 801b35e:	930a      	str	r3, [sp, #40]	; 0x28
 801b360:	6823      	ldr	r3, [r4, #0]
 801b362:	9305      	str	r3, [sp, #20]
 801b364:	f8d8 3000 	ldr.w	r3, [r8]
 801b368:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b36c:	3307      	adds	r3, #7
 801b36e:	f023 0307 	bic.w	r3, r3, #7
 801b372:	f103 0208 	add.w	r2, r3, #8
 801b376:	f8c8 2000 	str.w	r2, [r8]
 801b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b382:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b38a:	9307      	str	r3, [sp, #28]
 801b38c:	f8cd 8018 	str.w	r8, [sp, #24]
 801b390:	ee08 0a10 	vmov	s16, r0
 801b394:	4b9f      	ldr	r3, [pc, #636]	; (801b614 <_printf_float+0x2dc>)
 801b396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b39a:	f04f 32ff 	mov.w	r2, #4294967295
 801b39e:	f7e5 fbdd 	bl	8000b5c <__aeabi_dcmpun>
 801b3a2:	bb88      	cbnz	r0, 801b408 <_printf_float+0xd0>
 801b3a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b3a8:	4b9a      	ldr	r3, [pc, #616]	; (801b614 <_printf_float+0x2dc>)
 801b3aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b3ae:	f7e5 fbb7 	bl	8000b20 <__aeabi_dcmple>
 801b3b2:	bb48      	cbnz	r0, 801b408 <_printf_float+0xd0>
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	4640      	mov	r0, r8
 801b3ba:	4649      	mov	r1, r9
 801b3bc:	f7e5 fba6 	bl	8000b0c <__aeabi_dcmplt>
 801b3c0:	b110      	cbz	r0, 801b3c8 <_printf_float+0x90>
 801b3c2:	232d      	movs	r3, #45	; 0x2d
 801b3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3c8:	4b93      	ldr	r3, [pc, #588]	; (801b618 <_printf_float+0x2e0>)
 801b3ca:	4894      	ldr	r0, [pc, #592]	; (801b61c <_printf_float+0x2e4>)
 801b3cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b3d0:	bf94      	ite	ls
 801b3d2:	4698      	movls	r8, r3
 801b3d4:	4680      	movhi	r8, r0
 801b3d6:	2303      	movs	r3, #3
 801b3d8:	6123      	str	r3, [r4, #16]
 801b3da:	9b05      	ldr	r3, [sp, #20]
 801b3dc:	f023 0204 	bic.w	r2, r3, #4
 801b3e0:	6022      	str	r2, [r4, #0]
 801b3e2:	f04f 0900 	mov.w	r9, #0
 801b3e6:	9700      	str	r7, [sp, #0]
 801b3e8:	4633      	mov	r3, r6
 801b3ea:	aa0b      	add	r2, sp, #44	; 0x2c
 801b3ec:	4621      	mov	r1, r4
 801b3ee:	4628      	mov	r0, r5
 801b3f0:	f000 f9d8 	bl	801b7a4 <_printf_common>
 801b3f4:	3001      	adds	r0, #1
 801b3f6:	f040 8090 	bne.w	801b51a <_printf_float+0x1e2>
 801b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 801b3fe:	b00d      	add	sp, #52	; 0x34
 801b400:	ecbd 8b02 	vpop	{d8}
 801b404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b408:	4642      	mov	r2, r8
 801b40a:	464b      	mov	r3, r9
 801b40c:	4640      	mov	r0, r8
 801b40e:	4649      	mov	r1, r9
 801b410:	f7e5 fba4 	bl	8000b5c <__aeabi_dcmpun>
 801b414:	b140      	cbz	r0, 801b428 <_printf_float+0xf0>
 801b416:	464b      	mov	r3, r9
 801b418:	2b00      	cmp	r3, #0
 801b41a:	bfbc      	itt	lt
 801b41c:	232d      	movlt	r3, #45	; 0x2d
 801b41e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b422:	487f      	ldr	r0, [pc, #508]	; (801b620 <_printf_float+0x2e8>)
 801b424:	4b7f      	ldr	r3, [pc, #508]	; (801b624 <_printf_float+0x2ec>)
 801b426:	e7d1      	b.n	801b3cc <_printf_float+0x94>
 801b428:	6863      	ldr	r3, [r4, #4]
 801b42a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b42e:	9206      	str	r2, [sp, #24]
 801b430:	1c5a      	adds	r2, r3, #1
 801b432:	d13f      	bne.n	801b4b4 <_printf_float+0x17c>
 801b434:	2306      	movs	r3, #6
 801b436:	6063      	str	r3, [r4, #4]
 801b438:	9b05      	ldr	r3, [sp, #20]
 801b43a:	6861      	ldr	r1, [r4, #4]
 801b43c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b440:	2300      	movs	r3, #0
 801b442:	9303      	str	r3, [sp, #12]
 801b444:	ab0a      	add	r3, sp, #40	; 0x28
 801b446:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b44a:	ab09      	add	r3, sp, #36	; 0x24
 801b44c:	ec49 8b10 	vmov	d0, r8, r9
 801b450:	9300      	str	r3, [sp, #0]
 801b452:	6022      	str	r2, [r4, #0]
 801b454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b458:	4628      	mov	r0, r5
 801b45a:	f7ff fecd 	bl	801b1f8 <__cvt>
 801b45e:	9b06      	ldr	r3, [sp, #24]
 801b460:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b462:	2b47      	cmp	r3, #71	; 0x47
 801b464:	4680      	mov	r8, r0
 801b466:	d108      	bne.n	801b47a <_printf_float+0x142>
 801b468:	1cc8      	adds	r0, r1, #3
 801b46a:	db02      	blt.n	801b472 <_printf_float+0x13a>
 801b46c:	6863      	ldr	r3, [r4, #4]
 801b46e:	4299      	cmp	r1, r3
 801b470:	dd41      	ble.n	801b4f6 <_printf_float+0x1be>
 801b472:	f1ab 0b02 	sub.w	fp, fp, #2
 801b476:	fa5f fb8b 	uxtb.w	fp, fp
 801b47a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b47e:	d820      	bhi.n	801b4c2 <_printf_float+0x18a>
 801b480:	3901      	subs	r1, #1
 801b482:	465a      	mov	r2, fp
 801b484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b488:	9109      	str	r1, [sp, #36]	; 0x24
 801b48a:	f7ff ff17 	bl	801b2bc <__exponent>
 801b48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b490:	1813      	adds	r3, r2, r0
 801b492:	2a01      	cmp	r2, #1
 801b494:	4681      	mov	r9, r0
 801b496:	6123      	str	r3, [r4, #16]
 801b498:	dc02      	bgt.n	801b4a0 <_printf_float+0x168>
 801b49a:	6822      	ldr	r2, [r4, #0]
 801b49c:	07d2      	lsls	r2, r2, #31
 801b49e:	d501      	bpl.n	801b4a4 <_printf_float+0x16c>
 801b4a0:	3301      	adds	r3, #1
 801b4a2:	6123      	str	r3, [r4, #16]
 801b4a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d09c      	beq.n	801b3e6 <_printf_float+0xae>
 801b4ac:	232d      	movs	r3, #45	; 0x2d
 801b4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4b2:	e798      	b.n	801b3e6 <_printf_float+0xae>
 801b4b4:	9a06      	ldr	r2, [sp, #24]
 801b4b6:	2a47      	cmp	r2, #71	; 0x47
 801b4b8:	d1be      	bne.n	801b438 <_printf_float+0x100>
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d1bc      	bne.n	801b438 <_printf_float+0x100>
 801b4be:	2301      	movs	r3, #1
 801b4c0:	e7b9      	b.n	801b436 <_printf_float+0xfe>
 801b4c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b4c6:	d118      	bne.n	801b4fa <_printf_float+0x1c2>
 801b4c8:	2900      	cmp	r1, #0
 801b4ca:	6863      	ldr	r3, [r4, #4]
 801b4cc:	dd0b      	ble.n	801b4e6 <_printf_float+0x1ae>
 801b4ce:	6121      	str	r1, [r4, #16]
 801b4d0:	b913      	cbnz	r3, 801b4d8 <_printf_float+0x1a0>
 801b4d2:	6822      	ldr	r2, [r4, #0]
 801b4d4:	07d0      	lsls	r0, r2, #31
 801b4d6:	d502      	bpl.n	801b4de <_printf_float+0x1a6>
 801b4d8:	3301      	adds	r3, #1
 801b4da:	440b      	add	r3, r1
 801b4dc:	6123      	str	r3, [r4, #16]
 801b4de:	65a1      	str	r1, [r4, #88]	; 0x58
 801b4e0:	f04f 0900 	mov.w	r9, #0
 801b4e4:	e7de      	b.n	801b4a4 <_printf_float+0x16c>
 801b4e6:	b913      	cbnz	r3, 801b4ee <_printf_float+0x1b6>
 801b4e8:	6822      	ldr	r2, [r4, #0]
 801b4ea:	07d2      	lsls	r2, r2, #31
 801b4ec:	d501      	bpl.n	801b4f2 <_printf_float+0x1ba>
 801b4ee:	3302      	adds	r3, #2
 801b4f0:	e7f4      	b.n	801b4dc <_printf_float+0x1a4>
 801b4f2:	2301      	movs	r3, #1
 801b4f4:	e7f2      	b.n	801b4dc <_printf_float+0x1a4>
 801b4f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4fc:	4299      	cmp	r1, r3
 801b4fe:	db05      	blt.n	801b50c <_printf_float+0x1d4>
 801b500:	6823      	ldr	r3, [r4, #0]
 801b502:	6121      	str	r1, [r4, #16]
 801b504:	07d8      	lsls	r0, r3, #31
 801b506:	d5ea      	bpl.n	801b4de <_printf_float+0x1a6>
 801b508:	1c4b      	adds	r3, r1, #1
 801b50a:	e7e7      	b.n	801b4dc <_printf_float+0x1a4>
 801b50c:	2900      	cmp	r1, #0
 801b50e:	bfd4      	ite	le
 801b510:	f1c1 0202 	rsble	r2, r1, #2
 801b514:	2201      	movgt	r2, #1
 801b516:	4413      	add	r3, r2
 801b518:	e7e0      	b.n	801b4dc <_printf_float+0x1a4>
 801b51a:	6823      	ldr	r3, [r4, #0]
 801b51c:	055a      	lsls	r2, r3, #21
 801b51e:	d407      	bmi.n	801b530 <_printf_float+0x1f8>
 801b520:	6923      	ldr	r3, [r4, #16]
 801b522:	4642      	mov	r2, r8
 801b524:	4631      	mov	r1, r6
 801b526:	4628      	mov	r0, r5
 801b528:	47b8      	blx	r7
 801b52a:	3001      	adds	r0, #1
 801b52c:	d12c      	bne.n	801b588 <_printf_float+0x250>
 801b52e:	e764      	b.n	801b3fa <_printf_float+0xc2>
 801b530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b534:	f240 80e0 	bls.w	801b6f8 <_printf_float+0x3c0>
 801b538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b53c:	2200      	movs	r2, #0
 801b53e:	2300      	movs	r3, #0
 801b540:	f7e5 fada 	bl	8000af8 <__aeabi_dcmpeq>
 801b544:	2800      	cmp	r0, #0
 801b546:	d034      	beq.n	801b5b2 <_printf_float+0x27a>
 801b548:	4a37      	ldr	r2, [pc, #220]	; (801b628 <_printf_float+0x2f0>)
 801b54a:	2301      	movs	r3, #1
 801b54c:	4631      	mov	r1, r6
 801b54e:	4628      	mov	r0, r5
 801b550:	47b8      	blx	r7
 801b552:	3001      	adds	r0, #1
 801b554:	f43f af51 	beq.w	801b3fa <_printf_float+0xc2>
 801b558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b55c:	429a      	cmp	r2, r3
 801b55e:	db02      	blt.n	801b566 <_printf_float+0x22e>
 801b560:	6823      	ldr	r3, [r4, #0]
 801b562:	07d8      	lsls	r0, r3, #31
 801b564:	d510      	bpl.n	801b588 <_printf_float+0x250>
 801b566:	ee18 3a10 	vmov	r3, s16
 801b56a:	4652      	mov	r2, sl
 801b56c:	4631      	mov	r1, r6
 801b56e:	4628      	mov	r0, r5
 801b570:	47b8      	blx	r7
 801b572:	3001      	adds	r0, #1
 801b574:	f43f af41 	beq.w	801b3fa <_printf_float+0xc2>
 801b578:	f04f 0800 	mov.w	r8, #0
 801b57c:	f104 091a 	add.w	r9, r4, #26
 801b580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b582:	3b01      	subs	r3, #1
 801b584:	4543      	cmp	r3, r8
 801b586:	dc09      	bgt.n	801b59c <_printf_float+0x264>
 801b588:	6823      	ldr	r3, [r4, #0]
 801b58a:	079b      	lsls	r3, r3, #30
 801b58c:	f100 8105 	bmi.w	801b79a <_printf_float+0x462>
 801b590:	68e0      	ldr	r0, [r4, #12]
 801b592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b594:	4298      	cmp	r0, r3
 801b596:	bfb8      	it	lt
 801b598:	4618      	movlt	r0, r3
 801b59a:	e730      	b.n	801b3fe <_printf_float+0xc6>
 801b59c:	2301      	movs	r3, #1
 801b59e:	464a      	mov	r2, r9
 801b5a0:	4631      	mov	r1, r6
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	47b8      	blx	r7
 801b5a6:	3001      	adds	r0, #1
 801b5a8:	f43f af27 	beq.w	801b3fa <_printf_float+0xc2>
 801b5ac:	f108 0801 	add.w	r8, r8, #1
 801b5b0:	e7e6      	b.n	801b580 <_printf_float+0x248>
 801b5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	dc39      	bgt.n	801b62c <_printf_float+0x2f4>
 801b5b8:	4a1b      	ldr	r2, [pc, #108]	; (801b628 <_printf_float+0x2f0>)
 801b5ba:	2301      	movs	r3, #1
 801b5bc:	4631      	mov	r1, r6
 801b5be:	4628      	mov	r0, r5
 801b5c0:	47b8      	blx	r7
 801b5c2:	3001      	adds	r0, #1
 801b5c4:	f43f af19 	beq.w	801b3fa <_printf_float+0xc2>
 801b5c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b5cc:	4313      	orrs	r3, r2
 801b5ce:	d102      	bne.n	801b5d6 <_printf_float+0x29e>
 801b5d0:	6823      	ldr	r3, [r4, #0]
 801b5d2:	07d9      	lsls	r1, r3, #31
 801b5d4:	d5d8      	bpl.n	801b588 <_printf_float+0x250>
 801b5d6:	ee18 3a10 	vmov	r3, s16
 801b5da:	4652      	mov	r2, sl
 801b5dc:	4631      	mov	r1, r6
 801b5de:	4628      	mov	r0, r5
 801b5e0:	47b8      	blx	r7
 801b5e2:	3001      	adds	r0, #1
 801b5e4:	f43f af09 	beq.w	801b3fa <_printf_float+0xc2>
 801b5e8:	f04f 0900 	mov.w	r9, #0
 801b5ec:	f104 0a1a 	add.w	sl, r4, #26
 801b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5f2:	425b      	negs	r3, r3
 801b5f4:	454b      	cmp	r3, r9
 801b5f6:	dc01      	bgt.n	801b5fc <_printf_float+0x2c4>
 801b5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5fa:	e792      	b.n	801b522 <_printf_float+0x1ea>
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	4652      	mov	r2, sl
 801b600:	4631      	mov	r1, r6
 801b602:	4628      	mov	r0, r5
 801b604:	47b8      	blx	r7
 801b606:	3001      	adds	r0, #1
 801b608:	f43f aef7 	beq.w	801b3fa <_printf_float+0xc2>
 801b60c:	f109 0901 	add.w	r9, r9, #1
 801b610:	e7ee      	b.n	801b5f0 <_printf_float+0x2b8>
 801b612:	bf00      	nop
 801b614:	7fefffff 	.word	0x7fefffff
 801b618:	080219d4 	.word	0x080219d4
 801b61c:	080219d8 	.word	0x080219d8
 801b620:	080219e0 	.word	0x080219e0
 801b624:	080219dc 	.word	0x080219dc
 801b628:	080219e4 	.word	0x080219e4
 801b62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b630:	429a      	cmp	r2, r3
 801b632:	bfa8      	it	ge
 801b634:	461a      	movge	r2, r3
 801b636:	2a00      	cmp	r2, #0
 801b638:	4691      	mov	r9, r2
 801b63a:	dc37      	bgt.n	801b6ac <_printf_float+0x374>
 801b63c:	f04f 0b00 	mov.w	fp, #0
 801b640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b644:	f104 021a 	add.w	r2, r4, #26
 801b648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b64a:	9305      	str	r3, [sp, #20]
 801b64c:	eba3 0309 	sub.w	r3, r3, r9
 801b650:	455b      	cmp	r3, fp
 801b652:	dc33      	bgt.n	801b6bc <_printf_float+0x384>
 801b654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b658:	429a      	cmp	r2, r3
 801b65a:	db3b      	blt.n	801b6d4 <_printf_float+0x39c>
 801b65c:	6823      	ldr	r3, [r4, #0]
 801b65e:	07da      	lsls	r2, r3, #31
 801b660:	d438      	bmi.n	801b6d4 <_printf_float+0x39c>
 801b662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b664:	9a05      	ldr	r2, [sp, #20]
 801b666:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b668:	1a9a      	subs	r2, r3, r2
 801b66a:	eba3 0901 	sub.w	r9, r3, r1
 801b66e:	4591      	cmp	r9, r2
 801b670:	bfa8      	it	ge
 801b672:	4691      	movge	r9, r2
 801b674:	f1b9 0f00 	cmp.w	r9, #0
 801b678:	dc35      	bgt.n	801b6e6 <_printf_float+0x3ae>
 801b67a:	f04f 0800 	mov.w	r8, #0
 801b67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b682:	f104 0a1a 	add.w	sl, r4, #26
 801b686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b68a:	1a9b      	subs	r3, r3, r2
 801b68c:	eba3 0309 	sub.w	r3, r3, r9
 801b690:	4543      	cmp	r3, r8
 801b692:	f77f af79 	ble.w	801b588 <_printf_float+0x250>
 801b696:	2301      	movs	r3, #1
 801b698:	4652      	mov	r2, sl
 801b69a:	4631      	mov	r1, r6
 801b69c:	4628      	mov	r0, r5
 801b69e:	47b8      	blx	r7
 801b6a0:	3001      	adds	r0, #1
 801b6a2:	f43f aeaa 	beq.w	801b3fa <_printf_float+0xc2>
 801b6a6:	f108 0801 	add.w	r8, r8, #1
 801b6aa:	e7ec      	b.n	801b686 <_printf_float+0x34e>
 801b6ac:	4613      	mov	r3, r2
 801b6ae:	4631      	mov	r1, r6
 801b6b0:	4642      	mov	r2, r8
 801b6b2:	4628      	mov	r0, r5
 801b6b4:	47b8      	blx	r7
 801b6b6:	3001      	adds	r0, #1
 801b6b8:	d1c0      	bne.n	801b63c <_printf_float+0x304>
 801b6ba:	e69e      	b.n	801b3fa <_printf_float+0xc2>
 801b6bc:	2301      	movs	r3, #1
 801b6be:	4631      	mov	r1, r6
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	9205      	str	r2, [sp, #20]
 801b6c4:	47b8      	blx	r7
 801b6c6:	3001      	adds	r0, #1
 801b6c8:	f43f ae97 	beq.w	801b3fa <_printf_float+0xc2>
 801b6cc:	9a05      	ldr	r2, [sp, #20]
 801b6ce:	f10b 0b01 	add.w	fp, fp, #1
 801b6d2:	e7b9      	b.n	801b648 <_printf_float+0x310>
 801b6d4:	ee18 3a10 	vmov	r3, s16
 801b6d8:	4652      	mov	r2, sl
 801b6da:	4631      	mov	r1, r6
 801b6dc:	4628      	mov	r0, r5
 801b6de:	47b8      	blx	r7
 801b6e0:	3001      	adds	r0, #1
 801b6e2:	d1be      	bne.n	801b662 <_printf_float+0x32a>
 801b6e4:	e689      	b.n	801b3fa <_printf_float+0xc2>
 801b6e6:	9a05      	ldr	r2, [sp, #20]
 801b6e8:	464b      	mov	r3, r9
 801b6ea:	4442      	add	r2, r8
 801b6ec:	4631      	mov	r1, r6
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	47b8      	blx	r7
 801b6f2:	3001      	adds	r0, #1
 801b6f4:	d1c1      	bne.n	801b67a <_printf_float+0x342>
 801b6f6:	e680      	b.n	801b3fa <_printf_float+0xc2>
 801b6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b6fa:	2a01      	cmp	r2, #1
 801b6fc:	dc01      	bgt.n	801b702 <_printf_float+0x3ca>
 801b6fe:	07db      	lsls	r3, r3, #31
 801b700:	d538      	bpl.n	801b774 <_printf_float+0x43c>
 801b702:	2301      	movs	r3, #1
 801b704:	4642      	mov	r2, r8
 801b706:	4631      	mov	r1, r6
 801b708:	4628      	mov	r0, r5
 801b70a:	47b8      	blx	r7
 801b70c:	3001      	adds	r0, #1
 801b70e:	f43f ae74 	beq.w	801b3fa <_printf_float+0xc2>
 801b712:	ee18 3a10 	vmov	r3, s16
 801b716:	4652      	mov	r2, sl
 801b718:	4631      	mov	r1, r6
 801b71a:	4628      	mov	r0, r5
 801b71c:	47b8      	blx	r7
 801b71e:	3001      	adds	r0, #1
 801b720:	f43f ae6b 	beq.w	801b3fa <_printf_float+0xc2>
 801b724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b728:	2200      	movs	r2, #0
 801b72a:	2300      	movs	r3, #0
 801b72c:	f7e5 f9e4 	bl	8000af8 <__aeabi_dcmpeq>
 801b730:	b9d8      	cbnz	r0, 801b76a <_printf_float+0x432>
 801b732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b734:	f108 0201 	add.w	r2, r8, #1
 801b738:	3b01      	subs	r3, #1
 801b73a:	4631      	mov	r1, r6
 801b73c:	4628      	mov	r0, r5
 801b73e:	47b8      	blx	r7
 801b740:	3001      	adds	r0, #1
 801b742:	d10e      	bne.n	801b762 <_printf_float+0x42a>
 801b744:	e659      	b.n	801b3fa <_printf_float+0xc2>
 801b746:	2301      	movs	r3, #1
 801b748:	4652      	mov	r2, sl
 801b74a:	4631      	mov	r1, r6
 801b74c:	4628      	mov	r0, r5
 801b74e:	47b8      	blx	r7
 801b750:	3001      	adds	r0, #1
 801b752:	f43f ae52 	beq.w	801b3fa <_printf_float+0xc2>
 801b756:	f108 0801 	add.w	r8, r8, #1
 801b75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b75c:	3b01      	subs	r3, #1
 801b75e:	4543      	cmp	r3, r8
 801b760:	dcf1      	bgt.n	801b746 <_printf_float+0x40e>
 801b762:	464b      	mov	r3, r9
 801b764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b768:	e6dc      	b.n	801b524 <_printf_float+0x1ec>
 801b76a:	f04f 0800 	mov.w	r8, #0
 801b76e:	f104 0a1a 	add.w	sl, r4, #26
 801b772:	e7f2      	b.n	801b75a <_printf_float+0x422>
 801b774:	2301      	movs	r3, #1
 801b776:	4642      	mov	r2, r8
 801b778:	e7df      	b.n	801b73a <_printf_float+0x402>
 801b77a:	2301      	movs	r3, #1
 801b77c:	464a      	mov	r2, r9
 801b77e:	4631      	mov	r1, r6
 801b780:	4628      	mov	r0, r5
 801b782:	47b8      	blx	r7
 801b784:	3001      	adds	r0, #1
 801b786:	f43f ae38 	beq.w	801b3fa <_printf_float+0xc2>
 801b78a:	f108 0801 	add.w	r8, r8, #1
 801b78e:	68e3      	ldr	r3, [r4, #12]
 801b790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b792:	1a5b      	subs	r3, r3, r1
 801b794:	4543      	cmp	r3, r8
 801b796:	dcf0      	bgt.n	801b77a <_printf_float+0x442>
 801b798:	e6fa      	b.n	801b590 <_printf_float+0x258>
 801b79a:	f04f 0800 	mov.w	r8, #0
 801b79e:	f104 0919 	add.w	r9, r4, #25
 801b7a2:	e7f4      	b.n	801b78e <_printf_float+0x456>

0801b7a4 <_printf_common>:
 801b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7a8:	4616      	mov	r6, r2
 801b7aa:	4699      	mov	r9, r3
 801b7ac:	688a      	ldr	r2, [r1, #8]
 801b7ae:	690b      	ldr	r3, [r1, #16]
 801b7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b7b4:	4293      	cmp	r3, r2
 801b7b6:	bfb8      	it	lt
 801b7b8:	4613      	movlt	r3, r2
 801b7ba:	6033      	str	r3, [r6, #0]
 801b7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b7c0:	4607      	mov	r7, r0
 801b7c2:	460c      	mov	r4, r1
 801b7c4:	b10a      	cbz	r2, 801b7ca <_printf_common+0x26>
 801b7c6:	3301      	adds	r3, #1
 801b7c8:	6033      	str	r3, [r6, #0]
 801b7ca:	6823      	ldr	r3, [r4, #0]
 801b7cc:	0699      	lsls	r1, r3, #26
 801b7ce:	bf42      	ittt	mi
 801b7d0:	6833      	ldrmi	r3, [r6, #0]
 801b7d2:	3302      	addmi	r3, #2
 801b7d4:	6033      	strmi	r3, [r6, #0]
 801b7d6:	6825      	ldr	r5, [r4, #0]
 801b7d8:	f015 0506 	ands.w	r5, r5, #6
 801b7dc:	d106      	bne.n	801b7ec <_printf_common+0x48>
 801b7de:	f104 0a19 	add.w	sl, r4, #25
 801b7e2:	68e3      	ldr	r3, [r4, #12]
 801b7e4:	6832      	ldr	r2, [r6, #0]
 801b7e6:	1a9b      	subs	r3, r3, r2
 801b7e8:	42ab      	cmp	r3, r5
 801b7ea:	dc26      	bgt.n	801b83a <_printf_common+0x96>
 801b7ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b7f0:	1e13      	subs	r3, r2, #0
 801b7f2:	6822      	ldr	r2, [r4, #0]
 801b7f4:	bf18      	it	ne
 801b7f6:	2301      	movne	r3, #1
 801b7f8:	0692      	lsls	r2, r2, #26
 801b7fa:	d42b      	bmi.n	801b854 <_printf_common+0xb0>
 801b7fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b800:	4649      	mov	r1, r9
 801b802:	4638      	mov	r0, r7
 801b804:	47c0      	blx	r8
 801b806:	3001      	adds	r0, #1
 801b808:	d01e      	beq.n	801b848 <_printf_common+0xa4>
 801b80a:	6823      	ldr	r3, [r4, #0]
 801b80c:	68e5      	ldr	r5, [r4, #12]
 801b80e:	6832      	ldr	r2, [r6, #0]
 801b810:	f003 0306 	and.w	r3, r3, #6
 801b814:	2b04      	cmp	r3, #4
 801b816:	bf08      	it	eq
 801b818:	1aad      	subeq	r5, r5, r2
 801b81a:	68a3      	ldr	r3, [r4, #8]
 801b81c:	6922      	ldr	r2, [r4, #16]
 801b81e:	bf0c      	ite	eq
 801b820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b824:	2500      	movne	r5, #0
 801b826:	4293      	cmp	r3, r2
 801b828:	bfc4      	itt	gt
 801b82a:	1a9b      	subgt	r3, r3, r2
 801b82c:	18ed      	addgt	r5, r5, r3
 801b82e:	2600      	movs	r6, #0
 801b830:	341a      	adds	r4, #26
 801b832:	42b5      	cmp	r5, r6
 801b834:	d11a      	bne.n	801b86c <_printf_common+0xc8>
 801b836:	2000      	movs	r0, #0
 801b838:	e008      	b.n	801b84c <_printf_common+0xa8>
 801b83a:	2301      	movs	r3, #1
 801b83c:	4652      	mov	r2, sl
 801b83e:	4649      	mov	r1, r9
 801b840:	4638      	mov	r0, r7
 801b842:	47c0      	blx	r8
 801b844:	3001      	adds	r0, #1
 801b846:	d103      	bne.n	801b850 <_printf_common+0xac>
 801b848:	f04f 30ff 	mov.w	r0, #4294967295
 801b84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b850:	3501      	adds	r5, #1
 801b852:	e7c6      	b.n	801b7e2 <_printf_common+0x3e>
 801b854:	18e1      	adds	r1, r4, r3
 801b856:	1c5a      	adds	r2, r3, #1
 801b858:	2030      	movs	r0, #48	; 0x30
 801b85a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b85e:	4422      	add	r2, r4
 801b860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b868:	3302      	adds	r3, #2
 801b86a:	e7c7      	b.n	801b7fc <_printf_common+0x58>
 801b86c:	2301      	movs	r3, #1
 801b86e:	4622      	mov	r2, r4
 801b870:	4649      	mov	r1, r9
 801b872:	4638      	mov	r0, r7
 801b874:	47c0      	blx	r8
 801b876:	3001      	adds	r0, #1
 801b878:	d0e6      	beq.n	801b848 <_printf_common+0xa4>
 801b87a:	3601      	adds	r6, #1
 801b87c:	e7d9      	b.n	801b832 <_printf_common+0x8e>
	...

0801b880 <_printf_i>:
 801b880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b884:	7e0f      	ldrb	r7, [r1, #24]
 801b886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b888:	2f78      	cmp	r7, #120	; 0x78
 801b88a:	4691      	mov	r9, r2
 801b88c:	4680      	mov	r8, r0
 801b88e:	460c      	mov	r4, r1
 801b890:	469a      	mov	sl, r3
 801b892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b896:	d807      	bhi.n	801b8a8 <_printf_i+0x28>
 801b898:	2f62      	cmp	r7, #98	; 0x62
 801b89a:	d80a      	bhi.n	801b8b2 <_printf_i+0x32>
 801b89c:	2f00      	cmp	r7, #0
 801b89e:	f000 80d8 	beq.w	801ba52 <_printf_i+0x1d2>
 801b8a2:	2f58      	cmp	r7, #88	; 0x58
 801b8a4:	f000 80a3 	beq.w	801b9ee <_printf_i+0x16e>
 801b8a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b8ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b8b0:	e03a      	b.n	801b928 <_printf_i+0xa8>
 801b8b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b8b6:	2b15      	cmp	r3, #21
 801b8b8:	d8f6      	bhi.n	801b8a8 <_printf_i+0x28>
 801b8ba:	a101      	add	r1, pc, #4	; (adr r1, 801b8c0 <_printf_i+0x40>)
 801b8bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b8c0:	0801b919 	.word	0x0801b919
 801b8c4:	0801b92d 	.word	0x0801b92d
 801b8c8:	0801b8a9 	.word	0x0801b8a9
 801b8cc:	0801b8a9 	.word	0x0801b8a9
 801b8d0:	0801b8a9 	.word	0x0801b8a9
 801b8d4:	0801b8a9 	.word	0x0801b8a9
 801b8d8:	0801b92d 	.word	0x0801b92d
 801b8dc:	0801b8a9 	.word	0x0801b8a9
 801b8e0:	0801b8a9 	.word	0x0801b8a9
 801b8e4:	0801b8a9 	.word	0x0801b8a9
 801b8e8:	0801b8a9 	.word	0x0801b8a9
 801b8ec:	0801ba39 	.word	0x0801ba39
 801b8f0:	0801b95d 	.word	0x0801b95d
 801b8f4:	0801ba1b 	.word	0x0801ba1b
 801b8f8:	0801b8a9 	.word	0x0801b8a9
 801b8fc:	0801b8a9 	.word	0x0801b8a9
 801b900:	0801ba5b 	.word	0x0801ba5b
 801b904:	0801b8a9 	.word	0x0801b8a9
 801b908:	0801b95d 	.word	0x0801b95d
 801b90c:	0801b8a9 	.word	0x0801b8a9
 801b910:	0801b8a9 	.word	0x0801b8a9
 801b914:	0801ba23 	.word	0x0801ba23
 801b918:	682b      	ldr	r3, [r5, #0]
 801b91a:	1d1a      	adds	r2, r3, #4
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	602a      	str	r2, [r5, #0]
 801b920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b928:	2301      	movs	r3, #1
 801b92a:	e0a3      	b.n	801ba74 <_printf_i+0x1f4>
 801b92c:	6820      	ldr	r0, [r4, #0]
 801b92e:	6829      	ldr	r1, [r5, #0]
 801b930:	0606      	lsls	r6, r0, #24
 801b932:	f101 0304 	add.w	r3, r1, #4
 801b936:	d50a      	bpl.n	801b94e <_printf_i+0xce>
 801b938:	680e      	ldr	r6, [r1, #0]
 801b93a:	602b      	str	r3, [r5, #0]
 801b93c:	2e00      	cmp	r6, #0
 801b93e:	da03      	bge.n	801b948 <_printf_i+0xc8>
 801b940:	232d      	movs	r3, #45	; 0x2d
 801b942:	4276      	negs	r6, r6
 801b944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b948:	485e      	ldr	r0, [pc, #376]	; (801bac4 <_printf_i+0x244>)
 801b94a:	230a      	movs	r3, #10
 801b94c:	e019      	b.n	801b982 <_printf_i+0x102>
 801b94e:	680e      	ldr	r6, [r1, #0]
 801b950:	602b      	str	r3, [r5, #0]
 801b952:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b956:	bf18      	it	ne
 801b958:	b236      	sxthne	r6, r6
 801b95a:	e7ef      	b.n	801b93c <_printf_i+0xbc>
 801b95c:	682b      	ldr	r3, [r5, #0]
 801b95e:	6820      	ldr	r0, [r4, #0]
 801b960:	1d19      	adds	r1, r3, #4
 801b962:	6029      	str	r1, [r5, #0]
 801b964:	0601      	lsls	r1, r0, #24
 801b966:	d501      	bpl.n	801b96c <_printf_i+0xec>
 801b968:	681e      	ldr	r6, [r3, #0]
 801b96a:	e002      	b.n	801b972 <_printf_i+0xf2>
 801b96c:	0646      	lsls	r6, r0, #25
 801b96e:	d5fb      	bpl.n	801b968 <_printf_i+0xe8>
 801b970:	881e      	ldrh	r6, [r3, #0]
 801b972:	4854      	ldr	r0, [pc, #336]	; (801bac4 <_printf_i+0x244>)
 801b974:	2f6f      	cmp	r7, #111	; 0x6f
 801b976:	bf0c      	ite	eq
 801b978:	2308      	moveq	r3, #8
 801b97a:	230a      	movne	r3, #10
 801b97c:	2100      	movs	r1, #0
 801b97e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b982:	6865      	ldr	r5, [r4, #4]
 801b984:	60a5      	str	r5, [r4, #8]
 801b986:	2d00      	cmp	r5, #0
 801b988:	bfa2      	ittt	ge
 801b98a:	6821      	ldrge	r1, [r4, #0]
 801b98c:	f021 0104 	bicge.w	r1, r1, #4
 801b990:	6021      	strge	r1, [r4, #0]
 801b992:	b90e      	cbnz	r6, 801b998 <_printf_i+0x118>
 801b994:	2d00      	cmp	r5, #0
 801b996:	d04d      	beq.n	801ba34 <_printf_i+0x1b4>
 801b998:	4615      	mov	r5, r2
 801b99a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b99e:	fb03 6711 	mls	r7, r3, r1, r6
 801b9a2:	5dc7      	ldrb	r7, [r0, r7]
 801b9a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b9a8:	4637      	mov	r7, r6
 801b9aa:	42bb      	cmp	r3, r7
 801b9ac:	460e      	mov	r6, r1
 801b9ae:	d9f4      	bls.n	801b99a <_printf_i+0x11a>
 801b9b0:	2b08      	cmp	r3, #8
 801b9b2:	d10b      	bne.n	801b9cc <_printf_i+0x14c>
 801b9b4:	6823      	ldr	r3, [r4, #0]
 801b9b6:	07de      	lsls	r6, r3, #31
 801b9b8:	d508      	bpl.n	801b9cc <_printf_i+0x14c>
 801b9ba:	6923      	ldr	r3, [r4, #16]
 801b9bc:	6861      	ldr	r1, [r4, #4]
 801b9be:	4299      	cmp	r1, r3
 801b9c0:	bfde      	ittt	le
 801b9c2:	2330      	movle	r3, #48	; 0x30
 801b9c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b9c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b9cc:	1b52      	subs	r2, r2, r5
 801b9ce:	6122      	str	r2, [r4, #16]
 801b9d0:	f8cd a000 	str.w	sl, [sp]
 801b9d4:	464b      	mov	r3, r9
 801b9d6:	aa03      	add	r2, sp, #12
 801b9d8:	4621      	mov	r1, r4
 801b9da:	4640      	mov	r0, r8
 801b9dc:	f7ff fee2 	bl	801b7a4 <_printf_common>
 801b9e0:	3001      	adds	r0, #1
 801b9e2:	d14c      	bne.n	801ba7e <_printf_i+0x1fe>
 801b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b9e8:	b004      	add	sp, #16
 801b9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9ee:	4835      	ldr	r0, [pc, #212]	; (801bac4 <_printf_i+0x244>)
 801b9f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b9f4:	6829      	ldr	r1, [r5, #0]
 801b9f6:	6823      	ldr	r3, [r4, #0]
 801b9f8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b9fc:	6029      	str	r1, [r5, #0]
 801b9fe:	061d      	lsls	r5, r3, #24
 801ba00:	d514      	bpl.n	801ba2c <_printf_i+0x1ac>
 801ba02:	07df      	lsls	r7, r3, #31
 801ba04:	bf44      	itt	mi
 801ba06:	f043 0320 	orrmi.w	r3, r3, #32
 801ba0a:	6023      	strmi	r3, [r4, #0]
 801ba0c:	b91e      	cbnz	r6, 801ba16 <_printf_i+0x196>
 801ba0e:	6823      	ldr	r3, [r4, #0]
 801ba10:	f023 0320 	bic.w	r3, r3, #32
 801ba14:	6023      	str	r3, [r4, #0]
 801ba16:	2310      	movs	r3, #16
 801ba18:	e7b0      	b.n	801b97c <_printf_i+0xfc>
 801ba1a:	6823      	ldr	r3, [r4, #0]
 801ba1c:	f043 0320 	orr.w	r3, r3, #32
 801ba20:	6023      	str	r3, [r4, #0]
 801ba22:	2378      	movs	r3, #120	; 0x78
 801ba24:	4828      	ldr	r0, [pc, #160]	; (801bac8 <_printf_i+0x248>)
 801ba26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ba2a:	e7e3      	b.n	801b9f4 <_printf_i+0x174>
 801ba2c:	0659      	lsls	r1, r3, #25
 801ba2e:	bf48      	it	mi
 801ba30:	b2b6      	uxthmi	r6, r6
 801ba32:	e7e6      	b.n	801ba02 <_printf_i+0x182>
 801ba34:	4615      	mov	r5, r2
 801ba36:	e7bb      	b.n	801b9b0 <_printf_i+0x130>
 801ba38:	682b      	ldr	r3, [r5, #0]
 801ba3a:	6826      	ldr	r6, [r4, #0]
 801ba3c:	6961      	ldr	r1, [r4, #20]
 801ba3e:	1d18      	adds	r0, r3, #4
 801ba40:	6028      	str	r0, [r5, #0]
 801ba42:	0635      	lsls	r5, r6, #24
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	d501      	bpl.n	801ba4c <_printf_i+0x1cc>
 801ba48:	6019      	str	r1, [r3, #0]
 801ba4a:	e002      	b.n	801ba52 <_printf_i+0x1d2>
 801ba4c:	0670      	lsls	r0, r6, #25
 801ba4e:	d5fb      	bpl.n	801ba48 <_printf_i+0x1c8>
 801ba50:	8019      	strh	r1, [r3, #0]
 801ba52:	2300      	movs	r3, #0
 801ba54:	6123      	str	r3, [r4, #16]
 801ba56:	4615      	mov	r5, r2
 801ba58:	e7ba      	b.n	801b9d0 <_printf_i+0x150>
 801ba5a:	682b      	ldr	r3, [r5, #0]
 801ba5c:	1d1a      	adds	r2, r3, #4
 801ba5e:	602a      	str	r2, [r5, #0]
 801ba60:	681d      	ldr	r5, [r3, #0]
 801ba62:	6862      	ldr	r2, [r4, #4]
 801ba64:	2100      	movs	r1, #0
 801ba66:	4628      	mov	r0, r5
 801ba68:	f7e4 fbd2 	bl	8000210 <memchr>
 801ba6c:	b108      	cbz	r0, 801ba72 <_printf_i+0x1f2>
 801ba6e:	1b40      	subs	r0, r0, r5
 801ba70:	6060      	str	r0, [r4, #4]
 801ba72:	6863      	ldr	r3, [r4, #4]
 801ba74:	6123      	str	r3, [r4, #16]
 801ba76:	2300      	movs	r3, #0
 801ba78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba7c:	e7a8      	b.n	801b9d0 <_printf_i+0x150>
 801ba7e:	6923      	ldr	r3, [r4, #16]
 801ba80:	462a      	mov	r2, r5
 801ba82:	4649      	mov	r1, r9
 801ba84:	4640      	mov	r0, r8
 801ba86:	47d0      	blx	sl
 801ba88:	3001      	adds	r0, #1
 801ba8a:	d0ab      	beq.n	801b9e4 <_printf_i+0x164>
 801ba8c:	6823      	ldr	r3, [r4, #0]
 801ba8e:	079b      	lsls	r3, r3, #30
 801ba90:	d413      	bmi.n	801baba <_printf_i+0x23a>
 801ba92:	68e0      	ldr	r0, [r4, #12]
 801ba94:	9b03      	ldr	r3, [sp, #12]
 801ba96:	4298      	cmp	r0, r3
 801ba98:	bfb8      	it	lt
 801ba9a:	4618      	movlt	r0, r3
 801ba9c:	e7a4      	b.n	801b9e8 <_printf_i+0x168>
 801ba9e:	2301      	movs	r3, #1
 801baa0:	4632      	mov	r2, r6
 801baa2:	4649      	mov	r1, r9
 801baa4:	4640      	mov	r0, r8
 801baa6:	47d0      	blx	sl
 801baa8:	3001      	adds	r0, #1
 801baaa:	d09b      	beq.n	801b9e4 <_printf_i+0x164>
 801baac:	3501      	adds	r5, #1
 801baae:	68e3      	ldr	r3, [r4, #12]
 801bab0:	9903      	ldr	r1, [sp, #12]
 801bab2:	1a5b      	subs	r3, r3, r1
 801bab4:	42ab      	cmp	r3, r5
 801bab6:	dcf2      	bgt.n	801ba9e <_printf_i+0x21e>
 801bab8:	e7eb      	b.n	801ba92 <_printf_i+0x212>
 801baba:	2500      	movs	r5, #0
 801babc:	f104 0619 	add.w	r6, r4, #25
 801bac0:	e7f5      	b.n	801baae <_printf_i+0x22e>
 801bac2:	bf00      	nop
 801bac4:	080219e6 	.word	0x080219e6
 801bac8:	080219f7 	.word	0x080219f7

0801bacc <_scanf_float>:
 801bacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bad0:	b087      	sub	sp, #28
 801bad2:	4617      	mov	r7, r2
 801bad4:	9303      	str	r3, [sp, #12]
 801bad6:	688b      	ldr	r3, [r1, #8]
 801bad8:	1e5a      	subs	r2, r3, #1
 801bada:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bade:	bf83      	ittte	hi
 801bae0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bae4:	195b      	addhi	r3, r3, r5
 801bae6:	9302      	strhi	r3, [sp, #8]
 801bae8:	2300      	movls	r3, #0
 801baea:	bf86      	itte	hi
 801baec:	f240 135d 	movwhi	r3, #349	; 0x15d
 801baf0:	608b      	strhi	r3, [r1, #8]
 801baf2:	9302      	strls	r3, [sp, #8]
 801baf4:	680b      	ldr	r3, [r1, #0]
 801baf6:	468b      	mov	fp, r1
 801baf8:	2500      	movs	r5, #0
 801bafa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801bafe:	f84b 3b1c 	str.w	r3, [fp], #28
 801bb02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bb06:	4680      	mov	r8, r0
 801bb08:	460c      	mov	r4, r1
 801bb0a:	465e      	mov	r6, fp
 801bb0c:	46aa      	mov	sl, r5
 801bb0e:	46a9      	mov	r9, r5
 801bb10:	9501      	str	r5, [sp, #4]
 801bb12:	68a2      	ldr	r2, [r4, #8]
 801bb14:	b152      	cbz	r2, 801bb2c <_scanf_float+0x60>
 801bb16:	683b      	ldr	r3, [r7, #0]
 801bb18:	781b      	ldrb	r3, [r3, #0]
 801bb1a:	2b4e      	cmp	r3, #78	; 0x4e
 801bb1c:	d864      	bhi.n	801bbe8 <_scanf_float+0x11c>
 801bb1e:	2b40      	cmp	r3, #64	; 0x40
 801bb20:	d83c      	bhi.n	801bb9c <_scanf_float+0xd0>
 801bb22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801bb26:	b2c8      	uxtb	r0, r1
 801bb28:	280e      	cmp	r0, #14
 801bb2a:	d93a      	bls.n	801bba2 <_scanf_float+0xd6>
 801bb2c:	f1b9 0f00 	cmp.w	r9, #0
 801bb30:	d003      	beq.n	801bb3a <_scanf_float+0x6e>
 801bb32:	6823      	ldr	r3, [r4, #0]
 801bb34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bb38:	6023      	str	r3, [r4, #0]
 801bb3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb3e:	f1ba 0f01 	cmp.w	sl, #1
 801bb42:	f200 8113 	bhi.w	801bd6c <_scanf_float+0x2a0>
 801bb46:	455e      	cmp	r6, fp
 801bb48:	f200 8105 	bhi.w	801bd56 <_scanf_float+0x28a>
 801bb4c:	2501      	movs	r5, #1
 801bb4e:	4628      	mov	r0, r5
 801bb50:	b007      	add	sp, #28
 801bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801bb5a:	2a0d      	cmp	r2, #13
 801bb5c:	d8e6      	bhi.n	801bb2c <_scanf_float+0x60>
 801bb5e:	a101      	add	r1, pc, #4	; (adr r1, 801bb64 <_scanf_float+0x98>)
 801bb60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bb64:	0801bca3 	.word	0x0801bca3
 801bb68:	0801bb2d 	.word	0x0801bb2d
 801bb6c:	0801bb2d 	.word	0x0801bb2d
 801bb70:	0801bb2d 	.word	0x0801bb2d
 801bb74:	0801bd03 	.word	0x0801bd03
 801bb78:	0801bcdb 	.word	0x0801bcdb
 801bb7c:	0801bb2d 	.word	0x0801bb2d
 801bb80:	0801bb2d 	.word	0x0801bb2d
 801bb84:	0801bcb1 	.word	0x0801bcb1
 801bb88:	0801bb2d 	.word	0x0801bb2d
 801bb8c:	0801bb2d 	.word	0x0801bb2d
 801bb90:	0801bb2d 	.word	0x0801bb2d
 801bb94:	0801bb2d 	.word	0x0801bb2d
 801bb98:	0801bc69 	.word	0x0801bc69
 801bb9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801bba0:	e7db      	b.n	801bb5a <_scanf_float+0x8e>
 801bba2:	290e      	cmp	r1, #14
 801bba4:	d8c2      	bhi.n	801bb2c <_scanf_float+0x60>
 801bba6:	a001      	add	r0, pc, #4	; (adr r0, 801bbac <_scanf_float+0xe0>)
 801bba8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801bbac:	0801bc5b 	.word	0x0801bc5b
 801bbb0:	0801bb2d 	.word	0x0801bb2d
 801bbb4:	0801bc5b 	.word	0x0801bc5b
 801bbb8:	0801bcef 	.word	0x0801bcef
 801bbbc:	0801bb2d 	.word	0x0801bb2d
 801bbc0:	0801bc09 	.word	0x0801bc09
 801bbc4:	0801bc45 	.word	0x0801bc45
 801bbc8:	0801bc45 	.word	0x0801bc45
 801bbcc:	0801bc45 	.word	0x0801bc45
 801bbd0:	0801bc45 	.word	0x0801bc45
 801bbd4:	0801bc45 	.word	0x0801bc45
 801bbd8:	0801bc45 	.word	0x0801bc45
 801bbdc:	0801bc45 	.word	0x0801bc45
 801bbe0:	0801bc45 	.word	0x0801bc45
 801bbe4:	0801bc45 	.word	0x0801bc45
 801bbe8:	2b6e      	cmp	r3, #110	; 0x6e
 801bbea:	d809      	bhi.n	801bc00 <_scanf_float+0x134>
 801bbec:	2b60      	cmp	r3, #96	; 0x60
 801bbee:	d8b2      	bhi.n	801bb56 <_scanf_float+0x8a>
 801bbf0:	2b54      	cmp	r3, #84	; 0x54
 801bbf2:	d077      	beq.n	801bce4 <_scanf_float+0x218>
 801bbf4:	2b59      	cmp	r3, #89	; 0x59
 801bbf6:	d199      	bne.n	801bb2c <_scanf_float+0x60>
 801bbf8:	2d07      	cmp	r5, #7
 801bbfa:	d197      	bne.n	801bb2c <_scanf_float+0x60>
 801bbfc:	2508      	movs	r5, #8
 801bbfe:	e029      	b.n	801bc54 <_scanf_float+0x188>
 801bc00:	2b74      	cmp	r3, #116	; 0x74
 801bc02:	d06f      	beq.n	801bce4 <_scanf_float+0x218>
 801bc04:	2b79      	cmp	r3, #121	; 0x79
 801bc06:	e7f6      	b.n	801bbf6 <_scanf_float+0x12a>
 801bc08:	6821      	ldr	r1, [r4, #0]
 801bc0a:	05c8      	lsls	r0, r1, #23
 801bc0c:	d51a      	bpl.n	801bc44 <_scanf_float+0x178>
 801bc0e:	9b02      	ldr	r3, [sp, #8]
 801bc10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801bc14:	6021      	str	r1, [r4, #0]
 801bc16:	f109 0901 	add.w	r9, r9, #1
 801bc1a:	b11b      	cbz	r3, 801bc24 <_scanf_float+0x158>
 801bc1c:	3b01      	subs	r3, #1
 801bc1e:	3201      	adds	r2, #1
 801bc20:	9302      	str	r3, [sp, #8]
 801bc22:	60a2      	str	r2, [r4, #8]
 801bc24:	68a3      	ldr	r3, [r4, #8]
 801bc26:	3b01      	subs	r3, #1
 801bc28:	60a3      	str	r3, [r4, #8]
 801bc2a:	6923      	ldr	r3, [r4, #16]
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	6123      	str	r3, [r4, #16]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	3b01      	subs	r3, #1
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	607b      	str	r3, [r7, #4]
 801bc38:	f340 8084 	ble.w	801bd44 <_scanf_float+0x278>
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	3301      	adds	r3, #1
 801bc40:	603b      	str	r3, [r7, #0]
 801bc42:	e766      	b.n	801bb12 <_scanf_float+0x46>
 801bc44:	eb1a 0f05 	cmn.w	sl, r5
 801bc48:	f47f af70 	bne.w	801bb2c <_scanf_float+0x60>
 801bc4c:	6822      	ldr	r2, [r4, #0]
 801bc4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bc52:	6022      	str	r2, [r4, #0]
 801bc54:	f806 3b01 	strb.w	r3, [r6], #1
 801bc58:	e7e4      	b.n	801bc24 <_scanf_float+0x158>
 801bc5a:	6822      	ldr	r2, [r4, #0]
 801bc5c:	0610      	lsls	r0, r2, #24
 801bc5e:	f57f af65 	bpl.w	801bb2c <_scanf_float+0x60>
 801bc62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bc66:	e7f4      	b.n	801bc52 <_scanf_float+0x186>
 801bc68:	f1ba 0f00 	cmp.w	sl, #0
 801bc6c:	d10e      	bne.n	801bc8c <_scanf_float+0x1c0>
 801bc6e:	f1b9 0f00 	cmp.w	r9, #0
 801bc72:	d10e      	bne.n	801bc92 <_scanf_float+0x1c6>
 801bc74:	6822      	ldr	r2, [r4, #0]
 801bc76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bc7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bc7e:	d108      	bne.n	801bc92 <_scanf_float+0x1c6>
 801bc80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bc84:	6022      	str	r2, [r4, #0]
 801bc86:	f04f 0a01 	mov.w	sl, #1
 801bc8a:	e7e3      	b.n	801bc54 <_scanf_float+0x188>
 801bc8c:	f1ba 0f02 	cmp.w	sl, #2
 801bc90:	d055      	beq.n	801bd3e <_scanf_float+0x272>
 801bc92:	2d01      	cmp	r5, #1
 801bc94:	d002      	beq.n	801bc9c <_scanf_float+0x1d0>
 801bc96:	2d04      	cmp	r5, #4
 801bc98:	f47f af48 	bne.w	801bb2c <_scanf_float+0x60>
 801bc9c:	3501      	adds	r5, #1
 801bc9e:	b2ed      	uxtb	r5, r5
 801bca0:	e7d8      	b.n	801bc54 <_scanf_float+0x188>
 801bca2:	f1ba 0f01 	cmp.w	sl, #1
 801bca6:	f47f af41 	bne.w	801bb2c <_scanf_float+0x60>
 801bcaa:	f04f 0a02 	mov.w	sl, #2
 801bcae:	e7d1      	b.n	801bc54 <_scanf_float+0x188>
 801bcb0:	b97d      	cbnz	r5, 801bcd2 <_scanf_float+0x206>
 801bcb2:	f1b9 0f00 	cmp.w	r9, #0
 801bcb6:	f47f af3c 	bne.w	801bb32 <_scanf_float+0x66>
 801bcba:	6822      	ldr	r2, [r4, #0]
 801bcbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bcc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bcc4:	f47f af39 	bne.w	801bb3a <_scanf_float+0x6e>
 801bcc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bccc:	6022      	str	r2, [r4, #0]
 801bcce:	2501      	movs	r5, #1
 801bcd0:	e7c0      	b.n	801bc54 <_scanf_float+0x188>
 801bcd2:	2d03      	cmp	r5, #3
 801bcd4:	d0e2      	beq.n	801bc9c <_scanf_float+0x1d0>
 801bcd6:	2d05      	cmp	r5, #5
 801bcd8:	e7de      	b.n	801bc98 <_scanf_float+0x1cc>
 801bcda:	2d02      	cmp	r5, #2
 801bcdc:	f47f af26 	bne.w	801bb2c <_scanf_float+0x60>
 801bce0:	2503      	movs	r5, #3
 801bce2:	e7b7      	b.n	801bc54 <_scanf_float+0x188>
 801bce4:	2d06      	cmp	r5, #6
 801bce6:	f47f af21 	bne.w	801bb2c <_scanf_float+0x60>
 801bcea:	2507      	movs	r5, #7
 801bcec:	e7b2      	b.n	801bc54 <_scanf_float+0x188>
 801bcee:	6822      	ldr	r2, [r4, #0]
 801bcf0:	0591      	lsls	r1, r2, #22
 801bcf2:	f57f af1b 	bpl.w	801bb2c <_scanf_float+0x60>
 801bcf6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bcfa:	6022      	str	r2, [r4, #0]
 801bcfc:	f8cd 9004 	str.w	r9, [sp, #4]
 801bd00:	e7a8      	b.n	801bc54 <_scanf_float+0x188>
 801bd02:	6822      	ldr	r2, [r4, #0]
 801bd04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bd08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bd0c:	d006      	beq.n	801bd1c <_scanf_float+0x250>
 801bd0e:	0550      	lsls	r0, r2, #21
 801bd10:	f57f af0c 	bpl.w	801bb2c <_scanf_float+0x60>
 801bd14:	f1b9 0f00 	cmp.w	r9, #0
 801bd18:	f43f af0f 	beq.w	801bb3a <_scanf_float+0x6e>
 801bd1c:	0591      	lsls	r1, r2, #22
 801bd1e:	bf58      	it	pl
 801bd20:	9901      	ldrpl	r1, [sp, #4]
 801bd22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bd26:	bf58      	it	pl
 801bd28:	eba9 0101 	subpl.w	r1, r9, r1
 801bd2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bd30:	bf58      	it	pl
 801bd32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bd36:	6022      	str	r2, [r4, #0]
 801bd38:	f04f 0900 	mov.w	r9, #0
 801bd3c:	e78a      	b.n	801bc54 <_scanf_float+0x188>
 801bd3e:	f04f 0a03 	mov.w	sl, #3
 801bd42:	e787      	b.n	801bc54 <_scanf_float+0x188>
 801bd44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bd48:	4639      	mov	r1, r7
 801bd4a:	4640      	mov	r0, r8
 801bd4c:	4798      	blx	r3
 801bd4e:	2800      	cmp	r0, #0
 801bd50:	f43f aedf 	beq.w	801bb12 <_scanf_float+0x46>
 801bd54:	e6ea      	b.n	801bb2c <_scanf_float+0x60>
 801bd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bd5e:	463a      	mov	r2, r7
 801bd60:	4640      	mov	r0, r8
 801bd62:	4798      	blx	r3
 801bd64:	6923      	ldr	r3, [r4, #16]
 801bd66:	3b01      	subs	r3, #1
 801bd68:	6123      	str	r3, [r4, #16]
 801bd6a:	e6ec      	b.n	801bb46 <_scanf_float+0x7a>
 801bd6c:	1e6b      	subs	r3, r5, #1
 801bd6e:	2b06      	cmp	r3, #6
 801bd70:	d825      	bhi.n	801bdbe <_scanf_float+0x2f2>
 801bd72:	2d02      	cmp	r5, #2
 801bd74:	d836      	bhi.n	801bde4 <_scanf_float+0x318>
 801bd76:	455e      	cmp	r6, fp
 801bd78:	f67f aee8 	bls.w	801bb4c <_scanf_float+0x80>
 801bd7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bd84:	463a      	mov	r2, r7
 801bd86:	4640      	mov	r0, r8
 801bd88:	4798      	blx	r3
 801bd8a:	6923      	ldr	r3, [r4, #16]
 801bd8c:	3b01      	subs	r3, #1
 801bd8e:	6123      	str	r3, [r4, #16]
 801bd90:	e7f1      	b.n	801bd76 <_scanf_float+0x2aa>
 801bd92:	9802      	ldr	r0, [sp, #8]
 801bd94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bd98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bd9c:	9002      	str	r0, [sp, #8]
 801bd9e:	463a      	mov	r2, r7
 801bda0:	4640      	mov	r0, r8
 801bda2:	4798      	blx	r3
 801bda4:	6923      	ldr	r3, [r4, #16]
 801bda6:	3b01      	subs	r3, #1
 801bda8:	6123      	str	r3, [r4, #16]
 801bdaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bdae:	fa5f fa8a 	uxtb.w	sl, sl
 801bdb2:	f1ba 0f02 	cmp.w	sl, #2
 801bdb6:	d1ec      	bne.n	801bd92 <_scanf_float+0x2c6>
 801bdb8:	3d03      	subs	r5, #3
 801bdba:	b2ed      	uxtb	r5, r5
 801bdbc:	1b76      	subs	r6, r6, r5
 801bdbe:	6823      	ldr	r3, [r4, #0]
 801bdc0:	05da      	lsls	r2, r3, #23
 801bdc2:	d52f      	bpl.n	801be24 <_scanf_float+0x358>
 801bdc4:	055b      	lsls	r3, r3, #21
 801bdc6:	d510      	bpl.n	801bdea <_scanf_float+0x31e>
 801bdc8:	455e      	cmp	r6, fp
 801bdca:	f67f aebf 	bls.w	801bb4c <_scanf_float+0x80>
 801bdce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bdd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bdd6:	463a      	mov	r2, r7
 801bdd8:	4640      	mov	r0, r8
 801bdda:	4798      	blx	r3
 801bddc:	6923      	ldr	r3, [r4, #16]
 801bdde:	3b01      	subs	r3, #1
 801bde0:	6123      	str	r3, [r4, #16]
 801bde2:	e7f1      	b.n	801bdc8 <_scanf_float+0x2fc>
 801bde4:	46aa      	mov	sl, r5
 801bde6:	9602      	str	r6, [sp, #8]
 801bde8:	e7df      	b.n	801bdaa <_scanf_float+0x2de>
 801bdea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bdee:	6923      	ldr	r3, [r4, #16]
 801bdf0:	2965      	cmp	r1, #101	; 0x65
 801bdf2:	f103 33ff 	add.w	r3, r3, #4294967295
 801bdf6:	f106 35ff 	add.w	r5, r6, #4294967295
 801bdfa:	6123      	str	r3, [r4, #16]
 801bdfc:	d00c      	beq.n	801be18 <_scanf_float+0x34c>
 801bdfe:	2945      	cmp	r1, #69	; 0x45
 801be00:	d00a      	beq.n	801be18 <_scanf_float+0x34c>
 801be02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be06:	463a      	mov	r2, r7
 801be08:	4640      	mov	r0, r8
 801be0a:	4798      	blx	r3
 801be0c:	6923      	ldr	r3, [r4, #16]
 801be0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801be12:	3b01      	subs	r3, #1
 801be14:	1eb5      	subs	r5, r6, #2
 801be16:	6123      	str	r3, [r4, #16]
 801be18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801be1c:	463a      	mov	r2, r7
 801be1e:	4640      	mov	r0, r8
 801be20:	4798      	blx	r3
 801be22:	462e      	mov	r6, r5
 801be24:	6825      	ldr	r5, [r4, #0]
 801be26:	f015 0510 	ands.w	r5, r5, #16
 801be2a:	d159      	bne.n	801bee0 <_scanf_float+0x414>
 801be2c:	7035      	strb	r5, [r6, #0]
 801be2e:	6823      	ldr	r3, [r4, #0]
 801be30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801be34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be38:	d11b      	bne.n	801be72 <_scanf_float+0x3a6>
 801be3a:	9b01      	ldr	r3, [sp, #4]
 801be3c:	454b      	cmp	r3, r9
 801be3e:	eba3 0209 	sub.w	r2, r3, r9
 801be42:	d123      	bne.n	801be8c <_scanf_float+0x3c0>
 801be44:	2200      	movs	r2, #0
 801be46:	4659      	mov	r1, fp
 801be48:	4640      	mov	r0, r8
 801be4a:	f000 ff63 	bl	801cd14 <_strtod_r>
 801be4e:	6822      	ldr	r2, [r4, #0]
 801be50:	9b03      	ldr	r3, [sp, #12]
 801be52:	f012 0f02 	tst.w	r2, #2
 801be56:	ec57 6b10 	vmov	r6, r7, d0
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	d021      	beq.n	801bea2 <_scanf_float+0x3d6>
 801be5e:	9903      	ldr	r1, [sp, #12]
 801be60:	1d1a      	adds	r2, r3, #4
 801be62:	600a      	str	r2, [r1, #0]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	e9c3 6700 	strd	r6, r7, [r3]
 801be6a:	68e3      	ldr	r3, [r4, #12]
 801be6c:	3301      	adds	r3, #1
 801be6e:	60e3      	str	r3, [r4, #12]
 801be70:	e66d      	b.n	801bb4e <_scanf_float+0x82>
 801be72:	9b04      	ldr	r3, [sp, #16]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d0e5      	beq.n	801be44 <_scanf_float+0x378>
 801be78:	9905      	ldr	r1, [sp, #20]
 801be7a:	230a      	movs	r3, #10
 801be7c:	462a      	mov	r2, r5
 801be7e:	3101      	adds	r1, #1
 801be80:	4640      	mov	r0, r8
 801be82:	f001 f82b 	bl	801cedc <_strtol_r>
 801be86:	9b04      	ldr	r3, [sp, #16]
 801be88:	9e05      	ldr	r6, [sp, #20]
 801be8a:	1ac2      	subs	r2, r0, r3
 801be8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801be90:	429e      	cmp	r6, r3
 801be92:	bf28      	it	cs
 801be94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801be98:	4912      	ldr	r1, [pc, #72]	; (801bee4 <_scanf_float+0x418>)
 801be9a:	4630      	mov	r0, r6
 801be9c:	f000 f8ca 	bl	801c034 <siprintf>
 801bea0:	e7d0      	b.n	801be44 <_scanf_float+0x378>
 801bea2:	9903      	ldr	r1, [sp, #12]
 801bea4:	f012 0f04 	tst.w	r2, #4
 801bea8:	f103 0204 	add.w	r2, r3, #4
 801beac:	600a      	str	r2, [r1, #0]
 801beae:	d1d9      	bne.n	801be64 <_scanf_float+0x398>
 801beb0:	f8d3 8000 	ldr.w	r8, [r3]
 801beb4:	ee10 2a10 	vmov	r2, s0
 801beb8:	ee10 0a10 	vmov	r0, s0
 801bebc:	463b      	mov	r3, r7
 801bebe:	4639      	mov	r1, r7
 801bec0:	f7e4 fe4c 	bl	8000b5c <__aeabi_dcmpun>
 801bec4:	b128      	cbz	r0, 801bed2 <_scanf_float+0x406>
 801bec6:	4808      	ldr	r0, [pc, #32]	; (801bee8 <_scanf_float+0x41c>)
 801bec8:	f000 f8ae 	bl	801c028 <nanf>
 801becc:	ed88 0a00 	vstr	s0, [r8]
 801bed0:	e7cb      	b.n	801be6a <_scanf_float+0x39e>
 801bed2:	4630      	mov	r0, r6
 801bed4:	4639      	mov	r1, r7
 801bed6:	f7e4 fe9f 	bl	8000c18 <__aeabi_d2f>
 801beda:	f8c8 0000 	str.w	r0, [r8]
 801bede:	e7c4      	b.n	801be6a <_scanf_float+0x39e>
 801bee0:	2500      	movs	r5, #0
 801bee2:	e634      	b.n	801bb4e <_scanf_float+0x82>
 801bee4:	08021a08 	.word	0x08021a08
 801bee8:	08021b0f 	.word	0x08021b0f

0801beec <iprintf>:
 801beec:	b40f      	push	{r0, r1, r2, r3}
 801beee:	4b0a      	ldr	r3, [pc, #40]	; (801bf18 <iprintf+0x2c>)
 801bef0:	b513      	push	{r0, r1, r4, lr}
 801bef2:	681c      	ldr	r4, [r3, #0]
 801bef4:	b124      	cbz	r4, 801bf00 <iprintf+0x14>
 801bef6:	69a3      	ldr	r3, [r4, #24]
 801bef8:	b913      	cbnz	r3, 801bf00 <iprintf+0x14>
 801befa:	4620      	mov	r0, r4
 801befc:	f002 f8a8 	bl	801e050 <__sinit>
 801bf00:	ab05      	add	r3, sp, #20
 801bf02:	9a04      	ldr	r2, [sp, #16]
 801bf04:	68a1      	ldr	r1, [r4, #8]
 801bf06:	9301      	str	r3, [sp, #4]
 801bf08:	4620      	mov	r0, r4
 801bf0a:	f003 fba3 	bl	801f654 <_vfiprintf_r>
 801bf0e:	b002      	add	sp, #8
 801bf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf14:	b004      	add	sp, #16
 801bf16:	4770      	bx	lr
 801bf18:	2000017c 	.word	0x2000017c

0801bf1c <_puts_r>:
 801bf1c:	b570      	push	{r4, r5, r6, lr}
 801bf1e:	460e      	mov	r6, r1
 801bf20:	4605      	mov	r5, r0
 801bf22:	b118      	cbz	r0, 801bf2c <_puts_r+0x10>
 801bf24:	6983      	ldr	r3, [r0, #24]
 801bf26:	b90b      	cbnz	r3, 801bf2c <_puts_r+0x10>
 801bf28:	f002 f892 	bl	801e050 <__sinit>
 801bf2c:	69ab      	ldr	r3, [r5, #24]
 801bf2e:	68ac      	ldr	r4, [r5, #8]
 801bf30:	b913      	cbnz	r3, 801bf38 <_puts_r+0x1c>
 801bf32:	4628      	mov	r0, r5
 801bf34:	f002 f88c 	bl	801e050 <__sinit>
 801bf38:	4b2c      	ldr	r3, [pc, #176]	; (801bfec <_puts_r+0xd0>)
 801bf3a:	429c      	cmp	r4, r3
 801bf3c:	d120      	bne.n	801bf80 <_puts_r+0x64>
 801bf3e:	686c      	ldr	r4, [r5, #4]
 801bf40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf42:	07db      	lsls	r3, r3, #31
 801bf44:	d405      	bmi.n	801bf52 <_puts_r+0x36>
 801bf46:	89a3      	ldrh	r3, [r4, #12]
 801bf48:	0598      	lsls	r0, r3, #22
 801bf4a:	d402      	bmi.n	801bf52 <_puts_r+0x36>
 801bf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf4e:	f7ff f838 	bl	801afc2 <__retarget_lock_acquire_recursive>
 801bf52:	89a3      	ldrh	r3, [r4, #12]
 801bf54:	0719      	lsls	r1, r3, #28
 801bf56:	d51d      	bpl.n	801bf94 <_puts_r+0x78>
 801bf58:	6923      	ldr	r3, [r4, #16]
 801bf5a:	b1db      	cbz	r3, 801bf94 <_puts_r+0x78>
 801bf5c:	3e01      	subs	r6, #1
 801bf5e:	68a3      	ldr	r3, [r4, #8]
 801bf60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bf64:	3b01      	subs	r3, #1
 801bf66:	60a3      	str	r3, [r4, #8]
 801bf68:	bb39      	cbnz	r1, 801bfba <_puts_r+0x9e>
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	da38      	bge.n	801bfe0 <_puts_r+0xc4>
 801bf6e:	4622      	mov	r2, r4
 801bf70:	210a      	movs	r1, #10
 801bf72:	4628      	mov	r0, r5
 801bf74:	f000 fff8 	bl	801cf68 <__swbuf_r>
 801bf78:	3001      	adds	r0, #1
 801bf7a:	d011      	beq.n	801bfa0 <_puts_r+0x84>
 801bf7c:	250a      	movs	r5, #10
 801bf7e:	e011      	b.n	801bfa4 <_puts_r+0x88>
 801bf80:	4b1b      	ldr	r3, [pc, #108]	; (801bff0 <_puts_r+0xd4>)
 801bf82:	429c      	cmp	r4, r3
 801bf84:	d101      	bne.n	801bf8a <_puts_r+0x6e>
 801bf86:	68ac      	ldr	r4, [r5, #8]
 801bf88:	e7da      	b.n	801bf40 <_puts_r+0x24>
 801bf8a:	4b1a      	ldr	r3, [pc, #104]	; (801bff4 <_puts_r+0xd8>)
 801bf8c:	429c      	cmp	r4, r3
 801bf8e:	bf08      	it	eq
 801bf90:	68ec      	ldreq	r4, [r5, #12]
 801bf92:	e7d5      	b.n	801bf40 <_puts_r+0x24>
 801bf94:	4621      	mov	r1, r4
 801bf96:	4628      	mov	r0, r5
 801bf98:	f001 f838 	bl	801d00c <__swsetup_r>
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	d0dd      	beq.n	801bf5c <_puts_r+0x40>
 801bfa0:	f04f 35ff 	mov.w	r5, #4294967295
 801bfa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfa6:	07da      	lsls	r2, r3, #31
 801bfa8:	d405      	bmi.n	801bfb6 <_puts_r+0x9a>
 801bfaa:	89a3      	ldrh	r3, [r4, #12]
 801bfac:	059b      	lsls	r3, r3, #22
 801bfae:	d402      	bmi.n	801bfb6 <_puts_r+0x9a>
 801bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfb2:	f7ff f807 	bl	801afc4 <__retarget_lock_release_recursive>
 801bfb6:	4628      	mov	r0, r5
 801bfb8:	bd70      	pop	{r4, r5, r6, pc}
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	da04      	bge.n	801bfc8 <_puts_r+0xac>
 801bfbe:	69a2      	ldr	r2, [r4, #24]
 801bfc0:	429a      	cmp	r2, r3
 801bfc2:	dc06      	bgt.n	801bfd2 <_puts_r+0xb6>
 801bfc4:	290a      	cmp	r1, #10
 801bfc6:	d004      	beq.n	801bfd2 <_puts_r+0xb6>
 801bfc8:	6823      	ldr	r3, [r4, #0]
 801bfca:	1c5a      	adds	r2, r3, #1
 801bfcc:	6022      	str	r2, [r4, #0]
 801bfce:	7019      	strb	r1, [r3, #0]
 801bfd0:	e7c5      	b.n	801bf5e <_puts_r+0x42>
 801bfd2:	4622      	mov	r2, r4
 801bfd4:	4628      	mov	r0, r5
 801bfd6:	f000 ffc7 	bl	801cf68 <__swbuf_r>
 801bfda:	3001      	adds	r0, #1
 801bfdc:	d1bf      	bne.n	801bf5e <_puts_r+0x42>
 801bfde:	e7df      	b.n	801bfa0 <_puts_r+0x84>
 801bfe0:	6823      	ldr	r3, [r4, #0]
 801bfe2:	250a      	movs	r5, #10
 801bfe4:	1c5a      	adds	r2, r3, #1
 801bfe6:	6022      	str	r2, [r4, #0]
 801bfe8:	701d      	strb	r5, [r3, #0]
 801bfea:	e7db      	b.n	801bfa4 <_puts_r+0x88>
 801bfec:	08021cac 	.word	0x08021cac
 801bff0:	08021ccc 	.word	0x08021ccc
 801bff4:	08021c8c 	.word	0x08021c8c

0801bff8 <puts>:
 801bff8:	4b02      	ldr	r3, [pc, #8]	; (801c004 <puts+0xc>)
 801bffa:	4601      	mov	r1, r0
 801bffc:	6818      	ldr	r0, [r3, #0]
 801bffe:	f7ff bf8d 	b.w	801bf1c <_puts_r>
 801c002:	bf00      	nop
 801c004:	2000017c 	.word	0x2000017c

0801c008 <_sbrk_r>:
 801c008:	b538      	push	{r3, r4, r5, lr}
 801c00a:	4d06      	ldr	r5, [pc, #24]	; (801c024 <_sbrk_r+0x1c>)
 801c00c:	2300      	movs	r3, #0
 801c00e:	4604      	mov	r4, r0
 801c010:	4608      	mov	r0, r1
 801c012:	602b      	str	r3, [r5, #0]
 801c014:	f7e7 f9ec 	bl	80033f0 <_sbrk>
 801c018:	1c43      	adds	r3, r0, #1
 801c01a:	d102      	bne.n	801c022 <_sbrk_r+0x1a>
 801c01c:	682b      	ldr	r3, [r5, #0]
 801c01e:	b103      	cbz	r3, 801c022 <_sbrk_r+0x1a>
 801c020:	6023      	str	r3, [r4, #0]
 801c022:	bd38      	pop	{r3, r4, r5, pc}
 801c024:	20003650 	.word	0x20003650

0801c028 <nanf>:
 801c028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c030 <nanf+0x8>
 801c02c:	4770      	bx	lr
 801c02e:	bf00      	nop
 801c030:	7fc00000 	.word	0x7fc00000

0801c034 <siprintf>:
 801c034:	b40e      	push	{r1, r2, r3}
 801c036:	b500      	push	{lr}
 801c038:	b09c      	sub	sp, #112	; 0x70
 801c03a:	ab1d      	add	r3, sp, #116	; 0x74
 801c03c:	9002      	str	r0, [sp, #8]
 801c03e:	9006      	str	r0, [sp, #24]
 801c040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c044:	4809      	ldr	r0, [pc, #36]	; (801c06c <siprintf+0x38>)
 801c046:	9107      	str	r1, [sp, #28]
 801c048:	9104      	str	r1, [sp, #16]
 801c04a:	4909      	ldr	r1, [pc, #36]	; (801c070 <siprintf+0x3c>)
 801c04c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c050:	9105      	str	r1, [sp, #20]
 801c052:	6800      	ldr	r0, [r0, #0]
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	a902      	add	r1, sp, #8
 801c058:	f003 f9d2 	bl	801f400 <_svfiprintf_r>
 801c05c:	9b02      	ldr	r3, [sp, #8]
 801c05e:	2200      	movs	r2, #0
 801c060:	701a      	strb	r2, [r3, #0]
 801c062:	b01c      	add	sp, #112	; 0x70
 801c064:	f85d eb04 	ldr.w	lr, [sp], #4
 801c068:	b003      	add	sp, #12
 801c06a:	4770      	bx	lr
 801c06c:	2000017c 	.word	0x2000017c
 801c070:	ffff0208 	.word	0xffff0208

0801c074 <strchr>:
 801c074:	b2c9      	uxtb	r1, r1
 801c076:	4603      	mov	r3, r0
 801c078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c07c:	b11a      	cbz	r2, 801c086 <strchr+0x12>
 801c07e:	428a      	cmp	r2, r1
 801c080:	d1f9      	bne.n	801c076 <strchr+0x2>
 801c082:	4618      	mov	r0, r3
 801c084:	4770      	bx	lr
 801c086:	2900      	cmp	r1, #0
 801c088:	bf18      	it	ne
 801c08a:	2300      	movne	r3, #0
 801c08c:	e7f9      	b.n	801c082 <strchr+0xe>

0801c08e <strcpy>:
 801c08e:	4603      	mov	r3, r0
 801c090:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c094:	f803 2b01 	strb.w	r2, [r3], #1
 801c098:	2a00      	cmp	r2, #0
 801c09a:	d1f9      	bne.n	801c090 <strcpy+0x2>
 801c09c:	4770      	bx	lr

0801c09e <strstr>:
 801c09e:	780a      	ldrb	r2, [r1, #0]
 801c0a0:	b570      	push	{r4, r5, r6, lr}
 801c0a2:	b96a      	cbnz	r2, 801c0c0 <strstr+0x22>
 801c0a4:	bd70      	pop	{r4, r5, r6, pc}
 801c0a6:	429a      	cmp	r2, r3
 801c0a8:	d109      	bne.n	801c0be <strstr+0x20>
 801c0aa:	460c      	mov	r4, r1
 801c0ac:	4605      	mov	r5, r0
 801c0ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d0f6      	beq.n	801c0a4 <strstr+0x6>
 801c0b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c0ba:	429e      	cmp	r6, r3
 801c0bc:	d0f7      	beq.n	801c0ae <strstr+0x10>
 801c0be:	3001      	adds	r0, #1
 801c0c0:	7803      	ldrb	r3, [r0, #0]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d1ef      	bne.n	801c0a6 <strstr+0x8>
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	e7ec      	b.n	801c0a4 <strstr+0x6>

0801c0ca <sulp>:
 801c0ca:	b570      	push	{r4, r5, r6, lr}
 801c0cc:	4604      	mov	r4, r0
 801c0ce:	460d      	mov	r5, r1
 801c0d0:	ec45 4b10 	vmov	d0, r4, r5
 801c0d4:	4616      	mov	r6, r2
 801c0d6:	f002 ffd3 	bl	801f080 <__ulp>
 801c0da:	ec51 0b10 	vmov	r0, r1, d0
 801c0de:	b17e      	cbz	r6, 801c100 <sulp+0x36>
 801c0e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c0e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	dd09      	ble.n	801c100 <sulp+0x36>
 801c0ec:	051b      	lsls	r3, r3, #20
 801c0ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c0f2:	2400      	movs	r4, #0
 801c0f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c0f8:	4622      	mov	r2, r4
 801c0fa:	462b      	mov	r3, r5
 801c0fc:	f7e4 fa94 	bl	8000628 <__aeabi_dmul>
 801c100:	bd70      	pop	{r4, r5, r6, pc}
 801c102:	0000      	movs	r0, r0
 801c104:	0000      	movs	r0, r0
	...

0801c108 <_strtod_l>:
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	ed2d 8b02 	vpush	{d8}
 801c110:	b09d      	sub	sp, #116	; 0x74
 801c112:	461f      	mov	r7, r3
 801c114:	2300      	movs	r3, #0
 801c116:	9318      	str	r3, [sp, #96]	; 0x60
 801c118:	4ba2      	ldr	r3, [pc, #648]	; (801c3a4 <_strtod_l+0x29c>)
 801c11a:	9213      	str	r2, [sp, #76]	; 0x4c
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	9305      	str	r3, [sp, #20]
 801c120:	4604      	mov	r4, r0
 801c122:	4618      	mov	r0, r3
 801c124:	4688      	mov	r8, r1
 801c126:	f7e4 f865 	bl	80001f4 <strlen>
 801c12a:	f04f 0a00 	mov.w	sl, #0
 801c12e:	4605      	mov	r5, r0
 801c130:	f04f 0b00 	mov.w	fp, #0
 801c134:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c13a:	781a      	ldrb	r2, [r3, #0]
 801c13c:	2a2b      	cmp	r2, #43	; 0x2b
 801c13e:	d04e      	beq.n	801c1de <_strtod_l+0xd6>
 801c140:	d83b      	bhi.n	801c1ba <_strtod_l+0xb2>
 801c142:	2a0d      	cmp	r2, #13
 801c144:	d834      	bhi.n	801c1b0 <_strtod_l+0xa8>
 801c146:	2a08      	cmp	r2, #8
 801c148:	d834      	bhi.n	801c1b4 <_strtod_l+0xac>
 801c14a:	2a00      	cmp	r2, #0
 801c14c:	d03e      	beq.n	801c1cc <_strtod_l+0xc4>
 801c14e:	2300      	movs	r3, #0
 801c150:	930a      	str	r3, [sp, #40]	; 0x28
 801c152:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c154:	7833      	ldrb	r3, [r6, #0]
 801c156:	2b30      	cmp	r3, #48	; 0x30
 801c158:	f040 80b0 	bne.w	801c2bc <_strtod_l+0x1b4>
 801c15c:	7873      	ldrb	r3, [r6, #1]
 801c15e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c162:	2b58      	cmp	r3, #88	; 0x58
 801c164:	d168      	bne.n	801c238 <_strtod_l+0x130>
 801c166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c168:	9301      	str	r3, [sp, #4]
 801c16a:	ab18      	add	r3, sp, #96	; 0x60
 801c16c:	9702      	str	r7, [sp, #8]
 801c16e:	9300      	str	r3, [sp, #0]
 801c170:	4a8d      	ldr	r2, [pc, #564]	; (801c3a8 <_strtod_l+0x2a0>)
 801c172:	ab19      	add	r3, sp, #100	; 0x64
 801c174:	a917      	add	r1, sp, #92	; 0x5c
 801c176:	4620      	mov	r0, r4
 801c178:	f002 f880 	bl	801e27c <__gethex>
 801c17c:	f010 0707 	ands.w	r7, r0, #7
 801c180:	4605      	mov	r5, r0
 801c182:	d005      	beq.n	801c190 <_strtod_l+0x88>
 801c184:	2f06      	cmp	r7, #6
 801c186:	d12c      	bne.n	801c1e2 <_strtod_l+0xda>
 801c188:	3601      	adds	r6, #1
 801c18a:	2300      	movs	r3, #0
 801c18c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c18e:	930a      	str	r3, [sp, #40]	; 0x28
 801c190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c192:	2b00      	cmp	r3, #0
 801c194:	f040 8590 	bne.w	801ccb8 <_strtod_l+0xbb0>
 801c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c19a:	b1eb      	cbz	r3, 801c1d8 <_strtod_l+0xd0>
 801c19c:	4652      	mov	r2, sl
 801c19e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c1a2:	ec43 2b10 	vmov	d0, r2, r3
 801c1a6:	b01d      	add	sp, #116	; 0x74
 801c1a8:	ecbd 8b02 	vpop	{d8}
 801c1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1b0:	2a20      	cmp	r2, #32
 801c1b2:	d1cc      	bne.n	801c14e <_strtod_l+0x46>
 801c1b4:	3301      	adds	r3, #1
 801c1b6:	9317      	str	r3, [sp, #92]	; 0x5c
 801c1b8:	e7be      	b.n	801c138 <_strtod_l+0x30>
 801c1ba:	2a2d      	cmp	r2, #45	; 0x2d
 801c1bc:	d1c7      	bne.n	801c14e <_strtod_l+0x46>
 801c1be:	2201      	movs	r2, #1
 801c1c0:	920a      	str	r2, [sp, #40]	; 0x28
 801c1c2:	1c5a      	adds	r2, r3, #1
 801c1c4:	9217      	str	r2, [sp, #92]	; 0x5c
 801c1c6:	785b      	ldrb	r3, [r3, #1]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d1c2      	bne.n	801c152 <_strtod_l+0x4a>
 801c1cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c1ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	f040 856e 	bne.w	801ccb4 <_strtod_l+0xbac>
 801c1d8:	4652      	mov	r2, sl
 801c1da:	465b      	mov	r3, fp
 801c1dc:	e7e1      	b.n	801c1a2 <_strtod_l+0x9a>
 801c1de:	2200      	movs	r2, #0
 801c1e0:	e7ee      	b.n	801c1c0 <_strtod_l+0xb8>
 801c1e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c1e4:	b13a      	cbz	r2, 801c1f6 <_strtod_l+0xee>
 801c1e6:	2135      	movs	r1, #53	; 0x35
 801c1e8:	a81a      	add	r0, sp, #104	; 0x68
 801c1ea:	f003 f854 	bl	801f296 <__copybits>
 801c1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c1f0:	4620      	mov	r0, r4
 801c1f2:	f002 fc13 	bl	801ea1c <_Bfree>
 801c1f6:	3f01      	subs	r7, #1
 801c1f8:	2f04      	cmp	r7, #4
 801c1fa:	d806      	bhi.n	801c20a <_strtod_l+0x102>
 801c1fc:	e8df f007 	tbb	[pc, r7]
 801c200:	1714030a 	.word	0x1714030a
 801c204:	0a          	.byte	0x0a
 801c205:	00          	.byte	0x00
 801c206:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c20a:	0728      	lsls	r0, r5, #28
 801c20c:	d5c0      	bpl.n	801c190 <_strtod_l+0x88>
 801c20e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c212:	e7bd      	b.n	801c190 <_strtod_l+0x88>
 801c214:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c21a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c21e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c222:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c226:	e7f0      	b.n	801c20a <_strtod_l+0x102>
 801c228:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c3ac <_strtod_l+0x2a4>
 801c22c:	e7ed      	b.n	801c20a <_strtod_l+0x102>
 801c22e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c232:	f04f 3aff 	mov.w	sl, #4294967295
 801c236:	e7e8      	b.n	801c20a <_strtod_l+0x102>
 801c238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c23a:	1c5a      	adds	r2, r3, #1
 801c23c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c23e:	785b      	ldrb	r3, [r3, #1]
 801c240:	2b30      	cmp	r3, #48	; 0x30
 801c242:	d0f9      	beq.n	801c238 <_strtod_l+0x130>
 801c244:	2b00      	cmp	r3, #0
 801c246:	d0a3      	beq.n	801c190 <_strtod_l+0x88>
 801c248:	2301      	movs	r3, #1
 801c24a:	f04f 0900 	mov.w	r9, #0
 801c24e:	9304      	str	r3, [sp, #16]
 801c250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c252:	9308      	str	r3, [sp, #32]
 801c254:	f8cd 901c 	str.w	r9, [sp, #28]
 801c258:	464f      	mov	r7, r9
 801c25a:	220a      	movs	r2, #10
 801c25c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c25e:	7806      	ldrb	r6, [r0, #0]
 801c260:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c264:	b2d9      	uxtb	r1, r3
 801c266:	2909      	cmp	r1, #9
 801c268:	d92a      	bls.n	801c2c0 <_strtod_l+0x1b8>
 801c26a:	9905      	ldr	r1, [sp, #20]
 801c26c:	462a      	mov	r2, r5
 801c26e:	f003 fb6e 	bl	801f94e <strncmp>
 801c272:	b398      	cbz	r0, 801c2dc <_strtod_l+0x1d4>
 801c274:	2000      	movs	r0, #0
 801c276:	4632      	mov	r2, r6
 801c278:	463d      	mov	r5, r7
 801c27a:	9005      	str	r0, [sp, #20]
 801c27c:	4603      	mov	r3, r0
 801c27e:	2a65      	cmp	r2, #101	; 0x65
 801c280:	d001      	beq.n	801c286 <_strtod_l+0x17e>
 801c282:	2a45      	cmp	r2, #69	; 0x45
 801c284:	d118      	bne.n	801c2b8 <_strtod_l+0x1b0>
 801c286:	b91d      	cbnz	r5, 801c290 <_strtod_l+0x188>
 801c288:	9a04      	ldr	r2, [sp, #16]
 801c28a:	4302      	orrs	r2, r0
 801c28c:	d09e      	beq.n	801c1cc <_strtod_l+0xc4>
 801c28e:	2500      	movs	r5, #0
 801c290:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c294:	f108 0201 	add.w	r2, r8, #1
 801c298:	9217      	str	r2, [sp, #92]	; 0x5c
 801c29a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c29e:	2a2b      	cmp	r2, #43	; 0x2b
 801c2a0:	d075      	beq.n	801c38e <_strtod_l+0x286>
 801c2a2:	2a2d      	cmp	r2, #45	; 0x2d
 801c2a4:	d07b      	beq.n	801c39e <_strtod_l+0x296>
 801c2a6:	f04f 0c00 	mov.w	ip, #0
 801c2aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c2ae:	2909      	cmp	r1, #9
 801c2b0:	f240 8082 	bls.w	801c3b8 <_strtod_l+0x2b0>
 801c2b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c2b8:	2600      	movs	r6, #0
 801c2ba:	e09d      	b.n	801c3f8 <_strtod_l+0x2f0>
 801c2bc:	2300      	movs	r3, #0
 801c2be:	e7c4      	b.n	801c24a <_strtod_l+0x142>
 801c2c0:	2f08      	cmp	r7, #8
 801c2c2:	bfd8      	it	le
 801c2c4:	9907      	ldrle	r1, [sp, #28]
 801c2c6:	f100 0001 	add.w	r0, r0, #1
 801c2ca:	bfda      	itte	le
 801c2cc:	fb02 3301 	mlale	r3, r2, r1, r3
 801c2d0:	9307      	strle	r3, [sp, #28]
 801c2d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c2d6:	3701      	adds	r7, #1
 801c2d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801c2da:	e7bf      	b.n	801c25c <_strtod_l+0x154>
 801c2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2de:	195a      	adds	r2, r3, r5
 801c2e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c2e2:	5d5a      	ldrb	r2, [r3, r5]
 801c2e4:	2f00      	cmp	r7, #0
 801c2e6:	d037      	beq.n	801c358 <_strtod_l+0x250>
 801c2e8:	9005      	str	r0, [sp, #20]
 801c2ea:	463d      	mov	r5, r7
 801c2ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c2f0:	2b09      	cmp	r3, #9
 801c2f2:	d912      	bls.n	801c31a <_strtod_l+0x212>
 801c2f4:	2301      	movs	r3, #1
 801c2f6:	e7c2      	b.n	801c27e <_strtod_l+0x176>
 801c2f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2fa:	1c5a      	adds	r2, r3, #1
 801c2fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c2fe:	785a      	ldrb	r2, [r3, #1]
 801c300:	3001      	adds	r0, #1
 801c302:	2a30      	cmp	r2, #48	; 0x30
 801c304:	d0f8      	beq.n	801c2f8 <_strtod_l+0x1f0>
 801c306:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c30a:	2b08      	cmp	r3, #8
 801c30c:	f200 84d9 	bhi.w	801ccc2 <_strtod_l+0xbba>
 801c310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c312:	9005      	str	r0, [sp, #20]
 801c314:	2000      	movs	r0, #0
 801c316:	9308      	str	r3, [sp, #32]
 801c318:	4605      	mov	r5, r0
 801c31a:	3a30      	subs	r2, #48	; 0x30
 801c31c:	f100 0301 	add.w	r3, r0, #1
 801c320:	d014      	beq.n	801c34c <_strtod_l+0x244>
 801c322:	9905      	ldr	r1, [sp, #20]
 801c324:	4419      	add	r1, r3
 801c326:	9105      	str	r1, [sp, #20]
 801c328:	462b      	mov	r3, r5
 801c32a:	eb00 0e05 	add.w	lr, r0, r5
 801c32e:	210a      	movs	r1, #10
 801c330:	4573      	cmp	r3, lr
 801c332:	d113      	bne.n	801c35c <_strtod_l+0x254>
 801c334:	182b      	adds	r3, r5, r0
 801c336:	2b08      	cmp	r3, #8
 801c338:	f105 0501 	add.w	r5, r5, #1
 801c33c:	4405      	add	r5, r0
 801c33e:	dc1c      	bgt.n	801c37a <_strtod_l+0x272>
 801c340:	9907      	ldr	r1, [sp, #28]
 801c342:	230a      	movs	r3, #10
 801c344:	fb03 2301 	mla	r3, r3, r1, r2
 801c348:	9307      	str	r3, [sp, #28]
 801c34a:	2300      	movs	r3, #0
 801c34c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c34e:	1c51      	adds	r1, r2, #1
 801c350:	9117      	str	r1, [sp, #92]	; 0x5c
 801c352:	7852      	ldrb	r2, [r2, #1]
 801c354:	4618      	mov	r0, r3
 801c356:	e7c9      	b.n	801c2ec <_strtod_l+0x1e4>
 801c358:	4638      	mov	r0, r7
 801c35a:	e7d2      	b.n	801c302 <_strtod_l+0x1fa>
 801c35c:	2b08      	cmp	r3, #8
 801c35e:	dc04      	bgt.n	801c36a <_strtod_l+0x262>
 801c360:	9e07      	ldr	r6, [sp, #28]
 801c362:	434e      	muls	r6, r1
 801c364:	9607      	str	r6, [sp, #28]
 801c366:	3301      	adds	r3, #1
 801c368:	e7e2      	b.n	801c330 <_strtod_l+0x228>
 801c36a:	f103 0c01 	add.w	ip, r3, #1
 801c36e:	f1bc 0f10 	cmp.w	ip, #16
 801c372:	bfd8      	it	le
 801c374:	fb01 f909 	mulle.w	r9, r1, r9
 801c378:	e7f5      	b.n	801c366 <_strtod_l+0x25e>
 801c37a:	2d10      	cmp	r5, #16
 801c37c:	bfdc      	itt	le
 801c37e:	230a      	movle	r3, #10
 801c380:	fb03 2909 	mlale	r9, r3, r9, r2
 801c384:	e7e1      	b.n	801c34a <_strtod_l+0x242>
 801c386:	2300      	movs	r3, #0
 801c388:	9305      	str	r3, [sp, #20]
 801c38a:	2301      	movs	r3, #1
 801c38c:	e77c      	b.n	801c288 <_strtod_l+0x180>
 801c38e:	f04f 0c00 	mov.w	ip, #0
 801c392:	f108 0202 	add.w	r2, r8, #2
 801c396:	9217      	str	r2, [sp, #92]	; 0x5c
 801c398:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c39c:	e785      	b.n	801c2aa <_strtod_l+0x1a2>
 801c39e:	f04f 0c01 	mov.w	ip, #1
 801c3a2:	e7f6      	b.n	801c392 <_strtod_l+0x28a>
 801c3a4:	08021d54 	.word	0x08021d54
 801c3a8:	08021a10 	.word	0x08021a10
 801c3ac:	7ff00000 	.word	0x7ff00000
 801c3b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c3b2:	1c51      	adds	r1, r2, #1
 801c3b4:	9117      	str	r1, [sp, #92]	; 0x5c
 801c3b6:	7852      	ldrb	r2, [r2, #1]
 801c3b8:	2a30      	cmp	r2, #48	; 0x30
 801c3ba:	d0f9      	beq.n	801c3b0 <_strtod_l+0x2a8>
 801c3bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c3c0:	2908      	cmp	r1, #8
 801c3c2:	f63f af79 	bhi.w	801c2b8 <_strtod_l+0x1b0>
 801c3c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c3ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c3cc:	9206      	str	r2, [sp, #24]
 801c3ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c3d0:	1c51      	adds	r1, r2, #1
 801c3d2:	9117      	str	r1, [sp, #92]	; 0x5c
 801c3d4:	7852      	ldrb	r2, [r2, #1]
 801c3d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c3da:	2e09      	cmp	r6, #9
 801c3dc:	d937      	bls.n	801c44e <_strtod_l+0x346>
 801c3de:	9e06      	ldr	r6, [sp, #24]
 801c3e0:	1b89      	subs	r1, r1, r6
 801c3e2:	2908      	cmp	r1, #8
 801c3e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c3e8:	dc02      	bgt.n	801c3f0 <_strtod_l+0x2e8>
 801c3ea:	4576      	cmp	r6, lr
 801c3ec:	bfa8      	it	ge
 801c3ee:	4676      	movge	r6, lr
 801c3f0:	f1bc 0f00 	cmp.w	ip, #0
 801c3f4:	d000      	beq.n	801c3f8 <_strtod_l+0x2f0>
 801c3f6:	4276      	negs	r6, r6
 801c3f8:	2d00      	cmp	r5, #0
 801c3fa:	d14d      	bne.n	801c498 <_strtod_l+0x390>
 801c3fc:	9904      	ldr	r1, [sp, #16]
 801c3fe:	4301      	orrs	r1, r0
 801c400:	f47f aec6 	bne.w	801c190 <_strtod_l+0x88>
 801c404:	2b00      	cmp	r3, #0
 801c406:	f47f aee1 	bne.w	801c1cc <_strtod_l+0xc4>
 801c40a:	2a69      	cmp	r2, #105	; 0x69
 801c40c:	d027      	beq.n	801c45e <_strtod_l+0x356>
 801c40e:	dc24      	bgt.n	801c45a <_strtod_l+0x352>
 801c410:	2a49      	cmp	r2, #73	; 0x49
 801c412:	d024      	beq.n	801c45e <_strtod_l+0x356>
 801c414:	2a4e      	cmp	r2, #78	; 0x4e
 801c416:	f47f aed9 	bne.w	801c1cc <_strtod_l+0xc4>
 801c41a:	499f      	ldr	r1, [pc, #636]	; (801c698 <_strtod_l+0x590>)
 801c41c:	a817      	add	r0, sp, #92	; 0x5c
 801c41e:	f002 f985 	bl	801e72c <__match>
 801c422:	2800      	cmp	r0, #0
 801c424:	f43f aed2 	beq.w	801c1cc <_strtod_l+0xc4>
 801c428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c42a:	781b      	ldrb	r3, [r3, #0]
 801c42c:	2b28      	cmp	r3, #40	; 0x28
 801c42e:	d12d      	bne.n	801c48c <_strtod_l+0x384>
 801c430:	499a      	ldr	r1, [pc, #616]	; (801c69c <_strtod_l+0x594>)
 801c432:	aa1a      	add	r2, sp, #104	; 0x68
 801c434:	a817      	add	r0, sp, #92	; 0x5c
 801c436:	f002 f98d 	bl	801e754 <__hexnan>
 801c43a:	2805      	cmp	r0, #5
 801c43c:	d126      	bne.n	801c48c <_strtod_l+0x384>
 801c43e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c440:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c444:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c448:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c44c:	e6a0      	b.n	801c190 <_strtod_l+0x88>
 801c44e:	210a      	movs	r1, #10
 801c450:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c454:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c458:	e7b9      	b.n	801c3ce <_strtod_l+0x2c6>
 801c45a:	2a6e      	cmp	r2, #110	; 0x6e
 801c45c:	e7db      	b.n	801c416 <_strtod_l+0x30e>
 801c45e:	4990      	ldr	r1, [pc, #576]	; (801c6a0 <_strtod_l+0x598>)
 801c460:	a817      	add	r0, sp, #92	; 0x5c
 801c462:	f002 f963 	bl	801e72c <__match>
 801c466:	2800      	cmp	r0, #0
 801c468:	f43f aeb0 	beq.w	801c1cc <_strtod_l+0xc4>
 801c46c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c46e:	498d      	ldr	r1, [pc, #564]	; (801c6a4 <_strtod_l+0x59c>)
 801c470:	3b01      	subs	r3, #1
 801c472:	a817      	add	r0, sp, #92	; 0x5c
 801c474:	9317      	str	r3, [sp, #92]	; 0x5c
 801c476:	f002 f959 	bl	801e72c <__match>
 801c47a:	b910      	cbnz	r0, 801c482 <_strtod_l+0x37a>
 801c47c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c47e:	3301      	adds	r3, #1
 801c480:	9317      	str	r3, [sp, #92]	; 0x5c
 801c482:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c6b4 <_strtod_l+0x5ac>
 801c486:	f04f 0a00 	mov.w	sl, #0
 801c48a:	e681      	b.n	801c190 <_strtod_l+0x88>
 801c48c:	4886      	ldr	r0, [pc, #536]	; (801c6a8 <_strtod_l+0x5a0>)
 801c48e:	f003 fa13 	bl	801f8b8 <nan>
 801c492:	ec5b ab10 	vmov	sl, fp, d0
 801c496:	e67b      	b.n	801c190 <_strtod_l+0x88>
 801c498:	9b05      	ldr	r3, [sp, #20]
 801c49a:	9807      	ldr	r0, [sp, #28]
 801c49c:	1af3      	subs	r3, r6, r3
 801c49e:	2f00      	cmp	r7, #0
 801c4a0:	bf08      	it	eq
 801c4a2:	462f      	moveq	r7, r5
 801c4a4:	2d10      	cmp	r5, #16
 801c4a6:	9306      	str	r3, [sp, #24]
 801c4a8:	46a8      	mov	r8, r5
 801c4aa:	bfa8      	it	ge
 801c4ac:	f04f 0810 	movge.w	r8, #16
 801c4b0:	f7e4 f840 	bl	8000534 <__aeabi_ui2d>
 801c4b4:	2d09      	cmp	r5, #9
 801c4b6:	4682      	mov	sl, r0
 801c4b8:	468b      	mov	fp, r1
 801c4ba:	dd13      	ble.n	801c4e4 <_strtod_l+0x3dc>
 801c4bc:	4b7b      	ldr	r3, [pc, #492]	; (801c6ac <_strtod_l+0x5a4>)
 801c4be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c4c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c4c6:	f7e4 f8af 	bl	8000628 <__aeabi_dmul>
 801c4ca:	4682      	mov	sl, r0
 801c4cc:	4648      	mov	r0, r9
 801c4ce:	468b      	mov	fp, r1
 801c4d0:	f7e4 f830 	bl	8000534 <__aeabi_ui2d>
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	460b      	mov	r3, r1
 801c4d8:	4650      	mov	r0, sl
 801c4da:	4659      	mov	r1, fp
 801c4dc:	f7e3 feee 	bl	80002bc <__adddf3>
 801c4e0:	4682      	mov	sl, r0
 801c4e2:	468b      	mov	fp, r1
 801c4e4:	2d0f      	cmp	r5, #15
 801c4e6:	dc38      	bgt.n	801c55a <_strtod_l+0x452>
 801c4e8:	9b06      	ldr	r3, [sp, #24]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	f43f ae50 	beq.w	801c190 <_strtod_l+0x88>
 801c4f0:	dd24      	ble.n	801c53c <_strtod_l+0x434>
 801c4f2:	2b16      	cmp	r3, #22
 801c4f4:	dc0b      	bgt.n	801c50e <_strtod_l+0x406>
 801c4f6:	496d      	ldr	r1, [pc, #436]	; (801c6ac <_strtod_l+0x5a4>)
 801c4f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c500:	4652      	mov	r2, sl
 801c502:	465b      	mov	r3, fp
 801c504:	f7e4 f890 	bl	8000628 <__aeabi_dmul>
 801c508:	4682      	mov	sl, r0
 801c50a:	468b      	mov	fp, r1
 801c50c:	e640      	b.n	801c190 <_strtod_l+0x88>
 801c50e:	9a06      	ldr	r2, [sp, #24]
 801c510:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c514:	4293      	cmp	r3, r2
 801c516:	db20      	blt.n	801c55a <_strtod_l+0x452>
 801c518:	4c64      	ldr	r4, [pc, #400]	; (801c6ac <_strtod_l+0x5a4>)
 801c51a:	f1c5 050f 	rsb	r5, r5, #15
 801c51e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c522:	4652      	mov	r2, sl
 801c524:	465b      	mov	r3, fp
 801c526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c52a:	f7e4 f87d 	bl	8000628 <__aeabi_dmul>
 801c52e:	9b06      	ldr	r3, [sp, #24]
 801c530:	1b5d      	subs	r5, r3, r5
 801c532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c536:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c53a:	e7e3      	b.n	801c504 <_strtod_l+0x3fc>
 801c53c:	9b06      	ldr	r3, [sp, #24]
 801c53e:	3316      	adds	r3, #22
 801c540:	db0b      	blt.n	801c55a <_strtod_l+0x452>
 801c542:	9b05      	ldr	r3, [sp, #20]
 801c544:	1b9e      	subs	r6, r3, r6
 801c546:	4b59      	ldr	r3, [pc, #356]	; (801c6ac <_strtod_l+0x5a4>)
 801c548:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c54c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c550:	4650      	mov	r0, sl
 801c552:	4659      	mov	r1, fp
 801c554:	f7e4 f992 	bl	800087c <__aeabi_ddiv>
 801c558:	e7d6      	b.n	801c508 <_strtod_l+0x400>
 801c55a:	9b06      	ldr	r3, [sp, #24]
 801c55c:	eba5 0808 	sub.w	r8, r5, r8
 801c560:	4498      	add	r8, r3
 801c562:	f1b8 0f00 	cmp.w	r8, #0
 801c566:	dd74      	ble.n	801c652 <_strtod_l+0x54a>
 801c568:	f018 030f 	ands.w	r3, r8, #15
 801c56c:	d00a      	beq.n	801c584 <_strtod_l+0x47c>
 801c56e:	494f      	ldr	r1, [pc, #316]	; (801c6ac <_strtod_l+0x5a4>)
 801c570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c574:	4652      	mov	r2, sl
 801c576:	465b      	mov	r3, fp
 801c578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c57c:	f7e4 f854 	bl	8000628 <__aeabi_dmul>
 801c580:	4682      	mov	sl, r0
 801c582:	468b      	mov	fp, r1
 801c584:	f038 080f 	bics.w	r8, r8, #15
 801c588:	d04f      	beq.n	801c62a <_strtod_l+0x522>
 801c58a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c58e:	dd22      	ble.n	801c5d6 <_strtod_l+0x4ce>
 801c590:	2500      	movs	r5, #0
 801c592:	462e      	mov	r6, r5
 801c594:	9507      	str	r5, [sp, #28]
 801c596:	9505      	str	r5, [sp, #20]
 801c598:	2322      	movs	r3, #34	; 0x22
 801c59a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c6b4 <_strtod_l+0x5ac>
 801c59e:	6023      	str	r3, [r4, #0]
 801c5a0:	f04f 0a00 	mov.w	sl, #0
 801c5a4:	9b07      	ldr	r3, [sp, #28]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	f43f adf2 	beq.w	801c190 <_strtod_l+0x88>
 801c5ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	f002 fa34 	bl	801ea1c <_Bfree>
 801c5b4:	9905      	ldr	r1, [sp, #20]
 801c5b6:	4620      	mov	r0, r4
 801c5b8:	f002 fa30 	bl	801ea1c <_Bfree>
 801c5bc:	4631      	mov	r1, r6
 801c5be:	4620      	mov	r0, r4
 801c5c0:	f002 fa2c 	bl	801ea1c <_Bfree>
 801c5c4:	9907      	ldr	r1, [sp, #28]
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	f002 fa28 	bl	801ea1c <_Bfree>
 801c5cc:	4629      	mov	r1, r5
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	f002 fa24 	bl	801ea1c <_Bfree>
 801c5d4:	e5dc      	b.n	801c190 <_strtod_l+0x88>
 801c5d6:	4b36      	ldr	r3, [pc, #216]	; (801c6b0 <_strtod_l+0x5a8>)
 801c5d8:	9304      	str	r3, [sp, #16]
 801c5da:	2300      	movs	r3, #0
 801c5dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c5e0:	4650      	mov	r0, sl
 801c5e2:	4659      	mov	r1, fp
 801c5e4:	4699      	mov	r9, r3
 801c5e6:	f1b8 0f01 	cmp.w	r8, #1
 801c5ea:	dc21      	bgt.n	801c630 <_strtod_l+0x528>
 801c5ec:	b10b      	cbz	r3, 801c5f2 <_strtod_l+0x4ea>
 801c5ee:	4682      	mov	sl, r0
 801c5f0:	468b      	mov	fp, r1
 801c5f2:	4b2f      	ldr	r3, [pc, #188]	; (801c6b0 <_strtod_l+0x5a8>)
 801c5f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c5f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c5fc:	4652      	mov	r2, sl
 801c5fe:	465b      	mov	r3, fp
 801c600:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c604:	f7e4 f810 	bl	8000628 <__aeabi_dmul>
 801c608:	4b2a      	ldr	r3, [pc, #168]	; (801c6b4 <_strtod_l+0x5ac>)
 801c60a:	460a      	mov	r2, r1
 801c60c:	400b      	ands	r3, r1
 801c60e:	492a      	ldr	r1, [pc, #168]	; (801c6b8 <_strtod_l+0x5b0>)
 801c610:	428b      	cmp	r3, r1
 801c612:	4682      	mov	sl, r0
 801c614:	d8bc      	bhi.n	801c590 <_strtod_l+0x488>
 801c616:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c61a:	428b      	cmp	r3, r1
 801c61c:	bf86      	itte	hi
 801c61e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801c6bc <_strtod_l+0x5b4>
 801c622:	f04f 3aff 	movhi.w	sl, #4294967295
 801c626:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c62a:	2300      	movs	r3, #0
 801c62c:	9304      	str	r3, [sp, #16]
 801c62e:	e084      	b.n	801c73a <_strtod_l+0x632>
 801c630:	f018 0f01 	tst.w	r8, #1
 801c634:	d005      	beq.n	801c642 <_strtod_l+0x53a>
 801c636:	9b04      	ldr	r3, [sp, #16]
 801c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c63c:	f7e3 fff4 	bl	8000628 <__aeabi_dmul>
 801c640:	2301      	movs	r3, #1
 801c642:	9a04      	ldr	r2, [sp, #16]
 801c644:	3208      	adds	r2, #8
 801c646:	f109 0901 	add.w	r9, r9, #1
 801c64a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c64e:	9204      	str	r2, [sp, #16]
 801c650:	e7c9      	b.n	801c5e6 <_strtod_l+0x4de>
 801c652:	d0ea      	beq.n	801c62a <_strtod_l+0x522>
 801c654:	f1c8 0800 	rsb	r8, r8, #0
 801c658:	f018 020f 	ands.w	r2, r8, #15
 801c65c:	d00a      	beq.n	801c674 <_strtod_l+0x56c>
 801c65e:	4b13      	ldr	r3, [pc, #76]	; (801c6ac <_strtod_l+0x5a4>)
 801c660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c664:	4650      	mov	r0, sl
 801c666:	4659      	mov	r1, fp
 801c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c66c:	f7e4 f906 	bl	800087c <__aeabi_ddiv>
 801c670:	4682      	mov	sl, r0
 801c672:	468b      	mov	fp, r1
 801c674:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c678:	d0d7      	beq.n	801c62a <_strtod_l+0x522>
 801c67a:	f1b8 0f1f 	cmp.w	r8, #31
 801c67e:	dd1f      	ble.n	801c6c0 <_strtod_l+0x5b8>
 801c680:	2500      	movs	r5, #0
 801c682:	462e      	mov	r6, r5
 801c684:	9507      	str	r5, [sp, #28]
 801c686:	9505      	str	r5, [sp, #20]
 801c688:	2322      	movs	r3, #34	; 0x22
 801c68a:	f04f 0a00 	mov.w	sl, #0
 801c68e:	f04f 0b00 	mov.w	fp, #0
 801c692:	6023      	str	r3, [r4, #0]
 801c694:	e786      	b.n	801c5a4 <_strtod_l+0x49c>
 801c696:	bf00      	nop
 801c698:	080219e1 	.word	0x080219e1
 801c69c:	08021a24 	.word	0x08021a24
 801c6a0:	080219d9 	.word	0x080219d9
 801c6a4:	08021c14 	.word	0x08021c14
 801c6a8:	08021b0f 	.word	0x08021b0f
 801c6ac:	08021df0 	.word	0x08021df0
 801c6b0:	08021dc8 	.word	0x08021dc8
 801c6b4:	7ff00000 	.word	0x7ff00000
 801c6b8:	7ca00000 	.word	0x7ca00000
 801c6bc:	7fefffff 	.word	0x7fefffff
 801c6c0:	f018 0310 	ands.w	r3, r8, #16
 801c6c4:	bf18      	it	ne
 801c6c6:	236a      	movne	r3, #106	; 0x6a
 801c6c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801ca78 <_strtod_l+0x970>
 801c6cc:	9304      	str	r3, [sp, #16]
 801c6ce:	4650      	mov	r0, sl
 801c6d0:	4659      	mov	r1, fp
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	f018 0f01 	tst.w	r8, #1
 801c6d8:	d004      	beq.n	801c6e4 <_strtod_l+0x5dc>
 801c6da:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c6de:	f7e3 ffa3 	bl	8000628 <__aeabi_dmul>
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c6e8:	f109 0908 	add.w	r9, r9, #8
 801c6ec:	d1f2      	bne.n	801c6d4 <_strtod_l+0x5cc>
 801c6ee:	b10b      	cbz	r3, 801c6f4 <_strtod_l+0x5ec>
 801c6f0:	4682      	mov	sl, r0
 801c6f2:	468b      	mov	fp, r1
 801c6f4:	9b04      	ldr	r3, [sp, #16]
 801c6f6:	b1c3      	cbz	r3, 801c72a <_strtod_l+0x622>
 801c6f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c6fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c700:	2b00      	cmp	r3, #0
 801c702:	4659      	mov	r1, fp
 801c704:	dd11      	ble.n	801c72a <_strtod_l+0x622>
 801c706:	2b1f      	cmp	r3, #31
 801c708:	f340 8124 	ble.w	801c954 <_strtod_l+0x84c>
 801c70c:	2b34      	cmp	r3, #52	; 0x34
 801c70e:	bfde      	ittt	le
 801c710:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c714:	f04f 33ff 	movle.w	r3, #4294967295
 801c718:	fa03 f202 	lslle.w	r2, r3, r2
 801c71c:	f04f 0a00 	mov.w	sl, #0
 801c720:	bfcc      	ite	gt
 801c722:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c726:	ea02 0b01 	andle.w	fp, r2, r1
 801c72a:	2200      	movs	r2, #0
 801c72c:	2300      	movs	r3, #0
 801c72e:	4650      	mov	r0, sl
 801c730:	4659      	mov	r1, fp
 801c732:	f7e4 f9e1 	bl	8000af8 <__aeabi_dcmpeq>
 801c736:	2800      	cmp	r0, #0
 801c738:	d1a2      	bne.n	801c680 <_strtod_l+0x578>
 801c73a:	9b07      	ldr	r3, [sp, #28]
 801c73c:	9300      	str	r3, [sp, #0]
 801c73e:	9908      	ldr	r1, [sp, #32]
 801c740:	462b      	mov	r3, r5
 801c742:	463a      	mov	r2, r7
 801c744:	4620      	mov	r0, r4
 801c746:	f002 f9d1 	bl	801eaec <__s2b>
 801c74a:	9007      	str	r0, [sp, #28]
 801c74c:	2800      	cmp	r0, #0
 801c74e:	f43f af1f 	beq.w	801c590 <_strtod_l+0x488>
 801c752:	9b05      	ldr	r3, [sp, #20]
 801c754:	1b9e      	subs	r6, r3, r6
 801c756:	9b06      	ldr	r3, [sp, #24]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	bfb4      	ite	lt
 801c75c:	4633      	movlt	r3, r6
 801c75e:	2300      	movge	r3, #0
 801c760:	930c      	str	r3, [sp, #48]	; 0x30
 801c762:	9b06      	ldr	r3, [sp, #24]
 801c764:	2500      	movs	r5, #0
 801c766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c76a:	9312      	str	r3, [sp, #72]	; 0x48
 801c76c:	462e      	mov	r6, r5
 801c76e:	9b07      	ldr	r3, [sp, #28]
 801c770:	4620      	mov	r0, r4
 801c772:	6859      	ldr	r1, [r3, #4]
 801c774:	f002 f912 	bl	801e99c <_Balloc>
 801c778:	9005      	str	r0, [sp, #20]
 801c77a:	2800      	cmp	r0, #0
 801c77c:	f43f af0c 	beq.w	801c598 <_strtod_l+0x490>
 801c780:	9b07      	ldr	r3, [sp, #28]
 801c782:	691a      	ldr	r2, [r3, #16]
 801c784:	3202      	adds	r2, #2
 801c786:	f103 010c 	add.w	r1, r3, #12
 801c78a:	0092      	lsls	r2, r2, #2
 801c78c:	300c      	adds	r0, #12
 801c78e:	f7fe fc23 	bl	801afd8 <memcpy>
 801c792:	ec4b ab10 	vmov	d0, sl, fp
 801c796:	aa1a      	add	r2, sp, #104	; 0x68
 801c798:	a919      	add	r1, sp, #100	; 0x64
 801c79a:	4620      	mov	r0, r4
 801c79c:	f002 fcec 	bl	801f178 <__d2b>
 801c7a0:	ec4b ab18 	vmov	d8, sl, fp
 801c7a4:	9018      	str	r0, [sp, #96]	; 0x60
 801c7a6:	2800      	cmp	r0, #0
 801c7a8:	f43f aef6 	beq.w	801c598 <_strtod_l+0x490>
 801c7ac:	2101      	movs	r1, #1
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f002 fa36 	bl	801ec20 <__i2b>
 801c7b4:	4606      	mov	r6, r0
 801c7b6:	2800      	cmp	r0, #0
 801c7b8:	f43f aeee 	beq.w	801c598 <_strtod_l+0x490>
 801c7bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c7be:	9904      	ldr	r1, [sp, #16]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	bfab      	itete	ge
 801c7c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c7c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c7c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c7ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c7ce:	bfac      	ite	ge
 801c7d0:	eb03 0902 	addge.w	r9, r3, r2
 801c7d4:	1ad7      	sublt	r7, r2, r3
 801c7d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c7d8:	eba3 0801 	sub.w	r8, r3, r1
 801c7dc:	4490      	add	r8, r2
 801c7de:	4ba1      	ldr	r3, [pc, #644]	; (801ca64 <_strtod_l+0x95c>)
 801c7e0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7e4:	4598      	cmp	r8, r3
 801c7e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c7ea:	f280 80c7 	bge.w	801c97c <_strtod_l+0x874>
 801c7ee:	eba3 0308 	sub.w	r3, r3, r8
 801c7f2:	2b1f      	cmp	r3, #31
 801c7f4:	eba2 0203 	sub.w	r2, r2, r3
 801c7f8:	f04f 0101 	mov.w	r1, #1
 801c7fc:	f300 80b1 	bgt.w	801c962 <_strtod_l+0x85a>
 801c800:	fa01 f303 	lsl.w	r3, r1, r3
 801c804:	930d      	str	r3, [sp, #52]	; 0x34
 801c806:	2300      	movs	r3, #0
 801c808:	9308      	str	r3, [sp, #32]
 801c80a:	eb09 0802 	add.w	r8, r9, r2
 801c80e:	9b04      	ldr	r3, [sp, #16]
 801c810:	45c1      	cmp	r9, r8
 801c812:	4417      	add	r7, r2
 801c814:	441f      	add	r7, r3
 801c816:	464b      	mov	r3, r9
 801c818:	bfa8      	it	ge
 801c81a:	4643      	movge	r3, r8
 801c81c:	42bb      	cmp	r3, r7
 801c81e:	bfa8      	it	ge
 801c820:	463b      	movge	r3, r7
 801c822:	2b00      	cmp	r3, #0
 801c824:	bfc2      	ittt	gt
 801c826:	eba8 0803 	subgt.w	r8, r8, r3
 801c82a:	1aff      	subgt	r7, r7, r3
 801c82c:	eba9 0903 	subgt.w	r9, r9, r3
 801c830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c832:	2b00      	cmp	r3, #0
 801c834:	dd17      	ble.n	801c866 <_strtod_l+0x75e>
 801c836:	4631      	mov	r1, r6
 801c838:	461a      	mov	r2, r3
 801c83a:	4620      	mov	r0, r4
 801c83c:	f002 fab0 	bl	801eda0 <__pow5mult>
 801c840:	4606      	mov	r6, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	f43f aea8 	beq.w	801c598 <_strtod_l+0x490>
 801c848:	4601      	mov	r1, r0
 801c84a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c84c:	4620      	mov	r0, r4
 801c84e:	f002 f9fd 	bl	801ec4c <__multiply>
 801c852:	900b      	str	r0, [sp, #44]	; 0x2c
 801c854:	2800      	cmp	r0, #0
 801c856:	f43f ae9f 	beq.w	801c598 <_strtod_l+0x490>
 801c85a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c85c:	4620      	mov	r0, r4
 801c85e:	f002 f8dd 	bl	801ea1c <_Bfree>
 801c862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c864:	9318      	str	r3, [sp, #96]	; 0x60
 801c866:	f1b8 0f00 	cmp.w	r8, #0
 801c86a:	f300 808c 	bgt.w	801c986 <_strtod_l+0x87e>
 801c86e:	9b06      	ldr	r3, [sp, #24]
 801c870:	2b00      	cmp	r3, #0
 801c872:	dd08      	ble.n	801c886 <_strtod_l+0x77e>
 801c874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c876:	9905      	ldr	r1, [sp, #20]
 801c878:	4620      	mov	r0, r4
 801c87a:	f002 fa91 	bl	801eda0 <__pow5mult>
 801c87e:	9005      	str	r0, [sp, #20]
 801c880:	2800      	cmp	r0, #0
 801c882:	f43f ae89 	beq.w	801c598 <_strtod_l+0x490>
 801c886:	2f00      	cmp	r7, #0
 801c888:	dd08      	ble.n	801c89c <_strtod_l+0x794>
 801c88a:	9905      	ldr	r1, [sp, #20]
 801c88c:	463a      	mov	r2, r7
 801c88e:	4620      	mov	r0, r4
 801c890:	f002 fae0 	bl	801ee54 <__lshift>
 801c894:	9005      	str	r0, [sp, #20]
 801c896:	2800      	cmp	r0, #0
 801c898:	f43f ae7e 	beq.w	801c598 <_strtod_l+0x490>
 801c89c:	f1b9 0f00 	cmp.w	r9, #0
 801c8a0:	dd08      	ble.n	801c8b4 <_strtod_l+0x7ac>
 801c8a2:	4631      	mov	r1, r6
 801c8a4:	464a      	mov	r2, r9
 801c8a6:	4620      	mov	r0, r4
 801c8a8:	f002 fad4 	bl	801ee54 <__lshift>
 801c8ac:	4606      	mov	r6, r0
 801c8ae:	2800      	cmp	r0, #0
 801c8b0:	f43f ae72 	beq.w	801c598 <_strtod_l+0x490>
 801c8b4:	9a05      	ldr	r2, [sp, #20]
 801c8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	f002 fb57 	bl	801ef6c <__mdiff>
 801c8be:	4605      	mov	r5, r0
 801c8c0:	2800      	cmp	r0, #0
 801c8c2:	f43f ae69 	beq.w	801c598 <_strtod_l+0x490>
 801c8c6:	68c3      	ldr	r3, [r0, #12]
 801c8c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	60c3      	str	r3, [r0, #12]
 801c8ce:	4631      	mov	r1, r6
 801c8d0:	f002 fb30 	bl	801ef34 <__mcmp>
 801c8d4:	2800      	cmp	r0, #0
 801c8d6:	da60      	bge.n	801c99a <_strtod_l+0x892>
 801c8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8da:	ea53 030a 	orrs.w	r3, r3, sl
 801c8de:	f040 8082 	bne.w	801c9e6 <_strtod_l+0x8de>
 801c8e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d17d      	bne.n	801c9e6 <_strtod_l+0x8de>
 801c8ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c8ee:	0d1b      	lsrs	r3, r3, #20
 801c8f0:	051b      	lsls	r3, r3, #20
 801c8f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c8f6:	d976      	bls.n	801c9e6 <_strtod_l+0x8de>
 801c8f8:	696b      	ldr	r3, [r5, #20]
 801c8fa:	b913      	cbnz	r3, 801c902 <_strtod_l+0x7fa>
 801c8fc:	692b      	ldr	r3, [r5, #16]
 801c8fe:	2b01      	cmp	r3, #1
 801c900:	dd71      	ble.n	801c9e6 <_strtod_l+0x8de>
 801c902:	4629      	mov	r1, r5
 801c904:	2201      	movs	r2, #1
 801c906:	4620      	mov	r0, r4
 801c908:	f002 faa4 	bl	801ee54 <__lshift>
 801c90c:	4631      	mov	r1, r6
 801c90e:	4605      	mov	r5, r0
 801c910:	f002 fb10 	bl	801ef34 <__mcmp>
 801c914:	2800      	cmp	r0, #0
 801c916:	dd66      	ble.n	801c9e6 <_strtod_l+0x8de>
 801c918:	9904      	ldr	r1, [sp, #16]
 801c91a:	4a53      	ldr	r2, [pc, #332]	; (801ca68 <_strtod_l+0x960>)
 801c91c:	465b      	mov	r3, fp
 801c91e:	2900      	cmp	r1, #0
 801c920:	f000 8081 	beq.w	801ca26 <_strtod_l+0x91e>
 801c924:	ea02 010b 	and.w	r1, r2, fp
 801c928:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c92c:	dc7b      	bgt.n	801ca26 <_strtod_l+0x91e>
 801c92e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c932:	f77f aea9 	ble.w	801c688 <_strtod_l+0x580>
 801c936:	4b4d      	ldr	r3, [pc, #308]	; (801ca6c <_strtod_l+0x964>)
 801c938:	4650      	mov	r0, sl
 801c93a:	4659      	mov	r1, fp
 801c93c:	2200      	movs	r2, #0
 801c93e:	f7e3 fe73 	bl	8000628 <__aeabi_dmul>
 801c942:	460b      	mov	r3, r1
 801c944:	4303      	orrs	r3, r0
 801c946:	bf08      	it	eq
 801c948:	2322      	moveq	r3, #34	; 0x22
 801c94a:	4682      	mov	sl, r0
 801c94c:	468b      	mov	fp, r1
 801c94e:	bf08      	it	eq
 801c950:	6023      	streq	r3, [r4, #0]
 801c952:	e62b      	b.n	801c5ac <_strtod_l+0x4a4>
 801c954:	f04f 32ff 	mov.w	r2, #4294967295
 801c958:	fa02 f303 	lsl.w	r3, r2, r3
 801c95c:	ea03 0a0a 	and.w	sl, r3, sl
 801c960:	e6e3      	b.n	801c72a <_strtod_l+0x622>
 801c962:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c966:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c96a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c96e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c972:	fa01 f308 	lsl.w	r3, r1, r8
 801c976:	9308      	str	r3, [sp, #32]
 801c978:	910d      	str	r1, [sp, #52]	; 0x34
 801c97a:	e746      	b.n	801c80a <_strtod_l+0x702>
 801c97c:	2300      	movs	r3, #0
 801c97e:	9308      	str	r3, [sp, #32]
 801c980:	2301      	movs	r3, #1
 801c982:	930d      	str	r3, [sp, #52]	; 0x34
 801c984:	e741      	b.n	801c80a <_strtod_l+0x702>
 801c986:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c988:	4642      	mov	r2, r8
 801c98a:	4620      	mov	r0, r4
 801c98c:	f002 fa62 	bl	801ee54 <__lshift>
 801c990:	9018      	str	r0, [sp, #96]	; 0x60
 801c992:	2800      	cmp	r0, #0
 801c994:	f47f af6b 	bne.w	801c86e <_strtod_l+0x766>
 801c998:	e5fe      	b.n	801c598 <_strtod_l+0x490>
 801c99a:	465f      	mov	r7, fp
 801c99c:	d16e      	bne.n	801ca7c <_strtod_l+0x974>
 801c99e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c9a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9a4:	b342      	cbz	r2, 801c9f8 <_strtod_l+0x8f0>
 801c9a6:	4a32      	ldr	r2, [pc, #200]	; (801ca70 <_strtod_l+0x968>)
 801c9a8:	4293      	cmp	r3, r2
 801c9aa:	d128      	bne.n	801c9fe <_strtod_l+0x8f6>
 801c9ac:	9b04      	ldr	r3, [sp, #16]
 801c9ae:	4651      	mov	r1, sl
 801c9b0:	b1eb      	cbz	r3, 801c9ee <_strtod_l+0x8e6>
 801c9b2:	4b2d      	ldr	r3, [pc, #180]	; (801ca68 <_strtod_l+0x960>)
 801c9b4:	403b      	ands	r3, r7
 801c9b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c9ba:	f04f 32ff 	mov.w	r2, #4294967295
 801c9be:	d819      	bhi.n	801c9f4 <_strtod_l+0x8ec>
 801c9c0:	0d1b      	lsrs	r3, r3, #20
 801c9c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c9c6:	fa02 f303 	lsl.w	r3, r2, r3
 801c9ca:	4299      	cmp	r1, r3
 801c9cc:	d117      	bne.n	801c9fe <_strtod_l+0x8f6>
 801c9ce:	4b29      	ldr	r3, [pc, #164]	; (801ca74 <_strtod_l+0x96c>)
 801c9d0:	429f      	cmp	r7, r3
 801c9d2:	d102      	bne.n	801c9da <_strtod_l+0x8d2>
 801c9d4:	3101      	adds	r1, #1
 801c9d6:	f43f addf 	beq.w	801c598 <_strtod_l+0x490>
 801c9da:	4b23      	ldr	r3, [pc, #140]	; (801ca68 <_strtod_l+0x960>)
 801c9dc:	403b      	ands	r3, r7
 801c9de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c9e2:	f04f 0a00 	mov.w	sl, #0
 801c9e6:	9b04      	ldr	r3, [sp, #16]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d1a4      	bne.n	801c936 <_strtod_l+0x82e>
 801c9ec:	e5de      	b.n	801c5ac <_strtod_l+0x4a4>
 801c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c9f2:	e7ea      	b.n	801c9ca <_strtod_l+0x8c2>
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	e7e8      	b.n	801c9ca <_strtod_l+0x8c2>
 801c9f8:	ea53 030a 	orrs.w	r3, r3, sl
 801c9fc:	d08c      	beq.n	801c918 <_strtod_l+0x810>
 801c9fe:	9b08      	ldr	r3, [sp, #32]
 801ca00:	b1db      	cbz	r3, 801ca3a <_strtod_l+0x932>
 801ca02:	423b      	tst	r3, r7
 801ca04:	d0ef      	beq.n	801c9e6 <_strtod_l+0x8de>
 801ca06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca08:	9a04      	ldr	r2, [sp, #16]
 801ca0a:	4650      	mov	r0, sl
 801ca0c:	4659      	mov	r1, fp
 801ca0e:	b1c3      	cbz	r3, 801ca42 <_strtod_l+0x93a>
 801ca10:	f7ff fb5b 	bl	801c0ca <sulp>
 801ca14:	4602      	mov	r2, r0
 801ca16:	460b      	mov	r3, r1
 801ca18:	ec51 0b18 	vmov	r0, r1, d8
 801ca1c:	f7e3 fc4e 	bl	80002bc <__adddf3>
 801ca20:	4682      	mov	sl, r0
 801ca22:	468b      	mov	fp, r1
 801ca24:	e7df      	b.n	801c9e6 <_strtod_l+0x8de>
 801ca26:	4013      	ands	r3, r2
 801ca28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ca2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ca30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ca34:	f04f 3aff 	mov.w	sl, #4294967295
 801ca38:	e7d5      	b.n	801c9e6 <_strtod_l+0x8de>
 801ca3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca3c:	ea13 0f0a 	tst.w	r3, sl
 801ca40:	e7e0      	b.n	801ca04 <_strtod_l+0x8fc>
 801ca42:	f7ff fb42 	bl	801c0ca <sulp>
 801ca46:	4602      	mov	r2, r0
 801ca48:	460b      	mov	r3, r1
 801ca4a:	ec51 0b18 	vmov	r0, r1, d8
 801ca4e:	f7e3 fc33 	bl	80002b8 <__aeabi_dsub>
 801ca52:	2200      	movs	r2, #0
 801ca54:	2300      	movs	r3, #0
 801ca56:	4682      	mov	sl, r0
 801ca58:	468b      	mov	fp, r1
 801ca5a:	f7e4 f84d 	bl	8000af8 <__aeabi_dcmpeq>
 801ca5e:	2800      	cmp	r0, #0
 801ca60:	d0c1      	beq.n	801c9e6 <_strtod_l+0x8de>
 801ca62:	e611      	b.n	801c688 <_strtod_l+0x580>
 801ca64:	fffffc02 	.word	0xfffffc02
 801ca68:	7ff00000 	.word	0x7ff00000
 801ca6c:	39500000 	.word	0x39500000
 801ca70:	000fffff 	.word	0x000fffff
 801ca74:	7fefffff 	.word	0x7fefffff
 801ca78:	08021a38 	.word	0x08021a38
 801ca7c:	4631      	mov	r1, r6
 801ca7e:	4628      	mov	r0, r5
 801ca80:	f002 fbd6 	bl	801f230 <__ratio>
 801ca84:	ec59 8b10 	vmov	r8, r9, d0
 801ca88:	ee10 0a10 	vmov	r0, s0
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ca92:	4649      	mov	r1, r9
 801ca94:	f7e4 f844 	bl	8000b20 <__aeabi_dcmple>
 801ca98:	2800      	cmp	r0, #0
 801ca9a:	d07a      	beq.n	801cb92 <_strtod_l+0xa8a>
 801ca9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d04a      	beq.n	801cb38 <_strtod_l+0xa30>
 801caa2:	4b95      	ldr	r3, [pc, #596]	; (801ccf8 <_strtod_l+0xbf0>)
 801caa4:	2200      	movs	r2, #0
 801caa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801caaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ccf8 <_strtod_l+0xbf0>
 801caae:	f04f 0800 	mov.w	r8, #0
 801cab2:	4b92      	ldr	r3, [pc, #584]	; (801ccfc <_strtod_l+0xbf4>)
 801cab4:	403b      	ands	r3, r7
 801cab6:	930d      	str	r3, [sp, #52]	; 0x34
 801cab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801caba:	4b91      	ldr	r3, [pc, #580]	; (801cd00 <_strtod_l+0xbf8>)
 801cabc:	429a      	cmp	r2, r3
 801cabe:	f040 80b0 	bne.w	801cc22 <_strtod_l+0xb1a>
 801cac2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cac6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801caca:	ec4b ab10 	vmov	d0, sl, fp
 801cace:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cad2:	f002 fad5 	bl	801f080 <__ulp>
 801cad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cada:	ec53 2b10 	vmov	r2, r3, d0
 801cade:	f7e3 fda3 	bl	8000628 <__aeabi_dmul>
 801cae2:	4652      	mov	r2, sl
 801cae4:	465b      	mov	r3, fp
 801cae6:	f7e3 fbe9 	bl	80002bc <__adddf3>
 801caea:	460b      	mov	r3, r1
 801caec:	4983      	ldr	r1, [pc, #524]	; (801ccfc <_strtod_l+0xbf4>)
 801caee:	4a85      	ldr	r2, [pc, #532]	; (801cd04 <_strtod_l+0xbfc>)
 801caf0:	4019      	ands	r1, r3
 801caf2:	4291      	cmp	r1, r2
 801caf4:	4682      	mov	sl, r0
 801caf6:	d960      	bls.n	801cbba <_strtod_l+0xab2>
 801caf8:	ee18 3a90 	vmov	r3, s17
 801cafc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801cb00:	4293      	cmp	r3, r2
 801cb02:	d104      	bne.n	801cb0e <_strtod_l+0xa06>
 801cb04:	ee18 3a10 	vmov	r3, s16
 801cb08:	3301      	adds	r3, #1
 801cb0a:	f43f ad45 	beq.w	801c598 <_strtod_l+0x490>
 801cb0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801cd10 <_strtod_l+0xc08>
 801cb12:	f04f 3aff 	mov.w	sl, #4294967295
 801cb16:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f001 ff7f 	bl	801ea1c <_Bfree>
 801cb1e:	9905      	ldr	r1, [sp, #20]
 801cb20:	4620      	mov	r0, r4
 801cb22:	f001 ff7b 	bl	801ea1c <_Bfree>
 801cb26:	4631      	mov	r1, r6
 801cb28:	4620      	mov	r0, r4
 801cb2a:	f001 ff77 	bl	801ea1c <_Bfree>
 801cb2e:	4629      	mov	r1, r5
 801cb30:	4620      	mov	r0, r4
 801cb32:	f001 ff73 	bl	801ea1c <_Bfree>
 801cb36:	e61a      	b.n	801c76e <_strtod_l+0x666>
 801cb38:	f1ba 0f00 	cmp.w	sl, #0
 801cb3c:	d11b      	bne.n	801cb76 <_strtod_l+0xa6e>
 801cb3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cb42:	b9f3      	cbnz	r3, 801cb82 <_strtod_l+0xa7a>
 801cb44:	4b6c      	ldr	r3, [pc, #432]	; (801ccf8 <_strtod_l+0xbf0>)
 801cb46:	2200      	movs	r2, #0
 801cb48:	4640      	mov	r0, r8
 801cb4a:	4649      	mov	r1, r9
 801cb4c:	f7e3 ffde 	bl	8000b0c <__aeabi_dcmplt>
 801cb50:	b9d0      	cbnz	r0, 801cb88 <_strtod_l+0xa80>
 801cb52:	4640      	mov	r0, r8
 801cb54:	4649      	mov	r1, r9
 801cb56:	4b6c      	ldr	r3, [pc, #432]	; (801cd08 <_strtod_l+0xc00>)
 801cb58:	2200      	movs	r2, #0
 801cb5a:	f7e3 fd65 	bl	8000628 <__aeabi_dmul>
 801cb5e:	4680      	mov	r8, r0
 801cb60:	4689      	mov	r9, r1
 801cb62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801cb66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801cb6a:	9315      	str	r3, [sp, #84]	; 0x54
 801cb6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cb70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb74:	e79d      	b.n	801cab2 <_strtod_l+0x9aa>
 801cb76:	f1ba 0f01 	cmp.w	sl, #1
 801cb7a:	d102      	bne.n	801cb82 <_strtod_l+0xa7a>
 801cb7c:	2f00      	cmp	r7, #0
 801cb7e:	f43f ad83 	beq.w	801c688 <_strtod_l+0x580>
 801cb82:	4b62      	ldr	r3, [pc, #392]	; (801cd0c <_strtod_l+0xc04>)
 801cb84:	2200      	movs	r2, #0
 801cb86:	e78e      	b.n	801caa6 <_strtod_l+0x99e>
 801cb88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801cd08 <_strtod_l+0xc00>
 801cb8c:	f04f 0800 	mov.w	r8, #0
 801cb90:	e7e7      	b.n	801cb62 <_strtod_l+0xa5a>
 801cb92:	4b5d      	ldr	r3, [pc, #372]	; (801cd08 <_strtod_l+0xc00>)
 801cb94:	4640      	mov	r0, r8
 801cb96:	4649      	mov	r1, r9
 801cb98:	2200      	movs	r2, #0
 801cb9a:	f7e3 fd45 	bl	8000628 <__aeabi_dmul>
 801cb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cba0:	4680      	mov	r8, r0
 801cba2:	4689      	mov	r9, r1
 801cba4:	b933      	cbnz	r3, 801cbb4 <_strtod_l+0xaac>
 801cba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cbaa:	900e      	str	r0, [sp, #56]	; 0x38
 801cbac:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801cbb2:	e7dd      	b.n	801cb70 <_strtod_l+0xa68>
 801cbb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801cbb8:	e7f9      	b.n	801cbae <_strtod_l+0xaa6>
 801cbba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801cbbe:	9b04      	ldr	r3, [sp, #16]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d1a8      	bne.n	801cb16 <_strtod_l+0xa0e>
 801cbc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801cbc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cbca:	0d1b      	lsrs	r3, r3, #20
 801cbcc:	051b      	lsls	r3, r3, #20
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d1a1      	bne.n	801cb16 <_strtod_l+0xa0e>
 801cbd2:	4640      	mov	r0, r8
 801cbd4:	4649      	mov	r1, r9
 801cbd6:	f7e4 f887 	bl	8000ce8 <__aeabi_d2lz>
 801cbda:	f7e3 fcf7 	bl	80005cc <__aeabi_l2d>
 801cbde:	4602      	mov	r2, r0
 801cbe0:	460b      	mov	r3, r1
 801cbe2:	4640      	mov	r0, r8
 801cbe4:	4649      	mov	r1, r9
 801cbe6:	f7e3 fb67 	bl	80002b8 <__aeabi_dsub>
 801cbea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cbec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cbf0:	ea43 030a 	orr.w	r3, r3, sl
 801cbf4:	4313      	orrs	r3, r2
 801cbf6:	4680      	mov	r8, r0
 801cbf8:	4689      	mov	r9, r1
 801cbfa:	d055      	beq.n	801cca8 <_strtod_l+0xba0>
 801cbfc:	a336      	add	r3, pc, #216	; (adr r3, 801ccd8 <_strtod_l+0xbd0>)
 801cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc02:	f7e3 ff83 	bl	8000b0c <__aeabi_dcmplt>
 801cc06:	2800      	cmp	r0, #0
 801cc08:	f47f acd0 	bne.w	801c5ac <_strtod_l+0x4a4>
 801cc0c:	a334      	add	r3, pc, #208	; (adr r3, 801cce0 <_strtod_l+0xbd8>)
 801cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc12:	4640      	mov	r0, r8
 801cc14:	4649      	mov	r1, r9
 801cc16:	f7e3 ff97 	bl	8000b48 <__aeabi_dcmpgt>
 801cc1a:	2800      	cmp	r0, #0
 801cc1c:	f43f af7b 	beq.w	801cb16 <_strtod_l+0xa0e>
 801cc20:	e4c4      	b.n	801c5ac <_strtod_l+0x4a4>
 801cc22:	9b04      	ldr	r3, [sp, #16]
 801cc24:	b333      	cbz	r3, 801cc74 <_strtod_l+0xb6c>
 801cc26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cc2c:	d822      	bhi.n	801cc74 <_strtod_l+0xb6c>
 801cc2e:	a32e      	add	r3, pc, #184	; (adr r3, 801cce8 <_strtod_l+0xbe0>)
 801cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc34:	4640      	mov	r0, r8
 801cc36:	4649      	mov	r1, r9
 801cc38:	f7e3 ff72 	bl	8000b20 <__aeabi_dcmple>
 801cc3c:	b1a0      	cbz	r0, 801cc68 <_strtod_l+0xb60>
 801cc3e:	4649      	mov	r1, r9
 801cc40:	4640      	mov	r0, r8
 801cc42:	f7e3 ffc9 	bl	8000bd8 <__aeabi_d2uiz>
 801cc46:	2801      	cmp	r0, #1
 801cc48:	bf38      	it	cc
 801cc4a:	2001      	movcc	r0, #1
 801cc4c:	f7e3 fc72 	bl	8000534 <__aeabi_ui2d>
 801cc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc52:	4680      	mov	r8, r0
 801cc54:	4689      	mov	r9, r1
 801cc56:	bb23      	cbnz	r3, 801cca2 <_strtod_l+0xb9a>
 801cc58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc5c:	9010      	str	r0, [sp, #64]	; 0x40
 801cc5e:	9311      	str	r3, [sp, #68]	; 0x44
 801cc60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cc64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cc70:	1a9b      	subs	r3, r3, r2
 801cc72:	9309      	str	r3, [sp, #36]	; 0x24
 801cc74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc78:	eeb0 0a48 	vmov.f32	s0, s16
 801cc7c:	eef0 0a68 	vmov.f32	s1, s17
 801cc80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cc84:	f002 f9fc 	bl	801f080 <__ulp>
 801cc88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc8c:	ec53 2b10 	vmov	r2, r3, d0
 801cc90:	f7e3 fcca 	bl	8000628 <__aeabi_dmul>
 801cc94:	ec53 2b18 	vmov	r2, r3, d8
 801cc98:	f7e3 fb10 	bl	80002bc <__adddf3>
 801cc9c:	4682      	mov	sl, r0
 801cc9e:	468b      	mov	fp, r1
 801cca0:	e78d      	b.n	801cbbe <_strtod_l+0xab6>
 801cca2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801cca6:	e7db      	b.n	801cc60 <_strtod_l+0xb58>
 801cca8:	a311      	add	r3, pc, #68	; (adr r3, 801ccf0 <_strtod_l+0xbe8>)
 801ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccae:	f7e3 ff2d 	bl	8000b0c <__aeabi_dcmplt>
 801ccb2:	e7b2      	b.n	801cc1a <_strtod_l+0xb12>
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	930a      	str	r3, [sp, #40]	; 0x28
 801ccb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ccba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ccbc:	6013      	str	r3, [r2, #0]
 801ccbe:	f7ff ba6b 	b.w	801c198 <_strtod_l+0x90>
 801ccc2:	2a65      	cmp	r2, #101	; 0x65
 801ccc4:	f43f ab5f 	beq.w	801c386 <_strtod_l+0x27e>
 801ccc8:	2a45      	cmp	r2, #69	; 0x45
 801ccca:	f43f ab5c 	beq.w	801c386 <_strtod_l+0x27e>
 801ccce:	2301      	movs	r3, #1
 801ccd0:	f7ff bb94 	b.w	801c3fc <_strtod_l+0x2f4>
 801ccd4:	f3af 8000 	nop.w
 801ccd8:	94a03595 	.word	0x94a03595
 801ccdc:	3fdfffff 	.word	0x3fdfffff
 801cce0:	35afe535 	.word	0x35afe535
 801cce4:	3fe00000 	.word	0x3fe00000
 801cce8:	ffc00000 	.word	0xffc00000
 801ccec:	41dfffff 	.word	0x41dfffff
 801ccf0:	94a03595 	.word	0x94a03595
 801ccf4:	3fcfffff 	.word	0x3fcfffff
 801ccf8:	3ff00000 	.word	0x3ff00000
 801ccfc:	7ff00000 	.word	0x7ff00000
 801cd00:	7fe00000 	.word	0x7fe00000
 801cd04:	7c9fffff 	.word	0x7c9fffff
 801cd08:	3fe00000 	.word	0x3fe00000
 801cd0c:	bff00000 	.word	0xbff00000
 801cd10:	7fefffff 	.word	0x7fefffff

0801cd14 <_strtod_r>:
 801cd14:	4b01      	ldr	r3, [pc, #4]	; (801cd1c <_strtod_r+0x8>)
 801cd16:	f7ff b9f7 	b.w	801c108 <_strtod_l>
 801cd1a:	bf00      	nop
 801cd1c:	200001e4 	.word	0x200001e4

0801cd20 <strtok>:
 801cd20:	4b16      	ldr	r3, [pc, #88]	; (801cd7c <strtok+0x5c>)
 801cd22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cd24:	681e      	ldr	r6, [r3, #0]
 801cd26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801cd28:	4605      	mov	r5, r0
 801cd2a:	b9fc      	cbnz	r4, 801cd6c <strtok+0x4c>
 801cd2c:	2050      	movs	r0, #80	; 0x50
 801cd2e:	9101      	str	r1, [sp, #4]
 801cd30:	f7fe f94a 	bl	801afc8 <malloc>
 801cd34:	9901      	ldr	r1, [sp, #4]
 801cd36:	65b0      	str	r0, [r6, #88]	; 0x58
 801cd38:	4602      	mov	r2, r0
 801cd3a:	b920      	cbnz	r0, 801cd46 <strtok+0x26>
 801cd3c:	4b10      	ldr	r3, [pc, #64]	; (801cd80 <strtok+0x60>)
 801cd3e:	4811      	ldr	r0, [pc, #68]	; (801cd84 <strtok+0x64>)
 801cd40:	2157      	movs	r1, #87	; 0x57
 801cd42:	f000 f9d1 	bl	801d0e8 <__assert_func>
 801cd46:	e9c0 4400 	strd	r4, r4, [r0]
 801cd4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801cd4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801cd52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801cd56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801cd5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801cd5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801cd62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801cd66:	6184      	str	r4, [r0, #24]
 801cd68:	7704      	strb	r4, [r0, #28]
 801cd6a:	6244      	str	r4, [r0, #36]	; 0x24
 801cd6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801cd6e:	2301      	movs	r3, #1
 801cd70:	4628      	mov	r0, r5
 801cd72:	b002      	add	sp, #8
 801cd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd78:	f000 b806 	b.w	801cd88 <__strtok_r>
 801cd7c:	2000017c 	.word	0x2000017c
 801cd80:	08021a60 	.word	0x08021a60
 801cd84:	08021a77 	.word	0x08021a77

0801cd88 <__strtok_r>:
 801cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd8a:	b908      	cbnz	r0, 801cd90 <__strtok_r+0x8>
 801cd8c:	6810      	ldr	r0, [r2, #0]
 801cd8e:	b188      	cbz	r0, 801cdb4 <__strtok_r+0x2c>
 801cd90:	4604      	mov	r4, r0
 801cd92:	4620      	mov	r0, r4
 801cd94:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cd98:	460f      	mov	r7, r1
 801cd9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cd9e:	b91e      	cbnz	r6, 801cda8 <__strtok_r+0x20>
 801cda0:	b965      	cbnz	r5, 801cdbc <__strtok_r+0x34>
 801cda2:	6015      	str	r5, [r2, #0]
 801cda4:	4628      	mov	r0, r5
 801cda6:	e005      	b.n	801cdb4 <__strtok_r+0x2c>
 801cda8:	42b5      	cmp	r5, r6
 801cdaa:	d1f6      	bne.n	801cd9a <__strtok_r+0x12>
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d1f0      	bne.n	801cd92 <__strtok_r+0xa>
 801cdb0:	6014      	str	r4, [r2, #0]
 801cdb2:	7003      	strb	r3, [r0, #0]
 801cdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cdb6:	461c      	mov	r4, r3
 801cdb8:	e00c      	b.n	801cdd4 <__strtok_r+0x4c>
 801cdba:	b915      	cbnz	r5, 801cdc2 <__strtok_r+0x3a>
 801cdbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cdc0:	460e      	mov	r6, r1
 801cdc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cdc6:	42ab      	cmp	r3, r5
 801cdc8:	d1f7      	bne.n	801cdba <__strtok_r+0x32>
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d0f3      	beq.n	801cdb6 <__strtok_r+0x2e>
 801cdce:	2300      	movs	r3, #0
 801cdd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801cdd4:	6014      	str	r4, [r2, #0]
 801cdd6:	e7ed      	b.n	801cdb4 <__strtok_r+0x2c>

0801cdd8 <_strtol_l.constprop.0>:
 801cdd8:	2b01      	cmp	r3, #1
 801cdda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdde:	d001      	beq.n	801cde4 <_strtol_l.constprop.0+0xc>
 801cde0:	2b24      	cmp	r3, #36	; 0x24
 801cde2:	d906      	bls.n	801cdf2 <_strtol_l.constprop.0+0x1a>
 801cde4:	f7fe f854 	bl	801ae90 <__errno>
 801cde8:	2316      	movs	r3, #22
 801cdea:	6003      	str	r3, [r0, #0]
 801cdec:	2000      	movs	r0, #0
 801cdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ced8 <_strtol_l.constprop.0+0x100>
 801cdf6:	460d      	mov	r5, r1
 801cdf8:	462e      	mov	r6, r5
 801cdfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cdfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 801ce02:	f017 0708 	ands.w	r7, r7, #8
 801ce06:	d1f7      	bne.n	801cdf8 <_strtol_l.constprop.0+0x20>
 801ce08:	2c2d      	cmp	r4, #45	; 0x2d
 801ce0a:	d132      	bne.n	801ce72 <_strtol_l.constprop.0+0x9a>
 801ce0c:	782c      	ldrb	r4, [r5, #0]
 801ce0e:	2701      	movs	r7, #1
 801ce10:	1cb5      	adds	r5, r6, #2
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d05b      	beq.n	801cece <_strtol_l.constprop.0+0xf6>
 801ce16:	2b10      	cmp	r3, #16
 801ce18:	d109      	bne.n	801ce2e <_strtol_l.constprop.0+0x56>
 801ce1a:	2c30      	cmp	r4, #48	; 0x30
 801ce1c:	d107      	bne.n	801ce2e <_strtol_l.constprop.0+0x56>
 801ce1e:	782c      	ldrb	r4, [r5, #0]
 801ce20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ce24:	2c58      	cmp	r4, #88	; 0x58
 801ce26:	d14d      	bne.n	801cec4 <_strtol_l.constprop.0+0xec>
 801ce28:	786c      	ldrb	r4, [r5, #1]
 801ce2a:	2310      	movs	r3, #16
 801ce2c:	3502      	adds	r5, #2
 801ce2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ce32:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce36:	f04f 0c00 	mov.w	ip, #0
 801ce3a:	fbb8 f9f3 	udiv	r9, r8, r3
 801ce3e:	4666      	mov	r6, ip
 801ce40:	fb03 8a19 	mls	sl, r3, r9, r8
 801ce44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801ce48:	f1be 0f09 	cmp.w	lr, #9
 801ce4c:	d816      	bhi.n	801ce7c <_strtol_l.constprop.0+0xa4>
 801ce4e:	4674      	mov	r4, lr
 801ce50:	42a3      	cmp	r3, r4
 801ce52:	dd24      	ble.n	801ce9e <_strtol_l.constprop.0+0xc6>
 801ce54:	f1bc 0f00 	cmp.w	ip, #0
 801ce58:	db1e      	blt.n	801ce98 <_strtol_l.constprop.0+0xc0>
 801ce5a:	45b1      	cmp	r9, r6
 801ce5c:	d31c      	bcc.n	801ce98 <_strtol_l.constprop.0+0xc0>
 801ce5e:	d101      	bne.n	801ce64 <_strtol_l.constprop.0+0x8c>
 801ce60:	45a2      	cmp	sl, r4
 801ce62:	db19      	blt.n	801ce98 <_strtol_l.constprop.0+0xc0>
 801ce64:	fb06 4603 	mla	r6, r6, r3, r4
 801ce68:	f04f 0c01 	mov.w	ip, #1
 801ce6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce70:	e7e8      	b.n	801ce44 <_strtol_l.constprop.0+0x6c>
 801ce72:	2c2b      	cmp	r4, #43	; 0x2b
 801ce74:	bf04      	itt	eq
 801ce76:	782c      	ldrbeq	r4, [r5, #0]
 801ce78:	1cb5      	addeq	r5, r6, #2
 801ce7a:	e7ca      	b.n	801ce12 <_strtol_l.constprop.0+0x3a>
 801ce7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ce80:	f1be 0f19 	cmp.w	lr, #25
 801ce84:	d801      	bhi.n	801ce8a <_strtol_l.constprop.0+0xb2>
 801ce86:	3c37      	subs	r4, #55	; 0x37
 801ce88:	e7e2      	b.n	801ce50 <_strtol_l.constprop.0+0x78>
 801ce8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801ce8e:	f1be 0f19 	cmp.w	lr, #25
 801ce92:	d804      	bhi.n	801ce9e <_strtol_l.constprop.0+0xc6>
 801ce94:	3c57      	subs	r4, #87	; 0x57
 801ce96:	e7db      	b.n	801ce50 <_strtol_l.constprop.0+0x78>
 801ce98:	f04f 3cff 	mov.w	ip, #4294967295
 801ce9c:	e7e6      	b.n	801ce6c <_strtol_l.constprop.0+0x94>
 801ce9e:	f1bc 0f00 	cmp.w	ip, #0
 801cea2:	da05      	bge.n	801ceb0 <_strtol_l.constprop.0+0xd8>
 801cea4:	2322      	movs	r3, #34	; 0x22
 801cea6:	6003      	str	r3, [r0, #0]
 801cea8:	4646      	mov	r6, r8
 801ceaa:	b942      	cbnz	r2, 801cebe <_strtol_l.constprop.0+0xe6>
 801ceac:	4630      	mov	r0, r6
 801ceae:	e79e      	b.n	801cdee <_strtol_l.constprop.0+0x16>
 801ceb0:	b107      	cbz	r7, 801ceb4 <_strtol_l.constprop.0+0xdc>
 801ceb2:	4276      	negs	r6, r6
 801ceb4:	2a00      	cmp	r2, #0
 801ceb6:	d0f9      	beq.n	801ceac <_strtol_l.constprop.0+0xd4>
 801ceb8:	f1bc 0f00 	cmp.w	ip, #0
 801cebc:	d000      	beq.n	801cec0 <_strtol_l.constprop.0+0xe8>
 801cebe:	1e69      	subs	r1, r5, #1
 801cec0:	6011      	str	r1, [r2, #0]
 801cec2:	e7f3      	b.n	801ceac <_strtol_l.constprop.0+0xd4>
 801cec4:	2430      	movs	r4, #48	; 0x30
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d1b1      	bne.n	801ce2e <_strtol_l.constprop.0+0x56>
 801ceca:	2308      	movs	r3, #8
 801cecc:	e7af      	b.n	801ce2e <_strtol_l.constprop.0+0x56>
 801cece:	2c30      	cmp	r4, #48	; 0x30
 801ced0:	d0a5      	beq.n	801ce1e <_strtol_l.constprop.0+0x46>
 801ced2:	230a      	movs	r3, #10
 801ced4:	e7ab      	b.n	801ce2e <_strtol_l.constprop.0+0x56>
 801ced6:	bf00      	nop
 801ced8:	08021b11 	.word	0x08021b11

0801cedc <_strtol_r>:
 801cedc:	f7ff bf7c 	b.w	801cdd8 <_strtol_l.constprop.0>

0801cee0 <strtol>:
 801cee0:	4613      	mov	r3, r2
 801cee2:	460a      	mov	r2, r1
 801cee4:	4601      	mov	r1, r0
 801cee6:	4802      	ldr	r0, [pc, #8]	; (801cef0 <strtol+0x10>)
 801cee8:	6800      	ldr	r0, [r0, #0]
 801ceea:	f7ff bf75 	b.w	801cdd8 <_strtol_l.constprop.0>
 801ceee:	bf00      	nop
 801cef0:	2000017c 	.word	0x2000017c

0801cef4 <_vsniprintf_r>:
 801cef4:	b530      	push	{r4, r5, lr}
 801cef6:	4614      	mov	r4, r2
 801cef8:	2c00      	cmp	r4, #0
 801cefa:	b09b      	sub	sp, #108	; 0x6c
 801cefc:	4605      	mov	r5, r0
 801cefe:	461a      	mov	r2, r3
 801cf00:	da05      	bge.n	801cf0e <_vsniprintf_r+0x1a>
 801cf02:	238b      	movs	r3, #139	; 0x8b
 801cf04:	6003      	str	r3, [r0, #0]
 801cf06:	f04f 30ff 	mov.w	r0, #4294967295
 801cf0a:	b01b      	add	sp, #108	; 0x6c
 801cf0c:	bd30      	pop	{r4, r5, pc}
 801cf0e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cf12:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cf16:	bf14      	ite	ne
 801cf18:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cf1c:	4623      	moveq	r3, r4
 801cf1e:	9302      	str	r3, [sp, #8]
 801cf20:	9305      	str	r3, [sp, #20]
 801cf22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf26:	9100      	str	r1, [sp, #0]
 801cf28:	9104      	str	r1, [sp, #16]
 801cf2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cf2e:	4669      	mov	r1, sp
 801cf30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cf32:	f002 fa65 	bl	801f400 <_svfiprintf_r>
 801cf36:	1c43      	adds	r3, r0, #1
 801cf38:	bfbc      	itt	lt
 801cf3a:	238b      	movlt	r3, #139	; 0x8b
 801cf3c:	602b      	strlt	r3, [r5, #0]
 801cf3e:	2c00      	cmp	r4, #0
 801cf40:	d0e3      	beq.n	801cf0a <_vsniprintf_r+0x16>
 801cf42:	9b00      	ldr	r3, [sp, #0]
 801cf44:	2200      	movs	r2, #0
 801cf46:	701a      	strb	r2, [r3, #0]
 801cf48:	e7df      	b.n	801cf0a <_vsniprintf_r+0x16>
	...

0801cf4c <vsniprintf>:
 801cf4c:	b507      	push	{r0, r1, r2, lr}
 801cf4e:	9300      	str	r3, [sp, #0]
 801cf50:	4613      	mov	r3, r2
 801cf52:	460a      	mov	r2, r1
 801cf54:	4601      	mov	r1, r0
 801cf56:	4803      	ldr	r0, [pc, #12]	; (801cf64 <vsniprintf+0x18>)
 801cf58:	6800      	ldr	r0, [r0, #0]
 801cf5a:	f7ff ffcb 	bl	801cef4 <_vsniprintf_r>
 801cf5e:	b003      	add	sp, #12
 801cf60:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf64:	2000017c 	.word	0x2000017c

0801cf68 <__swbuf_r>:
 801cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf6a:	460e      	mov	r6, r1
 801cf6c:	4614      	mov	r4, r2
 801cf6e:	4605      	mov	r5, r0
 801cf70:	b118      	cbz	r0, 801cf7a <__swbuf_r+0x12>
 801cf72:	6983      	ldr	r3, [r0, #24]
 801cf74:	b90b      	cbnz	r3, 801cf7a <__swbuf_r+0x12>
 801cf76:	f001 f86b 	bl	801e050 <__sinit>
 801cf7a:	4b21      	ldr	r3, [pc, #132]	; (801d000 <__swbuf_r+0x98>)
 801cf7c:	429c      	cmp	r4, r3
 801cf7e:	d12b      	bne.n	801cfd8 <__swbuf_r+0x70>
 801cf80:	686c      	ldr	r4, [r5, #4]
 801cf82:	69a3      	ldr	r3, [r4, #24]
 801cf84:	60a3      	str	r3, [r4, #8]
 801cf86:	89a3      	ldrh	r3, [r4, #12]
 801cf88:	071a      	lsls	r2, r3, #28
 801cf8a:	d52f      	bpl.n	801cfec <__swbuf_r+0x84>
 801cf8c:	6923      	ldr	r3, [r4, #16]
 801cf8e:	b36b      	cbz	r3, 801cfec <__swbuf_r+0x84>
 801cf90:	6923      	ldr	r3, [r4, #16]
 801cf92:	6820      	ldr	r0, [r4, #0]
 801cf94:	1ac0      	subs	r0, r0, r3
 801cf96:	6963      	ldr	r3, [r4, #20]
 801cf98:	b2f6      	uxtb	r6, r6
 801cf9a:	4283      	cmp	r3, r0
 801cf9c:	4637      	mov	r7, r6
 801cf9e:	dc04      	bgt.n	801cfaa <__swbuf_r+0x42>
 801cfa0:	4621      	mov	r1, r4
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	f000 ffc0 	bl	801df28 <_fflush_r>
 801cfa8:	bb30      	cbnz	r0, 801cff8 <__swbuf_r+0x90>
 801cfaa:	68a3      	ldr	r3, [r4, #8]
 801cfac:	3b01      	subs	r3, #1
 801cfae:	60a3      	str	r3, [r4, #8]
 801cfb0:	6823      	ldr	r3, [r4, #0]
 801cfb2:	1c5a      	adds	r2, r3, #1
 801cfb4:	6022      	str	r2, [r4, #0]
 801cfb6:	701e      	strb	r6, [r3, #0]
 801cfb8:	6963      	ldr	r3, [r4, #20]
 801cfba:	3001      	adds	r0, #1
 801cfbc:	4283      	cmp	r3, r0
 801cfbe:	d004      	beq.n	801cfca <__swbuf_r+0x62>
 801cfc0:	89a3      	ldrh	r3, [r4, #12]
 801cfc2:	07db      	lsls	r3, r3, #31
 801cfc4:	d506      	bpl.n	801cfd4 <__swbuf_r+0x6c>
 801cfc6:	2e0a      	cmp	r6, #10
 801cfc8:	d104      	bne.n	801cfd4 <__swbuf_r+0x6c>
 801cfca:	4621      	mov	r1, r4
 801cfcc:	4628      	mov	r0, r5
 801cfce:	f000 ffab 	bl	801df28 <_fflush_r>
 801cfd2:	b988      	cbnz	r0, 801cff8 <__swbuf_r+0x90>
 801cfd4:	4638      	mov	r0, r7
 801cfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfd8:	4b0a      	ldr	r3, [pc, #40]	; (801d004 <__swbuf_r+0x9c>)
 801cfda:	429c      	cmp	r4, r3
 801cfdc:	d101      	bne.n	801cfe2 <__swbuf_r+0x7a>
 801cfde:	68ac      	ldr	r4, [r5, #8]
 801cfe0:	e7cf      	b.n	801cf82 <__swbuf_r+0x1a>
 801cfe2:	4b09      	ldr	r3, [pc, #36]	; (801d008 <__swbuf_r+0xa0>)
 801cfe4:	429c      	cmp	r4, r3
 801cfe6:	bf08      	it	eq
 801cfe8:	68ec      	ldreq	r4, [r5, #12]
 801cfea:	e7ca      	b.n	801cf82 <__swbuf_r+0x1a>
 801cfec:	4621      	mov	r1, r4
 801cfee:	4628      	mov	r0, r5
 801cff0:	f000 f80c 	bl	801d00c <__swsetup_r>
 801cff4:	2800      	cmp	r0, #0
 801cff6:	d0cb      	beq.n	801cf90 <__swbuf_r+0x28>
 801cff8:	f04f 37ff 	mov.w	r7, #4294967295
 801cffc:	e7ea      	b.n	801cfd4 <__swbuf_r+0x6c>
 801cffe:	bf00      	nop
 801d000:	08021cac 	.word	0x08021cac
 801d004:	08021ccc 	.word	0x08021ccc
 801d008:	08021c8c 	.word	0x08021c8c

0801d00c <__swsetup_r>:
 801d00c:	4b32      	ldr	r3, [pc, #200]	; (801d0d8 <__swsetup_r+0xcc>)
 801d00e:	b570      	push	{r4, r5, r6, lr}
 801d010:	681d      	ldr	r5, [r3, #0]
 801d012:	4606      	mov	r6, r0
 801d014:	460c      	mov	r4, r1
 801d016:	b125      	cbz	r5, 801d022 <__swsetup_r+0x16>
 801d018:	69ab      	ldr	r3, [r5, #24]
 801d01a:	b913      	cbnz	r3, 801d022 <__swsetup_r+0x16>
 801d01c:	4628      	mov	r0, r5
 801d01e:	f001 f817 	bl	801e050 <__sinit>
 801d022:	4b2e      	ldr	r3, [pc, #184]	; (801d0dc <__swsetup_r+0xd0>)
 801d024:	429c      	cmp	r4, r3
 801d026:	d10f      	bne.n	801d048 <__swsetup_r+0x3c>
 801d028:	686c      	ldr	r4, [r5, #4]
 801d02a:	89a3      	ldrh	r3, [r4, #12]
 801d02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d030:	0719      	lsls	r1, r3, #28
 801d032:	d42c      	bmi.n	801d08e <__swsetup_r+0x82>
 801d034:	06dd      	lsls	r5, r3, #27
 801d036:	d411      	bmi.n	801d05c <__swsetup_r+0x50>
 801d038:	2309      	movs	r3, #9
 801d03a:	6033      	str	r3, [r6, #0]
 801d03c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d040:	81a3      	strh	r3, [r4, #12]
 801d042:	f04f 30ff 	mov.w	r0, #4294967295
 801d046:	e03e      	b.n	801d0c6 <__swsetup_r+0xba>
 801d048:	4b25      	ldr	r3, [pc, #148]	; (801d0e0 <__swsetup_r+0xd4>)
 801d04a:	429c      	cmp	r4, r3
 801d04c:	d101      	bne.n	801d052 <__swsetup_r+0x46>
 801d04e:	68ac      	ldr	r4, [r5, #8]
 801d050:	e7eb      	b.n	801d02a <__swsetup_r+0x1e>
 801d052:	4b24      	ldr	r3, [pc, #144]	; (801d0e4 <__swsetup_r+0xd8>)
 801d054:	429c      	cmp	r4, r3
 801d056:	bf08      	it	eq
 801d058:	68ec      	ldreq	r4, [r5, #12]
 801d05a:	e7e6      	b.n	801d02a <__swsetup_r+0x1e>
 801d05c:	0758      	lsls	r0, r3, #29
 801d05e:	d512      	bpl.n	801d086 <__swsetup_r+0x7a>
 801d060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d062:	b141      	cbz	r1, 801d076 <__swsetup_r+0x6a>
 801d064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d068:	4299      	cmp	r1, r3
 801d06a:	d002      	beq.n	801d072 <__swsetup_r+0x66>
 801d06c:	4630      	mov	r0, r6
 801d06e:	f7fd ffe3 	bl	801b038 <_free_r>
 801d072:	2300      	movs	r3, #0
 801d074:	6363      	str	r3, [r4, #52]	; 0x34
 801d076:	89a3      	ldrh	r3, [r4, #12]
 801d078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d07c:	81a3      	strh	r3, [r4, #12]
 801d07e:	2300      	movs	r3, #0
 801d080:	6063      	str	r3, [r4, #4]
 801d082:	6923      	ldr	r3, [r4, #16]
 801d084:	6023      	str	r3, [r4, #0]
 801d086:	89a3      	ldrh	r3, [r4, #12]
 801d088:	f043 0308 	orr.w	r3, r3, #8
 801d08c:	81a3      	strh	r3, [r4, #12]
 801d08e:	6923      	ldr	r3, [r4, #16]
 801d090:	b94b      	cbnz	r3, 801d0a6 <__swsetup_r+0x9a>
 801d092:	89a3      	ldrh	r3, [r4, #12]
 801d094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d09c:	d003      	beq.n	801d0a6 <__swsetup_r+0x9a>
 801d09e:	4621      	mov	r1, r4
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	f001 fc1d 	bl	801e8e0 <__smakebuf_r>
 801d0a6:	89a0      	ldrh	r0, [r4, #12]
 801d0a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d0ac:	f010 0301 	ands.w	r3, r0, #1
 801d0b0:	d00a      	beq.n	801d0c8 <__swsetup_r+0xbc>
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	60a3      	str	r3, [r4, #8]
 801d0b6:	6963      	ldr	r3, [r4, #20]
 801d0b8:	425b      	negs	r3, r3
 801d0ba:	61a3      	str	r3, [r4, #24]
 801d0bc:	6923      	ldr	r3, [r4, #16]
 801d0be:	b943      	cbnz	r3, 801d0d2 <__swsetup_r+0xc6>
 801d0c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d0c4:	d1ba      	bne.n	801d03c <__swsetup_r+0x30>
 801d0c6:	bd70      	pop	{r4, r5, r6, pc}
 801d0c8:	0781      	lsls	r1, r0, #30
 801d0ca:	bf58      	it	pl
 801d0cc:	6963      	ldrpl	r3, [r4, #20]
 801d0ce:	60a3      	str	r3, [r4, #8]
 801d0d0:	e7f4      	b.n	801d0bc <__swsetup_r+0xb0>
 801d0d2:	2000      	movs	r0, #0
 801d0d4:	e7f7      	b.n	801d0c6 <__swsetup_r+0xba>
 801d0d6:	bf00      	nop
 801d0d8:	2000017c 	.word	0x2000017c
 801d0dc:	08021cac 	.word	0x08021cac
 801d0e0:	08021ccc 	.word	0x08021ccc
 801d0e4:	08021c8c 	.word	0x08021c8c

0801d0e8 <__assert_func>:
 801d0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d0ea:	4614      	mov	r4, r2
 801d0ec:	461a      	mov	r2, r3
 801d0ee:	4b09      	ldr	r3, [pc, #36]	; (801d114 <__assert_func+0x2c>)
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	4605      	mov	r5, r0
 801d0f4:	68d8      	ldr	r0, [r3, #12]
 801d0f6:	b14c      	cbz	r4, 801d10c <__assert_func+0x24>
 801d0f8:	4b07      	ldr	r3, [pc, #28]	; (801d118 <__assert_func+0x30>)
 801d0fa:	9100      	str	r1, [sp, #0]
 801d0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d100:	4906      	ldr	r1, [pc, #24]	; (801d11c <__assert_func+0x34>)
 801d102:	462b      	mov	r3, r5
 801d104:	f001 f822 	bl	801e14c <fiprintf>
 801d108:	f002 fc54 	bl	801f9b4 <abort>
 801d10c:	4b04      	ldr	r3, [pc, #16]	; (801d120 <__assert_func+0x38>)
 801d10e:	461c      	mov	r4, r3
 801d110:	e7f3      	b.n	801d0fa <__assert_func+0x12>
 801d112:	bf00      	nop
 801d114:	2000017c 	.word	0x2000017c
 801d118:	08021ad4 	.word	0x08021ad4
 801d11c:	08021ae1 	.word	0x08021ae1
 801d120:	08021b0f 	.word	0x08021b0f

0801d124 <quorem>:
 801d124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d128:	6903      	ldr	r3, [r0, #16]
 801d12a:	690c      	ldr	r4, [r1, #16]
 801d12c:	42a3      	cmp	r3, r4
 801d12e:	4607      	mov	r7, r0
 801d130:	f2c0 8081 	blt.w	801d236 <quorem+0x112>
 801d134:	3c01      	subs	r4, #1
 801d136:	f101 0814 	add.w	r8, r1, #20
 801d13a:	f100 0514 	add.w	r5, r0, #20
 801d13e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d142:	9301      	str	r3, [sp, #4]
 801d144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d14c:	3301      	adds	r3, #1
 801d14e:	429a      	cmp	r2, r3
 801d150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d158:	fbb2 f6f3 	udiv	r6, r2, r3
 801d15c:	d331      	bcc.n	801d1c2 <quorem+0x9e>
 801d15e:	f04f 0e00 	mov.w	lr, #0
 801d162:	4640      	mov	r0, r8
 801d164:	46ac      	mov	ip, r5
 801d166:	46f2      	mov	sl, lr
 801d168:	f850 2b04 	ldr.w	r2, [r0], #4
 801d16c:	b293      	uxth	r3, r2
 801d16e:	fb06 e303 	mla	r3, r6, r3, lr
 801d172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d176:	b29b      	uxth	r3, r3
 801d178:	ebaa 0303 	sub.w	r3, sl, r3
 801d17c:	f8dc a000 	ldr.w	sl, [ip]
 801d180:	0c12      	lsrs	r2, r2, #16
 801d182:	fa13 f38a 	uxtah	r3, r3, sl
 801d186:	fb06 e202 	mla	r2, r6, r2, lr
 801d18a:	9300      	str	r3, [sp, #0]
 801d18c:	9b00      	ldr	r3, [sp, #0]
 801d18e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d192:	b292      	uxth	r2, r2
 801d194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d19c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d1a0:	4581      	cmp	r9, r0
 801d1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d1a6:	f84c 3b04 	str.w	r3, [ip], #4
 801d1aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d1ae:	d2db      	bcs.n	801d168 <quorem+0x44>
 801d1b0:	f855 300b 	ldr.w	r3, [r5, fp]
 801d1b4:	b92b      	cbnz	r3, 801d1c2 <quorem+0x9e>
 801d1b6:	9b01      	ldr	r3, [sp, #4]
 801d1b8:	3b04      	subs	r3, #4
 801d1ba:	429d      	cmp	r5, r3
 801d1bc:	461a      	mov	r2, r3
 801d1be:	d32e      	bcc.n	801d21e <quorem+0xfa>
 801d1c0:	613c      	str	r4, [r7, #16]
 801d1c2:	4638      	mov	r0, r7
 801d1c4:	f001 feb6 	bl	801ef34 <__mcmp>
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	db24      	blt.n	801d216 <quorem+0xf2>
 801d1cc:	3601      	adds	r6, #1
 801d1ce:	4628      	mov	r0, r5
 801d1d0:	f04f 0c00 	mov.w	ip, #0
 801d1d4:	f858 2b04 	ldr.w	r2, [r8], #4
 801d1d8:	f8d0 e000 	ldr.w	lr, [r0]
 801d1dc:	b293      	uxth	r3, r2
 801d1de:	ebac 0303 	sub.w	r3, ip, r3
 801d1e2:	0c12      	lsrs	r2, r2, #16
 801d1e4:	fa13 f38e 	uxtah	r3, r3, lr
 801d1e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d1f0:	b29b      	uxth	r3, r3
 801d1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d1f6:	45c1      	cmp	r9, r8
 801d1f8:	f840 3b04 	str.w	r3, [r0], #4
 801d1fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d200:	d2e8      	bcs.n	801d1d4 <quorem+0xb0>
 801d202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d20a:	b922      	cbnz	r2, 801d216 <quorem+0xf2>
 801d20c:	3b04      	subs	r3, #4
 801d20e:	429d      	cmp	r5, r3
 801d210:	461a      	mov	r2, r3
 801d212:	d30a      	bcc.n	801d22a <quorem+0x106>
 801d214:	613c      	str	r4, [r7, #16]
 801d216:	4630      	mov	r0, r6
 801d218:	b003      	add	sp, #12
 801d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d21e:	6812      	ldr	r2, [r2, #0]
 801d220:	3b04      	subs	r3, #4
 801d222:	2a00      	cmp	r2, #0
 801d224:	d1cc      	bne.n	801d1c0 <quorem+0x9c>
 801d226:	3c01      	subs	r4, #1
 801d228:	e7c7      	b.n	801d1ba <quorem+0x96>
 801d22a:	6812      	ldr	r2, [r2, #0]
 801d22c:	3b04      	subs	r3, #4
 801d22e:	2a00      	cmp	r2, #0
 801d230:	d1f0      	bne.n	801d214 <quorem+0xf0>
 801d232:	3c01      	subs	r4, #1
 801d234:	e7eb      	b.n	801d20e <quorem+0xea>
 801d236:	2000      	movs	r0, #0
 801d238:	e7ee      	b.n	801d218 <quorem+0xf4>
 801d23a:	0000      	movs	r0, r0
 801d23c:	0000      	movs	r0, r0
	...

0801d240 <_dtoa_r>:
 801d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d244:	ed2d 8b04 	vpush	{d8-d9}
 801d248:	ec57 6b10 	vmov	r6, r7, d0
 801d24c:	b093      	sub	sp, #76	; 0x4c
 801d24e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d254:	9106      	str	r1, [sp, #24]
 801d256:	ee10 aa10 	vmov	sl, s0
 801d25a:	4604      	mov	r4, r0
 801d25c:	9209      	str	r2, [sp, #36]	; 0x24
 801d25e:	930c      	str	r3, [sp, #48]	; 0x30
 801d260:	46bb      	mov	fp, r7
 801d262:	b975      	cbnz	r5, 801d282 <_dtoa_r+0x42>
 801d264:	2010      	movs	r0, #16
 801d266:	f7fd feaf 	bl	801afc8 <malloc>
 801d26a:	4602      	mov	r2, r0
 801d26c:	6260      	str	r0, [r4, #36]	; 0x24
 801d26e:	b920      	cbnz	r0, 801d27a <_dtoa_r+0x3a>
 801d270:	4ba7      	ldr	r3, [pc, #668]	; (801d510 <_dtoa_r+0x2d0>)
 801d272:	21ea      	movs	r1, #234	; 0xea
 801d274:	48a7      	ldr	r0, [pc, #668]	; (801d514 <_dtoa_r+0x2d4>)
 801d276:	f7ff ff37 	bl	801d0e8 <__assert_func>
 801d27a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d27e:	6005      	str	r5, [r0, #0]
 801d280:	60c5      	str	r5, [r0, #12]
 801d282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d284:	6819      	ldr	r1, [r3, #0]
 801d286:	b151      	cbz	r1, 801d29e <_dtoa_r+0x5e>
 801d288:	685a      	ldr	r2, [r3, #4]
 801d28a:	604a      	str	r2, [r1, #4]
 801d28c:	2301      	movs	r3, #1
 801d28e:	4093      	lsls	r3, r2
 801d290:	608b      	str	r3, [r1, #8]
 801d292:	4620      	mov	r0, r4
 801d294:	f001 fbc2 	bl	801ea1c <_Bfree>
 801d298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d29a:	2200      	movs	r2, #0
 801d29c:	601a      	str	r2, [r3, #0]
 801d29e:	1e3b      	subs	r3, r7, #0
 801d2a0:	bfaa      	itet	ge
 801d2a2:	2300      	movge	r3, #0
 801d2a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d2a8:	f8c8 3000 	strge.w	r3, [r8]
 801d2ac:	4b9a      	ldr	r3, [pc, #616]	; (801d518 <_dtoa_r+0x2d8>)
 801d2ae:	bfbc      	itt	lt
 801d2b0:	2201      	movlt	r2, #1
 801d2b2:	f8c8 2000 	strlt.w	r2, [r8]
 801d2b6:	ea33 030b 	bics.w	r3, r3, fp
 801d2ba:	d11b      	bne.n	801d2f4 <_dtoa_r+0xb4>
 801d2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2be:	f242 730f 	movw	r3, #9999	; 0x270f
 801d2c2:	6013      	str	r3, [r2, #0]
 801d2c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d2c8:	4333      	orrs	r3, r6
 801d2ca:	f000 8592 	beq.w	801ddf2 <_dtoa_r+0xbb2>
 801d2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2d0:	b963      	cbnz	r3, 801d2ec <_dtoa_r+0xac>
 801d2d2:	4b92      	ldr	r3, [pc, #584]	; (801d51c <_dtoa_r+0x2dc>)
 801d2d4:	e022      	b.n	801d31c <_dtoa_r+0xdc>
 801d2d6:	4b92      	ldr	r3, [pc, #584]	; (801d520 <_dtoa_r+0x2e0>)
 801d2d8:	9301      	str	r3, [sp, #4]
 801d2da:	3308      	adds	r3, #8
 801d2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d2de:	6013      	str	r3, [r2, #0]
 801d2e0:	9801      	ldr	r0, [sp, #4]
 801d2e2:	b013      	add	sp, #76	; 0x4c
 801d2e4:	ecbd 8b04 	vpop	{d8-d9}
 801d2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ec:	4b8b      	ldr	r3, [pc, #556]	; (801d51c <_dtoa_r+0x2dc>)
 801d2ee:	9301      	str	r3, [sp, #4]
 801d2f0:	3303      	adds	r3, #3
 801d2f2:	e7f3      	b.n	801d2dc <_dtoa_r+0x9c>
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	4650      	mov	r0, sl
 801d2fa:	4659      	mov	r1, fp
 801d2fc:	f7e3 fbfc 	bl	8000af8 <__aeabi_dcmpeq>
 801d300:	ec4b ab19 	vmov	d9, sl, fp
 801d304:	4680      	mov	r8, r0
 801d306:	b158      	cbz	r0, 801d320 <_dtoa_r+0xe0>
 801d308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d30a:	2301      	movs	r3, #1
 801d30c:	6013      	str	r3, [r2, #0]
 801d30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d310:	2b00      	cmp	r3, #0
 801d312:	f000 856b 	beq.w	801ddec <_dtoa_r+0xbac>
 801d316:	4883      	ldr	r0, [pc, #524]	; (801d524 <_dtoa_r+0x2e4>)
 801d318:	6018      	str	r0, [r3, #0]
 801d31a:	1e43      	subs	r3, r0, #1
 801d31c:	9301      	str	r3, [sp, #4]
 801d31e:	e7df      	b.n	801d2e0 <_dtoa_r+0xa0>
 801d320:	ec4b ab10 	vmov	d0, sl, fp
 801d324:	aa10      	add	r2, sp, #64	; 0x40
 801d326:	a911      	add	r1, sp, #68	; 0x44
 801d328:	4620      	mov	r0, r4
 801d32a:	f001 ff25 	bl	801f178 <__d2b>
 801d32e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d332:	ee08 0a10 	vmov	s16, r0
 801d336:	2d00      	cmp	r5, #0
 801d338:	f000 8084 	beq.w	801d444 <_dtoa_r+0x204>
 801d33c:	ee19 3a90 	vmov	r3, s19
 801d340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d348:	4656      	mov	r6, sl
 801d34a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d356:	4b74      	ldr	r3, [pc, #464]	; (801d528 <_dtoa_r+0x2e8>)
 801d358:	2200      	movs	r2, #0
 801d35a:	4630      	mov	r0, r6
 801d35c:	4639      	mov	r1, r7
 801d35e:	f7e2 ffab 	bl	80002b8 <__aeabi_dsub>
 801d362:	a365      	add	r3, pc, #404	; (adr r3, 801d4f8 <_dtoa_r+0x2b8>)
 801d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d368:	f7e3 f95e 	bl	8000628 <__aeabi_dmul>
 801d36c:	a364      	add	r3, pc, #400	; (adr r3, 801d500 <_dtoa_r+0x2c0>)
 801d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d372:	f7e2 ffa3 	bl	80002bc <__adddf3>
 801d376:	4606      	mov	r6, r0
 801d378:	4628      	mov	r0, r5
 801d37a:	460f      	mov	r7, r1
 801d37c:	f7e3 f8ea 	bl	8000554 <__aeabi_i2d>
 801d380:	a361      	add	r3, pc, #388	; (adr r3, 801d508 <_dtoa_r+0x2c8>)
 801d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d386:	f7e3 f94f 	bl	8000628 <__aeabi_dmul>
 801d38a:	4602      	mov	r2, r0
 801d38c:	460b      	mov	r3, r1
 801d38e:	4630      	mov	r0, r6
 801d390:	4639      	mov	r1, r7
 801d392:	f7e2 ff93 	bl	80002bc <__adddf3>
 801d396:	4606      	mov	r6, r0
 801d398:	460f      	mov	r7, r1
 801d39a:	f7e3 fbf5 	bl	8000b88 <__aeabi_d2iz>
 801d39e:	2200      	movs	r2, #0
 801d3a0:	9000      	str	r0, [sp, #0]
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	4630      	mov	r0, r6
 801d3a6:	4639      	mov	r1, r7
 801d3a8:	f7e3 fbb0 	bl	8000b0c <__aeabi_dcmplt>
 801d3ac:	b150      	cbz	r0, 801d3c4 <_dtoa_r+0x184>
 801d3ae:	9800      	ldr	r0, [sp, #0]
 801d3b0:	f7e3 f8d0 	bl	8000554 <__aeabi_i2d>
 801d3b4:	4632      	mov	r2, r6
 801d3b6:	463b      	mov	r3, r7
 801d3b8:	f7e3 fb9e 	bl	8000af8 <__aeabi_dcmpeq>
 801d3bc:	b910      	cbnz	r0, 801d3c4 <_dtoa_r+0x184>
 801d3be:	9b00      	ldr	r3, [sp, #0]
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	9300      	str	r3, [sp, #0]
 801d3c4:	9b00      	ldr	r3, [sp, #0]
 801d3c6:	2b16      	cmp	r3, #22
 801d3c8:	d85a      	bhi.n	801d480 <_dtoa_r+0x240>
 801d3ca:	9a00      	ldr	r2, [sp, #0]
 801d3cc:	4b57      	ldr	r3, [pc, #348]	; (801d52c <_dtoa_r+0x2ec>)
 801d3ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3d6:	ec51 0b19 	vmov	r0, r1, d9
 801d3da:	f7e3 fb97 	bl	8000b0c <__aeabi_dcmplt>
 801d3de:	2800      	cmp	r0, #0
 801d3e0:	d050      	beq.n	801d484 <_dtoa_r+0x244>
 801d3e2:	9b00      	ldr	r3, [sp, #0]
 801d3e4:	3b01      	subs	r3, #1
 801d3e6:	9300      	str	r3, [sp, #0]
 801d3e8:	2300      	movs	r3, #0
 801d3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801d3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3ee:	1b5d      	subs	r5, r3, r5
 801d3f0:	1e6b      	subs	r3, r5, #1
 801d3f2:	9305      	str	r3, [sp, #20]
 801d3f4:	bf45      	ittet	mi
 801d3f6:	f1c5 0301 	rsbmi	r3, r5, #1
 801d3fa:	9304      	strmi	r3, [sp, #16]
 801d3fc:	2300      	movpl	r3, #0
 801d3fe:	2300      	movmi	r3, #0
 801d400:	bf4c      	ite	mi
 801d402:	9305      	strmi	r3, [sp, #20]
 801d404:	9304      	strpl	r3, [sp, #16]
 801d406:	9b00      	ldr	r3, [sp, #0]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	db3d      	blt.n	801d488 <_dtoa_r+0x248>
 801d40c:	9b05      	ldr	r3, [sp, #20]
 801d40e:	9a00      	ldr	r2, [sp, #0]
 801d410:	920a      	str	r2, [sp, #40]	; 0x28
 801d412:	4413      	add	r3, r2
 801d414:	9305      	str	r3, [sp, #20]
 801d416:	2300      	movs	r3, #0
 801d418:	9307      	str	r3, [sp, #28]
 801d41a:	9b06      	ldr	r3, [sp, #24]
 801d41c:	2b09      	cmp	r3, #9
 801d41e:	f200 8089 	bhi.w	801d534 <_dtoa_r+0x2f4>
 801d422:	2b05      	cmp	r3, #5
 801d424:	bfc4      	itt	gt
 801d426:	3b04      	subgt	r3, #4
 801d428:	9306      	strgt	r3, [sp, #24]
 801d42a:	9b06      	ldr	r3, [sp, #24]
 801d42c:	f1a3 0302 	sub.w	r3, r3, #2
 801d430:	bfcc      	ite	gt
 801d432:	2500      	movgt	r5, #0
 801d434:	2501      	movle	r5, #1
 801d436:	2b03      	cmp	r3, #3
 801d438:	f200 8087 	bhi.w	801d54a <_dtoa_r+0x30a>
 801d43c:	e8df f003 	tbb	[pc, r3]
 801d440:	59383a2d 	.word	0x59383a2d
 801d444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d448:	441d      	add	r5, r3
 801d44a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d44e:	2b20      	cmp	r3, #32
 801d450:	bfc1      	itttt	gt
 801d452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d45a:	fa0b f303 	lslgt.w	r3, fp, r3
 801d45e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d462:	bfda      	itte	le
 801d464:	f1c3 0320 	rsble	r3, r3, #32
 801d468:	fa06 f003 	lslle.w	r0, r6, r3
 801d46c:	4318      	orrgt	r0, r3
 801d46e:	f7e3 f861 	bl	8000534 <__aeabi_ui2d>
 801d472:	2301      	movs	r3, #1
 801d474:	4606      	mov	r6, r0
 801d476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d47a:	3d01      	subs	r5, #1
 801d47c:	930e      	str	r3, [sp, #56]	; 0x38
 801d47e:	e76a      	b.n	801d356 <_dtoa_r+0x116>
 801d480:	2301      	movs	r3, #1
 801d482:	e7b2      	b.n	801d3ea <_dtoa_r+0x1aa>
 801d484:	900b      	str	r0, [sp, #44]	; 0x2c
 801d486:	e7b1      	b.n	801d3ec <_dtoa_r+0x1ac>
 801d488:	9b04      	ldr	r3, [sp, #16]
 801d48a:	9a00      	ldr	r2, [sp, #0]
 801d48c:	1a9b      	subs	r3, r3, r2
 801d48e:	9304      	str	r3, [sp, #16]
 801d490:	4253      	negs	r3, r2
 801d492:	9307      	str	r3, [sp, #28]
 801d494:	2300      	movs	r3, #0
 801d496:	930a      	str	r3, [sp, #40]	; 0x28
 801d498:	e7bf      	b.n	801d41a <_dtoa_r+0x1da>
 801d49a:	2300      	movs	r3, #0
 801d49c:	9308      	str	r3, [sp, #32]
 801d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	dc55      	bgt.n	801d550 <_dtoa_r+0x310>
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d4aa:	461a      	mov	r2, r3
 801d4ac:	9209      	str	r2, [sp, #36]	; 0x24
 801d4ae:	e00c      	b.n	801d4ca <_dtoa_r+0x28a>
 801d4b0:	2301      	movs	r3, #1
 801d4b2:	e7f3      	b.n	801d49c <_dtoa_r+0x25c>
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4b8:	9308      	str	r3, [sp, #32]
 801d4ba:	9b00      	ldr	r3, [sp, #0]
 801d4bc:	4413      	add	r3, r2
 801d4be:	9302      	str	r3, [sp, #8]
 801d4c0:	3301      	adds	r3, #1
 801d4c2:	2b01      	cmp	r3, #1
 801d4c4:	9303      	str	r3, [sp, #12]
 801d4c6:	bfb8      	it	lt
 801d4c8:	2301      	movlt	r3, #1
 801d4ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	6042      	str	r2, [r0, #4]
 801d4d0:	2204      	movs	r2, #4
 801d4d2:	f102 0614 	add.w	r6, r2, #20
 801d4d6:	429e      	cmp	r6, r3
 801d4d8:	6841      	ldr	r1, [r0, #4]
 801d4da:	d93d      	bls.n	801d558 <_dtoa_r+0x318>
 801d4dc:	4620      	mov	r0, r4
 801d4de:	f001 fa5d 	bl	801e99c <_Balloc>
 801d4e2:	9001      	str	r0, [sp, #4]
 801d4e4:	2800      	cmp	r0, #0
 801d4e6:	d13b      	bne.n	801d560 <_dtoa_r+0x320>
 801d4e8:	4b11      	ldr	r3, [pc, #68]	; (801d530 <_dtoa_r+0x2f0>)
 801d4ea:	4602      	mov	r2, r0
 801d4ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d4f0:	e6c0      	b.n	801d274 <_dtoa_r+0x34>
 801d4f2:	2301      	movs	r3, #1
 801d4f4:	e7df      	b.n	801d4b6 <_dtoa_r+0x276>
 801d4f6:	bf00      	nop
 801d4f8:	636f4361 	.word	0x636f4361
 801d4fc:	3fd287a7 	.word	0x3fd287a7
 801d500:	8b60c8b3 	.word	0x8b60c8b3
 801d504:	3fc68a28 	.word	0x3fc68a28
 801d508:	509f79fb 	.word	0x509f79fb
 801d50c:	3fd34413 	.word	0x3fd34413
 801d510:	08021a60 	.word	0x08021a60
 801d514:	08021c1e 	.word	0x08021c1e
 801d518:	7ff00000 	.word	0x7ff00000
 801d51c:	08021c1a 	.word	0x08021c1a
 801d520:	08021c11 	.word	0x08021c11
 801d524:	080219e5 	.word	0x080219e5
 801d528:	3ff80000 	.word	0x3ff80000
 801d52c:	08021df0 	.word	0x08021df0
 801d530:	08021c79 	.word	0x08021c79
 801d534:	2501      	movs	r5, #1
 801d536:	2300      	movs	r3, #0
 801d538:	9306      	str	r3, [sp, #24]
 801d53a:	9508      	str	r5, [sp, #32]
 801d53c:	f04f 33ff 	mov.w	r3, #4294967295
 801d540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d544:	2200      	movs	r2, #0
 801d546:	2312      	movs	r3, #18
 801d548:	e7b0      	b.n	801d4ac <_dtoa_r+0x26c>
 801d54a:	2301      	movs	r3, #1
 801d54c:	9308      	str	r3, [sp, #32]
 801d54e:	e7f5      	b.n	801d53c <_dtoa_r+0x2fc>
 801d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d556:	e7b8      	b.n	801d4ca <_dtoa_r+0x28a>
 801d558:	3101      	adds	r1, #1
 801d55a:	6041      	str	r1, [r0, #4]
 801d55c:	0052      	lsls	r2, r2, #1
 801d55e:	e7b8      	b.n	801d4d2 <_dtoa_r+0x292>
 801d560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d562:	9a01      	ldr	r2, [sp, #4]
 801d564:	601a      	str	r2, [r3, #0]
 801d566:	9b03      	ldr	r3, [sp, #12]
 801d568:	2b0e      	cmp	r3, #14
 801d56a:	f200 809d 	bhi.w	801d6a8 <_dtoa_r+0x468>
 801d56e:	2d00      	cmp	r5, #0
 801d570:	f000 809a 	beq.w	801d6a8 <_dtoa_r+0x468>
 801d574:	9b00      	ldr	r3, [sp, #0]
 801d576:	2b00      	cmp	r3, #0
 801d578:	dd32      	ble.n	801d5e0 <_dtoa_r+0x3a0>
 801d57a:	4ab7      	ldr	r2, [pc, #732]	; (801d858 <_dtoa_r+0x618>)
 801d57c:	f003 030f 	and.w	r3, r3, #15
 801d580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d584:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d588:	9b00      	ldr	r3, [sp, #0]
 801d58a:	05d8      	lsls	r0, r3, #23
 801d58c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d590:	d516      	bpl.n	801d5c0 <_dtoa_r+0x380>
 801d592:	4bb2      	ldr	r3, [pc, #712]	; (801d85c <_dtoa_r+0x61c>)
 801d594:	ec51 0b19 	vmov	r0, r1, d9
 801d598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d59c:	f7e3 f96e 	bl	800087c <__aeabi_ddiv>
 801d5a0:	f007 070f 	and.w	r7, r7, #15
 801d5a4:	4682      	mov	sl, r0
 801d5a6:	468b      	mov	fp, r1
 801d5a8:	2503      	movs	r5, #3
 801d5aa:	4eac      	ldr	r6, [pc, #688]	; (801d85c <_dtoa_r+0x61c>)
 801d5ac:	b957      	cbnz	r7, 801d5c4 <_dtoa_r+0x384>
 801d5ae:	4642      	mov	r2, r8
 801d5b0:	464b      	mov	r3, r9
 801d5b2:	4650      	mov	r0, sl
 801d5b4:	4659      	mov	r1, fp
 801d5b6:	f7e3 f961 	bl	800087c <__aeabi_ddiv>
 801d5ba:	4682      	mov	sl, r0
 801d5bc:	468b      	mov	fp, r1
 801d5be:	e028      	b.n	801d612 <_dtoa_r+0x3d2>
 801d5c0:	2502      	movs	r5, #2
 801d5c2:	e7f2      	b.n	801d5aa <_dtoa_r+0x36a>
 801d5c4:	07f9      	lsls	r1, r7, #31
 801d5c6:	d508      	bpl.n	801d5da <_dtoa_r+0x39a>
 801d5c8:	4640      	mov	r0, r8
 801d5ca:	4649      	mov	r1, r9
 801d5cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d5d0:	f7e3 f82a 	bl	8000628 <__aeabi_dmul>
 801d5d4:	3501      	adds	r5, #1
 801d5d6:	4680      	mov	r8, r0
 801d5d8:	4689      	mov	r9, r1
 801d5da:	107f      	asrs	r7, r7, #1
 801d5dc:	3608      	adds	r6, #8
 801d5de:	e7e5      	b.n	801d5ac <_dtoa_r+0x36c>
 801d5e0:	f000 809b 	beq.w	801d71a <_dtoa_r+0x4da>
 801d5e4:	9b00      	ldr	r3, [sp, #0]
 801d5e6:	4f9d      	ldr	r7, [pc, #628]	; (801d85c <_dtoa_r+0x61c>)
 801d5e8:	425e      	negs	r6, r3
 801d5ea:	4b9b      	ldr	r3, [pc, #620]	; (801d858 <_dtoa_r+0x618>)
 801d5ec:	f006 020f 	and.w	r2, r6, #15
 801d5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5f8:	ec51 0b19 	vmov	r0, r1, d9
 801d5fc:	f7e3 f814 	bl	8000628 <__aeabi_dmul>
 801d600:	1136      	asrs	r6, r6, #4
 801d602:	4682      	mov	sl, r0
 801d604:	468b      	mov	fp, r1
 801d606:	2300      	movs	r3, #0
 801d608:	2502      	movs	r5, #2
 801d60a:	2e00      	cmp	r6, #0
 801d60c:	d17a      	bne.n	801d704 <_dtoa_r+0x4c4>
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d1d3      	bne.n	801d5ba <_dtoa_r+0x37a>
 801d612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d614:	2b00      	cmp	r3, #0
 801d616:	f000 8082 	beq.w	801d71e <_dtoa_r+0x4de>
 801d61a:	4b91      	ldr	r3, [pc, #580]	; (801d860 <_dtoa_r+0x620>)
 801d61c:	2200      	movs	r2, #0
 801d61e:	4650      	mov	r0, sl
 801d620:	4659      	mov	r1, fp
 801d622:	f7e3 fa73 	bl	8000b0c <__aeabi_dcmplt>
 801d626:	2800      	cmp	r0, #0
 801d628:	d079      	beq.n	801d71e <_dtoa_r+0x4de>
 801d62a:	9b03      	ldr	r3, [sp, #12]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d076      	beq.n	801d71e <_dtoa_r+0x4de>
 801d630:	9b02      	ldr	r3, [sp, #8]
 801d632:	2b00      	cmp	r3, #0
 801d634:	dd36      	ble.n	801d6a4 <_dtoa_r+0x464>
 801d636:	9b00      	ldr	r3, [sp, #0]
 801d638:	4650      	mov	r0, sl
 801d63a:	4659      	mov	r1, fp
 801d63c:	1e5f      	subs	r7, r3, #1
 801d63e:	2200      	movs	r2, #0
 801d640:	4b88      	ldr	r3, [pc, #544]	; (801d864 <_dtoa_r+0x624>)
 801d642:	f7e2 fff1 	bl	8000628 <__aeabi_dmul>
 801d646:	9e02      	ldr	r6, [sp, #8]
 801d648:	4682      	mov	sl, r0
 801d64a:	468b      	mov	fp, r1
 801d64c:	3501      	adds	r5, #1
 801d64e:	4628      	mov	r0, r5
 801d650:	f7e2 ff80 	bl	8000554 <__aeabi_i2d>
 801d654:	4652      	mov	r2, sl
 801d656:	465b      	mov	r3, fp
 801d658:	f7e2 ffe6 	bl	8000628 <__aeabi_dmul>
 801d65c:	4b82      	ldr	r3, [pc, #520]	; (801d868 <_dtoa_r+0x628>)
 801d65e:	2200      	movs	r2, #0
 801d660:	f7e2 fe2c 	bl	80002bc <__adddf3>
 801d664:	46d0      	mov	r8, sl
 801d666:	46d9      	mov	r9, fp
 801d668:	4682      	mov	sl, r0
 801d66a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d66e:	2e00      	cmp	r6, #0
 801d670:	d158      	bne.n	801d724 <_dtoa_r+0x4e4>
 801d672:	4b7e      	ldr	r3, [pc, #504]	; (801d86c <_dtoa_r+0x62c>)
 801d674:	2200      	movs	r2, #0
 801d676:	4640      	mov	r0, r8
 801d678:	4649      	mov	r1, r9
 801d67a:	f7e2 fe1d 	bl	80002b8 <__aeabi_dsub>
 801d67e:	4652      	mov	r2, sl
 801d680:	465b      	mov	r3, fp
 801d682:	4680      	mov	r8, r0
 801d684:	4689      	mov	r9, r1
 801d686:	f7e3 fa5f 	bl	8000b48 <__aeabi_dcmpgt>
 801d68a:	2800      	cmp	r0, #0
 801d68c:	f040 8295 	bne.w	801dbba <_dtoa_r+0x97a>
 801d690:	4652      	mov	r2, sl
 801d692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d696:	4640      	mov	r0, r8
 801d698:	4649      	mov	r1, r9
 801d69a:	f7e3 fa37 	bl	8000b0c <__aeabi_dcmplt>
 801d69e:	2800      	cmp	r0, #0
 801d6a0:	f040 8289 	bne.w	801dbb6 <_dtoa_r+0x976>
 801d6a4:	ec5b ab19 	vmov	sl, fp, d9
 801d6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	f2c0 8148 	blt.w	801d940 <_dtoa_r+0x700>
 801d6b0:	9a00      	ldr	r2, [sp, #0]
 801d6b2:	2a0e      	cmp	r2, #14
 801d6b4:	f300 8144 	bgt.w	801d940 <_dtoa_r+0x700>
 801d6b8:	4b67      	ldr	r3, [pc, #412]	; (801d858 <_dtoa_r+0x618>)
 801d6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6be:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	f280 80d5 	bge.w	801d874 <_dtoa_r+0x634>
 801d6ca:	9b03      	ldr	r3, [sp, #12]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	f300 80d1 	bgt.w	801d874 <_dtoa_r+0x634>
 801d6d2:	f040 826f 	bne.w	801dbb4 <_dtoa_r+0x974>
 801d6d6:	4b65      	ldr	r3, [pc, #404]	; (801d86c <_dtoa_r+0x62c>)
 801d6d8:	2200      	movs	r2, #0
 801d6da:	4640      	mov	r0, r8
 801d6dc:	4649      	mov	r1, r9
 801d6de:	f7e2 ffa3 	bl	8000628 <__aeabi_dmul>
 801d6e2:	4652      	mov	r2, sl
 801d6e4:	465b      	mov	r3, fp
 801d6e6:	f7e3 fa25 	bl	8000b34 <__aeabi_dcmpge>
 801d6ea:	9e03      	ldr	r6, [sp, #12]
 801d6ec:	4637      	mov	r7, r6
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	f040 8245 	bne.w	801db7e <_dtoa_r+0x93e>
 801d6f4:	9d01      	ldr	r5, [sp, #4]
 801d6f6:	2331      	movs	r3, #49	; 0x31
 801d6f8:	f805 3b01 	strb.w	r3, [r5], #1
 801d6fc:	9b00      	ldr	r3, [sp, #0]
 801d6fe:	3301      	adds	r3, #1
 801d700:	9300      	str	r3, [sp, #0]
 801d702:	e240      	b.n	801db86 <_dtoa_r+0x946>
 801d704:	07f2      	lsls	r2, r6, #31
 801d706:	d505      	bpl.n	801d714 <_dtoa_r+0x4d4>
 801d708:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d70c:	f7e2 ff8c 	bl	8000628 <__aeabi_dmul>
 801d710:	3501      	adds	r5, #1
 801d712:	2301      	movs	r3, #1
 801d714:	1076      	asrs	r6, r6, #1
 801d716:	3708      	adds	r7, #8
 801d718:	e777      	b.n	801d60a <_dtoa_r+0x3ca>
 801d71a:	2502      	movs	r5, #2
 801d71c:	e779      	b.n	801d612 <_dtoa_r+0x3d2>
 801d71e:	9f00      	ldr	r7, [sp, #0]
 801d720:	9e03      	ldr	r6, [sp, #12]
 801d722:	e794      	b.n	801d64e <_dtoa_r+0x40e>
 801d724:	9901      	ldr	r1, [sp, #4]
 801d726:	4b4c      	ldr	r3, [pc, #304]	; (801d858 <_dtoa_r+0x618>)
 801d728:	4431      	add	r1, r6
 801d72a:	910d      	str	r1, [sp, #52]	; 0x34
 801d72c:	9908      	ldr	r1, [sp, #32]
 801d72e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d736:	2900      	cmp	r1, #0
 801d738:	d043      	beq.n	801d7c2 <_dtoa_r+0x582>
 801d73a:	494d      	ldr	r1, [pc, #308]	; (801d870 <_dtoa_r+0x630>)
 801d73c:	2000      	movs	r0, #0
 801d73e:	f7e3 f89d 	bl	800087c <__aeabi_ddiv>
 801d742:	4652      	mov	r2, sl
 801d744:	465b      	mov	r3, fp
 801d746:	f7e2 fdb7 	bl	80002b8 <__aeabi_dsub>
 801d74a:	9d01      	ldr	r5, [sp, #4]
 801d74c:	4682      	mov	sl, r0
 801d74e:	468b      	mov	fp, r1
 801d750:	4649      	mov	r1, r9
 801d752:	4640      	mov	r0, r8
 801d754:	f7e3 fa18 	bl	8000b88 <__aeabi_d2iz>
 801d758:	4606      	mov	r6, r0
 801d75a:	f7e2 fefb 	bl	8000554 <__aeabi_i2d>
 801d75e:	4602      	mov	r2, r0
 801d760:	460b      	mov	r3, r1
 801d762:	4640      	mov	r0, r8
 801d764:	4649      	mov	r1, r9
 801d766:	f7e2 fda7 	bl	80002b8 <__aeabi_dsub>
 801d76a:	3630      	adds	r6, #48	; 0x30
 801d76c:	f805 6b01 	strb.w	r6, [r5], #1
 801d770:	4652      	mov	r2, sl
 801d772:	465b      	mov	r3, fp
 801d774:	4680      	mov	r8, r0
 801d776:	4689      	mov	r9, r1
 801d778:	f7e3 f9c8 	bl	8000b0c <__aeabi_dcmplt>
 801d77c:	2800      	cmp	r0, #0
 801d77e:	d163      	bne.n	801d848 <_dtoa_r+0x608>
 801d780:	4642      	mov	r2, r8
 801d782:	464b      	mov	r3, r9
 801d784:	4936      	ldr	r1, [pc, #216]	; (801d860 <_dtoa_r+0x620>)
 801d786:	2000      	movs	r0, #0
 801d788:	f7e2 fd96 	bl	80002b8 <__aeabi_dsub>
 801d78c:	4652      	mov	r2, sl
 801d78e:	465b      	mov	r3, fp
 801d790:	f7e3 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 801d794:	2800      	cmp	r0, #0
 801d796:	f040 80b5 	bne.w	801d904 <_dtoa_r+0x6c4>
 801d79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d79c:	429d      	cmp	r5, r3
 801d79e:	d081      	beq.n	801d6a4 <_dtoa_r+0x464>
 801d7a0:	4b30      	ldr	r3, [pc, #192]	; (801d864 <_dtoa_r+0x624>)
 801d7a2:	2200      	movs	r2, #0
 801d7a4:	4650      	mov	r0, sl
 801d7a6:	4659      	mov	r1, fp
 801d7a8:	f7e2 ff3e 	bl	8000628 <__aeabi_dmul>
 801d7ac:	4b2d      	ldr	r3, [pc, #180]	; (801d864 <_dtoa_r+0x624>)
 801d7ae:	4682      	mov	sl, r0
 801d7b0:	468b      	mov	fp, r1
 801d7b2:	4640      	mov	r0, r8
 801d7b4:	4649      	mov	r1, r9
 801d7b6:	2200      	movs	r2, #0
 801d7b8:	f7e2 ff36 	bl	8000628 <__aeabi_dmul>
 801d7bc:	4680      	mov	r8, r0
 801d7be:	4689      	mov	r9, r1
 801d7c0:	e7c6      	b.n	801d750 <_dtoa_r+0x510>
 801d7c2:	4650      	mov	r0, sl
 801d7c4:	4659      	mov	r1, fp
 801d7c6:	f7e2 ff2f 	bl	8000628 <__aeabi_dmul>
 801d7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7cc:	9d01      	ldr	r5, [sp, #4]
 801d7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801d7d0:	4682      	mov	sl, r0
 801d7d2:	468b      	mov	fp, r1
 801d7d4:	4649      	mov	r1, r9
 801d7d6:	4640      	mov	r0, r8
 801d7d8:	f7e3 f9d6 	bl	8000b88 <__aeabi_d2iz>
 801d7dc:	4606      	mov	r6, r0
 801d7de:	f7e2 feb9 	bl	8000554 <__aeabi_i2d>
 801d7e2:	3630      	adds	r6, #48	; 0x30
 801d7e4:	4602      	mov	r2, r0
 801d7e6:	460b      	mov	r3, r1
 801d7e8:	4640      	mov	r0, r8
 801d7ea:	4649      	mov	r1, r9
 801d7ec:	f7e2 fd64 	bl	80002b8 <__aeabi_dsub>
 801d7f0:	f805 6b01 	strb.w	r6, [r5], #1
 801d7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7f6:	429d      	cmp	r5, r3
 801d7f8:	4680      	mov	r8, r0
 801d7fa:	4689      	mov	r9, r1
 801d7fc:	f04f 0200 	mov.w	r2, #0
 801d800:	d124      	bne.n	801d84c <_dtoa_r+0x60c>
 801d802:	4b1b      	ldr	r3, [pc, #108]	; (801d870 <_dtoa_r+0x630>)
 801d804:	4650      	mov	r0, sl
 801d806:	4659      	mov	r1, fp
 801d808:	f7e2 fd58 	bl	80002bc <__adddf3>
 801d80c:	4602      	mov	r2, r0
 801d80e:	460b      	mov	r3, r1
 801d810:	4640      	mov	r0, r8
 801d812:	4649      	mov	r1, r9
 801d814:	f7e3 f998 	bl	8000b48 <__aeabi_dcmpgt>
 801d818:	2800      	cmp	r0, #0
 801d81a:	d173      	bne.n	801d904 <_dtoa_r+0x6c4>
 801d81c:	4652      	mov	r2, sl
 801d81e:	465b      	mov	r3, fp
 801d820:	4913      	ldr	r1, [pc, #76]	; (801d870 <_dtoa_r+0x630>)
 801d822:	2000      	movs	r0, #0
 801d824:	f7e2 fd48 	bl	80002b8 <__aeabi_dsub>
 801d828:	4602      	mov	r2, r0
 801d82a:	460b      	mov	r3, r1
 801d82c:	4640      	mov	r0, r8
 801d82e:	4649      	mov	r1, r9
 801d830:	f7e3 f96c 	bl	8000b0c <__aeabi_dcmplt>
 801d834:	2800      	cmp	r0, #0
 801d836:	f43f af35 	beq.w	801d6a4 <_dtoa_r+0x464>
 801d83a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d83c:	1e6b      	subs	r3, r5, #1
 801d83e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d844:	2b30      	cmp	r3, #48	; 0x30
 801d846:	d0f8      	beq.n	801d83a <_dtoa_r+0x5fa>
 801d848:	9700      	str	r7, [sp, #0]
 801d84a:	e049      	b.n	801d8e0 <_dtoa_r+0x6a0>
 801d84c:	4b05      	ldr	r3, [pc, #20]	; (801d864 <_dtoa_r+0x624>)
 801d84e:	f7e2 feeb 	bl	8000628 <__aeabi_dmul>
 801d852:	4680      	mov	r8, r0
 801d854:	4689      	mov	r9, r1
 801d856:	e7bd      	b.n	801d7d4 <_dtoa_r+0x594>
 801d858:	08021df0 	.word	0x08021df0
 801d85c:	08021dc8 	.word	0x08021dc8
 801d860:	3ff00000 	.word	0x3ff00000
 801d864:	40240000 	.word	0x40240000
 801d868:	401c0000 	.word	0x401c0000
 801d86c:	40140000 	.word	0x40140000
 801d870:	3fe00000 	.word	0x3fe00000
 801d874:	9d01      	ldr	r5, [sp, #4]
 801d876:	4656      	mov	r6, sl
 801d878:	465f      	mov	r7, fp
 801d87a:	4642      	mov	r2, r8
 801d87c:	464b      	mov	r3, r9
 801d87e:	4630      	mov	r0, r6
 801d880:	4639      	mov	r1, r7
 801d882:	f7e2 fffb 	bl	800087c <__aeabi_ddiv>
 801d886:	f7e3 f97f 	bl	8000b88 <__aeabi_d2iz>
 801d88a:	4682      	mov	sl, r0
 801d88c:	f7e2 fe62 	bl	8000554 <__aeabi_i2d>
 801d890:	4642      	mov	r2, r8
 801d892:	464b      	mov	r3, r9
 801d894:	f7e2 fec8 	bl	8000628 <__aeabi_dmul>
 801d898:	4602      	mov	r2, r0
 801d89a:	460b      	mov	r3, r1
 801d89c:	4630      	mov	r0, r6
 801d89e:	4639      	mov	r1, r7
 801d8a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d8a4:	f7e2 fd08 	bl	80002b8 <__aeabi_dsub>
 801d8a8:	f805 6b01 	strb.w	r6, [r5], #1
 801d8ac:	9e01      	ldr	r6, [sp, #4]
 801d8ae:	9f03      	ldr	r7, [sp, #12]
 801d8b0:	1bae      	subs	r6, r5, r6
 801d8b2:	42b7      	cmp	r7, r6
 801d8b4:	4602      	mov	r2, r0
 801d8b6:	460b      	mov	r3, r1
 801d8b8:	d135      	bne.n	801d926 <_dtoa_r+0x6e6>
 801d8ba:	f7e2 fcff 	bl	80002bc <__adddf3>
 801d8be:	4642      	mov	r2, r8
 801d8c0:	464b      	mov	r3, r9
 801d8c2:	4606      	mov	r6, r0
 801d8c4:	460f      	mov	r7, r1
 801d8c6:	f7e3 f93f 	bl	8000b48 <__aeabi_dcmpgt>
 801d8ca:	b9d0      	cbnz	r0, 801d902 <_dtoa_r+0x6c2>
 801d8cc:	4642      	mov	r2, r8
 801d8ce:	464b      	mov	r3, r9
 801d8d0:	4630      	mov	r0, r6
 801d8d2:	4639      	mov	r1, r7
 801d8d4:	f7e3 f910 	bl	8000af8 <__aeabi_dcmpeq>
 801d8d8:	b110      	cbz	r0, 801d8e0 <_dtoa_r+0x6a0>
 801d8da:	f01a 0f01 	tst.w	sl, #1
 801d8de:	d110      	bne.n	801d902 <_dtoa_r+0x6c2>
 801d8e0:	4620      	mov	r0, r4
 801d8e2:	ee18 1a10 	vmov	r1, s16
 801d8e6:	f001 f899 	bl	801ea1c <_Bfree>
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	9800      	ldr	r0, [sp, #0]
 801d8ee:	702b      	strb	r3, [r5, #0]
 801d8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8f2:	3001      	adds	r0, #1
 801d8f4:	6018      	str	r0, [r3, #0]
 801d8f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	f43f acf1 	beq.w	801d2e0 <_dtoa_r+0xa0>
 801d8fe:	601d      	str	r5, [r3, #0]
 801d900:	e4ee      	b.n	801d2e0 <_dtoa_r+0xa0>
 801d902:	9f00      	ldr	r7, [sp, #0]
 801d904:	462b      	mov	r3, r5
 801d906:	461d      	mov	r5, r3
 801d908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d90c:	2a39      	cmp	r2, #57	; 0x39
 801d90e:	d106      	bne.n	801d91e <_dtoa_r+0x6de>
 801d910:	9a01      	ldr	r2, [sp, #4]
 801d912:	429a      	cmp	r2, r3
 801d914:	d1f7      	bne.n	801d906 <_dtoa_r+0x6c6>
 801d916:	9901      	ldr	r1, [sp, #4]
 801d918:	2230      	movs	r2, #48	; 0x30
 801d91a:	3701      	adds	r7, #1
 801d91c:	700a      	strb	r2, [r1, #0]
 801d91e:	781a      	ldrb	r2, [r3, #0]
 801d920:	3201      	adds	r2, #1
 801d922:	701a      	strb	r2, [r3, #0]
 801d924:	e790      	b.n	801d848 <_dtoa_r+0x608>
 801d926:	4ba6      	ldr	r3, [pc, #664]	; (801dbc0 <_dtoa_r+0x980>)
 801d928:	2200      	movs	r2, #0
 801d92a:	f7e2 fe7d 	bl	8000628 <__aeabi_dmul>
 801d92e:	2200      	movs	r2, #0
 801d930:	2300      	movs	r3, #0
 801d932:	4606      	mov	r6, r0
 801d934:	460f      	mov	r7, r1
 801d936:	f7e3 f8df 	bl	8000af8 <__aeabi_dcmpeq>
 801d93a:	2800      	cmp	r0, #0
 801d93c:	d09d      	beq.n	801d87a <_dtoa_r+0x63a>
 801d93e:	e7cf      	b.n	801d8e0 <_dtoa_r+0x6a0>
 801d940:	9a08      	ldr	r2, [sp, #32]
 801d942:	2a00      	cmp	r2, #0
 801d944:	f000 80d7 	beq.w	801daf6 <_dtoa_r+0x8b6>
 801d948:	9a06      	ldr	r2, [sp, #24]
 801d94a:	2a01      	cmp	r2, #1
 801d94c:	f300 80ba 	bgt.w	801dac4 <_dtoa_r+0x884>
 801d950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d952:	2a00      	cmp	r2, #0
 801d954:	f000 80b2 	beq.w	801dabc <_dtoa_r+0x87c>
 801d958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d95c:	9e07      	ldr	r6, [sp, #28]
 801d95e:	9d04      	ldr	r5, [sp, #16]
 801d960:	9a04      	ldr	r2, [sp, #16]
 801d962:	441a      	add	r2, r3
 801d964:	9204      	str	r2, [sp, #16]
 801d966:	9a05      	ldr	r2, [sp, #20]
 801d968:	2101      	movs	r1, #1
 801d96a:	441a      	add	r2, r3
 801d96c:	4620      	mov	r0, r4
 801d96e:	9205      	str	r2, [sp, #20]
 801d970:	f001 f956 	bl	801ec20 <__i2b>
 801d974:	4607      	mov	r7, r0
 801d976:	2d00      	cmp	r5, #0
 801d978:	dd0c      	ble.n	801d994 <_dtoa_r+0x754>
 801d97a:	9b05      	ldr	r3, [sp, #20]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	dd09      	ble.n	801d994 <_dtoa_r+0x754>
 801d980:	42ab      	cmp	r3, r5
 801d982:	9a04      	ldr	r2, [sp, #16]
 801d984:	bfa8      	it	ge
 801d986:	462b      	movge	r3, r5
 801d988:	1ad2      	subs	r2, r2, r3
 801d98a:	9204      	str	r2, [sp, #16]
 801d98c:	9a05      	ldr	r2, [sp, #20]
 801d98e:	1aed      	subs	r5, r5, r3
 801d990:	1ad3      	subs	r3, r2, r3
 801d992:	9305      	str	r3, [sp, #20]
 801d994:	9b07      	ldr	r3, [sp, #28]
 801d996:	b31b      	cbz	r3, 801d9e0 <_dtoa_r+0x7a0>
 801d998:	9b08      	ldr	r3, [sp, #32]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	f000 80af 	beq.w	801dafe <_dtoa_r+0x8be>
 801d9a0:	2e00      	cmp	r6, #0
 801d9a2:	dd13      	ble.n	801d9cc <_dtoa_r+0x78c>
 801d9a4:	4639      	mov	r1, r7
 801d9a6:	4632      	mov	r2, r6
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f001 f9f9 	bl	801eda0 <__pow5mult>
 801d9ae:	ee18 2a10 	vmov	r2, s16
 801d9b2:	4601      	mov	r1, r0
 801d9b4:	4607      	mov	r7, r0
 801d9b6:	4620      	mov	r0, r4
 801d9b8:	f001 f948 	bl	801ec4c <__multiply>
 801d9bc:	ee18 1a10 	vmov	r1, s16
 801d9c0:	4680      	mov	r8, r0
 801d9c2:	4620      	mov	r0, r4
 801d9c4:	f001 f82a 	bl	801ea1c <_Bfree>
 801d9c8:	ee08 8a10 	vmov	s16, r8
 801d9cc:	9b07      	ldr	r3, [sp, #28]
 801d9ce:	1b9a      	subs	r2, r3, r6
 801d9d0:	d006      	beq.n	801d9e0 <_dtoa_r+0x7a0>
 801d9d2:	ee18 1a10 	vmov	r1, s16
 801d9d6:	4620      	mov	r0, r4
 801d9d8:	f001 f9e2 	bl	801eda0 <__pow5mult>
 801d9dc:	ee08 0a10 	vmov	s16, r0
 801d9e0:	2101      	movs	r1, #1
 801d9e2:	4620      	mov	r0, r4
 801d9e4:	f001 f91c 	bl	801ec20 <__i2b>
 801d9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	4606      	mov	r6, r0
 801d9ee:	f340 8088 	ble.w	801db02 <_dtoa_r+0x8c2>
 801d9f2:	461a      	mov	r2, r3
 801d9f4:	4601      	mov	r1, r0
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	f001 f9d2 	bl	801eda0 <__pow5mult>
 801d9fc:	9b06      	ldr	r3, [sp, #24]
 801d9fe:	2b01      	cmp	r3, #1
 801da00:	4606      	mov	r6, r0
 801da02:	f340 8081 	ble.w	801db08 <_dtoa_r+0x8c8>
 801da06:	f04f 0800 	mov.w	r8, #0
 801da0a:	6933      	ldr	r3, [r6, #16]
 801da0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801da10:	6918      	ldr	r0, [r3, #16]
 801da12:	f001 f8b5 	bl	801eb80 <__hi0bits>
 801da16:	f1c0 0020 	rsb	r0, r0, #32
 801da1a:	9b05      	ldr	r3, [sp, #20]
 801da1c:	4418      	add	r0, r3
 801da1e:	f010 001f 	ands.w	r0, r0, #31
 801da22:	f000 8092 	beq.w	801db4a <_dtoa_r+0x90a>
 801da26:	f1c0 0320 	rsb	r3, r0, #32
 801da2a:	2b04      	cmp	r3, #4
 801da2c:	f340 808a 	ble.w	801db44 <_dtoa_r+0x904>
 801da30:	f1c0 001c 	rsb	r0, r0, #28
 801da34:	9b04      	ldr	r3, [sp, #16]
 801da36:	4403      	add	r3, r0
 801da38:	9304      	str	r3, [sp, #16]
 801da3a:	9b05      	ldr	r3, [sp, #20]
 801da3c:	4403      	add	r3, r0
 801da3e:	4405      	add	r5, r0
 801da40:	9305      	str	r3, [sp, #20]
 801da42:	9b04      	ldr	r3, [sp, #16]
 801da44:	2b00      	cmp	r3, #0
 801da46:	dd07      	ble.n	801da58 <_dtoa_r+0x818>
 801da48:	ee18 1a10 	vmov	r1, s16
 801da4c:	461a      	mov	r2, r3
 801da4e:	4620      	mov	r0, r4
 801da50:	f001 fa00 	bl	801ee54 <__lshift>
 801da54:	ee08 0a10 	vmov	s16, r0
 801da58:	9b05      	ldr	r3, [sp, #20]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	dd05      	ble.n	801da6a <_dtoa_r+0x82a>
 801da5e:	4631      	mov	r1, r6
 801da60:	461a      	mov	r2, r3
 801da62:	4620      	mov	r0, r4
 801da64:	f001 f9f6 	bl	801ee54 <__lshift>
 801da68:	4606      	mov	r6, r0
 801da6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d06e      	beq.n	801db4e <_dtoa_r+0x90e>
 801da70:	ee18 0a10 	vmov	r0, s16
 801da74:	4631      	mov	r1, r6
 801da76:	f001 fa5d 	bl	801ef34 <__mcmp>
 801da7a:	2800      	cmp	r0, #0
 801da7c:	da67      	bge.n	801db4e <_dtoa_r+0x90e>
 801da7e:	9b00      	ldr	r3, [sp, #0]
 801da80:	3b01      	subs	r3, #1
 801da82:	ee18 1a10 	vmov	r1, s16
 801da86:	9300      	str	r3, [sp, #0]
 801da88:	220a      	movs	r2, #10
 801da8a:	2300      	movs	r3, #0
 801da8c:	4620      	mov	r0, r4
 801da8e:	f000 ffe7 	bl	801ea60 <__multadd>
 801da92:	9b08      	ldr	r3, [sp, #32]
 801da94:	ee08 0a10 	vmov	s16, r0
 801da98:	2b00      	cmp	r3, #0
 801da9a:	f000 81b1 	beq.w	801de00 <_dtoa_r+0xbc0>
 801da9e:	2300      	movs	r3, #0
 801daa0:	4639      	mov	r1, r7
 801daa2:	220a      	movs	r2, #10
 801daa4:	4620      	mov	r0, r4
 801daa6:	f000 ffdb 	bl	801ea60 <__multadd>
 801daaa:	9b02      	ldr	r3, [sp, #8]
 801daac:	2b00      	cmp	r3, #0
 801daae:	4607      	mov	r7, r0
 801dab0:	f300 808e 	bgt.w	801dbd0 <_dtoa_r+0x990>
 801dab4:	9b06      	ldr	r3, [sp, #24]
 801dab6:	2b02      	cmp	r3, #2
 801dab8:	dc51      	bgt.n	801db5e <_dtoa_r+0x91e>
 801daba:	e089      	b.n	801dbd0 <_dtoa_r+0x990>
 801dabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dabe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dac2:	e74b      	b.n	801d95c <_dtoa_r+0x71c>
 801dac4:	9b03      	ldr	r3, [sp, #12]
 801dac6:	1e5e      	subs	r6, r3, #1
 801dac8:	9b07      	ldr	r3, [sp, #28]
 801daca:	42b3      	cmp	r3, r6
 801dacc:	bfbf      	itttt	lt
 801dace:	9b07      	ldrlt	r3, [sp, #28]
 801dad0:	9607      	strlt	r6, [sp, #28]
 801dad2:	1af2      	sublt	r2, r6, r3
 801dad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801dad6:	bfb6      	itet	lt
 801dad8:	189b      	addlt	r3, r3, r2
 801dada:	1b9e      	subge	r6, r3, r6
 801dadc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801dade:	9b03      	ldr	r3, [sp, #12]
 801dae0:	bfb8      	it	lt
 801dae2:	2600      	movlt	r6, #0
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	bfb7      	itett	lt
 801dae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801daec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801daf0:	1a9d      	sublt	r5, r3, r2
 801daf2:	2300      	movlt	r3, #0
 801daf4:	e734      	b.n	801d960 <_dtoa_r+0x720>
 801daf6:	9e07      	ldr	r6, [sp, #28]
 801daf8:	9d04      	ldr	r5, [sp, #16]
 801dafa:	9f08      	ldr	r7, [sp, #32]
 801dafc:	e73b      	b.n	801d976 <_dtoa_r+0x736>
 801dafe:	9a07      	ldr	r2, [sp, #28]
 801db00:	e767      	b.n	801d9d2 <_dtoa_r+0x792>
 801db02:	9b06      	ldr	r3, [sp, #24]
 801db04:	2b01      	cmp	r3, #1
 801db06:	dc18      	bgt.n	801db3a <_dtoa_r+0x8fa>
 801db08:	f1ba 0f00 	cmp.w	sl, #0
 801db0c:	d115      	bne.n	801db3a <_dtoa_r+0x8fa>
 801db0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801db12:	b993      	cbnz	r3, 801db3a <_dtoa_r+0x8fa>
 801db14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801db18:	0d1b      	lsrs	r3, r3, #20
 801db1a:	051b      	lsls	r3, r3, #20
 801db1c:	b183      	cbz	r3, 801db40 <_dtoa_r+0x900>
 801db1e:	9b04      	ldr	r3, [sp, #16]
 801db20:	3301      	adds	r3, #1
 801db22:	9304      	str	r3, [sp, #16]
 801db24:	9b05      	ldr	r3, [sp, #20]
 801db26:	3301      	adds	r3, #1
 801db28:	9305      	str	r3, [sp, #20]
 801db2a:	f04f 0801 	mov.w	r8, #1
 801db2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db30:	2b00      	cmp	r3, #0
 801db32:	f47f af6a 	bne.w	801da0a <_dtoa_r+0x7ca>
 801db36:	2001      	movs	r0, #1
 801db38:	e76f      	b.n	801da1a <_dtoa_r+0x7da>
 801db3a:	f04f 0800 	mov.w	r8, #0
 801db3e:	e7f6      	b.n	801db2e <_dtoa_r+0x8ee>
 801db40:	4698      	mov	r8, r3
 801db42:	e7f4      	b.n	801db2e <_dtoa_r+0x8ee>
 801db44:	f43f af7d 	beq.w	801da42 <_dtoa_r+0x802>
 801db48:	4618      	mov	r0, r3
 801db4a:	301c      	adds	r0, #28
 801db4c:	e772      	b.n	801da34 <_dtoa_r+0x7f4>
 801db4e:	9b03      	ldr	r3, [sp, #12]
 801db50:	2b00      	cmp	r3, #0
 801db52:	dc37      	bgt.n	801dbc4 <_dtoa_r+0x984>
 801db54:	9b06      	ldr	r3, [sp, #24]
 801db56:	2b02      	cmp	r3, #2
 801db58:	dd34      	ble.n	801dbc4 <_dtoa_r+0x984>
 801db5a:	9b03      	ldr	r3, [sp, #12]
 801db5c:	9302      	str	r3, [sp, #8]
 801db5e:	9b02      	ldr	r3, [sp, #8]
 801db60:	b96b      	cbnz	r3, 801db7e <_dtoa_r+0x93e>
 801db62:	4631      	mov	r1, r6
 801db64:	2205      	movs	r2, #5
 801db66:	4620      	mov	r0, r4
 801db68:	f000 ff7a 	bl	801ea60 <__multadd>
 801db6c:	4601      	mov	r1, r0
 801db6e:	4606      	mov	r6, r0
 801db70:	ee18 0a10 	vmov	r0, s16
 801db74:	f001 f9de 	bl	801ef34 <__mcmp>
 801db78:	2800      	cmp	r0, #0
 801db7a:	f73f adbb 	bgt.w	801d6f4 <_dtoa_r+0x4b4>
 801db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db80:	9d01      	ldr	r5, [sp, #4]
 801db82:	43db      	mvns	r3, r3
 801db84:	9300      	str	r3, [sp, #0]
 801db86:	f04f 0800 	mov.w	r8, #0
 801db8a:	4631      	mov	r1, r6
 801db8c:	4620      	mov	r0, r4
 801db8e:	f000 ff45 	bl	801ea1c <_Bfree>
 801db92:	2f00      	cmp	r7, #0
 801db94:	f43f aea4 	beq.w	801d8e0 <_dtoa_r+0x6a0>
 801db98:	f1b8 0f00 	cmp.w	r8, #0
 801db9c:	d005      	beq.n	801dbaa <_dtoa_r+0x96a>
 801db9e:	45b8      	cmp	r8, r7
 801dba0:	d003      	beq.n	801dbaa <_dtoa_r+0x96a>
 801dba2:	4641      	mov	r1, r8
 801dba4:	4620      	mov	r0, r4
 801dba6:	f000 ff39 	bl	801ea1c <_Bfree>
 801dbaa:	4639      	mov	r1, r7
 801dbac:	4620      	mov	r0, r4
 801dbae:	f000 ff35 	bl	801ea1c <_Bfree>
 801dbb2:	e695      	b.n	801d8e0 <_dtoa_r+0x6a0>
 801dbb4:	2600      	movs	r6, #0
 801dbb6:	4637      	mov	r7, r6
 801dbb8:	e7e1      	b.n	801db7e <_dtoa_r+0x93e>
 801dbba:	9700      	str	r7, [sp, #0]
 801dbbc:	4637      	mov	r7, r6
 801dbbe:	e599      	b.n	801d6f4 <_dtoa_r+0x4b4>
 801dbc0:	40240000 	.word	0x40240000
 801dbc4:	9b08      	ldr	r3, [sp, #32]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	f000 80ca 	beq.w	801dd60 <_dtoa_r+0xb20>
 801dbcc:	9b03      	ldr	r3, [sp, #12]
 801dbce:	9302      	str	r3, [sp, #8]
 801dbd0:	2d00      	cmp	r5, #0
 801dbd2:	dd05      	ble.n	801dbe0 <_dtoa_r+0x9a0>
 801dbd4:	4639      	mov	r1, r7
 801dbd6:	462a      	mov	r2, r5
 801dbd8:	4620      	mov	r0, r4
 801dbda:	f001 f93b 	bl	801ee54 <__lshift>
 801dbde:	4607      	mov	r7, r0
 801dbe0:	f1b8 0f00 	cmp.w	r8, #0
 801dbe4:	d05b      	beq.n	801dc9e <_dtoa_r+0xa5e>
 801dbe6:	6879      	ldr	r1, [r7, #4]
 801dbe8:	4620      	mov	r0, r4
 801dbea:	f000 fed7 	bl	801e99c <_Balloc>
 801dbee:	4605      	mov	r5, r0
 801dbf0:	b928      	cbnz	r0, 801dbfe <_dtoa_r+0x9be>
 801dbf2:	4b87      	ldr	r3, [pc, #540]	; (801de10 <_dtoa_r+0xbd0>)
 801dbf4:	4602      	mov	r2, r0
 801dbf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801dbfa:	f7ff bb3b 	b.w	801d274 <_dtoa_r+0x34>
 801dbfe:	693a      	ldr	r2, [r7, #16]
 801dc00:	3202      	adds	r2, #2
 801dc02:	0092      	lsls	r2, r2, #2
 801dc04:	f107 010c 	add.w	r1, r7, #12
 801dc08:	300c      	adds	r0, #12
 801dc0a:	f7fd f9e5 	bl	801afd8 <memcpy>
 801dc0e:	2201      	movs	r2, #1
 801dc10:	4629      	mov	r1, r5
 801dc12:	4620      	mov	r0, r4
 801dc14:	f001 f91e 	bl	801ee54 <__lshift>
 801dc18:	9b01      	ldr	r3, [sp, #4]
 801dc1a:	f103 0901 	add.w	r9, r3, #1
 801dc1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801dc22:	4413      	add	r3, r2
 801dc24:	9305      	str	r3, [sp, #20]
 801dc26:	f00a 0301 	and.w	r3, sl, #1
 801dc2a:	46b8      	mov	r8, r7
 801dc2c:	9304      	str	r3, [sp, #16]
 801dc2e:	4607      	mov	r7, r0
 801dc30:	4631      	mov	r1, r6
 801dc32:	ee18 0a10 	vmov	r0, s16
 801dc36:	f7ff fa75 	bl	801d124 <quorem>
 801dc3a:	4641      	mov	r1, r8
 801dc3c:	9002      	str	r0, [sp, #8]
 801dc3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801dc42:	ee18 0a10 	vmov	r0, s16
 801dc46:	f001 f975 	bl	801ef34 <__mcmp>
 801dc4a:	463a      	mov	r2, r7
 801dc4c:	9003      	str	r0, [sp, #12]
 801dc4e:	4631      	mov	r1, r6
 801dc50:	4620      	mov	r0, r4
 801dc52:	f001 f98b 	bl	801ef6c <__mdiff>
 801dc56:	68c2      	ldr	r2, [r0, #12]
 801dc58:	f109 3bff 	add.w	fp, r9, #4294967295
 801dc5c:	4605      	mov	r5, r0
 801dc5e:	bb02      	cbnz	r2, 801dca2 <_dtoa_r+0xa62>
 801dc60:	4601      	mov	r1, r0
 801dc62:	ee18 0a10 	vmov	r0, s16
 801dc66:	f001 f965 	bl	801ef34 <__mcmp>
 801dc6a:	4602      	mov	r2, r0
 801dc6c:	4629      	mov	r1, r5
 801dc6e:	4620      	mov	r0, r4
 801dc70:	9207      	str	r2, [sp, #28]
 801dc72:	f000 fed3 	bl	801ea1c <_Bfree>
 801dc76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801dc7a:	ea43 0102 	orr.w	r1, r3, r2
 801dc7e:	9b04      	ldr	r3, [sp, #16]
 801dc80:	430b      	orrs	r3, r1
 801dc82:	464d      	mov	r5, r9
 801dc84:	d10f      	bne.n	801dca6 <_dtoa_r+0xa66>
 801dc86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dc8a:	d02a      	beq.n	801dce2 <_dtoa_r+0xaa2>
 801dc8c:	9b03      	ldr	r3, [sp, #12]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	dd02      	ble.n	801dc98 <_dtoa_r+0xa58>
 801dc92:	9b02      	ldr	r3, [sp, #8]
 801dc94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801dc98:	f88b a000 	strb.w	sl, [fp]
 801dc9c:	e775      	b.n	801db8a <_dtoa_r+0x94a>
 801dc9e:	4638      	mov	r0, r7
 801dca0:	e7ba      	b.n	801dc18 <_dtoa_r+0x9d8>
 801dca2:	2201      	movs	r2, #1
 801dca4:	e7e2      	b.n	801dc6c <_dtoa_r+0xa2c>
 801dca6:	9b03      	ldr	r3, [sp, #12]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	db04      	blt.n	801dcb6 <_dtoa_r+0xa76>
 801dcac:	9906      	ldr	r1, [sp, #24]
 801dcae:	430b      	orrs	r3, r1
 801dcb0:	9904      	ldr	r1, [sp, #16]
 801dcb2:	430b      	orrs	r3, r1
 801dcb4:	d122      	bne.n	801dcfc <_dtoa_r+0xabc>
 801dcb6:	2a00      	cmp	r2, #0
 801dcb8:	ddee      	ble.n	801dc98 <_dtoa_r+0xa58>
 801dcba:	ee18 1a10 	vmov	r1, s16
 801dcbe:	2201      	movs	r2, #1
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f001 f8c7 	bl	801ee54 <__lshift>
 801dcc6:	4631      	mov	r1, r6
 801dcc8:	ee08 0a10 	vmov	s16, r0
 801dccc:	f001 f932 	bl	801ef34 <__mcmp>
 801dcd0:	2800      	cmp	r0, #0
 801dcd2:	dc03      	bgt.n	801dcdc <_dtoa_r+0xa9c>
 801dcd4:	d1e0      	bne.n	801dc98 <_dtoa_r+0xa58>
 801dcd6:	f01a 0f01 	tst.w	sl, #1
 801dcda:	d0dd      	beq.n	801dc98 <_dtoa_r+0xa58>
 801dcdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dce0:	d1d7      	bne.n	801dc92 <_dtoa_r+0xa52>
 801dce2:	2339      	movs	r3, #57	; 0x39
 801dce4:	f88b 3000 	strb.w	r3, [fp]
 801dce8:	462b      	mov	r3, r5
 801dcea:	461d      	mov	r5, r3
 801dcec:	3b01      	subs	r3, #1
 801dcee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dcf2:	2a39      	cmp	r2, #57	; 0x39
 801dcf4:	d071      	beq.n	801ddda <_dtoa_r+0xb9a>
 801dcf6:	3201      	adds	r2, #1
 801dcf8:	701a      	strb	r2, [r3, #0]
 801dcfa:	e746      	b.n	801db8a <_dtoa_r+0x94a>
 801dcfc:	2a00      	cmp	r2, #0
 801dcfe:	dd07      	ble.n	801dd10 <_dtoa_r+0xad0>
 801dd00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dd04:	d0ed      	beq.n	801dce2 <_dtoa_r+0xaa2>
 801dd06:	f10a 0301 	add.w	r3, sl, #1
 801dd0a:	f88b 3000 	strb.w	r3, [fp]
 801dd0e:	e73c      	b.n	801db8a <_dtoa_r+0x94a>
 801dd10:	9b05      	ldr	r3, [sp, #20]
 801dd12:	f809 ac01 	strb.w	sl, [r9, #-1]
 801dd16:	4599      	cmp	r9, r3
 801dd18:	d047      	beq.n	801ddaa <_dtoa_r+0xb6a>
 801dd1a:	ee18 1a10 	vmov	r1, s16
 801dd1e:	2300      	movs	r3, #0
 801dd20:	220a      	movs	r2, #10
 801dd22:	4620      	mov	r0, r4
 801dd24:	f000 fe9c 	bl	801ea60 <__multadd>
 801dd28:	45b8      	cmp	r8, r7
 801dd2a:	ee08 0a10 	vmov	s16, r0
 801dd2e:	f04f 0300 	mov.w	r3, #0
 801dd32:	f04f 020a 	mov.w	r2, #10
 801dd36:	4641      	mov	r1, r8
 801dd38:	4620      	mov	r0, r4
 801dd3a:	d106      	bne.n	801dd4a <_dtoa_r+0xb0a>
 801dd3c:	f000 fe90 	bl	801ea60 <__multadd>
 801dd40:	4680      	mov	r8, r0
 801dd42:	4607      	mov	r7, r0
 801dd44:	f109 0901 	add.w	r9, r9, #1
 801dd48:	e772      	b.n	801dc30 <_dtoa_r+0x9f0>
 801dd4a:	f000 fe89 	bl	801ea60 <__multadd>
 801dd4e:	4639      	mov	r1, r7
 801dd50:	4680      	mov	r8, r0
 801dd52:	2300      	movs	r3, #0
 801dd54:	220a      	movs	r2, #10
 801dd56:	4620      	mov	r0, r4
 801dd58:	f000 fe82 	bl	801ea60 <__multadd>
 801dd5c:	4607      	mov	r7, r0
 801dd5e:	e7f1      	b.n	801dd44 <_dtoa_r+0xb04>
 801dd60:	9b03      	ldr	r3, [sp, #12]
 801dd62:	9302      	str	r3, [sp, #8]
 801dd64:	9d01      	ldr	r5, [sp, #4]
 801dd66:	ee18 0a10 	vmov	r0, s16
 801dd6a:	4631      	mov	r1, r6
 801dd6c:	f7ff f9da 	bl	801d124 <quorem>
 801dd70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801dd74:	9b01      	ldr	r3, [sp, #4]
 801dd76:	f805 ab01 	strb.w	sl, [r5], #1
 801dd7a:	1aea      	subs	r2, r5, r3
 801dd7c:	9b02      	ldr	r3, [sp, #8]
 801dd7e:	4293      	cmp	r3, r2
 801dd80:	dd09      	ble.n	801dd96 <_dtoa_r+0xb56>
 801dd82:	ee18 1a10 	vmov	r1, s16
 801dd86:	2300      	movs	r3, #0
 801dd88:	220a      	movs	r2, #10
 801dd8a:	4620      	mov	r0, r4
 801dd8c:	f000 fe68 	bl	801ea60 <__multadd>
 801dd90:	ee08 0a10 	vmov	s16, r0
 801dd94:	e7e7      	b.n	801dd66 <_dtoa_r+0xb26>
 801dd96:	9b02      	ldr	r3, [sp, #8]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	bfc8      	it	gt
 801dd9c:	461d      	movgt	r5, r3
 801dd9e:	9b01      	ldr	r3, [sp, #4]
 801dda0:	bfd8      	it	le
 801dda2:	2501      	movle	r5, #1
 801dda4:	441d      	add	r5, r3
 801dda6:	f04f 0800 	mov.w	r8, #0
 801ddaa:	ee18 1a10 	vmov	r1, s16
 801ddae:	2201      	movs	r2, #1
 801ddb0:	4620      	mov	r0, r4
 801ddb2:	f001 f84f 	bl	801ee54 <__lshift>
 801ddb6:	4631      	mov	r1, r6
 801ddb8:	ee08 0a10 	vmov	s16, r0
 801ddbc:	f001 f8ba 	bl	801ef34 <__mcmp>
 801ddc0:	2800      	cmp	r0, #0
 801ddc2:	dc91      	bgt.n	801dce8 <_dtoa_r+0xaa8>
 801ddc4:	d102      	bne.n	801ddcc <_dtoa_r+0xb8c>
 801ddc6:	f01a 0f01 	tst.w	sl, #1
 801ddca:	d18d      	bne.n	801dce8 <_dtoa_r+0xaa8>
 801ddcc:	462b      	mov	r3, r5
 801ddce:	461d      	mov	r5, r3
 801ddd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ddd4:	2a30      	cmp	r2, #48	; 0x30
 801ddd6:	d0fa      	beq.n	801ddce <_dtoa_r+0xb8e>
 801ddd8:	e6d7      	b.n	801db8a <_dtoa_r+0x94a>
 801ddda:	9a01      	ldr	r2, [sp, #4]
 801dddc:	429a      	cmp	r2, r3
 801ddde:	d184      	bne.n	801dcea <_dtoa_r+0xaaa>
 801dde0:	9b00      	ldr	r3, [sp, #0]
 801dde2:	3301      	adds	r3, #1
 801dde4:	9300      	str	r3, [sp, #0]
 801dde6:	2331      	movs	r3, #49	; 0x31
 801dde8:	7013      	strb	r3, [r2, #0]
 801ddea:	e6ce      	b.n	801db8a <_dtoa_r+0x94a>
 801ddec:	4b09      	ldr	r3, [pc, #36]	; (801de14 <_dtoa_r+0xbd4>)
 801ddee:	f7ff ba95 	b.w	801d31c <_dtoa_r+0xdc>
 801ddf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f47f aa6e 	bne.w	801d2d6 <_dtoa_r+0x96>
 801ddfa:	4b07      	ldr	r3, [pc, #28]	; (801de18 <_dtoa_r+0xbd8>)
 801ddfc:	f7ff ba8e 	b.w	801d31c <_dtoa_r+0xdc>
 801de00:	9b02      	ldr	r3, [sp, #8]
 801de02:	2b00      	cmp	r3, #0
 801de04:	dcae      	bgt.n	801dd64 <_dtoa_r+0xb24>
 801de06:	9b06      	ldr	r3, [sp, #24]
 801de08:	2b02      	cmp	r3, #2
 801de0a:	f73f aea8 	bgt.w	801db5e <_dtoa_r+0x91e>
 801de0e:	e7a9      	b.n	801dd64 <_dtoa_r+0xb24>
 801de10:	08021c79 	.word	0x08021c79
 801de14:	080219e4 	.word	0x080219e4
 801de18:	08021c11 	.word	0x08021c11

0801de1c <__sflush_r>:
 801de1c:	898a      	ldrh	r2, [r1, #12]
 801de1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de22:	4605      	mov	r5, r0
 801de24:	0710      	lsls	r0, r2, #28
 801de26:	460c      	mov	r4, r1
 801de28:	d458      	bmi.n	801dedc <__sflush_r+0xc0>
 801de2a:	684b      	ldr	r3, [r1, #4]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	dc05      	bgt.n	801de3c <__sflush_r+0x20>
 801de30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801de32:	2b00      	cmp	r3, #0
 801de34:	dc02      	bgt.n	801de3c <__sflush_r+0x20>
 801de36:	2000      	movs	r0, #0
 801de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801de3e:	2e00      	cmp	r6, #0
 801de40:	d0f9      	beq.n	801de36 <__sflush_r+0x1a>
 801de42:	2300      	movs	r3, #0
 801de44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801de48:	682f      	ldr	r7, [r5, #0]
 801de4a:	602b      	str	r3, [r5, #0]
 801de4c:	d032      	beq.n	801deb4 <__sflush_r+0x98>
 801de4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801de50:	89a3      	ldrh	r3, [r4, #12]
 801de52:	075a      	lsls	r2, r3, #29
 801de54:	d505      	bpl.n	801de62 <__sflush_r+0x46>
 801de56:	6863      	ldr	r3, [r4, #4]
 801de58:	1ac0      	subs	r0, r0, r3
 801de5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de5c:	b10b      	cbz	r3, 801de62 <__sflush_r+0x46>
 801de5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801de60:	1ac0      	subs	r0, r0, r3
 801de62:	2300      	movs	r3, #0
 801de64:	4602      	mov	r2, r0
 801de66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801de68:	6a21      	ldr	r1, [r4, #32]
 801de6a:	4628      	mov	r0, r5
 801de6c:	47b0      	blx	r6
 801de6e:	1c43      	adds	r3, r0, #1
 801de70:	89a3      	ldrh	r3, [r4, #12]
 801de72:	d106      	bne.n	801de82 <__sflush_r+0x66>
 801de74:	6829      	ldr	r1, [r5, #0]
 801de76:	291d      	cmp	r1, #29
 801de78:	d82c      	bhi.n	801ded4 <__sflush_r+0xb8>
 801de7a:	4a2a      	ldr	r2, [pc, #168]	; (801df24 <__sflush_r+0x108>)
 801de7c:	40ca      	lsrs	r2, r1
 801de7e:	07d6      	lsls	r6, r2, #31
 801de80:	d528      	bpl.n	801ded4 <__sflush_r+0xb8>
 801de82:	2200      	movs	r2, #0
 801de84:	6062      	str	r2, [r4, #4]
 801de86:	04d9      	lsls	r1, r3, #19
 801de88:	6922      	ldr	r2, [r4, #16]
 801de8a:	6022      	str	r2, [r4, #0]
 801de8c:	d504      	bpl.n	801de98 <__sflush_r+0x7c>
 801de8e:	1c42      	adds	r2, r0, #1
 801de90:	d101      	bne.n	801de96 <__sflush_r+0x7a>
 801de92:	682b      	ldr	r3, [r5, #0]
 801de94:	b903      	cbnz	r3, 801de98 <__sflush_r+0x7c>
 801de96:	6560      	str	r0, [r4, #84]	; 0x54
 801de98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801de9a:	602f      	str	r7, [r5, #0]
 801de9c:	2900      	cmp	r1, #0
 801de9e:	d0ca      	beq.n	801de36 <__sflush_r+0x1a>
 801dea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dea4:	4299      	cmp	r1, r3
 801dea6:	d002      	beq.n	801deae <__sflush_r+0x92>
 801dea8:	4628      	mov	r0, r5
 801deaa:	f7fd f8c5 	bl	801b038 <_free_r>
 801deae:	2000      	movs	r0, #0
 801deb0:	6360      	str	r0, [r4, #52]	; 0x34
 801deb2:	e7c1      	b.n	801de38 <__sflush_r+0x1c>
 801deb4:	6a21      	ldr	r1, [r4, #32]
 801deb6:	2301      	movs	r3, #1
 801deb8:	4628      	mov	r0, r5
 801deba:	47b0      	blx	r6
 801debc:	1c41      	adds	r1, r0, #1
 801debe:	d1c7      	bne.n	801de50 <__sflush_r+0x34>
 801dec0:	682b      	ldr	r3, [r5, #0]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d0c4      	beq.n	801de50 <__sflush_r+0x34>
 801dec6:	2b1d      	cmp	r3, #29
 801dec8:	d001      	beq.n	801dece <__sflush_r+0xb2>
 801deca:	2b16      	cmp	r3, #22
 801decc:	d101      	bne.n	801ded2 <__sflush_r+0xb6>
 801dece:	602f      	str	r7, [r5, #0]
 801ded0:	e7b1      	b.n	801de36 <__sflush_r+0x1a>
 801ded2:	89a3      	ldrh	r3, [r4, #12]
 801ded4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ded8:	81a3      	strh	r3, [r4, #12]
 801deda:	e7ad      	b.n	801de38 <__sflush_r+0x1c>
 801dedc:	690f      	ldr	r7, [r1, #16]
 801dede:	2f00      	cmp	r7, #0
 801dee0:	d0a9      	beq.n	801de36 <__sflush_r+0x1a>
 801dee2:	0793      	lsls	r3, r2, #30
 801dee4:	680e      	ldr	r6, [r1, #0]
 801dee6:	bf08      	it	eq
 801dee8:	694b      	ldreq	r3, [r1, #20]
 801deea:	600f      	str	r7, [r1, #0]
 801deec:	bf18      	it	ne
 801deee:	2300      	movne	r3, #0
 801def0:	eba6 0807 	sub.w	r8, r6, r7
 801def4:	608b      	str	r3, [r1, #8]
 801def6:	f1b8 0f00 	cmp.w	r8, #0
 801defa:	dd9c      	ble.n	801de36 <__sflush_r+0x1a>
 801defc:	6a21      	ldr	r1, [r4, #32]
 801defe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801df00:	4643      	mov	r3, r8
 801df02:	463a      	mov	r2, r7
 801df04:	4628      	mov	r0, r5
 801df06:	47b0      	blx	r6
 801df08:	2800      	cmp	r0, #0
 801df0a:	dc06      	bgt.n	801df1a <__sflush_r+0xfe>
 801df0c:	89a3      	ldrh	r3, [r4, #12]
 801df0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df12:	81a3      	strh	r3, [r4, #12]
 801df14:	f04f 30ff 	mov.w	r0, #4294967295
 801df18:	e78e      	b.n	801de38 <__sflush_r+0x1c>
 801df1a:	4407      	add	r7, r0
 801df1c:	eba8 0800 	sub.w	r8, r8, r0
 801df20:	e7e9      	b.n	801def6 <__sflush_r+0xda>
 801df22:	bf00      	nop
 801df24:	20400001 	.word	0x20400001

0801df28 <_fflush_r>:
 801df28:	b538      	push	{r3, r4, r5, lr}
 801df2a:	690b      	ldr	r3, [r1, #16]
 801df2c:	4605      	mov	r5, r0
 801df2e:	460c      	mov	r4, r1
 801df30:	b913      	cbnz	r3, 801df38 <_fflush_r+0x10>
 801df32:	2500      	movs	r5, #0
 801df34:	4628      	mov	r0, r5
 801df36:	bd38      	pop	{r3, r4, r5, pc}
 801df38:	b118      	cbz	r0, 801df42 <_fflush_r+0x1a>
 801df3a:	6983      	ldr	r3, [r0, #24]
 801df3c:	b90b      	cbnz	r3, 801df42 <_fflush_r+0x1a>
 801df3e:	f000 f887 	bl	801e050 <__sinit>
 801df42:	4b14      	ldr	r3, [pc, #80]	; (801df94 <_fflush_r+0x6c>)
 801df44:	429c      	cmp	r4, r3
 801df46:	d11b      	bne.n	801df80 <_fflush_r+0x58>
 801df48:	686c      	ldr	r4, [r5, #4]
 801df4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d0ef      	beq.n	801df32 <_fflush_r+0xa>
 801df52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801df54:	07d0      	lsls	r0, r2, #31
 801df56:	d404      	bmi.n	801df62 <_fflush_r+0x3a>
 801df58:	0599      	lsls	r1, r3, #22
 801df5a:	d402      	bmi.n	801df62 <_fflush_r+0x3a>
 801df5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df5e:	f7fd f830 	bl	801afc2 <__retarget_lock_acquire_recursive>
 801df62:	4628      	mov	r0, r5
 801df64:	4621      	mov	r1, r4
 801df66:	f7ff ff59 	bl	801de1c <__sflush_r>
 801df6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df6c:	07da      	lsls	r2, r3, #31
 801df6e:	4605      	mov	r5, r0
 801df70:	d4e0      	bmi.n	801df34 <_fflush_r+0xc>
 801df72:	89a3      	ldrh	r3, [r4, #12]
 801df74:	059b      	lsls	r3, r3, #22
 801df76:	d4dd      	bmi.n	801df34 <_fflush_r+0xc>
 801df78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df7a:	f7fd f823 	bl	801afc4 <__retarget_lock_release_recursive>
 801df7e:	e7d9      	b.n	801df34 <_fflush_r+0xc>
 801df80:	4b05      	ldr	r3, [pc, #20]	; (801df98 <_fflush_r+0x70>)
 801df82:	429c      	cmp	r4, r3
 801df84:	d101      	bne.n	801df8a <_fflush_r+0x62>
 801df86:	68ac      	ldr	r4, [r5, #8]
 801df88:	e7df      	b.n	801df4a <_fflush_r+0x22>
 801df8a:	4b04      	ldr	r3, [pc, #16]	; (801df9c <_fflush_r+0x74>)
 801df8c:	429c      	cmp	r4, r3
 801df8e:	bf08      	it	eq
 801df90:	68ec      	ldreq	r4, [r5, #12]
 801df92:	e7da      	b.n	801df4a <_fflush_r+0x22>
 801df94:	08021cac 	.word	0x08021cac
 801df98:	08021ccc 	.word	0x08021ccc
 801df9c:	08021c8c 	.word	0x08021c8c

0801dfa0 <std>:
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	b510      	push	{r4, lr}
 801dfa4:	4604      	mov	r4, r0
 801dfa6:	e9c0 3300 	strd	r3, r3, [r0]
 801dfaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dfae:	6083      	str	r3, [r0, #8]
 801dfb0:	8181      	strh	r1, [r0, #12]
 801dfb2:	6643      	str	r3, [r0, #100]	; 0x64
 801dfb4:	81c2      	strh	r2, [r0, #14]
 801dfb6:	6183      	str	r3, [r0, #24]
 801dfb8:	4619      	mov	r1, r3
 801dfba:	2208      	movs	r2, #8
 801dfbc:	305c      	adds	r0, #92	; 0x5c
 801dfbe:	f7fd f833 	bl	801b028 <memset>
 801dfc2:	4b05      	ldr	r3, [pc, #20]	; (801dfd8 <std+0x38>)
 801dfc4:	6263      	str	r3, [r4, #36]	; 0x24
 801dfc6:	4b05      	ldr	r3, [pc, #20]	; (801dfdc <std+0x3c>)
 801dfc8:	62a3      	str	r3, [r4, #40]	; 0x28
 801dfca:	4b05      	ldr	r3, [pc, #20]	; (801dfe0 <std+0x40>)
 801dfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dfce:	4b05      	ldr	r3, [pc, #20]	; (801dfe4 <std+0x44>)
 801dfd0:	6224      	str	r4, [r4, #32]
 801dfd2:	6323      	str	r3, [r4, #48]	; 0x30
 801dfd4:	bd10      	pop	{r4, pc}
 801dfd6:	bf00      	nop
 801dfd8:	0801f8c9 	.word	0x0801f8c9
 801dfdc:	0801f8eb 	.word	0x0801f8eb
 801dfe0:	0801f923 	.word	0x0801f923
 801dfe4:	0801f947 	.word	0x0801f947

0801dfe8 <_cleanup_r>:
 801dfe8:	4901      	ldr	r1, [pc, #4]	; (801dff0 <_cleanup_r+0x8>)
 801dfea:	f000 b8c1 	b.w	801e170 <_fwalk_reent>
 801dfee:	bf00      	nop
 801dff0:	0801df29 	.word	0x0801df29

0801dff4 <__sfmoreglue>:
 801dff4:	b570      	push	{r4, r5, r6, lr}
 801dff6:	2268      	movs	r2, #104	; 0x68
 801dff8:	1e4d      	subs	r5, r1, #1
 801dffa:	4355      	muls	r5, r2
 801dffc:	460e      	mov	r6, r1
 801dffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e002:	f7fd f885 	bl	801b110 <_malloc_r>
 801e006:	4604      	mov	r4, r0
 801e008:	b140      	cbz	r0, 801e01c <__sfmoreglue+0x28>
 801e00a:	2100      	movs	r1, #0
 801e00c:	e9c0 1600 	strd	r1, r6, [r0]
 801e010:	300c      	adds	r0, #12
 801e012:	60a0      	str	r0, [r4, #8]
 801e014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e018:	f7fd f806 	bl	801b028 <memset>
 801e01c:	4620      	mov	r0, r4
 801e01e:	bd70      	pop	{r4, r5, r6, pc}

0801e020 <__sfp_lock_acquire>:
 801e020:	4801      	ldr	r0, [pc, #4]	; (801e028 <__sfp_lock_acquire+0x8>)
 801e022:	f7fc bfce 	b.w	801afc2 <__retarget_lock_acquire_recursive>
 801e026:	bf00      	nop
 801e028:	20003645 	.word	0x20003645

0801e02c <__sfp_lock_release>:
 801e02c:	4801      	ldr	r0, [pc, #4]	; (801e034 <__sfp_lock_release+0x8>)
 801e02e:	f7fc bfc9 	b.w	801afc4 <__retarget_lock_release_recursive>
 801e032:	bf00      	nop
 801e034:	20003645 	.word	0x20003645

0801e038 <__sinit_lock_acquire>:
 801e038:	4801      	ldr	r0, [pc, #4]	; (801e040 <__sinit_lock_acquire+0x8>)
 801e03a:	f7fc bfc2 	b.w	801afc2 <__retarget_lock_acquire_recursive>
 801e03e:	bf00      	nop
 801e040:	20003646 	.word	0x20003646

0801e044 <__sinit_lock_release>:
 801e044:	4801      	ldr	r0, [pc, #4]	; (801e04c <__sinit_lock_release+0x8>)
 801e046:	f7fc bfbd 	b.w	801afc4 <__retarget_lock_release_recursive>
 801e04a:	bf00      	nop
 801e04c:	20003646 	.word	0x20003646

0801e050 <__sinit>:
 801e050:	b510      	push	{r4, lr}
 801e052:	4604      	mov	r4, r0
 801e054:	f7ff fff0 	bl	801e038 <__sinit_lock_acquire>
 801e058:	69a3      	ldr	r3, [r4, #24]
 801e05a:	b11b      	cbz	r3, 801e064 <__sinit+0x14>
 801e05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e060:	f7ff bff0 	b.w	801e044 <__sinit_lock_release>
 801e064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e068:	6523      	str	r3, [r4, #80]	; 0x50
 801e06a:	4b13      	ldr	r3, [pc, #76]	; (801e0b8 <__sinit+0x68>)
 801e06c:	4a13      	ldr	r2, [pc, #76]	; (801e0bc <__sinit+0x6c>)
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	62a2      	str	r2, [r4, #40]	; 0x28
 801e072:	42a3      	cmp	r3, r4
 801e074:	bf04      	itt	eq
 801e076:	2301      	moveq	r3, #1
 801e078:	61a3      	streq	r3, [r4, #24]
 801e07a:	4620      	mov	r0, r4
 801e07c:	f000 f820 	bl	801e0c0 <__sfp>
 801e080:	6060      	str	r0, [r4, #4]
 801e082:	4620      	mov	r0, r4
 801e084:	f000 f81c 	bl	801e0c0 <__sfp>
 801e088:	60a0      	str	r0, [r4, #8]
 801e08a:	4620      	mov	r0, r4
 801e08c:	f000 f818 	bl	801e0c0 <__sfp>
 801e090:	2200      	movs	r2, #0
 801e092:	60e0      	str	r0, [r4, #12]
 801e094:	2104      	movs	r1, #4
 801e096:	6860      	ldr	r0, [r4, #4]
 801e098:	f7ff ff82 	bl	801dfa0 <std>
 801e09c:	68a0      	ldr	r0, [r4, #8]
 801e09e:	2201      	movs	r2, #1
 801e0a0:	2109      	movs	r1, #9
 801e0a2:	f7ff ff7d 	bl	801dfa0 <std>
 801e0a6:	68e0      	ldr	r0, [r4, #12]
 801e0a8:	2202      	movs	r2, #2
 801e0aa:	2112      	movs	r1, #18
 801e0ac:	f7ff ff78 	bl	801dfa0 <std>
 801e0b0:	2301      	movs	r3, #1
 801e0b2:	61a3      	str	r3, [r4, #24]
 801e0b4:	e7d2      	b.n	801e05c <__sinit+0xc>
 801e0b6:	bf00      	nop
 801e0b8:	080219d0 	.word	0x080219d0
 801e0bc:	0801dfe9 	.word	0x0801dfe9

0801e0c0 <__sfp>:
 801e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c2:	4607      	mov	r7, r0
 801e0c4:	f7ff ffac 	bl	801e020 <__sfp_lock_acquire>
 801e0c8:	4b1e      	ldr	r3, [pc, #120]	; (801e144 <__sfp+0x84>)
 801e0ca:	681e      	ldr	r6, [r3, #0]
 801e0cc:	69b3      	ldr	r3, [r6, #24]
 801e0ce:	b913      	cbnz	r3, 801e0d6 <__sfp+0x16>
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	f7ff ffbd 	bl	801e050 <__sinit>
 801e0d6:	3648      	adds	r6, #72	; 0x48
 801e0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e0dc:	3b01      	subs	r3, #1
 801e0de:	d503      	bpl.n	801e0e8 <__sfp+0x28>
 801e0e0:	6833      	ldr	r3, [r6, #0]
 801e0e2:	b30b      	cbz	r3, 801e128 <__sfp+0x68>
 801e0e4:	6836      	ldr	r6, [r6, #0]
 801e0e6:	e7f7      	b.n	801e0d8 <__sfp+0x18>
 801e0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e0ec:	b9d5      	cbnz	r5, 801e124 <__sfp+0x64>
 801e0ee:	4b16      	ldr	r3, [pc, #88]	; (801e148 <__sfp+0x88>)
 801e0f0:	60e3      	str	r3, [r4, #12]
 801e0f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e0f6:	6665      	str	r5, [r4, #100]	; 0x64
 801e0f8:	f7fc ff62 	bl	801afc0 <__retarget_lock_init_recursive>
 801e0fc:	f7ff ff96 	bl	801e02c <__sfp_lock_release>
 801e100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e108:	6025      	str	r5, [r4, #0]
 801e10a:	61a5      	str	r5, [r4, #24]
 801e10c:	2208      	movs	r2, #8
 801e10e:	4629      	mov	r1, r5
 801e110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e114:	f7fc ff88 	bl	801b028 <memset>
 801e118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e120:	4620      	mov	r0, r4
 801e122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e124:	3468      	adds	r4, #104	; 0x68
 801e126:	e7d9      	b.n	801e0dc <__sfp+0x1c>
 801e128:	2104      	movs	r1, #4
 801e12a:	4638      	mov	r0, r7
 801e12c:	f7ff ff62 	bl	801dff4 <__sfmoreglue>
 801e130:	4604      	mov	r4, r0
 801e132:	6030      	str	r0, [r6, #0]
 801e134:	2800      	cmp	r0, #0
 801e136:	d1d5      	bne.n	801e0e4 <__sfp+0x24>
 801e138:	f7ff ff78 	bl	801e02c <__sfp_lock_release>
 801e13c:	230c      	movs	r3, #12
 801e13e:	603b      	str	r3, [r7, #0]
 801e140:	e7ee      	b.n	801e120 <__sfp+0x60>
 801e142:	bf00      	nop
 801e144:	080219d0 	.word	0x080219d0
 801e148:	ffff0001 	.word	0xffff0001

0801e14c <fiprintf>:
 801e14c:	b40e      	push	{r1, r2, r3}
 801e14e:	b503      	push	{r0, r1, lr}
 801e150:	4601      	mov	r1, r0
 801e152:	ab03      	add	r3, sp, #12
 801e154:	4805      	ldr	r0, [pc, #20]	; (801e16c <fiprintf+0x20>)
 801e156:	f853 2b04 	ldr.w	r2, [r3], #4
 801e15a:	6800      	ldr	r0, [r0, #0]
 801e15c:	9301      	str	r3, [sp, #4]
 801e15e:	f001 fa79 	bl	801f654 <_vfiprintf_r>
 801e162:	b002      	add	sp, #8
 801e164:	f85d eb04 	ldr.w	lr, [sp], #4
 801e168:	b003      	add	sp, #12
 801e16a:	4770      	bx	lr
 801e16c:	2000017c 	.word	0x2000017c

0801e170 <_fwalk_reent>:
 801e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e174:	4606      	mov	r6, r0
 801e176:	4688      	mov	r8, r1
 801e178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e17c:	2700      	movs	r7, #0
 801e17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e182:	f1b9 0901 	subs.w	r9, r9, #1
 801e186:	d505      	bpl.n	801e194 <_fwalk_reent+0x24>
 801e188:	6824      	ldr	r4, [r4, #0]
 801e18a:	2c00      	cmp	r4, #0
 801e18c:	d1f7      	bne.n	801e17e <_fwalk_reent+0xe>
 801e18e:	4638      	mov	r0, r7
 801e190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e194:	89ab      	ldrh	r3, [r5, #12]
 801e196:	2b01      	cmp	r3, #1
 801e198:	d907      	bls.n	801e1aa <_fwalk_reent+0x3a>
 801e19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e19e:	3301      	adds	r3, #1
 801e1a0:	d003      	beq.n	801e1aa <_fwalk_reent+0x3a>
 801e1a2:	4629      	mov	r1, r5
 801e1a4:	4630      	mov	r0, r6
 801e1a6:	47c0      	blx	r8
 801e1a8:	4307      	orrs	r7, r0
 801e1aa:	3568      	adds	r5, #104	; 0x68
 801e1ac:	e7e9      	b.n	801e182 <_fwalk_reent+0x12>

0801e1ae <rshift>:
 801e1ae:	6903      	ldr	r3, [r0, #16]
 801e1b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e1bc:	f100 0414 	add.w	r4, r0, #20
 801e1c0:	dd45      	ble.n	801e24e <rshift+0xa0>
 801e1c2:	f011 011f 	ands.w	r1, r1, #31
 801e1c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e1ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e1ce:	d10c      	bne.n	801e1ea <rshift+0x3c>
 801e1d0:	f100 0710 	add.w	r7, r0, #16
 801e1d4:	4629      	mov	r1, r5
 801e1d6:	42b1      	cmp	r1, r6
 801e1d8:	d334      	bcc.n	801e244 <rshift+0x96>
 801e1da:	1a9b      	subs	r3, r3, r2
 801e1dc:	009b      	lsls	r3, r3, #2
 801e1de:	1eea      	subs	r2, r5, #3
 801e1e0:	4296      	cmp	r6, r2
 801e1e2:	bf38      	it	cc
 801e1e4:	2300      	movcc	r3, #0
 801e1e6:	4423      	add	r3, r4
 801e1e8:	e015      	b.n	801e216 <rshift+0x68>
 801e1ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e1ee:	f1c1 0820 	rsb	r8, r1, #32
 801e1f2:	40cf      	lsrs	r7, r1
 801e1f4:	f105 0e04 	add.w	lr, r5, #4
 801e1f8:	46a1      	mov	r9, r4
 801e1fa:	4576      	cmp	r6, lr
 801e1fc:	46f4      	mov	ip, lr
 801e1fe:	d815      	bhi.n	801e22c <rshift+0x7e>
 801e200:	1a9a      	subs	r2, r3, r2
 801e202:	0092      	lsls	r2, r2, #2
 801e204:	3a04      	subs	r2, #4
 801e206:	3501      	adds	r5, #1
 801e208:	42ae      	cmp	r6, r5
 801e20a:	bf38      	it	cc
 801e20c:	2200      	movcc	r2, #0
 801e20e:	18a3      	adds	r3, r4, r2
 801e210:	50a7      	str	r7, [r4, r2]
 801e212:	b107      	cbz	r7, 801e216 <rshift+0x68>
 801e214:	3304      	adds	r3, #4
 801e216:	1b1a      	subs	r2, r3, r4
 801e218:	42a3      	cmp	r3, r4
 801e21a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e21e:	bf08      	it	eq
 801e220:	2300      	moveq	r3, #0
 801e222:	6102      	str	r2, [r0, #16]
 801e224:	bf08      	it	eq
 801e226:	6143      	streq	r3, [r0, #20]
 801e228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e22c:	f8dc c000 	ldr.w	ip, [ip]
 801e230:	fa0c fc08 	lsl.w	ip, ip, r8
 801e234:	ea4c 0707 	orr.w	r7, ip, r7
 801e238:	f849 7b04 	str.w	r7, [r9], #4
 801e23c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e240:	40cf      	lsrs	r7, r1
 801e242:	e7da      	b.n	801e1fa <rshift+0x4c>
 801e244:	f851 cb04 	ldr.w	ip, [r1], #4
 801e248:	f847 cf04 	str.w	ip, [r7, #4]!
 801e24c:	e7c3      	b.n	801e1d6 <rshift+0x28>
 801e24e:	4623      	mov	r3, r4
 801e250:	e7e1      	b.n	801e216 <rshift+0x68>

0801e252 <__hexdig_fun>:
 801e252:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e256:	2b09      	cmp	r3, #9
 801e258:	d802      	bhi.n	801e260 <__hexdig_fun+0xe>
 801e25a:	3820      	subs	r0, #32
 801e25c:	b2c0      	uxtb	r0, r0
 801e25e:	4770      	bx	lr
 801e260:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e264:	2b05      	cmp	r3, #5
 801e266:	d801      	bhi.n	801e26c <__hexdig_fun+0x1a>
 801e268:	3847      	subs	r0, #71	; 0x47
 801e26a:	e7f7      	b.n	801e25c <__hexdig_fun+0xa>
 801e26c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e270:	2b05      	cmp	r3, #5
 801e272:	d801      	bhi.n	801e278 <__hexdig_fun+0x26>
 801e274:	3827      	subs	r0, #39	; 0x27
 801e276:	e7f1      	b.n	801e25c <__hexdig_fun+0xa>
 801e278:	2000      	movs	r0, #0
 801e27a:	4770      	bx	lr

0801e27c <__gethex>:
 801e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e280:	ed2d 8b02 	vpush	{d8}
 801e284:	b089      	sub	sp, #36	; 0x24
 801e286:	ee08 0a10 	vmov	s16, r0
 801e28a:	9304      	str	r3, [sp, #16]
 801e28c:	4bb4      	ldr	r3, [pc, #720]	; (801e560 <__gethex+0x2e4>)
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	9301      	str	r3, [sp, #4]
 801e292:	4618      	mov	r0, r3
 801e294:	468b      	mov	fp, r1
 801e296:	4690      	mov	r8, r2
 801e298:	f7e1 ffac 	bl	80001f4 <strlen>
 801e29c:	9b01      	ldr	r3, [sp, #4]
 801e29e:	f8db 2000 	ldr.w	r2, [fp]
 801e2a2:	4403      	add	r3, r0
 801e2a4:	4682      	mov	sl, r0
 801e2a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e2aa:	9305      	str	r3, [sp, #20]
 801e2ac:	1c93      	adds	r3, r2, #2
 801e2ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e2b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e2b6:	32fe      	adds	r2, #254	; 0xfe
 801e2b8:	18d1      	adds	r1, r2, r3
 801e2ba:	461f      	mov	r7, r3
 801e2bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e2c0:	9100      	str	r1, [sp, #0]
 801e2c2:	2830      	cmp	r0, #48	; 0x30
 801e2c4:	d0f8      	beq.n	801e2b8 <__gethex+0x3c>
 801e2c6:	f7ff ffc4 	bl	801e252 <__hexdig_fun>
 801e2ca:	4604      	mov	r4, r0
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	d13a      	bne.n	801e346 <__gethex+0xca>
 801e2d0:	9901      	ldr	r1, [sp, #4]
 801e2d2:	4652      	mov	r2, sl
 801e2d4:	4638      	mov	r0, r7
 801e2d6:	f001 fb3a 	bl	801f94e <strncmp>
 801e2da:	4605      	mov	r5, r0
 801e2dc:	2800      	cmp	r0, #0
 801e2de:	d168      	bne.n	801e3b2 <__gethex+0x136>
 801e2e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e2e4:	eb07 060a 	add.w	r6, r7, sl
 801e2e8:	f7ff ffb3 	bl	801e252 <__hexdig_fun>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	d062      	beq.n	801e3b6 <__gethex+0x13a>
 801e2f0:	4633      	mov	r3, r6
 801e2f2:	7818      	ldrb	r0, [r3, #0]
 801e2f4:	2830      	cmp	r0, #48	; 0x30
 801e2f6:	461f      	mov	r7, r3
 801e2f8:	f103 0301 	add.w	r3, r3, #1
 801e2fc:	d0f9      	beq.n	801e2f2 <__gethex+0x76>
 801e2fe:	f7ff ffa8 	bl	801e252 <__hexdig_fun>
 801e302:	2301      	movs	r3, #1
 801e304:	fab0 f480 	clz	r4, r0
 801e308:	0964      	lsrs	r4, r4, #5
 801e30a:	4635      	mov	r5, r6
 801e30c:	9300      	str	r3, [sp, #0]
 801e30e:	463a      	mov	r2, r7
 801e310:	4616      	mov	r6, r2
 801e312:	3201      	adds	r2, #1
 801e314:	7830      	ldrb	r0, [r6, #0]
 801e316:	f7ff ff9c 	bl	801e252 <__hexdig_fun>
 801e31a:	2800      	cmp	r0, #0
 801e31c:	d1f8      	bne.n	801e310 <__gethex+0x94>
 801e31e:	9901      	ldr	r1, [sp, #4]
 801e320:	4652      	mov	r2, sl
 801e322:	4630      	mov	r0, r6
 801e324:	f001 fb13 	bl	801f94e <strncmp>
 801e328:	b980      	cbnz	r0, 801e34c <__gethex+0xd0>
 801e32a:	b94d      	cbnz	r5, 801e340 <__gethex+0xc4>
 801e32c:	eb06 050a 	add.w	r5, r6, sl
 801e330:	462a      	mov	r2, r5
 801e332:	4616      	mov	r6, r2
 801e334:	3201      	adds	r2, #1
 801e336:	7830      	ldrb	r0, [r6, #0]
 801e338:	f7ff ff8b 	bl	801e252 <__hexdig_fun>
 801e33c:	2800      	cmp	r0, #0
 801e33e:	d1f8      	bne.n	801e332 <__gethex+0xb6>
 801e340:	1bad      	subs	r5, r5, r6
 801e342:	00ad      	lsls	r5, r5, #2
 801e344:	e004      	b.n	801e350 <__gethex+0xd4>
 801e346:	2400      	movs	r4, #0
 801e348:	4625      	mov	r5, r4
 801e34a:	e7e0      	b.n	801e30e <__gethex+0x92>
 801e34c:	2d00      	cmp	r5, #0
 801e34e:	d1f7      	bne.n	801e340 <__gethex+0xc4>
 801e350:	7833      	ldrb	r3, [r6, #0]
 801e352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e356:	2b50      	cmp	r3, #80	; 0x50
 801e358:	d13b      	bne.n	801e3d2 <__gethex+0x156>
 801e35a:	7873      	ldrb	r3, [r6, #1]
 801e35c:	2b2b      	cmp	r3, #43	; 0x2b
 801e35e:	d02c      	beq.n	801e3ba <__gethex+0x13e>
 801e360:	2b2d      	cmp	r3, #45	; 0x2d
 801e362:	d02e      	beq.n	801e3c2 <__gethex+0x146>
 801e364:	1c71      	adds	r1, r6, #1
 801e366:	f04f 0900 	mov.w	r9, #0
 801e36a:	7808      	ldrb	r0, [r1, #0]
 801e36c:	f7ff ff71 	bl	801e252 <__hexdig_fun>
 801e370:	1e43      	subs	r3, r0, #1
 801e372:	b2db      	uxtb	r3, r3
 801e374:	2b18      	cmp	r3, #24
 801e376:	d82c      	bhi.n	801e3d2 <__gethex+0x156>
 801e378:	f1a0 0210 	sub.w	r2, r0, #16
 801e37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e380:	f7ff ff67 	bl	801e252 <__hexdig_fun>
 801e384:	1e43      	subs	r3, r0, #1
 801e386:	b2db      	uxtb	r3, r3
 801e388:	2b18      	cmp	r3, #24
 801e38a:	d91d      	bls.n	801e3c8 <__gethex+0x14c>
 801e38c:	f1b9 0f00 	cmp.w	r9, #0
 801e390:	d000      	beq.n	801e394 <__gethex+0x118>
 801e392:	4252      	negs	r2, r2
 801e394:	4415      	add	r5, r2
 801e396:	f8cb 1000 	str.w	r1, [fp]
 801e39a:	b1e4      	cbz	r4, 801e3d6 <__gethex+0x15a>
 801e39c:	9b00      	ldr	r3, [sp, #0]
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	bf14      	ite	ne
 801e3a2:	2700      	movne	r7, #0
 801e3a4:	2706      	moveq	r7, #6
 801e3a6:	4638      	mov	r0, r7
 801e3a8:	b009      	add	sp, #36	; 0x24
 801e3aa:	ecbd 8b02 	vpop	{d8}
 801e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b2:	463e      	mov	r6, r7
 801e3b4:	4625      	mov	r5, r4
 801e3b6:	2401      	movs	r4, #1
 801e3b8:	e7ca      	b.n	801e350 <__gethex+0xd4>
 801e3ba:	f04f 0900 	mov.w	r9, #0
 801e3be:	1cb1      	adds	r1, r6, #2
 801e3c0:	e7d3      	b.n	801e36a <__gethex+0xee>
 801e3c2:	f04f 0901 	mov.w	r9, #1
 801e3c6:	e7fa      	b.n	801e3be <__gethex+0x142>
 801e3c8:	230a      	movs	r3, #10
 801e3ca:	fb03 0202 	mla	r2, r3, r2, r0
 801e3ce:	3a10      	subs	r2, #16
 801e3d0:	e7d4      	b.n	801e37c <__gethex+0x100>
 801e3d2:	4631      	mov	r1, r6
 801e3d4:	e7df      	b.n	801e396 <__gethex+0x11a>
 801e3d6:	1bf3      	subs	r3, r6, r7
 801e3d8:	3b01      	subs	r3, #1
 801e3da:	4621      	mov	r1, r4
 801e3dc:	2b07      	cmp	r3, #7
 801e3de:	dc0b      	bgt.n	801e3f8 <__gethex+0x17c>
 801e3e0:	ee18 0a10 	vmov	r0, s16
 801e3e4:	f000 fada 	bl	801e99c <_Balloc>
 801e3e8:	4604      	mov	r4, r0
 801e3ea:	b940      	cbnz	r0, 801e3fe <__gethex+0x182>
 801e3ec:	4b5d      	ldr	r3, [pc, #372]	; (801e564 <__gethex+0x2e8>)
 801e3ee:	4602      	mov	r2, r0
 801e3f0:	21de      	movs	r1, #222	; 0xde
 801e3f2:	485d      	ldr	r0, [pc, #372]	; (801e568 <__gethex+0x2ec>)
 801e3f4:	f7fe fe78 	bl	801d0e8 <__assert_func>
 801e3f8:	3101      	adds	r1, #1
 801e3fa:	105b      	asrs	r3, r3, #1
 801e3fc:	e7ee      	b.n	801e3dc <__gethex+0x160>
 801e3fe:	f100 0914 	add.w	r9, r0, #20
 801e402:	f04f 0b00 	mov.w	fp, #0
 801e406:	f1ca 0301 	rsb	r3, sl, #1
 801e40a:	f8cd 9008 	str.w	r9, [sp, #8]
 801e40e:	f8cd b000 	str.w	fp, [sp]
 801e412:	9306      	str	r3, [sp, #24]
 801e414:	42b7      	cmp	r7, r6
 801e416:	d340      	bcc.n	801e49a <__gethex+0x21e>
 801e418:	9802      	ldr	r0, [sp, #8]
 801e41a:	9b00      	ldr	r3, [sp, #0]
 801e41c:	f840 3b04 	str.w	r3, [r0], #4
 801e420:	eba0 0009 	sub.w	r0, r0, r9
 801e424:	1080      	asrs	r0, r0, #2
 801e426:	0146      	lsls	r6, r0, #5
 801e428:	6120      	str	r0, [r4, #16]
 801e42a:	4618      	mov	r0, r3
 801e42c:	f000 fba8 	bl	801eb80 <__hi0bits>
 801e430:	1a30      	subs	r0, r6, r0
 801e432:	f8d8 6000 	ldr.w	r6, [r8]
 801e436:	42b0      	cmp	r0, r6
 801e438:	dd63      	ble.n	801e502 <__gethex+0x286>
 801e43a:	1b87      	subs	r7, r0, r6
 801e43c:	4639      	mov	r1, r7
 801e43e:	4620      	mov	r0, r4
 801e440:	f000 ff4c 	bl	801f2dc <__any_on>
 801e444:	4682      	mov	sl, r0
 801e446:	b1a8      	cbz	r0, 801e474 <__gethex+0x1f8>
 801e448:	1e7b      	subs	r3, r7, #1
 801e44a:	1159      	asrs	r1, r3, #5
 801e44c:	f003 021f 	and.w	r2, r3, #31
 801e450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e454:	f04f 0a01 	mov.w	sl, #1
 801e458:	fa0a f202 	lsl.w	r2, sl, r2
 801e45c:	420a      	tst	r2, r1
 801e45e:	d009      	beq.n	801e474 <__gethex+0x1f8>
 801e460:	4553      	cmp	r3, sl
 801e462:	dd05      	ble.n	801e470 <__gethex+0x1f4>
 801e464:	1eb9      	subs	r1, r7, #2
 801e466:	4620      	mov	r0, r4
 801e468:	f000 ff38 	bl	801f2dc <__any_on>
 801e46c:	2800      	cmp	r0, #0
 801e46e:	d145      	bne.n	801e4fc <__gethex+0x280>
 801e470:	f04f 0a02 	mov.w	sl, #2
 801e474:	4639      	mov	r1, r7
 801e476:	4620      	mov	r0, r4
 801e478:	f7ff fe99 	bl	801e1ae <rshift>
 801e47c:	443d      	add	r5, r7
 801e47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e482:	42ab      	cmp	r3, r5
 801e484:	da4c      	bge.n	801e520 <__gethex+0x2a4>
 801e486:	ee18 0a10 	vmov	r0, s16
 801e48a:	4621      	mov	r1, r4
 801e48c:	f000 fac6 	bl	801ea1c <_Bfree>
 801e490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e492:	2300      	movs	r3, #0
 801e494:	6013      	str	r3, [r2, #0]
 801e496:	27a3      	movs	r7, #163	; 0xa3
 801e498:	e785      	b.n	801e3a6 <__gethex+0x12a>
 801e49a:	1e73      	subs	r3, r6, #1
 801e49c:	9a05      	ldr	r2, [sp, #20]
 801e49e:	9303      	str	r3, [sp, #12]
 801e4a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e4a4:	4293      	cmp	r3, r2
 801e4a6:	d019      	beq.n	801e4dc <__gethex+0x260>
 801e4a8:	f1bb 0f20 	cmp.w	fp, #32
 801e4ac:	d107      	bne.n	801e4be <__gethex+0x242>
 801e4ae:	9b02      	ldr	r3, [sp, #8]
 801e4b0:	9a00      	ldr	r2, [sp, #0]
 801e4b2:	f843 2b04 	str.w	r2, [r3], #4
 801e4b6:	9302      	str	r3, [sp, #8]
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	9300      	str	r3, [sp, #0]
 801e4bc:	469b      	mov	fp, r3
 801e4be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e4c2:	f7ff fec6 	bl	801e252 <__hexdig_fun>
 801e4c6:	9b00      	ldr	r3, [sp, #0]
 801e4c8:	f000 000f 	and.w	r0, r0, #15
 801e4cc:	fa00 f00b 	lsl.w	r0, r0, fp
 801e4d0:	4303      	orrs	r3, r0
 801e4d2:	9300      	str	r3, [sp, #0]
 801e4d4:	f10b 0b04 	add.w	fp, fp, #4
 801e4d8:	9b03      	ldr	r3, [sp, #12]
 801e4da:	e00d      	b.n	801e4f8 <__gethex+0x27c>
 801e4dc:	9b03      	ldr	r3, [sp, #12]
 801e4de:	9a06      	ldr	r2, [sp, #24]
 801e4e0:	4413      	add	r3, r2
 801e4e2:	42bb      	cmp	r3, r7
 801e4e4:	d3e0      	bcc.n	801e4a8 <__gethex+0x22c>
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	9901      	ldr	r1, [sp, #4]
 801e4ea:	9307      	str	r3, [sp, #28]
 801e4ec:	4652      	mov	r2, sl
 801e4ee:	f001 fa2e 	bl	801f94e <strncmp>
 801e4f2:	9b07      	ldr	r3, [sp, #28]
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	d1d7      	bne.n	801e4a8 <__gethex+0x22c>
 801e4f8:	461e      	mov	r6, r3
 801e4fa:	e78b      	b.n	801e414 <__gethex+0x198>
 801e4fc:	f04f 0a03 	mov.w	sl, #3
 801e500:	e7b8      	b.n	801e474 <__gethex+0x1f8>
 801e502:	da0a      	bge.n	801e51a <__gethex+0x29e>
 801e504:	1a37      	subs	r7, r6, r0
 801e506:	4621      	mov	r1, r4
 801e508:	ee18 0a10 	vmov	r0, s16
 801e50c:	463a      	mov	r2, r7
 801e50e:	f000 fca1 	bl	801ee54 <__lshift>
 801e512:	1bed      	subs	r5, r5, r7
 801e514:	4604      	mov	r4, r0
 801e516:	f100 0914 	add.w	r9, r0, #20
 801e51a:	f04f 0a00 	mov.w	sl, #0
 801e51e:	e7ae      	b.n	801e47e <__gethex+0x202>
 801e520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e524:	42a8      	cmp	r0, r5
 801e526:	dd72      	ble.n	801e60e <__gethex+0x392>
 801e528:	1b45      	subs	r5, r0, r5
 801e52a:	42ae      	cmp	r6, r5
 801e52c:	dc36      	bgt.n	801e59c <__gethex+0x320>
 801e52e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e532:	2b02      	cmp	r3, #2
 801e534:	d02a      	beq.n	801e58c <__gethex+0x310>
 801e536:	2b03      	cmp	r3, #3
 801e538:	d02c      	beq.n	801e594 <__gethex+0x318>
 801e53a:	2b01      	cmp	r3, #1
 801e53c:	d11c      	bne.n	801e578 <__gethex+0x2fc>
 801e53e:	42ae      	cmp	r6, r5
 801e540:	d11a      	bne.n	801e578 <__gethex+0x2fc>
 801e542:	2e01      	cmp	r6, #1
 801e544:	d112      	bne.n	801e56c <__gethex+0x2f0>
 801e546:	9a04      	ldr	r2, [sp, #16]
 801e548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e54c:	6013      	str	r3, [r2, #0]
 801e54e:	2301      	movs	r3, #1
 801e550:	6123      	str	r3, [r4, #16]
 801e552:	f8c9 3000 	str.w	r3, [r9]
 801e556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e558:	2762      	movs	r7, #98	; 0x62
 801e55a:	601c      	str	r4, [r3, #0]
 801e55c:	e723      	b.n	801e3a6 <__gethex+0x12a>
 801e55e:	bf00      	nop
 801e560:	08021d54 	.word	0x08021d54
 801e564:	08021c79 	.word	0x08021c79
 801e568:	08021cec 	.word	0x08021cec
 801e56c:	1e71      	subs	r1, r6, #1
 801e56e:	4620      	mov	r0, r4
 801e570:	f000 feb4 	bl	801f2dc <__any_on>
 801e574:	2800      	cmp	r0, #0
 801e576:	d1e6      	bne.n	801e546 <__gethex+0x2ca>
 801e578:	ee18 0a10 	vmov	r0, s16
 801e57c:	4621      	mov	r1, r4
 801e57e:	f000 fa4d 	bl	801ea1c <_Bfree>
 801e582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e584:	2300      	movs	r3, #0
 801e586:	6013      	str	r3, [r2, #0]
 801e588:	2750      	movs	r7, #80	; 0x50
 801e58a:	e70c      	b.n	801e3a6 <__gethex+0x12a>
 801e58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d1f2      	bne.n	801e578 <__gethex+0x2fc>
 801e592:	e7d8      	b.n	801e546 <__gethex+0x2ca>
 801e594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e596:	2b00      	cmp	r3, #0
 801e598:	d1d5      	bne.n	801e546 <__gethex+0x2ca>
 801e59a:	e7ed      	b.n	801e578 <__gethex+0x2fc>
 801e59c:	1e6f      	subs	r7, r5, #1
 801e59e:	f1ba 0f00 	cmp.w	sl, #0
 801e5a2:	d131      	bne.n	801e608 <__gethex+0x38c>
 801e5a4:	b127      	cbz	r7, 801e5b0 <__gethex+0x334>
 801e5a6:	4639      	mov	r1, r7
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	f000 fe97 	bl	801f2dc <__any_on>
 801e5ae:	4682      	mov	sl, r0
 801e5b0:	117b      	asrs	r3, r7, #5
 801e5b2:	2101      	movs	r1, #1
 801e5b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e5b8:	f007 071f 	and.w	r7, r7, #31
 801e5bc:	fa01 f707 	lsl.w	r7, r1, r7
 801e5c0:	421f      	tst	r7, r3
 801e5c2:	4629      	mov	r1, r5
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	bf18      	it	ne
 801e5c8:	f04a 0a02 	orrne.w	sl, sl, #2
 801e5cc:	1b76      	subs	r6, r6, r5
 801e5ce:	f7ff fdee 	bl	801e1ae <rshift>
 801e5d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e5d6:	2702      	movs	r7, #2
 801e5d8:	f1ba 0f00 	cmp.w	sl, #0
 801e5dc:	d048      	beq.n	801e670 <__gethex+0x3f4>
 801e5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e5e2:	2b02      	cmp	r3, #2
 801e5e4:	d015      	beq.n	801e612 <__gethex+0x396>
 801e5e6:	2b03      	cmp	r3, #3
 801e5e8:	d017      	beq.n	801e61a <__gethex+0x39e>
 801e5ea:	2b01      	cmp	r3, #1
 801e5ec:	d109      	bne.n	801e602 <__gethex+0x386>
 801e5ee:	f01a 0f02 	tst.w	sl, #2
 801e5f2:	d006      	beq.n	801e602 <__gethex+0x386>
 801e5f4:	f8d9 0000 	ldr.w	r0, [r9]
 801e5f8:	ea4a 0a00 	orr.w	sl, sl, r0
 801e5fc:	f01a 0f01 	tst.w	sl, #1
 801e600:	d10e      	bne.n	801e620 <__gethex+0x3a4>
 801e602:	f047 0710 	orr.w	r7, r7, #16
 801e606:	e033      	b.n	801e670 <__gethex+0x3f4>
 801e608:	f04f 0a01 	mov.w	sl, #1
 801e60c:	e7d0      	b.n	801e5b0 <__gethex+0x334>
 801e60e:	2701      	movs	r7, #1
 801e610:	e7e2      	b.n	801e5d8 <__gethex+0x35c>
 801e612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e614:	f1c3 0301 	rsb	r3, r3, #1
 801e618:	9315      	str	r3, [sp, #84]	; 0x54
 801e61a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d0f0      	beq.n	801e602 <__gethex+0x386>
 801e620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e624:	f104 0314 	add.w	r3, r4, #20
 801e628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e62c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e630:	f04f 0c00 	mov.w	ip, #0
 801e634:	4618      	mov	r0, r3
 801e636:	f853 2b04 	ldr.w	r2, [r3], #4
 801e63a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e63e:	d01c      	beq.n	801e67a <__gethex+0x3fe>
 801e640:	3201      	adds	r2, #1
 801e642:	6002      	str	r2, [r0, #0]
 801e644:	2f02      	cmp	r7, #2
 801e646:	f104 0314 	add.w	r3, r4, #20
 801e64a:	d13f      	bne.n	801e6cc <__gethex+0x450>
 801e64c:	f8d8 2000 	ldr.w	r2, [r8]
 801e650:	3a01      	subs	r2, #1
 801e652:	42b2      	cmp	r2, r6
 801e654:	d10a      	bne.n	801e66c <__gethex+0x3f0>
 801e656:	1171      	asrs	r1, r6, #5
 801e658:	2201      	movs	r2, #1
 801e65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e65e:	f006 061f 	and.w	r6, r6, #31
 801e662:	fa02 f606 	lsl.w	r6, r2, r6
 801e666:	421e      	tst	r6, r3
 801e668:	bf18      	it	ne
 801e66a:	4617      	movne	r7, r2
 801e66c:	f047 0720 	orr.w	r7, r7, #32
 801e670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e672:	601c      	str	r4, [r3, #0]
 801e674:	9b04      	ldr	r3, [sp, #16]
 801e676:	601d      	str	r5, [r3, #0]
 801e678:	e695      	b.n	801e3a6 <__gethex+0x12a>
 801e67a:	4299      	cmp	r1, r3
 801e67c:	f843 cc04 	str.w	ip, [r3, #-4]
 801e680:	d8d8      	bhi.n	801e634 <__gethex+0x3b8>
 801e682:	68a3      	ldr	r3, [r4, #8]
 801e684:	459b      	cmp	fp, r3
 801e686:	db19      	blt.n	801e6bc <__gethex+0x440>
 801e688:	6861      	ldr	r1, [r4, #4]
 801e68a:	ee18 0a10 	vmov	r0, s16
 801e68e:	3101      	adds	r1, #1
 801e690:	f000 f984 	bl	801e99c <_Balloc>
 801e694:	4681      	mov	r9, r0
 801e696:	b918      	cbnz	r0, 801e6a0 <__gethex+0x424>
 801e698:	4b1a      	ldr	r3, [pc, #104]	; (801e704 <__gethex+0x488>)
 801e69a:	4602      	mov	r2, r0
 801e69c:	2184      	movs	r1, #132	; 0x84
 801e69e:	e6a8      	b.n	801e3f2 <__gethex+0x176>
 801e6a0:	6922      	ldr	r2, [r4, #16]
 801e6a2:	3202      	adds	r2, #2
 801e6a4:	f104 010c 	add.w	r1, r4, #12
 801e6a8:	0092      	lsls	r2, r2, #2
 801e6aa:	300c      	adds	r0, #12
 801e6ac:	f7fc fc94 	bl	801afd8 <memcpy>
 801e6b0:	4621      	mov	r1, r4
 801e6b2:	ee18 0a10 	vmov	r0, s16
 801e6b6:	f000 f9b1 	bl	801ea1c <_Bfree>
 801e6ba:	464c      	mov	r4, r9
 801e6bc:	6923      	ldr	r3, [r4, #16]
 801e6be:	1c5a      	adds	r2, r3, #1
 801e6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e6c4:	6122      	str	r2, [r4, #16]
 801e6c6:	2201      	movs	r2, #1
 801e6c8:	615a      	str	r2, [r3, #20]
 801e6ca:	e7bb      	b.n	801e644 <__gethex+0x3c8>
 801e6cc:	6922      	ldr	r2, [r4, #16]
 801e6ce:	455a      	cmp	r2, fp
 801e6d0:	dd0b      	ble.n	801e6ea <__gethex+0x46e>
 801e6d2:	2101      	movs	r1, #1
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	f7ff fd6a 	bl	801e1ae <rshift>
 801e6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e6de:	3501      	adds	r5, #1
 801e6e0:	42ab      	cmp	r3, r5
 801e6e2:	f6ff aed0 	blt.w	801e486 <__gethex+0x20a>
 801e6e6:	2701      	movs	r7, #1
 801e6e8:	e7c0      	b.n	801e66c <__gethex+0x3f0>
 801e6ea:	f016 061f 	ands.w	r6, r6, #31
 801e6ee:	d0fa      	beq.n	801e6e6 <__gethex+0x46a>
 801e6f0:	4453      	add	r3, sl
 801e6f2:	f1c6 0620 	rsb	r6, r6, #32
 801e6f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e6fa:	f000 fa41 	bl	801eb80 <__hi0bits>
 801e6fe:	42b0      	cmp	r0, r6
 801e700:	dbe7      	blt.n	801e6d2 <__gethex+0x456>
 801e702:	e7f0      	b.n	801e6e6 <__gethex+0x46a>
 801e704:	08021c79 	.word	0x08021c79

0801e708 <L_shift>:
 801e708:	f1c2 0208 	rsb	r2, r2, #8
 801e70c:	0092      	lsls	r2, r2, #2
 801e70e:	b570      	push	{r4, r5, r6, lr}
 801e710:	f1c2 0620 	rsb	r6, r2, #32
 801e714:	6843      	ldr	r3, [r0, #4]
 801e716:	6804      	ldr	r4, [r0, #0]
 801e718:	fa03 f506 	lsl.w	r5, r3, r6
 801e71c:	432c      	orrs	r4, r5
 801e71e:	40d3      	lsrs	r3, r2
 801e720:	6004      	str	r4, [r0, #0]
 801e722:	f840 3f04 	str.w	r3, [r0, #4]!
 801e726:	4288      	cmp	r0, r1
 801e728:	d3f4      	bcc.n	801e714 <L_shift+0xc>
 801e72a:	bd70      	pop	{r4, r5, r6, pc}

0801e72c <__match>:
 801e72c:	b530      	push	{r4, r5, lr}
 801e72e:	6803      	ldr	r3, [r0, #0]
 801e730:	3301      	adds	r3, #1
 801e732:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e736:	b914      	cbnz	r4, 801e73e <__match+0x12>
 801e738:	6003      	str	r3, [r0, #0]
 801e73a:	2001      	movs	r0, #1
 801e73c:	bd30      	pop	{r4, r5, pc}
 801e73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e746:	2d19      	cmp	r5, #25
 801e748:	bf98      	it	ls
 801e74a:	3220      	addls	r2, #32
 801e74c:	42a2      	cmp	r2, r4
 801e74e:	d0f0      	beq.n	801e732 <__match+0x6>
 801e750:	2000      	movs	r0, #0
 801e752:	e7f3      	b.n	801e73c <__match+0x10>

0801e754 <__hexnan>:
 801e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e758:	680b      	ldr	r3, [r1, #0]
 801e75a:	115e      	asrs	r6, r3, #5
 801e75c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e760:	f013 031f 	ands.w	r3, r3, #31
 801e764:	b087      	sub	sp, #28
 801e766:	bf18      	it	ne
 801e768:	3604      	addne	r6, #4
 801e76a:	2500      	movs	r5, #0
 801e76c:	1f37      	subs	r7, r6, #4
 801e76e:	4690      	mov	r8, r2
 801e770:	6802      	ldr	r2, [r0, #0]
 801e772:	9301      	str	r3, [sp, #4]
 801e774:	4682      	mov	sl, r0
 801e776:	f846 5c04 	str.w	r5, [r6, #-4]
 801e77a:	46b9      	mov	r9, r7
 801e77c:	463c      	mov	r4, r7
 801e77e:	9502      	str	r5, [sp, #8]
 801e780:	46ab      	mov	fp, r5
 801e782:	7851      	ldrb	r1, [r2, #1]
 801e784:	1c53      	adds	r3, r2, #1
 801e786:	9303      	str	r3, [sp, #12]
 801e788:	b341      	cbz	r1, 801e7dc <__hexnan+0x88>
 801e78a:	4608      	mov	r0, r1
 801e78c:	9205      	str	r2, [sp, #20]
 801e78e:	9104      	str	r1, [sp, #16]
 801e790:	f7ff fd5f 	bl	801e252 <__hexdig_fun>
 801e794:	2800      	cmp	r0, #0
 801e796:	d14f      	bne.n	801e838 <__hexnan+0xe4>
 801e798:	9904      	ldr	r1, [sp, #16]
 801e79a:	9a05      	ldr	r2, [sp, #20]
 801e79c:	2920      	cmp	r1, #32
 801e79e:	d818      	bhi.n	801e7d2 <__hexnan+0x7e>
 801e7a0:	9b02      	ldr	r3, [sp, #8]
 801e7a2:	459b      	cmp	fp, r3
 801e7a4:	dd13      	ble.n	801e7ce <__hexnan+0x7a>
 801e7a6:	454c      	cmp	r4, r9
 801e7a8:	d206      	bcs.n	801e7b8 <__hexnan+0x64>
 801e7aa:	2d07      	cmp	r5, #7
 801e7ac:	dc04      	bgt.n	801e7b8 <__hexnan+0x64>
 801e7ae:	462a      	mov	r2, r5
 801e7b0:	4649      	mov	r1, r9
 801e7b2:	4620      	mov	r0, r4
 801e7b4:	f7ff ffa8 	bl	801e708 <L_shift>
 801e7b8:	4544      	cmp	r4, r8
 801e7ba:	d950      	bls.n	801e85e <__hexnan+0x10a>
 801e7bc:	2300      	movs	r3, #0
 801e7be:	f1a4 0904 	sub.w	r9, r4, #4
 801e7c2:	f844 3c04 	str.w	r3, [r4, #-4]
 801e7c6:	f8cd b008 	str.w	fp, [sp, #8]
 801e7ca:	464c      	mov	r4, r9
 801e7cc:	461d      	mov	r5, r3
 801e7ce:	9a03      	ldr	r2, [sp, #12]
 801e7d0:	e7d7      	b.n	801e782 <__hexnan+0x2e>
 801e7d2:	2929      	cmp	r1, #41	; 0x29
 801e7d4:	d156      	bne.n	801e884 <__hexnan+0x130>
 801e7d6:	3202      	adds	r2, #2
 801e7d8:	f8ca 2000 	str.w	r2, [sl]
 801e7dc:	f1bb 0f00 	cmp.w	fp, #0
 801e7e0:	d050      	beq.n	801e884 <__hexnan+0x130>
 801e7e2:	454c      	cmp	r4, r9
 801e7e4:	d206      	bcs.n	801e7f4 <__hexnan+0xa0>
 801e7e6:	2d07      	cmp	r5, #7
 801e7e8:	dc04      	bgt.n	801e7f4 <__hexnan+0xa0>
 801e7ea:	462a      	mov	r2, r5
 801e7ec:	4649      	mov	r1, r9
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f7ff ff8a 	bl	801e708 <L_shift>
 801e7f4:	4544      	cmp	r4, r8
 801e7f6:	d934      	bls.n	801e862 <__hexnan+0x10e>
 801e7f8:	f1a8 0204 	sub.w	r2, r8, #4
 801e7fc:	4623      	mov	r3, r4
 801e7fe:	f853 1b04 	ldr.w	r1, [r3], #4
 801e802:	f842 1f04 	str.w	r1, [r2, #4]!
 801e806:	429f      	cmp	r7, r3
 801e808:	d2f9      	bcs.n	801e7fe <__hexnan+0xaa>
 801e80a:	1b3b      	subs	r3, r7, r4
 801e80c:	f023 0303 	bic.w	r3, r3, #3
 801e810:	3304      	adds	r3, #4
 801e812:	3401      	adds	r4, #1
 801e814:	3e03      	subs	r6, #3
 801e816:	42b4      	cmp	r4, r6
 801e818:	bf88      	it	hi
 801e81a:	2304      	movhi	r3, #4
 801e81c:	4443      	add	r3, r8
 801e81e:	2200      	movs	r2, #0
 801e820:	f843 2b04 	str.w	r2, [r3], #4
 801e824:	429f      	cmp	r7, r3
 801e826:	d2fb      	bcs.n	801e820 <__hexnan+0xcc>
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	b91b      	cbnz	r3, 801e834 <__hexnan+0xe0>
 801e82c:	4547      	cmp	r7, r8
 801e82e:	d127      	bne.n	801e880 <__hexnan+0x12c>
 801e830:	2301      	movs	r3, #1
 801e832:	603b      	str	r3, [r7, #0]
 801e834:	2005      	movs	r0, #5
 801e836:	e026      	b.n	801e886 <__hexnan+0x132>
 801e838:	3501      	adds	r5, #1
 801e83a:	2d08      	cmp	r5, #8
 801e83c:	f10b 0b01 	add.w	fp, fp, #1
 801e840:	dd06      	ble.n	801e850 <__hexnan+0xfc>
 801e842:	4544      	cmp	r4, r8
 801e844:	d9c3      	bls.n	801e7ce <__hexnan+0x7a>
 801e846:	2300      	movs	r3, #0
 801e848:	f844 3c04 	str.w	r3, [r4, #-4]
 801e84c:	2501      	movs	r5, #1
 801e84e:	3c04      	subs	r4, #4
 801e850:	6822      	ldr	r2, [r4, #0]
 801e852:	f000 000f 	and.w	r0, r0, #15
 801e856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e85a:	6022      	str	r2, [r4, #0]
 801e85c:	e7b7      	b.n	801e7ce <__hexnan+0x7a>
 801e85e:	2508      	movs	r5, #8
 801e860:	e7b5      	b.n	801e7ce <__hexnan+0x7a>
 801e862:	9b01      	ldr	r3, [sp, #4]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d0df      	beq.n	801e828 <__hexnan+0xd4>
 801e868:	f04f 32ff 	mov.w	r2, #4294967295
 801e86c:	f1c3 0320 	rsb	r3, r3, #32
 801e870:	fa22 f303 	lsr.w	r3, r2, r3
 801e874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e878:	401a      	ands	r2, r3
 801e87a:	f846 2c04 	str.w	r2, [r6, #-4]
 801e87e:	e7d3      	b.n	801e828 <__hexnan+0xd4>
 801e880:	3f04      	subs	r7, #4
 801e882:	e7d1      	b.n	801e828 <__hexnan+0xd4>
 801e884:	2004      	movs	r0, #4
 801e886:	b007      	add	sp, #28
 801e888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e88c <_localeconv_r>:
 801e88c:	4800      	ldr	r0, [pc, #0]	; (801e890 <_localeconv_r+0x4>)
 801e88e:	4770      	bx	lr
 801e890:	200002d4 	.word	0x200002d4

0801e894 <__swhatbuf_r>:
 801e894:	b570      	push	{r4, r5, r6, lr}
 801e896:	460e      	mov	r6, r1
 801e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e89c:	2900      	cmp	r1, #0
 801e89e:	b096      	sub	sp, #88	; 0x58
 801e8a0:	4614      	mov	r4, r2
 801e8a2:	461d      	mov	r5, r3
 801e8a4:	da08      	bge.n	801e8b8 <__swhatbuf_r+0x24>
 801e8a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e8aa:	2200      	movs	r2, #0
 801e8ac:	602a      	str	r2, [r5, #0]
 801e8ae:	061a      	lsls	r2, r3, #24
 801e8b0:	d410      	bmi.n	801e8d4 <__swhatbuf_r+0x40>
 801e8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e8b6:	e00e      	b.n	801e8d6 <__swhatbuf_r+0x42>
 801e8b8:	466a      	mov	r2, sp
 801e8ba:	f001 f893 	bl	801f9e4 <_fstat_r>
 801e8be:	2800      	cmp	r0, #0
 801e8c0:	dbf1      	blt.n	801e8a6 <__swhatbuf_r+0x12>
 801e8c2:	9a01      	ldr	r2, [sp, #4]
 801e8c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e8c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e8cc:	425a      	negs	r2, r3
 801e8ce:	415a      	adcs	r2, r3
 801e8d0:	602a      	str	r2, [r5, #0]
 801e8d2:	e7ee      	b.n	801e8b2 <__swhatbuf_r+0x1e>
 801e8d4:	2340      	movs	r3, #64	; 0x40
 801e8d6:	2000      	movs	r0, #0
 801e8d8:	6023      	str	r3, [r4, #0]
 801e8da:	b016      	add	sp, #88	; 0x58
 801e8dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e8e0 <__smakebuf_r>:
 801e8e0:	898b      	ldrh	r3, [r1, #12]
 801e8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e8e4:	079d      	lsls	r5, r3, #30
 801e8e6:	4606      	mov	r6, r0
 801e8e8:	460c      	mov	r4, r1
 801e8ea:	d507      	bpl.n	801e8fc <__smakebuf_r+0x1c>
 801e8ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e8f0:	6023      	str	r3, [r4, #0]
 801e8f2:	6123      	str	r3, [r4, #16]
 801e8f4:	2301      	movs	r3, #1
 801e8f6:	6163      	str	r3, [r4, #20]
 801e8f8:	b002      	add	sp, #8
 801e8fa:	bd70      	pop	{r4, r5, r6, pc}
 801e8fc:	ab01      	add	r3, sp, #4
 801e8fe:	466a      	mov	r2, sp
 801e900:	f7ff ffc8 	bl	801e894 <__swhatbuf_r>
 801e904:	9900      	ldr	r1, [sp, #0]
 801e906:	4605      	mov	r5, r0
 801e908:	4630      	mov	r0, r6
 801e90a:	f7fc fc01 	bl	801b110 <_malloc_r>
 801e90e:	b948      	cbnz	r0, 801e924 <__smakebuf_r+0x44>
 801e910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e914:	059a      	lsls	r2, r3, #22
 801e916:	d4ef      	bmi.n	801e8f8 <__smakebuf_r+0x18>
 801e918:	f023 0303 	bic.w	r3, r3, #3
 801e91c:	f043 0302 	orr.w	r3, r3, #2
 801e920:	81a3      	strh	r3, [r4, #12]
 801e922:	e7e3      	b.n	801e8ec <__smakebuf_r+0xc>
 801e924:	4b0d      	ldr	r3, [pc, #52]	; (801e95c <__smakebuf_r+0x7c>)
 801e926:	62b3      	str	r3, [r6, #40]	; 0x28
 801e928:	89a3      	ldrh	r3, [r4, #12]
 801e92a:	6020      	str	r0, [r4, #0]
 801e92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e930:	81a3      	strh	r3, [r4, #12]
 801e932:	9b00      	ldr	r3, [sp, #0]
 801e934:	6163      	str	r3, [r4, #20]
 801e936:	9b01      	ldr	r3, [sp, #4]
 801e938:	6120      	str	r0, [r4, #16]
 801e93a:	b15b      	cbz	r3, 801e954 <__smakebuf_r+0x74>
 801e93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e940:	4630      	mov	r0, r6
 801e942:	f001 f861 	bl	801fa08 <_isatty_r>
 801e946:	b128      	cbz	r0, 801e954 <__smakebuf_r+0x74>
 801e948:	89a3      	ldrh	r3, [r4, #12]
 801e94a:	f023 0303 	bic.w	r3, r3, #3
 801e94e:	f043 0301 	orr.w	r3, r3, #1
 801e952:	81a3      	strh	r3, [r4, #12]
 801e954:	89a0      	ldrh	r0, [r4, #12]
 801e956:	4305      	orrs	r5, r0
 801e958:	81a5      	strh	r5, [r4, #12]
 801e95a:	e7cd      	b.n	801e8f8 <__smakebuf_r+0x18>
 801e95c:	0801dfe9 	.word	0x0801dfe9

0801e960 <__ascii_mbtowc>:
 801e960:	b082      	sub	sp, #8
 801e962:	b901      	cbnz	r1, 801e966 <__ascii_mbtowc+0x6>
 801e964:	a901      	add	r1, sp, #4
 801e966:	b142      	cbz	r2, 801e97a <__ascii_mbtowc+0x1a>
 801e968:	b14b      	cbz	r3, 801e97e <__ascii_mbtowc+0x1e>
 801e96a:	7813      	ldrb	r3, [r2, #0]
 801e96c:	600b      	str	r3, [r1, #0]
 801e96e:	7812      	ldrb	r2, [r2, #0]
 801e970:	1e10      	subs	r0, r2, #0
 801e972:	bf18      	it	ne
 801e974:	2001      	movne	r0, #1
 801e976:	b002      	add	sp, #8
 801e978:	4770      	bx	lr
 801e97a:	4610      	mov	r0, r2
 801e97c:	e7fb      	b.n	801e976 <__ascii_mbtowc+0x16>
 801e97e:	f06f 0001 	mvn.w	r0, #1
 801e982:	e7f8      	b.n	801e976 <__ascii_mbtowc+0x16>

0801e984 <__malloc_lock>:
 801e984:	4801      	ldr	r0, [pc, #4]	; (801e98c <__malloc_lock+0x8>)
 801e986:	f7fc bb1c 	b.w	801afc2 <__retarget_lock_acquire_recursive>
 801e98a:	bf00      	nop
 801e98c:	20003644 	.word	0x20003644

0801e990 <__malloc_unlock>:
 801e990:	4801      	ldr	r0, [pc, #4]	; (801e998 <__malloc_unlock+0x8>)
 801e992:	f7fc bb17 	b.w	801afc4 <__retarget_lock_release_recursive>
 801e996:	bf00      	nop
 801e998:	20003644 	.word	0x20003644

0801e99c <_Balloc>:
 801e99c:	b570      	push	{r4, r5, r6, lr}
 801e99e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e9a0:	4604      	mov	r4, r0
 801e9a2:	460d      	mov	r5, r1
 801e9a4:	b976      	cbnz	r6, 801e9c4 <_Balloc+0x28>
 801e9a6:	2010      	movs	r0, #16
 801e9a8:	f7fc fb0e 	bl	801afc8 <malloc>
 801e9ac:	4602      	mov	r2, r0
 801e9ae:	6260      	str	r0, [r4, #36]	; 0x24
 801e9b0:	b920      	cbnz	r0, 801e9bc <_Balloc+0x20>
 801e9b2:	4b18      	ldr	r3, [pc, #96]	; (801ea14 <_Balloc+0x78>)
 801e9b4:	4818      	ldr	r0, [pc, #96]	; (801ea18 <_Balloc+0x7c>)
 801e9b6:	2166      	movs	r1, #102	; 0x66
 801e9b8:	f7fe fb96 	bl	801d0e8 <__assert_func>
 801e9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e9c0:	6006      	str	r6, [r0, #0]
 801e9c2:	60c6      	str	r6, [r0, #12]
 801e9c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e9c6:	68f3      	ldr	r3, [r6, #12]
 801e9c8:	b183      	cbz	r3, 801e9ec <_Balloc+0x50>
 801e9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9cc:	68db      	ldr	r3, [r3, #12]
 801e9ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e9d2:	b9b8      	cbnz	r0, 801ea04 <_Balloc+0x68>
 801e9d4:	2101      	movs	r1, #1
 801e9d6:	fa01 f605 	lsl.w	r6, r1, r5
 801e9da:	1d72      	adds	r2, r6, #5
 801e9dc:	0092      	lsls	r2, r2, #2
 801e9de:	4620      	mov	r0, r4
 801e9e0:	f000 fc9d 	bl	801f31e <_calloc_r>
 801e9e4:	b160      	cbz	r0, 801ea00 <_Balloc+0x64>
 801e9e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e9ea:	e00e      	b.n	801ea0a <_Balloc+0x6e>
 801e9ec:	2221      	movs	r2, #33	; 0x21
 801e9ee:	2104      	movs	r1, #4
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f000 fc94 	bl	801f31e <_calloc_r>
 801e9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9f8:	60f0      	str	r0, [r6, #12]
 801e9fa:	68db      	ldr	r3, [r3, #12]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d1e4      	bne.n	801e9ca <_Balloc+0x2e>
 801ea00:	2000      	movs	r0, #0
 801ea02:	bd70      	pop	{r4, r5, r6, pc}
 801ea04:	6802      	ldr	r2, [r0, #0]
 801ea06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ea10:	e7f7      	b.n	801ea02 <_Balloc+0x66>
 801ea12:	bf00      	nop
 801ea14:	08021a60 	.word	0x08021a60
 801ea18:	08021d68 	.word	0x08021d68

0801ea1c <_Bfree>:
 801ea1c:	b570      	push	{r4, r5, r6, lr}
 801ea1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ea20:	4605      	mov	r5, r0
 801ea22:	460c      	mov	r4, r1
 801ea24:	b976      	cbnz	r6, 801ea44 <_Bfree+0x28>
 801ea26:	2010      	movs	r0, #16
 801ea28:	f7fc face 	bl	801afc8 <malloc>
 801ea2c:	4602      	mov	r2, r0
 801ea2e:	6268      	str	r0, [r5, #36]	; 0x24
 801ea30:	b920      	cbnz	r0, 801ea3c <_Bfree+0x20>
 801ea32:	4b09      	ldr	r3, [pc, #36]	; (801ea58 <_Bfree+0x3c>)
 801ea34:	4809      	ldr	r0, [pc, #36]	; (801ea5c <_Bfree+0x40>)
 801ea36:	218a      	movs	r1, #138	; 0x8a
 801ea38:	f7fe fb56 	bl	801d0e8 <__assert_func>
 801ea3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ea40:	6006      	str	r6, [r0, #0]
 801ea42:	60c6      	str	r6, [r0, #12]
 801ea44:	b13c      	cbz	r4, 801ea56 <_Bfree+0x3a>
 801ea46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ea48:	6862      	ldr	r2, [r4, #4]
 801ea4a:	68db      	ldr	r3, [r3, #12]
 801ea4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ea50:	6021      	str	r1, [r4, #0]
 801ea52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ea56:	bd70      	pop	{r4, r5, r6, pc}
 801ea58:	08021a60 	.word	0x08021a60
 801ea5c:	08021d68 	.word	0x08021d68

0801ea60 <__multadd>:
 801ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea64:	690d      	ldr	r5, [r1, #16]
 801ea66:	4607      	mov	r7, r0
 801ea68:	460c      	mov	r4, r1
 801ea6a:	461e      	mov	r6, r3
 801ea6c:	f101 0c14 	add.w	ip, r1, #20
 801ea70:	2000      	movs	r0, #0
 801ea72:	f8dc 3000 	ldr.w	r3, [ip]
 801ea76:	b299      	uxth	r1, r3
 801ea78:	fb02 6101 	mla	r1, r2, r1, r6
 801ea7c:	0c1e      	lsrs	r6, r3, #16
 801ea7e:	0c0b      	lsrs	r3, r1, #16
 801ea80:	fb02 3306 	mla	r3, r2, r6, r3
 801ea84:	b289      	uxth	r1, r1
 801ea86:	3001      	adds	r0, #1
 801ea88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ea8c:	4285      	cmp	r5, r0
 801ea8e:	f84c 1b04 	str.w	r1, [ip], #4
 801ea92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ea96:	dcec      	bgt.n	801ea72 <__multadd+0x12>
 801ea98:	b30e      	cbz	r6, 801eade <__multadd+0x7e>
 801ea9a:	68a3      	ldr	r3, [r4, #8]
 801ea9c:	42ab      	cmp	r3, r5
 801ea9e:	dc19      	bgt.n	801ead4 <__multadd+0x74>
 801eaa0:	6861      	ldr	r1, [r4, #4]
 801eaa2:	4638      	mov	r0, r7
 801eaa4:	3101      	adds	r1, #1
 801eaa6:	f7ff ff79 	bl	801e99c <_Balloc>
 801eaaa:	4680      	mov	r8, r0
 801eaac:	b928      	cbnz	r0, 801eaba <__multadd+0x5a>
 801eaae:	4602      	mov	r2, r0
 801eab0:	4b0c      	ldr	r3, [pc, #48]	; (801eae4 <__multadd+0x84>)
 801eab2:	480d      	ldr	r0, [pc, #52]	; (801eae8 <__multadd+0x88>)
 801eab4:	21b5      	movs	r1, #181	; 0xb5
 801eab6:	f7fe fb17 	bl	801d0e8 <__assert_func>
 801eaba:	6922      	ldr	r2, [r4, #16]
 801eabc:	3202      	adds	r2, #2
 801eabe:	f104 010c 	add.w	r1, r4, #12
 801eac2:	0092      	lsls	r2, r2, #2
 801eac4:	300c      	adds	r0, #12
 801eac6:	f7fc fa87 	bl	801afd8 <memcpy>
 801eaca:	4621      	mov	r1, r4
 801eacc:	4638      	mov	r0, r7
 801eace:	f7ff ffa5 	bl	801ea1c <_Bfree>
 801ead2:	4644      	mov	r4, r8
 801ead4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ead8:	3501      	adds	r5, #1
 801eada:	615e      	str	r6, [r3, #20]
 801eadc:	6125      	str	r5, [r4, #16]
 801eade:	4620      	mov	r0, r4
 801eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eae4:	08021c79 	.word	0x08021c79
 801eae8:	08021d68 	.word	0x08021d68

0801eaec <__s2b>:
 801eaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eaf0:	460c      	mov	r4, r1
 801eaf2:	4615      	mov	r5, r2
 801eaf4:	461f      	mov	r7, r3
 801eaf6:	2209      	movs	r2, #9
 801eaf8:	3308      	adds	r3, #8
 801eafa:	4606      	mov	r6, r0
 801eafc:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb00:	2100      	movs	r1, #0
 801eb02:	2201      	movs	r2, #1
 801eb04:	429a      	cmp	r2, r3
 801eb06:	db09      	blt.n	801eb1c <__s2b+0x30>
 801eb08:	4630      	mov	r0, r6
 801eb0a:	f7ff ff47 	bl	801e99c <_Balloc>
 801eb0e:	b940      	cbnz	r0, 801eb22 <__s2b+0x36>
 801eb10:	4602      	mov	r2, r0
 801eb12:	4b19      	ldr	r3, [pc, #100]	; (801eb78 <__s2b+0x8c>)
 801eb14:	4819      	ldr	r0, [pc, #100]	; (801eb7c <__s2b+0x90>)
 801eb16:	21ce      	movs	r1, #206	; 0xce
 801eb18:	f7fe fae6 	bl	801d0e8 <__assert_func>
 801eb1c:	0052      	lsls	r2, r2, #1
 801eb1e:	3101      	adds	r1, #1
 801eb20:	e7f0      	b.n	801eb04 <__s2b+0x18>
 801eb22:	9b08      	ldr	r3, [sp, #32]
 801eb24:	6143      	str	r3, [r0, #20]
 801eb26:	2d09      	cmp	r5, #9
 801eb28:	f04f 0301 	mov.w	r3, #1
 801eb2c:	6103      	str	r3, [r0, #16]
 801eb2e:	dd16      	ble.n	801eb5e <__s2b+0x72>
 801eb30:	f104 0909 	add.w	r9, r4, #9
 801eb34:	46c8      	mov	r8, r9
 801eb36:	442c      	add	r4, r5
 801eb38:	f818 3b01 	ldrb.w	r3, [r8], #1
 801eb3c:	4601      	mov	r1, r0
 801eb3e:	3b30      	subs	r3, #48	; 0x30
 801eb40:	220a      	movs	r2, #10
 801eb42:	4630      	mov	r0, r6
 801eb44:	f7ff ff8c 	bl	801ea60 <__multadd>
 801eb48:	45a0      	cmp	r8, r4
 801eb4a:	d1f5      	bne.n	801eb38 <__s2b+0x4c>
 801eb4c:	f1a5 0408 	sub.w	r4, r5, #8
 801eb50:	444c      	add	r4, r9
 801eb52:	1b2d      	subs	r5, r5, r4
 801eb54:	1963      	adds	r3, r4, r5
 801eb56:	42bb      	cmp	r3, r7
 801eb58:	db04      	blt.n	801eb64 <__s2b+0x78>
 801eb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb5e:	340a      	adds	r4, #10
 801eb60:	2509      	movs	r5, #9
 801eb62:	e7f6      	b.n	801eb52 <__s2b+0x66>
 801eb64:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eb68:	4601      	mov	r1, r0
 801eb6a:	3b30      	subs	r3, #48	; 0x30
 801eb6c:	220a      	movs	r2, #10
 801eb6e:	4630      	mov	r0, r6
 801eb70:	f7ff ff76 	bl	801ea60 <__multadd>
 801eb74:	e7ee      	b.n	801eb54 <__s2b+0x68>
 801eb76:	bf00      	nop
 801eb78:	08021c79 	.word	0x08021c79
 801eb7c:	08021d68 	.word	0x08021d68

0801eb80 <__hi0bits>:
 801eb80:	0c03      	lsrs	r3, r0, #16
 801eb82:	041b      	lsls	r3, r3, #16
 801eb84:	b9d3      	cbnz	r3, 801ebbc <__hi0bits+0x3c>
 801eb86:	0400      	lsls	r0, r0, #16
 801eb88:	2310      	movs	r3, #16
 801eb8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801eb8e:	bf04      	itt	eq
 801eb90:	0200      	lsleq	r0, r0, #8
 801eb92:	3308      	addeq	r3, #8
 801eb94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801eb98:	bf04      	itt	eq
 801eb9a:	0100      	lsleq	r0, r0, #4
 801eb9c:	3304      	addeq	r3, #4
 801eb9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801eba2:	bf04      	itt	eq
 801eba4:	0080      	lsleq	r0, r0, #2
 801eba6:	3302      	addeq	r3, #2
 801eba8:	2800      	cmp	r0, #0
 801ebaa:	db05      	blt.n	801ebb8 <__hi0bits+0x38>
 801ebac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ebb0:	f103 0301 	add.w	r3, r3, #1
 801ebb4:	bf08      	it	eq
 801ebb6:	2320      	moveq	r3, #32
 801ebb8:	4618      	mov	r0, r3
 801ebba:	4770      	bx	lr
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	e7e4      	b.n	801eb8a <__hi0bits+0xa>

0801ebc0 <__lo0bits>:
 801ebc0:	6803      	ldr	r3, [r0, #0]
 801ebc2:	f013 0207 	ands.w	r2, r3, #7
 801ebc6:	4601      	mov	r1, r0
 801ebc8:	d00b      	beq.n	801ebe2 <__lo0bits+0x22>
 801ebca:	07da      	lsls	r2, r3, #31
 801ebcc:	d423      	bmi.n	801ec16 <__lo0bits+0x56>
 801ebce:	0798      	lsls	r0, r3, #30
 801ebd0:	bf49      	itett	mi
 801ebd2:	085b      	lsrmi	r3, r3, #1
 801ebd4:	089b      	lsrpl	r3, r3, #2
 801ebd6:	2001      	movmi	r0, #1
 801ebd8:	600b      	strmi	r3, [r1, #0]
 801ebda:	bf5c      	itt	pl
 801ebdc:	600b      	strpl	r3, [r1, #0]
 801ebde:	2002      	movpl	r0, #2
 801ebe0:	4770      	bx	lr
 801ebe2:	b298      	uxth	r0, r3
 801ebe4:	b9a8      	cbnz	r0, 801ec12 <__lo0bits+0x52>
 801ebe6:	0c1b      	lsrs	r3, r3, #16
 801ebe8:	2010      	movs	r0, #16
 801ebea:	b2da      	uxtb	r2, r3
 801ebec:	b90a      	cbnz	r2, 801ebf2 <__lo0bits+0x32>
 801ebee:	3008      	adds	r0, #8
 801ebf0:	0a1b      	lsrs	r3, r3, #8
 801ebf2:	071a      	lsls	r2, r3, #28
 801ebf4:	bf04      	itt	eq
 801ebf6:	091b      	lsreq	r3, r3, #4
 801ebf8:	3004      	addeq	r0, #4
 801ebfa:	079a      	lsls	r2, r3, #30
 801ebfc:	bf04      	itt	eq
 801ebfe:	089b      	lsreq	r3, r3, #2
 801ec00:	3002      	addeq	r0, #2
 801ec02:	07da      	lsls	r2, r3, #31
 801ec04:	d403      	bmi.n	801ec0e <__lo0bits+0x4e>
 801ec06:	085b      	lsrs	r3, r3, #1
 801ec08:	f100 0001 	add.w	r0, r0, #1
 801ec0c:	d005      	beq.n	801ec1a <__lo0bits+0x5a>
 801ec0e:	600b      	str	r3, [r1, #0]
 801ec10:	4770      	bx	lr
 801ec12:	4610      	mov	r0, r2
 801ec14:	e7e9      	b.n	801ebea <__lo0bits+0x2a>
 801ec16:	2000      	movs	r0, #0
 801ec18:	4770      	bx	lr
 801ec1a:	2020      	movs	r0, #32
 801ec1c:	4770      	bx	lr
	...

0801ec20 <__i2b>:
 801ec20:	b510      	push	{r4, lr}
 801ec22:	460c      	mov	r4, r1
 801ec24:	2101      	movs	r1, #1
 801ec26:	f7ff feb9 	bl	801e99c <_Balloc>
 801ec2a:	4602      	mov	r2, r0
 801ec2c:	b928      	cbnz	r0, 801ec3a <__i2b+0x1a>
 801ec2e:	4b05      	ldr	r3, [pc, #20]	; (801ec44 <__i2b+0x24>)
 801ec30:	4805      	ldr	r0, [pc, #20]	; (801ec48 <__i2b+0x28>)
 801ec32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ec36:	f7fe fa57 	bl	801d0e8 <__assert_func>
 801ec3a:	2301      	movs	r3, #1
 801ec3c:	6144      	str	r4, [r0, #20]
 801ec3e:	6103      	str	r3, [r0, #16]
 801ec40:	bd10      	pop	{r4, pc}
 801ec42:	bf00      	nop
 801ec44:	08021c79 	.word	0x08021c79
 801ec48:	08021d68 	.word	0x08021d68

0801ec4c <__multiply>:
 801ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec50:	4691      	mov	r9, r2
 801ec52:	690a      	ldr	r2, [r1, #16]
 801ec54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ec58:	429a      	cmp	r2, r3
 801ec5a:	bfb8      	it	lt
 801ec5c:	460b      	movlt	r3, r1
 801ec5e:	460c      	mov	r4, r1
 801ec60:	bfbc      	itt	lt
 801ec62:	464c      	movlt	r4, r9
 801ec64:	4699      	movlt	r9, r3
 801ec66:	6927      	ldr	r7, [r4, #16]
 801ec68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ec6c:	68a3      	ldr	r3, [r4, #8]
 801ec6e:	6861      	ldr	r1, [r4, #4]
 801ec70:	eb07 060a 	add.w	r6, r7, sl
 801ec74:	42b3      	cmp	r3, r6
 801ec76:	b085      	sub	sp, #20
 801ec78:	bfb8      	it	lt
 801ec7a:	3101      	addlt	r1, #1
 801ec7c:	f7ff fe8e 	bl	801e99c <_Balloc>
 801ec80:	b930      	cbnz	r0, 801ec90 <__multiply+0x44>
 801ec82:	4602      	mov	r2, r0
 801ec84:	4b44      	ldr	r3, [pc, #272]	; (801ed98 <__multiply+0x14c>)
 801ec86:	4845      	ldr	r0, [pc, #276]	; (801ed9c <__multiply+0x150>)
 801ec88:	f240 115d 	movw	r1, #349	; 0x15d
 801ec8c:	f7fe fa2c 	bl	801d0e8 <__assert_func>
 801ec90:	f100 0514 	add.w	r5, r0, #20
 801ec94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ec98:	462b      	mov	r3, r5
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	4543      	cmp	r3, r8
 801ec9e:	d321      	bcc.n	801ece4 <__multiply+0x98>
 801eca0:	f104 0314 	add.w	r3, r4, #20
 801eca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801eca8:	f109 0314 	add.w	r3, r9, #20
 801ecac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ecb0:	9202      	str	r2, [sp, #8]
 801ecb2:	1b3a      	subs	r2, r7, r4
 801ecb4:	3a15      	subs	r2, #21
 801ecb6:	f022 0203 	bic.w	r2, r2, #3
 801ecba:	3204      	adds	r2, #4
 801ecbc:	f104 0115 	add.w	r1, r4, #21
 801ecc0:	428f      	cmp	r7, r1
 801ecc2:	bf38      	it	cc
 801ecc4:	2204      	movcc	r2, #4
 801ecc6:	9201      	str	r2, [sp, #4]
 801ecc8:	9a02      	ldr	r2, [sp, #8]
 801ecca:	9303      	str	r3, [sp, #12]
 801eccc:	429a      	cmp	r2, r3
 801ecce:	d80c      	bhi.n	801ecea <__multiply+0x9e>
 801ecd0:	2e00      	cmp	r6, #0
 801ecd2:	dd03      	ble.n	801ecdc <__multiply+0x90>
 801ecd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d05a      	beq.n	801ed92 <__multiply+0x146>
 801ecdc:	6106      	str	r6, [r0, #16]
 801ecde:	b005      	add	sp, #20
 801ece0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ece4:	f843 2b04 	str.w	r2, [r3], #4
 801ece8:	e7d8      	b.n	801ec9c <__multiply+0x50>
 801ecea:	f8b3 a000 	ldrh.w	sl, [r3]
 801ecee:	f1ba 0f00 	cmp.w	sl, #0
 801ecf2:	d024      	beq.n	801ed3e <__multiply+0xf2>
 801ecf4:	f104 0e14 	add.w	lr, r4, #20
 801ecf8:	46a9      	mov	r9, r5
 801ecfa:	f04f 0c00 	mov.w	ip, #0
 801ecfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ed02:	f8d9 1000 	ldr.w	r1, [r9]
 801ed06:	fa1f fb82 	uxth.w	fp, r2
 801ed0a:	b289      	uxth	r1, r1
 801ed0c:	fb0a 110b 	mla	r1, sl, fp, r1
 801ed10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ed14:	f8d9 2000 	ldr.w	r2, [r9]
 801ed18:	4461      	add	r1, ip
 801ed1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed1e:	fb0a c20b 	mla	r2, sl, fp, ip
 801ed22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ed26:	b289      	uxth	r1, r1
 801ed28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ed2c:	4577      	cmp	r7, lr
 801ed2e:	f849 1b04 	str.w	r1, [r9], #4
 801ed32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed36:	d8e2      	bhi.n	801ecfe <__multiply+0xb2>
 801ed38:	9a01      	ldr	r2, [sp, #4]
 801ed3a:	f845 c002 	str.w	ip, [r5, r2]
 801ed3e:	9a03      	ldr	r2, [sp, #12]
 801ed40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ed44:	3304      	adds	r3, #4
 801ed46:	f1b9 0f00 	cmp.w	r9, #0
 801ed4a:	d020      	beq.n	801ed8e <__multiply+0x142>
 801ed4c:	6829      	ldr	r1, [r5, #0]
 801ed4e:	f104 0c14 	add.w	ip, r4, #20
 801ed52:	46ae      	mov	lr, r5
 801ed54:	f04f 0a00 	mov.w	sl, #0
 801ed58:	f8bc b000 	ldrh.w	fp, [ip]
 801ed5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ed60:	fb09 220b 	mla	r2, r9, fp, r2
 801ed64:	4492      	add	sl, r2
 801ed66:	b289      	uxth	r1, r1
 801ed68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ed6c:	f84e 1b04 	str.w	r1, [lr], #4
 801ed70:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ed74:	f8be 1000 	ldrh.w	r1, [lr]
 801ed78:	0c12      	lsrs	r2, r2, #16
 801ed7a:	fb09 1102 	mla	r1, r9, r2, r1
 801ed7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ed82:	4567      	cmp	r7, ip
 801ed84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ed88:	d8e6      	bhi.n	801ed58 <__multiply+0x10c>
 801ed8a:	9a01      	ldr	r2, [sp, #4]
 801ed8c:	50a9      	str	r1, [r5, r2]
 801ed8e:	3504      	adds	r5, #4
 801ed90:	e79a      	b.n	801ecc8 <__multiply+0x7c>
 801ed92:	3e01      	subs	r6, #1
 801ed94:	e79c      	b.n	801ecd0 <__multiply+0x84>
 801ed96:	bf00      	nop
 801ed98:	08021c79 	.word	0x08021c79
 801ed9c:	08021d68 	.word	0x08021d68

0801eda0 <__pow5mult>:
 801eda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eda4:	4615      	mov	r5, r2
 801eda6:	f012 0203 	ands.w	r2, r2, #3
 801edaa:	4606      	mov	r6, r0
 801edac:	460f      	mov	r7, r1
 801edae:	d007      	beq.n	801edc0 <__pow5mult+0x20>
 801edb0:	4c25      	ldr	r4, [pc, #148]	; (801ee48 <__pow5mult+0xa8>)
 801edb2:	3a01      	subs	r2, #1
 801edb4:	2300      	movs	r3, #0
 801edb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801edba:	f7ff fe51 	bl	801ea60 <__multadd>
 801edbe:	4607      	mov	r7, r0
 801edc0:	10ad      	asrs	r5, r5, #2
 801edc2:	d03d      	beq.n	801ee40 <__pow5mult+0xa0>
 801edc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801edc6:	b97c      	cbnz	r4, 801ede8 <__pow5mult+0x48>
 801edc8:	2010      	movs	r0, #16
 801edca:	f7fc f8fd 	bl	801afc8 <malloc>
 801edce:	4602      	mov	r2, r0
 801edd0:	6270      	str	r0, [r6, #36]	; 0x24
 801edd2:	b928      	cbnz	r0, 801ede0 <__pow5mult+0x40>
 801edd4:	4b1d      	ldr	r3, [pc, #116]	; (801ee4c <__pow5mult+0xac>)
 801edd6:	481e      	ldr	r0, [pc, #120]	; (801ee50 <__pow5mult+0xb0>)
 801edd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801eddc:	f7fe f984 	bl	801d0e8 <__assert_func>
 801ede0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ede4:	6004      	str	r4, [r0, #0]
 801ede6:	60c4      	str	r4, [r0, #12]
 801ede8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801edec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801edf0:	b94c      	cbnz	r4, 801ee06 <__pow5mult+0x66>
 801edf2:	f240 2171 	movw	r1, #625	; 0x271
 801edf6:	4630      	mov	r0, r6
 801edf8:	f7ff ff12 	bl	801ec20 <__i2b>
 801edfc:	2300      	movs	r3, #0
 801edfe:	f8c8 0008 	str.w	r0, [r8, #8]
 801ee02:	4604      	mov	r4, r0
 801ee04:	6003      	str	r3, [r0, #0]
 801ee06:	f04f 0900 	mov.w	r9, #0
 801ee0a:	07eb      	lsls	r3, r5, #31
 801ee0c:	d50a      	bpl.n	801ee24 <__pow5mult+0x84>
 801ee0e:	4639      	mov	r1, r7
 801ee10:	4622      	mov	r2, r4
 801ee12:	4630      	mov	r0, r6
 801ee14:	f7ff ff1a 	bl	801ec4c <__multiply>
 801ee18:	4639      	mov	r1, r7
 801ee1a:	4680      	mov	r8, r0
 801ee1c:	4630      	mov	r0, r6
 801ee1e:	f7ff fdfd 	bl	801ea1c <_Bfree>
 801ee22:	4647      	mov	r7, r8
 801ee24:	106d      	asrs	r5, r5, #1
 801ee26:	d00b      	beq.n	801ee40 <__pow5mult+0xa0>
 801ee28:	6820      	ldr	r0, [r4, #0]
 801ee2a:	b938      	cbnz	r0, 801ee3c <__pow5mult+0x9c>
 801ee2c:	4622      	mov	r2, r4
 801ee2e:	4621      	mov	r1, r4
 801ee30:	4630      	mov	r0, r6
 801ee32:	f7ff ff0b 	bl	801ec4c <__multiply>
 801ee36:	6020      	str	r0, [r4, #0]
 801ee38:	f8c0 9000 	str.w	r9, [r0]
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	e7e4      	b.n	801ee0a <__pow5mult+0x6a>
 801ee40:	4638      	mov	r0, r7
 801ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee46:	bf00      	nop
 801ee48:	08021eb8 	.word	0x08021eb8
 801ee4c:	08021a60 	.word	0x08021a60
 801ee50:	08021d68 	.word	0x08021d68

0801ee54 <__lshift>:
 801ee54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee58:	460c      	mov	r4, r1
 801ee5a:	6849      	ldr	r1, [r1, #4]
 801ee5c:	6923      	ldr	r3, [r4, #16]
 801ee5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ee62:	68a3      	ldr	r3, [r4, #8]
 801ee64:	4607      	mov	r7, r0
 801ee66:	4691      	mov	r9, r2
 801ee68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ee6c:	f108 0601 	add.w	r6, r8, #1
 801ee70:	42b3      	cmp	r3, r6
 801ee72:	db0b      	blt.n	801ee8c <__lshift+0x38>
 801ee74:	4638      	mov	r0, r7
 801ee76:	f7ff fd91 	bl	801e99c <_Balloc>
 801ee7a:	4605      	mov	r5, r0
 801ee7c:	b948      	cbnz	r0, 801ee92 <__lshift+0x3e>
 801ee7e:	4602      	mov	r2, r0
 801ee80:	4b2a      	ldr	r3, [pc, #168]	; (801ef2c <__lshift+0xd8>)
 801ee82:	482b      	ldr	r0, [pc, #172]	; (801ef30 <__lshift+0xdc>)
 801ee84:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ee88:	f7fe f92e 	bl	801d0e8 <__assert_func>
 801ee8c:	3101      	adds	r1, #1
 801ee8e:	005b      	lsls	r3, r3, #1
 801ee90:	e7ee      	b.n	801ee70 <__lshift+0x1c>
 801ee92:	2300      	movs	r3, #0
 801ee94:	f100 0114 	add.w	r1, r0, #20
 801ee98:	f100 0210 	add.w	r2, r0, #16
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	4553      	cmp	r3, sl
 801eea0:	db37      	blt.n	801ef12 <__lshift+0xbe>
 801eea2:	6920      	ldr	r0, [r4, #16]
 801eea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eea8:	f104 0314 	add.w	r3, r4, #20
 801eeac:	f019 091f 	ands.w	r9, r9, #31
 801eeb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eeb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801eeb8:	d02f      	beq.n	801ef1a <__lshift+0xc6>
 801eeba:	f1c9 0e20 	rsb	lr, r9, #32
 801eebe:	468a      	mov	sl, r1
 801eec0:	f04f 0c00 	mov.w	ip, #0
 801eec4:	681a      	ldr	r2, [r3, #0]
 801eec6:	fa02 f209 	lsl.w	r2, r2, r9
 801eeca:	ea42 020c 	orr.w	r2, r2, ip
 801eece:	f84a 2b04 	str.w	r2, [sl], #4
 801eed2:	f853 2b04 	ldr.w	r2, [r3], #4
 801eed6:	4298      	cmp	r0, r3
 801eed8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801eedc:	d8f2      	bhi.n	801eec4 <__lshift+0x70>
 801eede:	1b03      	subs	r3, r0, r4
 801eee0:	3b15      	subs	r3, #21
 801eee2:	f023 0303 	bic.w	r3, r3, #3
 801eee6:	3304      	adds	r3, #4
 801eee8:	f104 0215 	add.w	r2, r4, #21
 801eeec:	4290      	cmp	r0, r2
 801eeee:	bf38      	it	cc
 801eef0:	2304      	movcc	r3, #4
 801eef2:	f841 c003 	str.w	ip, [r1, r3]
 801eef6:	f1bc 0f00 	cmp.w	ip, #0
 801eefa:	d001      	beq.n	801ef00 <__lshift+0xac>
 801eefc:	f108 0602 	add.w	r6, r8, #2
 801ef00:	3e01      	subs	r6, #1
 801ef02:	4638      	mov	r0, r7
 801ef04:	612e      	str	r6, [r5, #16]
 801ef06:	4621      	mov	r1, r4
 801ef08:	f7ff fd88 	bl	801ea1c <_Bfree>
 801ef0c:	4628      	mov	r0, r5
 801ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef12:	f842 0f04 	str.w	r0, [r2, #4]!
 801ef16:	3301      	adds	r3, #1
 801ef18:	e7c1      	b.n	801ee9e <__lshift+0x4a>
 801ef1a:	3904      	subs	r1, #4
 801ef1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef20:	f841 2f04 	str.w	r2, [r1, #4]!
 801ef24:	4298      	cmp	r0, r3
 801ef26:	d8f9      	bhi.n	801ef1c <__lshift+0xc8>
 801ef28:	e7ea      	b.n	801ef00 <__lshift+0xac>
 801ef2a:	bf00      	nop
 801ef2c:	08021c79 	.word	0x08021c79
 801ef30:	08021d68 	.word	0x08021d68

0801ef34 <__mcmp>:
 801ef34:	b530      	push	{r4, r5, lr}
 801ef36:	6902      	ldr	r2, [r0, #16]
 801ef38:	690c      	ldr	r4, [r1, #16]
 801ef3a:	1b12      	subs	r2, r2, r4
 801ef3c:	d10e      	bne.n	801ef5c <__mcmp+0x28>
 801ef3e:	f100 0314 	add.w	r3, r0, #20
 801ef42:	3114      	adds	r1, #20
 801ef44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ef48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ef4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ef50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ef54:	42a5      	cmp	r5, r4
 801ef56:	d003      	beq.n	801ef60 <__mcmp+0x2c>
 801ef58:	d305      	bcc.n	801ef66 <__mcmp+0x32>
 801ef5a:	2201      	movs	r2, #1
 801ef5c:	4610      	mov	r0, r2
 801ef5e:	bd30      	pop	{r4, r5, pc}
 801ef60:	4283      	cmp	r3, r0
 801ef62:	d3f3      	bcc.n	801ef4c <__mcmp+0x18>
 801ef64:	e7fa      	b.n	801ef5c <__mcmp+0x28>
 801ef66:	f04f 32ff 	mov.w	r2, #4294967295
 801ef6a:	e7f7      	b.n	801ef5c <__mcmp+0x28>

0801ef6c <__mdiff>:
 801ef6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef70:	460c      	mov	r4, r1
 801ef72:	4606      	mov	r6, r0
 801ef74:	4611      	mov	r1, r2
 801ef76:	4620      	mov	r0, r4
 801ef78:	4690      	mov	r8, r2
 801ef7a:	f7ff ffdb 	bl	801ef34 <__mcmp>
 801ef7e:	1e05      	subs	r5, r0, #0
 801ef80:	d110      	bne.n	801efa4 <__mdiff+0x38>
 801ef82:	4629      	mov	r1, r5
 801ef84:	4630      	mov	r0, r6
 801ef86:	f7ff fd09 	bl	801e99c <_Balloc>
 801ef8a:	b930      	cbnz	r0, 801ef9a <__mdiff+0x2e>
 801ef8c:	4b3a      	ldr	r3, [pc, #232]	; (801f078 <__mdiff+0x10c>)
 801ef8e:	4602      	mov	r2, r0
 801ef90:	f240 2132 	movw	r1, #562	; 0x232
 801ef94:	4839      	ldr	r0, [pc, #228]	; (801f07c <__mdiff+0x110>)
 801ef96:	f7fe f8a7 	bl	801d0e8 <__assert_func>
 801ef9a:	2301      	movs	r3, #1
 801ef9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801efa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efa4:	bfa4      	itt	ge
 801efa6:	4643      	movge	r3, r8
 801efa8:	46a0      	movge	r8, r4
 801efaa:	4630      	mov	r0, r6
 801efac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801efb0:	bfa6      	itte	ge
 801efb2:	461c      	movge	r4, r3
 801efb4:	2500      	movge	r5, #0
 801efb6:	2501      	movlt	r5, #1
 801efb8:	f7ff fcf0 	bl	801e99c <_Balloc>
 801efbc:	b920      	cbnz	r0, 801efc8 <__mdiff+0x5c>
 801efbe:	4b2e      	ldr	r3, [pc, #184]	; (801f078 <__mdiff+0x10c>)
 801efc0:	4602      	mov	r2, r0
 801efc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801efc6:	e7e5      	b.n	801ef94 <__mdiff+0x28>
 801efc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801efcc:	6926      	ldr	r6, [r4, #16]
 801efce:	60c5      	str	r5, [r0, #12]
 801efd0:	f104 0914 	add.w	r9, r4, #20
 801efd4:	f108 0514 	add.w	r5, r8, #20
 801efd8:	f100 0e14 	add.w	lr, r0, #20
 801efdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801efe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801efe4:	f108 0210 	add.w	r2, r8, #16
 801efe8:	46f2      	mov	sl, lr
 801efea:	2100      	movs	r1, #0
 801efec:	f859 3b04 	ldr.w	r3, [r9], #4
 801eff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801eff4:	fa1f f883 	uxth.w	r8, r3
 801eff8:	fa11 f18b 	uxtah	r1, r1, fp
 801effc:	0c1b      	lsrs	r3, r3, #16
 801effe:	eba1 0808 	sub.w	r8, r1, r8
 801f002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f00a:	fa1f f888 	uxth.w	r8, r8
 801f00e:	1419      	asrs	r1, r3, #16
 801f010:	454e      	cmp	r6, r9
 801f012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f016:	f84a 3b04 	str.w	r3, [sl], #4
 801f01a:	d8e7      	bhi.n	801efec <__mdiff+0x80>
 801f01c:	1b33      	subs	r3, r6, r4
 801f01e:	3b15      	subs	r3, #21
 801f020:	f023 0303 	bic.w	r3, r3, #3
 801f024:	3304      	adds	r3, #4
 801f026:	3415      	adds	r4, #21
 801f028:	42a6      	cmp	r6, r4
 801f02a:	bf38      	it	cc
 801f02c:	2304      	movcc	r3, #4
 801f02e:	441d      	add	r5, r3
 801f030:	4473      	add	r3, lr
 801f032:	469e      	mov	lr, r3
 801f034:	462e      	mov	r6, r5
 801f036:	4566      	cmp	r6, ip
 801f038:	d30e      	bcc.n	801f058 <__mdiff+0xec>
 801f03a:	f10c 0203 	add.w	r2, ip, #3
 801f03e:	1b52      	subs	r2, r2, r5
 801f040:	f022 0203 	bic.w	r2, r2, #3
 801f044:	3d03      	subs	r5, #3
 801f046:	45ac      	cmp	ip, r5
 801f048:	bf38      	it	cc
 801f04a:	2200      	movcc	r2, #0
 801f04c:	441a      	add	r2, r3
 801f04e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f052:	b17b      	cbz	r3, 801f074 <__mdiff+0x108>
 801f054:	6107      	str	r7, [r0, #16]
 801f056:	e7a3      	b.n	801efa0 <__mdiff+0x34>
 801f058:	f856 8b04 	ldr.w	r8, [r6], #4
 801f05c:	fa11 f288 	uxtah	r2, r1, r8
 801f060:	1414      	asrs	r4, r2, #16
 801f062:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f066:	b292      	uxth	r2, r2
 801f068:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f06c:	f84e 2b04 	str.w	r2, [lr], #4
 801f070:	1421      	asrs	r1, r4, #16
 801f072:	e7e0      	b.n	801f036 <__mdiff+0xca>
 801f074:	3f01      	subs	r7, #1
 801f076:	e7ea      	b.n	801f04e <__mdiff+0xe2>
 801f078:	08021c79 	.word	0x08021c79
 801f07c:	08021d68 	.word	0x08021d68

0801f080 <__ulp>:
 801f080:	b082      	sub	sp, #8
 801f082:	ed8d 0b00 	vstr	d0, [sp]
 801f086:	9b01      	ldr	r3, [sp, #4]
 801f088:	4912      	ldr	r1, [pc, #72]	; (801f0d4 <__ulp+0x54>)
 801f08a:	4019      	ands	r1, r3
 801f08c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f090:	2900      	cmp	r1, #0
 801f092:	dd05      	ble.n	801f0a0 <__ulp+0x20>
 801f094:	2200      	movs	r2, #0
 801f096:	460b      	mov	r3, r1
 801f098:	ec43 2b10 	vmov	d0, r2, r3
 801f09c:	b002      	add	sp, #8
 801f09e:	4770      	bx	lr
 801f0a0:	4249      	negs	r1, r1
 801f0a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f0a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f0aa:	f04f 0200 	mov.w	r2, #0
 801f0ae:	f04f 0300 	mov.w	r3, #0
 801f0b2:	da04      	bge.n	801f0be <__ulp+0x3e>
 801f0b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f0b8:	fa41 f300 	asr.w	r3, r1, r0
 801f0bc:	e7ec      	b.n	801f098 <__ulp+0x18>
 801f0be:	f1a0 0114 	sub.w	r1, r0, #20
 801f0c2:	291e      	cmp	r1, #30
 801f0c4:	bfda      	itte	le
 801f0c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f0ca:	fa20 f101 	lsrle.w	r1, r0, r1
 801f0ce:	2101      	movgt	r1, #1
 801f0d0:	460a      	mov	r2, r1
 801f0d2:	e7e1      	b.n	801f098 <__ulp+0x18>
 801f0d4:	7ff00000 	.word	0x7ff00000

0801f0d8 <__b2d>:
 801f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0da:	6905      	ldr	r5, [r0, #16]
 801f0dc:	f100 0714 	add.w	r7, r0, #20
 801f0e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f0e4:	1f2e      	subs	r6, r5, #4
 801f0e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f7ff fd48 	bl	801eb80 <__hi0bits>
 801f0f0:	f1c0 0320 	rsb	r3, r0, #32
 801f0f4:	280a      	cmp	r0, #10
 801f0f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f174 <__b2d+0x9c>
 801f0fa:	600b      	str	r3, [r1, #0]
 801f0fc:	dc14      	bgt.n	801f128 <__b2d+0x50>
 801f0fe:	f1c0 0e0b 	rsb	lr, r0, #11
 801f102:	fa24 f10e 	lsr.w	r1, r4, lr
 801f106:	42b7      	cmp	r7, r6
 801f108:	ea41 030c 	orr.w	r3, r1, ip
 801f10c:	bf34      	ite	cc
 801f10e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f112:	2100      	movcs	r1, #0
 801f114:	3015      	adds	r0, #21
 801f116:	fa04 f000 	lsl.w	r0, r4, r0
 801f11a:	fa21 f10e 	lsr.w	r1, r1, lr
 801f11e:	ea40 0201 	orr.w	r2, r0, r1
 801f122:	ec43 2b10 	vmov	d0, r2, r3
 801f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f128:	42b7      	cmp	r7, r6
 801f12a:	bf3a      	itte	cc
 801f12c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f130:	f1a5 0608 	subcc.w	r6, r5, #8
 801f134:	2100      	movcs	r1, #0
 801f136:	380b      	subs	r0, #11
 801f138:	d017      	beq.n	801f16a <__b2d+0x92>
 801f13a:	f1c0 0c20 	rsb	ip, r0, #32
 801f13e:	fa04 f500 	lsl.w	r5, r4, r0
 801f142:	42be      	cmp	r6, r7
 801f144:	fa21 f40c 	lsr.w	r4, r1, ip
 801f148:	ea45 0504 	orr.w	r5, r5, r4
 801f14c:	bf8c      	ite	hi
 801f14e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f152:	2400      	movls	r4, #0
 801f154:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f158:	fa01 f000 	lsl.w	r0, r1, r0
 801f15c:	fa24 f40c 	lsr.w	r4, r4, ip
 801f160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f164:	ea40 0204 	orr.w	r2, r0, r4
 801f168:	e7db      	b.n	801f122 <__b2d+0x4a>
 801f16a:	ea44 030c 	orr.w	r3, r4, ip
 801f16e:	460a      	mov	r2, r1
 801f170:	e7d7      	b.n	801f122 <__b2d+0x4a>
 801f172:	bf00      	nop
 801f174:	3ff00000 	.word	0x3ff00000

0801f178 <__d2b>:
 801f178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f17c:	4689      	mov	r9, r1
 801f17e:	2101      	movs	r1, #1
 801f180:	ec57 6b10 	vmov	r6, r7, d0
 801f184:	4690      	mov	r8, r2
 801f186:	f7ff fc09 	bl	801e99c <_Balloc>
 801f18a:	4604      	mov	r4, r0
 801f18c:	b930      	cbnz	r0, 801f19c <__d2b+0x24>
 801f18e:	4602      	mov	r2, r0
 801f190:	4b25      	ldr	r3, [pc, #148]	; (801f228 <__d2b+0xb0>)
 801f192:	4826      	ldr	r0, [pc, #152]	; (801f22c <__d2b+0xb4>)
 801f194:	f240 310a 	movw	r1, #778	; 0x30a
 801f198:	f7fd ffa6 	bl	801d0e8 <__assert_func>
 801f19c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f1a4:	bb35      	cbnz	r5, 801f1f4 <__d2b+0x7c>
 801f1a6:	2e00      	cmp	r6, #0
 801f1a8:	9301      	str	r3, [sp, #4]
 801f1aa:	d028      	beq.n	801f1fe <__d2b+0x86>
 801f1ac:	4668      	mov	r0, sp
 801f1ae:	9600      	str	r6, [sp, #0]
 801f1b0:	f7ff fd06 	bl	801ebc0 <__lo0bits>
 801f1b4:	9900      	ldr	r1, [sp, #0]
 801f1b6:	b300      	cbz	r0, 801f1fa <__d2b+0x82>
 801f1b8:	9a01      	ldr	r2, [sp, #4]
 801f1ba:	f1c0 0320 	rsb	r3, r0, #32
 801f1be:	fa02 f303 	lsl.w	r3, r2, r3
 801f1c2:	430b      	orrs	r3, r1
 801f1c4:	40c2      	lsrs	r2, r0
 801f1c6:	6163      	str	r3, [r4, #20]
 801f1c8:	9201      	str	r2, [sp, #4]
 801f1ca:	9b01      	ldr	r3, [sp, #4]
 801f1cc:	61a3      	str	r3, [r4, #24]
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	bf14      	ite	ne
 801f1d2:	2202      	movne	r2, #2
 801f1d4:	2201      	moveq	r2, #1
 801f1d6:	6122      	str	r2, [r4, #16]
 801f1d8:	b1d5      	cbz	r5, 801f210 <__d2b+0x98>
 801f1da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f1de:	4405      	add	r5, r0
 801f1e0:	f8c9 5000 	str.w	r5, [r9]
 801f1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f1e8:	f8c8 0000 	str.w	r0, [r8]
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	b003      	add	sp, #12
 801f1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f1f8:	e7d5      	b.n	801f1a6 <__d2b+0x2e>
 801f1fa:	6161      	str	r1, [r4, #20]
 801f1fc:	e7e5      	b.n	801f1ca <__d2b+0x52>
 801f1fe:	a801      	add	r0, sp, #4
 801f200:	f7ff fcde 	bl	801ebc0 <__lo0bits>
 801f204:	9b01      	ldr	r3, [sp, #4]
 801f206:	6163      	str	r3, [r4, #20]
 801f208:	2201      	movs	r2, #1
 801f20a:	6122      	str	r2, [r4, #16]
 801f20c:	3020      	adds	r0, #32
 801f20e:	e7e3      	b.n	801f1d8 <__d2b+0x60>
 801f210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f218:	f8c9 0000 	str.w	r0, [r9]
 801f21c:	6918      	ldr	r0, [r3, #16]
 801f21e:	f7ff fcaf 	bl	801eb80 <__hi0bits>
 801f222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f226:	e7df      	b.n	801f1e8 <__d2b+0x70>
 801f228:	08021c79 	.word	0x08021c79
 801f22c:	08021d68 	.word	0x08021d68

0801f230 <__ratio>:
 801f230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	4688      	mov	r8, r1
 801f236:	4669      	mov	r1, sp
 801f238:	4681      	mov	r9, r0
 801f23a:	f7ff ff4d 	bl	801f0d8 <__b2d>
 801f23e:	a901      	add	r1, sp, #4
 801f240:	4640      	mov	r0, r8
 801f242:	ec55 4b10 	vmov	r4, r5, d0
 801f246:	f7ff ff47 	bl	801f0d8 <__b2d>
 801f24a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f24e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f252:	eba3 0c02 	sub.w	ip, r3, r2
 801f256:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f25a:	1a9b      	subs	r3, r3, r2
 801f25c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f260:	ec51 0b10 	vmov	r0, r1, d0
 801f264:	2b00      	cmp	r3, #0
 801f266:	bfd6      	itet	le
 801f268:	460a      	movle	r2, r1
 801f26a:	462a      	movgt	r2, r5
 801f26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f270:	468b      	mov	fp, r1
 801f272:	462f      	mov	r7, r5
 801f274:	bfd4      	ite	le
 801f276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f27a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f27e:	4620      	mov	r0, r4
 801f280:	ee10 2a10 	vmov	r2, s0
 801f284:	465b      	mov	r3, fp
 801f286:	4639      	mov	r1, r7
 801f288:	f7e1 faf8 	bl	800087c <__aeabi_ddiv>
 801f28c:	ec41 0b10 	vmov	d0, r0, r1
 801f290:	b003      	add	sp, #12
 801f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f296 <__copybits>:
 801f296:	3901      	subs	r1, #1
 801f298:	b570      	push	{r4, r5, r6, lr}
 801f29a:	1149      	asrs	r1, r1, #5
 801f29c:	6914      	ldr	r4, [r2, #16]
 801f29e:	3101      	adds	r1, #1
 801f2a0:	f102 0314 	add.w	r3, r2, #20
 801f2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f2a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f2ac:	1f05      	subs	r5, r0, #4
 801f2ae:	42a3      	cmp	r3, r4
 801f2b0:	d30c      	bcc.n	801f2cc <__copybits+0x36>
 801f2b2:	1aa3      	subs	r3, r4, r2
 801f2b4:	3b11      	subs	r3, #17
 801f2b6:	f023 0303 	bic.w	r3, r3, #3
 801f2ba:	3211      	adds	r2, #17
 801f2bc:	42a2      	cmp	r2, r4
 801f2be:	bf88      	it	hi
 801f2c0:	2300      	movhi	r3, #0
 801f2c2:	4418      	add	r0, r3
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	4288      	cmp	r0, r1
 801f2c8:	d305      	bcc.n	801f2d6 <__copybits+0x40>
 801f2ca:	bd70      	pop	{r4, r5, r6, pc}
 801f2cc:	f853 6b04 	ldr.w	r6, [r3], #4
 801f2d0:	f845 6f04 	str.w	r6, [r5, #4]!
 801f2d4:	e7eb      	b.n	801f2ae <__copybits+0x18>
 801f2d6:	f840 3b04 	str.w	r3, [r0], #4
 801f2da:	e7f4      	b.n	801f2c6 <__copybits+0x30>

0801f2dc <__any_on>:
 801f2dc:	f100 0214 	add.w	r2, r0, #20
 801f2e0:	6900      	ldr	r0, [r0, #16]
 801f2e2:	114b      	asrs	r3, r1, #5
 801f2e4:	4298      	cmp	r0, r3
 801f2e6:	b510      	push	{r4, lr}
 801f2e8:	db11      	blt.n	801f30e <__any_on+0x32>
 801f2ea:	dd0a      	ble.n	801f302 <__any_on+0x26>
 801f2ec:	f011 011f 	ands.w	r1, r1, #31
 801f2f0:	d007      	beq.n	801f302 <__any_on+0x26>
 801f2f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f2f6:	fa24 f001 	lsr.w	r0, r4, r1
 801f2fa:	fa00 f101 	lsl.w	r1, r0, r1
 801f2fe:	428c      	cmp	r4, r1
 801f300:	d10b      	bne.n	801f31a <__any_on+0x3e>
 801f302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f306:	4293      	cmp	r3, r2
 801f308:	d803      	bhi.n	801f312 <__any_on+0x36>
 801f30a:	2000      	movs	r0, #0
 801f30c:	bd10      	pop	{r4, pc}
 801f30e:	4603      	mov	r3, r0
 801f310:	e7f7      	b.n	801f302 <__any_on+0x26>
 801f312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f316:	2900      	cmp	r1, #0
 801f318:	d0f5      	beq.n	801f306 <__any_on+0x2a>
 801f31a:	2001      	movs	r0, #1
 801f31c:	e7f6      	b.n	801f30c <__any_on+0x30>

0801f31e <_calloc_r>:
 801f31e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f320:	fba1 2402 	umull	r2, r4, r1, r2
 801f324:	b94c      	cbnz	r4, 801f33a <_calloc_r+0x1c>
 801f326:	4611      	mov	r1, r2
 801f328:	9201      	str	r2, [sp, #4]
 801f32a:	f7fb fef1 	bl	801b110 <_malloc_r>
 801f32e:	9a01      	ldr	r2, [sp, #4]
 801f330:	4605      	mov	r5, r0
 801f332:	b930      	cbnz	r0, 801f342 <_calloc_r+0x24>
 801f334:	4628      	mov	r0, r5
 801f336:	b003      	add	sp, #12
 801f338:	bd30      	pop	{r4, r5, pc}
 801f33a:	220c      	movs	r2, #12
 801f33c:	6002      	str	r2, [r0, #0]
 801f33e:	2500      	movs	r5, #0
 801f340:	e7f8      	b.n	801f334 <_calloc_r+0x16>
 801f342:	4621      	mov	r1, r4
 801f344:	f7fb fe70 	bl	801b028 <memset>
 801f348:	e7f4      	b.n	801f334 <_calloc_r+0x16>

0801f34a <__ssputs_r>:
 801f34a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f34e:	688e      	ldr	r6, [r1, #8]
 801f350:	429e      	cmp	r6, r3
 801f352:	4682      	mov	sl, r0
 801f354:	460c      	mov	r4, r1
 801f356:	4690      	mov	r8, r2
 801f358:	461f      	mov	r7, r3
 801f35a:	d838      	bhi.n	801f3ce <__ssputs_r+0x84>
 801f35c:	898a      	ldrh	r2, [r1, #12]
 801f35e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f362:	d032      	beq.n	801f3ca <__ssputs_r+0x80>
 801f364:	6825      	ldr	r5, [r4, #0]
 801f366:	6909      	ldr	r1, [r1, #16]
 801f368:	eba5 0901 	sub.w	r9, r5, r1
 801f36c:	6965      	ldr	r5, [r4, #20]
 801f36e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f372:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f376:	3301      	adds	r3, #1
 801f378:	444b      	add	r3, r9
 801f37a:	106d      	asrs	r5, r5, #1
 801f37c:	429d      	cmp	r5, r3
 801f37e:	bf38      	it	cc
 801f380:	461d      	movcc	r5, r3
 801f382:	0553      	lsls	r3, r2, #21
 801f384:	d531      	bpl.n	801f3ea <__ssputs_r+0xa0>
 801f386:	4629      	mov	r1, r5
 801f388:	f7fb fec2 	bl	801b110 <_malloc_r>
 801f38c:	4606      	mov	r6, r0
 801f38e:	b950      	cbnz	r0, 801f3a6 <__ssputs_r+0x5c>
 801f390:	230c      	movs	r3, #12
 801f392:	f8ca 3000 	str.w	r3, [sl]
 801f396:	89a3      	ldrh	r3, [r4, #12]
 801f398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f39c:	81a3      	strh	r3, [r4, #12]
 801f39e:	f04f 30ff 	mov.w	r0, #4294967295
 801f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a6:	6921      	ldr	r1, [r4, #16]
 801f3a8:	464a      	mov	r2, r9
 801f3aa:	f7fb fe15 	bl	801afd8 <memcpy>
 801f3ae:	89a3      	ldrh	r3, [r4, #12]
 801f3b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f3b8:	81a3      	strh	r3, [r4, #12]
 801f3ba:	6126      	str	r6, [r4, #16]
 801f3bc:	6165      	str	r5, [r4, #20]
 801f3be:	444e      	add	r6, r9
 801f3c0:	eba5 0509 	sub.w	r5, r5, r9
 801f3c4:	6026      	str	r6, [r4, #0]
 801f3c6:	60a5      	str	r5, [r4, #8]
 801f3c8:	463e      	mov	r6, r7
 801f3ca:	42be      	cmp	r6, r7
 801f3cc:	d900      	bls.n	801f3d0 <__ssputs_r+0x86>
 801f3ce:	463e      	mov	r6, r7
 801f3d0:	6820      	ldr	r0, [r4, #0]
 801f3d2:	4632      	mov	r2, r6
 801f3d4:	4641      	mov	r1, r8
 801f3d6:	f7fb fe0d 	bl	801aff4 <memmove>
 801f3da:	68a3      	ldr	r3, [r4, #8]
 801f3dc:	1b9b      	subs	r3, r3, r6
 801f3de:	60a3      	str	r3, [r4, #8]
 801f3e0:	6823      	ldr	r3, [r4, #0]
 801f3e2:	4433      	add	r3, r6
 801f3e4:	6023      	str	r3, [r4, #0]
 801f3e6:	2000      	movs	r0, #0
 801f3e8:	e7db      	b.n	801f3a2 <__ssputs_r+0x58>
 801f3ea:	462a      	mov	r2, r5
 801f3ec:	f000 fb2e 	bl	801fa4c <_realloc_r>
 801f3f0:	4606      	mov	r6, r0
 801f3f2:	2800      	cmp	r0, #0
 801f3f4:	d1e1      	bne.n	801f3ba <__ssputs_r+0x70>
 801f3f6:	6921      	ldr	r1, [r4, #16]
 801f3f8:	4650      	mov	r0, sl
 801f3fa:	f7fb fe1d 	bl	801b038 <_free_r>
 801f3fe:	e7c7      	b.n	801f390 <__ssputs_r+0x46>

0801f400 <_svfiprintf_r>:
 801f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f404:	4698      	mov	r8, r3
 801f406:	898b      	ldrh	r3, [r1, #12]
 801f408:	061b      	lsls	r3, r3, #24
 801f40a:	b09d      	sub	sp, #116	; 0x74
 801f40c:	4607      	mov	r7, r0
 801f40e:	460d      	mov	r5, r1
 801f410:	4614      	mov	r4, r2
 801f412:	d50e      	bpl.n	801f432 <_svfiprintf_r+0x32>
 801f414:	690b      	ldr	r3, [r1, #16]
 801f416:	b963      	cbnz	r3, 801f432 <_svfiprintf_r+0x32>
 801f418:	2140      	movs	r1, #64	; 0x40
 801f41a:	f7fb fe79 	bl	801b110 <_malloc_r>
 801f41e:	6028      	str	r0, [r5, #0]
 801f420:	6128      	str	r0, [r5, #16]
 801f422:	b920      	cbnz	r0, 801f42e <_svfiprintf_r+0x2e>
 801f424:	230c      	movs	r3, #12
 801f426:	603b      	str	r3, [r7, #0]
 801f428:	f04f 30ff 	mov.w	r0, #4294967295
 801f42c:	e0d1      	b.n	801f5d2 <_svfiprintf_r+0x1d2>
 801f42e:	2340      	movs	r3, #64	; 0x40
 801f430:	616b      	str	r3, [r5, #20]
 801f432:	2300      	movs	r3, #0
 801f434:	9309      	str	r3, [sp, #36]	; 0x24
 801f436:	2320      	movs	r3, #32
 801f438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f43c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f440:	2330      	movs	r3, #48	; 0x30
 801f442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f5ec <_svfiprintf_r+0x1ec>
 801f446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f44a:	f04f 0901 	mov.w	r9, #1
 801f44e:	4623      	mov	r3, r4
 801f450:	469a      	mov	sl, r3
 801f452:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f456:	b10a      	cbz	r2, 801f45c <_svfiprintf_r+0x5c>
 801f458:	2a25      	cmp	r2, #37	; 0x25
 801f45a:	d1f9      	bne.n	801f450 <_svfiprintf_r+0x50>
 801f45c:	ebba 0b04 	subs.w	fp, sl, r4
 801f460:	d00b      	beq.n	801f47a <_svfiprintf_r+0x7a>
 801f462:	465b      	mov	r3, fp
 801f464:	4622      	mov	r2, r4
 801f466:	4629      	mov	r1, r5
 801f468:	4638      	mov	r0, r7
 801f46a:	f7ff ff6e 	bl	801f34a <__ssputs_r>
 801f46e:	3001      	adds	r0, #1
 801f470:	f000 80aa 	beq.w	801f5c8 <_svfiprintf_r+0x1c8>
 801f474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f476:	445a      	add	r2, fp
 801f478:	9209      	str	r2, [sp, #36]	; 0x24
 801f47a:	f89a 3000 	ldrb.w	r3, [sl]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	f000 80a2 	beq.w	801f5c8 <_svfiprintf_r+0x1c8>
 801f484:	2300      	movs	r3, #0
 801f486:	f04f 32ff 	mov.w	r2, #4294967295
 801f48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f48e:	f10a 0a01 	add.w	sl, sl, #1
 801f492:	9304      	str	r3, [sp, #16]
 801f494:	9307      	str	r3, [sp, #28]
 801f496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f49a:	931a      	str	r3, [sp, #104]	; 0x68
 801f49c:	4654      	mov	r4, sl
 801f49e:	2205      	movs	r2, #5
 801f4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4a4:	4851      	ldr	r0, [pc, #324]	; (801f5ec <_svfiprintf_r+0x1ec>)
 801f4a6:	f7e0 feb3 	bl	8000210 <memchr>
 801f4aa:	9a04      	ldr	r2, [sp, #16]
 801f4ac:	b9d8      	cbnz	r0, 801f4e6 <_svfiprintf_r+0xe6>
 801f4ae:	06d0      	lsls	r0, r2, #27
 801f4b0:	bf44      	itt	mi
 801f4b2:	2320      	movmi	r3, #32
 801f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4b8:	0711      	lsls	r1, r2, #28
 801f4ba:	bf44      	itt	mi
 801f4bc:	232b      	movmi	r3, #43	; 0x2b
 801f4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4c2:	f89a 3000 	ldrb.w	r3, [sl]
 801f4c6:	2b2a      	cmp	r3, #42	; 0x2a
 801f4c8:	d015      	beq.n	801f4f6 <_svfiprintf_r+0xf6>
 801f4ca:	9a07      	ldr	r2, [sp, #28]
 801f4cc:	4654      	mov	r4, sl
 801f4ce:	2000      	movs	r0, #0
 801f4d0:	f04f 0c0a 	mov.w	ip, #10
 801f4d4:	4621      	mov	r1, r4
 801f4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f4da:	3b30      	subs	r3, #48	; 0x30
 801f4dc:	2b09      	cmp	r3, #9
 801f4de:	d94e      	bls.n	801f57e <_svfiprintf_r+0x17e>
 801f4e0:	b1b0      	cbz	r0, 801f510 <_svfiprintf_r+0x110>
 801f4e2:	9207      	str	r2, [sp, #28]
 801f4e4:	e014      	b.n	801f510 <_svfiprintf_r+0x110>
 801f4e6:	eba0 0308 	sub.w	r3, r0, r8
 801f4ea:	fa09 f303 	lsl.w	r3, r9, r3
 801f4ee:	4313      	orrs	r3, r2
 801f4f0:	9304      	str	r3, [sp, #16]
 801f4f2:	46a2      	mov	sl, r4
 801f4f4:	e7d2      	b.n	801f49c <_svfiprintf_r+0x9c>
 801f4f6:	9b03      	ldr	r3, [sp, #12]
 801f4f8:	1d19      	adds	r1, r3, #4
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	9103      	str	r1, [sp, #12]
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	bfbb      	ittet	lt
 801f502:	425b      	neglt	r3, r3
 801f504:	f042 0202 	orrlt.w	r2, r2, #2
 801f508:	9307      	strge	r3, [sp, #28]
 801f50a:	9307      	strlt	r3, [sp, #28]
 801f50c:	bfb8      	it	lt
 801f50e:	9204      	strlt	r2, [sp, #16]
 801f510:	7823      	ldrb	r3, [r4, #0]
 801f512:	2b2e      	cmp	r3, #46	; 0x2e
 801f514:	d10c      	bne.n	801f530 <_svfiprintf_r+0x130>
 801f516:	7863      	ldrb	r3, [r4, #1]
 801f518:	2b2a      	cmp	r3, #42	; 0x2a
 801f51a:	d135      	bne.n	801f588 <_svfiprintf_r+0x188>
 801f51c:	9b03      	ldr	r3, [sp, #12]
 801f51e:	1d1a      	adds	r2, r3, #4
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	9203      	str	r2, [sp, #12]
 801f524:	2b00      	cmp	r3, #0
 801f526:	bfb8      	it	lt
 801f528:	f04f 33ff 	movlt.w	r3, #4294967295
 801f52c:	3402      	adds	r4, #2
 801f52e:	9305      	str	r3, [sp, #20]
 801f530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f5fc <_svfiprintf_r+0x1fc>
 801f534:	7821      	ldrb	r1, [r4, #0]
 801f536:	2203      	movs	r2, #3
 801f538:	4650      	mov	r0, sl
 801f53a:	f7e0 fe69 	bl	8000210 <memchr>
 801f53e:	b140      	cbz	r0, 801f552 <_svfiprintf_r+0x152>
 801f540:	2340      	movs	r3, #64	; 0x40
 801f542:	eba0 000a 	sub.w	r0, r0, sl
 801f546:	fa03 f000 	lsl.w	r0, r3, r0
 801f54a:	9b04      	ldr	r3, [sp, #16]
 801f54c:	4303      	orrs	r3, r0
 801f54e:	3401      	adds	r4, #1
 801f550:	9304      	str	r3, [sp, #16]
 801f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f556:	4826      	ldr	r0, [pc, #152]	; (801f5f0 <_svfiprintf_r+0x1f0>)
 801f558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f55c:	2206      	movs	r2, #6
 801f55e:	f7e0 fe57 	bl	8000210 <memchr>
 801f562:	2800      	cmp	r0, #0
 801f564:	d038      	beq.n	801f5d8 <_svfiprintf_r+0x1d8>
 801f566:	4b23      	ldr	r3, [pc, #140]	; (801f5f4 <_svfiprintf_r+0x1f4>)
 801f568:	bb1b      	cbnz	r3, 801f5b2 <_svfiprintf_r+0x1b2>
 801f56a:	9b03      	ldr	r3, [sp, #12]
 801f56c:	3307      	adds	r3, #7
 801f56e:	f023 0307 	bic.w	r3, r3, #7
 801f572:	3308      	adds	r3, #8
 801f574:	9303      	str	r3, [sp, #12]
 801f576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f578:	4433      	add	r3, r6
 801f57a:	9309      	str	r3, [sp, #36]	; 0x24
 801f57c:	e767      	b.n	801f44e <_svfiprintf_r+0x4e>
 801f57e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f582:	460c      	mov	r4, r1
 801f584:	2001      	movs	r0, #1
 801f586:	e7a5      	b.n	801f4d4 <_svfiprintf_r+0xd4>
 801f588:	2300      	movs	r3, #0
 801f58a:	3401      	adds	r4, #1
 801f58c:	9305      	str	r3, [sp, #20]
 801f58e:	4619      	mov	r1, r3
 801f590:	f04f 0c0a 	mov.w	ip, #10
 801f594:	4620      	mov	r0, r4
 801f596:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f59a:	3a30      	subs	r2, #48	; 0x30
 801f59c:	2a09      	cmp	r2, #9
 801f59e:	d903      	bls.n	801f5a8 <_svfiprintf_r+0x1a8>
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d0c5      	beq.n	801f530 <_svfiprintf_r+0x130>
 801f5a4:	9105      	str	r1, [sp, #20]
 801f5a6:	e7c3      	b.n	801f530 <_svfiprintf_r+0x130>
 801f5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801f5ac:	4604      	mov	r4, r0
 801f5ae:	2301      	movs	r3, #1
 801f5b0:	e7f0      	b.n	801f594 <_svfiprintf_r+0x194>
 801f5b2:	ab03      	add	r3, sp, #12
 801f5b4:	9300      	str	r3, [sp, #0]
 801f5b6:	462a      	mov	r2, r5
 801f5b8:	4b0f      	ldr	r3, [pc, #60]	; (801f5f8 <_svfiprintf_r+0x1f8>)
 801f5ba:	a904      	add	r1, sp, #16
 801f5bc:	4638      	mov	r0, r7
 801f5be:	f7fb febb 	bl	801b338 <_printf_float>
 801f5c2:	1c42      	adds	r2, r0, #1
 801f5c4:	4606      	mov	r6, r0
 801f5c6:	d1d6      	bne.n	801f576 <_svfiprintf_r+0x176>
 801f5c8:	89ab      	ldrh	r3, [r5, #12]
 801f5ca:	065b      	lsls	r3, r3, #25
 801f5cc:	f53f af2c 	bmi.w	801f428 <_svfiprintf_r+0x28>
 801f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f5d2:	b01d      	add	sp, #116	; 0x74
 801f5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5d8:	ab03      	add	r3, sp, #12
 801f5da:	9300      	str	r3, [sp, #0]
 801f5dc:	462a      	mov	r2, r5
 801f5de:	4b06      	ldr	r3, [pc, #24]	; (801f5f8 <_svfiprintf_r+0x1f8>)
 801f5e0:	a904      	add	r1, sp, #16
 801f5e2:	4638      	mov	r0, r7
 801f5e4:	f7fc f94c 	bl	801b880 <_printf_i>
 801f5e8:	e7eb      	b.n	801f5c2 <_svfiprintf_r+0x1c2>
 801f5ea:	bf00      	nop
 801f5ec:	08021ec4 	.word	0x08021ec4
 801f5f0:	08021ece 	.word	0x08021ece
 801f5f4:	0801b339 	.word	0x0801b339
 801f5f8:	0801f34b 	.word	0x0801f34b
 801f5fc:	08021eca 	.word	0x08021eca

0801f600 <__sfputc_r>:
 801f600:	6893      	ldr	r3, [r2, #8]
 801f602:	3b01      	subs	r3, #1
 801f604:	2b00      	cmp	r3, #0
 801f606:	b410      	push	{r4}
 801f608:	6093      	str	r3, [r2, #8]
 801f60a:	da08      	bge.n	801f61e <__sfputc_r+0x1e>
 801f60c:	6994      	ldr	r4, [r2, #24]
 801f60e:	42a3      	cmp	r3, r4
 801f610:	db01      	blt.n	801f616 <__sfputc_r+0x16>
 801f612:	290a      	cmp	r1, #10
 801f614:	d103      	bne.n	801f61e <__sfputc_r+0x1e>
 801f616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f61a:	f7fd bca5 	b.w	801cf68 <__swbuf_r>
 801f61e:	6813      	ldr	r3, [r2, #0]
 801f620:	1c58      	adds	r0, r3, #1
 801f622:	6010      	str	r0, [r2, #0]
 801f624:	7019      	strb	r1, [r3, #0]
 801f626:	4608      	mov	r0, r1
 801f628:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f62c:	4770      	bx	lr

0801f62e <__sfputs_r>:
 801f62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f630:	4606      	mov	r6, r0
 801f632:	460f      	mov	r7, r1
 801f634:	4614      	mov	r4, r2
 801f636:	18d5      	adds	r5, r2, r3
 801f638:	42ac      	cmp	r4, r5
 801f63a:	d101      	bne.n	801f640 <__sfputs_r+0x12>
 801f63c:	2000      	movs	r0, #0
 801f63e:	e007      	b.n	801f650 <__sfputs_r+0x22>
 801f640:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f644:	463a      	mov	r2, r7
 801f646:	4630      	mov	r0, r6
 801f648:	f7ff ffda 	bl	801f600 <__sfputc_r>
 801f64c:	1c43      	adds	r3, r0, #1
 801f64e:	d1f3      	bne.n	801f638 <__sfputs_r+0xa>
 801f650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f654 <_vfiprintf_r>:
 801f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f658:	460d      	mov	r5, r1
 801f65a:	b09d      	sub	sp, #116	; 0x74
 801f65c:	4614      	mov	r4, r2
 801f65e:	4698      	mov	r8, r3
 801f660:	4606      	mov	r6, r0
 801f662:	b118      	cbz	r0, 801f66c <_vfiprintf_r+0x18>
 801f664:	6983      	ldr	r3, [r0, #24]
 801f666:	b90b      	cbnz	r3, 801f66c <_vfiprintf_r+0x18>
 801f668:	f7fe fcf2 	bl	801e050 <__sinit>
 801f66c:	4b89      	ldr	r3, [pc, #548]	; (801f894 <_vfiprintf_r+0x240>)
 801f66e:	429d      	cmp	r5, r3
 801f670:	d11b      	bne.n	801f6aa <_vfiprintf_r+0x56>
 801f672:	6875      	ldr	r5, [r6, #4]
 801f674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f676:	07d9      	lsls	r1, r3, #31
 801f678:	d405      	bmi.n	801f686 <_vfiprintf_r+0x32>
 801f67a:	89ab      	ldrh	r3, [r5, #12]
 801f67c:	059a      	lsls	r2, r3, #22
 801f67e:	d402      	bmi.n	801f686 <_vfiprintf_r+0x32>
 801f680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f682:	f7fb fc9e 	bl	801afc2 <__retarget_lock_acquire_recursive>
 801f686:	89ab      	ldrh	r3, [r5, #12]
 801f688:	071b      	lsls	r3, r3, #28
 801f68a:	d501      	bpl.n	801f690 <_vfiprintf_r+0x3c>
 801f68c:	692b      	ldr	r3, [r5, #16]
 801f68e:	b9eb      	cbnz	r3, 801f6cc <_vfiprintf_r+0x78>
 801f690:	4629      	mov	r1, r5
 801f692:	4630      	mov	r0, r6
 801f694:	f7fd fcba 	bl	801d00c <__swsetup_r>
 801f698:	b1c0      	cbz	r0, 801f6cc <_vfiprintf_r+0x78>
 801f69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f69c:	07dc      	lsls	r4, r3, #31
 801f69e:	d50e      	bpl.n	801f6be <_vfiprintf_r+0x6a>
 801f6a0:	f04f 30ff 	mov.w	r0, #4294967295
 801f6a4:	b01d      	add	sp, #116	; 0x74
 801f6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6aa:	4b7b      	ldr	r3, [pc, #492]	; (801f898 <_vfiprintf_r+0x244>)
 801f6ac:	429d      	cmp	r5, r3
 801f6ae:	d101      	bne.n	801f6b4 <_vfiprintf_r+0x60>
 801f6b0:	68b5      	ldr	r5, [r6, #8]
 801f6b2:	e7df      	b.n	801f674 <_vfiprintf_r+0x20>
 801f6b4:	4b79      	ldr	r3, [pc, #484]	; (801f89c <_vfiprintf_r+0x248>)
 801f6b6:	429d      	cmp	r5, r3
 801f6b8:	bf08      	it	eq
 801f6ba:	68f5      	ldreq	r5, [r6, #12]
 801f6bc:	e7da      	b.n	801f674 <_vfiprintf_r+0x20>
 801f6be:	89ab      	ldrh	r3, [r5, #12]
 801f6c0:	0598      	lsls	r0, r3, #22
 801f6c2:	d4ed      	bmi.n	801f6a0 <_vfiprintf_r+0x4c>
 801f6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f6c6:	f7fb fc7d 	bl	801afc4 <__retarget_lock_release_recursive>
 801f6ca:	e7e9      	b.n	801f6a0 <_vfiprintf_r+0x4c>
 801f6cc:	2300      	movs	r3, #0
 801f6ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f6d0:	2320      	movs	r3, #32
 801f6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801f6da:	2330      	movs	r3, #48	; 0x30
 801f6dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f8a0 <_vfiprintf_r+0x24c>
 801f6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f6e4:	f04f 0901 	mov.w	r9, #1
 801f6e8:	4623      	mov	r3, r4
 801f6ea:	469a      	mov	sl, r3
 801f6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f6f0:	b10a      	cbz	r2, 801f6f6 <_vfiprintf_r+0xa2>
 801f6f2:	2a25      	cmp	r2, #37	; 0x25
 801f6f4:	d1f9      	bne.n	801f6ea <_vfiprintf_r+0x96>
 801f6f6:	ebba 0b04 	subs.w	fp, sl, r4
 801f6fa:	d00b      	beq.n	801f714 <_vfiprintf_r+0xc0>
 801f6fc:	465b      	mov	r3, fp
 801f6fe:	4622      	mov	r2, r4
 801f700:	4629      	mov	r1, r5
 801f702:	4630      	mov	r0, r6
 801f704:	f7ff ff93 	bl	801f62e <__sfputs_r>
 801f708:	3001      	adds	r0, #1
 801f70a:	f000 80aa 	beq.w	801f862 <_vfiprintf_r+0x20e>
 801f70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f710:	445a      	add	r2, fp
 801f712:	9209      	str	r2, [sp, #36]	; 0x24
 801f714:	f89a 3000 	ldrb.w	r3, [sl]
 801f718:	2b00      	cmp	r3, #0
 801f71a:	f000 80a2 	beq.w	801f862 <_vfiprintf_r+0x20e>
 801f71e:	2300      	movs	r3, #0
 801f720:	f04f 32ff 	mov.w	r2, #4294967295
 801f724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f728:	f10a 0a01 	add.w	sl, sl, #1
 801f72c:	9304      	str	r3, [sp, #16]
 801f72e:	9307      	str	r3, [sp, #28]
 801f730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f734:	931a      	str	r3, [sp, #104]	; 0x68
 801f736:	4654      	mov	r4, sl
 801f738:	2205      	movs	r2, #5
 801f73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f73e:	4858      	ldr	r0, [pc, #352]	; (801f8a0 <_vfiprintf_r+0x24c>)
 801f740:	f7e0 fd66 	bl	8000210 <memchr>
 801f744:	9a04      	ldr	r2, [sp, #16]
 801f746:	b9d8      	cbnz	r0, 801f780 <_vfiprintf_r+0x12c>
 801f748:	06d1      	lsls	r1, r2, #27
 801f74a:	bf44      	itt	mi
 801f74c:	2320      	movmi	r3, #32
 801f74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f752:	0713      	lsls	r3, r2, #28
 801f754:	bf44      	itt	mi
 801f756:	232b      	movmi	r3, #43	; 0x2b
 801f758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f75c:	f89a 3000 	ldrb.w	r3, [sl]
 801f760:	2b2a      	cmp	r3, #42	; 0x2a
 801f762:	d015      	beq.n	801f790 <_vfiprintf_r+0x13c>
 801f764:	9a07      	ldr	r2, [sp, #28]
 801f766:	4654      	mov	r4, sl
 801f768:	2000      	movs	r0, #0
 801f76a:	f04f 0c0a 	mov.w	ip, #10
 801f76e:	4621      	mov	r1, r4
 801f770:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f774:	3b30      	subs	r3, #48	; 0x30
 801f776:	2b09      	cmp	r3, #9
 801f778:	d94e      	bls.n	801f818 <_vfiprintf_r+0x1c4>
 801f77a:	b1b0      	cbz	r0, 801f7aa <_vfiprintf_r+0x156>
 801f77c:	9207      	str	r2, [sp, #28]
 801f77e:	e014      	b.n	801f7aa <_vfiprintf_r+0x156>
 801f780:	eba0 0308 	sub.w	r3, r0, r8
 801f784:	fa09 f303 	lsl.w	r3, r9, r3
 801f788:	4313      	orrs	r3, r2
 801f78a:	9304      	str	r3, [sp, #16]
 801f78c:	46a2      	mov	sl, r4
 801f78e:	e7d2      	b.n	801f736 <_vfiprintf_r+0xe2>
 801f790:	9b03      	ldr	r3, [sp, #12]
 801f792:	1d19      	adds	r1, r3, #4
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	9103      	str	r1, [sp, #12]
 801f798:	2b00      	cmp	r3, #0
 801f79a:	bfbb      	ittet	lt
 801f79c:	425b      	neglt	r3, r3
 801f79e:	f042 0202 	orrlt.w	r2, r2, #2
 801f7a2:	9307      	strge	r3, [sp, #28]
 801f7a4:	9307      	strlt	r3, [sp, #28]
 801f7a6:	bfb8      	it	lt
 801f7a8:	9204      	strlt	r2, [sp, #16]
 801f7aa:	7823      	ldrb	r3, [r4, #0]
 801f7ac:	2b2e      	cmp	r3, #46	; 0x2e
 801f7ae:	d10c      	bne.n	801f7ca <_vfiprintf_r+0x176>
 801f7b0:	7863      	ldrb	r3, [r4, #1]
 801f7b2:	2b2a      	cmp	r3, #42	; 0x2a
 801f7b4:	d135      	bne.n	801f822 <_vfiprintf_r+0x1ce>
 801f7b6:	9b03      	ldr	r3, [sp, #12]
 801f7b8:	1d1a      	adds	r2, r3, #4
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	9203      	str	r2, [sp, #12]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	bfb8      	it	lt
 801f7c2:	f04f 33ff 	movlt.w	r3, #4294967295
 801f7c6:	3402      	adds	r4, #2
 801f7c8:	9305      	str	r3, [sp, #20]
 801f7ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f8b0 <_vfiprintf_r+0x25c>
 801f7ce:	7821      	ldrb	r1, [r4, #0]
 801f7d0:	2203      	movs	r2, #3
 801f7d2:	4650      	mov	r0, sl
 801f7d4:	f7e0 fd1c 	bl	8000210 <memchr>
 801f7d8:	b140      	cbz	r0, 801f7ec <_vfiprintf_r+0x198>
 801f7da:	2340      	movs	r3, #64	; 0x40
 801f7dc:	eba0 000a 	sub.w	r0, r0, sl
 801f7e0:	fa03 f000 	lsl.w	r0, r3, r0
 801f7e4:	9b04      	ldr	r3, [sp, #16]
 801f7e6:	4303      	orrs	r3, r0
 801f7e8:	3401      	adds	r4, #1
 801f7ea:	9304      	str	r3, [sp, #16]
 801f7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7f0:	482c      	ldr	r0, [pc, #176]	; (801f8a4 <_vfiprintf_r+0x250>)
 801f7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f7f6:	2206      	movs	r2, #6
 801f7f8:	f7e0 fd0a 	bl	8000210 <memchr>
 801f7fc:	2800      	cmp	r0, #0
 801f7fe:	d03f      	beq.n	801f880 <_vfiprintf_r+0x22c>
 801f800:	4b29      	ldr	r3, [pc, #164]	; (801f8a8 <_vfiprintf_r+0x254>)
 801f802:	bb1b      	cbnz	r3, 801f84c <_vfiprintf_r+0x1f8>
 801f804:	9b03      	ldr	r3, [sp, #12]
 801f806:	3307      	adds	r3, #7
 801f808:	f023 0307 	bic.w	r3, r3, #7
 801f80c:	3308      	adds	r3, #8
 801f80e:	9303      	str	r3, [sp, #12]
 801f810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f812:	443b      	add	r3, r7
 801f814:	9309      	str	r3, [sp, #36]	; 0x24
 801f816:	e767      	b.n	801f6e8 <_vfiprintf_r+0x94>
 801f818:	fb0c 3202 	mla	r2, ip, r2, r3
 801f81c:	460c      	mov	r4, r1
 801f81e:	2001      	movs	r0, #1
 801f820:	e7a5      	b.n	801f76e <_vfiprintf_r+0x11a>
 801f822:	2300      	movs	r3, #0
 801f824:	3401      	adds	r4, #1
 801f826:	9305      	str	r3, [sp, #20]
 801f828:	4619      	mov	r1, r3
 801f82a:	f04f 0c0a 	mov.w	ip, #10
 801f82e:	4620      	mov	r0, r4
 801f830:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f834:	3a30      	subs	r2, #48	; 0x30
 801f836:	2a09      	cmp	r2, #9
 801f838:	d903      	bls.n	801f842 <_vfiprintf_r+0x1ee>
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d0c5      	beq.n	801f7ca <_vfiprintf_r+0x176>
 801f83e:	9105      	str	r1, [sp, #20]
 801f840:	e7c3      	b.n	801f7ca <_vfiprintf_r+0x176>
 801f842:	fb0c 2101 	mla	r1, ip, r1, r2
 801f846:	4604      	mov	r4, r0
 801f848:	2301      	movs	r3, #1
 801f84a:	e7f0      	b.n	801f82e <_vfiprintf_r+0x1da>
 801f84c:	ab03      	add	r3, sp, #12
 801f84e:	9300      	str	r3, [sp, #0]
 801f850:	462a      	mov	r2, r5
 801f852:	4b16      	ldr	r3, [pc, #88]	; (801f8ac <_vfiprintf_r+0x258>)
 801f854:	a904      	add	r1, sp, #16
 801f856:	4630      	mov	r0, r6
 801f858:	f7fb fd6e 	bl	801b338 <_printf_float>
 801f85c:	4607      	mov	r7, r0
 801f85e:	1c78      	adds	r0, r7, #1
 801f860:	d1d6      	bne.n	801f810 <_vfiprintf_r+0x1bc>
 801f862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f864:	07d9      	lsls	r1, r3, #31
 801f866:	d405      	bmi.n	801f874 <_vfiprintf_r+0x220>
 801f868:	89ab      	ldrh	r3, [r5, #12]
 801f86a:	059a      	lsls	r2, r3, #22
 801f86c:	d402      	bmi.n	801f874 <_vfiprintf_r+0x220>
 801f86e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f870:	f7fb fba8 	bl	801afc4 <__retarget_lock_release_recursive>
 801f874:	89ab      	ldrh	r3, [r5, #12]
 801f876:	065b      	lsls	r3, r3, #25
 801f878:	f53f af12 	bmi.w	801f6a0 <_vfiprintf_r+0x4c>
 801f87c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f87e:	e711      	b.n	801f6a4 <_vfiprintf_r+0x50>
 801f880:	ab03      	add	r3, sp, #12
 801f882:	9300      	str	r3, [sp, #0]
 801f884:	462a      	mov	r2, r5
 801f886:	4b09      	ldr	r3, [pc, #36]	; (801f8ac <_vfiprintf_r+0x258>)
 801f888:	a904      	add	r1, sp, #16
 801f88a:	4630      	mov	r0, r6
 801f88c:	f7fb fff8 	bl	801b880 <_printf_i>
 801f890:	e7e4      	b.n	801f85c <_vfiprintf_r+0x208>
 801f892:	bf00      	nop
 801f894:	08021cac 	.word	0x08021cac
 801f898:	08021ccc 	.word	0x08021ccc
 801f89c:	08021c8c 	.word	0x08021c8c
 801f8a0:	08021ec4 	.word	0x08021ec4
 801f8a4:	08021ece 	.word	0x08021ece
 801f8a8:	0801b339 	.word	0x0801b339
 801f8ac:	0801f62f 	.word	0x0801f62f
 801f8b0:	08021eca 	.word	0x08021eca
 801f8b4:	00000000 	.word	0x00000000

0801f8b8 <nan>:
 801f8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f8c0 <nan+0x8>
 801f8bc:	4770      	bx	lr
 801f8be:	bf00      	nop
 801f8c0:	00000000 	.word	0x00000000
 801f8c4:	7ff80000 	.word	0x7ff80000

0801f8c8 <__sread>:
 801f8c8:	b510      	push	{r4, lr}
 801f8ca:	460c      	mov	r4, r1
 801f8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f8d0:	f000 f8ec 	bl	801faac <_read_r>
 801f8d4:	2800      	cmp	r0, #0
 801f8d6:	bfab      	itete	ge
 801f8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f8da:	89a3      	ldrhlt	r3, [r4, #12]
 801f8dc:	181b      	addge	r3, r3, r0
 801f8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f8e2:	bfac      	ite	ge
 801f8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f8e6:	81a3      	strhlt	r3, [r4, #12]
 801f8e8:	bd10      	pop	{r4, pc}

0801f8ea <__swrite>:
 801f8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8ee:	461f      	mov	r7, r3
 801f8f0:	898b      	ldrh	r3, [r1, #12]
 801f8f2:	05db      	lsls	r3, r3, #23
 801f8f4:	4605      	mov	r5, r0
 801f8f6:	460c      	mov	r4, r1
 801f8f8:	4616      	mov	r6, r2
 801f8fa:	d505      	bpl.n	801f908 <__swrite+0x1e>
 801f8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f900:	2302      	movs	r3, #2
 801f902:	2200      	movs	r2, #0
 801f904:	f000 f890 	bl	801fa28 <_lseek_r>
 801f908:	89a3      	ldrh	r3, [r4, #12]
 801f90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f912:	81a3      	strh	r3, [r4, #12]
 801f914:	4632      	mov	r2, r6
 801f916:	463b      	mov	r3, r7
 801f918:	4628      	mov	r0, r5
 801f91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f91e:	f000 b837 	b.w	801f990 <_write_r>

0801f922 <__sseek>:
 801f922:	b510      	push	{r4, lr}
 801f924:	460c      	mov	r4, r1
 801f926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f92a:	f000 f87d 	bl	801fa28 <_lseek_r>
 801f92e:	1c43      	adds	r3, r0, #1
 801f930:	89a3      	ldrh	r3, [r4, #12]
 801f932:	bf15      	itete	ne
 801f934:	6560      	strne	r0, [r4, #84]	; 0x54
 801f936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f93e:	81a3      	strheq	r3, [r4, #12]
 801f940:	bf18      	it	ne
 801f942:	81a3      	strhne	r3, [r4, #12]
 801f944:	bd10      	pop	{r4, pc}

0801f946 <__sclose>:
 801f946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f94a:	f000 b83b 	b.w	801f9c4 <_close_r>

0801f94e <strncmp>:
 801f94e:	b510      	push	{r4, lr}
 801f950:	b17a      	cbz	r2, 801f972 <strncmp+0x24>
 801f952:	4603      	mov	r3, r0
 801f954:	3901      	subs	r1, #1
 801f956:	1884      	adds	r4, r0, r2
 801f958:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f95c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f960:	4290      	cmp	r0, r2
 801f962:	d101      	bne.n	801f968 <strncmp+0x1a>
 801f964:	42a3      	cmp	r3, r4
 801f966:	d101      	bne.n	801f96c <strncmp+0x1e>
 801f968:	1a80      	subs	r0, r0, r2
 801f96a:	bd10      	pop	{r4, pc}
 801f96c:	2800      	cmp	r0, #0
 801f96e:	d1f3      	bne.n	801f958 <strncmp+0xa>
 801f970:	e7fa      	b.n	801f968 <strncmp+0x1a>
 801f972:	4610      	mov	r0, r2
 801f974:	e7f9      	b.n	801f96a <strncmp+0x1c>

0801f976 <__ascii_wctomb>:
 801f976:	b149      	cbz	r1, 801f98c <__ascii_wctomb+0x16>
 801f978:	2aff      	cmp	r2, #255	; 0xff
 801f97a:	bf85      	ittet	hi
 801f97c:	238a      	movhi	r3, #138	; 0x8a
 801f97e:	6003      	strhi	r3, [r0, #0]
 801f980:	700a      	strbls	r2, [r1, #0]
 801f982:	f04f 30ff 	movhi.w	r0, #4294967295
 801f986:	bf98      	it	ls
 801f988:	2001      	movls	r0, #1
 801f98a:	4770      	bx	lr
 801f98c:	4608      	mov	r0, r1
 801f98e:	4770      	bx	lr

0801f990 <_write_r>:
 801f990:	b538      	push	{r3, r4, r5, lr}
 801f992:	4d07      	ldr	r5, [pc, #28]	; (801f9b0 <_write_r+0x20>)
 801f994:	4604      	mov	r4, r0
 801f996:	4608      	mov	r0, r1
 801f998:	4611      	mov	r1, r2
 801f99a:	2200      	movs	r2, #0
 801f99c:	602a      	str	r2, [r5, #0]
 801f99e:	461a      	mov	r2, r3
 801f9a0:	f7e3 fcd5 	bl	800334e <_write>
 801f9a4:	1c43      	adds	r3, r0, #1
 801f9a6:	d102      	bne.n	801f9ae <_write_r+0x1e>
 801f9a8:	682b      	ldr	r3, [r5, #0]
 801f9aa:	b103      	cbz	r3, 801f9ae <_write_r+0x1e>
 801f9ac:	6023      	str	r3, [r4, #0]
 801f9ae:	bd38      	pop	{r3, r4, r5, pc}
 801f9b0:	20003650 	.word	0x20003650

0801f9b4 <abort>:
 801f9b4:	b508      	push	{r3, lr}
 801f9b6:	2006      	movs	r0, #6
 801f9b8:	f000 f8b2 	bl	801fb20 <raise>
 801f9bc:	2001      	movs	r0, #1
 801f9be:	f7e3 fc9f 	bl	8003300 <_exit>
	...

0801f9c4 <_close_r>:
 801f9c4:	b538      	push	{r3, r4, r5, lr}
 801f9c6:	4d06      	ldr	r5, [pc, #24]	; (801f9e0 <_close_r+0x1c>)
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	4604      	mov	r4, r0
 801f9cc:	4608      	mov	r0, r1
 801f9ce:	602b      	str	r3, [r5, #0]
 801f9d0:	f7e3 fcd9 	bl	8003386 <_close>
 801f9d4:	1c43      	adds	r3, r0, #1
 801f9d6:	d102      	bne.n	801f9de <_close_r+0x1a>
 801f9d8:	682b      	ldr	r3, [r5, #0]
 801f9da:	b103      	cbz	r3, 801f9de <_close_r+0x1a>
 801f9dc:	6023      	str	r3, [r4, #0]
 801f9de:	bd38      	pop	{r3, r4, r5, pc}
 801f9e0:	20003650 	.word	0x20003650

0801f9e4 <_fstat_r>:
 801f9e4:	b538      	push	{r3, r4, r5, lr}
 801f9e6:	4d07      	ldr	r5, [pc, #28]	; (801fa04 <_fstat_r+0x20>)
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	4604      	mov	r4, r0
 801f9ec:	4608      	mov	r0, r1
 801f9ee:	4611      	mov	r1, r2
 801f9f0:	602b      	str	r3, [r5, #0]
 801f9f2:	f7e3 fcd4 	bl	800339e <_fstat>
 801f9f6:	1c43      	adds	r3, r0, #1
 801f9f8:	d102      	bne.n	801fa00 <_fstat_r+0x1c>
 801f9fa:	682b      	ldr	r3, [r5, #0]
 801f9fc:	b103      	cbz	r3, 801fa00 <_fstat_r+0x1c>
 801f9fe:	6023      	str	r3, [r4, #0]
 801fa00:	bd38      	pop	{r3, r4, r5, pc}
 801fa02:	bf00      	nop
 801fa04:	20003650 	.word	0x20003650

0801fa08 <_isatty_r>:
 801fa08:	b538      	push	{r3, r4, r5, lr}
 801fa0a:	4d06      	ldr	r5, [pc, #24]	; (801fa24 <_isatty_r+0x1c>)
 801fa0c:	2300      	movs	r3, #0
 801fa0e:	4604      	mov	r4, r0
 801fa10:	4608      	mov	r0, r1
 801fa12:	602b      	str	r3, [r5, #0]
 801fa14:	f7e3 fcd3 	bl	80033be <_isatty>
 801fa18:	1c43      	adds	r3, r0, #1
 801fa1a:	d102      	bne.n	801fa22 <_isatty_r+0x1a>
 801fa1c:	682b      	ldr	r3, [r5, #0]
 801fa1e:	b103      	cbz	r3, 801fa22 <_isatty_r+0x1a>
 801fa20:	6023      	str	r3, [r4, #0]
 801fa22:	bd38      	pop	{r3, r4, r5, pc}
 801fa24:	20003650 	.word	0x20003650

0801fa28 <_lseek_r>:
 801fa28:	b538      	push	{r3, r4, r5, lr}
 801fa2a:	4d07      	ldr	r5, [pc, #28]	; (801fa48 <_lseek_r+0x20>)
 801fa2c:	4604      	mov	r4, r0
 801fa2e:	4608      	mov	r0, r1
 801fa30:	4611      	mov	r1, r2
 801fa32:	2200      	movs	r2, #0
 801fa34:	602a      	str	r2, [r5, #0]
 801fa36:	461a      	mov	r2, r3
 801fa38:	f7e3 fccc 	bl	80033d4 <_lseek>
 801fa3c:	1c43      	adds	r3, r0, #1
 801fa3e:	d102      	bne.n	801fa46 <_lseek_r+0x1e>
 801fa40:	682b      	ldr	r3, [r5, #0]
 801fa42:	b103      	cbz	r3, 801fa46 <_lseek_r+0x1e>
 801fa44:	6023      	str	r3, [r4, #0]
 801fa46:	bd38      	pop	{r3, r4, r5, pc}
 801fa48:	20003650 	.word	0x20003650

0801fa4c <_realloc_r>:
 801fa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa50:	4680      	mov	r8, r0
 801fa52:	4614      	mov	r4, r2
 801fa54:	460e      	mov	r6, r1
 801fa56:	b921      	cbnz	r1, 801fa62 <_realloc_r+0x16>
 801fa58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa5c:	4611      	mov	r1, r2
 801fa5e:	f7fb bb57 	b.w	801b110 <_malloc_r>
 801fa62:	b92a      	cbnz	r2, 801fa70 <_realloc_r+0x24>
 801fa64:	f7fb fae8 	bl	801b038 <_free_r>
 801fa68:	4625      	mov	r5, r4
 801fa6a:	4628      	mov	r0, r5
 801fa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa70:	f000 f872 	bl	801fb58 <_malloc_usable_size_r>
 801fa74:	4284      	cmp	r4, r0
 801fa76:	4607      	mov	r7, r0
 801fa78:	d802      	bhi.n	801fa80 <_realloc_r+0x34>
 801fa7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fa7e:	d812      	bhi.n	801faa6 <_realloc_r+0x5a>
 801fa80:	4621      	mov	r1, r4
 801fa82:	4640      	mov	r0, r8
 801fa84:	f7fb fb44 	bl	801b110 <_malloc_r>
 801fa88:	4605      	mov	r5, r0
 801fa8a:	2800      	cmp	r0, #0
 801fa8c:	d0ed      	beq.n	801fa6a <_realloc_r+0x1e>
 801fa8e:	42bc      	cmp	r4, r7
 801fa90:	4622      	mov	r2, r4
 801fa92:	4631      	mov	r1, r6
 801fa94:	bf28      	it	cs
 801fa96:	463a      	movcs	r2, r7
 801fa98:	f7fb fa9e 	bl	801afd8 <memcpy>
 801fa9c:	4631      	mov	r1, r6
 801fa9e:	4640      	mov	r0, r8
 801faa0:	f7fb faca 	bl	801b038 <_free_r>
 801faa4:	e7e1      	b.n	801fa6a <_realloc_r+0x1e>
 801faa6:	4635      	mov	r5, r6
 801faa8:	e7df      	b.n	801fa6a <_realloc_r+0x1e>
	...

0801faac <_read_r>:
 801faac:	b538      	push	{r3, r4, r5, lr}
 801faae:	4d07      	ldr	r5, [pc, #28]	; (801facc <_read_r+0x20>)
 801fab0:	4604      	mov	r4, r0
 801fab2:	4608      	mov	r0, r1
 801fab4:	4611      	mov	r1, r2
 801fab6:	2200      	movs	r2, #0
 801fab8:	602a      	str	r2, [r5, #0]
 801faba:	461a      	mov	r2, r3
 801fabc:	f7e3 fc2a 	bl	8003314 <_read>
 801fac0:	1c43      	adds	r3, r0, #1
 801fac2:	d102      	bne.n	801faca <_read_r+0x1e>
 801fac4:	682b      	ldr	r3, [r5, #0]
 801fac6:	b103      	cbz	r3, 801faca <_read_r+0x1e>
 801fac8:	6023      	str	r3, [r4, #0]
 801faca:	bd38      	pop	{r3, r4, r5, pc}
 801facc:	20003650 	.word	0x20003650

0801fad0 <_raise_r>:
 801fad0:	291f      	cmp	r1, #31
 801fad2:	b538      	push	{r3, r4, r5, lr}
 801fad4:	4604      	mov	r4, r0
 801fad6:	460d      	mov	r5, r1
 801fad8:	d904      	bls.n	801fae4 <_raise_r+0x14>
 801fada:	2316      	movs	r3, #22
 801fadc:	6003      	str	r3, [r0, #0]
 801fade:	f04f 30ff 	mov.w	r0, #4294967295
 801fae2:	bd38      	pop	{r3, r4, r5, pc}
 801fae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fae6:	b112      	cbz	r2, 801faee <_raise_r+0x1e>
 801fae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801faec:	b94b      	cbnz	r3, 801fb02 <_raise_r+0x32>
 801faee:	4620      	mov	r0, r4
 801faf0:	f000 f830 	bl	801fb54 <_getpid_r>
 801faf4:	462a      	mov	r2, r5
 801faf6:	4601      	mov	r1, r0
 801faf8:	4620      	mov	r0, r4
 801fafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fafe:	f000 b817 	b.w	801fb30 <_kill_r>
 801fb02:	2b01      	cmp	r3, #1
 801fb04:	d00a      	beq.n	801fb1c <_raise_r+0x4c>
 801fb06:	1c59      	adds	r1, r3, #1
 801fb08:	d103      	bne.n	801fb12 <_raise_r+0x42>
 801fb0a:	2316      	movs	r3, #22
 801fb0c:	6003      	str	r3, [r0, #0]
 801fb0e:	2001      	movs	r0, #1
 801fb10:	e7e7      	b.n	801fae2 <_raise_r+0x12>
 801fb12:	2400      	movs	r4, #0
 801fb14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fb18:	4628      	mov	r0, r5
 801fb1a:	4798      	blx	r3
 801fb1c:	2000      	movs	r0, #0
 801fb1e:	e7e0      	b.n	801fae2 <_raise_r+0x12>

0801fb20 <raise>:
 801fb20:	4b02      	ldr	r3, [pc, #8]	; (801fb2c <raise+0xc>)
 801fb22:	4601      	mov	r1, r0
 801fb24:	6818      	ldr	r0, [r3, #0]
 801fb26:	f7ff bfd3 	b.w	801fad0 <_raise_r>
 801fb2a:	bf00      	nop
 801fb2c:	2000017c 	.word	0x2000017c

0801fb30 <_kill_r>:
 801fb30:	b538      	push	{r3, r4, r5, lr}
 801fb32:	4d07      	ldr	r5, [pc, #28]	; (801fb50 <_kill_r+0x20>)
 801fb34:	2300      	movs	r3, #0
 801fb36:	4604      	mov	r4, r0
 801fb38:	4608      	mov	r0, r1
 801fb3a:	4611      	mov	r1, r2
 801fb3c:	602b      	str	r3, [r5, #0]
 801fb3e:	f7e3 fbcf 	bl	80032e0 <_kill>
 801fb42:	1c43      	adds	r3, r0, #1
 801fb44:	d102      	bne.n	801fb4c <_kill_r+0x1c>
 801fb46:	682b      	ldr	r3, [r5, #0]
 801fb48:	b103      	cbz	r3, 801fb4c <_kill_r+0x1c>
 801fb4a:	6023      	str	r3, [r4, #0]
 801fb4c:	bd38      	pop	{r3, r4, r5, pc}
 801fb4e:	bf00      	nop
 801fb50:	20003650 	.word	0x20003650

0801fb54 <_getpid_r>:
 801fb54:	f7e3 bbbc 	b.w	80032d0 <_getpid>

0801fb58 <_malloc_usable_size_r>:
 801fb58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb5c:	1f18      	subs	r0, r3, #4
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	bfbc      	itt	lt
 801fb62:	580b      	ldrlt	r3, [r1, r0]
 801fb64:	18c0      	addlt	r0, r0, r3
 801fb66:	4770      	bx	lr

0801fb68 <_init>:
 801fb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb6a:	bf00      	nop
 801fb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb6e:	bc08      	pop	{r3}
 801fb70:	469e      	mov	lr, r3
 801fb72:	4770      	bx	lr

0801fb74 <_fini>:
 801fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb76:	bf00      	nop
 801fb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb7a:	bc08      	pop	{r3}
 801fb7c:	469e      	mov	lr, r3
 801fb7e:	4770      	bx	lr
