
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  080234cc  00000000  2**0
                  ALLOC
  2 .text         000207a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002b7c  08020940  08020940  00021940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080234bc  080234bc  0002532c  2**0
                  CONTENTS
  5 .ARM          00000008  080234bc  080234bc  000244bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080234c4  080234c4  0002532c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080234c4  080234c4  000244c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080234c8  080234c8  000244c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000032c  20000000  080234cc  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034c0  2000032c  080237f8  0002532c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200037ec  080237f8  000257ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002532c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035a5c  00000000  00000000  0002535c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008692  00000000  00000000  0005adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e20  00000000  00000000  00063450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002384  00000000  00000000  00066270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dd0  00000000  00000000  000685f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042e32  00000000  00000000  0008e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b410c  00000000  00000000  000d11f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d678  00000000  00000000  00185348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  001929c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000032c 	.word	0x2000032c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020928 	.word	0x08020928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000330 	.word	0x20000330
 80001dc:	08020928 	.word	0x08020928

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ee 	.word	0x200012ee
 80010f4:	20000348 	.word	0x20000348

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 fddd 	bl	8005cc4 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200015a5 	.word	0x200015a5
 8001128:	40020000 	.word	0x40020000
 800112c:	200015a4 	.word	0x200015a4

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 fded 	bl	8003d2c <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20001598 	.word	0x20001598
 8001160:	200017dc 	.word	0x200017dc

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 fda9 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 fdb5 	bl	8005cf4 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001550 	.word	0x20001550
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fb95 	bl	80048f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fbae 	bl	800492a <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 fd98 	bl	8003d44 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001550 	.word	0x20001550
 800121c:	40000400 	.word	0x40000400
 8001220:	20000348 	.word	0x20000348

08001224 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01c f8f8 	bl	801d428 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <clock_speed_slow+0xbc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <clock_speed_slow+0xbc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <clock_speed_slow+0xbc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <clock_speed_slow+0xc0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <clock_speed_slow+0xc0>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <clock_speed_slow+0xc0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001284:	2306      	movs	r3, #6
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f007 f9fb 	bl	8008698 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <clock_speed_slow+0x88>
		Error_Handler();
 80012a8:	f001 fff6 	bl	8003298 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f007 fc5e 	bl	8008b88 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <clock_speed_slow+0xb2>
		Error_Handler();
 80012d2:	f001 ffe1 	bl	8003298 <Error_Handler>
	}

}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	@ 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012ee:	4b45      	ldr	r3, [pc, #276]	@ (8001404 <clock_speed_high+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a44      	ldr	r2, [pc, #272]	@ (8001404 <clock_speed_high+0x11c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 8001302:	bf00      	nop
 8001304:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <clock_speed_high+0x11c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <clock_speed_high+0x36>
 8001310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	f8a7 204e 	strh.w	r2, [r7, #78]	@ 0x4e
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f2      	bne.n	8001304 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 800131e:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <clock_speed_high+0x11c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <clock_speed_high+0x11c>)
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <clock_speed_high+0x11c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a35      	ldr	r2, [pc, #212]	@ (8001404 <clock_speed_high+0x11c>)
 8001330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001334:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2230      	movs	r2, #48	@ 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f01c f872 	bl	801d428 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <clock_speed_high+0x11c>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <clock_speed_high+0x11c>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	@ 0x40
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <clock_speed_high+0x11c>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <clock_speed_high+0x120>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800137c:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <clock_speed_high+0x120>)
 800137e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <clock_speed_high+0x120>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001390:	2305      	movs	r3, #5
 8001392:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013a8:	2319      	movs	r3, #25
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b6:	2307      	movs	r3, #7
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f96a 	bl	8008698 <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <clock_speed_high+0xe6>
		Error_Handler();
 80013ca:	f001 ff65 	bl	8003298 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fbcc 	bl	8008b88 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <clock_speed_high+0x112>
		Error_Handler();
 80013f6:	f001 ff4f 	bl	8003298 <Error_Handler>
	}

}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <load_param+0xa4>)
 8001414:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 800141c:	b29b      	uxth	r3, r3
 800141e:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001422:	4293      	cmp	r3, r2
 8001424:	d118      	bne.n	8001458 <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 8001426:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <load_param+0xa8>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f240 235f 	movw	r3, #607	@ 0x25f
 8001432:	461a      	mov	r2, r3
 8001434:	f01c f90f 	bl	801d656 <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 8001438:	491f      	ldr	r1, [pc, #124]	@ (80014b8 <load_param+0xac>)
 800143a:	481e      	ldr	r0, [pc, #120]	@ (80014b4 <load_param+0xa8>)
 800143c:	f01c f866 	bl	801d50c <strstr>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d019      	beq.n	800147a <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 8001446:	f000 ffb9 	bl	80023bc <ver_GetUid>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <load_param+0xb0>)
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <load_param+0xa8>)
 8001452:	f01b fe9f 	bl	801d194 <siprintf>
 8001456:	e010      	b.n	800147a <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 8001458:	4a16      	ldr	r2, [pc, #88]	@ (80014b4 <load_param+0xa8>)
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <load_param+0xb4>)
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f240 235f 	movw	r3, #607	@ 0x25f
 8001464:	461a      	mov	r2, r3
 8001466:	f01c f8f6 	bl	801d656 <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800146a:	f000 ffa7 	bl	80023bc <ver_GetUid>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4912      	ldr	r1, [pc, #72]	@ (80014bc <load_param+0xb0>)
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <load_param+0xa8>)
 8001476:	f01b fe8d 	bl	801d194 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800147a:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <load_param+0xb8>)
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <load_param+0xbc>)
 800147e:	f01c f845 	bl	801d50c <strstr>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <load_param+0xc0>)
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001490:	e00a      	b.n	80014a8 <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001492:	490f      	ldr	r1, [pc, #60]	@ (80014d0 <load_param+0xc4>)
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <load_param+0xbc>)
 8001496:	f01c f839 	bl	801d50c <strstr>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <load_param+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08060000 	.word	0x08060000
 80014b4:	200012f0 	.word	0x200012f0
 80014b8:	08020940 	.word	0x08020940
 80014bc:	08020948 	.word	0x08020948
 80014c0:	0802292c 	.word	0x0802292c
 80014c4:	0802094c 	.word	0x0802094c
 80014c8:	20001354 	.word	0x20001354
 80014cc:	20001550 	.word	0x20001550
 80014d0:	08020954 	.word	0x08020954

080014d4 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014da:	b672      	cpsid	i
}
 80014dc:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <store_param+0xc0>)
 80014e0:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80014e2:	f003 fee7 	bl	80052b4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <store_param+0xc4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <store_param+0xc4>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <store_param+0xc4>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <store_param+0xc4>)
 80014fa:	2220      	movs	r2, #32
 80014fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <store_param+0xc4>)
 8001500:	2240      	movs	r2, #64	@ 0x40
 8001502:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <store_param+0xc4>)
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <store_param+0xc4>)
 800150c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001510:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <store_param+0xc8>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <store_param+0xc8>)
 800151a:	2202      	movs	r2, #2
 800151c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <store_param+0xc8>)
 8001520:	2207      	movs	r2, #7
 8001522:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <store_param+0xc8>)
 8001526:	2201      	movs	r2, #1
 8001528:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <store_param+0xc8>)
 8001530:	f004 f83e 	bl	80055b0 <HAL_FLASHEx_Erase>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800153a:	f003 feed 	bl	8005318 <HAL_FLASH_GetError>
 800153e:	4603      	mov	r3, r0
 8001540:	e024      	b.n	800158c <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <store_param+0xcc>)
 8001544:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <store_param+0xd0>)
 8001548:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800154a:	e016      	b.n	800157a <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 800154c:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	2002      	movs	r0, #2
 8001556:	f003 fe59 	bl	800520c <HAL_FLASH_Program>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <store_param+0x9a>

		{
			WrAdr += 4;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3304      	adds	r3, #4
 8001564:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3304      	adds	r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e005      	b.n	800157a <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 800156e:	f003 fec3 	bl	80052f8 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001572:	f003 fed1 	bl	8005318 <HAL_FLASH_GetError>
 8001576:	4603      	mov	r3, r0
 8001578:	e008      	b.n	800158c <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3e4      	bcc.n	800154c <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001582:	f003 feb9 	bl	80052f8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8001586:	b662      	cpsie	i
}
 8001588:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800158a:	2300      	movs	r3, #0

}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200012f0 	.word	0x200012f0
 8001598:	40023c00 	.word	0x40023c00
 800159c:	200017f8 	.word	0x200017f8
 80015a0:	0806025f 	.word	0x0806025f
 80015a4:	08060000 	.word	0x08060000

080015a8 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if (save_param) {
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <save_data+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <save_data+0x52>
		if (start_timer) {
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <save_data+0x5c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015bc:	4812      	ldr	r0, [pc, #72]	@ (8001608 <save_data+0x60>)
 80015be:	f009 fb5d 	bl	800ac7c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <save_data+0x60>)
 80015c4:	f009 faf8 	bl	800abb8 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <save_data+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <save_data+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <save_data+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015dc:	d30d      	bcc.n	80015fa <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80015de:	480a      	ldr	r0, [pc, #40]	@ (8001608 <save_data+0x60>)
 80015e0:	f009 fb4c 	bl	800ac7c <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80015e4:	f7ff ff76 	bl	80014d4 <store_param>
			time_keep = 0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <save_data+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <save_data+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <save_data+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20001595 	.word	0x20001595
 8001604:	20001596 	.word	0x20001596
 8001608:	200019a0 	.word	0x200019a0
 800160c:	20001598 	.word	0x20001598

08001610 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	int16_t error = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800161a:	f012 f867 	bl	80136ec <sensirion_i2c_hal_init>
	init_driver(SCD30_I2C_ADDR_61);
 800161e:	2061      	movs	r0, #97	@ 0x61
 8001620:	f011 fcfa 	bl	8013018 <init_driver>
	scd30_stop_periodic_measurement();
 8001624:	f011 fd90 	bl	8013148 <scd30_stop_periodic_measurement>
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 8001630:	1d3a      	adds	r2, r7, #4
 8001632:	1d7b      	adds	r3, r7, #5
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f011 feae 	bl	8013398 <scd30_read_firmware_version>
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b09e      	sub	sp, #120	@ 0x78
 800164e:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 8001650:	2300      	movs	r3, #0
 8001652:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001656:	2000      	movs	r0, #0
 8001658:	f011 fd3e 	bl	80130d8 <scd30_start_periodic_measurement>

	uint16_t repetition = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	for (repetition = 0; repetition < 1; repetition++) {
 8001662:	2300      	movs	r3, #0
 8001664:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001668:	e070      	b.n	800174c <get_scd30_measurement+0x104>
		sensirion_i2c_hal_sleep_usec(1500000);
 800166a:	483d      	ldr	r0, [pc, #244]	@ (8001760 <get_scd30_measurement+0x118>)
 800166c:	f012 f8b4 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001670:	4a3c      	ldr	r2, [pc, #240]	@ (8001764 <get_scd30_measurement+0x11c>)
 8001672:	493d      	ldr	r1, [pc, #244]	@ (8001768 <get_scd30_measurement+0x120>)
 8001674:	483d      	ldr	r0, [pc, #244]	@ (800176c <get_scd30_measurement+0x124>)
 8001676:	f011 fd0f 	bl	8013098 <scd30_blocking_read_measurement_data>
 800167a:	4603      	mov	r3, r0
 800167c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001680:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <get_scd30_measurement+0x128>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05c      	beq.n	8001742 <get_scd30_measurement+0xfa>
			char buf[100];
			if (error) {
 8001688:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <get_scd30_measurement+0x70>
				sprintf(buf,
 8001690:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001694:	463b      	mov	r3, r7
 8001696:	4937      	ldr	r1, [pc, #220]	@ (8001774 <get_scd30_measurement+0x12c>)
 8001698:	4618      	mov	r0, r3
 800169a:	f01b fd7b 	bl	801d194 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800169e:	463b      	mov	r3, r7
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fdfd 	bl	80002a0 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4639      	mov	r1, r7
 80016ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b0:	4831      	ldr	r0, [pc, #196]	@ (8001778 <get_scd30_measurement+0x130>)
 80016b2:	f00a fa9f 	bl	800bbf4 <HAL_UART_Transmit>
 80016b6:	e044      	b.n	8001742 <get_scd30_measurement+0xfa>
			} else if (_RunTime_Packet.co2 == 0) {
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <get_scd30_measurement+0x124>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d111      	bne.n	80016ec <get_scd30_measurement+0xa4>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80016c8:	463b      	mov	r3, r7
 80016ca:	492c      	ldr	r1, [pc, #176]	@ (800177c <get_scd30_measurement+0x134>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f01b fd61 	bl	801d194 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fde3 	bl	80002a0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4639      	mov	r1, r7
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	4824      	ldr	r0, [pc, #144]	@ (8001778 <get_scd30_measurement+0x130>)
 80016e6:	f00a fa85 	bl	800bbf4 <HAL_UART_Transmit>
 80016ea:	e02a      	b.n	8001742 <get_scd30_measurement+0xfa>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <get_scd30_measurement+0x124>)
 80016ee:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff41 	bl	8000578 <__aeabi_f2d>
 80016f6:	4680      	mov	r8, r0
 80016f8:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <get_scd30_measurement+0x124>)
 80016fc:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff3a 	bl	8000578 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <get_scd30_measurement+0x124>)
 800170a:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4638      	mov	r0, r7
 8001718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171c:	e9cd 4500 	strd	r4, r5, [sp]
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	4916      	ldr	r1, [pc, #88]	@ (8001780 <get_scd30_measurement+0x138>)
 8001726:	f01b fd35 	bl	801d194 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fdb7 	bl	80002a0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	4639      	mov	r1, r7
 8001738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <get_scd30_measurement+0x130>)
 800173e:	f00a fa59 	bl	800bbf4 <HAL_UART_Transmit>
	for (repetition = 0; repetition < 1; repetition++) {
 8001742:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001746:	3301      	adds	r3, #1
 8001748:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800174c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001750:	2b00      	cmp	r3, #0
 8001752:	d08a      	beq.n	800166a <get_scd30_measurement+0x22>
			}
		}
	}
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3768      	adds	r7, #104	@ 0x68
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001760:	0016e360 	.word	0x0016e360
 8001764:	20001558 	.word	0x20001558
 8001768:	20001554 	.word	0x20001554
 800176c:	20001550 	.word	0x20001550
 8001770:	20001594 	.word	0x20001594
 8001774:	0802095c 	.word	0x0802095c
 8001778:	20001a90 	.word	0x20001a90
 800177c:	08020994 	.word	0x08020994
 8001780:	080209b8 	.word	0x080209b8

08001784 <init_sps30>:

#endif

static void init_sps30() {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <init_sps30+0x34>)
 800178c:	f012 fc28 	bl	8013fe0 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001790:	f012 fb70 	bl	8013e74 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fd41 	bl	801421e <sps30_read_version>
 800179c:	4603      	mov	r3, r0
 800179e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4618      	mov	r0, r3
 80017a6:	f012 fc2f 	bl	8014008 <sps30_get_serial>
 80017aa:	4603      	mov	r3, r0
 80017ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	@ 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000f4240 	.word	0x000f4240

080017bc <get_sps30_measurement>:
void get_sps30_measurement() {
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b0a0      	sub	sp, #128	@ 0x80
 80017c2:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80017c4:	f012 fc4c 	bl	8014060 <sps30_start_measurement>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 80017ce:	483a      	ldr	r0, [pc, #232]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017d0:	f012 fc72 	bl	80140b8 <sps30_read_measurement>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a37      	ldr	r2, [pc, #220]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e0:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 80017e2:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <get_sps30_measurement+0x100>)
 80017e8:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a33      	ldr	r2, [pc, #204]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f0:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <get_sps30_measurement+0xfc>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <get_sps30_measurement+0x100>)
 80017f8:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80017fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db54      	blt.n	80018ac <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <get_sps30_measurement+0x104>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d050      	beq.n	80018ac <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800180a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800180e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8001812:	b21b      	sxth	r3, r3
 8001814:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001818:	4293      	cmp	r3, r2
 800181a:	d113      	bne.n	8001844 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800181c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001820:	b2da      	uxtb	r2, r3
 8001822:	463b      	mov	r3, r7
 8001824:	4927      	ldr	r1, [pc, #156]	@ (80018c4 <get_sps30_measurement+0x108>)
 8001826:	4618      	mov	r0, r3
 8001828:	f01b fcb4 	bl	801d194 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd36 	bl	80002a0 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	4639      	mov	r1, r7
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	4822      	ldr	r0, [pc, #136]	@ (80018c8 <get_sps30_measurement+0x10c>)
 8001840:	f00a f9d8 	bl	800bbf4 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001846:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe95 	bl	8000578 <__aeabi_f2d>
 800184e:	4682      	mov	sl, r0
 8001850:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001854:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe8e 	bl	8000578 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001862:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe87 	bl	8000578 <__aeabi_f2d>
 800186a:	4680      	mov	r8, r0
 800186c:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <get_sps30_measurement+0xfc>)
 8001870:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe80 	bl	8000578 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4638      	mov	r0, r7
 800187e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001882:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001886:	e9cd 4500 	strd	r4, r5, [sp]
 800188a:	4652      	mov	r2, sl
 800188c:	465b      	mov	r3, fp
 800188e:	490f      	ldr	r1, [pc, #60]	@ (80018cc <get_sps30_measurement+0x110>)
 8001890:	f01b fc80 	bl	801d194 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001894:	463b      	mov	r3, r7
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fd02 	bl	80002a0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4639      	mov	r1, r7
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <get_sps30_measurement+0x10c>)
 80018a8:	f00a f9a4 	bl	800bbf4 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 80018ac:	bf00      	nop
 80018ae:	3768      	adds	r7, #104	@ 0x68
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	200017b4 	.word	0x200017b4
 80018bc:	20001550 	.word	0x20001550
 80018c0:	20001594 	.word	0x20001594
 80018c4:	080209ec 	.word	0x080209ec
 80018c8:	20001a90 	.word	0x20001a90
 80018cc:	08020a20 	.word	0x08020a20

080018d0 <check_peripheral_error>:
static void check_peripheral_error() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <check_peripheral_error+0xa0>)
 80018d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <check_peripheral_error+0xa0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 80018e8:	f00f fb9e 	bl	8011028 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <check_peripheral_error+0xa0>)
 80018ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <check_peripheral_error+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <check_peripheral_error+0xa4>)
 8001906:	f004 f9f5 	bl	8005cf4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800190a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800190e:	f002 fa19 	bl	8003d44 <HAL_Delay>
		enable_5v();
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001918:	4816      	ldr	r0, [pc, #88]	@ (8001974 <check_peripheral_error+0xa4>)
 800191a:	f004 f9eb 	bl	8005cf4 <HAL_GPIO_WritePin>
		init_sps30();
 800191e:	f7ff ff31 	bl	8001784 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	2205      	movs	r2, #5
 8001928:	21c2      	movs	r1, #194	@ 0xc2
 800192a:	4813      	ldr	r0, [pc, #76]	@ (8001978 <check_peripheral_error+0xa8>)
 800192c:	f004 feac 	bl	8006688 <HAL_I2C_IsDeviceReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d018      	beq.n	8001968 <check_peripheral_error+0x98>
			!= HAL_OK) {

		if (debug_scd_pm) {
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <check_peripheral_error+0xac>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	490f      	ldr	r1, [pc, #60]	@ (8001980 <check_peripheral_error+0xb0>)
 8001942:	4618      	mov	r0, r3
 8001944:	f01b fc26 	bl	801d194 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fca8 	bl	80002a0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195a:	480a      	ldr	r0, [pc, #40]	@ (8001984 <check_peripheral_error+0xb4>)
 800195c:	f00a f94a 	bl	800bbf4 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <check_peripheral_error+0xa0>)
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

}
 8001968:	bf00      	nop
 800196a:	3738      	adds	r7, #56	@ 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20001550 	.word	0x20001550
 8001974:	40020400 	.word	0x40020400
 8001978:	20001854 	.word	0x20001854
 800197c:	20001594 	.word	0x20001594
 8001980:	08020a58 	.word	0x08020a58
 8001984:	20001a90 	.word	0x20001a90

08001988 <sensor_calibration>:
static void sensor_calibration() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <sensor_calibration+0x28>)
 800198e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <sensor_calibration+0x24>
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <sensor_calibration+0x28>)
 8001998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <sensor_calibration+0x28>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 80019a8:	f012 fc25 	bl	80141f6 <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20001550 	.word	0x20001550

080019b4 <sleep>:
static void sleep() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <sleep+0xc0>)
 80019ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 80019c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <sleep+0xc0>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c6:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 80019c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <sleep+0xc4>)
 80019ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ce:	2008      	movs	r0, #8
 80019d0:	f7ff fb20 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 80019d4:	4829      	ldr	r0, [pc, #164]	@ (8001a7c <sleep+0xc8>)
 80019d6:	f002 fa60 	bl	8003e9a <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	220b      	movs	r2, #11
 80019e0:	4927      	ldr	r1, [pc, #156]	@ (8001a80 <sleep+0xcc>)
 80019e2:	4828      	ldr	r0, [pc, #160]	@ (8001a84 <sleep+0xd0>)
 80019e4:	f00a f906 	bl	800bbf4 <HAL_UART_Transmit>
	disable_5v();
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ee:	4826      	ldr	r0, [pc, #152]	@ (8001a88 <sleep+0xd4>)
 80019f0:	f004 f980 	bl	8005cf4 <HAL_GPIO_WritePin>
	disable_motion();
 80019f4:	2201      	movs	r2, #1
 80019f6:	2102      	movs	r1, #2
 80019f8:	4824      	ldr	r0, [pc, #144]	@ (8001a8c <sleep+0xd8>)
 80019fa:	f004 f97b 	bl	8005cf4 <HAL_GPIO_WritePin>
#ifdef use_scd40x
	scd4x_stop_periodic_measurement();
	scd4x_power_down();
#elif use_scd30
	scd30_stop_periodic_measurement();
 80019fe:	f011 fba3 	bl	8013148 <scd30_stop_periodic_measurement>
#endif
	console_uart_deinit();
 8001a02:	f00f fb05 	bl	8011010 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001a06:	f011 fea3 	bl	8013750 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001a0a:	f012 fa73 	bl	8013ef4 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001a0e:	f019 fd09 	bl	801b424 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001a12:	481f      	ldr	r0, [pc, #124]	@ (8001a90 <sleep+0xdc>)
 8001a14:	f009 f821 	bl	800aa5a <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001a18:	481e      	ldr	r0, [pc, #120]	@ (8001a94 <sleep+0xe0>)
 8001a1a:	f009 f81e 	bl	800aa5a <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001a1e:	481e      	ldr	r0, [pc, #120]	@ (8001a98 <sleep+0xe4>)
 8001a20:	f009 f81b 	bl	800aa5a <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001a24:	481d      	ldr	r0, [pc, #116]	@ (8001a9c <sleep+0xe8>)
 8001a26:	f003 f85b 	bl	8004ae0 <HAL_DMA_DeInit>

	clock_speed_slow();
 8001a2a:	f7ff fbfb 	bl	8001224 <clock_speed_slow>

	HAL_SuspendTick();
 8001a2e:	f002 f9ad 	bl	8003d8c <HAL_SuspendTick>
	Rtc_Alarm_watchdog();
 8001a32:	f010 ffab 	bl	801298c <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001a36:	481a      	ldr	r0, [pc, #104]	@ (8001aa0 <sleep+0xec>)
 8001a38:	f005 fac3 	bl	8006fc2 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f006 fdfe 	bl	8008640 <HAL_PWR_EnterSTOPMode>
	HAL_IWDG_Refresh(&hiwdg);
 8001a44:	4816      	ldr	r0, [pc, #88]	@ (8001aa0 <sleep+0xec>)
 8001a46:	f005 fabc 	bl	8006fc2 <HAL_IWDG_Refresh>
	Rtc_Alarm_watchdog();
 8001a4a:	f010 ff9f 	bl	801298c <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <sleep+0xf0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <sleep+0xb6>
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <sleep+0xf4>)
 8001a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d104      	bne.n	8001a6a <sleep+0xb6>
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <sleep+0xf4>)
 8001a62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0e5      	beq.n	8001a36 <sleep+0x82>

	Rtc_Alarm_watchdog_disable();
 8001a6a:	f010 ff7d 	bl	8012968 <Rtc_Alarm_watchdog_disable>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40000400 	.word	0x40000400
 8001a78:	20000348 	.word	0x20000348
 8001a7c:	2000180c 	.word	0x2000180c
 8001a80:	08020a80 	.word	0x08020a80
 8001a84:	20001a90 	.word	0x20001a90
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	20001958 	.word	0x20001958
 8001a94:	200019a0 	.word	0x200019a0
 8001a98:	200019e8 	.word	0x200019e8
 8001a9c:	20001a30 	.word	0x20001a30
 8001aa0:	200018a8 	.word	0x200018a8
 8001aa4:	20000029 	.word	0x20000029
 8001aa8:	20001550 	.word	0x20001550

08001aac <wakeup>:
static void wakeup() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 8001ab0:	f002 f97c 	bl	8003dac <HAL_ResumeTick>
	clock_speed_high();
 8001ab4:	f7ff fc18 	bl	80012e8 <clock_speed_high>
	enable_5v();
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001abe:	4838      	ldr	r0, [pc, #224]	@ (8001ba0 <wakeup+0xf4>)
 8001ac0:	f004 f918 	bl	8005cf4 <HAL_GPIO_WritePin>
	enable_motion();
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4836      	ldr	r0, [pc, #216]	@ (8001ba4 <wakeup+0xf8>)
 8001aca:	f004 f913 	bl	8005cf4 <HAL_GPIO_WritePin>
	console_uart_init();
 8001ace:	f00f faab 	bl	8011028 <console_uart_init>

	MX_DMA_Init();
 8001ad2:	f7ff fb63 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001ad6:	f001 f8db 	bl	8002c90 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ada:	f001 f929 	bl	8002d30 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001ade:	f001 f975 	bl	8002dcc <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001ae2:	f7ff fd95 	bl	8001610 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001ae6:	4830      	ldr	r0, [pc, #192]	@ (8001ba8 <wakeup+0xfc>)
 8001ae8:	f018 fe22 	bl	801a730 <Mount_SD>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <wakeup+0x52>
		Unmount_SD("/");
 8001af2:	482d      	ldr	r0, [pc, #180]	@ (8001ba8 <wakeup+0xfc>)
 8001af4:	f018 fe48 	bl	801a788 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001af8:	f019 fca6 	bl	801b448 <MX_USB_DEVICE_Init>
 8001afc:	e002      	b.n	8001b04 <wakeup+0x58>
	} else {
		datawritten = 2;
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <wakeup+0x100>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b08:	4826      	ldr	r0, [pc, #152]	@ (8001ba4 <wakeup+0xf8>)
 8001b0a:	f004 f8db 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <wakeup+0x6e>
		init_sps30();
 8001b14:	f7ff fe36 	bl	8001784 <init_sps30>
 8001b18:	e00f      	b.n	8001b3a <wakeup+0x8e>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <wakeup+0x104>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <wakeup+0x104>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <wakeup+0x108>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001b30:	f002 f8fc 	bl	8003d2c <HAL_GetTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a20      	ldr	r2, [pc, #128]	@ (8001bb8 <wakeup+0x10c>)
 8001b38:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001b3a:	4820      	ldr	r0, [pc, #128]	@ (8001bbc <wakeup+0x110>)
 8001b3c:	f008 ffe2 	bl	800ab04 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001b40:	491f      	ldr	r1, [pc, #124]	@ (8001bc0 <wakeup+0x114>)
 8001b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <wakeup+0x118>)
 8001b48:	481f      	ldr	r0, [pc, #124]	@ (8001bc8 <wakeup+0x11c>)
 8001b4a:	f003 f827 	bl	8004b9c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <wakeup+0x110>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <wakeup+0x110>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b5c:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001b5e:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <wakeup+0x114>)
 8001b60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b64:	2008      	movs	r0, #8
 8001b66:	f7ff fa55 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <wakeup+0x120>)
 8001b6e:	f009 f90d 	bl	800ad8c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <wakeup+0x124>)
 8001b74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4813      	ldr	r0, [pc, #76]	@ (8001bcc <wakeup+0x120>)
 8001b7e:	f009 f905 	bl	800ad8c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <wakeup+0x124>)
 8001b84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b88:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001b8a:	f7ff fb27 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	220a      	movs	r2, #10
 8001b94:	490f      	ldr	r1, [pc, #60]	@ (8001bd4 <wakeup+0x128>)
 8001b96:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <wakeup+0x12c>)
 8001b98:	f00a f82c 	bl	800bbf4 <HAL_UART_Transmit>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	08020a8c 	.word	0x08020a8c
 8001bac:	2000233c 	.word	0x2000233c
 8001bb0:	20001550 	.word	0x20001550
 8001bb4:	200015a0 	.word	0x200015a0
 8001bb8:	200017e4 	.word	0x200017e4
 8001bbc:	20001958 	.word	0x20001958
 8001bc0:	20000348 	.word	0x20000348
 8001bc4:	40020418 	.word	0x40020418
 8001bc8:	20001a30 	.word	0x20001a30
 8001bcc:	200019e8 	.word	0x200019e8
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	08020a90 	.word	0x08020a90
 8001bd8:	20001a90 	.word	0x20001a90

08001bdc <green_led_blink>:

static void green_led_blink() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <green_led_blink+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001be6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bea:	f002 f8ab 	bl	8003d44 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <green_led_blink+0x4c>)
 8001bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001bf6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bfa:	f002 f8a3 	bl	8003d44 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <green_led_blink+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c04:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c08:	f002 f89c 	bl	8003d44 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <green_led_blink+0x4c>)
 8001c0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c14:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001c18:	f002 f894 	bl	8003d44 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <green_led_blink+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40000400 	.word	0x40000400

08001c2c <led_awake_routine>:

static void led_awake_routine() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001c30:	4ba6      	ldr	r3, [pc, #664]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001c32:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8195 	bne.w	8001f66 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c40:	48a3      	ldr	r0, [pc, #652]	@ (8001ed0 <led_awake_routine+0x2a4>)
 8001c42:	f004 f83f 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d025      	beq.n	8001c98 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001c4c:	4b9f      	ldr	r3, [pc, #636]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001c4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c52:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	db0d      	blt.n	8001c7c <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001c60:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c66:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001c6e:	4a9b      	ldr	r2, [pc, #620]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c74:	2008      	movs	r0, #8
 8001c76:	f7ff f9cd 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001c7a:	e196      	b.n	8001faa <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001c7c:	4b96      	ldr	r3, [pc, #600]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c82:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001c84:	4b94      	ldr	r3, [pc, #592]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001c86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c8a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001c8c:	4a93      	ldr	r2, [pc, #588]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2008      	movs	r0, #8
 8001c92:	f7ff f9bf 	bl	8001014 <setSoftPWM>
}
 8001c96:	e188      	b.n	8001faa <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001c98:	4a90      	ldr	r2, [pc, #576]	@ (8001edc <led_awake_routine+0x2b0>)
 8001c9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c9e:	2008      	movs	r0, #8
 8001ca0:	f7ff f9b8 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001ca4:	4b89      	ldr	r3, [pc, #548]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001ca6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001caa:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	db38      	blt.n	8001d2a <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001cb8:	4b87      	ldr	r3, [pc, #540]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001cba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cbe:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001cc0:	4a86      	ldr	r2, [pc, #536]	@ (8001edc <led_awake_routine+0x2b0>)
 8001cc2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f7ff f9a4 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001cd4:	4b83      	ldr	r3, [pc, #524]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3305      	adds	r3, #5
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b80      	ldr	r3, [pc, #512]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e008      	b.n	8001cfa <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b05      	subs	r3, #5
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cf8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d04:	dd03      	ble.n	8001d0e <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001d06:	4b76      	ldr	r3, [pc, #472]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e007      	b.n	8001d1e <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001d0e:	4b75      	ldr	r3, [pc, #468]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	dc02      	bgt.n	8001d1e <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001d18:	4b71      	ldr	r3, [pc, #452]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001d1e:	4b71      	ldr	r3, [pc, #452]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d24:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d28:	e13f      	b.n	8001faa <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001d2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001d2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d30:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	dd42      	ble.n	8001dc4 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001d3e:	4b63      	ldr	r3, [pc, #396]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001d40:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d44:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001ed4 <led_awake_routine+0x2a8>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d838      	bhi.n	8001dc4 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001d52:	4b61      	ldr	r3, [pc, #388]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001d54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d5a:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <led_awake_routine+0x2b0>)
 8001d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d60:	2008      	movs	r0, #8
 8001d62:	f7ff f957 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d66:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3305      	adds	r3, #5
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	e008      	b.n	8001d94 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001d82:	4b58      	ldr	r3, [pc, #352]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b05      	subs	r3, #5
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	4b54      	ldr	r3, [pc, #336]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d92:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9e:	dd03      	ble.n	8001da8 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e007      	b.n	8001db8 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dc02      	bgt.n	8001db8 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001db8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc2:	e0f2      	b.n	8001faa <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001dc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001dc6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dca:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ee8 <led_awake_routine+0x2bc>
 8001dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	f340 808d 	ble.w	8001ef4 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001dda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <led_awake_routine+0x2a0>)
 8001ddc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de0:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	f200 8082 	bhi.w	8001ef4 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <led_awake_routine+0x2c0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d003      	beq.n	8001e04 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <led_awake_routine+0x2c0>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e02:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001e04:	4a35      	ldr	r2, [pc, #212]	@ (8001edc <led_awake_routine+0x2b0>)
 8001e06:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e0a:	2008      	movs	r0, #8
 8001e0c:	f7ff f902 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e10:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3305      	adds	r3, #5
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e008      	b.n	8001e3e <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b05      	subs	r3, #5
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e3c:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e48:	dd03      	ble.n	8001e52 <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e007      	b.n	8001e62 <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	dc02      	bgt.n	8001e62 <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <led_awake_routine+0x2b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <led_awake_routine+0x2c0>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3305      	adds	r3, #5
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e7a:	801a      	strh	r2, [r3, #0]
 8001e7c:	e008      	b.n	8001e90 <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b05      	subs	r3, #5
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e9a:	dd03      	ble.n	8001ea4 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <led_awake_routine+0x2c0>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e007      	b.n	8001eb4 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	dc02      	bgt.n	8001eb4 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <led_awake_routine+0x2c0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <led_awake_routine+0x2b8>)
 8001eb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001ebc:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <led_awake_routine+0x2c4>)
 8001ec0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <led_awake_routine+0x2ac>)
 8001ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ec8:	e06f      	b.n	8001faa <led_awake_routine+0x37e>
 8001eca:	bf00      	nop
 8001ecc:	20001550 	.word	0x20001550
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40833333 	.word	0x40833333
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	20000348 	.word	0x20000348
 8001ee0:	200012e8 	.word	0x200012e8
 8001ee4:	200012ea 	.word	0x200012ea
 8001ee8:	40533333 	.word	0x40533333
 8001eec:	200012e9 	.word	0x200012e9
 8001ef0:	200012ec 	.word	0x200012ec
				GREEN_LED_PWM(disable_led);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <led_awake_routine+0x384>)
 8001ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001efc:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <led_awake_routine+0x388>)
 8001efe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff f886 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001f08:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <led_awake_routine+0x390>)
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3305      	adds	r3, #5
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <led_awake_routine+0x390>)
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	e008      	b.n	8001f36 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <led_awake_routine+0x390>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <led_awake_routine+0x390>)
 8001f34:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f36:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <led_awake_routine+0x390>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f40:	dd03      	ble.n	8001f4a <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <led_awake_routine+0x390>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc02      	bgt.n	8001f5a <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <led_awake_routine+0x38c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <led_awake_routine+0x390>)
 8001f5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f64:	e021      	b.n	8001faa <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001f66:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8001f6e:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <led_awake_routine+0x388>)
 8001f70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f74:	2008      	movs	r0, #8
 8001f76:	f7ff f84d 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <led_awake_routine+0x390>)
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f84:	d004      	beq.n	8001f90 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <led_awake_routine+0x390>)
 8001f88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	e002      	b.n	8001f96 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <led_awake_routine+0x390>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <led_awake_routine+0x390>)
 8001f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <led_awake_routine+0x384>)
 8001f9e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8001fa0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fa4:	f001 fece 	bl	8003d44 <HAL_Delay>
}
 8001fa8:	e7ff      	b.n	8001faa <led_awake_routine+0x37e>
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	20000348 	.word	0x20000348
 8001fb8:	200012e9 	.word	0x200012e9
 8001fbc:	200012ec 	.word	0x200012ec

08001fc0 <blink_red>:

void blink_red() {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <blink_red+0x60>)
 8001fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <blink_red+0x64>)
 8001fce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	f7ff f81e 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <blink_red+0x60>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe2:	f001 feaf 	bl	8003d44 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <blink_red+0x60>)
 8001fe8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ff2:	f001 fea7 	bl	8003d44 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <blink_red+0x60>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002000:	f001 fea0 	bl	8003d44 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <blink_red+0x60>)
 8002006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800200a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 800200c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002010:	f001 fe98 	bl	8003d44 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8002014:	4b02      	ldr	r3, [pc, #8]	@ (8002020 <blink_red+0x60>)
 8002016:	2200      	movs	r2, #0
 8002018:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40000400 	.word	0x40000400
 8002024:	20000348 	.word	0x20000348

08002028 <led_awake_routine1>:

static void led_awake_routine1() {
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 800202c:	4ba6      	ldr	r3, [pc, #664]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800202e:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8195 	bne.w	8002362 <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8002038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800203c:	48a3      	ldr	r0, [pc, #652]	@ (80022cc <led_awake_routine1+0x2a4>)
 800203e:	f003 fe41 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d025      	beq.n	8002094 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002048:	4b9f      	ldr	r3, [pc, #636]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800204a:	edd3 7a08 	vldr	s15, [r3, #32]
 800204e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80022d0 <led_awake_routine1+0x2a8>
 8002052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	db0d      	blt.n	8002078 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 800205c:	4b9d      	ldr	r3, [pc, #628]	@ (80022d4 <led_awake_routine1+0x2ac>)
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002062:	4b9c      	ldr	r3, [pc, #624]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002068:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800206a:	4a9b      	ldr	r2, [pc, #620]	@ (80022d8 <led_awake_routine1+0x2b0>)
 800206c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002070:	2008      	movs	r0, #8
 8002072:	f7fe ffcf 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002076:	e196      	b.n	80023a6 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002078:	4b96      	ldr	r3, [pc, #600]	@ (80022d4 <led_awake_routine1+0x2ac>)
 800207a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002080:	4b94      	ldr	r3, [pc, #592]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002088:	4a93      	ldr	r2, [pc, #588]	@ (80022d8 <led_awake_routine1+0x2b0>)
 800208a:	2100      	movs	r1, #0
 800208c:	2008      	movs	r0, #8
 800208e:	f7fe ffc1 	bl	8001014 <setSoftPWM>
}
 8002092:	e188      	b.n	80023a6 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002094:	4a90      	ldr	r2, [pc, #576]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002096:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800209a:	2008      	movs	r0, #8
 800209c:	f7fe ffba 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 80020a0:	4b89      	ldr	r3, [pc, #548]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80020a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80020a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80022d0 <led_awake_routine1+0x2a8>
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	db38      	blt.n	8002126 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 80020b4:	4b87      	ldr	r3, [pc, #540]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80020b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020ba:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 80020bc:	4a86      	ldr	r2, [pc, #536]	@ (80022d8 <led_awake_routine1+0x2b0>)
 80020be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c2:	2008      	movs	r0, #8
 80020c4:	f7fe ffa6 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80020c8:	4b84      	ldr	r3, [pc, #528]	@ (80022dc <led_awake_routine1+0x2b4>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 80020d0:	4b83      	ldr	r3, [pc, #524]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3328      	adds	r3, #40	@ 0x28
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b80      	ldr	r3, [pc, #512]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e008      	b.n	80020f6 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 80020e4:	4b7e      	ldr	r3, [pc, #504]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b28      	subs	r3, #40	@ 0x28
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b7b      	ldr	r3, [pc, #492]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020f4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80020f6:	4b7a      	ldr	r3, [pc, #488]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002100:	dd03      	ble.n	800210a <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 8002102:	4b76      	ldr	r3, [pc, #472]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 800210a:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	dc02      	bgt.n	800211a <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 8002114:	4b71      	ldr	r3, [pc, #452]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800211a:	4b71      	ldr	r3, [pc, #452]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800211c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002120:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002124:	e13f      	b.n	80023a6 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8002126:	4b68      	ldr	r3, [pc, #416]	@ (80022c8 <led_awake_routine1+0x2a0>)
 8002128:	edd3 7a08 	vldr	s15, [r3, #32]
 800212c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	dd42      	ble.n	80021c0 <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <led_awake_routine1+0x2a0>)
 800213c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002140:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80022d0 <led_awake_routine1+0x2a8>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d838      	bhi.n	80021c0 <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800214e:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <led_awake_routine1+0x2ac>)
 8002150:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002154:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002156:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002158:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800215c:	2008      	movs	r0, #8
 800215e:	f7fe ff59 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002162:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 800216a:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	b29b      	uxth	r3, r3
 8002172:	3328      	adds	r3, #40	@ 0x28
 8002174:	b29b      	uxth	r3, r3
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b59      	ldr	r3, [pc, #356]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e008      	b.n	8002190 <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800217e:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b28      	subs	r3, #40	@ 0x28
 8002188:	b29b      	uxth	r3, r3
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800218e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002190:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800219a:	dd03      	ble.n	80021a4 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 800219c:	4b4f      	ldr	r3, [pc, #316]	@ (80022dc <led_awake_routine1+0x2b4>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 80021a4:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dc02      	bgt.n	80021b4 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 80021ae:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021b4:	4b4a      	ldr	r3, [pc, #296]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80021b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80021be:	e0f2      	b.n	80023a6 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 80021c0:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80021c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80021c6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022e4 <led_awake_routine1+0x2bc>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	f340 808d 	ble.w	80022f0 <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 80021d6:	4b3c      	ldr	r3, [pc, #240]	@ (80022c8 <led_awake_routine1+0x2a0>)
 80021d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80021dc:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	f200 8082 	bhi.w	80022f0 <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d003      	beq.n	8002200 <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <led_awake_routine1+0x2b4>)
 80021fe:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8002200:	4a35      	ldr	r2, [pc, #212]	@ (80022d8 <led_awake_routine1+0x2b0>)
 8002202:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002206:	2008      	movs	r0, #8
 8002208:	f7fe ff04 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <led_awake_routine1+0x2b4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221a:	b29b      	uxth	r3, r3
 800221c:	3328      	adds	r3, #40	@ 0x28
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	e008      	b.n	800223a <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800222a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b28      	subs	r3, #40	@ 0x28
 8002232:	b29b      	uxth	r3, r3
 8002234:	b21a      	sxth	r2, r3
 8002236:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002238:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <led_awake_routine1+0x2b8>)
 800223c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002244:	dd03      	ble.n	800224e <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <led_awake_routine1+0x2b4>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e007      	b.n	800225e <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <led_awake_routine1+0x2b8>)
 8002250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dc02      	bgt.n	800225e <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002258:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <led_awake_routine1+0x2b4>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <led_awake_routine1+0x2c0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002266:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <led_awake_routine1+0x2c4>)
 8002268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226c:	b29b      	uxth	r3, r3
 800226e:	3328      	adds	r3, #40	@ 0x28
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21a      	sxth	r2, r3
 8002274:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <led_awake_routine1+0x2c4>)
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e008      	b.n	800228c <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 800227a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <led_awake_routine1+0x2c4>)
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b28      	subs	r3, #40	@ 0x28
 8002284:	b29b      	uxth	r3, r3
 8002286:	b21a      	sxth	r2, r3
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <led_awake_routine1+0x2c4>)
 800228a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 800228c:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <led_awake_routine1+0x2c4>)
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002296:	dd03      	ble.n	80022a0 <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <led_awake_routine1+0x2c0>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <led_awake_routine1+0x2c4>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	dc02      	bgt.n	80022b0 <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <led_awake_routine1+0x2c0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <led_awake_routine1+0x2b8>)
 80022b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80022ba:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <led_awake_routine1+0x2c4>)
 80022bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <led_awake_routine1+0x2ac>)
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022c4:	e06f      	b.n	80023a6 <led_awake_routine1+0x37e>
 80022c6:	bf00      	nop
 80022c8:	20001550 	.word	0x20001550
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40833333 	.word	0x40833333
 80022d4:	40000400 	.word	0x40000400
 80022d8:	20000348 	.word	0x20000348
 80022dc:	200012e8 	.word	0x200012e8
 80022e0:	200012ea 	.word	0x200012ea
 80022e4:	40533333 	.word	0x40533333
 80022e8:	200012e9 	.word	0x200012e9
 80022ec:	200012ec 	.word	0x200012ec
				GREEN_LED_PWM(disable_led);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <led_awake_routine1+0x384>)
 80022f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80022f8:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <led_awake_routine1+0x388>)
 80022fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022fe:	2008      	movs	r0, #8
 8002300:	f7fe fe88 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 800230c:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <led_awake_routine1+0x390>)
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	b29b      	uxth	r3, r3
 8002314:	3328      	adds	r3, #40	@ 0x28
 8002316:	b29b      	uxth	r3, r3
 8002318:	b21a      	sxth	r2, r3
 800231a:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <led_awake_routine1+0x390>)
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	e008      	b.n	8002332 <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <led_awake_routine1+0x390>)
 8002322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b28      	subs	r3, #40	@ 0x28
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <led_awake_routine1+0x390>)
 8002330:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002332:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <led_awake_routine1+0x390>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233c:	dd03      	ble.n	8002346 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e007      	b.n	8002356 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <led_awake_routine1+0x390>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	dc02      	bgt.n	8002356 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <led_awake_routine1+0x38c>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <led_awake_routine1+0x390>)
 8002358:	f9b3 2000 	ldrsh.w	r2, [r3]
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <led_awake_routine1+0x384>)
 800235e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002360:	e021      	b.n	80023a6 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <led_awake_routine1+0x384>)
 8002364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800236a:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <led_awake_routine1+0x388>)
 800236c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002370:	2008      	movs	r0, #8
 8002372:	f7fe fe4f 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <led_awake_routine1+0x390>)
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002380:	d004      	beq.n	800238c <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <led_awake_routine1+0x390>)
 8002384:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e002      	b.n	8002392 <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <led_awake_routine1+0x390>)
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <led_awake_routine1+0x390>)
 8002394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <led_awake_routine1+0x384>)
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800239c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80023a0:	f001 fcd0 	bl	8003d44 <HAL_Delay>
}
 80023a4:	e7ff      	b.n	80023a6 <led_awake_routine1+0x37e>
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40000400 	.word	0x40000400
 80023b0:	20000348 	.word	0x20000348
 80023b4:	200012e9 	.word	0x200012e9
 80023b8:	200012ec 	.word	0x200012ec

080023bc <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80023c2:	f001 fd0f 	bl	8003de4 <HAL_GetUIDw1>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80023cc:	f001 fd0a 	bl	8003de4 <HAL_GetUIDw1>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <ver_GetUid+0x8c>)
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 80023d8:	4c1c      	ldr	r4, [pc, #112]	@ (800244c <ver_GetUid+0x90>)
 80023da:	f001 fd0f 	bl	8003dfc <HAL_GetUIDw2>
 80023de:	4603      	mov	r3, r0
 80023e0:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b23      	cmp	r3, #35	@ 0x23
 80023e6:	d909      	bls.n	80023fc <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b3d      	cmp	r3, #61	@ 0x3d
 80023ec:	bf28      	it	cs
 80023ee:	233d      	movcs	r3, #61	@ 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	333d      	adds	r3, #61	@ 0x3d
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <ver_GetUid+0x8c>)
 80023f8:	71da      	strb	r2, [r3, #7]
 80023fa:	e00b      	b.n	8002414 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b09      	cmp	r3, #9
 8002400:	d901      	bls.n	8002406 <ver_GetUid+0x4a>
 8002402:	2241      	movs	r2, #65	@ 0x41
 8002404:	e000      	b.n	8002408 <ver_GetUid+0x4c>
 8002406:	2230      	movs	r2, #48	@ 0x30
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4413      	add	r3, r2
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <ver_GetUid+0x8c>)
 8002412:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002414:	f001 fcda 	bl	8003dcc <HAL_GetUIDw0>
 8002418:	4603      	mov	r3, r0
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <ver_GetUid+0x94>)
 8002422:	f010 fcc7 	bl	8012db4 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002426:	f001 fcd1 	bl	8003dcc <HAL_GetUIDw0>
 800242a:	4603      	mov	r3, r0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <ver_GetUid+0x98>)
 8002432:	f010 fcbf 	bl	8012db4 <CharToHexasc>
	sUid[12] = 0;
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <ver_GetUid+0x8c>)
 8002438:	2200      	movs	r2, #0
 800243a:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 800243c:	4b02      	ldr	r3, [pc, #8]	@ (8002448 <ver_GetUid+0x8c>)
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	200017e8 	.word	0x200017e8
 800244c:	200017eb 	.word	0x200017eb
 8002450:	200017f0 	.word	0x200017f0
 8002454:	200017f2 	.word	0x200017f2

08002458 <app_main>:

void app_main() {
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800245e:	2244      	movs	r2, #68	@ 0x44
 8002460:	2100      	movs	r1, #0
 8002462:	4899      	ldr	r0, [pc, #612]	@ (80026c8 <app_main+0x270>)
 8002464:	f01a ffe0 	bl	801d428 <memset>

	load_param();
 8002468:	f7fe ffd0 	bl	800140c <load_param>

	HAL_TIM_Base_Start(&htim1);
 800246c:	4897      	ldr	r0, [pc, #604]	@ (80026cc <app_main+0x274>)
 800246e:	f008 fb49 	bl	800ab04 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8002472:	4997      	ldr	r1, [pc, #604]	@ (80026d0 <app_main+0x278>)
 8002474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002478:	4a96      	ldr	r2, [pc, #600]	@ (80026d4 <app_main+0x27c>)
 800247a:	4897      	ldr	r0, [pc, #604]	@ (80026d8 <app_main+0x280>)
 800247c:	f002 fb8e 	bl	8004b9c <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002480:	4b92      	ldr	r3, [pc, #584]	@ (80026cc <app_main+0x274>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b91      	ldr	r3, [pc, #580]	@ (80026cc <app_main+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248e:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002490:	4a8f      	ldr	r2, [pc, #572]	@ (80026d0 <app_main+0x278>)
 8002492:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002496:	2008      	movs	r0, #8
 8002498:	f7fe fdbc 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 800249c:	2100      	movs	r1, #0
 800249e:	488f      	ldr	r0, [pc, #572]	@ (80026dc <app_main+0x284>)
 80024a0:	f008 fc74 	bl	800ad8c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 80024a4:	4b8e      	ldr	r3, [pc, #568]	@ (80026e0 <app_main+0x288>)
 80024a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 80024ac:	2104      	movs	r1, #4
 80024ae:	488b      	ldr	r0, [pc, #556]	@ (80026dc <app_main+0x284>)
 80024b0:	f008 fc6c 	bl	800ad8c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 80024b4:	4b8a      	ldr	r3, [pc, #552]	@ (80026e0 <app_main+0x288>)
 80024b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 80024bc:	4889      	ldr	r0, [pc, #548]	@ (80026e4 <app_main+0x28c>)
 80024be:	f018 f937 	bl	801a730 <Mount_SD>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <app_main+0x7c>

		Unmount_SD("/");
 80024c8:	4886      	ldr	r0, [pc, #536]	@ (80026e4 <app_main+0x28c>)
 80024ca:	f018 f95d 	bl	801a788 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80024ce:	f018 ffbb 	bl	801b448 <MX_USB_DEVICE_Init>
 80024d2:	e002      	b.n	80024da <app_main+0x82>

	} else {
		datawritten = 2;
 80024d4:	4b84      	ldr	r3, [pc, #528]	@ (80026e8 <app_main+0x290>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80024da:	f001 fc27 	bl	8003d2c <HAL_GetTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a82      	ldr	r2, [pc, #520]	@ (80026ec <app_main+0x294>)
 80024e2:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80024e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024e8:	4881      	ldr	r0, [pc, #516]	@ (80026f0 <app_main+0x298>)
 80024ea:	f003 fbeb 	bl	8005cc4 <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <app_main+0xa2>
		init_sps30();
 80024f4:	f7ff f946 	bl	8001784 <init_sps30>
 80024f8:	e016      	b.n	8002528 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80024fa:	4b73      	ldr	r3, [pc, #460]	@ (80026c8 <app_main+0x270>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 8002502:	4b71      	ldr	r3, [pc, #452]	@ (80026c8 <app_main+0x270>)
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 800250a:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <app_main+0x270>)
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <app_main+0x270>)
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 800251a:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <app_main+0x29c>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 8002520:	4b69      	ldr	r3, [pc, #420]	@ (80026c8 <app_main+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8002528:	f7ff f872 	bl	8001610 <init_scd30_i2c>
#endif
	console_init();
 800252c:	f00e fdb0 	bl	8011090 <console_init>
	Rtc_set_alarm();
 8002530:	f010 faae 	bl	8012a90 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	486e      	ldr	r0, [pc, #440]	@ (80026f8 <app_main+0x2a0>)
 800253e:	f006 ffe3 	bl	8009508 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	461a      	mov	r2, r3
 8002546:	4b60      	ldr	r3, [pc, #384]	@ (80026c8 <app_main+0x270>)
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) //we save this value and dont change it untill and untless RTC data is not lost
 800254a:	2101      	movs	r1, #1
 800254c:	486a      	ldr	r0, [pc, #424]	@ (80026f8 <app_main+0x2a0>)
 800254e:	f007 fa8a 	bl	8009a66 <HAL_RTCEx_BKUPRead>
 8002552:	4603      	mov	r3, r0
 8002554:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002558:	4293      	cmp	r3, r2
 800255a:	d012      	beq.n	8002582 <app_main+0x12a>
	    {

		   HAL_PWR_EnableBkUpAccess();
 800255c:	f006 f848 	bl	80085f0 <HAL_PWR_EnableBkUpAccess>
		   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8002560:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002564:	2101      	movs	r1, #1
 8002566:	4864      	ldr	r0, [pc, #400]	@ (80026f8 <app_main+0x2a0>)
 8002568:	f007 fa63 	bl	8009a32 <HAL_RTCEx_BKUPWrite>
		   HAL_PWR_DisableBkUpAccess();
 800256c:	f006 f854 	bl	8008618 <HAL_PWR_DisableBkUpAccess>


		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002570:	4962      	ldr	r1, [pc, #392]	@ (80026fc <app_main+0x2a4>)
 8002572:	4863      	ldr	r0, [pc, #396]	@ (8002700 <app_main+0x2a8>)
 8002574:	f018 fed2 	bl	801b31c <createfile>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b52      	ldr	r3, [pc, #328]	@ (80026c8 <app_main+0x270>)
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 8002582:	f7ff fb2b 	bl	8001bdc <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8002586:	23c8      	movs	r3, #200	@ 0xc8
 8002588:	2215      	movs	r2, #21
 800258a:	495e      	ldr	r1, [pc, #376]	@ (8002704 <app_main+0x2ac>)
 800258c:	485e      	ldr	r0, [pc, #376]	@ (8002708 <app_main+0x2b0>)
 800258e:	f009 fb31 	bl	800bbf4 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002592:	f001 fbcb 	bl	8003d2c <HAL_GetTick>
 8002596:	4603      	mov	r3, r0
 8002598:	4a5c      	ldr	r2, [pc, #368]	@ (800270c <app_main+0x2b4>)
 800259a:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 800259c:	f001 fbc6 	bl	8003d2c <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002710 <app_main+0x2b8>)
 80025a4:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 80025a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002714 <app_main+0x2bc>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 80025ac:	f7fe fe16 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80025b0:	e173      	b.n	800289a <app_main+0x442>
		{
			pwr_off_detected();
 80025b2:	f7fe fe13 	bl	80011dc <pwr_off_detected>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 80025b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025ba:	484d      	ldr	r0, [pc, #308]	@ (80026f0 <app_main+0x298>)
 80025bc:	f003 fb82 	bl	8005cc4 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <app_main+0x178>
					{
				prev_sleep_time = HAL_GetTick();
 80025c6:	f001 fbb1 	bl	8003d2c <HAL_GetTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <app_main+0x2b4>)
 80025ce:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	2200      	movs	r2, #0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4847      	ldr	r0, [pc, #284]	@ (80026f8 <app_main+0x2a0>)
 80025da:	f006 feb3 	bl	8009344 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4844      	ldr	r0, [pc, #272]	@ (80026f8 <app_main+0x2a0>)
 80025e6:	f006 ff8f 	bl	8009508 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80025ea:	79ba      	ldrb	r2, [r7, #6]
 80025ec:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <app_main+0x270>)
 80025ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			_RunTime_Packet.month = sDate.Month;
 80025f2:	797a      	ldrb	r2, [r7, #5]
 80025f4:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <app_main+0x270>)
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			_RunTime_Packet.year = sDate.Year;
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <app_main+0x270>)
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			if (_RunTime_Packet.prev_year != sDate.Year) {
 8002602:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <app_main+0x270>)
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <app_main+0x1c4>
				_RunTime_Packet.year_changed = 1; //this for year now
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <app_main+0x270>)
 800260e:	2201      	movs	r2, #1
 8002610:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	461a      	mov	r2, r3
 8002618:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <app_main+0x270>)
 800261a:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 800261c:	f7ff f958 	bl	80018d0 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002620:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <app_main+0x270>)
 8002622:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <app_main+0x1dc>
					|| _RunTime_Packet.usb_first_start) {
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <app_main+0x270>)
 800262c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002630:	2b00      	cmp	r3, #0
 8002632:	d045      	beq.n	80026c0 <app_main+0x268>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <app_main+0x270>)
 8002636:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <app_main+0x1ee>
				{

					start_usb_timer = 1;
 800263e:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <app_main+0x2c0>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e003      	b.n	800264e <app_main+0x1f6>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <app_main+0x270>)
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800264e:	f001 fb6d 	bl	8003d2c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <app_main+0x294>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1ad2      	subs	r2, r2, r3
 800265a:	4b30      	ldr	r3, [pc, #192]	@ (800271c <app_main+0x2c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d329      	bcc.n	80026b6 <app_main+0x25e>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <app_main+0x270>)
 8002664:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d10d      	bne.n	800268a <app_main+0x232>
							&& _RunTime_Packet.usb_first_start) {
 800266e:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <app_main+0x270>)
 8002670:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <app_main+0x232>
						_RunTime_Packet.sd_file_creation = createfile(
 8002678:	4920      	ldr	r1, [pc, #128]	@ (80026fc <app_main+0x2a4>)
 800267a:	4821      	ldr	r0, [pc, #132]	@ (8002700 <app_main+0x2a8>)
 800267c:	f018 fe4e 	bl	801b31c <createfile>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <app_main+0x270>)
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 800268a:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <app_main+0x270>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <app_main+0x270>)
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <app_main+0x270>)
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <app_main+0x2c0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

					init_sps30();
 80026a8:	f7ff f86c 	bl	8001784 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 80026ac:	f001 fb3e 	bl	8003d2c <HAL_GetTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <app_main+0x2b8>)
 80026b4:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 80026b6:	f001 fb39 	bl	8003d2c <HAL_GetTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a13      	ldr	r2, [pc, #76]	@ (800270c <app_main+0x2b4>)
 80026be:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80026c0:	f00e fc9a 	bl	8010ff8 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80026c4:	e03e      	b.n	8002744 <app_main+0x2ec>
 80026c6:	bf00      	nop
 80026c8:	20001550 	.word	0x20001550
 80026cc:	20001958 	.word	0x20001958
 80026d0:	20000348 	.word	0x20000348
 80026d4:	40020418 	.word	0x40020418
 80026d8:	20001a30 	.word	0x20001a30
 80026dc:	200019e8 	.word	0x200019e8
 80026e0:	40000400 	.word	0x40000400
 80026e4:	08020a8c 	.word	0x08020a8c
 80026e8:	2000233c 	.word	0x2000233c
 80026ec:	200017e4 	.word	0x200017e4
 80026f0:	40020000 	.word	0x40020000
 80026f4:	200015a0 	.word	0x200015a0
 80026f8:	200018b4 	.word	0x200018b4
 80026fc:	20001354 	.word	0x20001354
 8002700:	200012f0 	.word	0x200012f0
 8002704:	08020a9c 	.word	0x08020a9c
 8002708:	20001a90 	.word	0x20001a90
 800270c:	200017dc 	.word	0x200017dc
 8002710:	200017e0 	.word	0x200017e0
 8002714:	2000000c 	.word	0x2000000c
 8002718:	2000159c 	.word	0x2000159c
 800271c:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002720:	f00e fc6a 	bl	8010ff8 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002724:	4b91      	ldr	r3, [pc, #580]	@ (800296c <app_main+0x514>)
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <app_main+0x2da>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 800272e:	f7fe ff8b 	bl	8001648 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 8002732:	f7ff f843 	bl	80017bc <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002736:	488e      	ldr	r0, [pc, #568]	@ (8002970 <app_main+0x518>)
 8002738:	f010 fbd2 	bl	8012ee0 <adc_Measure>
				led_awake_routine1();
 800273c:	f7ff fc74 	bl	8002028 <led_awake_routine1>
				pwr_off_detected();
 8002740:	f7fe fd4c 	bl	80011dc <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002744:	f001 faf2 	bl	8003d2c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	4b8a      	ldr	r3, [pc, #552]	@ (8002974 <app_main+0x51c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	4b89      	ldr	r3, [pc, #548]	@ (8002978 <app_main+0x520>)
 8002752:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002754:	429a      	cmp	r2, r3
 8002756:	d809      	bhi.n	800276c <app_main+0x314>
					&& !_RunTime_Packet.usb_detection
 8002758:	4b84      	ldr	r3, [pc, #528]	@ (800296c <app_main+0x514>)
 800275a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <app_main+0x314>
					&& !_RunTime_Packet.usb_first_start)
 8002762:	4b82      	ldr	r3, [pc, #520]	@ (800296c <app_main+0x514>)
 8002764:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0d9      	beq.n	8002720 <app_main+0x2c8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 800276c:	f7ff f90c 	bl	8001988 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002770:	4b82      	ldr	r3, [pc, #520]	@ (800297c <app_main+0x524>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d018      	beq.n	80027aa <app_main+0x352>
 8002778:	4b7c      	ldr	r3, [pc, #496]	@ (800296c <app_main+0x514>)
 800277a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <app_main+0x352>
					&& !_RunTime_Packet.usb_first_start
 8002782:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <app_main+0x514>)
 8002784:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10e      	bne.n	80027aa <app_main+0x352>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 800278c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002790:	487b      	ldr	r0, [pc, #492]	@ (8002980 <app_main+0x528>)
 8002792:	f003 fa97 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <app_main+0x352>
					USB_DETECT_Pin)) {
#ifdef use_scd40x
				scd4x_stop_periodic_measurement();
#elif use_scd30
				scd30_stop_periodic_measurement();
 800279c:	f010 fcd4 	bl	8013148 <scd30_stop_periodic_measurement>
#endif

				sps30_stop_measurement();
 80027a0:	f011 fc76 	bl	8014090 <sps30_stop_measurement>
				stop_measurement = 0;
 80027a4:	4b75      	ldr	r3, [pc, #468]	@ (800297c <app_main+0x524>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 80027aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027ae:	4874      	ldr	r0, [pc, #464]	@ (8002980 <app_main+0x528>)
 80027b0:	f003 fa88 	bl	8005cc4 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d050      	beq.n	800285c <app_main+0x404>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80027ba:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <app_main+0x52c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04c      	beq.n	800285c <app_main+0x404>
 80027c2:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <app_main+0x514>)
 80027c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d147      	bne.n	800285c <app_main+0x404>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80027cc:	4b67      	ldr	r3, [pc, #412]	@ (800296c <app_main+0x514>)
 80027ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <app_main+0x39e>
						|| _RunTime_Packet.filename_changed
 80027d6:	4b65      	ldr	r3, [pc, #404]	@ (800296c <app_main+0x514>)
 80027d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <app_main+0x39e>
						|| _RunTime_Packet.fileformat_changed
 80027e0:	4b62      	ldr	r3, [pc, #392]	@ (800296c <app_main+0x514>)
 80027e2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <app_main+0x39e>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80027ea:	4b60      	ldr	r3, [pc, #384]	@ (800296c <app_main+0x514>)
 80027ec:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d114      	bne.n	8002820 <app_main+0x3c8>
					_RunTime_Packet.year_changed = 0;
 80027f6:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <app_main+0x514>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80027fe:	4b5b      	ldr	r3, [pc, #364]	@ (800296c <app_main+0x514>)
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 8002806:	4b59      	ldr	r3, [pc, #356]	@ (800296c <app_main+0x514>)
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 800280e:	495e      	ldr	r1, [pc, #376]	@ (8002988 <app_main+0x530>)
 8002810:	485e      	ldr	r0, [pc, #376]	@ (800298c <app_main+0x534>)
 8002812:	f018 fd83 	bl	801b31c <createfile>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b54      	ldr	r3, [pc, #336]	@ (800296c <app_main+0x514>)
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 8002820:	f018 fd52 	bl	801b2c8 <filesaving_process>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d013      	beq.n	8002852 <app_main+0x3fa>
					HAL_Delay(1500);
 800282a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800282e:	f001 fa89 	bl	8003d44 <HAL_Delay>
					if (filesaving_process()) {
 8002832:	f018 fd49 	bl	801b2c8 <filesaving_process>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <app_main+0x3fa>
						HAL_Delay(1500);
 800283c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002840:	f001 fa80 	bl	8003d44 <HAL_Delay>
						if (filesaving_process()) {
 8002844:	f018 fd40 	bl	801b2c8 <filesaving_process>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <app_main+0x3fa>
							HAL_NVIC_SystemReset();
 800284e:	f002 f888 	bl	8004962 <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002852:	f001 fa6b 	bl	8003d2c <HAL_GetTick>
 8002856:	4603      	mov	r3, r0
 8002858:	4a46      	ldr	r2, [pc, #280]	@ (8002974 <app_main+0x51c>)
 800285a:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 800285c:	f010 f918 	bl	8012a90 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 8002860:	4843      	ldr	r0, [pc, #268]	@ (8002970 <app_main+0x518>)
 8002862:	f010 fb3d 	bl	8012ee0 <adc_Measure>
			led_awake_routine();
 8002866:	f7ff f9e1 	bl	8001c2c <led_awake_routine>
			save_data();
 800286a:	f7fe fe9d 	bl	80015a8 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800286e:	2101      	movs	r1, #1
 8002870:	4843      	ldr	r0, [pc, #268]	@ (8002980 <app_main+0x528>)
 8002872:	f003 fa27 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <app_main+0x432>
				_RunTime_Packet.motion_detection = 1;
 800287c:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <app_main+0x514>)
 800287e:	2201      	movs	r2, #1
 8002880:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <app_main+0x538>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e005      	b.n	8002896 <app_main+0x43e>
			} else {
				_RunTime_Packet.motion_detection = 0;
 800288a:	4b38      	ldr	r3, [pc, #224]	@ (800296c <app_main+0x514>)
 800288c:	2200      	movs	r2, #0
 800288e:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002890:	4b3f      	ldr	r3, [pc, #252]	@ (8002990 <app_main+0x538>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002896:	f7fe fca1 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800289a:	f001 fa47 	bl	8003d2c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <app_main+0x53c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1ad2      	subs	r2, r2, r3
 80028a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002998 <app_main+0x540>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	f67f ae81 	bls.w	80025b2 <app_main+0x15a>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 80028b0:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <app_main+0x514>)
 80028b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <app_main+0x482>
 80028ba:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <app_main+0x514>)
 80028bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <app_main+0x482>
				|| _RunTime_Packet.fileformat_changed
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <app_main+0x514>)
 80028c6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <app_main+0x482>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80028ce:	4b27      	ldr	r3, [pc, #156]	@ (800296c <app_main+0x514>)
 80028d0:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d11b      	bne.n	8002912 <app_main+0x4ba>

			_RunTime_Packet.year_changed = 0;
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <app_main+0x514>)
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80028e2:	4b22      	ldr	r3, [pc, #136]	@ (800296c <app_main+0x514>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80028ea:	4b20      	ldr	r3, [pc, #128]	@ (800296c <app_main+0x514>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 80028f2:	4925      	ldr	r1, [pc, #148]	@ (8002988 <app_main+0x530>)
 80028f4:	4825      	ldr	r0, [pc, #148]	@ (800298c <app_main+0x534>)
 80028f6:	f018 fd11 	bl	801b31c <createfile>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <app_main+0x514>)
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);

			while(save_param)
 8002904:	e001      	b.n	800290a <app_main+0x4b2>
			{
				save_data();
 8002906:	f7fe fe4f 	bl	80015a8 <save_data>
			while(save_param)
 800290a:	4b24      	ldr	r3, [pc, #144]	@ (800299c <app_main+0x544>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <app_main+0x4ae>
			}
		}
		if (filesaving_process()) {
 8002912:	f018 fcd9 	bl	801b2c8 <filesaving_process>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <app_main+0x4ec>
			HAL_Delay(1500);
 800291c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002920:	f001 fa10 	bl	8003d44 <HAL_Delay>
			if (filesaving_process()) {
 8002924:	f018 fcd0 	bl	801b2c8 <filesaving_process>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <app_main+0x4ec>
				HAL_Delay(1500);
 800292e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002932:	f001 fa07 	bl	8003d44 <HAL_Delay>
				if (filesaving_process()) {
 8002936:	f018 fcc7 	bl	801b2c8 <filesaving_process>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <app_main+0x4ec>
					HAL_NVIC_SystemReset();
 8002940:	f002 f80f 	bl	8004962 <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002944:	f001 f9f2 	bl	8003d2c <HAL_GetTick>
 8002948:	4603      	mov	r3, r0
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <app_main+0x53c>)
 800294c:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 800294e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002952:	480b      	ldr	r0, [pc, #44]	@ (8002980 <app_main+0x528>)
 8002954:	f003 f9b6 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <app_main+0x50e>

			sleep();
 800295e:	f7ff f829 	bl	80019b4 <sleep>
			wakeup();
 8002962:	f7ff f8a3 	bl	8001aac <wakeup>

		}
		pwr_off_detected();
 8002966:	f7fe fc39 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 800296a:	e612      	b.n	8002592 <app_main+0x13a>
 800296c:	20001550 	.word	0x20001550
 8002970:	20001570 	.word	0x20001570
 8002974:	200017e0 	.word	0x200017e0
 8002978:	20000004 	.word	0x20000004
 800297c:	2000000c 	.word	0x2000000c
 8002980:	40020000 	.word	0x40020000
 8002984:	20000029 	.word	0x20000029
 8002988:	20001354 	.word	0x20001354
 800298c:	200012f0 	.word	0x200012f0
 8002990:	200015a5 	.word	0x200015a5
 8002994:	200017dc 	.word	0x200017dc
 8002998:	20000000 	.word	0x20000000
 800299c:	20001595 	.word	0x20001595

080029a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a4:	f001 f95c 	bl	8003c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a8:	f000 f822 	bl	80029f0 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 80029ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b0:	f001 f9c8 	bl	8003d44 <HAL_Delay>
  MX_GPIO_Init();
 80029b4:	f000 fb00 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80029b8:	f000 fade 	bl	8002f78 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80029bc:	f000 f948 	bl	8002c50 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80029c0:	f000 fa86 	bl	8002ed0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80029c4:	f000 f91e 	bl	8002c04 <MX_RTC_Init>
  MX_I2C1_Init();
 80029c8:	f000 f8d4 	bl	8002b74 <MX_I2C1_Init>
  MX_TIM2_Init();
 80029cc:	f000 f9b0 	bl	8002d30 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80029d0:	f000 faa8 	bl	8002f24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80029d4:	f000 f87c 	bl	8002ad0 <MX_ADC1_Init>
  MX_FATFS_Init();
 80029d8:	f00f fe3c 	bl	8012654 <MX_FATFS_Init>
  MX_TIM1_Init();
 80029dc:	f000 f958 	bl	8002c90 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029e0:	f000 f9f4 	bl	8002dcc <MX_TIM3_Init>
  MX_IWDG_Init();
 80029e4:	f000 f8f4 	bl	8002bd0 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 80029e8:	f7ff fd36 	bl	8002458 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <main+0x4c>

080029f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b094      	sub	sp, #80	@ 0x50
 80029f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	2230      	movs	r2, #48	@ 0x30
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f01a fd12 	bl	801d428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <SystemClock_Config+0xd8>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <SystemClock_Config+0xd8>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a24:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <SystemClock_Config+0xd8>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a30:	2300      	movs	r3, #0
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	4b25      	ldr	r3, [pc, #148]	@ (8002acc <SystemClock_Config+0xdc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a3c:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <SystemClock_Config+0xdc>)
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <SystemClock_Config+0xdc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002a50:	230d      	movs	r3, #13
 8002a52:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a62:	2302      	movs	r3, #2
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a76:	2304      	movs	r3, #4
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 fe08 	bl	8008698 <HAL_RCC_OscConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002a8e:	f000 fc03 	bl	8003298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	230f      	movs	r3, #15
 8002a94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f006 f86a 	bl	8008b88 <HAL_RCC_ClockConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002aba:	f000 fbed 	bl	8003298 <Error_Handler>
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3750      	adds	r7, #80	@ 0x50
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000

08002ad0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002ae4:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <MX_ADC1_Init+0x9c>)
 8002ae6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002aea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b02:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b10:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b12:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <MX_ADC1_Init+0xa0>)
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b30:	480d      	ldr	r0, [pc, #52]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b32:	f001 f96f 	bl	8003e14 <HAL_ADC_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b3c:	f000 fbac 	bl	8003298 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b40:	230a      	movs	r3, #10
 8002b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	@ (8002b68 <MX_ADC1_Init+0x98>)
 8002b52:	f001 fb55 	bl	8004200 <HAL_ADC_ConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b5c:	f000 fb9c 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000180c 	.word	0x2000180c
 8002b6c:	40012000 	.word	0x40012000
 8002b70:	0f000001 	.word	0x0f000001

08002b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b7a:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <MX_I2C1_Init+0x54>)
 8002b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b80:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <MX_I2C1_Init+0x58>)
 8002b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bb0:	4804      	ldr	r0, [pc, #16]	@ (8002bc4 <MX_I2C1_Init+0x50>)
 8002bb2:	f003 f8d1 	bl	8005d58 <HAL_I2C_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bbc:	f000 fb6c 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20001854 	.word	0x20001854
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	000186a0 	.word	0x000186a0

08002bd0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <MX_IWDG_Init+0x2c>)
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <MX_IWDG_Init+0x30>)
 8002bd8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <MX_IWDG_Init+0x2c>)
 8002bdc:	2206      	movs	r2, #6
 8002bde:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <MX_IWDG_Init+0x2c>)
 8002be2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002be6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <MX_IWDG_Init+0x2c>)
 8002bea:	f004 f9a8 	bl	8006f3e <HAL_IWDG_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002bf4:	f000 fb50 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200018a8 	.word	0x200018a8
 8002c00:	40003000 	.word	0x40003000

08002c04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c0a:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <MX_RTC_Init+0x48>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c16:	227f      	movs	r2, #127	@ 0x7f
 8002c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c1c:	22ff      	movs	r2, #255	@ 0xff
 8002c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c20:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c26:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c32:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <MX_RTC_Init+0x44>)
 8002c34:	f006 fa76 	bl	8009124 <HAL_RTC_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002c3e:	f000 fb2b 	bl	8003298 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200018b4 	.word	0x200018b4
 8002c4c:	40002800 	.word	0x40002800

08002c50 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c56:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <MX_SDIO_SD_Init+0x3c>)
 8002c58:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <MX_SDIO_SD_Init+0x38>)
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	200018d4 	.word	0x200018d4
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <MX_TIM1_Init+0x9c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cd8:	4813      	ldr	r0, [pc, #76]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cda:	f007 fe6f 	bl	800a9bc <HAL_TIM_Base_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002ce4:	f000 fad8 	bl	8003298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002cf6:	f008 fac3 	bl	800b280 <HAL_TIM_ConfigClockSource>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002d00:	f000 faca 	bl	8003298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d04:	2320      	movs	r3, #32
 8002d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <MX_TIM1_Init+0x98>)
 8002d12:	f008 fe71 	bl	800b9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002d1c:	f000 fabc 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20001958 	.word	0x20001958
 8002d2c:	40010000 	.word	0x40010000

08002d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d44:	463b      	mov	r3, r7
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d64:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d70:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d76:	4814      	ldr	r0, [pc, #80]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d78:	f007 fe20 	bl	800a9bc <HAL_TIM_Base_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d82:	f000 fa89 	bl	8003298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	4619      	mov	r1, r3
 8002d92:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002d94:	f008 fa74 	bl	800b280 <HAL_TIM_ConfigClockSource>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d9e:	f000 fa7b 	bl	8003298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <MX_TIM2_Init+0x98>)
 8002db0:	f008 fe22 	bl	800b9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002dba:	f000 fa6d 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200019a0 	.word	0x200019a0

08002dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	@ 0x38
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	615a      	str	r2, [r3, #20]
 8002dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002dfe:	4a33      	ldr	r2, [pc, #204]	@ (8002ecc <MX_TIM3_Init+0x100>)
 8002e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e02:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e08:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e16:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e22:	4829      	ldr	r0, [pc, #164]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e24:	f007 fdca 	bl	800a9bc <HAL_TIM_Base_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e2e:	f000 fa33 	bl	8003298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4822      	ldr	r0, [pc, #136]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e40:	f008 fa1e 	bl	800b280 <HAL_TIM_ConfigClockSource>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e4a:	f000 fa25 	bl	8003298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e4e:	481e      	ldr	r0, [pc, #120]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e50:	f007 ff43 	bl	800acda <HAL_TIM_PWM_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e5a:	f000 fa1d 	bl	8003298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e66:	f107 0320 	add.w	r3, r7, #32
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4816      	ldr	r0, [pc, #88]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e6e:	f008 fdc3 	bl	800b9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e78:	f000 fa0e 	bl	8003298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e7c:	2360      	movs	r3, #96	@ 0x60
 8002e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002e94:	f008 f932 	bl	800b0fc <HAL_TIM_PWM_ConfigChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e9e:	f000 f9fb 	bl	8003298 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4807      	ldr	r0, [pc, #28]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002eaa:	f008 f927 	bl	800b0fc <HAL_TIM_PWM_ConfigChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002eb4:	f000 f9f0 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002eb8:	4803      	ldr	r0, [pc, #12]	@ (8002ec8 <MX_TIM3_Init+0xfc>)
 8002eba:	f000 fc0d 	bl	80036d8 <HAL_TIM_MspPostInit>

}
 8002ebe:	bf00      	nop
 8002ec0:	3738      	adds	r7, #56	@ 0x38
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200019e8 	.word	0x200019e8
 8002ecc:	40000400 	.word	0x40000400

08002ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <MX_USART1_UART_Init+0x50>)
 8002ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002f08:	f008 fdf8 	bl	800bafc <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f12:	f000 f9c1 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20001a90 	.word	0x20001a90
 8002f20:	40011000 	.word	0x40011000

08002f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <MX_USART2_UART_Init+0x50>)
 8002f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5a:	4805      	ldr	r0, [pc, #20]	@ (8002f70 <MX_USART2_UART_Init+0x4c>)
 8002f5c:	f008 fdce 	bl	800bafc <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f66:	f000 f997 	bl	8003298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20001ad4 	.word	0x20001ad4
 8002f74:	40004400 	.word	0x40004400

08002f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <MX_DMA_Init+0x3c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <MX_DMA_Init+0x3c>)
 8002f88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <MX_DMA_Init+0x3c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2044      	movs	r0, #68	@ 0x44
 8002fa0:	f001 fca7 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002fa4:	2044      	movs	r0, #68	@ 0x44
 8002fa6:	f001 fcc0 	bl	800492a <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b71      	ldr	r3, [pc, #452]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	4a70      	ldr	r2, [pc, #448]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fde:	4b6e      	ldr	r3, [pc, #440]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	4a69      	ldr	r2, [pc, #420]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffa:	4b67      	ldr	r3, [pc, #412]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b63      	ldr	r3, [pc, #396]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	4a62      	ldr	r2, [pc, #392]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	@ 0x30
 8003016:	4b60      	ldr	r3, [pc, #384]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b5c      	ldr	r3, [pc, #368]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	4a5b      	ldr	r2, [pc, #364]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6313      	str	r3, [r2, #48]	@ 0x30
 8003032:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b55      	ldr	r3, [pc, #340]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a54      	ldr	r2, [pc, #336]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <MX_GPIO_Init+0x1e0>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	2102      	movs	r1, #2
 800305e:	484f      	ldr	r0, [pc, #316]	@ (800319c <MX_GPIO_Init+0x1e4>)
 8003060:	f002 fe48 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800306a:	484d      	ldr	r0, [pc, #308]	@ (80031a0 <MX_GPIO_Init+0x1e8>)
 800306c:	f002 fe42 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	2108      	movs	r1, #8
 8003074:	484a      	ldr	r0, [pc, #296]	@ (80031a0 <MX_GPIO_Init+0x1e8>)
 8003076:	f002 fe3d 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800307a:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 800307e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003080:	2303      	movs	r3, #3
 8003082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	4845      	ldr	r0, [pc, #276]	@ (80031a4 <MX_GPIO_Init+0x1ec>)
 8003090:	f002 fbb0 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	483d      	ldr	r0, [pc, #244]	@ (800319c <MX_GPIO_Init+0x1e4>)
 80030a8:	f002 fba4 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80030ac:	2302      	movs	r3, #2
 80030ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b0:	2301      	movs	r3, #1
 80030b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	4836      	ldr	r0, [pc, #216]	@ (800319c <MX_GPIO_Init+0x1e4>)
 80030c4:	f002 fb96 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80030c8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80030cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ce:	2303      	movs	r3, #3
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	4619      	mov	r1, r3
 80030dc:	482f      	ldr	r0, [pc, #188]	@ (800319c <MX_GPIO_Init+0x1e4>)
 80030de:	f002 fb89 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80030e2:	f247 4307 	movw	r3, #29703	@ 0x7407
 80030e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e8:	2303      	movs	r3, #3
 80030ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4619      	mov	r1, r3
 80030f6:	482a      	ldr	r0, [pc, #168]	@ (80031a0 <MX_GPIO_Init+0x1e8>)
 80030f8:	f002 fb7c 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80030fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310a:	2302      	movs	r3, #2
 800310c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4822      	ldr	r0, [pc, #136]	@ (80031a0 <MX_GPIO_Init+0x1e8>)
 8003116:	f002 fb6d 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800311a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800311e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003120:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003126:	2302      	movs	r3, #2
 8003128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	481a      	ldr	r0, [pc, #104]	@ (800319c <MX_GPIO_Init+0x1e4>)
 8003132:	f002 fb5f 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800313a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800313c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	4813      	ldr	r0, [pc, #76]	@ (800319c <MX_GPIO_Init+0x1e4>)
 800314e:	f002 fb51 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003152:	2308      	movs	r3, #8
 8003154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	480d      	ldr	r0, [pc, #52]	@ (80031a0 <MX_GPIO_Init+0x1e8>)
 800316a:	f002 fb43 	bl	80057f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2017      	movs	r0, #23
 8003174:	f001 fbbd 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003178:	2017      	movs	r0, #23
 800317a:	f001 fbd6 	bl	800492a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2028      	movs	r0, #40	@ 0x28
 8003184:	f001 fbb5 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003188:	2028      	movs	r0, #40	@ 0x28
 800318a:	f001 fbce 	bl	800492a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	@ 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800

080031a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 80031ba:	f7fd ffb9 	bl	8001130 <timer_interrupt>
}

}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80031d8:	f7fd ff8e 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e2:	d118      	bne.n	8003216 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_GPIO_EXTI_Callback+0x64>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_GPIO_EXTI_Callback+0x64>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80031f4:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_GPIO_EXTI_Callback+0x64>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <HAL_GPIO_EXTI_Callback+0x68>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8003202:	f000 fd93 	bl	8003d2c <HAL_GetTick>
 8003206:	4603      	mov	r3, r0
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_GPIO_EXTI_Callback+0x6c>)
 800320a:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 800320c:	f000 fd8e 	bl	8003d2c <HAL_GetTick>
 8003210:	4603      	mov	r3, r0
 8003212:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <HAL_GPIO_EXTI_Callback+0x70>)
 8003214:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 800321e:	f7fd ffa1 	bl	8001164 <power_off_detect>
    }
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20001550 	.word	0x20001550
 8003230:	200015a0 	.word	0x200015a0
 8003234:	200017e4 	.word	0x200017e4
 8003238:	200017dc 	.word	0x200017dc

0800323c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003244:	f00f fb84 	bl	8012950 <RtcInt>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	@ (8003290 <HAL_UART_ErrorCallback+0x40>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d106      	bne.n	800326e <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	43d2      	mvns	r2, r2
 800326a:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 800326c:	e009      	b.n	8003282 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a08      	ldr	r2, [pc, #32]	@ (8003294 <HAL_UART_ErrorCallback+0x44>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d105      	bne.n	8003282 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	43d2      	mvns	r2, r2
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20001a90 	.word	0x20001a90
 8003294:	20001ad4 	.word	0x20001ad4

08003298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800329c:	b672      	cpsid	i
}
 800329e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 80032a0:	f001 fb5f 	bl	8004962 <HAL_NVIC_SystemReset>
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <Error_Handler+0xc>

080032a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	4a0f      	ldr	r2, [pc, #60]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <HAL_ADC_MspInit+0x7c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d127      	bne.n	800336a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b16      	ldr	r3, [pc, #88]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	4a15      	ldr	r2, [pc, #84]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003328:	6453      	str	r3, [r2, #68]	@ 0x44
 800332a:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	4a0e      	ldr	r2, [pc, #56]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6313      	str	r3, [r2, #48]	@ 0x30
 8003346:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_ADC_MspInit+0x80>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8003352:	2301      	movs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003356:	2303      	movs	r3, #3
 8003358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	4805      	ldr	r0, [pc, #20]	@ (800337c <HAL_ADC_MspInit+0x84>)
 8003366:	f002 fa45 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800336a:	bf00      	nop
 800336c:	3728      	adds	r7, #40	@ 0x28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40012000 	.word	0x40012000
 8003378:	40023800 	.word	0x40023800
 800337c:	40020800 	.word	0x40020800

08003380 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a08      	ldr	r2, [pc, #32]	@ (80033b0 <HAL_ADC_MspDeInit+0x30>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d109      	bne.n	80033a6 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003392:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <HAL_ADC_MspDeInit+0x34>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_ADC_MspDeInit+0x34>)
 8003398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800339e:	2101      	movs	r1, #1
 80033a0:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <HAL_ADC_MspDeInit+0x38>)
 80033a2:	f002 fbab 	bl	8005afc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012000 	.word	0x40012000
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020800 	.word	0x40020800

080033bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_I2C_MspInit+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12c      	bne.n	8003438 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80033fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003400:	2312      	movs	r3, #18
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800340c:	2304      	movs	r3, #4
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	4619      	mov	r1, r3
 8003416:	480c      	ldr	r0, [pc, #48]	@ (8003448 <HAL_I2C_MspInit+0x8c>)
 8003418:	f002 f9ec 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	4a07      	ldr	r2, [pc, #28]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 8003426:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800342a:	6413      	str	r3, [r2, #64]	@ 0x40
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <HAL_I2C_MspInit+0x88>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	3728      	adds	r7, #40	@ 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40005400 	.word	0x40005400
 8003444:	40023800 	.word	0x40023800
 8003448:	40020400 	.word	0x40020400

0800344c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <HAL_I2C_MspDeInit+0x3c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10f      	bne.n	800347e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_I2C_MspDeInit+0x40>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <HAL_I2C_MspDeInit+0x40>)
 8003464:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003468:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 800346a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800346e:	4808      	ldr	r0, [pc, #32]	@ (8003490 <HAL_I2C_MspDeInit+0x44>)
 8003470:	f002 fb44 	bl	8005afc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003474:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003478:	4805      	ldr	r0, [pc, #20]	@ (8003490 <HAL_I2C_MspDeInit+0x44>)
 800347a:	f002 fb3f 	bl	8005afc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40005400 	.word	0x40005400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020400 	.word	0x40020400

08003494 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_RTC_MspInit+0x60>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d119      	bne.n	80034ea <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034b6:	2302      	movs	r3, #2
 80034b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034be:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4618      	mov	r0, r3
 80034c6:	f005 fd3f 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80034d0:	f7ff fee2 	bl	8003298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034d4:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_RTC_MspInit+0x64>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2029      	movs	r0, #41	@ 0x29
 80034e0:	f001 fa07 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80034e4:	2029      	movs	r0, #41	@ 0x29
 80034e6:	f001 fa20 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034ea:	bf00      	nop
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40002800 	.word	0x40002800
 80034f8:	42470e3c 	.word	0x42470e3c

080034fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <HAL_SD_MspInit+0xc0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d14a      	bne.n	80035b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4a26      	ldr	r2, [pc, #152]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003528:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800352c:	6453      	str	r3, [r2, #68]	@ 0x44
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003560:	f043 0308 	orr.w	r3, r3, #8
 8003564:	6313      	str	r3, [r2, #48]	@ 0x30
 8003566:	4b16      	ldr	r3, [pc, #88]	@ (80035c0 <HAL_SD_MspInit+0xc4>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003572:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003584:	230c      	movs	r3, #12
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <HAL_SD_MspInit+0xc8>)
 8003590:	f002 f930 	bl	80057f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003594:	2304      	movs	r3, #4
 8003596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80035a4:	230c      	movs	r3, #12
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4619      	mov	r1, r3
 80035ae:	4806      	ldr	r0, [pc, #24]	@ (80035c8 <HAL_SD_MspInit+0xcc>)
 80035b0:	f002 f920 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80035b4:	bf00      	nop
 80035b6:	3728      	adds	r7, #40	@ 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020800 	.word	0x40020800
 80035c8:	40020c00 	.word	0x40020c00

080035cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3a      	ldr	r2, [pc, #232]	@ (80036c4 <HAL_TIM_Base_MspInit+0xf8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d13f      	bne.n	800365e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	4a38      	ldr	r2, [pc, #224]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 80035fc:	4a34      	ldr	r2, [pc, #208]	@ (80036d0 <HAL_TIM_Base_MspInit+0x104>)
 80035fe:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003600:	4b32      	ldr	r3, [pc, #200]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003602:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003606:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003608:	4b30      	ldr	r3, [pc, #192]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b2f      	ldr	r3, [pc, #188]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003616:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800361a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 800361e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003622:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003624:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800362a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 800362e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003632:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003634:	4b25      	ldr	r3, [pc, #148]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 800363c:	2200      	movs	r2, #0
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003640:	4822      	ldr	r0, [pc, #136]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003642:	f001 f99f 	bl	8004984 <HAL_DMA_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800364c:	f7ff fe24 	bl	8003298 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a1e      	ldr	r2, [pc, #120]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_TIM_Base_MspInit+0x100>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800365c:	e02e      	b.n	80036bc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d116      	bne.n	8003696 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6413      	str	r3, [r2, #64]	@ 0x40
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	201c      	movs	r0, #28
 800368a:	f001 f932 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800368e:	201c      	movs	r0, #28
 8003690:	f001 f94b 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 8003694:	e012      	b.n	80036bc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0e      	ldr	r2, [pc, #56]	@ (80036d4 <HAL_TIM_Base_MspInit+0x108>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10d      	bne.n	80036bc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	4a07      	ldr	r2, [pc, #28]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_TIM_Base_MspInit+0xfc>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	bf00      	nop
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	20001a30 	.word	0x20001a30
 80036d0:	40026488 	.word	0x40026488
 80036d4:	40000400 	.word	0x40000400

080036d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <HAL_TIM_MspPostInit+0x68>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d11d      	bne.n	8003736 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <HAL_TIM_MspPostInit+0x6c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_TIM_MspPostInit+0x6c>)
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	6313      	str	r3, [r2, #48]	@ 0x30
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_TIM_MspPostInit+0x6c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003716:	2330      	movs	r3, #48	@ 0x30
 8003718:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003726:	2302      	movs	r3, #2
 8003728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 030c 	add.w	r3, r7, #12
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	@ (8003748 <HAL_TIM_MspPostInit+0x70>)
 8003732:	f002 f85f 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40000400 	.word	0x40000400
 8003744:	40023800 	.word	0x40023800
 8003748:	40020400 	.word	0x40020400

0800374c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a16      	ldr	r2, [pc, #88]	@ (80037b4 <HAL_TIM_Base_MspDeInit+0x68>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10b      	bne.n	8003776 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800375e:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f9b6 	bl	8004ae0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003774:	e019      	b.n	80037aa <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d109      	bne.n	8003794 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003780:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a0c      	ldr	r2, [pc, #48]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800378c:	201c      	movs	r0, #28
 800378e:	f001 f8da 	bl	8004946 <HAL_NVIC_DisableIRQ>
}
 8003792:	e00a      	b.n	80037aa <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <HAL_TIM_Base_MspDeInit+0x70>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d105      	bne.n	80037aa <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40000400 	.word	0x40000400

080037c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	@ 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3a      	ldr	r2, [pc, #232]	@ (80038c8 <HAL_UART_MspInit+0x108>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d134      	bne.n	800384c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	4b39      	ldr	r3, [pc, #228]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 80037ec:	f043 0310 	orr.w	r3, r3, #16
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	4b32      	ldr	r3, [pc, #200]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a31      	ldr	r2, [pc, #196]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
 800380e:	4b2f      	ldr	r3, [pc, #188]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 800381a:	23c0      	movs	r3, #192	@ 0xc0
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003826:	2303      	movs	r3, #3
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800382a:	2307      	movs	r3, #7
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382e:	f107 031c 	add.w	r3, r7, #28
 8003832:	4619      	mov	r1, r3
 8003834:	4826      	ldr	r0, [pc, #152]	@ (80038d0 <HAL_UART_MspInit+0x110>)
 8003836:	f001 ffdd 	bl	80057f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2100      	movs	r1, #0
 800383e:	2025      	movs	r0, #37	@ 0x25
 8003840:	f001 f857 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003844:	2025      	movs	r0, #37	@ 0x25
 8003846:	f001 f870 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800384a:	e038      	b.n	80038be <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a20      	ldr	r2, [pc, #128]	@ (80038d4 <HAL_UART_MspInit+0x114>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d133      	bne.n	80038be <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003864:	6413      	str	r3, [r2, #64]	@ 0x40
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_UART_MspInit+0x10c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800388e:	230c      	movs	r3, #12
 8003890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800389e:	2307      	movs	r3, #7
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a2:	f107 031c 	add.w	r3, r7, #28
 80038a6:	4619      	mov	r1, r3
 80038a8:	480b      	ldr	r0, [pc, #44]	@ (80038d8 <HAL_UART_MspInit+0x118>)
 80038aa:	f001 ffa3 	bl	80057f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	2026      	movs	r0, #38	@ 0x26
 80038b4:	f001 f81d 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038b8:	2026      	movs	r0, #38	@ 0x26
 80038ba:	f001 f836 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 80038be:	bf00      	nop
 80038c0:	3730      	adds	r7, #48	@ 0x30
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020400 	.word	0x40020400
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40020000 	.word	0x40020000

080038dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a13      	ldr	r2, [pc, #76]	@ (8003938 <HAL_UART_MspDeInit+0x5c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <HAL_UART_MspDeInit+0x60>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	4a12      	ldr	r2, [pc, #72]	@ (800393c <HAL_UART_MspDeInit+0x60>)
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 80038fa:	21c0      	movs	r1, #192	@ 0xc0
 80038fc:	4810      	ldr	r0, [pc, #64]	@ (8003940 <HAL_UART_MspDeInit+0x64>)
 80038fe:	f002 f8fd 	bl	8005afc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003902:	2025      	movs	r0, #37	@ 0x25
 8003904:	f001 f81f 	bl	8004946 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003908:	e011      	b.n	800392e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a0d      	ldr	r2, [pc, #52]	@ (8003944 <HAL_UART_MspDeInit+0x68>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d10c      	bne.n	800392e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_UART_MspDeInit+0x60>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	4a08      	ldr	r2, [pc, #32]	@ (800393c <HAL_UART_MspDeInit+0x60>)
 800391a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800391e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003920:	210c      	movs	r1, #12
 8003922:	4809      	ldr	r0, [pc, #36]	@ (8003948 <HAL_UART_MspDeInit+0x6c>)
 8003924:	f002 f8ea 	bl	8005afc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003928:	2026      	movs	r0, #38	@ 0x26
 800392a:	f001 f80c 	bl	8004946 <HAL_NVIC_DisableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40011000 	.word	0x40011000
 800393c:	40023800 	.word	0x40023800
 8003940:	40020400 	.word	0x40020400
 8003944:	40004400 	.word	0x40004400
 8003948:	40020000 	.word	0x40020000

0800394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003950:	f001 f807 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <NMI_Handler+0x8>

08003958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800395c:	f001 f801 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <HardFault_Handler+0x8>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003968:	f000 fffb 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <MemManage_Handler+0x8>

08003970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003974:	f000 fff5 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <BusFault_Handler+0x8>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003980:	f000 ffef 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <UsageFault_Handler+0x8>

08003988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 800398c:	f000 ffe9 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003998:	f000 ffe3 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}

080039a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 80039a4:	f000 ffdd 	bl	8004962 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 80039b0:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <SysTick_Handler+0x14>)
 80039b2:	f003 fb06 	bl	8006fc2 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b6:	f000 f9a5 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200018a8 	.word	0x200018a8

080039c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80039c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80039cc:	f002 f9ac 	bl	8005d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <TIM2_IRQHandler+0x10>)
 80039da:	f007 fa87 	bl	800aeec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200019a0 	.word	0x200019a0

080039e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039ec:	4802      	ldr	r0, [pc, #8]	@ (80039f8 <USART1_IRQHandler+0x10>)
 80039ee:	f008 fa29 	bl	800be44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20001a90 	.word	0x20001a90

080039fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a00:	4802      	ldr	r0, [pc, #8]	@ (8003a0c <USART2_IRQHandler+0x10>)
 8003a02:	f008 fa1f 	bl	800be44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20001ad4 	.word	0x20001ad4

08003a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003a14:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003a18:	f002 f986 	bl	8005d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003a24:	4802      	ldr	r0, [pc, #8]	@ (8003a30 <RTC_Alarm_IRQHandler+0x10>)
 8003a26:	f005 ff01 	bl	800982c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200018b4 	.word	0x200018b4

08003a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a38:	4802      	ldr	r0, [pc, #8]	@ (8003a44 <OTG_FS_IRQHandler+0x10>)
 8003a3a:	f003 fc7e 	bl	800733a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000291c 	.word	0x2000291c

08003a48 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003a4c:	4802      	ldr	r0, [pc, #8]	@ (8003a58 <DMA2_Stream5_IRQHandler+0x10>)
 8003a4e:	f001 f973 	bl	8004d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20001a30 	.word	0x20001a30

08003a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return 1;
 8003a60:	2301      	movs	r3, #1
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_kill>:

int _kill(int pid, int sig)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a76:	f019 fdb9 	bl	801d5ec <__errno>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2216      	movs	r2, #22
 8003a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_exit>:

void _exit (int status)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffe7 	bl	8003a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <_exit+0x12>

08003aa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e00a      	b.n	8003aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	4601      	mov	r1, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	60ba      	str	r2, [r7, #8]
 8003ac0:	b2ca      	uxtb	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	dbf0      	blt.n	8003ab4 <_read+0x12>
  }

  return len;
 8003ad2:	687b      	ldr	r3, [r7, #4]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e009      	b.n	8003b02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	60ba      	str	r2, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3301      	adds	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	dbf1      	blt.n	8003aee <_write+0x12>
  }
  return len;
 8003b0a:	687b      	ldr	r3, [r7, #4]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_close>:

int _close(int file)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b3c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_isatty>:

int _isatty(int file)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b54:	2301      	movs	r3, #1
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b84:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <_sbrk+0x5c>)
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <_sbrk+0x60>)
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <_sbrk+0x64>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <_sbrk+0x64>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <_sbrk+0x68>)
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d207      	bcs.n	8003bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bac:	f019 fd1e 	bl	801d5ec <__errno>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	e009      	b.n	8003bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <_sbrk+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <_sbrk+0x64>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	4a05      	ldr	r2, [pc, #20]	@ (8003be0 <_sbrk+0x64>)
 8003bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bce:	68fb      	ldr	r3, [r7, #12]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20018000 	.word	0x20018000
 8003bdc:	00000400 	.word	0x00000400
 8003be0:	20001b18 	.word	0x20001b18
 8003be4:	200037f0 	.word	0x200037f0

08003be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <SystemInit+0x20>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <SystemInit+0x20>)
 8003bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c10:	480d      	ldr	r0, [pc, #52]	@ (8003c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c12:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c14:	4a0e      	ldr	r2, [pc, #56]	@ (8003c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c18:	e002      	b.n	8003c20 <LoopCopyDataInit>

08003c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c1e:	3304      	adds	r3, #4

08003c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c24:	d3f9      	bcc.n	8003c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c26:	4a0b      	ldr	r2, [pc, #44]	@ (8003c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c28:	4c0b      	ldr	r4, [pc, #44]	@ (8003c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c2c:	e001      	b.n	8003c32 <LoopFillZerobss>

08003c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c30:	3204      	adds	r2, #4

08003c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c34:	d3fb      	bcc.n	8003c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c36:	f7ff ffd7 	bl	8003be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f019 fcdd 	bl	801d5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3e:	f7fe feaf 	bl	80029a0 <main>
  bx  lr    
 8003c42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c4c:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8003c50:	080234cc 	.word	0x080234cc
  ldr r2, =_sbss
 8003c54:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8003c58:	200037ec 	.word	0x200037ec

08003c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <ADC_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca0 <HAL_Init+0x40>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_Init+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_Init+0x40>)
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_Init+0x40>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <HAL_Init+0x40>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 fe27 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8e:	200f      	movs	r0, #15
 8003c90:	f000 f808 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c94:	f7ff fb08 	bl	80032a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_InitTick+0x54>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_InitTick+0x58>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fe51 	bl	800496a <HAL_SYSTICK_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00e      	b.n	8003cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d80a      	bhi.n	8003cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f000 fe07 	bl	80048f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <HAL_InitTick+0x5c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000010 	.word	0x20000010
 8003cfc:	20000018 	.word	0x20000018
 8003d00:	20000014 	.word	0x20000014

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000018 	.word	0x20000018
 8003d28:	20001b1c 	.word	0x20001b1c

08003d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_GetTick+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20001b1c 	.word	0x20001b1c

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff ffee 	bl	8003d2c <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_Delay+0x44>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6a:	bf00      	nop
 8003d6c:	f7ff ffde 	bl	8003d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000018 	.word	0x20000018

08003d8c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003d90:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_SuspendTick+0x1c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <HAL_SuspendTick+0x1c>)
 8003d96:	f023 0302 	bic.w	r3, r3, #2
 8003d9a:	6013      	str	r3, [r2, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e010 	.word	0xe000e010

08003dac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_ResumeTick+0x1c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <HAL_ResumeTick+0x1c>)
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_GetUIDw0+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	1fff7a10 	.word	0x1fff7a10

08003de4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003de8:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <HAL_GetUIDw1+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	1fff7a14 	.word	0x1fff7a14

08003dfc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <HAL_GetUIDw2+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	1fff7a18 	.word	0x1fff7a18

08003e14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e033      	b.n	8003e92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fa60 	bl	80032f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e5a:	f023 0302 	bic.w	r3, r3, #2
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 faec 	bl	8004444 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e82:	e001      	b.n	8003e88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e022      	b.n	8003ef6 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	f043 0202 	orr.w	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fa50 	bl	8003380 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_Start+0x1a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e097      	b.n	800404a <HAL_ADC_Start+0x14a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d018      	beq.n	8003f62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f40:	4b45      	ldr	r3, [pc, #276]	@ (8004058 <HAL_ADC_Start+0x158>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a45      	ldr	r2, [pc, #276]	@ (800405c <HAL_ADC_Start+0x15c>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9a      	lsrs	r2, r3, #18
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f54:	e002      	b.n	8003f5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f9      	bne.n	8003f56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d15f      	bne.n	8004030 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fae:	d106      	bne.n	8003fbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb4:	f023 0206 	bic.w	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fbc:	e002      	b.n	8003fc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fcc:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <HAL_ADC_Start+0x160>)
 8003fce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d129      	bne.n	8004048 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	e020      	b.n	8004048 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_ADC_Start+0x164>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d11b      	bne.n	8004048 <HAL_ADC_Start+0x148>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d114      	bne.n	8004048 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	e00b      	b.n	8004048 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0210 	orr.w	r2, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000010 	.word	0x20000010
 800405c:	431bde83 	.word	0x431bde83
 8004060:	40012300 	.word	0x40012300
 8004064:	40012000 	.word	0x40012000

08004068 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_ADC_Stop+0x16>
 800407a:	2302      	movs	r3, #2
 800407c:	e021      	b.n	80040c2 <HAL_ADC_Stop+0x5a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ea:	d113      	bne.n	8004114 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fa:	d10b      	bne.n	8004114 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e063      	b.n	80041dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004114:	f7ff fe0a 	bl	8003d2c <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800411a:	e021      	b.n	8004160 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d01d      	beq.n	8004160 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_ADC_PollForConversion+0x6c>
 800412a:	f7ff fdff 	bl	8003d2c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d212      	bcs.n	8004160 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d00b      	beq.n	8004160 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e03d      	b.n	80041dc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b02      	cmp	r3, #2
 800416c:	d1d6      	bne.n	800411c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0212 	mvn.w	r2, #18
 8004176:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d123      	bne.n	80041da <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11f      	bne.n	80041da <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d111      	bne.n	80041da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e105      	b.n	8004428 <HAL_ADC_ConfigChannel+0x228>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b09      	cmp	r3, #9
 800422a:	d925      	bls.n	8004278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	3b1e      	subs	r3, #30
 8004242:	2207      	movs	r2, #7
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43da      	mvns	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	400a      	ands	r2, r1
 8004250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	4603      	mov	r3, r0
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4403      	add	r3, r0
 800426a:	3b1e      	subs	r3, #30
 800426c:	409a      	lsls	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	e022      	b.n	80042be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	2207      	movs	r2, #7
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	400a      	ands	r2, r1
 800429a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4403      	add	r3, r0
 80042b4:	409a      	lsls	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d824      	bhi.n	8004310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	3b05      	subs	r3, #5
 80042d8:	221f      	movs	r2, #31
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	400a      	ands	r2, r1
 80042e6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	3b05      	subs	r3, #5
 8004302:	fa00 f203 	lsl.w	r2, r0, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34
 800430e:	e04c      	b.n	80043aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	d824      	bhi.n	8004362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	3b23      	subs	r3, #35	@ 0x23
 800432a:	221f      	movs	r2, #31
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43da      	mvns	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	400a      	ands	r2, r1
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4618      	mov	r0, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	3b23      	subs	r3, #35	@ 0x23
 8004354:	fa00 f203 	lsl.w	r2, r0, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004360:	e023      	b.n	80043aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	3b41      	subs	r3, #65	@ 0x41
 8004374:	221f      	movs	r2, #31
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	400a      	ands	r2, r1
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4618      	mov	r0, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	3b41      	subs	r3, #65	@ 0x41
 800439e:	fa00 f203 	lsl.w	r2, r0, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043aa:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <HAL_ADC_ConfigChannel+0x234>)
 80043ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a21      	ldr	r2, [pc, #132]	@ (8004438 <HAL_ADC_ConfigChannel+0x238>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d109      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x1cc>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b12      	cmp	r3, #18
 80043be:	d105      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <HAL_ADC_ConfigChannel+0x238>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d123      	bne.n	800441e <HAL_ADC_ConfigChannel+0x21e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d003      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x1e6>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b11      	cmp	r3, #17
 80043e4:	d11b      	bne.n	800441e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d111      	bne.n	800441e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_ADC_ConfigChannel+0x23c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a10      	ldr	r2, [pc, #64]	@ (8004440 <HAL_ADC_ConfigChannel+0x240>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	0c9a      	lsrs	r2, r3, #18
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004410:	e002      	b.n	8004418 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3b01      	subs	r3, #1
 8004416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f9      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40012300 	.word	0x40012300
 8004438:	40012000 	.word	0x40012000
 800443c:	20000010 	.word	0x20000010
 8004440:	431bde83 	.word	0x431bde83

08004444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800444c:	4b79      	ldr	r3, [pc, #484]	@ (8004634 <ADC_Init+0x1f0>)
 800444e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	021a      	lsls	r2, r3, #8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800449c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	4a58      	ldr	r2, [pc, #352]	@ (8004638 <ADC_Init+0x1f4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800450c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	e00f      	b.n	8004542 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0202 	bic.w	r2, r2, #2
 8004550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6899      	ldr	r1, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7e1b      	ldrb	r3, [r3, #24]
 800455c:	005a      	lsls	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800457e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800458e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	3b01      	subs	r3, #1
 800459c:	035a      	lsls	r2, r3, #13
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e007      	b.n	80045b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80045c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	051a      	lsls	r2, r3, #20
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045fa:	025a      	lsls	r2, r3, #9
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6899      	ldr	r1, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	029a      	lsls	r2, r3, #10
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40012300 	.word	0x40012300
 8004638:	0f000001 	.word	0x0f000001

0800463c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e031      	b.n	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 021f 	bic.w	r2, r3, #31
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40012300 	.word	0x40012300

080046c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046d8:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <__NVIC_SetPriorityGrouping+0x44>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046e4:	4013      	ands	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046fa:	4a04      	ldr	r2, [pc, #16]	@ (800470c <__NVIC_SetPriorityGrouping+0x44>)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	60d3      	str	r3, [r2, #12]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <__NVIC_GetPriorityGrouping+0x18>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 0307 	and.w	r3, r3, #7
}
 800471e:	4618      	mov	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	2b00      	cmp	r3, #0
 800473c:	db0b      	blt.n	8004756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	f003 021f 	and.w	r2, r3, #31
 8004744:	4907      	ldr	r1, [pc, #28]	@ (8004764 <__NVIC_EnableIRQ+0x38>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2001      	movs	r0, #1
 800474e:	fa00 f202 	lsl.w	r2, r0, r2
 8004752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	e000e100 	.word	0xe000e100

08004768 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db12      	blt.n	80047a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	490a      	ldr	r1, [pc, #40]	@ (80047ac <__NVIC_DisableIRQ+0x44>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	3320      	adds	r3, #32
 8004790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004794:	f3bf 8f4f 	dsb	sy
}
 8004798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800479a:	f3bf 8f6f 	isb	sy
}
 800479e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db0a      	blt.n	80047da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	490c      	ldr	r1, [pc, #48]	@ (80047fc <__NVIC_SetPriority+0x4c>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d8:	e00a      	b.n	80047f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4908      	ldr	r1, [pc, #32]	@ (8004800 <__NVIC_SetPriority+0x50>)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3b04      	subs	r3, #4
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	440b      	add	r3, r1
 80047ee:	761a      	strb	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	e000e100 	.word	0xe000e100
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	@ 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf28      	it	cs
 8004822:	2304      	movcs	r3, #4
 8004824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3304      	adds	r3, #4
 800482a:	2b06      	cmp	r3, #6
 800482c:	d902      	bls.n	8004834 <NVIC_EncodePriority+0x30>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b03      	subs	r3, #3
 8004832:	e000      	b.n	8004836 <NVIC_EncodePriority+0x32>
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800484c:	f04f 31ff 	mov.w	r1, #4294967295
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43d9      	mvns	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	4313      	orrs	r3, r2
         );
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	@ 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004870:	f3bf 8f4f 	dsb	sy
}
 8004874:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <__NVIC_SystemReset+0x24>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800487e:	4904      	ldr	r1, [pc, #16]	@ (8004890 <__NVIC_SystemReset+0x24>)
 8004880:	4b04      	ldr	r3, [pc, #16]	@ (8004894 <__NVIC_SystemReset+0x28>)
 8004882:	4313      	orrs	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004886:	f3bf 8f4f 	dsb	sy
}
 800488a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <__NVIC_SystemReset+0x20>
 8004890:	e000ed00 	.word	0xe000ed00
 8004894:	05fa0004 	.word	0x05fa0004

08004898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048a8:	d301      	bcc.n	80048ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ae:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <SysTick_Config+0x40>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048b6:	210f      	movs	r1, #15
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f7ff ff78 	bl	80047b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <SysTick_Config+0x40>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048c6:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <SysTick_Config+0x40>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e010 	.word	0xe000e010

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff feef 	bl	80046c8 <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004904:	f7ff ff04 	bl	8004710 <__NVIC_GetPriorityGrouping>
 8004908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff78 	bl	8004804 <NVIC_EncodePriority>
 8004914:	4602      	mov	r2, r0
 8004916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff47 	bl	80047b0 <__NVIC_SetPriority>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fef7 	bl	800472c <__NVIC_EnableIRQ>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff07 	bl	8004768 <__NVIC_DisableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004966:	f7ff ff81 	bl	800486c <__NVIC_SystemReset>

0800496a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ff90 	bl	8004898 <SysTick_Config>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004990:	f7ff f9cc 	bl	8003d2c <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e099      	b.n	8004ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c0:	e00f      	b.n	80049e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c2:	f7ff f9b3 	bl	8003d2c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d908      	bls.n	80049e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2203      	movs	r2, #3
 80049da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e078      	b.n	8004ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e8      	bne.n	80049c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4b38      	ldr	r3, [pc, #224]	@ (8004adc <HAL_DMA_Init+0x158>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d107      	bne.n	8004a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	4313      	orrs	r3, r2
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d117      	bne.n	8004aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00e      	beq.n	8004aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb43 	bl	8005114 <DMA_CheckFifoParam>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2240      	movs	r2, #64	@ 0x40
 8004a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e016      	b.n	8004ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fafa 	bl	80050a8 <DMA_CalcBaseAndBitshift>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abc:	223f      	movs	r2, #63	@ 0x3f
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	f010803f 	.word	0xf010803f

08004ae0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e050      	b.n	8004b94 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d101      	bne.n	8004b02 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
 8004b00:	e048      	b.n	8004b94 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2221      	movs	r2, #33	@ 0x21
 8004b40:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fab0 	bl	80050a8 <DMA_CalcBaseAndBitshift>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	223f      	movs	r2, #63	@ 0x3f
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_DMA_Start+0x20>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e026      	b.n	8004c0a <HAL_DMA_Start+0x6e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa31 	bl	800504c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e005      	b.n	8004c08 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
 8004c06:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c20:	f7ff f884 	bl	8003d2c <HAL_GetTick>
 8004c24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d008      	beq.n	8004c44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e052      	b.n	8004cea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0216 	bic.w	r2, r2, #22
 8004c52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <HAL_DMA_Abort+0x62>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0208 	bic.w	r2, r2, #8
 8004c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c94:	e013      	b.n	8004cbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c96:	f7ff f849 	bl	8003d2c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d90c      	bls.n	8004cbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e015      	b.n	8004cea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e4      	bne.n	8004c96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	223f      	movs	r2, #63	@ 0x3f
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e00c      	b.n	8004d2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2205      	movs	r2, #5
 8004d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d44:	4b8e      	ldr	r3, [pc, #568]	@ (8004f80 <HAL_DMA_IRQHandler+0x248>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a8e      	ldr	r2, [pc, #568]	@ (8004f84 <HAL_DMA_IRQHandler+0x24c>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d62:	2208      	movs	r2, #8
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01a      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d90:	2208      	movs	r2, #8
 8004d92:	409a      	lsls	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f043 0202 	orr.w	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	2204      	movs	r2, #4
 8004de0:	409a      	lsls	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	f043 0204 	orr.w	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e14:	2210      	movs	r2, #16
 8004e16:	409a      	lsls	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d043      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e32:	2210      	movs	r2, #16
 8004e34:	409a      	lsls	r2, r3
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d024      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	e01f      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
 8004e78:	e016      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d107      	bne.n	8004e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0208 	bic.w	r2, r2, #8
 8004e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	2220      	movs	r2, #32
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 808f 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8087 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ece:	2220      	movs	r2, #32
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d136      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0216 	bic.w	r2, r2, #22
 8004ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <HAL_DMA_IRQHandler+0x1da>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0208 	bic.w	r2, r2, #8
 8004f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f26:	223f      	movs	r2, #63	@ 0x3f
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d07e      	beq.n	8005044 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
        }
        return;
 8004f4e:	e079      	b.n	8005044 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01d      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d031      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
 8004f7c:	e02c      	b.n	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
 8004f7e:	bf00      	nop
 8004f80:	20000010 	.word	0x20000010
 8004f84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d023      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e01e      	b.n	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d032      	beq.n	8005046 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d022      	beq.n	8005032 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2205      	movs	r2, #5
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3301      	adds	r3, #1
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	d307      	bcc.n	8005020 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f2      	bne.n	8005004 <HAL_DMA_IRQHandler+0x2cc>
 800501e:	e000      	b.n	8005022 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005020:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
 8005042:	e000      	b.n	8005046 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005044:	bf00      	nop
    }
  }
}
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005068:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b40      	cmp	r3, #64	@ 0x40
 8005078:	d108      	bne.n	800508c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800508a:	e007      	b.n	800509c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	3b10      	subs	r3, #16
 80050b8:	4a14      	ldr	r2, [pc, #80]	@ (800510c <DMA_CalcBaseAndBitshift+0x64>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050c2:	4a13      	ldr	r2, [pc, #76]	@ (8005110 <DMA_CalcBaseAndBitshift+0x68>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d909      	bls.n	80050ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80050e8:	e007      	b.n	80050fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	aaaaaaab 	.word	0xaaaaaaab
 8005110:	08022ba4 	.word	0x08022ba4

08005114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11f      	bne.n	800516e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d856      	bhi.n	80051e2 <DMA_CheckFifoParam+0xce>
 8005134:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <DMA_CheckFifoParam+0x28>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	0800514d 	.word	0x0800514d
 8005140:	0800515f 	.word	0x0800515f
 8005144:	0800514d 	.word	0x0800514d
 8005148:	080051e3 	.word	0x080051e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d046      	beq.n	80051e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800515c:	e043      	b.n	80051e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005166:	d140      	bne.n	80051ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516c:	e03d      	b.n	80051ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005176:	d121      	bne.n	80051bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b03      	cmp	r3, #3
 800517c:	d837      	bhi.n	80051ee <DMA_CheckFifoParam+0xda>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <DMA_CheckFifoParam+0x70>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005195 	.word	0x08005195
 8005188:	0800519b 	.word	0x0800519b
 800518c:	08005195 	.word	0x08005195
 8005190:	080051ad 	.word	0x080051ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e030      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d025      	beq.n	80051f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051aa:	e022      	b.n	80051f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051b4:	d11f      	bne.n	80051f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051ba:	e01c      	b.n	80051f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d903      	bls.n	80051ca <DMA_CheckFifoParam+0xb6>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d003      	beq.n	80051d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051c8:	e018      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
      break;
 80051ce:	e015      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      break;
 80051e0:	e00b      	b.n	80051fa <DMA_CheckFifoParam+0xe6>
      break;
 80051e2:	bf00      	nop
 80051e4:	e00a      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;
 80051e6:	bf00      	nop
 80051e8:	e008      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;
 80051ea:	bf00      	nop
 80051ec:	e006      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;   
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
      break;
 80051fa:	bf00      	nop
    }
  } 
  
  return status; 
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop

0800520c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800521e:	4b23      	ldr	r3, [pc, #140]	@ (80052ac <HAL_FLASH_Program+0xa0>)
 8005220:	7e1b      	ldrb	r3, [r3, #24]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_FLASH_Program+0x1e>
 8005226:	2302      	movs	r3, #2
 8005228:	e03b      	b.n	80052a2 <HAL_FLASH_Program+0x96>
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <HAL_FLASH_Program+0xa0>)
 800522c:	2201      	movs	r2, #1
 800522e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005230:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005234:	f000 f87c 	bl	8005330 <FLASH_WaitForLastOperation>
 8005238:	4603      	mov	r3, r0
 800523a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d12b      	bne.n	800529a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005248:	783b      	ldrb	r3, [r7, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	68b8      	ldr	r0, [r7, #8]
 800524e:	f000 f927 	bl	80054a0 <FLASH_Program_Byte>
 8005252:	e016      	b.n	8005282 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800525a:	883b      	ldrh	r3, [r7, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	68b8      	ldr	r0, [r7, #8]
 8005260:	f000 f8fa 	bl	8005458 <FLASH_Program_HalfWord>
 8005264:	e00d      	b.n	8005282 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d105      	bne.n	8005278 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	68b8      	ldr	r0, [r7, #8]
 8005272:	f000 f8cf 	bl	8005414 <FLASH_Program_Word>
 8005276:	e004      	b.n	8005282 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f000 f897 	bl	80053b0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005282:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005286:	f000 f853 	bl	8005330 <FLASH_WaitForLastOperation>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <HAL_FLASH_Program+0xa4>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	4a07      	ldr	r2, [pc, #28]	@ (80052b0 <HAL_FLASH_Program+0xa4>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800529a:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <HAL_FLASH_Program+0xa0>)
 800529c:	2200      	movs	r2, #0
 800529e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20001b20 	.word	0x20001b20
 80052b0:	40023c00 	.word	0x40023c00

080052b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <HAL_FLASH_Unlock+0x38>)
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da0b      	bge.n	80052de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052c6:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <HAL_FLASH_Unlock+0x38>)
 80052c8:	4a09      	ldr	r2, [pc, #36]	@ (80052f0 <HAL_FLASH_Unlock+0x3c>)
 80052ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <HAL_FLASH_Unlock+0x38>)
 80052ce:	4a09      	ldr	r2, [pc, #36]	@ (80052f4 <HAL_FLASH_Unlock+0x40>)
 80052d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_FLASH_Unlock+0x38>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	da01      	bge.n	80052de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80052de:	79fb      	ldrb	r3, [r7, #7]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40023c00 	.word	0x40023c00
 80052f0:	45670123 	.word	0x45670123
 80052f4:	cdef89ab 	.word	0xcdef89ab

080052f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_FLASH_Lock+0x1c>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <HAL_FLASH_Lock+0x1c>)
 8005302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005306:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40023c00 	.word	0x40023c00

08005318 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <HAL_FLASH_GetError+0x14>)
 800531e:	69db      	ldr	r3, [r3, #28]
}  
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20001b20 	.word	0x20001b20

08005330 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800533c:	4b1a      	ldr	r3, [pc, #104]	@ (80053a8 <FLASH_WaitForLastOperation+0x78>)
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005342:	f7fe fcf3 	bl	8003d2c <HAL_GetTick>
 8005346:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005348:	e010      	b.n	800536c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d00c      	beq.n	800536c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <FLASH_WaitForLastOperation+0x38>
 8005358:	f7fe fce8 	bl	8003d2c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	d201      	bcs.n	800536c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e019      	b.n	80053a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800536c:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <FLASH_WaitForLastOperation+0x7c>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e8      	bne.n	800534a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <FLASH_WaitForLastOperation+0x7c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005384:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <FLASH_WaitForLastOperation+0x7c>)
 8005386:	2201      	movs	r2, #1
 8005388:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800538a:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <FLASH_WaitForLastOperation+0x7c>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005396:	f000 f8a5 	bl	80054e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
  
}  
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20001b20 	.word	0x20001b20
 80053ac:	40023c00 	.word	0x40023c00

080053b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053bc:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4a10      	ldr	r2, [pc, #64]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053ce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80053d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005410 <FLASH_Program_DoubleWord+0x60>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80053e6:	f3bf 8f6f 	isb	sy
}
 80053ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80053ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	000a      	movs	r2, r1
 80053fa:	2300      	movs	r3, #0
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	3104      	adds	r1, #4
 8005400:	4613      	mov	r3, r2
 8005402:	600b      	str	r3, [r1, #0]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40023c00 	.word	0x40023c00

08005414 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <FLASH_Program_Word+0x40>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <FLASH_Program_Word+0x40>)
 8005424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005428:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800542a:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <FLASH_Program_Word+0x40>)
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <FLASH_Program_Word+0x40>)
 8005430:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005434:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <FLASH_Program_Word+0x40>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	4a06      	ldr	r2, [pc, #24]	@ (8005454 <FLASH_Program_Word+0x40>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40023c00 	.word	0x40023c00

08005458 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005464:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4a0c      	ldr	r2, [pc, #48]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 800546a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	4a09      	ldr	r2, [pc, #36]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 8005476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a06      	ldr	r2, [pc, #24]	@ (800549c <FLASH_Program_HalfWord+0x44>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	801a      	strh	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40023c00 	.word	0x40023c00

080054a0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054ac:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	4a0b      	ldr	r2, [pc, #44]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80054b8:	4b09      	ldr	r3, [pc, #36]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054ba:	4a09      	ldr	r2, [pc, #36]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054c0:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4a06      	ldr	r2, [pc, #24]	@ (80054e0 <FLASH_Program_Byte+0x40>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	701a      	strb	r2, [r3, #0]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40023c00 	.word	0x40023c00

080054e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054e8:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054f4:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	4a2b      	ldr	r2, [pc, #172]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 80054fe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005500:	4b29      	ldr	r3, [pc, #164]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005502:	2210      	movs	r2, #16
 8005504:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005506:	4b28      	ldr	r3, [pc, #160]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005512:	4b26      	ldr	r3, [pc, #152]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f043 0308 	orr.w	r3, r3, #8
 800551a:	4a24      	ldr	r2, [pc, #144]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 800551c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800551e:	4b22      	ldr	r3, [pc, #136]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005520:	2220      	movs	r2, #32
 8005522:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005524:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005530:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 800553a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800553c:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 800553e:	2240      	movs	r2, #64	@ 0x40
 8005540:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005542:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d008      	beq.n	8005560 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f043 0302 	orr.w	r3, r3, #2
 8005556:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005558:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 800555c:	2280      	movs	r2, #128	@ 0x80
 800555e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	4a0d      	ldr	r2, [pc, #52]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005576:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 800557a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800557e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800558c:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	4a05      	ldr	r2, [pc, #20]	@ (80055ac <FLASH_SetErrorCode+0xc8>)
 8005596:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005598:	4b03      	ldr	r3, [pc, #12]	@ (80055a8 <FLASH_SetErrorCode+0xc4>)
 800559a:	2202      	movs	r2, #2
 800559c:	60da      	str	r2, [r3, #12]
  }
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40023c00 	.word	0x40023c00
 80055ac:	20001b20 	.word	0x20001b20

080055b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_FLASHEx_Erase+0xd8>)
 80055c4:	7e1b      	ldrb	r3, [r3, #24]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_FLASHEx_Erase+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e058      	b.n	8005680 <HAL_FLASHEx_Erase+0xd0>
 80055ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005688 <HAL_FLASHEx_Erase+0xd8>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055d8:	f7ff feaa 	bl	8005330 <FLASH_WaitForLastOperation>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d148      	bne.n	8005678 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d115      	bne.n	8005622 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 f844 	bl	8005690 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005608:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800560c:	f7ff fe90 	bl	8005330 <FLASH_WaitForLastOperation>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005614:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <HAL_FLASHEx_Erase+0xdc>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	4a1c      	ldr	r2, [pc, #112]	@ (800568c <HAL_FLASHEx_Erase+0xdc>)
 800561a:	f023 0304 	bic.w	r3, r3, #4
 800561e:	6113      	str	r3, [r2, #16]
 8005620:	e028      	b.n	8005674 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	e01c      	b.n	8005664 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4619      	mov	r1, r3
 8005632:	68b8      	ldr	r0, [r7, #8]
 8005634:	f000 f850 	bl	80056d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005638:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800563c:	f7ff fe78 	bl	8005330 <FLASH_WaitForLastOperation>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005644:	4b11      	ldr	r3, [pc, #68]	@ (800568c <HAL_FLASHEx_Erase+0xdc>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4a10      	ldr	r2, [pc, #64]	@ (800568c <HAL_FLASHEx_Erase+0xdc>)
 800564a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800564e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	601a      	str	r2, [r3, #0]
          break;
 800565c:	e00a      	b.n	8005674 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3301      	adds	r3, #1
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4413      	add	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3da      	bcc.n	800562a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005674:	f000 f878 	bl	8005768 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <HAL_FLASHEx_Erase+0xd8>)
 800567a:	2200      	movs	r2, #0
 800567c:	761a      	strb	r2, [r3, #24]

  return status;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20001b20 	.word	0x20001b20
 800568c:	40023c00 	.word	0x40023c00

08005690 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800569c:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <FLASH_MassErase+0x44>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	4a0c      	ldr	r2, [pc, #48]	@ (80056d4 <FLASH_MassErase+0x44>)
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <FLASH_MassErase+0x44>)
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <FLASH_MassErase+0x44>)
 80056ae:	f043 0304 	orr.w	r3, r3, #4
 80056b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80056b4:	4b07      	ldr	r3, [pc, #28]	@ (80056d4 <FLASH_MassErase+0x44>)
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	4313      	orrs	r3, r2
 80056be:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <FLASH_MassErase+0x44>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c4:	6113      	str	r3, [r2, #16]
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00

080056d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e010      	b.n	8005716 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d103      	bne.n	8005702 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e009      	b.n	8005716 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d103      	bne.n	8005710 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e002      	b.n	8005716 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005710:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005714:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005716:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	4a12      	ldr	r2, [pc, #72]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 800571c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005720:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005722:	4b10      	ldr	r3, [pc, #64]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	490f      	ldr	r1, [pc, #60]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	4a0c      	ldr	r2, [pc, #48]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005734:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4313      	orrs	r3, r2
 8005744:	4a07      	ldr	r2, [pc, #28]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4a04      	ldr	r2, [pc, #16]	@ (8005764 <FLASH_Erase_Sector+0x8c>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005756:	6113      	str	r3, [r2, #16]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40023c00 	.word	0x40023c00

08005768 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800576c:	4b20      	ldr	r3, [pc, #128]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005778:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 800577e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005782:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005784:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a19      	ldr	r2, [pc, #100]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 800578a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b17      	ldr	r3, [pc, #92]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 8005796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800579a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800579c:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80057b4:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0d      	ldr	r2, [pc, #52]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a07      	ldr	r2, [pc, #28]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <FLASH_FlushCaches+0x88>)
 80057de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057e2:	6013      	str	r3, [r2, #0]
  }
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00

080057f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e159      	b.n	8005ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005810:	2201      	movs	r2, #1
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4013      	ands	r3, r2
 8005822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	429a      	cmp	r2, r3
 800582a:	f040 8148 	bne.w	8005abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d005      	beq.n	8005846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005842:	2b02      	cmp	r3, #2
 8005844:	d130      	bne.n	80058a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2203      	movs	r2, #3
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800587c:	2201      	movs	r2, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0201 	and.w	r2, r3, #1
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d017      	beq.n	80058e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2203      	movs	r2, #3
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d123      	bne.n	8005938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	08da      	lsrs	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3208      	adds	r2, #8
 80058f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	220f      	movs	r2, #15
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	08da      	lsrs	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3208      	adds	r2, #8
 8005932:	69b9      	ldr	r1, [r7, #24]
 8005934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	2203      	movs	r2, #3
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0203 	and.w	r2, r3, #3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80a2 	beq.w	8005abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4b57      	ldr	r3, [pc, #348]	@ (8005adc <HAL_GPIO_Init+0x2e8>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	4a56      	ldr	r2, [pc, #344]	@ (8005adc <HAL_GPIO_Init+0x2e8>)
 8005984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005988:	6453      	str	r3, [r2, #68]	@ 0x44
 800598a:	4b54      	ldr	r3, [pc, #336]	@ (8005adc <HAL_GPIO_Init+0x2e8>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005996:	4a52      	ldr	r2, [pc, #328]	@ (8005ae0 <HAL_GPIO_Init+0x2ec>)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	3302      	adds	r3, #2
 800599e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	220f      	movs	r2, #15
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a49      	ldr	r2, [pc, #292]	@ (8005ae4 <HAL_GPIO_Init+0x2f0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d019      	beq.n	80059f6 <HAL_GPIO_Init+0x202>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a48      	ldr	r2, [pc, #288]	@ (8005ae8 <HAL_GPIO_Init+0x2f4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_GPIO_Init+0x1fe>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a47      	ldr	r2, [pc, #284]	@ (8005aec <HAL_GPIO_Init+0x2f8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00d      	beq.n	80059ee <HAL_GPIO_Init+0x1fa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a46      	ldr	r2, [pc, #280]	@ (8005af0 <HAL_GPIO_Init+0x2fc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <HAL_GPIO_Init+0x1f6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a45      	ldr	r2, [pc, #276]	@ (8005af4 <HAL_GPIO_Init+0x300>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d101      	bne.n	80059e6 <HAL_GPIO_Init+0x1f2>
 80059e2:	2304      	movs	r3, #4
 80059e4:	e008      	b.n	80059f8 <HAL_GPIO_Init+0x204>
 80059e6:	2307      	movs	r3, #7
 80059e8:	e006      	b.n	80059f8 <HAL_GPIO_Init+0x204>
 80059ea:	2303      	movs	r3, #3
 80059ec:	e004      	b.n	80059f8 <HAL_GPIO_Init+0x204>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e002      	b.n	80059f8 <HAL_GPIO_Init+0x204>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_GPIO_Init+0x204>
 80059f6:	2300      	movs	r3, #0
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	f002 0203 	and.w	r2, r2, #3
 80059fe:	0092      	lsls	r2, r2, #2
 8005a00:	4093      	lsls	r3, r2
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a08:	4935      	ldr	r1, [pc, #212]	@ (8005ae0 <HAL_GPIO_Init+0x2ec>)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	3302      	adds	r3, #2
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a16:	4b38      	ldr	r3, [pc, #224]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a40:	4b2d      	ldr	r3, [pc, #180]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a64:	4a24      	ldr	r2, [pc, #144]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a6a:	4b23      	ldr	r3, [pc, #140]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a94:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8005af8 <HAL_GPIO_Init+0x304>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	f67f aea2 	bls.w	8005810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	3724      	adds	r7, #36	@ 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40013800 	.word	0x40013800
 8005ae4:	40020000 	.word	0x40020000
 8005ae8:	40020400 	.word	0x40020400
 8005aec:	40020800 	.word	0x40020800
 8005af0:	40020c00 	.word	0x40020c00
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40013c00 	.word	0x40013c00

08005afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e0bb      	b.n	8005c90 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b18:	2201      	movs	r2, #1
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4013      	ands	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	f040 80ab 	bne.w	8005c8a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b34:	4a5c      	ldr	r2, [pc, #368]	@ (8005ca8 <HAL_GPIO_DeInit+0x1ac>)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a54      	ldr	r2, [pc, #336]	@ (8005cac <HAL_GPIO_DeInit+0x1b0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d019      	beq.n	8005b92 <HAL_GPIO_DeInit+0x96>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a53      	ldr	r2, [pc, #332]	@ (8005cb0 <HAL_GPIO_DeInit+0x1b4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <HAL_GPIO_DeInit+0x92>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_GPIO_DeInit+0x1b8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00d      	beq.n	8005b8a <HAL_GPIO_DeInit+0x8e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a51      	ldr	r2, [pc, #324]	@ (8005cb8 <HAL_GPIO_DeInit+0x1bc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <HAL_GPIO_DeInit+0x8a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a50      	ldr	r2, [pc, #320]	@ (8005cbc <HAL_GPIO_DeInit+0x1c0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <HAL_GPIO_DeInit+0x86>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e008      	b.n	8005b94 <HAL_GPIO_DeInit+0x98>
 8005b82:	2307      	movs	r3, #7
 8005b84:	e006      	b.n	8005b94 <HAL_GPIO_DeInit+0x98>
 8005b86:	2303      	movs	r3, #3
 8005b88:	e004      	b.n	8005b94 <HAL_GPIO_DeInit+0x98>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e002      	b.n	8005b94 <HAL_GPIO_DeInit+0x98>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_GPIO_DeInit+0x98>
 8005b92:	2300      	movs	r3, #0
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	f002 0203 	and.w	r2, r2, #3
 8005b9a:	0092      	lsls	r2, r2, #2
 8005b9c:	4093      	lsls	r3, r2
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d132      	bne.n	8005c0a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ba4:	4b46      	ldr	r3, [pc, #280]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	43db      	mvns	r3, r3
 8005bac:	4944      	ldr	r1, [pc, #272]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bb2:	4b43      	ldr	r3, [pc, #268]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	4941      	ldr	r1, [pc, #260]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	493d      	ldr	r1, [pc, #244]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005bce:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	493a      	ldr	r1, [pc, #232]	@ (8005cc0 <HAL_GPIO_DeInit+0x1c4>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	220f      	movs	r2, #15
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005bec:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca8 <HAL_GPIO_DeInit+0x1ac>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	482a      	ldr	r0, [pc, #168]	@ (8005ca8 <HAL_GPIO_DeInit+0x1ac>)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	400a      	ands	r2, r1
 8005c04:	3302      	adds	r3, #2
 8005c06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	2103      	movs	r1, #3
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	08da      	lsrs	r2, r3, #3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3208      	adds	r2, #8
 8005c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	220f      	movs	r2, #15
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	08d2      	lsrs	r2, r2, #3
 8005c40:	4019      	ands	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3208      	adds	r2, #8
 8005c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	2103      	movs	r1, #3
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	2101      	movs	r1, #1
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	401a      	ands	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	2103      	movs	r1, #3
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	401a      	ands	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	f67f af40 	bls.w	8005b18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	40020400 	.word	0x40020400
 8005cb4:	40020800 	.word	0x40020800
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40013c00 	.word	0x40013c00

08005cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e001      	b.n	8005ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d04:	787b      	ldrb	r3, [r7, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d10:	e003      	b.n	8005d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	041a      	lsls	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d006      	beq.n	8005d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d3e:	4a05      	ldr	r2, [pc, #20]	@ (8005d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd fa3e 	bl	80031c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40013c00 	.word	0x40013c00

08005d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e12b      	b.n	8005fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fd fb1c 	bl	80033bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	@ 0x24
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f003 f89c 	bl	8008ef8 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4a81      	ldr	r2, [pc, #516]	@ (8005fcc <HAL_I2C_Init+0x274>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d807      	bhi.n	8005ddc <HAL_I2C_Init+0x84>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a80      	ldr	r2, [pc, #512]	@ (8005fd0 <HAL_I2C_Init+0x278>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	bf94      	ite	ls
 8005dd4:	2301      	movls	r3, #1
 8005dd6:	2300      	movhi	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e006      	b.n	8005dea <HAL_I2C_Init+0x92>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a7d      	ldr	r2, [pc, #500]	@ (8005fd4 <HAL_I2C_Init+0x27c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	bf94      	ite	ls
 8005de4:	2301      	movls	r3, #1
 8005de6:	2300      	movhi	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e0e7      	b.n	8005fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a78      	ldr	r2, [pc, #480]	@ (8005fd8 <HAL_I2C_Init+0x280>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	0c9b      	lsrs	r3, r3, #18
 8005dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a6a      	ldr	r2, [pc, #424]	@ (8005fcc <HAL_I2C_Init+0x274>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d802      	bhi.n	8005e2c <HAL_I2C_Init+0xd4>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	e009      	b.n	8005e40 <HAL_I2C_Init+0xe8>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	4a69      	ldr	r2, [pc, #420]	@ (8005fdc <HAL_I2C_Init+0x284>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	3301      	adds	r3, #1
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	495c      	ldr	r1, [pc, #368]	@ (8005fcc <HAL_I2C_Init+0x274>)
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	d819      	bhi.n	8005e94 <HAL_I2C_Init+0x13c>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1e59      	subs	r1, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e74:	400b      	ands	r3, r1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_I2C_Init+0x138>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1e59      	subs	r1, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e88:	3301      	adds	r3, #1
 8005e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8e:	e051      	b.n	8005f34 <HAL_I2C_Init+0x1dc>
 8005e90:	2304      	movs	r3, #4
 8005e92:	e04f      	b.n	8005f34 <HAL_I2C_Init+0x1dc>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d111      	bne.n	8005ec0 <HAL_I2C_Init+0x168>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	440b      	add	r3, r1
 8005eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2301      	moveq	r3, #1
 8005eba:	2300      	movne	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e012      	b.n	8005ee6 <HAL_I2C_Init+0x18e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1e58      	subs	r0, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	0099      	lsls	r1, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Init+0x196>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e022      	b.n	8005f34 <HAL_I2C_Init+0x1dc>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10e      	bne.n	8005f14 <HAL_I2C_Init+0x1bc>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1e58      	subs	r0, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f12:	e00f      	b.n	8005f34 <HAL_I2C_Init+0x1dc>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1e58      	subs	r0, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6859      	ldr	r1, [r3, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	0099      	lsls	r1, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	6809      	ldr	r1, [r1, #0]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6911      	ldr	r1, [r2, #16]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68d2      	ldr	r2, [r2, #12]
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	000186a0 	.word	0x000186a0
 8005fd0:	001e847f 	.word	0x001e847f
 8005fd4:	003d08ff 	.word	0x003d08ff
 8005fd8:	431bde83 	.word	0x431bde83
 8005fdc:	10624dd3 	.word	0x10624dd3

08005fe0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e021      	b.n	8006036 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2224      	movs	r2, #36	@ 0x24
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd fa1e 	bl	800344c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	461a      	mov	r2, r3
 800604c:	460b      	mov	r3, r1
 800604e:	817b      	strh	r3, [r7, #10]
 8006050:	4613      	mov	r3, r2
 8006052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006054:	f7fd fe6a 	bl	8003d2c <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b20      	cmp	r3, #32
 8006064:	f040 80e0 	bne.w	8006228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2319      	movs	r3, #25
 800606e:	2201      	movs	r2, #1
 8006070:	4970      	ldr	r1, [pc, #448]	@ (8006234 <HAL_I2C_Master_Transmit+0x1f4>)
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fd86 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
 8006080:	e0d3      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_I2C_Master_Transmit+0x50>
 800608c:	2302      	movs	r3, #2
 800608e:	e0cc      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d007      	beq.n	80060b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2221      	movs	r2, #33	@ 0x21
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2210      	movs	r2, #16
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	893a      	ldrh	r2, [r7, #8]
 80060e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a50      	ldr	r2, [pc, #320]	@ (8006238 <HAL_I2C_Master_Transmit+0x1f8>)
 80060f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060f8:	8979      	ldrh	r1, [r7, #10]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fbf0 	bl	80068e4 <I2C_MasterRequestWrite>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e08d      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006124:	e066      	b.n	80061f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fe00 	bl	8006d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	2b04      	cmp	r3, #4
 800613c:	d107      	bne.n	800614e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e06b      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b04      	cmp	r3, #4
 800618e:	d11b      	bne.n	80061c8 <HAL_I2C_Master_Transmit+0x188>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d017      	beq.n	80061c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	6a39      	ldr	r1, [r7, #32]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fdf0 	bl	8006db2 <I2C_WaitOnBTFFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d107      	bne.n	80061f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e01a      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d194      	bne.n	8006126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800620a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	00100002 	.word	0x00100002
 8006238:	ffff0000 	.word	0xffff0000

0800623c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	@ 0x30
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	461a      	mov	r2, r3
 8006248:	460b      	mov	r3, r1
 800624a:	817b      	strh	r3, [r7, #10]
 800624c:	4613      	mov	r3, r2
 800624e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006250:	f7fd fd6c 	bl	8003d2c <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b20      	cmp	r3, #32
 8006260:	f040 820b 	bne.w	800667a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	2319      	movs	r3, #25
 800626a:	2201      	movs	r2, #1
 800626c:	497c      	ldr	r1, [pc, #496]	@ (8006460 <HAL_I2C_Master_Receive+0x224>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fc88 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	e1fe      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_I2C_Master_Receive+0x50>
 8006288:	2302      	movs	r3, #2
 800628a:	e1f7      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d007      	beq.n	80062b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2222      	movs	r2, #34	@ 0x22
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2210      	movs	r2, #16
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	893a      	ldrh	r2, [r7, #8]
 80062e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a5c      	ldr	r2, [pc, #368]	@ (8006464 <HAL_I2C_Master_Receive+0x228>)
 80062f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062f4:	8979      	ldrh	r1, [r7, #10]
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fb74 	bl	80069e8 <I2C_MasterRequestRead>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e1b8      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d113      	bne.n	800633a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006312:	2300      	movs	r3, #0
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	623b      	str	r3, [r7, #32]
 8006326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e18c      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11b      	bne.n	800637a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e16c      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637e:	2b02      	cmp	r3, #2
 8006380:	d11b      	bne.n	80063ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a2:	2300      	movs	r3, #0
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	e14c      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063e0:	e138      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	f200 80f1 	bhi.w	80065ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d123      	bne.n	800643c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fd1b 	bl	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e139      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800643a:	e10b      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006440:	2b02      	cmp	r3, #2
 8006442:	d14e      	bne.n	80064e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	4906      	ldr	r1, [pc, #24]	@ (8006468 <HAL_I2C_Master_Receive+0x22c>)
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fb98 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e10e      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000
 8006468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064e0:	e0b8      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	4966      	ldr	r1, [pc, #408]	@ (8006684 <HAL_I2C_Master_Receive+0x448>)
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fb49 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0bf      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800650a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	494f      	ldr	r1, [pc, #316]	@ (8006684 <HAL_I2C_Master_Receive+0x448>)
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fb1b 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e091      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065cc:	e042      	b.n	8006654 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fc2e 	bl	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e04c      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b04      	cmp	r3, #4
 8006620:	d118      	bne.n	8006654 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f aec2 	bne.w	80063e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e000      	b.n	800667c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800667a:	2302      	movs	r3, #2
  }
}
 800667c:	4618      	mov	r0, r3
 800667e:	3728      	adds	r7, #40	@ 0x28
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	00010004 	.word	0x00010004

08006688 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	@ 0x28
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	460b      	mov	r3, r1
 8006696:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006698:	f7fd fb48 	bl	8003d2c <HAL_GetTick>
 800669c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	f040 8111 	bne.w	80068d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	2319      	movs	r3, #25
 80066b6:	2201      	movs	r2, #1
 80066b8:	4988      	ldr	r1, [pc, #544]	@ (80068dc <HAL_I2C_IsDeviceReady+0x254>)
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fa62 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
 80066c8:	e104      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_I2C_IsDeviceReady+0x50>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0fd      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d007      	beq.n	80066fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800670c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2224      	movs	r2, #36	@ 0x24
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a70      	ldr	r2, [pc, #448]	@ (80068e0 <HAL_I2C_IsDeviceReady+0x258>)
 8006720:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006730:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2200      	movs	r2, #0
 800673a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fa20 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006758:	d103      	bne.n	8006762 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006760:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e0b6      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006774:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006776:	f7fd fad9 	bl	8003d2c <HAL_GetTick>
 800677a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b02      	cmp	r3, #2
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a0:	bf0c      	ite	eq
 80067a2:	2301      	moveq	r3, #1
 80067a4:	2300      	movne	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067aa:	e025      	b.n	80067f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067ac:	f7fd fabe 	bl	8003d2c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <HAL_I2C_IsDeviceReady+0x13a>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	22a0      	movs	r2, #160	@ 0xa0
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2ba0      	cmp	r3, #160	@ 0xa0
 8006802:	d005      	beq.n	8006810 <HAL_I2C_IsDeviceReady+0x188>
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_I2C_IsDeviceReady+0x188>
 800680a:	7dbb      	ldrb	r3, [r7, #22]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0cd      	beq.n	80067ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b02      	cmp	r3, #2
 8006824:	d129      	bne.n	800687a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006834:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2319      	movs	r3, #25
 8006852:	2201      	movs	r2, #1
 8006854:	4921      	ldr	r1, [pc, #132]	@ (80068dc <HAL_I2C_IsDeviceReady+0x254>)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f994 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e036      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e02c      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006888:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006892:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2319      	movs	r3, #25
 800689a:	2201      	movs	r2, #1
 800689c:	490f      	ldr	r1, [pc, #60]	@ (80068dc <HAL_I2C_IsDeviceReady+0x254>)
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f970 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e012      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3301      	adds	r3, #1
 80068b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	f4ff af32 	bcc.w	8006722 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
  }
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	00100002 	.word	0x00100002
 80068e0:	ffff0000 	.word	0xffff0000

080068e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	460b      	mov	r3, r1
 80068f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d006      	beq.n	800690e <I2C_MasterRequestWrite+0x2a>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d003      	beq.n	800690e <I2C_MasterRequestWrite+0x2a>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800690c:	d108      	bne.n	8006920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e00b      	b.n	8006938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	2b12      	cmp	r3, #18
 8006926:	d107      	bne.n	8006938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f91d 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695e:	d103      	bne.n	8006968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006966:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e035      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006974:	d108      	bne.n	8006988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006984:	611a      	str	r2, [r3, #16]
 8006986:	e01b      	b.n	80069c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006988:	897b      	ldrh	r3, [r7, #10]
 800698a:	11db      	asrs	r3, r3, #7
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f063 030f 	orn	r3, r3, #15
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	490e      	ldr	r1, [pc, #56]	@ (80069e0 <I2C_MasterRequestWrite+0xfc>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f943 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e010      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4907      	ldr	r1, [pc, #28]	@ (80069e4 <I2C_MasterRequestWrite+0x100>)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f933 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	00010008 	.word	0x00010008
 80069e4:	00010002 	.word	0x00010002

080069e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	460b      	mov	r3, r1
 80069f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d006      	beq.n	8006a22 <I2C_MasterRequestRead+0x3a>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d003      	beq.n	8006a22 <I2C_MasterRequestRead+0x3a>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a20:	d108      	bne.n	8006a34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	e00b      	b.n	8006a4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	2b11      	cmp	r3, #17
 8006a3a:	d107      	bne.n	8006a4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f893 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00d      	beq.n	8006a80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a72:	d103      	bne.n	8006a7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e079      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a88:	d108      	bne.n	8006a9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	611a      	str	r2, [r3, #16]
 8006a9a:	e05f      	b.n	8006b5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a9c:	897b      	ldrh	r3, [r7, #10]
 8006a9e:	11db      	asrs	r3, r3, #7
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0306 	and.w	r3, r3, #6
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f063 030f 	orn	r3, r3, #15
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4930      	ldr	r1, [pc, #192]	@ (8006b7c <I2C_MasterRequestRead+0x194>)
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f8b9 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e054      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4929      	ldr	r1, [pc, #164]	@ (8006b80 <I2C_MasterRequestRead+0x198>)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f8a9 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e044      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f831 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b36:	d103      	bne.n	8006b40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e017      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b44:	897b      	ldrh	r3, [r7, #10]
 8006b46:	11db      	asrs	r3, r3, #7
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0306 	and.w	r3, r3, #6
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f063 030e 	orn	r3, r3, #14
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4907      	ldr	r1, [pc, #28]	@ (8006b80 <I2C_MasterRequestRead+0x198>)
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f865 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	00010008 	.word	0x00010008
 8006b80:	00010002 	.word	0x00010002

08006b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b94:	e025      	b.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d021      	beq.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fd f8c5 	bl	8003d2c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d116      	bne.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e023      	b.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10d      	bne.n	8006c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	e00c      	b.n	8006c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d0b6      	beq.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c40:	e051      	b.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c50:	d123      	bne.n	8006c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e046      	b.n	8006d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d021      	beq.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fd f843 	bl	8003d2c <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d116      	bne.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e020      	b.n	8006d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10c      	bne.n	8006d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e00b      	b.n	8006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	43da      	mvns	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d18d      	bne.n	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d3c:	e02d      	b.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f8ce 	bl	8006ee0 <I2C_IsAcknowledgeFailed>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e02d      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d021      	beq.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fc ffe9 	bl	8003d2c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d116      	bne.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e007      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da4:	2b80      	cmp	r3, #128	@ 0x80
 8006da6:	d1ca      	bne.n	8006d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dbe:	e02d      	b.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f88d 	bl	8006ee0 <I2C_IsAcknowledgeFailed>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e02d      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d021      	beq.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fc ffa8 	bl	8003d2c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d1ca      	bne.n	8006dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e40:	e042      	b.n	8006ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d119      	bne.n	8006e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0210 	mvn.w	r2, #16
 8006e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e029      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e84:	f7fc ff52 	bl	8003d2c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e007      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed2:	2b40      	cmp	r3, #64	@ 0x40
 8006ed4:	d1b5      	bne.n	8006e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef6:	d11b      	bne.n	8006f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	f043 0204 	orr.w	r2, r3, #4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e034      	b.n	8006fba <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006f58:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006f62:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6852      	ldr	r2, [r2, #4]
 8006f6c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6892      	ldr	r2, [r2, #8]
 8006f76:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006f78:	f7fc fed8 	bl	8003d2c <HAL_GetTick>
 8006f7c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f7e:	e00f      	b.n	8006fa0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006f80:	f7fc fed4 	bl	8003d2c <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b31      	cmp	r3, #49	@ 0x31
 8006f8c:	d908      	bls.n	8006fa0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e00c      	b.n	8006fba <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e8      	bne.n	8006f80 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006fd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe4:	b08f      	sub	sp, #60	@ 0x3c
 8006fe6:	af0a      	add	r7, sp, #40	@ 0x28
 8006fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e10f      	b.n	8007214 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f014 fbfe 	bl	801b810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2203      	movs	r2, #3
 8007018:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f006 fc9f 	bl	800d976 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	687e      	ldr	r6, [r7, #4]
 8007040:	466d      	mov	r5, sp
 8007042:	f106 0410 	add.w	r4, r6, #16
 8007046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800704a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800704c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800704e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007052:	e885 0003 	stmia.w	r5, {r0, r1}
 8007056:	1d33      	adds	r3, r6, #4
 8007058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800705a:	6838      	ldr	r0, [r7, #0]
 800705c:	f006 fb76 	bl	800d74c <USB_CoreInit>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e0d0      	b.n	8007214 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f006 fc8d 	bl	800d998 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	e04a      	b.n	800711a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	333d      	adds	r3, #61	@ 0x3d
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	333c      	adds	r3, #60	@ 0x3c
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	b298      	uxth	r0, r3
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	3344      	adds	r3, #68	@ 0x44
 80070c0:	4602      	mov	r2, r0
 80070c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070c4:	7bfa      	ldrb	r2, [r7, #15]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3340      	adds	r3, #64	@ 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	3348      	adds	r3, #72	@ 0x48
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070ec:	7bfa      	ldrb	r2, [r7, #15]
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4613      	mov	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	334c      	adds	r3, #76	@ 0x4c
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3354      	adds	r3, #84	@ 0x54
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	3301      	adds	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	7bfa      	ldrb	r2, [r7, #15]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d3af      	bcc.n	8007084 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	e044      	b.n	80071b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800712a:	7bfa      	ldrb	r2, [r7, #15]
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800713c:	2200      	movs	r2, #0
 800713e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007140:	7bfa      	ldrb	r2, [r7, #15]
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8007152:	7bfa      	ldrb	r2, [r7, #15]
 8007154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007156:	7bfa      	ldrb	r2, [r7, #15]
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800716c:	7bfa      	ldrb	r2, [r7, #15]
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007182:	7bfa      	ldrb	r2, [r7, #15]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	3301      	adds	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3b5      	bcc.n	800712a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	687e      	ldr	r6, [r7, #4]
 80071c6:	466d      	mov	r5, sp
 80071c8:	f106 0410 	add.w	r4, r6, #16
 80071cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80071dc:	1d33      	adds	r3, r6, #4
 80071de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071e0:	6838      	ldr	r0, [r7, #0]
 80071e2:	f006 fc25 	bl	800da30 <USB_DevInit>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e00d      	b.n	8007214 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f007 fdc3 	bl	800ed98 <USB_DevDisconnect>

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800721c <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e015      	b.n	800725a <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2203      	movs	r2, #3
 8007232:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f007 fd16 	bl	800ec6c <USB_StopDevice>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e007      	b.n	800725a <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f014 fb34 	bl	801b8b8 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_PCD_Start+0x1c>
 800727a:	2302      	movs	r3, #2
 800727c:	e020      	b.n	80072c0 <HAL_PCD_Start+0x5e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	2b01      	cmp	r3, #1
 800728c:	d109      	bne.n	80072a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007292:	2b01      	cmp	r3, #1
 8007294:	d005      	beq.n	80072a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f006 fb54 	bl	800d954 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f007 fd50 	bl	800ed56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_PCD_Stop+0x1c>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e026      	b.n	8007332 <HAL_PCD_Stop+0x6a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f006 fb40 	bl	800d976 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f007 fd4c 	bl	800ed98 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2110      	movs	r1, #16
 8007306:	4618      	mov	r0, r3
 8007308:	f006 fcf6 	bl	800dcf8 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	2b01      	cmp	r3, #1
 8007312:	d109      	bne.n	8007328 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007318:	2b01      	cmp	r3, #1
 800731a:	d005      	beq.n	8007328 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800733a:	b590      	push	{r4, r7, lr}
 800733c:	b08d      	sub	sp, #52	@ 0x34
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f007 fdd5 	bl	800ef00 <USB_GetMode>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	f040 848a 	bne.w	8007c72 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f007 fd39 	bl	800edda <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8480 	beq.w	8007c70 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f007 fd26 	bl	800edda <USB_ReadInterrupts>
 800738e:	4603      	mov	r3, r0
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b02      	cmp	r3, #2
 8007396:	d107      	bne.n	80073a8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695a      	ldr	r2, [r3, #20]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f002 0202 	and.w	r2, r2, #2
 80073a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f007 fd14 	bl	800edda <USB_ReadInterrupts>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d161      	bne.n	8007480 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0210 	bic.w	r2, r2, #16
 80073ca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f003 020f 	and.w	r2, r3, #15
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	3304      	adds	r3, #4
 80073ea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	0c5b      	lsrs	r3, r3, #17
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d124      	bne.n	8007442 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d035      	beq.n	8007470 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800740e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007412:	b29b      	uxth	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	6a38      	ldr	r0, [r7, #32]
 8007418:	f007 fafc 	bl	800ea14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007428:	441a      	add	r2, r3
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a1a      	ldr	r2, [r3, #32]
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743a:	441a      	add	r2, r3
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	621a      	str	r2, [r3, #32]
 8007440:	e016      	b.n	8007470 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	0c5b      	lsrs	r3, r3, #17
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	2b06      	cmp	r3, #6
 800744c:	d110      	bne.n	8007470 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007454:	2208      	movs	r2, #8
 8007456:	4619      	mov	r1, r3
 8007458:	6a38      	ldr	r0, [r7, #32]
 800745a:	f007 fadb 	bl	800ea14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6a1a      	ldr	r2, [r3, #32]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	091b      	lsrs	r3, r3, #4
 8007466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746a:	441a      	add	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0210 	orr.w	r2, r2, #16
 800747e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f007 fca8 	bl	800edda <USB_ReadInterrupts>
 800748a:	4603      	mov	r3, r0
 800748c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007494:	f040 80a7 	bne.w	80075e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f007 fcad 	bl	800ee00 <USB_ReadDevAllOutEpInterrupt>
 80074a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80074a8:	e099      	b.n	80075de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 808e 	beq.w	80075d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f007 fcd1 	bl	800ee68 <USB_ReadDevOutEPInterrupt>
 80074c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074de:	461a      	mov	r2, r3
 80074e0:	2301      	movs	r3, #1
 80074e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80074e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fef0 	bl	80082cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	2308      	movs	r3, #8
 8007506:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 ffc6 	bl	800849c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	2310      	movs	r3, #16
 800752a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d030      	beq.n	8007598 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b80      	cmp	r3, #128	@ 0x80
 8007540:	d109      	bne.n	8007556 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007554:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	3304      	adds	r3, #4
 800756a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	78db      	ldrb	r3, [r3, #3]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d108      	bne.n	8007586 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	b2db      	uxtb	r3, r3
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f014 fa6b 	bl	801ba5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	461a      	mov	r2, r3
 8007594:	2302      	movs	r3, #2
 8007596:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ae:	461a      	mov	r2, r3
 80075b0:	2320      	movs	r3, #32
 80075b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ca:	461a      	mov	r2, r3
 80075cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80075d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	3301      	adds	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f af62 	bne.w	80074aa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f007 fbf5 	bl	800edda <USB_ReadInterrupts>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075fa:	f040 80db 	bne.w	80077b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f007 fc16 	bl	800ee34 <USB_ReadDevAllInEpInterrupt>
 8007608:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800760e:	e0cd      	b.n	80077ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80c2 	beq.w	80077a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f007 fc3c 	bl	800eea4 <USB_ReadDevInEPInterrupt>
 800762c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d057      	beq.n	80076e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	2201      	movs	r2, #1
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	43db      	mvns	r3, r3
 8007652:	69f9      	ldr	r1, [r7, #28]
 8007654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007658:	4013      	ands	r3, r2
 800765a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007668:	461a      	mov	r2, r3
 800766a:	2301      	movs	r3, #1
 800766c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d132      	bne.n	80076dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767a:	4613      	mov	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	334c      	adds	r3, #76	@ 0x4c
 8007686:	6819      	ldr	r1, [r3, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4403      	add	r3, r0
 8007696:	3348      	adds	r3, #72	@ 0x48
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4419      	add	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a0:	4613      	mov	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4403      	add	r3, r0
 80076aa:	334c      	adds	r3, #76	@ 0x4c
 80076ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d113      	bne.n	80076dc <HAL_PCD_IRQHandler+0x3a2>
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b8:	4613      	mov	r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	3354      	adds	r3, #84	@ 0x54
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d108      	bne.n	80076dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80076d4:	461a      	mov	r2, r3
 80076d6:	2101      	movs	r1, #1
 80076d8:	f007 fc44 	bl	800ef64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f014 f935 	bl	801b952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076fe:	461a      	mov	r2, r3
 8007700:	2308      	movs	r3, #8
 8007702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800771a:	461a      	mov	r2, r3
 800771c:	2310      	movs	r3, #16
 800771e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007736:	461a      	mov	r2, r3
 8007738:	2340      	movs	r3, #64	@ 0x40
 800773a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d023      	beq.n	800778e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007748:	6a38      	ldr	r0, [r7, #32]
 800774a:	f006 fad5 	bl	800dcf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800774e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	3338      	adds	r3, #56	@ 0x38
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	3304      	adds	r3, #4
 8007760:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d108      	bne.n	800777c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	b2db      	uxtb	r3, r3
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f014 f982 	bl	801ba80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007788:	461a      	mov	r2, r3
 800778a:	2302      	movs	r3, #2
 800778c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007798:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fd08 	bl	80081b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	3301      	adds	r3, #1
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f47f af2e 	bne.w	8007610 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f007 fb0e 	bl	800edda <USB_ReadInterrupts>
 80077be:	4603      	mov	r3, r0
 80077c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c8:	d122      	bne.n	8007810 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d108      	bne.n	80077fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fef0 	bl	80085d8 <HAL_PCDEx_LPM_Callback>
 80077f8:	e002      	b.n	8007800 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f014 f920 	bl	801ba40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800780e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f007 fae0 	bl	800edda <USB_ReadInterrupts>
 800781a:	4603      	mov	r3, r0
 800781c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007824:	d112      	bne.n	800784c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b01      	cmp	r3, #1
 8007834:	d102      	bne.n	800783c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f014 f8dc 	bl	801b9f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800784a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f007 fac2 	bl	800edda <USB_ReadInterrupts>
 8007856:	4603      	mov	r3, r0
 8007858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007860:	f040 80b7 	bne.w	80079d2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007872:	f023 0301 	bic.w	r3, r3, #1
 8007876:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2110      	movs	r1, #16
 800787e:	4618      	mov	r0, r3
 8007880:	f006 fa3a 	bl	800dcf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007884:	2300      	movs	r3, #0
 8007886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007888:	e046      	b.n	8007918 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007896:	461a      	mov	r2, r3
 8007898:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800789c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	461a      	mov	r2, r3
 80078cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800790c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007910:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007914:	3301      	adds	r3, #1
 8007916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800791e:	429a      	cmp	r2, r3
 8007920:	d3b3      	bcc.n	800788a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007930:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007934:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	2b00      	cmp	r3, #0
 800793c:	d016      	beq.n	800796c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800794e:	f043 030b 	orr.w	r3, r3, #11
 8007952:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007964:	f043 030b 	orr.w	r3, r3, #11
 8007968:	6453      	str	r3, [r2, #68]	@ 0x44
 800796a:	e015      	b.n	8007998 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800797a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800797e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007982:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007992:	f043 030b 	orr.w	r3, r3, #11
 8007996:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80079aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079bc:	461a      	mov	r2, r3
 80079be:	f007 fad1 	bl	800ef64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80079d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f007 f9ff 	bl	800edda <USB_ReadInterrupts>
 80079dc:	4603      	mov	r3, r0
 80079de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079e6:	d124      	bne.n	8007a32 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f007 fa95 	bl	800ef1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f006 f9fb 	bl	800ddf2 <USB_GetDevSpeed>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681c      	ldr	r4, [r3, #0]
 8007a08:	f001 fa6a 	bl	8008ee0 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	4620      	mov	r0, r4
 8007a18:	f005 fefa 	bl	800d810 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f013 ffc0 	bl	801b9a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f007 f9cf 	bl	800edda <USB_ReadInterrupts>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d10a      	bne.n	8007a5c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f013 ff9d 	bl	801b986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f002 0208 	and.w	r2, r2, #8
 8007a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f007 f9ba 	bl	800edda <USB_ReadInterrupts>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6c:	2b80      	cmp	r3, #128	@ 0x80
 8007a6e:	d122      	bne.n	8007ab6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a80:	e014      	b.n	8007aac <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a86:	4613      	mov	r3, r2
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fb27 	bl	80080f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3e5      	bcc.n	8007a82 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f007 f98d 	bl	800edda <USB_ReadInterrupts>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aca:	d13b      	bne.n	8007b44 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007acc:	2301      	movs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad0:	e02b      	b.n	8007b2a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3340      	adds	r3, #64	@ 0x40
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d115      	bne.n	8007b24 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007af8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da12      	bge.n	8007b24 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	333f      	adds	r3, #63	@ 0x3f
 8007b0e:	2201      	movs	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fae8 	bl	80080f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	3301      	adds	r3, #1
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d3ce      	bcc.n	8007ad2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f007 f946 	bl	800edda <USB_ReadInterrupts>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b58:	d155      	bne.n	8007c06 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	e045      	b.n	8007bec <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b74:	4613      	mov	r3, r2
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d12e      	bne.n	8007be6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da2b      	bge.n	8007be6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007b9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d121      	bne.n	8007be6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007be2:	6053      	str	r3, [r2, #4]
            break;
 8007be4:	e007      	b.n	8007bf6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	3301      	adds	r3, #1
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d3b4      	bcc.n	8007b60 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f007 f8e5 	bl	800edda <USB_ReadInterrupts>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1a:	d10a      	bne.n	8007c32 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f013 ff41 	bl	801baa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f007 f8cf 	bl	800edda <USB_ReadInterrupts>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d115      	bne.n	8007c72 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f013 ff31 	bl	801bac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6859      	ldr	r1, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e000      	b.n	8007c72 <HAL_PCD_IRQHandler+0x938>
      return;
 8007c70:	bf00      	nop
    }
  }
}
 8007c72:	3734      	adds	r7, #52	@ 0x34
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd90      	pop	{r4, r7, pc}

08007c78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_PCD_SetAddress+0x1a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e013      	b.n	8007cba <HAL_PCD_SetAddress+0x42>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f007 f82d 	bl	800ed0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	4608      	mov	r0, r1
 8007ccc:	4611      	mov	r1, r2
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	70fb      	strb	r3, [r7, #3]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	803b      	strh	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da0f      	bge.n	8007d08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	3338      	adds	r3, #56	@ 0x38
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	705a      	strb	r2, [r3, #1]
 8007d06:	e00f      	b.n	8007d28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	f003 020f 	and.w	r2, r3, #15
 8007d0e:	4613      	mov	r3, r2
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3304      	adds	r3, #4
 8007d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d34:	883a      	ldrh	r2, [r7, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	78ba      	ldrb	r2, [r7, #2]
 8007d3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d52:	78bb      	ldrb	r3, [r7, #2]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d102      	bne.n	8007d5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_PCD_EP_Open+0xaa>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e00e      	b.n	8007d8a <HAL_PCD_EP_Open+0xc8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f006 f85e 	bl	800de3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	da0f      	bge.n	8007dc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	3338      	adds	r3, #56	@ 0x38
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	705a      	strb	r2, [r3, #1]
 8007dc4:	e00f      	b.n	8007de6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	f003 020f 	and.w	r2, r3, #15
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_PCD_EP_Close+0x6e>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e00e      	b.n	8007e1e <HAL_PCD_EP_Close+0x8c>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f006 f89c 	bl	800df4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	460b      	mov	r3, r1
 8007e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2200      	movs	r2, #0
 8007e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d102      	bne.n	8007e82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	6979      	ldr	r1, [r7, #20]
 8007e9a:	f006 fb7b 	bl	800e594 <USB_EP0StartXfer>
 8007e9e:	e008      	b.n	8007eb2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6979      	ldr	r1, [r7, #20]
 8007eae:	f006 f929 	bl	800e104 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007ede:	681b      	ldr	r3, [r3, #0]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	f003 020f 	and.w	r2, r3, #15
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3338      	adds	r3, #56	@ 0x38
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3304      	adds	r3, #4
 8007f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d102      	bne.n	8007f46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6979      	ldr	r1, [r7, #20]
 8007f5e:	f006 fb19 	bl	800e594 <USB_EP0StartXfer>
 8007f62:	e008      	b.n	8007f76 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6979      	ldr	r1, [r7, #20]
 8007f72:	f006 f8c7 	bl	800e104 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d901      	bls.n	8007f9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e050      	b.n	8008040 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da0f      	bge.n	8007fc6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	f003 020f 	and.w	r2, r3, #15
 8007fac:	4613      	mov	r3, r2
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	3338      	adds	r3, #56	@ 0x38
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	3304      	adds	r3, #4
 8007fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	705a      	strb	r2, [r3, #1]
 8007fc4:	e00d      	b.n	8007fe2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3304      	adds	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_PCD_EP_SetStall+0x82>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e01e      	b.n	8008040 <HAL_PCD_EP_SetStall+0xc0>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	4618      	mov	r0, r3
 8008012:	f006 fd57 	bl	800eac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	b2d9      	uxtb	r1, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008030:	461a      	mov	r2, r3
 8008032:	f006 ff97 	bl	800ef64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	f003 020f 	and.w	r2, r3, #15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d901      	bls.n	8008066 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e042      	b.n	80080ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da0f      	bge.n	800808e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	f003 020f 	and.w	r2, r3, #15
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	3338      	adds	r3, #56	@ 0x38
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	3304      	adds	r3, #4
 8008084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	705a      	strb	r2, [r3, #1]
 800808c:	e00f      	b.n	80080ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	f003 020f 	and.w	r2, r3, #15
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	3304      	adds	r3, #4
 80080a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_PCD_EP_ClrStall+0x86>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e00e      	b.n	80080ec <HAL_PCD_EP_ClrStall+0xa4>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	4618      	mov	r0, r3
 80080de:	f006 fd5f 	bl	800eba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da0c      	bge.n	8008122 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	4613      	mov	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	3338      	adds	r3, #56	@ 0x38
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4413      	add	r3, r2
 800811c:	3304      	adds	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e00c      	b.n	800813c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	3304      	adds	r3, #4
 800813a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	4618      	mov	r0, r3
 8008144:	f006 fb7e 	bl	800e844 <USB_EPStopXfer>
 8008148:	4603      	mov	r3, r0
 800814a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800814c:	7afb      	ldrb	r3, [r7, #11]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_PCD_EP_Flush+0x1a>
 800816c:	2302      	movs	r3, #2
 800816e:	e01b      	b.n	80081a8 <HAL_PCD_EP_Flush+0x52>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da09      	bge.n	8008194 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f005 fdb3 	bl	800dcf8 <USB_FlushTxFifo>
 8008192:	e004      	b.n	800819e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f005 fde1 	bl	800dd60 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	@ 0x28
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	3338      	adds	r3, #56	@ 0x38
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	3304      	adds	r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d901      	bls.n	80081e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e06c      	b.n	80082c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d902      	bls.n	8008204 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3303      	adds	r3, #3
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800820c:	e02b      	b.n	8008266 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	429a      	cmp	r2, r3
 8008222:	d902      	bls.n	800822a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	3303      	adds	r3, #3
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6919      	ldr	r1, [r3, #16]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008242:	b2db      	uxtb	r3, r3
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4603      	mov	r3, r0
 8008248:	6978      	ldr	r0, [r7, #20]
 800824a:	f006 fba5 	bl	800e998 <USB_WritePacket>

    ep->xfer_buff  += len;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a1a      	ldr	r2, [r3, #32]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	d809      	bhi.n	8008290 <PCD_WriteEmptyTxFifo+0xe0>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a1a      	ldr	r2, [r3, #32]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008284:	429a      	cmp	r2, r3
 8008286:	d203      	bcs.n	8008290 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1be      	bne.n	800820e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	429a      	cmp	r2, r3
 800829a:	d811      	bhi.n	80082c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	2201      	movs	r2, #1
 80082a4:	fa02 f303 	lsl.w	r3, r2, r3
 80082a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	43db      	mvns	r3, r3
 80082b6:	6939      	ldr	r1, [r7, #16]
 80082b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082bc:	4013      	ands	r3, r2
 80082be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	333c      	adds	r3, #60	@ 0x3c
 80082e4:	3304      	adds	r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d17b      	bne.n	80083fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d015      	beq.n	8008338 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4a61      	ldr	r2, [pc, #388]	@ (8008494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	f240 80b9 	bls.w	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80b3 	beq.w	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832e:	461a      	mov	r2, r3
 8008330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008334:	6093      	str	r3, [r2, #8]
 8008336:	e0a7      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834e:	461a      	mov	r2, r3
 8008350:	2320      	movs	r3, #32
 8008352:	6093      	str	r3, [r2, #8]
 8008354:	e098      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8093 	bne.w	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	4a4b      	ldr	r2, [pc, #300]	@ (8008494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d90f      	bls.n	800838a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008380:	461a      	mov	r2, r3
 8008382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008386:	6093      	str	r3, [r2, #8]
 8008388:	e07e      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	3304      	adds	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	0159      	lsls	r1, r3, #5
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	440b      	add	r3, r1
 80083ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d114      	bne.n	80083ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80083d4:	461a      	mov	r2, r3
 80083d6:	2101      	movs	r1, #1
 80083d8:	f006 fdc4 	bl	800ef64 <USB_EP0_OutStart>
 80083dc:	e006      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	441a      	add	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f013 fa92 	bl	801b91c <HAL_PCD_DataOutStageCallback>
 80083f8:	e046      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	4a26      	ldr	r2, [pc, #152]	@ (8008498 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d124      	bne.n	800844c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008418:	461a      	mov	r2, r3
 800841a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800841e:	6093      	str	r3, [r2, #8]
 8008420:	e032      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008438:	461a      	mov	r2, r3
 800843a:	2320      	movs	r3, #32
 800843c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f013 fa69 	bl	801b91c <HAL_PCD_DataOutStageCallback>
 800844a:	e01d      	b.n	8008488 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d114      	bne.n	800847c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008474:	461a      	mov	r2, r3
 8008476:	2100      	movs	r1, #0
 8008478:	f006 fd74 	bl	800ef64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f013 fa4a 	bl	801b91c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3720      	adds	r7, #32
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	4f54300a 	.word	0x4f54300a
 8008498:	4f54310a 	.word	0x4f54310a

0800849c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	333c      	adds	r3, #60	@ 0x3c
 80084b4:	3304      	adds	r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <PCD_EP_OutSetupPacket_int+0x88>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d90e      	bls.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e8:	461a      	mov	r2, r3
 80084ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f013 fa01 	bl	801b8f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008524 <PCD_EP_OutSetupPacket_int+0x88>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d90c      	bls.n	8008518 <PCD_EP_OutSetupPacket_int+0x7c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d108      	bne.n	8008518 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008510:	461a      	mov	r2, r3
 8008512:	2101      	movs	r1, #1
 8008514:	f006 fd26 	bl	800ef64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	4f54300a 	.word	0x4f54300a

08008528 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	4613      	mov	r3, r2
 8008536:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d107      	bne.n	8008556 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008546:	883b      	ldrh	r3, [r7, #0]
 8008548:	0419      	lsls	r1, r3, #16
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	430a      	orrs	r2, r1
 8008552:	629a      	str	r2, [r3, #40]	@ 0x28
 8008554:	e028      	b.n	80085a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e00d      	b.n	8008586 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	3340      	adds	r3, #64	@ 0x40
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	7bfa      	ldrb	r2, [r7, #15]
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	3b01      	subs	r3, #1
 800858c:	429a      	cmp	r2, r3
 800858e:	d3ec      	bcc.n	800856a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008590:	883b      	ldrh	r3, [r7, #0]
 8008592:	0418      	lsls	r0, r3, #16
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6819      	ldr	r1, [r3, #0]
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	3b01      	subs	r3, #1
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	4302      	orrs	r2, r0
 80085a0:	3340      	adds	r3, #64	@ 0x40
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <HAL_PWR_EnableBkUpAccess+0x20>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80085fc:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <HAL_PWR_EnableBkUpAccess+0x24>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008602:	687b      	ldr	r3, [r7, #4]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	420e0020 	.word	0x420e0020
 8008614:	40007000 	.word	0x40007000

08008618 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800861e:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008624:	4b05      	ldr	r3, [pc, #20]	@ (800863c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800862a:	687b      	ldr	r3, [r7, #4]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	420e0020 	.word	0x420e0020
 800863c:	40007000 	.word	0x40007000

08008640 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800864c:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <HAL_PWR_EnterSTOPMode+0x50>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f023 0203 	bic.w	r2, r3, #3
 8008654:	490e      	ldr	r1, [pc, #56]	@ (8008690 <HAL_PWR_EnterSTOPMode+0x50>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4313      	orrs	r3, r2
 800865a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800865c:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <HAL_PWR_EnterSTOPMode+0x54>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4a0c      	ldr	r2, [pc, #48]	@ (8008694 <HAL_PWR_EnterSTOPMode+0x54>)
 8008662:	f043 0304 	orr.w	r3, r3, #4
 8008666:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800866e:	bf30      	wfi
 8008670:	e002      	b.n	8008678 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008672:	bf40      	sev
    __WFE();
 8008674:	bf20      	wfe
    __WFE();
 8008676:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008678:	4b06      	ldr	r3, [pc, #24]	@ (8008694 <HAL_PWR_EnterSTOPMode+0x54>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	4a05      	ldr	r2, [pc, #20]	@ (8008694 <HAL_PWR_EnterSTOPMode+0x54>)
 800867e:	f023 0304 	bic.w	r3, r3, #4
 8008682:	6113      	str	r3, [r2, #16]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	40007000 	.word	0x40007000
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e267      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d075      	beq.n	80087a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086b6:	4b88      	ldr	r3, [pc, #544]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 030c 	and.w	r3, r3, #12
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d00c      	beq.n	80086dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086c2:	4b85      	ldr	r3, [pc, #532]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d112      	bne.n	80086f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ce:	4b82      	ldr	r3, [pc, #520]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086da:	d10b      	bne.n	80086f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086dc:	4b7e      	ldr	r3, [pc, #504]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d05b      	beq.n	80087a0 <HAL_RCC_OscConfig+0x108>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d157      	bne.n	80087a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e242      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086fc:	d106      	bne.n	800870c <HAL_RCC_OscConfig+0x74>
 80086fe:	4b76      	ldr	r3, [pc, #472]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a75      	ldr	r2, [pc, #468]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	e01d      	b.n	8008748 <HAL_RCC_OscConfig+0xb0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008714:	d10c      	bne.n	8008730 <HAL_RCC_OscConfig+0x98>
 8008716:	4b70      	ldr	r3, [pc, #448]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a6f      	ldr	r2, [pc, #444]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 800871c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	4b6d      	ldr	r3, [pc, #436]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6c      	ldr	r2, [pc, #432]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	e00b      	b.n	8008748 <HAL_RCC_OscConfig+0xb0>
 8008730:	4b69      	ldr	r3, [pc, #420]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a68      	ldr	r2, [pc, #416]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4b66      	ldr	r3, [pc, #408]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a65      	ldr	r2, [pc, #404]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d013      	beq.n	8008778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008750:	f7fb faec 	bl	8003d2c <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008758:	f7fb fae8 	bl	8003d2c <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b64      	cmp	r3, #100	@ 0x64
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e207      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800876a:	4b5b      	ldr	r3, [pc, #364]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0xc0>
 8008776:	e014      	b.n	80087a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7fb fad8 	bl	8003d2c <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008780:	f7fb fad4 	bl	8003d2c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b64      	cmp	r3, #100	@ 0x64
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e1f3      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008792:	4b51      	ldr	r3, [pc, #324]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f0      	bne.n	8008780 <HAL_RCC_OscConfig+0xe8>
 800879e:	e000      	b.n	80087a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d063      	beq.n	8008876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ae:	4b4a      	ldr	r3, [pc, #296]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00b      	beq.n	80087d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087ba:	4b47      	ldr	r3, [pc, #284]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d11c      	bne.n	8008800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c6:	4b44      	ldr	r3, [pc, #272]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d116      	bne.n	8008800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087d2:	4b41      	ldr	r3, [pc, #260]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_RCC_OscConfig+0x152>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e1c7      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ea:	4b3b      	ldr	r3, [pc, #236]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4937      	ldr	r1, [pc, #220]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087fe:	e03a      	b.n	8008876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d020      	beq.n	800884a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008808:	4b34      	ldr	r3, [pc, #208]	@ (80088dc <HAL_RCC_OscConfig+0x244>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fb fa8d 	bl	8003d2c <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008816:	f7fb fa89 	bl	8003d2c <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1a8      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008828:	4b2b      	ldr	r3, [pc, #172]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008834:	4b28      	ldr	r3, [pc, #160]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	4925      	ldr	r1, [pc, #148]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 8008844:	4313      	orrs	r3, r2
 8008846:	600b      	str	r3, [r1, #0]
 8008848:	e015      	b.n	8008876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800884a:	4b24      	ldr	r3, [pc, #144]	@ (80088dc <HAL_RCC_OscConfig+0x244>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fb fa6c 	bl	8003d2c <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008858:	f7fb fa68 	bl	8003d2c <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e187      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800886a:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d036      	beq.n	80088f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d016      	beq.n	80088b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800888a:	4b15      	ldr	r3, [pc, #84]	@ (80088e0 <HAL_RCC_OscConfig+0x248>)
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008890:	f7fb fa4c 	bl	8003d2c <HAL_GetTick>
 8008894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008898:	f7fb fa48 	bl	8003d2c <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e167      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088aa:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <HAL_RCC_OscConfig+0x240>)
 80088ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f0      	beq.n	8008898 <HAL_RCC_OscConfig+0x200>
 80088b6:	e01b      	b.n	80088f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088b8:	4b09      	ldr	r3, [pc, #36]	@ (80088e0 <HAL_RCC_OscConfig+0x248>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088be:	f7fb fa35 	bl	8003d2c <HAL_GetTick>
 80088c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c4:	e00e      	b.n	80088e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088c6:	f7fb fa31 	bl	8003d2c <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d907      	bls.n	80088e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e150      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
 80088d8:	40023800 	.word	0x40023800
 80088dc:	42470000 	.word	0x42470000
 80088e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e4:	4b88      	ldr	r3, [pc, #544]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80088e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ea      	bne.n	80088c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8097 	beq.w	8008a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008902:	4b81      	ldr	r3, [pc, #516]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10f      	bne.n	800892e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	4b7d      	ldr	r3, [pc, #500]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008916:	4a7c      	ldr	r2, [pc, #496]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800891c:	6413      	str	r3, [r2, #64]	@ 0x40
 800891e:	4b7a      	ldr	r3, [pc, #488]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892e:	4b77      	ldr	r3, [pc, #476]	@ (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d118      	bne.n	800896c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800893a:	4b74      	ldr	r3, [pc, #464]	@ (8008b0c <HAL_RCC_OscConfig+0x474>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a73      	ldr	r2, [pc, #460]	@ (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008946:	f7fb f9f1 	bl	8003d2c <HAL_GetTick>
 800894a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800894e:	f7fb f9ed 	bl	8003d2c <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e10c      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008960:	4b6a      	ldr	r3, [pc, #424]	@ (8008b0c <HAL_RCC_OscConfig+0x474>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0f0      	beq.n	800894e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d106      	bne.n	8008982 <HAL_RCC_OscConfig+0x2ea>
 8008974:	4b64      	ldr	r3, [pc, #400]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008978:	4a63      	ldr	r2, [pc, #396]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008980:	e01c      	b.n	80089bc <HAL_RCC_OscConfig+0x324>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b05      	cmp	r3, #5
 8008988:	d10c      	bne.n	80089a4 <HAL_RCC_OscConfig+0x30c>
 800898a:	4b5f      	ldr	r3, [pc, #380]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898e:	4a5e      	ldr	r2, [pc, #376]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008990:	f043 0304 	orr.w	r3, r3, #4
 8008994:	6713      	str	r3, [r2, #112]	@ 0x70
 8008996:	4b5c      	ldr	r3, [pc, #368]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899a:	4a5b      	ldr	r2, [pc, #364]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089a2:	e00b      	b.n	80089bc <HAL_RCC_OscConfig+0x324>
 80089a4:	4b58      	ldr	r3, [pc, #352]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a8:	4a57      	ldr	r2, [pc, #348]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80089b0:	4b55      	ldr	r3, [pc, #340]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b4:	4a54      	ldr	r2, [pc, #336]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089b6:	f023 0304 	bic.w	r3, r3, #4
 80089ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d015      	beq.n	80089f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c4:	f7fb f9b2 	bl	8003d2c <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ca:	e00a      	b.n	80089e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089cc:	f7fb f9ae 	bl	8003d2c <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089da:	4293      	cmp	r3, r2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e0cb      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e2:	4b49      	ldr	r3, [pc, #292]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ee      	beq.n	80089cc <HAL_RCC_OscConfig+0x334>
 80089ee:	e014      	b.n	8008a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f0:	f7fb f99c 	bl	8003d2c <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089f8:	f7fb f998 	bl	8003d2c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e0b5      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1ee      	bne.n	80089f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d105      	bne.n	8008a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a20:	4b39      	ldr	r3, [pc, #228]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a24:	4a38      	ldr	r2, [pc, #224]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80a1 	beq.w	8008b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a36:	4b34      	ldr	r3, [pc, #208]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 030c 	and.w	r3, r3, #12
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d05c      	beq.n	8008afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d141      	bne.n	8008ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a4a:	4b31      	ldr	r3, [pc, #196]	@ (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a50:	f7fb f96c 	bl	8003d2c <HAL_GetTick>
 8008a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a58:	f7fb f968 	bl	8003d2c <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e087      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a6a:	4b27      	ldr	r3, [pc, #156]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f0      	bne.n	8008a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69da      	ldr	r2, [r3, #28]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	019b      	lsls	r3, r3, #6
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	061b      	lsls	r3, r3, #24
 8008a9a:	491b      	ldr	r1, [pc, #108]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa6:	f7fb f941 	bl	8003d2c <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aae:	f7fb f93d 	bl	8003d2c <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e05c      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac0:	4b11      	ldr	r3, [pc, #68]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0f0      	beq.n	8008aae <HAL_RCC_OscConfig+0x416>
 8008acc:	e054      	b.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ace:	4b10      	ldr	r3, [pc, #64]	@ (8008b10 <HAL_RCC_OscConfig+0x478>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad4:	f7fb f92a 	bl	8003d2c <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fb f926 	bl	8003d2c <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e045      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <HAL_RCC_OscConfig+0x470>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x444>
 8008afa:	e03d      	b.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d107      	bne.n	8008b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e038      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	40007000 	.word	0x40007000
 8008b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b14:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <HAL_RCC_OscConfig+0x4ec>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d028      	beq.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d121      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d11a      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d111      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d107      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d001      	beq.n	8008b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40023800 	.word	0x40023800

08008b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0cc      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b9c:	4b68      	ldr	r3, [pc, #416]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d90c      	bls.n	8008bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008baa:	4b65      	ldr	r3, [pc, #404]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b63      	ldr	r3, [pc, #396]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0b8      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bdc:	4b59      	ldr	r3, [pc, #356]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	4a58      	ldr	r2, [pc, #352]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bf4:	4b53      	ldr	r3, [pc, #332]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	4a52      	ldr	r2, [pc, #328]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c00:	4b50      	ldr	r3, [pc, #320]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	494d      	ldr	r1, [pc, #308]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d044      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d107      	bne.n	8008c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	4b47      	ldr	r3, [pc, #284]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d119      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e07f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d107      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c46:	4b3f      	ldr	r3, [pc, #252]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d109      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e06f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c56:	4b3b      	ldr	r3, [pc, #236]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e067      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c66:	4b37      	ldr	r3, [pc, #220]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 0203 	bic.w	r2, r3, #3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	4934      	ldr	r1, [pc, #208]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c78:	f7fb f858 	bl	8003d2c <HAL_GetTick>
 8008c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c7e:	e00a      	b.n	8008c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c80:	f7fb f854 	bl	8003d2c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e04f      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c96:	4b2b      	ldr	r3, [pc, #172]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 020c 	and.w	r2, r3, #12
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d1eb      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca8:	4b25      	ldr	r3, [pc, #148]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d20c      	bcs.n	8008cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb6:	4b22      	ldr	r3, [pc, #136]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b20      	ldr	r3, [pc, #128]	@ (8008d40 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e032      	b.n	8008d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cdc:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4916      	ldr	r1, [pc, #88]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cfa:	4b12      	ldr	r3, [pc, #72]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	490e      	ldr	r1, [pc, #56]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d0e:	f000 f821 	bl	8008d54 <HAL_RCC_GetSysClockFreq>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	091b      	lsrs	r3, r3, #4
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	490a      	ldr	r1, [pc, #40]	@ (8008d48 <HAL_RCC_ClockConfig+0x1c0>)
 8008d20:	5ccb      	ldrb	r3, [r1, r3]
 8008d22:	fa22 f303 	lsr.w	r3, r2, r3
 8008d26:	4a09      	ldr	r2, [pc, #36]	@ (8008d4c <HAL_RCC_ClockConfig+0x1c4>)
 8008d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d2a:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <HAL_RCC_ClockConfig+0x1c8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fa ffb8 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40023c00 	.word	0x40023c00
 8008d44:	40023800 	.word	0x40023800
 8008d48:	08022b8c 	.word	0x08022b8c
 8008d4c:	20000010 	.word	0x20000010
 8008d50:	20000014 	.word	0x20000014

08008d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d58:	b090      	sub	sp, #64	@ 0x40
 8008d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d64:	2300      	movs	r3, #0
 8008d66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6c:	4b59      	ldr	r3, [pc, #356]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 030c 	and.w	r3, r3, #12
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d00d      	beq.n	8008d94 <HAL_RCC_GetSysClockFreq+0x40>
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	f200 80a1 	bhi.w	8008ec0 <HAL_RCC_GetSysClockFreq+0x16c>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0x34>
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d003      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d86:	e09b      	b.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d88:	4b53      	ldr	r3, [pc, #332]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008d8c:	e09b      	b.n	8008ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d8e:	4b53      	ldr	r3, [pc, #332]	@ (8008edc <HAL_RCC_GetSysClockFreq+0x188>)
 8008d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d92:	e098      	b.n	8008ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d94:	4b4f      	ldr	r3, [pc, #316]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d028      	beq.n	8008dfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008daa:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	099b      	lsrs	r3, r3, #6
 8008db0:	2200      	movs	r2, #0
 8008db2:	623b      	str	r3, [r7, #32]
 8008db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4b47      	ldr	r3, [pc, #284]	@ (8008edc <HAL_RCC_GetSysClockFreq+0x188>)
 8008dc0:	fb03 f201 	mul.w	r2, r3, r1
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	fb00 f303 	mul.w	r3, r0, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	4a43      	ldr	r2, [pc, #268]	@ (8008edc <HAL_RCC_GetSysClockFreq+0x188>)
 8008dce:	fba0 1202 	umull	r1, r2, r0, r2
 8008dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dd4:	460a      	mov	r2, r1
 8008dd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dda:	4413      	add	r3, r2
 8008ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de0:	2200      	movs	r2, #0
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	61fa      	str	r2, [r7, #28]
 8008de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008dee:	f7f7 ff63 	bl	8000cb8 <__aeabi_uldivmod>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4613      	mov	r3, r2
 8008df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dfa:	e053      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dfc:	4b35      	ldr	r3, [pc, #212]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	099b      	lsrs	r3, r3, #6
 8008e02:	2200      	movs	r2, #0
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	617a      	str	r2, [r7, #20]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e0e:	f04f 0b00 	mov.w	fp, #0
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	f04f 0000 	mov.w	r0, #0
 8008e1a:	f04f 0100 	mov.w	r1, #0
 8008e1e:	0159      	lsls	r1, r3, #5
 8008e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e24:	0150      	lsls	r0, r2, #5
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	ebb2 080a 	subs.w	r8, r2, sl
 8008e2e:	eb63 090b 	sbc.w	r9, r3, fp
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e46:	ebb2 0408 	subs.w	r4, r2, r8
 8008e4a:	eb63 0509 	sbc.w	r5, r3, r9
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	f04f 0300 	mov.w	r3, #0
 8008e56:	00eb      	lsls	r3, r5, #3
 8008e58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e5c:	00e2      	lsls	r2, r4, #3
 8008e5e:	4614      	mov	r4, r2
 8008e60:	461d      	mov	r5, r3
 8008e62:	eb14 030a 	adds.w	r3, r4, sl
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	eb45 030b 	adc.w	r3, r5, fp
 8008e6c:	607b      	str	r3, [r7, #4]
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	028b      	lsls	r3, r1, #10
 8008e7e:	4621      	mov	r1, r4
 8008e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e84:	4621      	mov	r1, r4
 8008e86:	028a      	lsls	r2, r1, #10
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8e:	2200      	movs	r2, #0
 8008e90:	60bb      	str	r3, [r7, #8]
 8008e92:	60fa      	str	r2, [r7, #12]
 8008e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e98:	f7f7 ff0e 	bl	8000cb8 <__aeabi_uldivmod>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	0c1b      	lsrs	r3, r3, #16
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	3301      	adds	r3, #1
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008eb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ebe:	e002      	b.n	8008ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ec0:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3740      	adds	r7, #64	@ 0x40
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ed2:	bf00      	nop
 8008ed4:	40023800 	.word	0x40023800
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	017d7840 	.word	0x017d7840

08008ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee4:	4b03      	ldr	r3, [pc, #12]	@ (8008ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000010 	.word	0x20000010

08008ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008efc:	f7ff fff0 	bl	8008ee0 <HAL_RCC_GetHCLKFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	0a9b      	lsrs	r3, r3, #10
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	4903      	ldr	r1, [pc, #12]	@ (8008f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	08022b9c 	.word	0x08022b9c

08008f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f24:	f7ff ffdc 	bl	8008ee0 <HAL_RCC_GetHCLKFreq>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4b05      	ldr	r3, [pc, #20]	@ (8008f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	0b5b      	lsrs	r3, r3, #13
 8008f30:	f003 0307 	and.w	r3, r3, #7
 8008f34:	4903      	ldr	r1, [pc, #12]	@ (8008f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f36:	5ccb      	ldrb	r3, [r1, r3]
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40023800 	.word	0x40023800
 8008f44:	08022b9c 	.word	0x08022b9c

08008f48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d105      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d035      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f70:	4b67      	ldr	r3, [pc, #412]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f76:	f7fa fed9 	bl	8003d2c <HAL_GetTick>
 8008f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f7e:	f7fa fed5 	bl	8003d2c <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e0ba      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f90:	4b60      	ldr	r3, [pc, #384]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f0      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	019a      	lsls	r2, r3, #6
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	071b      	lsls	r3, r3, #28
 8008fa8:	495a      	ldr	r1, [pc, #360]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fb0:	4b57      	ldr	r3, [pc, #348]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fb6:	f7fa feb9 	bl	8003d2c <HAL_GetTick>
 8008fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fbc:	e008      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008fbe:	f7fa feb5 	bl	8003d2c <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e09a      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fd0:	4b50      	ldr	r3, [pc, #320]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0f0      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 8083 	beq.w	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	4b49      	ldr	r3, [pc, #292]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	4a48      	ldr	r2, [pc, #288]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ffa:	4b46      	ldr	r3, [pc, #280]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009006:	4b44      	ldr	r3, [pc, #272]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a43      	ldr	r2, [pc, #268]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800900c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009010:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009012:	f7fa fe8b 	bl	8003d2c <HAL_GetTick>
 8009016:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009018:	e008      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800901a:	f7fa fe87 	bl	8003d2c <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e06c      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800902c:	4b3a      	ldr	r3, [pc, #232]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0f0      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009038:	4b36      	ldr	r3, [pc, #216]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800903a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009040:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d02f      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d028      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009056:	4b2f      	ldr	r3, [pc, #188]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009060:	4b2e      	ldr	r3, [pc, #184]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009066:	4b2d      	ldr	r3, [pc, #180]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800906c:	4a29      	ldr	r2, [pc, #164]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009072:	4b28      	ldr	r3, [pc, #160]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b01      	cmp	r3, #1
 800907c:	d114      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800907e:	f7fa fe55 	bl	8003d2c <HAL_GetTick>
 8009082:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009084:	e00a      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009086:	f7fa fe51 	bl	8003d2c <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009094:	4293      	cmp	r3, r2
 8009096:	d901      	bls.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e034      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800909c:	4b1d      	ldr	r3, [pc, #116]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800909e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0ee      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b4:	d10d      	bne.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80090b6:	4b17      	ldr	r3, [pc, #92]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80090c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ca:	4912      	ldr	r1, [pc, #72]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	608b      	str	r3, [r1, #8]
 80090d0:	e005      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80090d2:	4b10      	ldr	r3, [pc, #64]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80090dc:	6093      	str	r3, [r2, #8]
 80090de:	4b0d      	ldr	r3, [pc, #52]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ea:	490a      	ldr	r1, [pc, #40]	@ (8009114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7c1a      	ldrb	r2, [r3, #16]
 8009100:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009102:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	42470068 	.word	0x42470068
 8009114:	40023800 	.word	0x40023800
 8009118:	40007000 	.word	0x40007000
 800911c:	42470e40 	.word	0x42470e40
 8009120:	424711e0 	.word	0x424711e0

08009124 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e066      	b.n	8009208 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7f5b      	ldrb	r3, [r3, #29]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fa f9a2 	bl	8003494 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	22ca      	movs	r2, #202	@ 0xca
 800915c:	625a      	str	r2, [r3, #36]	@ 0x24
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2253      	movs	r2, #83	@ 0x53
 8009164:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fbce 	bl	8009908 <RTC_EnterInitMode>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d12c      	bne.n	80091d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009188:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6899      	ldr	r1, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68d2      	ldr	r2, [r2, #12]
 80091b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6919      	ldr	r1, [r3, #16]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	041a      	lsls	r2, r3, #16
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fbd5 	bl	8009976 <RTC_ExitInitMode>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d113      	bne.n	80091fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	22ff      	movs	r2, #255	@ 0xff
 8009204:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	7f1b      	ldrb	r3, [r3, #28]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_RTC_SetTime+0x1c>
 8009228:	2302      	movs	r3, #2
 800922a:	e087      	b.n	800933c <HAL_RTC_SetTime+0x12c>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2202      	movs	r2, #2
 8009236:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d126      	bne.n	800928c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fbb2 	bl	80099c0 <RTC_ByteToBcd2>
 800925c:	4603      	mov	r3, r0
 800925e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fbab 	bl	80099c0 <RTC_ByteToBcd2>
 800926a:	4603      	mov	r3, r0
 800926c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800926e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	789b      	ldrb	r3, [r3, #2]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fba3 	bl	80099c0 <RTC_ByteToBcd2>
 800927a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800927c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	78db      	ldrb	r3, [r3, #3]
 8009284:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e018      	b.n	80092be <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092ac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80092b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	78db      	ldrb	r3, [r3, #3]
 80092b8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	22ca      	movs	r2, #202	@ 0xca
 80092c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2253      	movs	r2, #83	@ 0x53
 80092cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fb1a 	bl	8009908 <RTC_EnterInitMode>
 80092d4:	4603      	mov	r3, r0
 80092d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092d8:	7cfb      	ldrb	r3, [r7, #19]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d120      	bne.n	8009320 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80092e8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80092ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6899      	ldr	r1, [r3, #8]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	68da      	ldr	r2, [r3, #12]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	431a      	orrs	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fb2d 	bl	8009976 <RTC_ExitInitMode>
 800931c:	4603      	mov	r3, r0
 800931e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009320:	7cfb      	ldrb	r3, [r7, #19]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	22ff      	movs	r2, #255	@ 0xff
 8009332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	771a      	strb	r2, [r3, #28]

  return status;
 800933a:	7cfb      	ldrb	r3, [r7, #19]
}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	bd90      	pop	{r4, r7, pc}

08009344 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009376:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800937a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	0c1b      	lsrs	r3, r3, #16
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009396:	b2da      	uxtb	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	0d9b      	lsrs	r3, r3, #22
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d11a      	bne.n	80093f6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb18 	bl	80099fa <RTC_Bcd2ToByte>
 80093ca:	4603      	mov	r3, r0
 80093cc:	461a      	mov	r2, r3
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fb0f 	bl	80099fa <RTC_Bcd2ToByte>
 80093dc:	4603      	mov	r3, r0
 80093de:	461a      	mov	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	789b      	ldrb	r3, [r3, #2]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fb06 	bl	80099fa <RTC_Bcd2ToByte>
 80093ee:	4603      	mov	r3, r0
 80093f0:	461a      	mov	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	7f1b      	ldrb	r3, [r3, #28]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_RTC_SetDate+0x1c>
 8009418:	2302      	movs	r3, #2
 800941a:	e071      	b.n	8009500 <HAL_RTC_SetDate+0x100>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2202      	movs	r2, #2
 8009426:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10e      	bne.n	800944c <HAL_RTC_SetDate+0x4c>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	785b      	ldrb	r3, [r3, #1]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b00      	cmp	r3, #0
 8009438:	d008      	beq.n	800944c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	f023 0310 	bic.w	r3, r3, #16
 8009442:	b2db      	uxtb	r3, r3
 8009444:	330a      	adds	r3, #10
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d11c      	bne.n	800948c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	78db      	ldrb	r3, [r3, #3]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fab2 	bl	80099c0 <RTC_ByteToBcd2>
 800945c:	4603      	mov	r3, r0
 800945e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	785b      	ldrb	r3, [r3, #1]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 faab 	bl	80099c0 <RTC_ByteToBcd2>
 800946a:	4603      	mov	r3, r0
 800946c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800946e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	789b      	ldrb	r3, [r3, #2]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 faa3 	bl	80099c0 <RTC_ByteToBcd2>
 800947a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800947c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	e00e      	b.n	80094aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	78db      	ldrb	r3, [r3, #3]
 8009490:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009498:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800949e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	22ca      	movs	r2, #202	@ 0xca
 80094b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2253      	movs	r2, #83	@ 0x53
 80094b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fa24 	bl	8009908 <RTC_EnterInitMode>
 80094c0:	4603      	mov	r3, r0
 80094c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80094c4:	7cfb      	ldrb	r3, [r7, #19]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10c      	bne.n	80094e4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fa4b 	bl	8009976 <RTC_ExitInitMode>
 80094e0:	4603      	mov	r3, r0
 80094e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80094e4:	7cfb      	ldrb	r3, [r7, #19]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	22ff      	movs	r2, #255	@ 0xff
 80094f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	771a      	strb	r2, [r3, #28]

  return status;
 80094fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd90      	pop	{r4, r7, pc}

08009508 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009522:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009526:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	b2da      	uxtb	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	0a1b      	lsrs	r3, r3, #8
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 031f 	and.w	r3, r3, #31
 800953c:	b2da      	uxtb	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	0b5b      	lsrs	r3, r3, #13
 8009554:	b2db      	uxtb	r3, r3
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	b2da      	uxtb	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d11a      	bne.n	800959c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	78db      	ldrb	r3, [r3, #3]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fa45 	bl	80099fa <RTC_Bcd2ToByte>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fa3c 	bl	80099fa <RTC_Bcd2ToByte>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	789b      	ldrb	r3, [r3, #2]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fa33 	bl	80099fa <RTC_Bcd2ToByte>
 8009594:	4603      	mov	r3, r0
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b089      	sub	sp, #36	@ 0x24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80095b4:	4b9a      	ldr	r3, [pc, #616]	@ (8009820 <HAL_RTC_SetAlarm_IT+0x278>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a9a      	ldr	r2, [pc, #616]	@ (8009824 <HAL_RTC_SetAlarm_IT+0x27c>)
 80095ba:	fba2 2303 	umull	r2, r3, r2, r3
 80095be:	0adb      	lsrs	r3, r3, #11
 80095c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095c4:	fb02 f303 	mul.w	r3, r2, r3
 80095c8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	7f1b      	ldrb	r3, [r3, #28]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <HAL_RTC_SetAlarm_IT+0x36>
 80095da:	2302      	movs	r3, #2
 80095dc:	e11c      	b.n	8009818 <HAL_RTC_SetAlarm_IT+0x270>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2202      	movs	r2, #2
 80095e8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d137      	bne.n	8009660 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f9d9 	bl	80099c0 <RTC_ByteToBcd2>
 800960e:	4603      	mov	r3, r0
 8009610:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f9d2 	bl	80099c0 <RTC_ByteToBcd2>
 800961c:	4603      	mov	r3, r0
 800961e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009620:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	789b      	ldrb	r3, [r3, #2]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f9ca 	bl	80099c0 <RTC_ByteToBcd2>
 800962c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800962e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	78db      	ldrb	r3, [r3, #3]
 8009636:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009638:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f9bc 	bl	80099c0 <RTC_ByteToBcd2>
 8009648:	4603      	mov	r3, r0
 800964a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800964c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009654:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800965a:	4313      	orrs	r3, r2
 800965c:	61fb      	str	r3, [r7, #28]
 800965e:	e023      	b.n	80096a8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009680:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009686:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	78db      	ldrb	r3, [r3, #3]
 800968c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800968e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009696:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009698:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800969e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80096b0:	4313      	orrs	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	22ca      	movs	r2, #202	@ 0xca
 80096ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2253      	movs	r2, #83	@ 0x53
 80096c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096cc:	d141      	bne.n	8009752 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096dc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80096ee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	1e5a      	subs	r2, r3, #1
 80096f4:	617a      	str	r2, [r7, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	22ff      	movs	r2, #255	@ 0xff
 8009700:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2203      	movs	r2, #3
 8009706:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e082      	b.n	8009818 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0e7      	beq.n	80096f0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800973e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	e04b      	b.n	80097ea <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009760:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	b2da      	uxtb	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009772:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009774:	4b2a      	ldr	r3, [pc, #168]	@ (8009820 <HAL_RTC_SetAlarm_IT+0x278>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a2a      	ldr	r2, [pc, #168]	@ (8009824 <HAL_RTC_SetAlarm_IT+0x27c>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	0adb      	lsrs	r3, r3, #11
 8009780:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009784:	fb02 f303 	mul.w	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	617a      	str	r2, [r7, #20]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10b      	bne.n	80097ac <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	22ff      	movs	r2, #255	@ 0xff
 800979a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2203      	movs	r2, #3
 80097a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e035      	b.n	8009818 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0e7      	beq.n	800978a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69fa      	ldr	r2, [r7, #28]
 80097c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097d8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097e8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80097ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009828 <HAL_RTC_SetAlarm_IT+0x280>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009828 <HAL_RTC_SetAlarm_IT+0x280>)
 80097f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097f4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80097f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <HAL_RTC_SetAlarm_IT+0x280>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009828 <HAL_RTC_SetAlarm_IT+0x280>)
 80097fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009800:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	22ff      	movs	r2, #255	@ 0xff
 8009808:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3724      	adds	r7, #36	@ 0x24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd90      	pop	{r4, r7, pc}
 8009820:	20000010 	.word	0x20000010
 8009824:	10624dd3 	.word	0x10624dd3
 8009828:	40013c00 	.word	0x40013c00

0800982c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d012      	beq.n	8009868 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7f9 fcf3 	bl	800323c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	b2da      	uxtb	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009866:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d012      	beq.n	800989c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f906 	bl	8009a96 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800989a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800989c:	4b05      	ldr	r3, [pc, #20]	@ (80098b4 <HAL_RTC_AlarmIRQHandler+0x88>)
 800989e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80098a2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	775a      	strb	r2, [r3, #29]
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	40013c00 	.word	0x40013c00

080098b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80098d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098d4:	f7fa fa2a 	bl	8003d2c <HAL_GetTick>
 80098d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098da:	e009      	b.n	80098f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098dc:	f7fa fa26 	bl	8003d2c <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098ea:	d901      	bls.n	80098f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e007      	b.n	8009900 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0ee      	beq.n	80098dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d122      	bne.n	800996c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009934:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009936:	f7fa f9f9 	bl	8003d2c <HAL_GetTick>
 800993a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800993c:	e00c      	b.n	8009958 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800993e:	f7fa f9f5 	bl	8003d2c <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800994c:	d904      	bls.n	8009958 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2204      	movs	r2, #4
 8009952:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <RTC_EnterInitMode+0x64>
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d1e8      	bne.n	800993e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009990:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff89 	bl	80098b8 <HAL_RTC_WaitForSynchro>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2204      	movs	r2, #4
 80099b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80099ce:	e005      	b.n	80099dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	3301      	adds	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	3b0a      	subs	r3, #10
 80099da:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d8f6      	bhi.n	80099d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	b2db      	uxtb	r3, r3
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	4603      	mov	r3, r0
 8009a02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	091b      	lsrs	r3, r3, #4
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	0092      	lsls	r2, r2, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	f003 030f 	and.w	r3, r3, #15
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4413      	add	r3, r2
 8009a24:	b2db      	uxtb	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b087      	sub	sp, #28
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3350      	adds	r3, #80	@ 0x50
 8009a48:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	601a      	str	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3350      	adds	r3, #80	@ 0x50
 8009a7a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e022      	b.n	8009b02 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d105      	bne.n	8009ad4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7f9 fd14 	bl	80034fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f815 	bl	8009b0c <HAL_SD_InitCard>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e00a      	b.n	8009b02 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b0c:	b5b0      	push	{r4, r5, r7, lr}
 8009b0e:	b08e      	sub	sp, #56	@ 0x38
 8009b10:	af04      	add	r7, sp, #16
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009b28:	2376      	movs	r3, #118	@ 0x76
 8009b2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681d      	ldr	r5, [r3, #0]
 8009b30:	466c      	mov	r4, sp
 8009b32:	f107 0314 	add.w	r3, r7, #20
 8009b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b44:	4628      	mov	r0, r5
 8009b46:	f003 f8cf 	bl	800cce8 <SDIO_Init>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e04f      	b.n	8009bfc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009b5c:	4b29      	ldr	r3, [pc, #164]	@ (8009c04 <HAL_SD_InitCard+0xf8>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f003 f907 	bl	800cd7a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009b6c:	4b25      	ldr	r3, [pc, #148]	@ (8009c04 <HAL_SD_InitCard+0xf8>)
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009b72:	2002      	movs	r0, #2
 8009b74:	f7fa f8e6 	bl	8003d44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fe69 	bl	800a850 <SD_PowerON>
 8009b7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e02e      	b.n	8009bfc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fd88 	bl	800a6b4 <SD_InitCard>
 8009ba4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e01b      	b.n	8009bfc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f003 f966 	bl	800ce9e <SDMMC_CmdBlockLength>
 8009bd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00f      	beq.n	8009bfa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a0a      	ldr	r2, [pc, #40]	@ (8009c08 <HAL_SD_InitCard+0xfc>)
 8009be0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3728      	adds	r7, #40	@ 0x28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bdb0      	pop	{r4, r5, r7, pc}
 8009c04:	422580a0 	.word	0x422580a0
 8009c08:	004005ff 	.word	0x004005ff

08009c0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b092      	sub	sp, #72	@ 0x48
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c1a:	f7fa f887 	bl	8003d2c <HAL_GetTick>
 8009c1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d107      	bne.n	8009c3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e1bd      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	f040 81b0 	bne.w	8009fac <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	441a      	add	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d907      	bls.n	8009c70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c64:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e1a4      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2203      	movs	r2, #3
 8009c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d002      	beq.n	8009c8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	025b      	lsls	r3, r3, #9
 8009c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	025b      	lsls	r3, r3, #9
 8009c98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009c9a:	2390      	movs	r3, #144	@ 0x90
 8009c9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f107 0214 	add.w	r2, r7, #20
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f003 f8c6 	bl	800ce46 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d90a      	bls.n	8009cd6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f003 f92a 	bl	800cf26 <SDMMC_CmdReadMultiBlock>
 8009cd2:	6478      	str	r0, [r7, #68]	@ 0x44
 8009cd4:	e009      	b.n	8009cea <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f003 f8fd 	bl	800cee2 <SDMMC_CmdReadSingleBlock>
 8009ce8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d012      	beq.n	8009d16 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a7a      	ldr	r2, [pc, #488]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e151      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009d1a:	e061      	b.n	8009de0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d03c      	beq.n	8009da4 <HAL_SD_ReadBlocks+0x198>
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d039      	beq.n	8009da4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009d30:	2300      	movs	r3, #0
 8009d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d34:	e033      	b.n	8009d9e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f002 ffff 	bl	800cd3e <SDIO_ReadFIFO>
 8009d40:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d52:	3b01      	subs	r3, #1
 8009d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d58:	0a1b      	lsrs	r3, r3, #8
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d62:	3301      	adds	r3, #1
 8009d64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d78:	3301      	adds	r3, #1
 8009d7a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d84:	0e1b      	lsrs	r3, r3, #24
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8e:	3301      	adds	r3, #1
 8009d90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d94:	3b01      	subs	r3, #1
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da0:	2b07      	cmp	r3, #7
 8009da2:	d9c8      	bls.n	8009d36 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009da4:	f7f9 ffc2 	bl	8003d2c <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d902      	bls.n	8009dba <HAL_SD_ReadBlocks+0x1ae>
 8009db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d112      	bne.n	8009de0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a48      	ldr	r2, [pc, #288]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e0ec      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009de6:	f240 332a 	movw	r3, #810	@ 0x32a
 8009dea:	4013      	ands	r3, r2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d095      	beq.n	8009d1c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d022      	beq.n	8009e44 <HAL_SD_ReadBlocks+0x238>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d91f      	bls.n	8009e44 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d01b      	beq.n	8009e44 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f003 f8ef 	bl	800cff4 <SDMMC_CmdStopTransfer>
 8009e16:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d012      	beq.n	8009e44 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a2f      	ldr	r2, [pc, #188]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009e24:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0ba      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e4a:	f003 0308 	and.w	r3, r3, #8
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d012      	beq.n	8009e78 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a22      	ldr	r2, [pc, #136]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009e58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5e:	f043 0208 	orr.w	r2, r3, #8
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e0a0      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d012      	beq.n	8009eac <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e92:	f043 0202 	orr.w	r2, r3, #2
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e086      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d063      	beq.n	8009f82 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a08      	ldr	r2, [pc, #32]	@ (8009ee0 <HAL_SD_ReadBlocks+0x2d4>)
 8009ec0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec6:	f043 0220 	orr.w	r2, r3, #32
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e06c      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
 8009ee0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 ff28 	bl	800cd3e <SDIO_ReadFIFO>
 8009eee:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efa:	3301      	adds	r3, #1
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f00:	3b01      	subs	r3, #1
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f06:	0a1b      	lsrs	r3, r3, #8
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f10:	3301      	adds	r3, #1
 8009f12:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f16:	3b01      	subs	r3, #1
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1c:	0c1b      	lsrs	r3, r3, #16
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f26:	3301      	adds	r3, #1
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	0e1b      	lsrs	r3, r3, #24
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f42:	3b01      	subs	r3, #1
 8009f44:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009f46:	f7f9 fef1 	bl	8003d2c <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d902      	bls.n	8009f5c <HAL_SD_ReadBlocks+0x350>
 8009f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d112      	bne.n	8009f82 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a18      	ldr	r2, [pc, #96]	@ (8009fc4 <HAL_SD_ReadBlocks+0x3b8>)
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e01b      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_SD_ReadBlocks+0x38a>
 8009f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1a6      	bne.n	8009ee4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f9e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e006      	b.n	8009fba <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
  }
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3748      	adds	r7, #72	@ 0x48
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	004005ff 	.word	0x004005ff

08009fc8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b092      	sub	sp, #72	@ 0x48
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fd6:	f7f9 fea9 	bl	8003d2c <HAL_GetTick>
 8009fda:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d107      	bne.n	8009ffa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e166      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b01      	cmp	r3, #1
 800a004:	f040 8159 	bne.w	800a2ba <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a00e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	441a      	add	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a018:	429a      	cmp	r2, r3
 800a01a:	d907      	bls.n	800a02c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a020:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e14d      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2203      	movs	r2, #3
 800a030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a040:	2b01      	cmp	r3, #1
 800a042:	d002      	beq.n	800a04a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	025b      	lsls	r3, r3, #9
 800a048:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a04a:	f04f 33ff 	mov.w	r3, #4294967295
 800a04e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	025b      	lsls	r3, r3, #9
 800a054:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a056:	2390      	movs	r3, #144	@ 0x90
 800a058:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a05a:	2300      	movs	r3, #0
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a05e:	2300      	movs	r3, #0
 800a060:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a062:	2301      	movs	r3, #1
 800a064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f107 0218 	add.w	r2, r7, #24
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f002 fee8 	bl	800ce46 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d90a      	bls.n	800a092 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2220      	movs	r2, #32
 800a080:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a088:	4618      	mov	r0, r3
 800a08a:	f002 ff90 	bl	800cfae <SDMMC_CmdWriteMultiBlock>
 800a08e:	6478      	str	r0, [r7, #68]	@ 0x44
 800a090:	e009      	b.n	800a0a6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2210      	movs	r2, #16
 800a096:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f002 ff63 	bl	800cf6a <SDMMC_CmdWriteSingleBlock>
 800a0a4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d012      	beq.n	800a0d2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a87      	ldr	r2, [pc, #540]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a0b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e0fa      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a0d6:	e065      	b.n	800a1a4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d040      	beq.n	800a168 <HAL_SD_WriteBlocks+0x1a0>
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d03d      	beq.n	800a168 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0f0:	e037      	b.n	800a162 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a100:	3b01      	subs	r3, #1
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	021a      	lsls	r2, r3, #8
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a112:	3301      	adds	r3, #1
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a118:	3b01      	subs	r3, #1
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	041a      	lsls	r2, r3, #16
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12a:	3301      	adds	r3, #1
 800a12c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a130:	3b01      	subs	r3, #1
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	061a      	lsls	r2, r3, #24
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a142:	3301      	adds	r3, #1
 800a144:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a148:	3b01      	subs	r3, #1
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f107 0214 	add.w	r2, r7, #20
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f002 fdfe 	bl	800cd58 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a15c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15e:	3301      	adds	r3, #1
 800a160:	643b      	str	r3, [r7, #64]	@ 0x40
 800a162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a164:	2b07      	cmp	r3, #7
 800a166:	d9c4      	bls.n	800a0f2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a168:	f7f9 fde0 	bl	8003d2c <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a174:	429a      	cmp	r2, r3
 800a176:	d902      	bls.n	800a17e <HAL_SD_WriteBlocks+0x1b6>
 800a178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d112      	bne.n	800a1a4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a53      	ldr	r2, [pc, #332]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a184:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a18c:	431a      	orrs	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e091      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1aa:	f240 331a 	movw	r3, #794	@ 0x31a
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d091      	beq.n	800a0d8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d022      	beq.n	800a208 <HAL_SD_WriteBlocks+0x240>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d91f      	bls.n	800a208 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d01b      	beq.n	800a208 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 ff0d 	bl	800cff4 <SDMMC_CmdStopTransfer>
 800a1da:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a1dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d012      	beq.n	800a208 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a3a      	ldr	r2, [pc, #232]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e05f      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a20e:	f003 0308 	and.w	r3, r3, #8
 800a212:	2b00      	cmp	r3, #0
 800a214:	d012      	beq.n	800a23c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a2d      	ldr	r2, [pc, #180]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a222:	f043 0208 	orr.w	r2, r3, #8
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e045      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d012      	beq.n	800a270 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a20      	ldr	r2, [pc, #128]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a250:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a256:	f043 0202 	orr.w	r2, r3, #2
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e02b      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a276:	f003 0310 	and.w	r3, r3, #16
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d012      	beq.n	800a2a4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a13      	ldr	r2, [pc, #76]	@ (800a2d0 <HAL_SD_WriteBlocks+0x308>)
 800a284:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	f043 0210 	orr.w	r2, r3, #16
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e011      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a2ac:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e006      	b.n	800a2c8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
  }
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3748      	adds	r7, #72	@ 0x48
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	004005ff 	.word	0x004005ff

0800a2d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e2:	0f9b      	lsrs	r3, r3, #30
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ee:	0e9b      	lsrs	r3, r3, #26
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 030f 	and.w	r3, r3, #15
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a300:	0e1b      	lsrs	r3, r3, #24
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	b2da      	uxtb	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	b2da      	uxtb	r2, r3
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a334:	0d1b      	lsrs	r3, r3, #20
 800a336:	b29a      	uxth	r2, r3
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 030f 	and.w	r3, r3, #15
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a352:	0bdb      	lsrs	r3, r3, #15
 800a354:	b2db      	uxtb	r3, r3
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a364:	0b9b      	lsrs	r3, r3, #14
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a376:	0b5b      	lsrs	r3, r3, #13
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a388:	0b1b      	lsrs	r3, r3, #12
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	b2da      	uxtb	r2, r3
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2200      	movs	r2, #0
 800a39a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d163      	bne.n	800a46c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3a8:	009a      	lsls	r2, r3, #2
 800a3aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a3b4:	0f92      	lsrs	r2, r2, #30
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3c0:	0edb      	lsrs	r3, r3, #27
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d2:	0e1b      	lsrs	r3, r3, #24
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3e4:	0d5b      	lsrs	r3, r3, #21
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3f6:	0c9b      	lsrs	r3, r3, #18
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a408:	0bdb      	lsrs	r3, r3, #15
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	f003 0307 	and.w	r3, r3, #7
 800a410:	b2da      	uxtb	r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	7e1b      	ldrb	r3, [r3, #24]
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	3302      	adds	r3, #2
 800a42c:	2201      	movs	r2, #1
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a436:	fb03 f202 	mul.w	r2, r3, r2
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	7a1b      	ldrb	r3, [r3, #8]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	2201      	movs	r2, #1
 800a44a:	409a      	lsls	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a458:	0a52      	lsrs	r2, r2, #9
 800a45a:	fb03 f202 	mul.w	r2, r3, r2
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a468:	661a      	str	r2, [r3, #96]	@ 0x60
 800a46a:	e031      	b.n	800a4d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a470:	2b01      	cmp	r3, #1
 800a472:	d11d      	bne.n	800a4b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a478:	041b      	lsls	r3, r3, #16
 800a47a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a482:	0c1b      	lsrs	r3, r3, #16
 800a484:	431a      	orrs	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	3301      	adds	r3, #1
 800a490:	029a      	lsls	r2, r3, #10
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4a4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4ae:	e00f      	b.n	800a4d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a58      	ldr	r2, [pc, #352]	@ (800a618 <HAL_SD_GetCardCSD+0x344>)
 800a4b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e09d      	b.n	800a60c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d4:	0b9b      	lsrs	r3, r3, #14
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e6:	09db      	lsrs	r3, r3, #7
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a508:	0fdb      	lsrs	r3, r3, #31
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a514:	0f5b      	lsrs	r3, r3, #29
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a526:	0e9b      	lsrs	r3, r3, #26
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a538:	0d9b      	lsrs	r3, r3, #22
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f003 030f 	and.w	r3, r3, #15
 800a540:	b2da      	uxtb	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a54a:	0d5b      	lsrs	r3, r3, #21
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a566:	0c1b      	lsrs	r3, r3, #16
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a57a:	0bdb      	lsrs	r3, r3, #15
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	0b9b      	lsrs	r3, r3, #14
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	b2da      	uxtb	r2, r3
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5a2:	0b5b      	lsrs	r3, r3, #13
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5b6:	0b1b      	lsrs	r3, r3, #12
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ca:	0a9b      	lsrs	r3, r3, #10
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5de:	0a1b      	lsrs	r3, r3, #8
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	004005ff 	.word	0x004005ff

0800a61c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f970 	bl	800a96c <SD_SendStatus>
 800a68c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	0a5b      	lsrs	r3, r3, #9
 800a6a4:	f003 030f 	and.w	r3, r3, #15
 800a6a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a6aa:	693b      	ldr	r3, [r7, #16]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a6b4:	b5b0      	push	{r4, r5, r7, lr}
 800a6b6:	b094      	sub	sp, #80	@ 0x50
 800a6b8:	af04      	add	r7, sp, #16
 800a6ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f002 fb66 	bl	800cd96 <SDIO_GetPowerState>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d102      	bne.n	800a6d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a6d4:	e0b8      	b.n	800a848 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d02f      	beq.n	800a73e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 fd4d 	bl	800d182 <SDMMC_CmdSendCID>
 800a6e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f2:	e0a9      	b.n	800a848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f002 fb90 	bl	800ce20 <SDIO_GetResponse>
 800a700:	4602      	mov	r2, r0
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2104      	movs	r1, #4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f002 fb87 	bl	800ce20 <SDIO_GetResponse>
 800a712:	4602      	mov	r2, r0
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2108      	movs	r1, #8
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 fb7e 	bl	800ce20 <SDIO_GetResponse>
 800a724:	4602      	mov	r2, r0
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	210c      	movs	r1, #12
 800a730:	4618      	mov	r0, r3
 800a732:	f002 fb75 	bl	800ce20 <SDIO_GetResponse>
 800a736:	4602      	mov	r2, r0
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a742:	2b03      	cmp	r3, #3
 800a744:	d00d      	beq.n	800a762 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f107 020e 	add.w	r2, r7, #14
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f002 fd53 	bl	800d1fc <SDMMC_CmdSetRelAdd>
 800a756:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <SD_InitCard+0xae>
    {
      return errorstate;
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	e072      	b.n	800a848 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a766:	2b03      	cmp	r3, #3
 800a768:	d036      	beq.n	800a7d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a76a:	89fb      	ldrh	r3, [r7, #14]
 800a76c:	461a      	mov	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a77a:	041b      	lsls	r3, r3, #16
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f002 fd1d 	bl	800d1be <SDMMC_CmdSendCSD>
 800a784:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78e:	e05b      	b.n	800a848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f002 fb42 	bl	800ce20 <SDIO_GetResponse>
 800a79c:	4602      	mov	r2, r0
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2104      	movs	r1, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f002 fb39 	bl	800ce20 <SDIO_GetResponse>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2108      	movs	r1, #8
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f002 fb30 	bl	800ce20 <SDIO_GetResponse>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	210c      	movs	r1, #12
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f002 fb27 	bl	800ce20 <SDIO_GetResponse>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2104      	movs	r1, #4
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f002 fb1e 	bl	800ce20 <SDIO_GetResponse>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	0d1a      	lsrs	r2, r3, #20
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a7ec:	f107 0310 	add.w	r3, r7, #16
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fd6e 	bl	800a2d4 <HAL_SD_GetCardCSD>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a802:	e021      	b.n	800a848 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6819      	ldr	r1, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a80c:	041b      	lsls	r3, r3, #16
 800a80e:	2200      	movs	r2, #0
 800a810:	461c      	mov	r4, r3
 800a812:	4615      	mov	r5, r2
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	4608      	mov	r0, r1
 800a81a:	f002 fc0d 	bl	800d038 <SDMMC_CmdSelDesel>
 800a81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <SD_InitCard+0x176>
  {
    return errorstate;
 800a826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a828:	e00e      	b.n	800a848 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681d      	ldr	r5, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	466c      	mov	r4, sp
 800a832:	f103 0210 	add.w	r2, r3, #16
 800a836:	ca07      	ldmia	r2, {r0, r1, r2}
 800a838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a83c:	3304      	adds	r3, #4
 800a83e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a840:	4628      	mov	r0, r5
 800a842:	f002 fa51 	bl	800cce8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3740      	adds	r7, #64	@ 0x40
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bdb0      	pop	{r4, r5, r7, pc}

0800a850 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	2300      	movs	r3, #0
 800a862:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fc08 	bl	800d07e <SDMMC_CmdGoIdleState>
 800a86e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	e072      	b.n	800a960 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f002 fc1b 	bl	800d0ba <SDMMC_CmdOperCond>
 800a884:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f002 fbf1 	bl	800d07e <SDMMC_CmdGoIdleState>
 800a89c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d004      	beq.n	800a8ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	e05b      	b.n	800a960 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d137      	bne.n	800a926 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f002 fc1b 	bl	800d0f8 <SDMMC_CmdAppCommand>
 800a8c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d02d      	beq.n	800a926 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a8ce:	e047      	b.n	800a960 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f002 fc0e 	bl	800d0f8 <SDMMC_CmdAppCommand>
 800a8dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	e03b      	b.n	800a960 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	491e      	ldr	r1, [pc, #120]	@ (800a968 <SD_PowerON+0x118>)
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f002 fc24 	bl	800d13c <SDMMC_CmdAppOperCommand>
 800a8f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a900:	e02e      	b.n	800a960 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2100      	movs	r1, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	f002 fa89 	bl	800ce20 <SDIO_GetResponse>
 800a90e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	0fdb      	lsrs	r3, r3, #31
 800a914:	2b01      	cmp	r3, #1
 800a916:	d101      	bne.n	800a91c <SD_PowerON+0xcc>
 800a918:	2301      	movs	r3, #1
 800a91a:	e000      	b.n	800a91e <SD_PowerON+0xce>
 800a91c:	2300      	movs	r3, #0
 800a91e:	613b      	str	r3, [r7, #16]

    count++;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	3301      	adds	r3, #1
 800a924:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d802      	bhi.n	800a936 <SD_PowerON+0xe6>
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0cc      	beq.n	800a8d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d902      	bls.n	800a946 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a944:	e00c      	b.n	800a960 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	645a      	str	r2, [r3, #68]	@ 0x44
 800a956:	e002      	b.n	800a95e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	c1100000 	.word	0xc1100000

0800a96c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a97c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a980:	e018      	b.n	800a9b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f002 fc55 	bl	800d23e <SDMMC_CmdSendStatus>
 800a994:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	e009      	b.n	800a9b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f002 fa3a 	bl	800ce20 <SDIO_GetResponse>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e041      	b.n	800aa52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7f8 fdf2 	bl	80035cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f000 fd30 	bl	800b460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aa74:	4013      	ands	r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10f      	bne.n	800aa9a <HAL_TIM_Base_DeInit+0x40>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6a1a      	ldr	r2, [r3, #32]
 800aa80:	f240 4344 	movw	r3, #1092	@ 0x444
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d107      	bne.n	800aa9a <HAL_TIM_Base_DeInit+0x40>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0201 	bic.w	r2, r2, #1
 800aa98:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7f8 fe56 	bl	800374c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d001      	beq.n	800ab1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e03c      	b.n	800ab96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a1e      	ldr	r2, [pc, #120]	@ (800aba4 <HAL_TIM_Base_Start+0xa0>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d018      	beq.n	800ab60 <HAL_TIM_Base_Start+0x5c>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab36:	d013      	beq.n	800ab60 <HAL_TIM_Base_Start+0x5c>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aba8 <HAL_TIM_Base_Start+0xa4>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00e      	beq.n	800ab60 <HAL_TIM_Base_Start+0x5c>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a19      	ldr	r2, [pc, #100]	@ (800abac <HAL_TIM_Base_Start+0xa8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d009      	beq.n	800ab60 <HAL_TIM_Base_Start+0x5c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a17      	ldr	r2, [pc, #92]	@ (800abb0 <HAL_TIM_Base_Start+0xac>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d004      	beq.n	800ab60 <HAL_TIM_Base_Start+0x5c>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a16      	ldr	r2, [pc, #88]	@ (800abb4 <HAL_TIM_Base_Start+0xb0>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d111      	bne.n	800ab84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b06      	cmp	r3, #6
 800ab70:	d010      	beq.n	800ab94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f042 0201 	orr.w	r2, r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab82:	e007      	b.n	800ab94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0201 	orr.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40010000 	.word	0x40010000
 800aba8:	40000400 	.word	0x40000400
 800abac:	40000800 	.word	0x40000800
 800abb0:	40000c00 	.word	0x40000c00
 800abb4:	40014000 	.word	0x40014000

0800abb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d001      	beq.n	800abd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e044      	b.n	800ac5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a1e      	ldr	r2, [pc, #120]	@ (800ac68 <HAL_TIM_Base_Start_IT+0xb0>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d018      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x6c>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abfa:	d013      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x6c>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1a      	ldr	r2, [pc, #104]	@ (800ac6c <HAL_TIM_Base_Start_IT+0xb4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00e      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x6c>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a19      	ldr	r2, [pc, #100]	@ (800ac70 <HAL_TIM_Base_Start_IT+0xb8>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d009      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x6c>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a17      	ldr	r2, [pc, #92]	@ (800ac74 <HAL_TIM_Base_Start_IT+0xbc>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d004      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x6c>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a16      	ldr	r2, [pc, #88]	@ (800ac78 <HAL_TIM_Base_Start_IT+0xc0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d111      	bne.n	800ac48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f003 0307 	and.w	r3, r3, #7
 800ac2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b06      	cmp	r3, #6
 800ac34:	d010      	beq.n	800ac58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f042 0201 	orr.w	r2, r2, #1
 800ac44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac46:	e007      	b.n	800ac58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40014000 	.word	0x40014000

0800ac7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0201 	bic.w	r2, r2, #1
 800ac92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6a1a      	ldr	r2, [r3, #32]
 800ac9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac9e:	4013      	ands	r3, r2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10f      	bne.n	800acc4 <HAL_TIM_Base_Stop_IT+0x48>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6a1a      	ldr	r2, [r3, #32]
 800acaa:	f240 4344 	movw	r3, #1092	@ 0x444
 800acae:	4013      	ands	r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d107      	bne.n	800acc4 <HAL_TIM_Base_Stop_IT+0x48>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0201 	bic.w	r2, r2, #1
 800acc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e041      	b.n	800ad70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d106      	bne.n	800ad06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f839 	bl	800ad78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f000 fba1 	bl	800b460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <HAL_TIM_PWM_Start+0x24>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	bf14      	ite	ne
 800ada8:	2301      	movne	r3, #1
 800adaa:	2300      	moveq	r3, #0
 800adac:	b2db      	uxtb	r3, r3
 800adae:	e022      	b.n	800adf6 <HAL_TIM_PWM_Start+0x6a>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d109      	bne.n	800adca <HAL_TIM_PWM_Start+0x3e>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	e015      	b.n	800adf6 <HAL_TIM_PWM_Start+0x6a>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d109      	bne.n	800ade4 <HAL_TIM_PWM_Start+0x58>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	bf14      	ite	ne
 800addc:	2301      	movne	r3, #1
 800adde:	2300      	moveq	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	e008      	b.n	800adf6 <HAL_TIM_PWM_Start+0x6a>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b01      	cmp	r3, #1
 800adee:	bf14      	ite	ne
 800adf0:	2301      	movne	r3, #1
 800adf2:	2300      	moveq	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e068      	b.n	800aed0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_PWM_Start+0x82>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2202      	movs	r2, #2
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae0c:	e013      	b.n	800ae36 <HAL_TIM_PWM_Start+0xaa>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b04      	cmp	r3, #4
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_PWM_Start+0x92>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae1c:	e00b      	b.n	800ae36 <HAL_TIM_PWM_Start+0xaa>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d104      	bne.n	800ae2e <HAL_TIM_PWM_Start+0xa2>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae2c:	e003      	b.n	800ae36 <HAL_TIM_PWM_Start+0xaa>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2202      	movs	r2, #2
 800ae32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fdb4 	bl	800b9ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a23      	ldr	r2, [pc, #140]	@ (800aed8 <HAL_TIM_PWM_Start+0x14c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d107      	bne.n	800ae5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a1d      	ldr	r2, [pc, #116]	@ (800aed8 <HAL_TIM_PWM_Start+0x14c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d018      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x10e>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae70:	d013      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x10e>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a19      	ldr	r2, [pc, #100]	@ (800aedc <HAL_TIM_PWM_Start+0x150>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d00e      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x10e>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a17      	ldr	r2, [pc, #92]	@ (800aee0 <HAL_TIM_PWM_Start+0x154>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d009      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x10e>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a16      	ldr	r2, [pc, #88]	@ (800aee4 <HAL_TIM_PWM_Start+0x158>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d004      	beq.n	800ae9a <HAL_TIM_PWM_Start+0x10e>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a14      	ldr	r2, [pc, #80]	@ (800aee8 <HAL_TIM_PWM_Start+0x15c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d111      	bne.n	800aebe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b06      	cmp	r3, #6
 800aeaa:	d010      	beq.n	800aece <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0201 	orr.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aebc:	e007      	b.n	800aece <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f042 0201 	orr.w	r2, r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	40010000 	.word	0x40010000
 800aedc:	40000400 	.word	0x40000400
 800aee0:	40000800 	.word	0x40000800
 800aee4:	40000c00 	.word	0x40000c00
 800aee8:	40014000 	.word	0x40014000

0800aeec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d122      	bne.n	800af48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d11b      	bne.n	800af48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f06f 0202 	mvn.w	r2, #2
 800af18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fa77 	bl	800b422 <HAL_TIM_IC_CaptureCallback>
 800af34:	e005      	b.n	800af42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa69 	bl	800b40e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fa7a 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	2b04      	cmp	r3, #4
 800af54:	d122      	bne.n	800af9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b04      	cmp	r3, #4
 800af62:	d11b      	bne.n	800af9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f06f 0204 	mvn.w	r2, #4
 800af6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fa4d 	bl	800b422 <HAL_TIM_IC_CaptureCallback>
 800af88:	e005      	b.n	800af96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa3f 	bl	800b40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa50 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	f003 0308 	and.w	r3, r3, #8
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d122      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d11b      	bne.n	800aff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f06f 0208 	mvn.w	r2, #8
 800afc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2204      	movs	r2, #4
 800afc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f003 0303 	and.w	r3, r3, #3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa23 	bl	800b422 <HAL_TIM_IC_CaptureCallback>
 800afdc:	e005      	b.n	800afea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fa15 	bl	800b40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fa26 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f003 0310 	and.w	r3, r3, #16
 800affa:	2b10      	cmp	r3, #16
 800affc:	d122      	bne.n	800b044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0310 	and.w	r3, r3, #16
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d11b      	bne.n	800b044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0210 	mvn.w	r2, #16
 800b014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2208      	movs	r2, #8
 800b01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f9f9 	bl	800b422 <HAL_TIM_IC_CaptureCallback>
 800b030:	e005      	b.n	800b03e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9eb 	bl	800b40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9fc 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10e      	bne.n	800b070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d107      	bne.n	800b070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f06f 0201 	mvn.w	r2, #1
 800b068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f8 f89c 	bl	80031a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07a:	2b80      	cmp	r3, #128	@ 0x80
 800b07c:	d10e      	bne.n	800b09c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b088:	2b80      	cmp	r3, #128	@ 0x80
 800b08a:	d107      	bne.n	800b09c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fd26 	bl	800bae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a6:	2b40      	cmp	r3, #64	@ 0x40
 800b0a8:	d10e      	bne.n	800b0c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b4:	2b40      	cmp	r3, #64	@ 0x40
 800b0b6:	d107      	bne.n	800b0c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f9c1 	bl	800b44a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	d10e      	bne.n	800b0f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b20      	cmp	r3, #32
 800b0e2:	d107      	bne.n	800b0f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f06f 0220 	mvn.w	r2, #32
 800b0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fcf0 	bl	800bad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b112:	2b01      	cmp	r3, #1
 800b114:	d101      	bne.n	800b11a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b116:	2302      	movs	r3, #2
 800b118:	e0ae      	b.n	800b278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b0c      	cmp	r3, #12
 800b126:	f200 809f 	bhi.w	800b268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b12a:	a201      	add	r2, pc, #4	@ (adr r2, 800b130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b165 	.word	0x0800b165
 800b134:	0800b269 	.word	0x0800b269
 800b138:	0800b269 	.word	0x0800b269
 800b13c:	0800b269 	.word	0x0800b269
 800b140:	0800b1a5 	.word	0x0800b1a5
 800b144:	0800b269 	.word	0x0800b269
 800b148:	0800b269 	.word	0x0800b269
 800b14c:	0800b269 	.word	0x0800b269
 800b150:	0800b1e7 	.word	0x0800b1e7
 800b154:	0800b269 	.word	0x0800b269
 800b158:	0800b269 	.word	0x0800b269
 800b15c:	0800b269 	.word	0x0800b269
 800b160:	0800b227 	.word	0x0800b227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f9f8 	bl	800b560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	699a      	ldr	r2, [r3, #24]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0208 	orr.w	r2, r2, #8
 800b17e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699a      	ldr	r2, [r3, #24]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 0204 	bic.w	r2, r2, #4
 800b18e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6999      	ldr	r1, [r3, #24]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691a      	ldr	r2, [r3, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	619a      	str	r2, [r3, #24]
      break;
 800b1a2:	e064      	b.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fa3e 	bl	800b62c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699a      	ldr	r2, [r3, #24]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6999      	ldr	r1, [r3, #24]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	021a      	lsls	r2, r3, #8
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	619a      	str	r2, [r3, #24]
      break;
 800b1e4:	e043      	b.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fa89 	bl	800b704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69da      	ldr	r2, [r3, #28]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0208 	orr.w	r2, r2, #8
 800b200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69da      	ldr	r2, [r3, #28]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0204 	bic.w	r2, r2, #4
 800b210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69d9      	ldr	r1, [r3, #28]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	691a      	ldr	r2, [r3, #16]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	61da      	str	r2, [r3, #28]
      break;
 800b224:	e023      	b.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68b9      	ldr	r1, [r7, #8]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fad3 	bl	800b7d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69da      	ldr	r2, [r3, #28]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	69d9      	ldr	r1, [r3, #28]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	021a      	lsls	r2, r3, #8
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	61da      	str	r2, [r3, #28]
      break;
 800b266:	e002      	b.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	75fb      	strb	r3, [r7, #23]
      break;
 800b26c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b276:	7dfb      	ldrb	r3, [r7, #23]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b294:	2b01      	cmp	r3, #1
 800b296:	d101      	bne.n	800b29c <HAL_TIM_ConfigClockSource+0x1c>
 800b298:	2302      	movs	r3, #2
 800b29a:	e0b4      	b.n	800b406 <HAL_TIM_ConfigClockSource+0x186>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b2ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2d4:	d03e      	beq.n	800b354 <HAL_TIM_ConfigClockSource+0xd4>
 800b2d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2da:	f200 8087 	bhi.w	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2e2:	f000 8086 	beq.w	800b3f2 <HAL_TIM_ConfigClockSource+0x172>
 800b2e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ea:	d87f      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b2ec:	2b70      	cmp	r3, #112	@ 0x70
 800b2ee:	d01a      	beq.n	800b326 <HAL_TIM_ConfigClockSource+0xa6>
 800b2f0:	2b70      	cmp	r3, #112	@ 0x70
 800b2f2:	d87b      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b2f4:	2b60      	cmp	r3, #96	@ 0x60
 800b2f6:	d050      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x11a>
 800b2f8:	2b60      	cmp	r3, #96	@ 0x60
 800b2fa:	d877      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b2fc:	2b50      	cmp	r3, #80	@ 0x50
 800b2fe:	d03c      	beq.n	800b37a <HAL_TIM_ConfigClockSource+0xfa>
 800b300:	2b50      	cmp	r3, #80	@ 0x50
 800b302:	d873      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b304:	2b40      	cmp	r3, #64	@ 0x40
 800b306:	d058      	beq.n	800b3ba <HAL_TIM_ConfigClockSource+0x13a>
 800b308:	2b40      	cmp	r3, #64	@ 0x40
 800b30a:	d86f      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b30c:	2b30      	cmp	r3, #48	@ 0x30
 800b30e:	d064      	beq.n	800b3da <HAL_TIM_ConfigClockSource+0x15a>
 800b310:	2b30      	cmp	r3, #48	@ 0x30
 800b312:	d86b      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b314:	2b20      	cmp	r3, #32
 800b316:	d060      	beq.n	800b3da <HAL_TIM_ConfigClockSource+0x15a>
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d867      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d05c      	beq.n	800b3da <HAL_TIM_ConfigClockSource+0x15a>
 800b320:	2b10      	cmp	r3, #16
 800b322:	d05a      	beq.n	800b3da <HAL_TIM_ConfigClockSource+0x15a>
 800b324:	e062      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6899      	ldr	r1, [r3, #8]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f000 fb19 	bl	800b96c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	609a      	str	r2, [r3, #8]
      break;
 800b352:	e04f      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6818      	ldr	r0, [r3, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	6899      	ldr	r1, [r3, #8]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f000 fb02 	bl	800b96c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b376:	609a      	str	r2, [r3, #8]
      break;
 800b378:	e03c      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	6859      	ldr	r1, [r3, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	461a      	mov	r2, r3
 800b388:	f000 fa76 	bl	800b878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2150      	movs	r1, #80	@ 0x50
 800b392:	4618      	mov	r0, r3
 800b394:	f000 facf 	bl	800b936 <TIM_ITRx_SetConfig>
      break;
 800b398:	e02c      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	6859      	ldr	r1, [r3, #4]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f000 fa95 	bl	800b8d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2160      	movs	r1, #96	@ 0x60
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 fabf 	bl	800b936 <TIM_ITRx_SetConfig>
      break;
 800b3b8:	e01c      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6859      	ldr	r1, [r3, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f000 fa56 	bl	800b878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2140      	movs	r1, #64	@ 0x40
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 faaf 	bl	800b936 <TIM_ITRx_SetConfig>
      break;
 800b3d8:	e00c      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f000 faa6 	bl	800b936 <TIM_ITRx_SetConfig>
      break;
 800b3ea:	e003      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f0:	e000      	b.n	800b3f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b42a:	bf00      	nop
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a34      	ldr	r2, [pc, #208]	@ (800b544 <TIM_Base_SetConfig+0xe4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00f      	beq.n	800b498 <TIM_Base_SetConfig+0x38>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b47e:	d00b      	beq.n	800b498 <TIM_Base_SetConfig+0x38>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a31      	ldr	r2, [pc, #196]	@ (800b548 <TIM_Base_SetConfig+0xe8>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d007      	beq.n	800b498 <TIM_Base_SetConfig+0x38>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a30      	ldr	r2, [pc, #192]	@ (800b54c <TIM_Base_SetConfig+0xec>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d003      	beq.n	800b498 <TIM_Base_SetConfig+0x38>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a2f      	ldr	r2, [pc, #188]	@ (800b550 <TIM_Base_SetConfig+0xf0>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d108      	bne.n	800b4aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a25      	ldr	r2, [pc, #148]	@ (800b544 <TIM_Base_SetConfig+0xe4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d01b      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b8:	d017      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a22      	ldr	r2, [pc, #136]	@ (800b548 <TIM_Base_SetConfig+0xe8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d013      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a21      	ldr	r2, [pc, #132]	@ (800b54c <TIM_Base_SetConfig+0xec>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00f      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a20      	ldr	r2, [pc, #128]	@ (800b550 <TIM_Base_SetConfig+0xf0>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00b      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b554 <TIM_Base_SetConfig+0xf4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d007      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b558 <TIM_Base_SetConfig+0xf8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d003      	beq.n	800b4ea <TIM_Base_SetConfig+0x8a>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b55c <TIM_Base_SetConfig+0xfc>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d108      	bne.n	800b4fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	695b      	ldr	r3, [r3, #20]
 800b506:	4313      	orrs	r3, r2
 800b508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a08      	ldr	r2, [pc, #32]	@ (800b544 <TIM_Base_SetConfig+0xe4>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d103      	bne.n	800b530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	615a      	str	r2, [r3, #20]
}
 800b536:	bf00      	nop
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	40010000 	.word	0x40010000
 800b548:	40000400 	.word	0x40000400
 800b54c:	40000800 	.word	0x40000800
 800b550:	40000c00 	.word	0x40000c00
 800b554:	40014000 	.word	0x40014000
 800b558:	40014400 	.word	0x40014400
 800b55c:	40014800 	.word	0x40014800

0800b560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f023 0201 	bic.w	r2, r3, #1
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0303 	bic.w	r3, r3, #3
 800b596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f023 0302 	bic.w	r3, r3, #2
 800b5a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a1c      	ldr	r2, [pc, #112]	@ (800b628 <TIM_OC1_SetConfig+0xc8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d10c      	bne.n	800b5d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f023 0308 	bic.w	r3, r3, #8
 800b5c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f023 0304 	bic.w	r3, r3, #4
 800b5d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a13      	ldr	r2, [pc, #76]	@ (800b628 <TIM_OC1_SetConfig+0xc8>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d111      	bne.n	800b602 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	621a      	str	r2, [r3, #32]
}
 800b61c:	bf00      	nop
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	40010000 	.word	0x40010000

0800b62c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b087      	sub	sp, #28
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	f023 0210 	bic.w	r2, r3, #16
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	021b      	lsls	r3, r3, #8
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f023 0320 	bic.w	r3, r3, #32
 800b676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a1e      	ldr	r2, [pc, #120]	@ (800b700 <TIM_OC2_SetConfig+0xd4>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d10d      	bne.n	800b6a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a15      	ldr	r2, [pc, #84]	@ (800b700 <TIM_OC2_SetConfig+0xd4>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d113      	bne.n	800b6d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	621a      	str	r2, [r3, #32]
}
 800b6f2:	bf00      	nop
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	40010000 	.word	0x40010000

0800b704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 0303 	bic.w	r3, r3, #3
 800b73a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b74c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	4313      	orrs	r3, r2
 800b758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a1d      	ldr	r2, [pc, #116]	@ (800b7d4 <TIM_OC3_SetConfig+0xd0>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d10d      	bne.n	800b77e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	021b      	lsls	r3, r3, #8
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	4313      	orrs	r3, r2
 800b774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b77c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a14      	ldr	r2, [pc, #80]	@ (800b7d4 <TIM_OC3_SetConfig+0xd0>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d113      	bne.n	800b7ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b78c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	621a      	str	r2, [r3, #32]
}
 800b7c8:	bf00      	nop
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	40010000 	.word	0x40010000

0800b7d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	021b      	lsls	r3, r3, #8
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	4313      	orrs	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	031b      	lsls	r3, r3, #12
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a10      	ldr	r2, [pc, #64]	@ (800b874 <TIM_OC4_SetConfig+0x9c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d109      	bne.n	800b84c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b83e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	019b      	lsls	r3, r3, #6
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	4313      	orrs	r3, r2
 800b84a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	621a      	str	r2, [r3, #32]
}
 800b866:	bf00      	nop
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40010000 	.word	0x40010000

0800b878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b878:	b480      	push	{r7}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	f023 0201 	bic.w	r2, r3, #1
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	011b      	lsls	r3, r3, #4
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f023 030a 	bic.w	r3, r3, #10
 800b8b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	621a      	str	r2, [r3, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b087      	sub	sp, #28
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	f023 0210 	bic.w	r2, r3, #16
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	031b      	lsls	r3, r3, #12
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	4313      	orrs	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	011b      	lsls	r3, r3, #4
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	621a      	str	r2, [r3, #32]
}
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b936:	b480      	push	{r7}
 800b938:	b085      	sub	sp, #20
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b94c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4313      	orrs	r3, r2
 800b954:	f043 0307 	orr.w	r3, r3, #7
 800b958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	609a      	str	r2, [r3, #8]
}
 800b960:	bf00      	nop
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
 800b978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	021a      	lsls	r2, r3, #8
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	431a      	orrs	r2, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4313      	orrs	r3, r2
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	4313      	orrs	r3, r2
 800b998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	697a      	ldr	r2, [r7, #20]
 800b99e:	609a      	str	r2, [r3, #8]
}
 800b9a0:	bf00      	nop
 800b9a2:	371c      	adds	r7, #28
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	f003 031f 	and.w	r3, r3, #31
 800b9be:	2201      	movs	r2, #1
 800b9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6a1a      	ldr	r2, [r3, #32]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	43db      	mvns	r3, r3
 800b9ce:	401a      	ands	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6a1a      	ldr	r2, [r3, #32]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	f003 031f 	and.w	r3, r3, #31
 800b9de:	6879      	ldr	r1, [r7, #4]
 800b9e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	621a      	str	r2, [r3, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d101      	bne.n	800ba10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	e050      	b.n	800bab2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a1c      	ldr	r2, [pc, #112]	@ (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d018      	beq.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5c:	d013      	beq.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a18      	ldr	r2, [pc, #96]	@ (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00e      	beq.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a16      	ldr	r2, [pc, #88]	@ (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d009      	beq.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a15      	ldr	r2, [pc, #84]	@ (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d004      	beq.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a13      	ldr	r2, [pc, #76]	@ (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d10c      	bne.n	800baa0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40000400 	.word	0x40000400
 800bac8:	40000800 	.word	0x40000800
 800bacc:	40000c00 	.word	0x40000c00
 800bad0:	40014000 	.word	0x40014000

0800bad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e03f      	b.n	800bb8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7f7 fe4c 	bl	80037c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2224      	movs	r2, #36	@ 0x24
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fe5d 	bl	800c800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	695a      	ldr	r2, [r3, #20]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2220      	movs	r2, #32
 800bb80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2220      	movs	r2, #32
 800bb88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e021      	b.n	800bbec <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2224      	movs	r2, #36	@ 0x24
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbbe:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7f7 fe8b 	bl	80038dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	@ 0x28
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d17c      	bne.n	800bd0e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <HAL_UART_Transmit+0x2c>
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e075      	b.n	800bd10 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d101      	bne.n	800bc32 <HAL_UART_Transmit+0x3e>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e06e      	b.n	800bd10 <HAL_UART_Transmit+0x11c>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2221      	movs	r2, #33	@ 0x21
 800bc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc48:	f7f8 f870 	bl	8003d2c <HAL_GetTick>
 800bc4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc62:	d108      	bne.n	800bc76 <HAL_UART_Transmit+0x82>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d104      	bne.n	800bc76 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	61bb      	str	r3, [r7, #24]
 800bc74:	e003      	b.n	800bc7e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800bc86:	e02a      	b.n	800bcde <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2180      	movs	r1, #128	@ 0x80
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 fb6e 	bl	800c374 <UART_WaitOnFlagUntilTimeout>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e036      	b.n	800bd10 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10b      	bne.n	800bcc0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	461a      	mov	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcb6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	3302      	adds	r3, #2
 800bcbc:	61bb      	str	r3, [r7, #24]
 800bcbe:	e007      	b.n	800bcd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	781a      	ldrb	r2, [r3, #0]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	3301      	adds	r3, #1
 800bcce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1cf      	bne.n	800bc88 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2140      	movs	r1, #64	@ 0x40
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 fb3e 	bl	800c374 <UART_WaitOnFlagUntilTimeout>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e006      	b.n	800bd10 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e000      	b.n	800bd10 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bd0e:	2302      	movs	r3, #2
  }
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b20      	cmp	r3, #32
 800bd30:	d11d      	bne.n	800bd6e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <HAL_UART_Receive_IT+0x26>
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e016      	b.n	800bd70 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d101      	bne.n	800bd50 <HAL_UART_Receive_IT+0x38>
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	e00f      	b.n	800bd70 <HAL_UART_Receive_IT+0x58>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	461a      	mov	r2, r3
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 fb73 	bl	800c450 <UART_Start_Receive_IT>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	e000      	b.n	800bd70 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bd6e:	2302      	movs	r3, #2
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08c      	sub	sp, #48	@ 0x30
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d152      	bne.n	800be38 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e04b      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e044      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 fb43 	bl	800c450 <UART_Start_Receive_IT>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bdd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d12c      	bne.n	800be32 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d125      	bne.n	800be2c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bde0:	2300      	movs	r3, #0
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	330c      	adds	r3, #12
 800bdfc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	617b      	str	r3, [r7, #20]
   return(result);
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f043 0310 	orr.w	r3, r3, #16
 800be0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	330c      	adds	r3, #12
 800be14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be16:	627a      	str	r2, [r7, #36]	@ 0x24
 800be18:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6a39      	ldr	r1, [r7, #32]
 800be1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	61fb      	str	r3, [r7, #28]
   return(result);
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800be2a:	e002      	b.n	800be32 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800be32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be36:	e000      	b.n	800be3a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800be38:	2302      	movs	r3, #2
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3730      	adds	r7, #48	@ 0x30
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b0ba      	sub	sp, #232	@ 0xe8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800be82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10f      	bne.n	800beaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <HAL_UART_IRQHandler+0x66>
 800be96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fbf1 	bl	800c68a <UART_Receive_IT>
      return;
 800bea8:	e256      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800beaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80de 	beq.w	800c070 <HAL_UART_IRQHandler+0x22c>
 800beb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bec4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80d1 	beq.w	800c070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <HAL_UART_IRQHandler+0xae>
 800beda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beea:	f043 0201 	orr.w	r2, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00b      	beq.n	800bf16 <HAL_UART_IRQHandler+0xd2>
 800befe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0e:	f043 0202 	orr.w	r2, r3, #2
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <HAL_UART_IRQHandler+0xf6>
 800bf22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf32:	f043 0204 	orr.w	r2, r3, #4
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf3e:	f003 0308 	and.w	r3, r3, #8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d011      	beq.n	800bf6a <HAL_UART_IRQHandler+0x126>
 800bf46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf4a:	f003 0320 	and.w	r3, r3, #32
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d105      	bne.n	800bf5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf62:	f043 0208 	orr.w	r2, r3, #8
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 81ed 	beq.w	800c34e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d008      	beq.n	800bf92 <HAL_UART_IRQHandler+0x14e>
 800bf80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf84:	f003 0320 	and.w	r3, r3, #32
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fb7c 	bl	800c68a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf9c:	2b40      	cmp	r3, #64	@ 0x40
 800bf9e:	bf0c      	ite	eq
 800bfa0:	2301      	moveq	r3, #1
 800bfa2:	2300      	movne	r3, #0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfae:	f003 0308 	and.w	r3, r3, #8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d103      	bne.n	800bfbe <HAL_UART_IRQHandler+0x17a>
 800bfb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d04f      	beq.n	800c05e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa84 	bl	800c4cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfce:	2b40      	cmp	r3, #64	@ 0x40
 800bfd0:	d141      	bne.n	800c056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3314      	adds	r3, #20
 800bfd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bfe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3314      	adds	r3, #20
 800bffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bffe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c00a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1d9      	bne.n	800bfd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c02a:	4a7d      	ldr	r2, [pc, #500]	@ (800c220 <HAL_UART_IRQHandler+0x3dc>)
 800c02c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c032:	4618      	mov	r0, r3
 800c034:	f7f8 fe5d 	bl	8004cf2 <HAL_DMA_Abort_IT>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d016      	beq.n	800c06c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04c:	e00e      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7f7 f8fe 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c054:	e00a      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f7 f8fa 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e006      	b.n	800c06c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f7 f8f6 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800c06a:	e170      	b.n	800c34e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06c:	bf00      	nop
    return;
 800c06e:	e16e      	b.n	800c34e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c074:	2b01      	cmp	r3, #1
 800c076:	f040 814a 	bne.w	800c30e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c07e:	f003 0310 	and.w	r3, r3, #16
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8143 	beq.w	800c30e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 813c 	beq.w	800c30e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0b6:	2b40      	cmp	r3, #64	@ 0x40
 800c0b8:	f040 80b4 	bne.w	800c224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8140 	beq.w	800c352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c0d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	f080 8139 	bcs.w	800c352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0f2:	f000 8088 	beq.w	800c206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c10c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	330c      	adds	r3, #12
 800c11e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c12e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c13a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1d9      	bne.n	800c0f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3314      	adds	r3, #20
 800c148:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c154:	f023 0301 	bic.w	r3, r3, #1
 800c158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3314      	adds	r3, #20
 800c162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c166:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c16a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c16e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c172:	e841 2300 	strex	r3, r2, [r1]
 800c176:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e1      	bne.n	800c142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3314      	adds	r3, #20
 800c184:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3314      	adds	r3, #20
 800c19e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c1a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c1a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c1a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c1b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e3      	bne.n	800c17e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ce:	e853 3f00 	ldrex	r3, [r3]
 800c1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c1d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1d6:	f023 0310 	bic.w	r3, r3, #16
 800c1da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	330c      	adds	r3, #12
 800c1e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c1e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c1ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c1ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1f0:	e841 2300 	strex	r3, r2, [r1]
 800c1f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c1f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e3      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c200:	4618      	mov	r0, r3
 800c202:	f7f8 fd06 	bl	8004c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c20e:	b29b      	uxth	r3, r3
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	b29b      	uxth	r3, r3
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f007 fe96 	bl	8013f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c21c:	e099      	b.n	800c352 <HAL_UART_IRQHandler+0x50e>
 800c21e:	bf00      	nop
 800c220:	0800c593 	.word	0x0800c593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 808b 	beq.w	800c356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 8086 	beq.w	800c356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	330c      	adds	r3, #12
 800c250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c254:	e853 3f00 	ldrex	r3, [r3]
 800c258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	330c      	adds	r3, #12
 800c26a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c26e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e3      	bne.n	800c24a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3314      	adds	r3, #20
 800c288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	623b      	str	r3, [r7, #32]
   return(result);
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	f023 0301 	bic.w	r3, r3, #1
 800c298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3314      	adds	r3, #20
 800c2a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c2a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e3      	bne.n	800c282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2220      	movs	r2, #32
 800c2be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f023 0310 	bic.w	r3, r3, #16
 800c2de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c2ec:	61fa      	str	r2, [r7, #28]
 800c2ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e3      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f007 fe1e 	bl	8013f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c30c:	e023      	b.n	800c356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c316:	2b00      	cmp	r3, #0
 800c318:	d009      	beq.n	800c32e <HAL_UART_IRQHandler+0x4ea>
 800c31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f947 	bl	800c5ba <UART_Transmit_IT>
    return;
 800c32c:	e014      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00e      	beq.n	800c358 <HAL_UART_IRQHandler+0x514>
 800c33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c342:	2b00      	cmp	r3, #0
 800c344:	d008      	beq.n	800c358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f987 	bl	800c65a <UART_EndTransmit_IT>
    return;
 800c34c:	e004      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
    return;
 800c34e:	bf00      	nop
 800c350:	e002      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
      return;
 800c352:	bf00      	nop
 800c354:	e000      	b.n	800c358 <HAL_UART_IRQHandler+0x514>
      return;
 800c356:	bf00      	nop
  }
}
 800c358:	37e8      	adds	r7, #232	@ 0xe8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop

0800c360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b090      	sub	sp, #64	@ 0x40
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	4613      	mov	r3, r2
 800c382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c384:	e050      	b.n	800c428 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38c:	d04c      	beq.n	800c428 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c38e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c394:	f7f7 fcca 	bl	8003d2c <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d241      	bcs.n	800c428 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	e853 3f00 	ldrex	r3, [r3]
 800c3b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	330c      	adds	r3, #12
 800c3c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3c4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c3c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c3ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3cc:	e841 2300 	strex	r3, r2, [r1]
 800c3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1e5      	bne.n	800c3a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3314      	adds	r3, #20
 800c3de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f023 0301 	bic.w	r3, r3, #1
 800c3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3314      	adds	r3, #20
 800c3f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3f8:	623a      	str	r2, [r7, #32]
 800c3fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	69f9      	ldr	r1, [r7, #28]
 800c3fe:	6a3a      	ldr	r2, [r7, #32]
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	61bb      	str	r3, [r7, #24]
   return(result);
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e5      	bne.n	800c3d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2220      	movs	r2, #32
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2220      	movs	r2, #32
 800c418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e00f      	b.n	800c448 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	4013      	ands	r3, r2
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	429a      	cmp	r2, r3
 800c436:	bf0c      	ite	eq
 800c438:	2301      	moveq	r3, #1
 800c43a:	2300      	movne	r3, #0
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	461a      	mov	r2, r3
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	429a      	cmp	r2, r3
 800c444:	d09f      	beq.n	800c386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3740      	adds	r7, #64	@ 0x40
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	4613      	mov	r3, r2
 800c45c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	88fa      	ldrh	r2, [r7, #6]
 800c468:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	88fa      	ldrh	r2, [r7, #6]
 800c46e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2222      	movs	r2, #34	@ 0x22
 800c47a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68da      	ldr	r2, [r3, #12]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c49c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	695a      	ldr	r2, [r3, #20]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f042 0201 	orr.w	r2, r2, #1
 800c4ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f042 0220 	orr.w	r2, r2, #32
 800c4bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b095      	sub	sp, #84	@ 0x54
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	330c      	adds	r3, #12
 800c4da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	330c      	adds	r3, #12
 800c4f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4f4:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e5      	bne.n	800c4d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3314      	adds	r3, #20
 800c50e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	61fb      	str	r3, [r7, #28]
   return(result);
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	f023 0301 	bic.w	r3, r3, #1
 800c51e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3314      	adds	r3, #20
 800c526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c52a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c530:	e841 2300 	strex	r3, r2, [r1]
 800c534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1e5      	bne.n	800c508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c540:	2b01      	cmp	r3, #1
 800c542:	d119      	bne.n	800c578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	330c      	adds	r3, #12
 800c54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	60bb      	str	r3, [r7, #8]
   return(result);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f023 0310 	bic.w	r3, r3, #16
 800c55a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	330c      	adds	r3, #12
 800c562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c564:	61ba      	str	r2, [r7, #24]
 800c566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6979      	ldr	r1, [r7, #20]
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	613b      	str	r3, [r7, #16]
   return(result);
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e5      	bne.n	800c544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c586:	bf00      	nop
 800c588:	3754      	adds	r7, #84	@ 0x54
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7f6 fe4f 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5b2:	bf00      	nop
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b21      	cmp	r3, #33	@ 0x21
 800c5cc:	d13e      	bne.n	800c64c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5d6:	d114      	bne.n	800c602 <UART_Transmit_IT+0x48>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d110      	bne.n	800c602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	881b      	ldrh	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	621a      	str	r2, [r3, #32]
 800c600:	e008      	b.n	800c614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	1c59      	adds	r1, r3, #1
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	6211      	str	r1, [r2, #32]
 800c60c:	781a      	ldrb	r2, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c618:	b29b      	uxth	r3, r3
 800c61a:	3b01      	subs	r3, #1
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	4619      	mov	r1, r3
 800c622:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10f      	bne.n	800c648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68da      	ldr	r2, [r3, #12]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	e000      	b.n	800c64e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c64c:	2302      	movs	r3, #2
  }
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68da      	ldr	r2, [r3, #12]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2220      	movs	r2, #32
 800c676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff fe70 	bl	800c360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b08c      	sub	sp, #48	@ 0x30
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b22      	cmp	r3, #34	@ 0x22
 800c69c:	f040 80ab 	bne.w	800c7f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6a8:	d117      	bne.n	800c6da <UART_Receive_IT+0x50>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d113      	bne.n	800c6da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d2:	1c9a      	adds	r2, r3, #2
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6d8:	e026      	b.n	800c728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ec:	d007      	beq.n	800c6fe <UART_Receive_IT+0x74>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10a      	bne.n	800c70c <UART_Receive_IT+0x82>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	b2da      	uxtb	r2, r3
 800c706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	e008      	b.n	800c71e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	3b01      	subs	r3, #1
 800c730:	b29b      	uxth	r3, r3
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	4619      	mov	r1, r3
 800c736:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d15a      	bne.n	800c7f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0220 	bic.w	r2, r2, #32
 800c74a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68da      	ldr	r2, [r3, #12]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c75a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	695a      	ldr	r2, [r3, #20]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f022 0201 	bic.w	r2, r2, #1
 800c76a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2220      	movs	r2, #32
 800c770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d135      	bne.n	800c7e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	330c      	adds	r3, #12
 800c788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	e853 3f00 	ldrex	r3, [r3]
 800c790:	613b      	str	r3, [r7, #16]
   return(result);
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f023 0310 	bic.w	r3, r3, #16
 800c798:	627b      	str	r3, [r7, #36]	@ 0x24
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	330c      	adds	r3, #12
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7a2:	623a      	str	r2, [r7, #32]
 800c7a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a6:	69f9      	ldr	r1, [r7, #28]
 800c7a8:	6a3a      	ldr	r2, [r7, #32]
 800c7aa:	e841 2300 	strex	r3, r2, [r1]
 800c7ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1e5      	bne.n	800c782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b10      	cmp	r3, #16
 800c7c2:	d10a      	bne.n	800c7da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f007 fbb1 	bl	8013f48 <HAL_UARTEx_RxEventCallback>
 800c7e6:	e002      	b.n	800c7ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f002 fc4d 	bl	800f088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	e002      	b.n	800c7f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e000      	b.n	800c7f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c7f6:	2302      	movs	r3, #2
  }
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3730      	adds	r7, #48	@ 0x30
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c804:	b0c0      	sub	sp, #256	@ 0x100
 800c806:	af00      	add	r7, sp, #0
 800c808:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c81c:	68d9      	ldr	r1, [r3, #12]
 800c81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	ea40 0301 	orr.w	r3, r0, r1
 800c828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c82e:	689a      	ldr	r2, [r3, #8]
 800c830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	431a      	orrs	r2, r3
 800c838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	431a      	orrs	r2, r3
 800c840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	4313      	orrs	r3, r2
 800c848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c858:	f021 010c 	bic.w	r1, r1, #12
 800c85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c866:	430b      	orrs	r3, r1
 800c868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c87a:	6999      	ldr	r1, [r3, #24]
 800c87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	ea40 0301 	orr.w	r3, r0, r1
 800c886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4b8f      	ldr	r3, [pc, #572]	@ (800cacc <UART_SetConfig+0x2cc>)
 800c890:	429a      	cmp	r2, r3
 800c892:	d005      	beq.n	800c8a0 <UART_SetConfig+0xa0>
 800c894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b8d      	ldr	r3, [pc, #564]	@ (800cad0 <UART_SetConfig+0x2d0>)
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d104      	bne.n	800c8aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c8a0:	f7fc fb3e 	bl	8008f20 <HAL_RCC_GetPCLK2Freq>
 800c8a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c8a8:	e003      	b.n	800c8b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c8aa:	f7fc fb25 	bl	8008ef8 <HAL_RCC_GetPCLK1Freq>
 800c8ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8bc:	f040 810c 	bne.w	800cad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c8c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c8ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c8ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	1891      	adds	r1, r2, r2
 800c8d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c8da:	415b      	adcs	r3, r3
 800c8dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	eb12 0801 	adds.w	r8, r2, r1
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	eb43 0901 	adc.w	r9, r3, r1
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c902:	4690      	mov	r8, r2
 800c904:	4699      	mov	r9, r3
 800c906:	4623      	mov	r3, r4
 800c908:	eb18 0303 	adds.w	r3, r8, r3
 800c90c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c910:	462b      	mov	r3, r5
 800c912:	eb49 0303 	adc.w	r3, r9, r3
 800c916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c926:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c92a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c92e:	460b      	mov	r3, r1
 800c930:	18db      	adds	r3, r3, r3
 800c932:	653b      	str	r3, [r7, #80]	@ 0x50
 800c934:	4613      	mov	r3, r2
 800c936:	eb42 0303 	adc.w	r3, r2, r3
 800c93a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c93c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c944:	f7f4 f9b8 	bl	8000cb8 <__aeabi_uldivmod>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4b61      	ldr	r3, [pc, #388]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c94e:	fba3 2302 	umull	r2, r3, r3, r2
 800c952:	095b      	lsrs	r3, r3, #5
 800c954:	011c      	lsls	r4, r3, #4
 800c956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c960:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c968:	4642      	mov	r2, r8
 800c96a:	464b      	mov	r3, r9
 800c96c:	1891      	adds	r1, r2, r2
 800c96e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c970:	415b      	adcs	r3, r3
 800c972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c978:	4641      	mov	r1, r8
 800c97a:	eb12 0a01 	adds.w	sl, r2, r1
 800c97e:	4649      	mov	r1, r9
 800c980:	eb43 0b01 	adc.w	fp, r3, r1
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c998:	4692      	mov	sl, r2
 800c99a:	469b      	mov	fp, r3
 800c99c:	4643      	mov	r3, r8
 800c99e:	eb1a 0303 	adds.w	r3, sl, r3
 800c9a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	eb4b 0303 	adc.w	r3, fp, r3
 800c9ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c9c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	18db      	adds	r3, r3, r3
 800c9c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	eb42 0303 	adc.w	r3, r2, r3
 800c9d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c9d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c9da:	f7f4 f96d 	bl	8000cb8 <__aeabi_uldivmod>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4b3b      	ldr	r3, [pc, #236]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c9e6:	fba3 2301 	umull	r2, r3, r3, r1
 800c9ea:	095b      	lsrs	r3, r3, #5
 800c9ec:	2264      	movs	r2, #100	@ 0x64
 800c9ee:	fb02 f303 	mul.w	r3, r2, r3
 800c9f2:	1acb      	subs	r3, r1, r3
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c9fa:	4b36      	ldr	r3, [pc, #216]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c9fc:	fba3 2302 	umull	r2, r3, r3, r2
 800ca00:	095b      	lsrs	r3, r3, #5
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ca08:	441c      	add	r4, r3
 800ca0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ca18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	1891      	adds	r1, r2, r2
 800ca22:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ca24:	415b      	adcs	r3, r3
 800ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ca2c:	4641      	mov	r1, r8
 800ca2e:	1851      	adds	r1, r2, r1
 800ca30:	6339      	str	r1, [r7, #48]	@ 0x30
 800ca32:	4649      	mov	r1, r9
 800ca34:	414b      	adcs	r3, r1
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca38:	f04f 0200 	mov.w	r2, #0
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ca44:	4659      	mov	r1, fp
 800ca46:	00cb      	lsls	r3, r1, #3
 800ca48:	4651      	mov	r1, sl
 800ca4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca4e:	4651      	mov	r1, sl
 800ca50:	00ca      	lsls	r2, r1, #3
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	4603      	mov	r3, r0
 800ca58:	4642      	mov	r2, r8
 800ca5a:	189b      	adds	r3, r3, r2
 800ca5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca60:	464b      	mov	r3, r9
 800ca62:	460a      	mov	r2, r1
 800ca64:	eb42 0303 	adc.w	r3, r2, r3
 800ca68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ca78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ca7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ca80:	460b      	mov	r3, r1
 800ca82:	18db      	adds	r3, r3, r3
 800ca84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca86:	4613      	mov	r3, r2
 800ca88:	eb42 0303 	adc.w	r3, r2, r3
 800ca8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ca96:	f7f4 f90f 	bl	8000cb8 <__aeabi_uldivmod>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800caa0:	fba3 1302 	umull	r1, r3, r3, r2
 800caa4:	095b      	lsrs	r3, r3, #5
 800caa6:	2164      	movs	r1, #100	@ 0x64
 800caa8:	fb01 f303 	mul.w	r3, r1, r3
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	3332      	adds	r3, #50	@ 0x32
 800cab2:	4a08      	ldr	r2, [pc, #32]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	095b      	lsrs	r3, r3, #5
 800caba:	f003 0207 	and.w	r2, r3, #7
 800cabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4422      	add	r2, r4
 800cac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cac8:	e106      	b.n	800ccd8 <UART_SetConfig+0x4d8>
 800caca:	bf00      	nop
 800cacc:	40011000 	.word	0x40011000
 800cad0:	40011400 	.word	0x40011400
 800cad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cadc:	2200      	movs	r2, #0
 800cade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cae2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	1891      	adds	r1, r2, r2
 800caf0:	6239      	str	r1, [r7, #32]
 800caf2:	415b      	adcs	r3, r3
 800caf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800caf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cafa:	4641      	mov	r1, r8
 800cafc:	1854      	adds	r4, r2, r1
 800cafe:	4649      	mov	r1, r9
 800cb00:	eb43 0501 	adc.w	r5, r3, r1
 800cb04:	f04f 0200 	mov.w	r2, #0
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	00eb      	lsls	r3, r5, #3
 800cb0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb12:	00e2      	lsls	r2, r4, #3
 800cb14:	4614      	mov	r4, r2
 800cb16:	461d      	mov	r5, r3
 800cb18:	4643      	mov	r3, r8
 800cb1a:	18e3      	adds	r3, r4, r3
 800cb1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb20:	464b      	mov	r3, r9
 800cb22:	eb45 0303 	adc.w	r3, r5, r3
 800cb26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cb3a:	f04f 0200 	mov.w	r2, #0
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cb46:	4629      	mov	r1, r5
 800cb48:	008b      	lsls	r3, r1, #2
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb50:	4621      	mov	r1, r4
 800cb52:	008a      	lsls	r2, r1, #2
 800cb54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cb58:	f7f4 f8ae 	bl	8000cb8 <__aeabi_uldivmod>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4b60      	ldr	r3, [pc, #384]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cb62:	fba3 2302 	umull	r2, r3, r3, r2
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	011c      	lsls	r4, r3, #4
 800cb6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cb74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cb78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800cb7c:	4642      	mov	r2, r8
 800cb7e:	464b      	mov	r3, r9
 800cb80:	1891      	adds	r1, r2, r2
 800cb82:	61b9      	str	r1, [r7, #24]
 800cb84:	415b      	adcs	r3, r3
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb8c:	4641      	mov	r1, r8
 800cb8e:	1851      	adds	r1, r2, r1
 800cb90:	6139      	str	r1, [r7, #16]
 800cb92:	4649      	mov	r1, r9
 800cb94:	414b      	adcs	r3, r1
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	f04f 0300 	mov.w	r3, #0
 800cba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cba4:	4659      	mov	r1, fp
 800cba6:	00cb      	lsls	r3, r1, #3
 800cba8:	4651      	mov	r1, sl
 800cbaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbae:	4651      	mov	r1, sl
 800cbb0:	00ca      	lsls	r2, r1, #3
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4642      	mov	r2, r8
 800cbba:	189b      	adds	r3, r3, r2
 800cbbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	460a      	mov	r2, r1
 800cbc4:	eb42 0303 	adc.w	r3, r2, r3
 800cbc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cbd8:	f04f 0200 	mov.w	r2, #0
 800cbdc:	f04f 0300 	mov.w	r3, #0
 800cbe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	008b      	lsls	r3, r1, #2
 800cbe8:	4641      	mov	r1, r8
 800cbea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbee:	4641      	mov	r1, r8
 800cbf0:	008a      	lsls	r2, r1, #2
 800cbf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cbf6:	f7f4 f85f 	bl	8000cb8 <__aeabi_uldivmod>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4611      	mov	r1, r2
 800cc00:	4b38      	ldr	r3, [pc, #224]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cc02:	fba3 2301 	umull	r2, r3, r3, r1
 800cc06:	095b      	lsrs	r3, r3, #5
 800cc08:	2264      	movs	r2, #100	@ 0x64
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	1acb      	subs	r3, r1, r3
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	3332      	adds	r3, #50	@ 0x32
 800cc14:	4a33      	ldr	r2, [pc, #204]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cc16:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1a:	095b      	lsrs	r3, r3, #5
 800cc1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc20:	441c      	add	r4, r3
 800cc22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc26:	2200      	movs	r2, #0
 800cc28:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc2a:	677a      	str	r2, [r7, #116]	@ 0x74
 800cc2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	1891      	adds	r1, r2, r2
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	415b      	adcs	r3, r3
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc40:	4641      	mov	r1, r8
 800cc42:	1851      	adds	r1, r2, r1
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	4649      	mov	r1, r9
 800cc48:	414b      	adcs	r3, r1
 800cc4a:	607b      	str	r3, [r7, #4]
 800cc4c:	f04f 0200 	mov.w	r2, #0
 800cc50:	f04f 0300 	mov.w	r3, #0
 800cc54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc58:	4659      	mov	r1, fp
 800cc5a:	00cb      	lsls	r3, r1, #3
 800cc5c:	4651      	mov	r1, sl
 800cc5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc62:	4651      	mov	r1, sl
 800cc64:	00ca      	lsls	r2, r1, #3
 800cc66:	4610      	mov	r0, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4642      	mov	r2, r8
 800cc6e:	189b      	adds	r3, r3, r2
 800cc70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc72:	464b      	mov	r3, r9
 800cc74:	460a      	mov	r2, r1
 800cc76:	eb42 0303 	adc.w	r3, r2, r3
 800cc7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc86:	667a      	str	r2, [r7, #100]	@ 0x64
 800cc88:	f04f 0200 	mov.w	r2, #0
 800cc8c:	f04f 0300 	mov.w	r3, #0
 800cc90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cc94:	4649      	mov	r1, r9
 800cc96:	008b      	lsls	r3, r1, #2
 800cc98:	4641      	mov	r1, r8
 800cc9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc9e:	4641      	mov	r1, r8
 800cca0:	008a      	lsls	r2, r1, #2
 800cca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cca6:	f7f4 f807 	bl	8000cb8 <__aeabi_uldivmod>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800ccb0:	fba3 1302 	umull	r1, r3, r3, r2
 800ccb4:	095b      	lsrs	r3, r3, #5
 800ccb6:	2164      	movs	r1, #100	@ 0x64
 800ccb8:	fb01 f303 	mul.w	r3, r1, r3
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	011b      	lsls	r3, r3, #4
 800ccc0:	3332      	adds	r3, #50	@ 0x32
 800ccc2:	4a08      	ldr	r2, [pc, #32]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800ccc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc8:	095b      	lsrs	r3, r3, #5
 800ccca:	f003 020f 	and.w	r2, r3, #15
 800ccce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4422      	add	r2, r4
 800ccd6:	609a      	str	r2, [r3, #8]
}
 800ccd8:	bf00      	nop
 800ccda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ccde:	46bd      	mov	sp, r7
 800cce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cce4:	51eb851f 	.word	0x51eb851f

0800cce8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cce8:	b084      	sub	sp, #16
 800ccea:	b480      	push	{r7}
 800ccec:	b085      	sub	sp, #20
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	f107 001c 	add.w	r0, r7, #28
 800ccf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ccfe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cd00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cd02:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cd06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cd0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cd0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cd12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800cd22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	b004      	add	sp, #16
 800cd3c:	4770      	bx	lr

0800cd3e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2203      	movs	r2, #3
 800cd86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f003 0303 	and.w	r3, r3, #3
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	370c      	adds	r7, #12
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cdd0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cdd6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cddc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cdec:	f023 030f 	bic.w	r3, r3, #15
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	b2db      	uxtb	r3, r3
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3314      	adds	r3, #20
 800ce2e:	461a      	mov	r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	4413      	add	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
}  
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b085      	sub	sp, #20
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ce6c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ce72:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ce78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce84:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ce90:	2300      	movs	r3, #0

}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b088      	sub	sp, #32
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ceac:	2310      	movs	r3, #16
 800ceae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ceb0:	2340      	movs	r3, #64	@ 0x40
 800ceb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cebc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f7ff ff74 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ceca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cece:	2110      	movs	r1, #16
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f9d7 	bl	800d284 <SDMMC_GetCmdResp1>
 800ced6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ced8:	69fb      	ldr	r3, [r7, #28]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b088      	sub	sp, #32
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cef0:	2311      	movs	r3, #17
 800cef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cef4:	2340      	movs	r3, #64	@ 0x40
 800cef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cefc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf02:	f107 0308 	add.w	r3, r7, #8
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff ff52 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cf0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf12:	2111      	movs	r1, #17
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f9b5 	bl	800d284 <SDMMC_GetCmdResp1>
 800cf1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3720      	adds	r7, #32
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b088      	sub	sp, #32
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cf34:	2312      	movs	r3, #18
 800cf36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf38:	2340      	movs	r3, #64	@ 0x40
 800cf3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf46:	f107 0308 	add.w	r3, r7, #8
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff ff30 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf56:	2112      	movs	r1, #18
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f993 	bl	800d284 <SDMMC_GetCmdResp1>
 800cf5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf60:	69fb      	ldr	r3, [r7, #28]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3720      	adds	r7, #32
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cf78:	2318      	movs	r3, #24
 800cf7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf7c:	2340      	movs	r3, #64	@ 0x40
 800cf7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf8a:	f107 0308 	add.w	r3, r7, #8
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff ff0e 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cf96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf9a:	2118      	movs	r1, #24
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f971 	bl	800d284 <SDMMC_GetCmdResp1>
 800cfa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa4:	69fb      	ldr	r3, [r7, #28]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3720      	adds	r7, #32
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b088      	sub	sp, #32
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cfbc:	2319      	movs	r3, #25
 800cfbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfc0:	2340      	movs	r3, #64	@ 0x40
 800cfc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfce:	f107 0308 	add.w	r3, r7, #8
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff feec 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cfda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfde:	2119      	movs	r1, #25
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 f94f 	bl	800d284 <SDMMC_GetCmdResp1>
 800cfe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfe8:	69fb      	ldr	r3, [r7, #28]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3720      	adds	r7, #32
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cffc:	2300      	movs	r3, #0
 800cffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d000:	230c      	movs	r3, #12
 800d002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d004:	2340      	movs	r3, #64	@ 0x40
 800d006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d008:	2300      	movs	r3, #0
 800d00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d00c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d010:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d012:	f107 0308 	add.w	r3, r7, #8
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff feca 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d01e:	4a05      	ldr	r2, [pc, #20]	@ (800d034 <SDMMC_CmdStopTransfer+0x40>)
 800d020:	210c      	movs	r1, #12
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f92e 	bl	800d284 <SDMMC_GetCmdResp1>
 800d028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d02a:	69fb      	ldr	r3, [r7, #28]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	05f5e100 	.word	0x05f5e100

0800d038 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08a      	sub	sp, #40	@ 0x28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d048:	2307      	movs	r3, #7
 800d04a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d04c:	2340      	movs	r3, #64	@ 0x40
 800d04e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d058:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d05a:	f107 0310 	add.w	r3, r7, #16
 800d05e:	4619      	mov	r1, r3
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7ff fea6 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d06a:	2107      	movs	r1, #7
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f000 f909 	bl	800d284 <SDMMC_GetCmdResp1>
 800d072:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d076:	4618      	mov	r0, r3
 800d078:	3728      	adds	r7, #40	@ 0x28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b088      	sub	sp, #32
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d08e:	2300      	movs	r3, #0
 800d090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d092:	2300      	movs	r3, #0
 800d094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d09a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d09c:	f107 0308 	add.w	r3, r7, #8
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fe85 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fb23 	bl	800d6f4 <SDMMC_GetCmdError>
 800d0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0b0:	69fb      	ldr	r3, [r7, #28]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b088      	sub	sp, #32
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d0c2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d0c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d0c8:	2308      	movs	r3, #8
 800d0ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0cc:	2340      	movs	r3, #64	@ 0x40
 800d0ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0da:	f107 0308 	add.w	r3, r7, #8
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff fe66 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fab6 	bl	800d658 <SDMMC_GetCmdResp7>
 800d0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3720      	adds	r7, #32
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d106:	2337      	movs	r3, #55	@ 0x37
 800d108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d10a:	2340      	movs	r3, #64	@ 0x40
 800d10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d10e:	2300      	movs	r3, #0
 800d110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d118:	f107 0308 	add.w	r3, r7, #8
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7ff fe47 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d124:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d128:	2137      	movs	r1, #55	@ 0x37
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f8aa 	bl	800d284 <SDMMC_GetCmdResp1>
 800d130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d132:	69fb      	ldr	r3, [r7, #28]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3720      	adds	r7, #32
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d14c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d152:	2329      	movs	r3, #41	@ 0x29
 800d154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d156:	2340      	movs	r3, #64	@ 0x40
 800d158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d15a:	2300      	movs	r3, #0
 800d15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d15e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d164:	f107 0308 	add.w	r3, r7, #8
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fe21 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f9bd 	bl	800d4f0 <SDMMC_GetCmdResp3>
 800d176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d178:	69fb      	ldr	r3, [r7, #28]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3720      	adds	r7, #32
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b088      	sub	sp, #32
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d18a:	2300      	movs	r3, #0
 800d18c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d18e:	2302      	movs	r3, #2
 800d190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d192:	23c0      	movs	r3, #192	@ 0xc0
 800d194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d19a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d19e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1a0:	f107 0308 	add.w	r3, r7, #8
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fe03 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 f957 	bl	800d460 <SDMMC_GetCmdResp2>
 800d1b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3720      	adds	r7, #32
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b088      	sub	sp, #32
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d1cc:	2309      	movs	r3, #9
 800d1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d1d0:	23c0      	movs	r3, #192	@ 0xc0
 800d1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1de:	f107 0308 	add.w	r3, r7, #8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff fde4 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f938 	bl	800d460 <SDMMC_GetCmdResp2>
 800d1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1f2:	69fb      	ldr	r3, [r7, #28]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d20a:	2303      	movs	r3, #3
 800d20c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d20e:	2340      	movs	r3, #64	@ 0x40
 800d210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d21a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d21c:	f107 0308 	add.w	r3, r7, #8
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff fdc5 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	2103      	movs	r1, #3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f99d 	bl	800d56c <SDMMC_GetCmdResp6>
 800d232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d234:	69fb      	ldr	r3, [r7, #28]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b088      	sub	sp, #32
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d24c:	230d      	movs	r3, #13
 800d24e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d250:	2340      	movs	r3, #64	@ 0x40
 800d252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d254:	2300      	movs	r3, #0
 800d256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d25c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d25e:	f107 0308 	add.w	r3, r7, #8
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff fda4 	bl	800cdb2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d26e:	210d      	movs	r1, #13
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f807 	bl	800d284 <SDMMC_GetCmdResp1>
 800d276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d278:	69fb      	ldr	r3, [r7, #28]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3720      	adds	r7, #32
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
	...

0800d284 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	460b      	mov	r3, r1
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d292:	4b70      	ldr	r3, [pc, #448]	@ (800d454 <SDMMC_GetCmdResp1+0x1d0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a70      	ldr	r2, [pc, #448]	@ (800d458 <SDMMC_GetCmdResp1+0x1d4>)
 800d298:	fba2 2303 	umull	r2, r3, r2, r3
 800d29c:	0a5a      	lsrs	r2, r3, #9
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	fb02 f303 	mul.w	r3, r2, r3
 800d2a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	1e5a      	subs	r2, r3, #1
 800d2aa:	61fa      	str	r2, [r7, #28]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d102      	bne.n	800d2b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2b4:	e0c9      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d0ef      	beq.n	800d2a6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1ea      	bne.n	800d2a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2204      	movs	r2, #4
 800d2e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2e2:	2304      	movs	r3, #4
 800d2e4:	e0b1      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e0a6      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	22c5      	movs	r2, #197	@ 0xc5
 800d300:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff fd7f 	bl	800ce06 <SDIO_GetCommandResponse>
 800d308:	4603      	mov	r3, r0
 800d30a:	461a      	mov	r2, r3
 800d30c:	7afb      	ldrb	r3, [r7, #11]
 800d30e:	4293      	cmp	r3, r2
 800d310:	d001      	beq.n	800d316 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d312:	2301      	movs	r3, #1
 800d314:	e099      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d316:	2100      	movs	r1, #0
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f7ff fd81 	bl	800ce20 <SDIO_GetResponse>
 800d31e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	4b4e      	ldr	r3, [pc, #312]	@ (800d45c <SDMMC_GetCmdResp1+0x1d8>)
 800d324:	4013      	ands	r3, r2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e08d      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	da02      	bge.n	800d33a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d334:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d338:	e087      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d344:	2340      	movs	r3, #64	@ 0x40
 800d346:	e080      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d352:	2380      	movs	r3, #128	@ 0x80
 800d354:	e079      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d364:	e071      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d374:	e069      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d384:	e061      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d390:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d394:	e059      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3a4:	e051      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3b4:	e049      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d3c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d3c4:	e041      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d3d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3d4:	e039      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d3e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d3e4:	e031      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d3f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d3f4:	e029      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d400:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d404:	e021      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d410:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d414:	e019      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d420:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d424:	e011      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d002      	beq.n	800d436 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d430:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d434:	e009      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f003 0308 	and.w	r3, r3, #8
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d440:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d444:	e001      	b.n	800d44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20000010 	.word	0x20000010
 800d458:	10624dd3 	.word	0x10624dd3
 800d45c:	fdffe008 	.word	0xfdffe008

0800d460 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d468:	4b1f      	ldr	r3, [pc, #124]	@ (800d4e8 <SDMMC_GetCmdResp2+0x88>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a1f      	ldr	r2, [pc, #124]	@ (800d4ec <SDMMC_GetCmdResp2+0x8c>)
 800d46e:	fba2 2303 	umull	r2, r3, r2, r3
 800d472:	0a5b      	lsrs	r3, r3, #9
 800d474:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d478:	fb02 f303 	mul.w	r3, r2, r3
 800d47c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	1e5a      	subs	r2, r3, #1
 800d482:	60fa      	str	r2, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d488:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d48c:	e026      	b.n	800d4dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0ef      	beq.n	800d47e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1ea      	bne.n	800d47e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4ba:	2304      	movs	r3, #4
 800d4bc:	e00e      	b.n	800d4dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d004      	beq.n	800d4d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e003      	b.n	800d4dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	22c5      	movs	r2, #197	@ 0xc5
 800d4d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20000010 	.word	0x20000010
 800d4ec:	10624dd3 	.word	0x10624dd3

0800d4f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800d564 <SDMMC_GetCmdResp3+0x74>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a1a      	ldr	r2, [pc, #104]	@ (800d568 <SDMMC_GetCmdResp3+0x78>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	0a5b      	lsrs	r3, r3, #9
 800d504:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	1e5a      	subs	r2, r3, #1
 800d512:	60fa      	str	r2, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d51c:	e01b      	b.n	800d556 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d522:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0ef      	beq.n	800d50e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1ea      	bne.n	800d50e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d53c:	f003 0304 	and.w	r3, r3, #4
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2204      	movs	r2, #4
 800d548:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d54a:	2304      	movs	r3, #4
 800d54c:	e003      	b.n	800d556 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	22c5      	movs	r2, #197	@ 0xc5
 800d552:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	20000010 	.word	0x20000010
 800d568:	10624dd3 	.word	0x10624dd3

0800d56c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	460b      	mov	r3, r1
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d57a:	4b35      	ldr	r3, [pc, #212]	@ (800d650 <SDMMC_GetCmdResp6+0xe4>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a35      	ldr	r2, [pc, #212]	@ (800d654 <SDMMC_GetCmdResp6+0xe8>)
 800d580:	fba2 2303 	umull	r2, r3, r2, r3
 800d584:	0a5b      	lsrs	r3, r3, #9
 800d586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d58a:	fb02 f303 	mul.w	r3, r2, r3
 800d58e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	1e5a      	subs	r2, r3, #1
 800d594:	61fa      	str	r2, [r7, #28]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d59a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d59e:	e052      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d0ef      	beq.n	800d590 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1ea      	bne.n	800d590 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5be:	f003 0304 	and.w	r3, r3, #4
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d004      	beq.n	800d5d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2204      	movs	r2, #4
 800d5ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5cc:	2304      	movs	r3, #4
 800d5ce:	e03a      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e02f      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7ff fc0d 	bl	800ce06 <SDIO_GetCommandResponse>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d001      	beq.n	800d5fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e025      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	22c5      	movs	r2, #197	@ 0xc5
 800d5fe:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d600:	2100      	movs	r1, #0
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f7ff fc0c 	bl	800ce20 <SDIO_GetResponse>
 800d608:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	0c1b      	lsrs	r3, r3, #16
 800d618:	b29a      	uxth	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d61e:	2300      	movs	r3, #0
 800d620:	e011      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d62c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d630:	e009      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d63c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d640:	e001      	b.n	800d646 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d646:	4618      	mov	r0, r3
 800d648:	3720      	adds	r7, #32
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20000010 	.word	0x20000010
 800d654:	10624dd3 	.word	0x10624dd3

0800d658 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d660:	4b22      	ldr	r3, [pc, #136]	@ (800d6ec <SDMMC_GetCmdResp7+0x94>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a22      	ldr	r2, [pc, #136]	@ (800d6f0 <SDMMC_GetCmdResp7+0x98>)
 800d666:	fba2 2303 	umull	r2, r3, r2, r3
 800d66a:	0a5b      	lsrs	r3, r3, #9
 800d66c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d670:	fb02 f303 	mul.w	r3, r2, r3
 800d674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	60fa      	str	r2, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d102      	bne.n	800d686 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d680:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d684:	e02c      	b.n	800d6e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d68a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0ef      	beq.n	800d676 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1ea      	bne.n	800d676 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6a4:	f003 0304 	and.w	r3, r3, #4
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2204      	movs	r2, #4
 800d6b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6b2:	2304      	movs	r3, #4
 800d6b4:	e014      	b.n	800d6e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d004      	beq.n	800d6cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e009      	b.n	800d6e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2240      	movs	r2, #64	@ 0x40
 800d6dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d6de:	2300      	movs	r3, #0
  
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	20000010 	.word	0x20000010
 800d6f0:	10624dd3 	.word	0x10624dd3

0800d6f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6fc:	4b11      	ldr	r3, [pc, #68]	@ (800d744 <SDMMC_GetCmdError+0x50>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a11      	ldr	r2, [pc, #68]	@ (800d748 <SDMMC_GetCmdError+0x54>)
 800d702:	fba2 2303 	umull	r2, r3, r2, r3
 800d706:	0a5b      	lsrs	r3, r3, #9
 800d708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d70c:	fb02 f303 	mul.w	r3, r2, r3
 800d710:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	1e5a      	subs	r2, r3, #1
 800d716:	60fa      	str	r2, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d102      	bne.n	800d722 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d71c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d720:	e009      	b.n	800d736 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d0f1      	beq.n	800d712 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	22c5      	movs	r2, #197	@ 0xc5
 800d732:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	20000010 	.word	0x20000010
 800d748:	10624dd3 	.word	0x10624dd3

0800d74c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d74c:	b084      	sub	sp, #16
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	f107 001c 	add.w	r0, r7, #28
 800d75a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	2b01      	cmp	r3, #1
 800d762:	d122      	bne.n	800d7aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d768:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d105      	bne.n	800d79e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 fc3e 	bl	800f020 <USB_CoreReset>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73fb      	strb	r3, [r7, #15]
 800d7a8:	e01a      	b.n	800d7e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 fc32 	bl	800f020 <USB_CoreReset>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d106      	bne.n	800d7d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	639a      	str	r2, [r3, #56]	@ 0x38
 800d7d2:	e005      	b.n	800d7e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d10b      	bne.n	800d7fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f043 0206 	orr.w	r2, r3, #6
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f043 0220 	orr.w	r2, r3, #32
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d80a:	b004      	add	sp, #16
 800d80c:	4770      	bx	lr
	...

0800d810 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	2b02      	cmp	r3, #2
 800d822:	d165      	bne.n	800d8f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4a41      	ldr	r2, [pc, #260]	@ (800d92c <USB_SetTurnaroundTime+0x11c>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d906      	bls.n	800d83a <USB_SetTurnaroundTime+0x2a>
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	4a40      	ldr	r2, [pc, #256]	@ (800d930 <USB_SetTurnaroundTime+0x120>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d202      	bcs.n	800d83a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d834:	230f      	movs	r3, #15
 800d836:	617b      	str	r3, [r7, #20]
 800d838:	e062      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	4a3c      	ldr	r2, [pc, #240]	@ (800d930 <USB_SetTurnaroundTime+0x120>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d306      	bcc.n	800d850 <USB_SetTurnaroundTime+0x40>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	4a3b      	ldr	r2, [pc, #236]	@ (800d934 <USB_SetTurnaroundTime+0x124>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d202      	bcs.n	800d850 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d84a:	230e      	movs	r3, #14
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	e057      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	4a38      	ldr	r2, [pc, #224]	@ (800d934 <USB_SetTurnaroundTime+0x124>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d306      	bcc.n	800d866 <USB_SetTurnaroundTime+0x56>
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	4a37      	ldr	r2, [pc, #220]	@ (800d938 <USB_SetTurnaroundTime+0x128>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d202      	bcs.n	800d866 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d860:	230d      	movs	r3, #13
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	e04c      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	4a33      	ldr	r2, [pc, #204]	@ (800d938 <USB_SetTurnaroundTime+0x128>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d306      	bcc.n	800d87c <USB_SetTurnaroundTime+0x6c>
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	4a32      	ldr	r2, [pc, #200]	@ (800d93c <USB_SetTurnaroundTime+0x12c>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d802      	bhi.n	800d87c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d876:	230c      	movs	r3, #12
 800d878:	617b      	str	r3, [r7, #20]
 800d87a:	e041      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	4a2f      	ldr	r2, [pc, #188]	@ (800d93c <USB_SetTurnaroundTime+0x12c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d906      	bls.n	800d892 <USB_SetTurnaroundTime+0x82>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	4a2e      	ldr	r2, [pc, #184]	@ (800d940 <USB_SetTurnaroundTime+0x130>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d802      	bhi.n	800d892 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d88c:	230b      	movs	r3, #11
 800d88e:	617b      	str	r3, [r7, #20]
 800d890:	e036      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	4a2a      	ldr	r2, [pc, #168]	@ (800d940 <USB_SetTurnaroundTime+0x130>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d906      	bls.n	800d8a8 <USB_SetTurnaroundTime+0x98>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	4a29      	ldr	r2, [pc, #164]	@ (800d944 <USB_SetTurnaroundTime+0x134>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d802      	bhi.n	800d8a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	e02b      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	4a26      	ldr	r2, [pc, #152]	@ (800d944 <USB_SetTurnaroundTime+0x134>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d906      	bls.n	800d8be <USB_SetTurnaroundTime+0xae>
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	4a25      	ldr	r2, [pc, #148]	@ (800d948 <USB_SetTurnaroundTime+0x138>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d202      	bcs.n	800d8be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d8b8:	2309      	movs	r3, #9
 800d8ba:	617b      	str	r3, [r7, #20]
 800d8bc:	e020      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	4a21      	ldr	r2, [pc, #132]	@ (800d948 <USB_SetTurnaroundTime+0x138>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d306      	bcc.n	800d8d4 <USB_SetTurnaroundTime+0xc4>
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	4a20      	ldr	r2, [pc, #128]	@ (800d94c <USB_SetTurnaroundTime+0x13c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d802      	bhi.n	800d8d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d8ce:	2308      	movs	r3, #8
 800d8d0:	617b      	str	r3, [r7, #20]
 800d8d2:	e015      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d94c <USB_SetTurnaroundTime+0x13c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d906      	bls.n	800d8ea <USB_SetTurnaroundTime+0xda>
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	4a1c      	ldr	r2, [pc, #112]	@ (800d950 <USB_SetTurnaroundTime+0x140>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d202      	bcs.n	800d8ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d8e4:	2307      	movs	r3, #7
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	e00a      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d8ea:	2306      	movs	r3, #6
 800d8ec:	617b      	str	r3, [r7, #20]
 800d8ee:	e007      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d8f0:	79fb      	ldrb	r3, [r7, #7]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d102      	bne.n	800d8fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d8f6:	2309      	movs	r3, #9
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	e001      	b.n	800d900 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d8fc:	2309      	movs	r3, #9
 800d8fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	029b      	lsls	r3, r3, #10
 800d914:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d918:	431a      	orrs	r2, r3
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	371c      	adds	r7, #28
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	00d8acbf 	.word	0x00d8acbf
 800d930:	00e4e1c0 	.word	0x00e4e1c0
 800d934:	00f42400 	.word	0x00f42400
 800d938:	01067380 	.word	0x01067380
 800d93c:	011a499f 	.word	0x011a499f
 800d940:	01312cff 	.word	0x01312cff
 800d944:	014ca43f 	.word	0x014ca43f
 800d948:	016e3600 	.word	0x016e3600
 800d94c:	01a6ab1f 	.word	0x01a6ab1f
 800d950:	01e84800 	.word	0x01e84800

0800d954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	f043 0201 	orr.w	r2, r3, #1
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	f023 0201 	bic.w	r2, r3, #1
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d115      	bne.n	800d9e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	f7f6 f9bc 	bl	8003d44 <HAL_Delay>
      ms++;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 fa94 	bl	800ef00 <USB_GetMode>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d01e      	beq.n	800da1c <USB_SetCurrentMode+0x84>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b31      	cmp	r3, #49	@ 0x31
 800d9e2:	d9f0      	bls.n	800d9c6 <USB_SetCurrentMode+0x2e>
 800d9e4:	e01a      	b.n	800da1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9e6:	78fb      	ldrb	r3, [r7, #3]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d115      	bne.n	800da18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	f7f6 f9a3 	bl	8003d44 <HAL_Delay>
      ms++;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3301      	adds	r3, #1
 800da02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f001 fa7b 	bl	800ef00 <USB_GetMode>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d005      	beq.n	800da1c <USB_SetCurrentMode+0x84>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2b31      	cmp	r3, #49	@ 0x31
 800da14:	d9f0      	bls.n	800d9f8 <USB_SetCurrentMode+0x60>
 800da16:	e001      	b.n	800da1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e005      	b.n	800da28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b32      	cmp	r3, #50	@ 0x32
 800da20:	d101      	bne.n	800da26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e000      	b.n	800da28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da30:	b084      	sub	sp, #16
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800da3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da4a:	2300      	movs	r3, #0
 800da4c:	613b      	str	r3, [r7, #16]
 800da4e:	e009      	b.n	800da64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	3340      	adds	r3, #64	@ 0x40
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	2200      	movs	r2, #0
 800da5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	3301      	adds	r3, #1
 800da62:	613b      	str	r3, [r7, #16]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b0e      	cmp	r3, #14
 800da68:	d9f2      	bls.n	800da50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800da6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d11c      	bne.n	800daaa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da7e:	f043 0302 	orr.w	r3, r3, #2
 800da82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da94:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	639a      	str	r2, [r3, #56]	@ 0x38
 800daa8:	e00b      	b.n	800dac2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dac8:	461a      	mov	r2, r3
 800daca:	2300      	movs	r3, #0
 800dacc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dad4:	4619      	mov	r1, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dadc:	461a      	mov	r2, r3
 800dade:	680b      	ldr	r3, [r1, #0]
 800dae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d10c      	bne.n	800db02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daea:	2b00      	cmp	r3, #0
 800daec:	d104      	bne.n	800daf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800daee:	2100      	movs	r1, #0
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f965 	bl	800ddc0 <USB_SetDevSpeed>
 800daf6:	e008      	b.n	800db0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800daf8:	2101      	movs	r1, #1
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f960 	bl	800ddc0 <USB_SetDevSpeed>
 800db00:	e003      	b.n	800db0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800db02:	2103      	movs	r1, #3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f95b 	bl	800ddc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db0a:	2110      	movs	r1, #16
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f8f3 	bl	800dcf8 <USB_FlushTxFifo>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 f91f 	bl	800dd60 <USB_FlushRxFifo>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db32:	461a      	mov	r2, r3
 800db34:	2300      	movs	r3, #0
 800db36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db3e:	461a      	mov	r2, r3
 800db40:	2300      	movs	r3, #0
 800db42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db4a:	461a      	mov	r2, r3
 800db4c:	2300      	movs	r3, #0
 800db4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db50:	2300      	movs	r3, #0
 800db52:	613b      	str	r3, [r7, #16]
 800db54:	e043      	b.n	800dbde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	4413      	add	r3, r2
 800db5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db6c:	d118      	bne.n	800dba0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db80:	461a      	mov	r2, r3
 800db82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	e013      	b.n	800dbb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	015a      	lsls	r2, r3, #5
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	4413      	add	r3, r2
 800db92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db96:	461a      	mov	r2, r3
 800db98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	e008      	b.n	800dbb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbac:	461a      	mov	r2, r3
 800dbae:	2300      	movs	r3, #0
 800dbb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	015a      	lsls	r2, r3, #5
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	4413      	add	r3, r2
 800dbcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	613b      	str	r3, [r7, #16]
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d3b7      	bcc.n	800db56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	613b      	str	r3, [r7, #16]
 800dbea:	e043      	b.n	800dc74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc02:	d118      	bne.n	800dc36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	015a      	lsls	r2, r3, #5
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4413      	add	r3, r2
 800dc12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc16:	461a      	mov	r2, r3
 800dc18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc1c:	6013      	str	r3, [r2, #0]
 800dc1e:	e013      	b.n	800dc48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	e008      	b.n	800dc48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	015a      	lsls	r2, r3, #5
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc42:	461a      	mov	r2, r3
 800dc44:	2300      	movs	r3, #0
 800dc46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	015a      	lsls	r2, r3, #5
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	4413      	add	r3, r2
 800dc50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc54:	461a      	mov	r2, r3
 800dc56:	2300      	movs	r3, #0
 800dc58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	015a      	lsls	r2, r3, #5
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	4413      	add	r3, r2
 800dc62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc66:	461a      	mov	r2, r3
 800dc68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dc6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	3301      	adds	r3, #1
 800dc72:	613b      	str	r3, [r7, #16]
 800dc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d3b7      	bcc.n	800dbec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dc9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d105      	bne.n	800dcb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	f043 0210 	orr.w	r2, r3, #16
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	699a      	ldr	r2, [r3, #24]
 800dcb4:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf4 <USB_DevInit+0x2c4>)
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dcbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	f043 0208 	orr.w	r2, r3, #8
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dcce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d107      	bne.n	800dce4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dcdc:	f043 0304 	orr.w	r3, r3, #4
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcf0:	b004      	add	sp, #16
 800dcf2:	4770      	bx	lr
 800dcf4:	803c3800 	.word	0x803c3800

0800dcf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4a13      	ldr	r2, [pc, #76]	@ (800dd5c <USB_FlushTxFifo+0x64>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d901      	bls.n	800dd18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dd14:	2303      	movs	r3, #3
 800dd16:	e01b      	b.n	800dd50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	daf2      	bge.n	800dd06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dd20:	2300      	movs	r3, #0
 800dd22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	019b      	lsls	r3, r3, #6
 800dd28:	f043 0220 	orr.w	r2, r3, #32
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3301      	adds	r3, #1
 800dd34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	4a08      	ldr	r2, [pc, #32]	@ (800dd5c <USB_FlushTxFifo+0x64>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d901      	bls.n	800dd42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e006      	b.n	800dd50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	f003 0320 	and.w	r3, r3, #32
 800dd4a:	2b20      	cmp	r3, #32
 800dd4c:	d0f0      	beq.n	800dd30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	00030d40 	.word	0x00030d40

0800dd60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4a11      	ldr	r2, [pc, #68]	@ (800ddbc <USB_FlushRxFifo+0x5c>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d901      	bls.n	800dd7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	e018      	b.n	800ddb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	daf2      	bge.n	800dd6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	3301      	adds	r3, #1
 800dd94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4a08      	ldr	r2, [pc, #32]	@ (800ddbc <USB_FlushRxFifo+0x5c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d901      	bls.n	800dda2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	e006      	b.n	800ddb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	f003 0310 	and.w	r3, r3, #16
 800ddaa:	2b10      	cmp	r3, #16
 800ddac:	d0f0      	beq.n	800dd90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	00030d40 	.word	0x00030d40

0800ddc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	68f9      	ldr	r1, [r7, #12]
 800dddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dde0:	4313      	orrs	r3, r2
 800dde2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b087      	sub	sp, #28
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800de12:	2300      	movs	r3, #0
 800de14:	75fb      	strb	r3, [r7, #23]
 800de16:	e00a      	b.n	800de2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d002      	beq.n	800de24 <USB_GetDevSpeed+0x32>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b06      	cmp	r3, #6
 800de22:	d102      	bne.n	800de2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800de24:	2302      	movs	r3, #2
 800de26:	75fb      	strb	r3, [r7, #23]
 800de28:	e001      	b.n	800de2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800de2a:	230f      	movs	r3, #15
 800de2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de30:	4618      	mov	r0, r3
 800de32:	371c      	adds	r7, #28
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d13a      	bne.n	800dece <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	2101      	movs	r1, #1
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	b29b      	uxth	r3, r3
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de76:	4313      	orrs	r3, r2
 800de78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	4413      	add	r3, r2
 800de82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d155      	bne.n	800df3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	791b      	ldrb	r3, [r3, #4]
 800deaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800deac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	059b      	lsls	r3, r3, #22
 800deb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800deb4:	4313      	orrs	r3, r2
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	0151      	lsls	r1, r2, #5
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	440a      	add	r2, r1
 800debe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	e036      	b.n	800df3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ded4:	69da      	ldr	r2, [r3, #28]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	2101      	movs	r1, #1
 800dee0:	fa01 f303 	lsl.w	r3, r1, r3
 800dee4:	041b      	lsls	r3, r3, #16
 800dee6:	68f9      	ldr	r1, [r7, #12]
 800dee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800deec:	4313      	orrs	r3, r2
 800deee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	015a      	lsls	r2, r3, #5
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4413      	add	r3, r2
 800def8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df02:	2b00      	cmp	r3, #0
 800df04:	d11a      	bne.n	800df3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	791b      	ldrb	r3, [r3, #4]
 800df20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df22:	430b      	orrs	r3, r1
 800df24:	4313      	orrs	r3, r2
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	0151      	lsls	r1, r2, #5
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	440a      	add	r2, r1
 800df2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
	...

0800df4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	785b      	ldrb	r3, [r3, #1]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d161      	bne.n	800e02c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df7e:	d11f      	bne.n	800dfc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	0151      	lsls	r1, r2, #5
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	440a      	add	r2, r1
 800df96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	015a      	lsls	r2, r3, #5
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	0151      	lsls	r1, r2, #5
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	440a      	add	r2, r1
 800dfb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dfbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f003 030f 	and.w	r3, r3, #15
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	43db      	mvns	r3, r3
 800dfda:	68f9      	ldr	r1, [r7, #12]
 800dfdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	2101      	movs	r1, #1
 800dff6:	fa01 f303 	lsl.w	r3, r1, r3
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	43db      	mvns	r3, r3
 800dffe:	68f9      	ldr	r1, [r7, #12]
 800e000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e004:	4013      	ands	r3, r2
 800e006:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	0159      	lsls	r1, r3, #5
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	440b      	add	r3, r1
 800e01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e022:	4619      	mov	r1, r3
 800e024:	4b35      	ldr	r3, [pc, #212]	@ (800e0fc <USB_DeactivateEndpoint+0x1b0>)
 800e026:	4013      	ands	r3, r2
 800e028:	600b      	str	r3, [r1, #0]
 800e02a:	e060      	b.n	800e0ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	015a      	lsls	r2, r3, #5
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4413      	add	r3, r2
 800e034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e03e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e042:	d11f      	bne.n	800e084 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	0151      	lsls	r1, r2, #5
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	440a      	add	r2, r1
 800e05a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e05e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e062:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	015a      	lsls	r2, r3, #5
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	0151      	lsls	r1, r2, #5
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	440a      	add	r2, r1
 800e07a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e07e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e08a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	f003 030f 	and.w	r3, r3, #15
 800e094:	2101      	movs	r1, #1
 800e096:	fa01 f303 	lsl.w	r3, r1, r3
 800e09a:	041b      	lsls	r3, r3, #16
 800e09c:	43db      	mvns	r3, r3
 800e09e:	68f9      	ldr	r1, [r7, #12]
 800e0a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ae:	69da      	ldr	r2, [r3, #28]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 030f 	and.w	r3, r3, #15
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e0be:	041b      	lsls	r3, r3, #16
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	68f9      	ldr	r1, [r7, #12]
 800e0c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	0159      	lsls	r1, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	440b      	add	r3, r1
 800e0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4b05      	ldr	r3, [pc, #20]	@ (800e100 <USB_DeactivateEndpoint+0x1b4>)
 800e0ea:	4013      	ands	r3, r2
 800e0ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	ec337800 	.word	0xec337800
 800e100:	eff37800 	.word	0xeff37800

0800e104 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08a      	sub	sp, #40	@ 0x28
 800e108:	af02      	add	r7, sp, #8
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	4613      	mov	r3, r2
 800e110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	2b01      	cmp	r3, #1
 800e122:	f040 815c 	bne.w	800e3de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d132      	bne.n	800e194 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	015a      	lsls	r2, r3, #5
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	4413      	add	r3, r2
 800e136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	69ba      	ldr	r2, [r7, #24]
 800e13e:	0151      	lsls	r1, r2, #5
 800e140:	69fa      	ldr	r2, [r7, #28]
 800e142:	440a      	add	r2, r1
 800e144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e148:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e14c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	015a      	lsls	r2, r3, #5
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	4413      	add	r3, r2
 800e15a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	0151      	lsls	r1, r2, #5
 800e164:	69fa      	ldr	r2, [r7, #28]
 800e166:	440a      	add	r2, r1
 800e168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e16c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	015a      	lsls	r2, r3, #5
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	4413      	add	r3, r2
 800e17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	69ba      	ldr	r2, [r7, #24]
 800e182:	0151      	lsls	r1, r2, #5
 800e184:	69fa      	ldr	r2, [r7, #28]
 800e186:	440a      	add	r2, r1
 800e188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e18c:	0cdb      	lsrs	r3, r3, #19
 800e18e:	04db      	lsls	r3, r3, #19
 800e190:	6113      	str	r3, [r2, #16]
 800e192:	e074      	b.n	800e27e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	015a      	lsls	r2, r3, #5
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	4413      	add	r3, r2
 800e19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	69ba      	ldr	r2, [r7, #24]
 800e1a4:	0151      	lsls	r1, r2, #5
 800e1a6:	69fa      	ldr	r2, [r7, #28]
 800e1a8:	440a      	add	r2, r1
 800e1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1ae:	0cdb      	lsrs	r3, r3, #19
 800e1b0:	04db      	lsls	r3, r3, #19
 800e1b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	015a      	lsls	r2, r3, #5
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	69ba      	ldr	r2, [r7, #24]
 800e1c4:	0151      	lsls	r1, r2, #5
 800e1c6:	69fa      	ldr	r2, [r7, #28]
 800e1c8:	440a      	add	r2, r1
 800e1ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e1d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e1d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	6999      	ldr	r1, [r3, #24]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	440b      	add	r3, r1
 800e1f0:	1e59      	subs	r1, r3, #1
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e1fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e1fc:	4b9d      	ldr	r3, [pc, #628]	@ (800e474 <USB_EPStartXfer+0x370>)
 800e1fe:	400b      	ands	r3, r1
 800e200:	69b9      	ldr	r1, [r7, #24]
 800e202:	0148      	lsls	r0, r1, #5
 800e204:	69f9      	ldr	r1, [r7, #28]
 800e206:	4401      	add	r1, r0
 800e208:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e20c:	4313      	orrs	r3, r2
 800e20e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	015a      	lsls	r2, r3, #5
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	4413      	add	r3, r2
 800e218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e21c:	691a      	ldr	r2, [r3, #16]
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e226:	69b9      	ldr	r1, [r7, #24]
 800e228:	0148      	lsls	r0, r1, #5
 800e22a:	69f9      	ldr	r1, [r7, #28]
 800e22c:	4401      	add	r1, r0
 800e22e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e232:	4313      	orrs	r3, r2
 800e234:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	791b      	ldrb	r3, [r3, #4]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d11f      	bne.n	800e27e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	4413      	add	r3, r2
 800e246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	69ba      	ldr	r2, [r7, #24]
 800e24e:	0151      	lsls	r1, r2, #5
 800e250:	69fa      	ldr	r2, [r7, #28]
 800e252:	440a      	add	r2, r1
 800e254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e258:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e25c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	015a      	lsls	r2, r3, #5
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	4413      	add	r3, r2
 800e266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	69ba      	ldr	r2, [r7, #24]
 800e26e:	0151      	lsls	r1, r2, #5
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	440a      	add	r2, r1
 800e274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e278:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e27c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e27e:	79fb      	ldrb	r3, [r7, #7]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d14b      	bne.n	800e31c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d009      	beq.n	800e2a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	4413      	add	r3, r2
 800e294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e298:	461a      	mov	r2, r3
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	791b      	ldrb	r3, [r3, #4]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d128      	bne.n	800e2fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d110      	bne.n	800e2da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	0151      	lsls	r1, r2, #5
 800e2ca:	69fa      	ldr	r2, [r7, #28]
 800e2cc:	440a      	add	r2, r1
 800e2ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e00f      	b.n	800e2fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	0151      	lsls	r1, r2, #5
 800e2ec:	69fa      	ldr	r2, [r7, #28]
 800e2ee:	440a      	add	r2, r1
 800e2f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e2f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	015a      	lsls	r2, r3, #5
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	4413      	add	r3, r2
 800e302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	69ba      	ldr	r2, [r7, #24]
 800e30a:	0151      	lsls	r1, r2, #5
 800e30c:	69fa      	ldr	r2, [r7, #28]
 800e30e:	440a      	add	r2, r1
 800e310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e314:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e318:	6013      	str	r3, [r2, #0]
 800e31a:	e133      	b.n	800e584 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69ba      	ldr	r2, [r7, #24]
 800e32c:	0151      	lsls	r1, r2, #5
 800e32e:	69fa      	ldr	r2, [r7, #28]
 800e330:	440a      	add	r2, r1
 800e332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e336:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e33a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	791b      	ldrb	r3, [r3, #4]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d015      	beq.n	800e370 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f000 811b 	beq.w	800e584 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	f003 030f 	and.w	r3, r3, #15
 800e35e:	2101      	movs	r1, #1
 800e360:	fa01 f303 	lsl.w	r3, r1, r3
 800e364:	69f9      	ldr	r1, [r7, #28]
 800e366:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e36a:	4313      	orrs	r3, r2
 800e36c:	634b      	str	r3, [r1, #52]	@ 0x34
 800e36e:	e109      	b.n	800e584 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d110      	bne.n	800e3a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	4413      	add	r3, r2
 800e388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69ba      	ldr	r2, [r7, #24]
 800e390:	0151      	lsls	r1, r2, #5
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	440a      	add	r2, r1
 800e396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e39a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	e00f      	b.n	800e3c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	015a      	lsls	r2, r3, #5
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	69ba      	ldr	r2, [r7, #24]
 800e3b2:	0151      	lsls	r1, r2, #5
 800e3b4:	69fa      	ldr	r2, [r7, #28]
 800e3b6:	440a      	add	r2, r1
 800e3b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6919      	ldr	r1, [r3, #16]
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	b298      	uxth	r0, r3
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 fade 	bl	800e998 <USB_WritePacket>
 800e3dc:	e0d2      	b.n	800e584 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	69ba      	ldr	r2, [r7, #24]
 800e3ee:	0151      	lsls	r1, r2, #5
 800e3f0:	69fa      	ldr	r2, [r7, #28]
 800e3f2:	440a      	add	r2, r1
 800e3f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3f8:	0cdb      	lsrs	r3, r3, #19
 800e3fa:	04db      	lsls	r3, r3, #19
 800e3fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	4413      	add	r3, r2
 800e406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	69ba      	ldr	r2, [r7, #24]
 800e40e:	0151      	lsls	r1, r2, #5
 800e410:	69fa      	ldr	r2, [r7, #28]
 800e412:	440a      	add	r2, r1
 800e414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e418:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e41c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e420:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d126      	bne.n	800e478 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	4413      	add	r3, r2
 800e432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e436:	691a      	ldr	r2, [r3, #16]
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e440:	69b9      	ldr	r1, [r7, #24]
 800e442:	0148      	lsls	r0, r1, #5
 800e444:	69f9      	ldr	r1, [r7, #28]
 800e446:	4401      	add	r1, r0
 800e448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e44c:	4313      	orrs	r3, r2
 800e44e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	015a      	lsls	r2, r3, #5
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	4413      	add	r3, r2
 800e458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	440a      	add	r2, r1
 800e466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e46a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e46e:	6113      	str	r3, [r2, #16]
 800e470:	e03a      	b.n	800e4e8 <USB_EPStartXfer+0x3e4>
 800e472:	bf00      	nop
 800e474:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	699a      	ldr	r2, [r3, #24]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	4413      	add	r3, r2
 800e482:	1e5a      	subs	r2, r3, #1
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	fbb2 f3f3 	udiv	r3, r2, r3
 800e48c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	8afa      	ldrh	r2, [r7, #22]
 800e494:	fb03 f202 	mul.w	r2, r3, r2
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4a8:	691a      	ldr	r2, [r3, #16]
 800e4aa:	8afb      	ldrh	r3, [r7, #22]
 800e4ac:	04d9      	lsls	r1, r3, #19
 800e4ae:	4b38      	ldr	r3, [pc, #224]	@ (800e590 <USB_EPStartXfer+0x48c>)
 800e4b0:	400b      	ands	r3, r1
 800e4b2:	69b9      	ldr	r1, [r7, #24]
 800e4b4:	0148      	lsls	r0, r1, #5
 800e4b6:	69f9      	ldr	r1, [r7, #28]
 800e4b8:	4401      	add	r1, r0
 800e4ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4ce:	691a      	ldr	r2, [r3, #16]
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4d8:	69b9      	ldr	r1, [r7, #24]
 800e4da:	0148      	lsls	r0, r1, #5
 800e4dc:	69f9      	ldr	r1, [r7, #28]
 800e4de:	4401      	add	r1, r0
 800e4e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d10d      	bne.n	800e50a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d009      	beq.n	800e50a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	6919      	ldr	r1, [r3, #16]
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	4413      	add	r3, r2
 800e502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e506:	460a      	mov	r2, r1
 800e508:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	791b      	ldrb	r3, [r3, #4]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d128      	bne.n	800e564 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d110      	bne.n	800e544 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	69ba      	ldr	r2, [r7, #24]
 800e532:	0151      	lsls	r1, r2, #5
 800e534:	69fa      	ldr	r2, [r7, #28]
 800e536:	440a      	add	r2, r1
 800e538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e53c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	e00f      	b.n	800e564 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	0151      	lsls	r1, r2, #5
 800e556:	69fa      	ldr	r2, [r7, #28]
 800e558:	440a      	add	r2, r1
 800e55a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e55e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e562:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	015a      	lsls	r2, r3, #5
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	4413      	add	r3, r2
 800e56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	69ba      	ldr	r2, [r7, #24]
 800e574:	0151      	lsls	r1, r2, #5
 800e576:	69fa      	ldr	r2, [r7, #28]
 800e578:	440a      	add	r2, r1
 800e57a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e57e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3720      	adds	r7, #32
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	1ff80000 	.word	0x1ff80000

0800e594 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e594:	b480      	push	{r7}
 800e596:	b087      	sub	sp, #28
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	785b      	ldrb	r3, [r3, #1]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	f040 80ce 	bne.w	800e752 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d132      	bne.n	800e624 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	0151      	lsls	r1, r2, #5
 800e5d0:	697a      	ldr	r2, [r7, #20]
 800e5d2:	440a      	add	r2, r1
 800e5d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e5dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e5e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	015a      	lsls	r2, r3, #5
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	0151      	lsls	r1, r2, #5
 800e5f4:	697a      	ldr	r2, [r7, #20]
 800e5f6:	440a      	add	r2, r1
 800e5f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	015a      	lsls	r2, r3, #5
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	4413      	add	r3, r2
 800e60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	0151      	lsls	r1, r2, #5
 800e614:	697a      	ldr	r2, [r7, #20]
 800e616:	440a      	add	r2, r1
 800e618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e61c:	0cdb      	lsrs	r3, r3, #19
 800e61e:	04db      	lsls	r3, r3, #19
 800e620:	6113      	str	r3, [r2, #16]
 800e622:	e04e      	b.n	800e6c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	015a      	lsls	r2, r3, #5
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	4413      	add	r3, r2
 800e62c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	0151      	lsls	r1, r2, #5
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	440a      	add	r2, r1
 800e63a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e63e:	0cdb      	lsrs	r3, r3, #19
 800e640:	04db      	lsls	r3, r3, #19
 800e642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	0151      	lsls	r1, r2, #5
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	440a      	add	r2, r1
 800e65a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e65e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e662:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e666:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	699a      	ldr	r2, [r3, #24]
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	429a      	cmp	r2, r3
 800e672:	d903      	bls.n	800e67c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	68da      	ldr	r2, [r3, #12]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	0151      	lsls	r1, r2, #5
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	440a      	add	r2, r1
 800e692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e696:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e69a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6a8:	691a      	ldr	r2, [r3, #16]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	699b      	ldr	r3, [r3, #24]
 800e6ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6b2:	6939      	ldr	r1, [r7, #16]
 800e6b4:	0148      	lsls	r0, r1, #5
 800e6b6:	6979      	ldr	r1, [r7, #20]
 800e6b8:	4401      	add	r1, r0
 800e6ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d11e      	bne.n	800e706 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d009      	beq.n	800e6e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	015a      	lsls	r2, r3, #5
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6dc:	461a      	mov	r2, r3
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	693a      	ldr	r2, [r7, #16]
 800e6f4:	0151      	lsls	r1, r2, #5
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	440a      	add	r2, r1
 800e6fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e702:	6013      	str	r3, [r2, #0]
 800e704:	e097      	b.n	800e836 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	0151      	lsls	r1, r2, #5
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	440a      	add	r2, r1
 800e71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e720:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e724:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f000 8083 	beq.w	800e836 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	f003 030f 	and.w	r3, r3, #15
 800e740:	2101      	movs	r1, #1
 800e742:	fa01 f303 	lsl.w	r3, r1, r3
 800e746:	6979      	ldr	r1, [r7, #20]
 800e748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e74c:	4313      	orrs	r3, r2
 800e74e:	634b      	str	r3, [r1, #52]	@ 0x34
 800e750:	e071      	b.n	800e836 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	0151      	lsls	r1, r2, #5
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	440a      	add	r2, r1
 800e768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e76c:	0cdb      	lsrs	r3, r3, #19
 800e76e:	04db      	lsls	r3, r3, #19
 800e770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	015a      	lsls	r2, r3, #5
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	4413      	add	r3, r2
 800e77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	0151      	lsls	r1, r2, #5
 800e784:	697a      	ldr	r2, [r7, #20]
 800e786:	440a      	add	r2, r1
 800e788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e78c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e790:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e794:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	68da      	ldr	r2, [r3, #12]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	68da      	ldr	r2, [r3, #12]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	015a      	lsls	r2, r3, #5
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	693a      	ldr	r2, [r7, #16]
 800e7be:	0151      	lsls	r1, r2, #5
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	440a      	add	r2, r1
 800e7c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	015a      	lsls	r2, r3, #5
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7da:	691a      	ldr	r2, [r3, #16]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7e4:	6939      	ldr	r1, [r7, #16]
 800e7e6:	0148      	lsls	r0, r1, #5
 800e7e8:	6979      	ldr	r1, [r7, #20]
 800e7ea:	4401      	add	r1, r0
 800e7ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e7f4:	79fb      	ldrb	r3, [r7, #7]
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d10d      	bne.n	800e816 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	6919      	ldr	r1, [r3, #16]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	015a      	lsls	r2, r3, #5
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	4413      	add	r3, r2
 800e80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e812:	460a      	mov	r2, r1
 800e814:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	015a      	lsls	r2, r3, #5
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	4413      	add	r3, r2
 800e81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	0151      	lsls	r1, r2, #5
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	440a      	add	r2, r1
 800e82c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e830:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	371c      	adds	r7, #28
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e84e:	2300      	movs	r3, #0
 800e850:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	785b      	ldrb	r3, [r3, #1]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d14a      	bne.n	800e8f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	015a      	lsls	r2, r3, #5
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	4413      	add	r3, r2
 800e86c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e87a:	f040 8086 	bne.w	800e98a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	015a      	lsls	r2, r3, #5
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	4413      	add	r3, r2
 800e888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	7812      	ldrb	r2, [r2, #0]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	693a      	ldr	r2, [r7, #16]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e89c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e8a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	015a      	lsls	r2, r3, #5
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	7812      	ldrb	r2, [r2, #0]
 800e8b6:	0151      	lsls	r1, r2, #5
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	440a      	add	r2, r1
 800e8bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d902      	bls.n	800e8dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e8da:	e056      	b.n	800e98a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	015a      	lsls	r2, r3, #5
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8f4:	d0e7      	beq.n	800e8c6 <USB_EPStopXfer+0x82>
 800e8f6:	e048      	b.n	800e98a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	015a      	lsls	r2, r3, #5
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	4413      	add	r3, r2
 800e902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e90c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e910:	d13b      	bne.n	800e98a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	7812      	ldrb	r2, [r2, #0]
 800e926:	0151      	lsls	r1, r2, #5
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	440a      	add	r2, r1
 800e92c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e930:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e934:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	015a      	lsls	r2, r3, #5
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	4413      	add	r3, r2
 800e940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	7812      	ldrb	r2, [r2, #0]
 800e94a:	0151      	lsls	r1, r2, #5
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	440a      	add	r2, r1
 800e950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	3301      	adds	r3, #1
 800e95e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e966:	4293      	cmp	r3, r2
 800e968:	d902      	bls.n	800e970 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	75fb      	strb	r3, [r7, #23]
          break;
 800e96e:	e00c      	b.n	800e98a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	015a      	lsls	r2, r3, #5
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	4413      	add	r3, r2
 800e97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e988:	d0e7      	beq.n	800e95a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e998:	b480      	push	{r7}
 800e99a:	b089      	sub	sp, #36	@ 0x24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	71fb      	strb	r3, [r7, #7]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e9b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d123      	bne.n	800ea06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e9be:	88bb      	ldrh	r3, [r7, #4]
 800e9c0:	3303      	adds	r3, #3
 800e9c2:	089b      	lsrs	r3, r3, #2
 800e9c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	61bb      	str	r3, [r7, #24]
 800e9ca:	e018      	b.n	800e9fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e9cc:	79fb      	ldrb	r3, [r7, #7]
 800e9ce:	031a      	lsls	r2, r3, #12
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9d8:	461a      	mov	r2, r3
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	61bb      	str	r3, [r7, #24]
 800e9fe:	69ba      	ldr	r2, [r7, #24]
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d3e2      	bcc.n	800e9cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3724      	adds	r7, #36	@ 0x24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b08b      	sub	sp, #44	@ 0x2c
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ea2a:	88fb      	ldrh	r3, [r7, #6]
 800ea2c:	089b      	lsrs	r3, r3, #2
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ea32:	88fb      	ldrh	r3, [r7, #6]
 800ea34:	f003 0303 	and.w	r3, r3, #3
 800ea38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	623b      	str	r3, [r7, #32]
 800ea3e:	e014      	b.n	800ea6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4e:	3301      	adds	r3, #1
 800ea50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea54:	3301      	adds	r3, #1
 800ea56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea60:	3301      	adds	r3, #1
 800ea62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	3301      	adds	r3, #1
 800ea68:	623b      	str	r3, [r7, #32]
 800ea6a:	6a3a      	ldr	r2, [r7, #32]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d3e6      	bcc.n	800ea40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ea72:	8bfb      	ldrh	r3, [r7, #30]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01e      	beq.n	800eab6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea82:	461a      	mov	r2, r3
 800ea84:	f107 0310 	add.w	r3, r7, #16
 800ea88:	6812      	ldr	r2, [r2, #0]
 800ea8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	fa22 f303 	lsr.w	r3, r2, r3
 800ea98:	b2da      	uxtb	r2, r3
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	701a      	strb	r2, [r3, #0]
      i++;
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	623b      	str	r3, [r7, #32]
      pDest++;
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eaaa:	8bfb      	ldrh	r3, [r7, #30]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eab0:	8bfb      	ldrh	r3, [r7, #30]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1ea      	bne.n	800ea8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	372c      	adds	r7, #44	@ 0x2c
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	785b      	ldrb	r3, [r3, #1]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d12c      	bne.n	800eb3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	4413      	add	r3, r2
 800eae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	db12      	blt.n	800eb18 <USB_EPSetStall+0x54>
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00f      	beq.n	800eb18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	015a      	lsls	r2, r3, #5
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	0151      	lsls	r1, r2, #5
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	440a      	add	r2, r1
 800eb0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	015a      	lsls	r2, r3, #5
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4413      	add	r3, r2
 800eb20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	0151      	lsls	r1, r2, #5
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	440a      	add	r2, r1
 800eb2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	e02b      	b.n	800eb92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	015a      	lsls	r2, r3, #5
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	4413      	add	r3, r2
 800eb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	db12      	blt.n	800eb72 <USB_EPSetStall+0xae>
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00f      	beq.n	800eb72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	015a      	lsls	r2, r3, #5
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	0151      	lsls	r1, r2, #5
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	440a      	add	r2, r1
 800eb68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	015a      	lsls	r2, r3, #5
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	4413      	add	r3, r2
 800eb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	0151      	lsls	r1, r2, #5
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	440a      	add	r2, r1
 800eb88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	785b      	ldrb	r3, [r3, #1]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d128      	bne.n	800ec0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	0151      	lsls	r1, r2, #5
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	440a      	add	r2, r1
 800ebd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	791b      	ldrb	r3, [r3, #4]
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d003      	beq.n	800ebec <USB_EPClearStall+0x4c>
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	791b      	ldrb	r3, [r3, #4]
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d138      	bne.n	800ec5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	015a      	lsls	r2, r3, #5
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	0151      	lsls	r1, r2, #5
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	440a      	add	r2, r1
 800ec02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec0a:	6013      	str	r3, [r2, #0]
 800ec0c:	e027      	b.n	800ec5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	015a      	lsls	r2, r3, #5
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4413      	add	r3, r2
 800ec16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	0151      	lsls	r1, r2, #5
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	440a      	add	r2, r1
 800ec24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	791b      	ldrb	r3, [r3, #4]
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d003      	beq.n	800ec3e <USB_EPClearStall+0x9e>
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	791b      	ldrb	r3, [r3, #4]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d10f      	bne.n	800ec5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	015a      	lsls	r2, r3, #5
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	4413      	add	r3, r2
 800ec46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	0151      	lsls	r1, r2, #5
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	440a      	add	r2, r1
 800ec54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	617b      	str	r3, [r7, #20]
 800ec7c:	e016      	b.n	800ecac <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ec90:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	015a      	lsls	r2, r3, #5
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	4413      	add	r3, r2
 800ec9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800eca4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	617b      	str	r3, [r7, #20]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	2b0e      	cmp	r3, #14
 800ecb0:	d9e5      	bls.n	800ec7e <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecb8:	461a      	mov	r2, r3
 800ecba:	2300      	movs	r3, #0
 800ecbc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7ff f842 	bl	800dd60 <USB_FlushRxFifo>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <USB_StopDevice+0x7e>
  {
    return ret;
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	e00b      	b.n	800ed02 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800ecea:	2110      	movs	r1, #16
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff f803 	bl	800dcf8 <USB_FlushTxFifo>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800ecf6:	7bfb      	ldrb	r3, [r7, #15]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <USB_StopDevice+0x94>
  {
    return ret;
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	e000      	b.n	800ed02 <USB_StopDevice+0x96>
  }

  return ret;
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b085      	sub	sp, #20
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	460b      	mov	r3, r1
 800ed14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed28:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ed2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	78fb      	ldrb	r3, [r7, #3]
 800ed38:	011b      	lsls	r3, r3, #4
 800ed3a:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed44:	4313      	orrs	r3, r2
 800ed46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed84:	f023 0302 	bic.w	r3, r3, #2
 800ed88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3714      	adds	r7, #20
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800edb2:	f023 0303 	bic.w	r3, r3, #3
 800edb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800edc6:	f043 0302 	orr.w	r3, r3, #2
 800edca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3714      	adds	r7, #20
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800edda:	b480      	push	{r7}
 800eddc:	b085      	sub	sp, #20
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	4013      	ands	r3, r2
 800edf0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800edf2:	68fb      	ldr	r3, [r7, #12]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee1c:	69db      	ldr	r3, [r3, #28]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	4013      	ands	r3, r2
 800ee22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	0c1b      	lsrs	r3, r3, #16
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3714      	adds	r7, #20
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	68ba      	ldr	r2, [r7, #8]
 800ee54:	4013      	ands	r3, r2
 800ee56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	b29b      	uxth	r3, r3
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ee78:	78fb      	ldrb	r3, [r7, #3]
 800ee7a:	015a      	lsls	r2, r3, #5
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4413      	add	r3, r2
 800ee80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee8e:	695b      	ldr	r3, [r3, #20]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	4013      	ands	r3, r2
 800ee94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee96:	68bb      	ldr	r3, [r7, #8]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b087      	sub	sp, #28
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eec6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eec8:	78fb      	ldrb	r3, [r7, #3]
 800eeca:	f003 030f 	and.w	r3, r3, #15
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	fa22 f303 	lsr.w	r3, r2, r3
 800eed4:	01db      	lsls	r3, r3, #7
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	4313      	orrs	r3, r2
 800eedc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eede:	78fb      	ldrb	r3, [r7, #3]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	4013      	ands	r3, r2
 800eef0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eef2:	68bb      	ldr	r3, [r7, #8]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	371c      	adds	r7, #28
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	f003 0301 	and.w	r3, r3, #1
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef36:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ef3a:	f023 0307 	bic.w	r3, r3, #7
 800ef3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
	...

0800ef64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	333c      	adds	r3, #60	@ 0x3c
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	4a26      	ldr	r2, [pc, #152]	@ (800f01c <USB_EP0_OutStart+0xb8>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d90a      	bls.n	800ef9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef98:	d101      	bne.n	800ef9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	e037      	b.n	800f00e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efa4:	461a      	mov	r2, r3
 800efa6:	2300      	movs	r3, #0
 800efa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efb0:	691b      	ldr	r3, [r3, #16]
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800efbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	697a      	ldr	r2, [r7, #20]
 800efc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efcc:	f043 0318 	orr.w	r3, r3, #24
 800efd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efe0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800efe4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800efe6:	7afb      	ldrb	r3, [r7, #11]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d10f      	bne.n	800f00c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff2:	461a      	mov	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f006:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f00a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	371c      	adds	r7, #28
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	4f54300a 	.word	0x4f54300a

0800f020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f028:	2300      	movs	r3, #0
 800f02a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3301      	adds	r3, #1
 800f030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4a13      	ldr	r2, [pc, #76]	@ (800f084 <USB_CoreReset+0x64>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d901      	bls.n	800f03e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f03a:	2303      	movs	r3, #3
 800f03c:	e01b      	b.n	800f076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	daf2      	bge.n	800f02c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f046:	2300      	movs	r3, #0
 800f048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	f043 0201 	orr.w	r2, r3, #1
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3301      	adds	r3, #1
 800f05a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	4a09      	ldr	r2, [pc, #36]	@ (800f084 <USB_CoreReset+0x64>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d901      	bls.n	800f068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f064:	2303      	movs	r3, #3
 800f066:	e006      	b.n	800f076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	2b01      	cmp	r3, #1
 800f072:	d0f0      	beq.n	800f056 <USB_CoreReset+0x36>

  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	00030d40 	.word	0x00030d40

0800f088 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a13      	ldr	r2, [pc, #76]	@ (800f0e0 <HAL_UART_RxCpltCallback+0x58>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d11f      	bne.n	800f0d8 <HAL_UART_RxCpltCallback+0x50>
 800f098:	4b12      	ldr	r3, [pc, #72]	@ (800f0e4 <HAL_UART_RxCpltCallback+0x5c>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d01b      	beq.n	800f0d8 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	4911      	ldr	r1, [pc, #68]	@ (800f0e8 <HAL_UART_RxCpltCallback+0x60>)
 800f0a4:	480e      	ldr	r0, [pc, #56]	@ (800f0e0 <HAL_UART_RxCpltCallback+0x58>)
 800f0a6:	f7fc fe37 	bl	800bd18 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f0aa:	4b10      	ldr	r3, [pc, #64]	@ (800f0ec <HAL_UART_RxCpltCallback+0x64>)
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10a      	bne.n	800f0c8 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e8 <HAL_UART_RxCpltCallback+0x60>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f0b8:	4b0d      	ldr	r3, [pc, #52]	@ (800f0f0 <HAL_UART_RxCpltCallback+0x68>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	7bfa      	ldrb	r2, [r7, #15]
 800f0be:	4611      	mov	r1, r2
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f002 f90d 	bl	80112e0 <embeddedCliReceiveChar>
 800f0c6:	e002      	b.n	800f0ce <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f4 <HAL_UART_RxCpltCallback+0x6c>)
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f0ce:	f7f4 fe2d 	bl	8003d2c <HAL_GetTick>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4a08      	ldr	r2, [pc, #32]	@ (800f0f8 <HAL_UART_RxCpltCallback+0x70>)
 800f0d6:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f0d8:	bf00      	nop
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20001a90 	.word	0x20001a90
 800f0e4:	20001b4d 	.word	0x20001b4d
 800f0e8:	20001b4c 	.word	0x20001b4c
 800f0ec:	20001b4e 	.word	0x20001b4e
 800f0f0:	20001b40 	.word	0x20001b40
 800f0f4:	20001b4f 	.word	0x20001b4f
 800f0f8:	200017dc 	.word	0x200017dc

0800f0fc <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f108:	78fb      	ldrb	r3, [r7, #3]
 800f10a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f10c:	f107 010f 	add.w	r1, r7, #15
 800f110:	2364      	movs	r3, #100	@ 0x64
 800f112:	2201      	movs	r2, #1
 800f114:	4803      	ldr	r0, [pc, #12]	@ (800f124 <writeCharToCli+0x28>)
 800f116:	f7fc fd6d 	bl	800bbf4 <HAL_UART_Transmit>
}
 800f11a:	bf00      	nop
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	20001a90 	.word	0x20001a90

0800f128 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f128:	b40e      	push	{r1, r2, r3}
 800f12a:	b580      	push	{r7, lr}
 800f12c:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f130:	af00      	add	r7, sp, #0
 800f132:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f136:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f13a:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f13c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f140:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f144:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f148:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f14a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f14e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f152:	f107 000c 	add.w	r0, r7, #12
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f15c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f160:	f00e f8a6 	bl	801d2b0 <vsniprintf>
 800f164:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f168:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	da08      	bge.n	800f182 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f170:	4b0c      	ldr	r3, [pc, #48]	@ (800f1a4 <cli_printf+0x7c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	221d      	movs	r2, #29
 800f178:	2101      	movs	r1, #1
 800f17a:	480b      	ldr	r0, [pc, #44]	@ (800f1a8 <cli_printf+0x80>)
 800f17c:	f00d ff8c 	bl	801d098 <fwrite>
 800f180:	e009      	b.n	800f196 <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f182:	f107 020c 	add.w	r2, r7, #12
 800f186:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f18a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f18e:	4611      	mov	r1, r2
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	f002 f98b 	bl	80114ac <embeddedCliPrint>
}
 800f196:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f19a:	46bd      	mov	sp, r7
 800f19c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1a0:	b003      	add	sp, #12
 800f1a2:	4770      	bx	lr
 800f1a4:	20000170 	.word	0x20000170
 800f1a8:	08020ab4 	.word	0x08020ab4

0800f1ac <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f1bc:	f7f4 fdb6 	bl	8003d2c <HAL_GetTick>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	4a5b      	ldr	r2, [pc, #364]	@ (800f330 <receiveString+0x184>)
 800f1c4:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f1c6:	4b5b      	ldr	r3, [pc, #364]	@ (800f334 <receiveString+0x188>)
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 80a0 	beq.w	800f310 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f1d0:	4b59      	ldr	r3, [pc, #356]	@ (800f338 <receiveString+0x18c>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b0d      	cmp	r3, #13
 800f1d6:	d004      	beq.n	800f1e2 <receiveString+0x36>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	69fa      	ldr	r2, [r7, #28]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d164      	bne.n	800f2ac <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f1ec:	4b51      	ldr	r3, [pc, #324]	@ (800f334 <receiveString+0x188>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	61bb      	str	r3, [r7, #24]
 800f1f6:	e052      	b.n	800f29e <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	e00b      	b.n	800f216 <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	3301      	adds	r3, #1
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	441a      	add	r2, r3
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	68b9      	ldr	r1, [r7, #8]
 800f20a:	440b      	add	r3, r1
 800f20c:	7812      	ldrb	r2, [r2, #0]
 800f20e:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	3301      	adds	r3, #1
 800f214:	617b      	str	r3, [r7, #20]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	4413      	add	r3, r2
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1ed      	bne.n	800f1fe <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	4413      	add	r3, r2
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	4413      	add	r3, r2
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	2b60      	cmp	r3, #96	@ 0x60
 800f236:	d905      	bls.n	800f244 <receiveString+0x98>
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	4413      	add	r3, r2
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	2b7a      	cmp	r3, #122	@ 0x7a
 800f242:	d929      	bls.n	800f298 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	2b40      	cmp	r3, #64	@ 0x40
 800f24e:	d905      	bls.n	800f25c <receiveString+0xb0>
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b5a      	cmp	r3, #90	@ 0x5a
 800f25a:	d91d      	bls.n	800f298 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b5f      	cmp	r3, #95	@ 0x5f
 800f266:	d017      	beq.n	800f298 <receiveString+0xec>
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	4413      	add	r3, r2
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	2b3a      	cmp	r3, #58	@ 0x3a
 800f272:	d011      	beq.n	800f298 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	4413      	add	r3, r2
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f27e:	d905      	bls.n	800f28c <receiveString+0xe0>
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	4413      	add	r3, r2
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b39      	cmp	r3, #57	@ 0x39
 800f28a:	d905      	bls.n	800f298 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	4413      	add	r3, r2
 800f292:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1af      	bne.n	800f1f8 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	3301      	adds	r3, #1
 800f29c:	61bb      	str	r3, [r7, #24]
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1c0      	bne.n	800f22c <receiveString+0x80>
					}
				}
				break;
 800f2aa:	e03d      	b.n	800f328 <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f2ac:	4b22      	ldr	r3, [pc, #136]	@ (800f338 <receiveString+0x18c>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b08      	cmp	r3, #8
 800f2b2:	d003      	beq.n	800f2bc <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f2b4:	4b20      	ldr	r3, [pc, #128]	@ (800f338 <receiveString+0x18c>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2ba:	d117      	bne.n	800f2ec <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2108      	movs	r1, #8
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2120      	movs	r1, #32
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2108      	movs	r1, #8
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	4798      	blx	r3
					--index;
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	701a      	strb	r2, [r3, #0]
 800f2ea:	e00e      	b.n	800f30a <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	1c5a      	adds	r2, r3, #1
 800f2f0:	61fa      	str	r2, [r7, #28]
 800f2f2:	68ba      	ldr	r2, [r7, #8]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	4a10      	ldr	r2, [pc, #64]	@ (800f338 <receiveString+0x18c>)
 800f2f8:	7812      	ldrb	r2, [r2, #0]
 800f2fa:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a0d      	ldr	r2, [pc, #52]	@ (800f338 <receiveString+0x18c>)
 800f302:	7812      	ldrb	r2, [r2, #0]
 800f304:	4611      	mov	r1, r2
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f30a:	4b0a      	ldr	r3, [pc, #40]	@ (800f334 <receiveString+0x188>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - prev_max_wait_time > max_wait_time) {
 800f310:	f7f4 fd0c 	bl	8003d2c <HAL_GetTick>
 800f314:	4602      	mov	r2, r0
 800f316:	4b06      	ldr	r3, [pc, #24]	@ (800f330 <receiveString+0x184>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	1ad2      	subs	r2, r2, r3
 800f31c:	4b07      	ldr	r3, [pc, #28]	@ (800f33c <receiveString+0x190>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	d800      	bhi.n	800f326 <receiveString+0x17a>
		if (flag_cli) {
 800f324:	e74f      	b.n	800f1c6 <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
 800f326:	bf00      	nop
		}

	}
}
 800f328:	bf00      	nop
 800f32a:	3720      	adds	r7, #32
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	20001b44 	.word	0x20001b44
 800f334:	20001b4f 	.word	0x20001b4f
 800f338:	20001b4c 	.word	0x20001b4c
 800f33c:	2000001c 	.word	0x2000001c

0800f340 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f34c:	4903      	ldr	r1, [pc, #12]	@ (800f35c <onClearCLI+0x1c>)
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff feea 	bl	800f128 <cli_printf>
}
 800f354:	bf00      	nop
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	08020ad4 	.word	0x08020ad4

0800f360 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f360:	b580      	push	{r7, lr}
 800f362:	b092      	sub	sp, #72	@ 0x48
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f36c:	4b24      	ldr	r3, [pc, #144]	@ (800f400 <debug_scd4x_PM25+0xa0>)
 800f36e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f370:	4924      	ldr	r1, [pc, #144]	@ (800f404 <debug_scd4x_PM25+0xa4>)
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f7ff fed8 	bl	800f128 <cli_printf>

	cli_other = 1;
 800f378:	4b23      	ldr	r3, [pc, #140]	@ (800f408 <debug_scd4x_PM25+0xa8>)
 800f37a:	2201      	movs	r2, #1
 800f37c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f37e:	4b23      	ldr	r3, [pc, #140]	@ (800f40c <debug_scd4x_PM25+0xac>)
 800f380:	2200      	movs	r2, #0
 800f382:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f384:	f107 0310 	add.w	r3, r7, #16
 800f388:	2232      	movs	r2, #50	@ 0x32
 800f38a:	4619      	mov	r1, r3
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f7ff ff0d 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f392:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f394:	f7f0 ff84 	bl	80002a0 <strlen>
 800f398:	4603      	mov	r3, r0
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f3a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3a2:	481b      	ldr	r0, [pc, #108]	@ (800f410 <debug_scd4x_PM25+0xb0>)
 800f3a4:	f7fc fc26 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f3a8:	f107 0310 	add.w	r3, r7, #16
 800f3ac:	2179      	movs	r1, #121	@ 0x79
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f00e f842 	bl	801d438 <strchr>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d007      	beq.n	800f3ca <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f3ba:	4b16      	ldr	r3, [pc, #88]	@ (800f414 <debug_scd4x_PM25+0xb4>)
 800f3bc:	2201      	movs	r2, #1
 800f3be:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f3c0:	4915      	ldr	r1, [pc, #84]	@ (800f418 <debug_scd4x_PM25+0xb8>)
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f7ff feb0 	bl	800f128 <cli_printf>
 800f3c8:	e00f      	b.n	800f3ea <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f3ca:	f107 0310 	add.w	r3, r7, #16
 800f3ce:	216e      	movs	r1, #110	@ 0x6e
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f00e f831 	bl	801d438 <strchr>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d006      	beq.n	800f3ea <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f414 <debug_scd4x_PM25+0xb4>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f3e2:	490e      	ldr	r1, [pc, #56]	@ (800f41c <debug_scd4x_PM25+0xbc>)
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f7ff fe9f 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 800f3ea:	4b08      	ldr	r3, [pc, #32]	@ (800f40c <debug_scd4x_PM25+0xac>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f3f0:	4b05      	ldr	r3, [pc, #20]	@ (800f408 <debug_scd4x_PM25+0xa8>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
}
 800f3f6:	bf00      	nop
 800f3f8:	3748      	adds	r7, #72	@ 0x48
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	08020adc 	.word	0x08020adc
 800f404:	08020ae0 	.word	0x08020ae0
 800f408:	20001b4e 	.word	0x20001b4e
 800f40c:	20001b4f 	.word	0x20001b4f
 800f410:	20001a90 	.word	0x20001a90
 800f414:	20001594 	.word	0x20001594
 800f418:	08020b14 	.word	0x08020b14
 800f41c:	08020b24 	.word	0x08020b24

0800f420 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f42c:	f7f2 ffc6 	bl	80023bc <ver_GetUid>
 800f430:	4603      	mov	r3, r0
 800f432:	461a      	mov	r2, r3
 800f434:	4903      	ldr	r1, [pc, #12]	@ (800f444 <DeviceSignature+0x24>)
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff fe76 	bl	800f128 <cli_printf>
}
 800f43c:	bf00      	nop
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	08020b34 	.word	0x08020b34

0800f448 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f448:	b580      	push	{r7, lr}
 800f44a:	b092      	sub	sp, #72	@ 0x48
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f454:	4b2d      	ldr	r3, [pc, #180]	@ (800f50c <SetID+0xc4>)
 800f456:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f458:	492d      	ldr	r1, [pc, #180]	@ (800f510 <SetID+0xc8>)
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fe64 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f460:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f462:	f7f0 ff1d 	bl	80002a0 <strlen>
 800f466:	4603      	mov	r3, r0
 800f468:	b29a      	uxth	r2, r3
 800f46a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f46e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f470:	4828      	ldr	r0, [pc, #160]	@ (800f514 <SetID+0xcc>)
 800f472:	f7fc fbbf 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f476:	4928      	ldr	r1, [pc, #160]	@ (800f518 <SetID+0xd0>)
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff fe55 	bl	800f128 <cli_printf>
	cli_other = 1;
 800f47e:	4b27      	ldr	r3, [pc, #156]	@ (800f51c <SetID+0xd4>)
 800f480:	2201      	movs	r2, #1
 800f482:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f484:	4b26      	ldr	r3, [pc, #152]	@ (800f520 <SetID+0xd8>)
 800f486:	2200      	movs	r2, #0
 800f488:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f48a:	f107 0310 	add.w	r3, r7, #16
 800f48e:	2232      	movs	r2, #50	@ 0x32
 800f490:	4619      	mov	r1, r3
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f7ff fe8a 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f498:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f49a:	f7f0 ff01 	bl	80002a0 <strlen>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f4a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f4a8:	481a      	ldr	r0, [pc, #104]	@ (800f514 <SetID+0xcc>)
 800f4aa:	f7fc fba3 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f4ae:	f107 0310 	add.w	r3, r7, #16
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f0 fef4 	bl	80002a0 <strlen>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f4be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f4c2:	2b1d      	cmp	r3, #29
 800f4c4:	d814      	bhi.n	800f4f0 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f4c6:	7c3b      	ldrb	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d015      	beq.n	800f4f8 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f4cc:	f107 0310 	add.w	r3, r7, #16
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4814      	ldr	r0, [pc, #80]	@ (800f524 <SetID+0xdc>)
 800f4d4:	f00e f8b7 	bl	801d646 <strcpy>
				set_param_flags();
 800f4d8:	4b13      	ldr	r3, [pc, #76]	@ (800f528 <SetID+0xe0>)
 800f4da:	2201      	movs	r2, #1
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	4b13      	ldr	r3, [pc, #76]	@ (800f52c <SetID+0xe4>)
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f4e4:	4a0f      	ldr	r2, [pc, #60]	@ (800f524 <SetID+0xdc>)
 800f4e6:	4912      	ldr	r1, [pc, #72]	@ (800f530 <SetID+0xe8>)
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f7ff fe1d 	bl	800f128 <cli_printf>
 800f4ee:	e003      	b.n	800f4f8 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f4f0:	4910      	ldr	r1, [pc, #64]	@ (800f534 <SetID+0xec>)
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f7ff fe18 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 800f4f8:	4b09      	ldr	r3, [pc, #36]	@ (800f520 <SetID+0xd8>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f4fe:	4b07      	ldr	r3, [pc, #28]	@ (800f51c <SetID+0xd4>)
 800f500:	2200      	movs	r2, #0
 800f502:	701a      	strb	r2, [r3, #0]

}
 800f504:	bf00      	nop
 800f506:	3748      	adds	r7, #72	@ 0x48
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	08020adc 	.word	0x08020adc
 800f510:	08020b50 	.word	0x08020b50
 800f514:	20001a90 	.word	0x20001a90
 800f518:	08020b88 	.word	0x08020b88
 800f51c:	20001b4e 	.word	0x20001b4e
 800f520:	20001b4f 	.word	0x20001b4f
 800f524:	200013bd 	.word	0x200013bd
 800f528:	20001595 	.word	0x20001595
 800f52c:	20001596 	.word	0x20001596
 800f530:	08020bb0 	.word	0x08020bb0
 800f534:	08020bc4 	.word	0x08020bc4

0800f538 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f538:	b580      	push	{r7, lr}
 800f53a:	b092      	sub	sp, #72	@ 0x48
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f544:	4b2d      	ldr	r3, [pc, #180]	@ (800f5fc <SetLocation+0xc4>)
 800f546:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f548:	492d      	ldr	r1, [pc, #180]	@ (800f600 <SetLocation+0xc8>)
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff fdec 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f550:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f552:	f7f0 fea5 	bl	80002a0 <strlen>
 800f556:	4603      	mov	r3, r0
 800f558:	b29a      	uxth	r2, r3
 800f55a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f55e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f560:	4828      	ldr	r0, [pc, #160]	@ (800f604 <SetLocation+0xcc>)
 800f562:	f7fc fb47 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f566:	4928      	ldr	r1, [pc, #160]	@ (800f608 <SetLocation+0xd0>)
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f7ff fddd 	bl	800f128 <cli_printf>
	cli_other = 1;
 800f56e:	4b27      	ldr	r3, [pc, #156]	@ (800f60c <SetLocation+0xd4>)
 800f570:	2201      	movs	r2, #1
 800f572:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f574:	4b26      	ldr	r3, [pc, #152]	@ (800f610 <SetLocation+0xd8>)
 800f576:	2200      	movs	r2, #0
 800f578:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f57a:	f107 0310 	add.w	r3, r7, #16
 800f57e:	2232      	movs	r2, #50	@ 0x32
 800f580:	4619      	mov	r1, r3
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7ff fe12 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f588:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f58a:	f7f0 fe89 	bl	80002a0 <strlen>
 800f58e:	4603      	mov	r3, r0
 800f590:	b29a      	uxth	r2, r3
 800f592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f596:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f598:	481a      	ldr	r0, [pc, #104]	@ (800f604 <SetLocation+0xcc>)
 800f59a:	f7fc fb2b 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f59e:	f107 0310 	add.w	r3, r7, #16
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7f0 fe7c 	bl	80002a0 <strlen>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f5ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f5b2:	2b0e      	cmp	r3, #14
 800f5b4:	d814      	bhi.n	800f5e0 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f5b6:	7c3b      	ldrb	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d015      	beq.n	800f5e8 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f5bc:	f107 0310 	add.w	r3, r7, #16
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4814      	ldr	r0, [pc, #80]	@ (800f614 <SetLocation+0xdc>)
 800f5c4:	f00e f83f 	bl	801d646 <strcpy>
				set_param_flags();
 800f5c8:	4b13      	ldr	r3, [pc, #76]	@ (800f618 <SetLocation+0xe0>)
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	701a      	strb	r2, [r3, #0]
 800f5ce:	4b13      	ldr	r3, [pc, #76]	@ (800f61c <SetLocation+0xe4>)
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800f614 <SetLocation+0xdc>)
 800f5d6:	4912      	ldr	r1, [pc, #72]	@ (800f620 <SetLocation+0xe8>)
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f7ff fda5 	bl	800f128 <cli_printf>
 800f5de:	e003      	b.n	800f5e8 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f5e0:	4910      	ldr	r1, [pc, #64]	@ (800f624 <SetLocation+0xec>)
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f7ff fda0 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 800f5e8:	4b09      	ldr	r3, [pc, #36]	@ (800f610 <SetLocation+0xd8>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f5ee:	4b07      	ldr	r3, [pc, #28]	@ (800f60c <SetLocation+0xd4>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	701a      	strb	r2, [r3, #0]

}
 800f5f4:	bf00      	nop
 800f5f6:	3748      	adds	r7, #72	@ 0x48
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	08020adc 	.word	0x08020adc
 800f600:	08020b50 	.word	0x08020b50
 800f604:	20001a90 	.word	0x20001a90
 800f608:	08020bd4 	.word	0x08020bd4
 800f60c:	20001b4e 	.word	0x20001b4e
 800f610:	20001b4f 	.word	0x20001b4f
 800f614:	200013ef 	.word	0x200013ef
 800f618:	20001595 	.word	0x20001595
 800f61c:	20001596 	.word	0x20001596
 800f620:	08020c08 	.word	0x08020c08
 800f624:	08020c20 	.word	0x08020c20

0800f628 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f628:	b580      	push	{r7, lr}
 800f62a:	b092      	sub	sp, #72	@ 0x48
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f634:	4b2d      	ldr	r3, [pc, #180]	@ (800f6ec <Setgroup+0xc4>)
 800f636:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f638:	492d      	ldr	r1, [pc, #180]	@ (800f6f0 <Setgroup+0xc8>)
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f7ff fd74 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f640:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f642:	f7f0 fe2d 	bl	80002a0 <strlen>
 800f646:	4603      	mov	r3, r0
 800f648:	b29a      	uxth	r2, r3
 800f64a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f64e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f650:	4828      	ldr	r0, [pc, #160]	@ (800f6f4 <Setgroup+0xcc>)
 800f652:	f7fc facf 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800f656:	4928      	ldr	r1, [pc, #160]	@ (800f6f8 <Setgroup+0xd0>)
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f7ff fd65 	bl	800f128 <cli_printf>
	cli_other = 1;
 800f65e:	4b27      	ldr	r3, [pc, #156]	@ (800f6fc <Setgroup+0xd4>)
 800f660:	2201      	movs	r2, #1
 800f662:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f664:	4b26      	ldr	r3, [pc, #152]	@ (800f700 <Setgroup+0xd8>)
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f66a:	f107 0310 	add.w	r3, r7, #16
 800f66e:	2232      	movs	r2, #50	@ 0x32
 800f670:	4619      	mov	r1, r3
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7ff fd9a 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f678:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f67a:	f7f0 fe11 	bl	80002a0 <strlen>
 800f67e:	4603      	mov	r3, r0
 800f680:	b29a      	uxth	r2, r3
 800f682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f688:	481a      	ldr	r0, [pc, #104]	@ (800f6f4 <Setgroup+0xcc>)
 800f68a:	f7fc fab3 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f68e:	f107 0310 	add.w	r3, r7, #16
 800f692:	4618      	mov	r0, r3
 800f694:	f7f0 fe04 	bl	80002a0 <strlen>
 800f698:	4603      	mov	r3, r0
 800f69a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f69e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f6a2:	2b0e      	cmp	r3, #14
 800f6a4:	d814      	bhi.n	800f6d0 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800f6a6:	7c3b      	ldrb	r3, [r7, #16]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d015      	beq.n	800f6d8 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800f6ac:	f107 0310 	add.w	r3, r7, #16
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4814      	ldr	r0, [pc, #80]	@ (800f704 <Setgroup+0xdc>)
 800f6b4:	f00d ffc7 	bl	801d646 <strcpy>
				set_param_flags();
 800f6b8:	4b13      	ldr	r3, [pc, #76]	@ (800f708 <Setgroup+0xe0>)
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	4b13      	ldr	r3, [pc, #76]	@ (800f70c <Setgroup+0xe4>)
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800f6c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f704 <Setgroup+0xdc>)
 800f6c6:	4912      	ldr	r1, [pc, #72]	@ (800f710 <Setgroup+0xe8>)
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f7ff fd2d 	bl	800f128 <cli_printf>
 800f6ce:	e003      	b.n	800f6d8 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800f6d0:	4910      	ldr	r1, [pc, #64]	@ (800f714 <Setgroup+0xec>)
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f7ff fd28 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 800f6d8:	4b09      	ldr	r3, [pc, #36]	@ (800f700 <Setgroup+0xd8>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f6de:	4b07      	ldr	r3, [pc, #28]	@ (800f6fc <Setgroup+0xd4>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]

}
 800f6e4:	bf00      	nop
 800f6e6:	3748      	adds	r7, #72	@ 0x48
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	08020adc 	.word	0x08020adc
 800f6f0:	08020b50 	.word	0x08020b50
 800f6f4:	20001a90 	.word	0x20001a90
 800f6f8:	08020c8c 	.word	0x08020c8c
 800f6fc:	20001b4e 	.word	0x20001b4e
 800f700:	20001b4f 	.word	0x20001b4f
 800f704:	20001453 	.word	0x20001453
 800f708:	20001595 	.word	0x20001595
 800f70c:	20001596 	.word	0x20001596
 800f710:	08020cbc 	.word	0x08020cbc
 800f714:	08020cd0 	.word	0x08020cd0

0800f718 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800f724:	4a04      	ldr	r2, [pc, #16]	@ (800f738 <GetID+0x20>)
 800f726:	4905      	ldr	r1, [pc, #20]	@ (800f73c <GetID+0x24>)
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f7ff fcfd 	bl	800f128 <cli_printf>
}
 800f72e:	bf00      	nop
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200013bd 	.word	0x200013bd
 800f73c:	08020ce4 	.word	0x08020ce4

0800f740 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800f74c:	4a04      	ldr	r2, [pc, #16]	@ (800f760 <GetLocation+0x20>)
 800f74e:	4905      	ldr	r1, [pc, #20]	@ (800f764 <GetLocation+0x24>)
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fce9 	bl	800f128 <cli_printf>

}
 800f756:	bf00      	nop
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	200013ef 	.word	0x200013ef
 800f764:	08020cec 	.word	0x08020cec

0800f768 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800f774:	4a04      	ldr	r2, [pc, #16]	@ (800f788 <Getgroup+0x20>)
 800f776:	4905      	ldr	r1, [pc, #20]	@ (800f78c <Getgroup+0x24>)
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff fcd5 	bl	800f128 <cli_printf>

}
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20001453 	.word	0x20001453
 800f78c:	08020d08 	.word	0x08020d08

0800f790 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f790:	b580      	push	{r7, lr}
 800f792:	b09a      	sub	sp, #104	@ 0x68
 800f794:	af02      	add	r7, sp, #8
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f79c:	4b26      	ldr	r3, [pc, #152]	@ (800f838 <SetDate+0xa8>)
 800f79e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f7a0:	4926      	ldr	r1, [pc, #152]	@ (800f83c <SetDate+0xac>)
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff fcc0 	bl	800f128 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800f7a8:	4b25      	ldr	r3, [pc, #148]	@ (800f840 <SetDate+0xb0>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f7ae:	4b25      	ldr	r3, [pc, #148]	@ (800f844 <SetDate+0xb4>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f7b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f7b8:	2232      	movs	r2, #50	@ 0x32
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7ff fcf5 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f7c2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f7c4:	f7f0 fd6c 	bl	80002a0 <strlen>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7d0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f7d2:	481d      	ldr	r0, [pc, #116]	@ (800f848 <SetDate+0xb8>)
 800f7d4:	f7fc fa0e 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f7d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d004      	beq.n	800f7ea <SetDate+0x5a>
		Set_Date(buffer);
 800f7e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f003 f92d 	bl	8012a44 <Set_Date>
	}
	flag_cli = 0;
 800f7ea:	4b16      	ldr	r3, [pc, #88]	@ (800f844 <SetDate+0xb4>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7f0:	4b13      	ldr	r3, [pc, #76]	@ (800f840 <SetDate+0xb0>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f7f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4813      	ldr	r0, [pc, #76]	@ (800f84c <SetDate+0xbc>)
 800f800:	f7f9 fe82 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f804:	f107 0310 	add.w	r3, r7, #16
 800f808:	2200      	movs	r2, #0
 800f80a:	4619      	mov	r1, r3
 800f80c:	480f      	ldr	r0, [pc, #60]	@ (800f84c <SetDate+0xbc>)
 800f80e:	f7f9 fd99 	bl	8009344 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f812:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f816:	461a      	mov	r2, r3
 800f818:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f81c:	4619      	mov	r1, r3
			gDate.Year);
 800f81e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	460b      	mov	r3, r1
 800f826:	490a      	ldr	r1, [pc, #40]	@ (800f850 <SetDate+0xc0>)
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f7ff fc7d 	bl	800f128 <cli_printf>

}
 800f82e:	bf00      	nop
 800f830:	3760      	adds	r7, #96	@ 0x60
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	08020adc 	.word	0x08020adc
 800f83c:	08020d14 	.word	0x08020d14
 800f840:	20001b4e 	.word	0x20001b4e
 800f844:	20001b4f 	.word	0x20001b4f
 800f848:	20001a90 	.word	0x20001a90
 800f84c:	200018b4 	.word	0x200018b4
 800f850:	08020d50 	.word	0x08020d50

0800f854 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f854:	b580      	push	{r7, lr}
 800f856:	b09a      	sub	sp, #104	@ 0x68
 800f858:	af02      	add	r7, sp, #8
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f860:	4b26      	ldr	r3, [pc, #152]	@ (800f8fc <SetTime+0xa8>)
 800f862:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800f864:	4926      	ldr	r1, [pc, #152]	@ (800f900 <SetTime+0xac>)
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f7ff fc5e 	bl	800f128 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800f86c:	4b25      	ldr	r3, [pc, #148]	@ (800f904 <SetTime+0xb0>)
 800f86e:	2201      	movs	r2, #1
 800f870:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f872:	4b25      	ldr	r3, [pc, #148]	@ (800f908 <SetTime+0xb4>)
 800f874:	2200      	movs	r2, #0
 800f876:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f878:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f87c:	2232      	movs	r2, #50	@ 0x32
 800f87e:	4619      	mov	r1, r3
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f7ff fc93 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f886:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800f888:	f7f0 fd0a 	bl	80002a0 <strlen>
 800f88c:	4603      	mov	r3, r0
 800f88e:	b29a      	uxth	r2, r3
 800f890:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f894:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f896:	481d      	ldr	r0, [pc, #116]	@ (800f90c <SetTime+0xb8>)
 800f898:	f7fc f9ac 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f89c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d004      	beq.n	800f8ae <SetTime+0x5a>
		Set_Time(buffer);
 800f8a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f003 f989 	bl	8012bc0 <Set_Time>
	}
	flag_cli = 0;
 800f8ae:	4b16      	ldr	r3, [pc, #88]	@ (800f908 <SetTime+0xb4>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8b4:	4b13      	ldr	r3, [pc, #76]	@ (800f904 <SetTime+0xb0>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f8ba:	4b15      	ldr	r3, [pc, #84]	@ (800f910 <SetTime+0xbc>)
 800f8bc:	2201      	movs	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f8c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	4812      	ldr	r0, [pc, #72]	@ (800f914 <SetTime+0xc0>)
 800f8ca:	f7f9 fe1d 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f8ce:	f107 0310 	add.w	r3, r7, #16
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	480f      	ldr	r0, [pc, #60]	@ (800f914 <SetTime+0xc0>)
 800f8d8:	f7f9 fd34 	bl	8009344 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f8dc:	7c3b      	ldrb	r3, [r7, #16]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	7c7b      	ldrb	r3, [r7, #17]
 800f8e2:	4619      	mov	r1, r3
			gTime.Seconds);
 800f8e4:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	490b      	ldr	r1, [pc, #44]	@ (800f918 <SetTime+0xc4>)
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f7ff fc1b 	bl	800f128 <cli_printf>

}
 800f8f2:	bf00      	nop
 800f8f4:	3760      	adds	r7, #96	@ 0x60
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	08020adc 	.word	0x08020adc
 800f900:	08020d6c 	.word	0x08020d6c
 800f904:	20001b4e 	.word	0x20001b4e
 800f908:	20001b4f 	.word	0x20001b4f
 800f90c:	20001a90 	.word	0x20001a90
 800f910:	20000029 	.word	0x20000029
 800f914:	200018b4 	.word	0x200018b4
 800f918:	08020db0 	.word	0x08020db0

0800f91c <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08c      	sub	sp, #48	@ 0x30
 800f920:	af02      	add	r7, sp, #8
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f92c:	2200      	movs	r2, #0
 800f92e:	4619      	mov	r1, r3
 800f930:	480f      	ldr	r0, [pc, #60]	@ (800f970 <GetDate+0x54>)
 800f932:	f7f9 fde9 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f936:	f107 0310 	add.w	r3, r7, #16
 800f93a:	2200      	movs	r2, #0
 800f93c:	4619      	mov	r1, r3
 800f93e:	480c      	ldr	r0, [pc, #48]	@ (800f970 <GetDate+0x54>)
 800f940:	f7f9 fd00 	bl	8009344 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800f944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f948:	461a      	mov	r2, r3
 800f94a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f94e:	4619      	mov	r1, r3
 800f950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	460b      	mov	r3, r1
 800f958:	4906      	ldr	r1, [pc, #24]	@ (800f974 <GetDate+0x58>)
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff fbe4 	bl	800f128 <cli_printf>
	HAL_Delay(100);
 800f960:	2064      	movs	r0, #100	@ 0x64
 800f962:	f7f4 f9ef 	bl	8003d44 <HAL_Delay>
}
 800f966:	bf00      	nop
 800f968:	3728      	adds	r7, #40	@ 0x28
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	200018b4 	.word	0x200018b4
 800f974:	08020dcc 	.word	0x08020dcc

0800f978 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08c      	sub	sp, #48	@ 0x30
 800f97c:	af02      	add	r7, sp, #8
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f988:	2200      	movs	r2, #0
 800f98a:	4619      	mov	r1, r3
 800f98c:	480d      	ldr	r0, [pc, #52]	@ (800f9c4 <GetTime+0x4c>)
 800f98e:	f7f9 fdbb 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f992:	f107 0310 	add.w	r3, r7, #16
 800f996:	2200      	movs	r2, #0
 800f998:	4619      	mov	r1, r3
 800f99a:	480a      	ldr	r0, [pc, #40]	@ (800f9c4 <GetTime+0x4c>)
 800f99c:	f7f9 fcd2 	bl	8009344 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f9a0:	7c3b      	ldrb	r3, [r7, #16]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	7c7b      	ldrb	r3, [r7, #17]
 800f9a6:	4619      	mov	r1, r3
			gTime.Seconds);
 800f9a8:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4906      	ldr	r1, [pc, #24]	@ (800f9c8 <GetTime+0x50>)
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff fbb9 	bl	800f128 <cli_printf>
	HAL_Delay(100);
 800f9b6:	2064      	movs	r0, #100	@ 0x64
 800f9b8:	f7f4 f9c4 	bl	8003d44 <HAL_Delay>
}
 800f9bc:	bf00      	nop
 800f9be:	3728      	adds	r7, #40	@ 0x28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	200018b4 	.word	0x200018b4
 800f9c8:	08020ddc 	.word	0x08020ddc

0800f9cc <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b092      	sub	sp, #72	@ 0x48
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f9d8:	4b54      	ldr	r3, [pc, #336]	@ (800fb2c <SetInterval+0x160>)
 800f9da:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f9dc:	4954      	ldr	r1, [pc, #336]	@ (800fb30 <SetInterval+0x164>)
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f7ff fba2 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f9e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f9e6:	f7f0 fc5b 	bl	80002a0 <strlen>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f9f4:	484f      	ldr	r0, [pc, #316]	@ (800fb34 <SetInterval+0x168>)
 800f9f6:	f7fc f8fd 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800f9fa:	494f      	ldr	r1, [pc, #316]	@ (800fb38 <SetInterval+0x16c>)
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f7ff fb93 	bl	800f128 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fa02:	494e      	ldr	r1, [pc, #312]	@ (800fb3c <SetInterval+0x170>)
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f7ff fb8f 	bl	800f128 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fa0a:	494d      	ldr	r1, [pc, #308]	@ (800fb40 <SetInterval+0x174>)
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7ff fb8b 	bl	800f128 <cli_printf>
	cli_printf(cli,
 800fa12:	494c      	ldr	r1, [pc, #304]	@ (800fb44 <SetInterval+0x178>)
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7ff fb87 	bl	800f128 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fa1a:	4b4b      	ldr	r3, [pc, #300]	@ (800fb48 <SetInterval+0x17c>)
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa20:	4b4a      	ldr	r3, [pc, #296]	@ (800fb4c <SetInterval+0x180>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa26:	f107 0310 	add.w	r3, r7, #16
 800fa2a:	2232      	movs	r2, #50	@ 0x32
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7ff fbbc 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa36:	f7f0 fc33 	bl	80002a0 <strlen>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa44:	483b      	ldr	r0, [pc, #236]	@ (800fb34 <SetInterval+0x168>)
 800fa46:	f7fc f8d5 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fa4a:	f107 0310 	add.w	r3, r7, #16
 800fa4e:	2131      	movs	r1, #49	@ 0x31
 800fa50:	4618      	mov	r0, r3
 800fa52:	f00d fcf1 	bl	801d438 <strchr>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d015      	beq.n	800fa88 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fa5c:	4b3c      	ldr	r3, [pc, #240]	@ (800fb50 <SetInterval+0x184>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f042 0205 	orr.w	r2, r2, #5
 800fa64:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fa74:	2200      	movs	r2, #0
 800fa76:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fa7a:	4b36      	ldr	r3, [pc, #216]	@ (800fb54 <SetInterval+0x188>)
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	701a      	strb	r2, [r3, #0]
 800fa80:	4b35      	ldr	r3, [pc, #212]	@ (800fb58 <SetInterval+0x18c>)
 800fa82:	2201      	movs	r2, #1
 800fa84:	701a      	strb	r2, [r3, #0]
 800fa86:	e03c      	b.n	800fb02 <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fa88:	f107 0310 	add.w	r3, r7, #16
 800fa8c:	2132      	movs	r1, #50	@ 0x32
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f00d fcd2 	bl	801d438 <strchr>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d015      	beq.n	800fac6 <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fa9a:	4b2d      	ldr	r3, [pc, #180]	@ (800fb50 <SetInterval+0x184>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f042 020f 	orr.w	r2, r2, #15
 800faa2:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800faac:	2200      	movs	r2, #0
 800faae:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fab8:	4b26      	ldr	r3, [pc, #152]	@ (800fb54 <SetInterval+0x188>)
 800faba:	2201      	movs	r2, #1
 800fabc:	701a      	strb	r2, [r3, #0]
 800fabe:	4b26      	ldr	r3, [pc, #152]	@ (800fb58 <SetInterval+0x18c>)
 800fac0:	2201      	movs	r2, #1
 800fac2:	701a      	strb	r2, [r3, #0]
 800fac4:	e01d      	b.n	800fb02 <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800fac6:	f107 0310 	add.w	r3, r7, #16
 800faca:	2133      	movs	r1, #51	@ 0x33
 800facc:	4618      	mov	r0, r3
 800face:	f00d fcb3 	bl	801d438 <strchr>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d014      	beq.n	800fb02 <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fad8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb50 <SetInterval+0x184>)
 800fada:	2200      	movs	r2, #0
 800fadc:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fae0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800faea:	2200      	movs	r2, #0
 800faec:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800faf6:	4b17      	ldr	r3, [pc, #92]	@ (800fb54 <SetInterval+0x188>)
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	4b16      	ldr	r3, [pc, #88]	@ (800fb58 <SetInterval+0x18c>)
 800fafe:	2201      	movs	r2, #1
 800fb00:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800fb02:	4b12      	ldr	r3, [pc, #72]	@ (800fb4c <SetInterval+0x180>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fb08:	4b0f      	ldr	r3, [pc, #60]	@ (800fb48 <SetInterval+0x17c>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800fb0e:	4b10      	ldr	r3, [pc, #64]	@ (800fb50 <SetInterval+0x184>)
 800fb10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fb14:	461a      	mov	r2, r3
 800fb16:	4911      	ldr	r1, [pc, #68]	@ (800fb5c <SetInterval+0x190>)
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7ff fb05 	bl	800f128 <cli_printf>
	set_alarm_Time = 1;
 800fb1e:	4b10      	ldr	r3, [pc, #64]	@ (800fb60 <SetInterval+0x194>)
 800fb20:	2201      	movs	r2, #1
 800fb22:	701a      	strb	r2, [r3, #0]
}
 800fb24:	bf00      	nop
 800fb26:	3748      	adds	r7, #72	@ 0x48
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	08020adc 	.word	0x08020adc
 800fb30:	08020b50 	.word	0x08020b50
 800fb34:	20001a90 	.word	0x20001a90
 800fb38:	08020dec 	.word	0x08020dec
 800fb3c:	08020e00 	.word	0x08020e00
 800fb40:	08020e14 	.word	0x08020e14
 800fb44:	08020e28 	.word	0x08020e28
 800fb48:	20001b4e 	.word	0x20001b4e
 800fb4c:	20001b4f 	.word	0x20001b4f
 800fb50:	200012f0 	.word	0x200012f0
 800fb54:	20001595 	.word	0x20001595
 800fb58:	20001596 	.word	0x20001596
 800fb5c:	08020e70 	.word	0x08020e70
 800fb60:	20000029 	.word	0x20000029

0800fb64 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800fb70:	4b05      	ldr	r3, [pc, #20]	@ (800fb88 <GetInterval+0x24>)
 800fb72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fb76:	461a      	mov	r2, r3
 800fb78:	4904      	ldr	r1, [pc, #16]	@ (800fb8c <GetInterval+0x28>)
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f7ff fad4 	bl	800f128 <cli_printf>

}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	200012f0 	.word	0x200012f0
 800fb8c:	08020e8c 	.word	0x08020e8c

0800fb90 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b09a      	sub	sp, #104	@ 0x68
 800fb94:	af02      	add	r7, sp, #8
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fb9c:	4b40      	ldr	r3, [pc, #256]	@ (800fca0 <SetFilename+0x110>)
 800fb9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fba0:	4940      	ldr	r1, [pc, #256]	@ (800fca4 <SetFilename+0x114>)
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f7ff fac0 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fba8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbaa:	f7f0 fb79 	bl	80002a0 <strlen>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbb6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbb8:	483b      	ldr	r0, [pc, #236]	@ (800fca8 <SetFilename+0x118>)
 800fbba:	f7fc f81b 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800fbbe:	493b      	ldr	r1, [pc, #236]	@ (800fcac <SetFilename+0x11c>)
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7ff fab1 	bl	800f128 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800fbc6:	493a      	ldr	r1, [pc, #232]	@ (800fcb0 <SetFilename+0x120>)
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7ff faad 	bl	800f128 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800fbce:	4b39      	ldr	r3, [pc, #228]	@ (800fcb4 <SetFilename+0x124>)
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fbd4:	4b38      	ldr	r3, [pc, #224]	@ (800fcb8 <SetFilename+0x128>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fbda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbde:	2232      	movs	r2, #50	@ 0x32
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f7ff fae2 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbe8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbea:	f7f0 fb59 	bl	80002a0 <strlen>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbf6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbf8:	482b      	ldr	r0, [pc, #172]	@ (800fca8 <SetFilename+0x118>)
 800fbfa:	f7fb fffb 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fbfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7f0 fb4c 	bl	80002a0 <strlen>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 800fc0e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800fc12:	2b13      	cmp	r3, #19
 800fc14:	d836      	bhi.n	800fc84 <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 800fc16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d036      	beq.n	800fc8c <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 800fc1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc22:	4619      	mov	r1, r3
 800fc24:	4825      	ldr	r0, [pc, #148]	@ (800fcbc <SetFilename+0x12c>)
 800fc26:	f00d fd0e 	bl	801d646 <strcpy>
				set_param_flags();
 800fc2a:	4b25      	ldr	r3, [pc, #148]	@ (800fcc0 <SetFilename+0x130>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	4b24      	ldr	r3, [pc, #144]	@ (800fcc4 <SetFilename+0x134>)
 800fc32:	2201      	movs	r2, #1
 800fc34:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 800fc36:	4b24      	ldr	r3, [pc, #144]	@ (800fcc8 <SetFilename+0x138>)
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 800fc3e:	4a1f      	ldr	r2, [pc, #124]	@ (800fcbc <SetFilename+0x12c>)
 800fc40:	4922      	ldr	r1, [pc, #136]	@ (800fccc <SetFilename+0x13c>)
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f7ff fa70 	bl	800f128 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800fc48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	4619      	mov	r1, r3
 800fc50:	481f      	ldr	r0, [pc, #124]	@ (800fcd0 <SetFilename+0x140>)
 800fc52:	f7f9 fc59 	bl	8009508 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 800fc56:	f107 0310 	add.w	r3, r7, #16
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	481c      	ldr	r0, [pc, #112]	@ (800fcd0 <SetFilename+0x140>)
 800fc60:	f7f9 fb70 	bl	8009344 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 800fc64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc68:	4619      	mov	r1, r3
 800fc6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fc72:	9201      	str	r2, [sp, #4]
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	460b      	mov	r3, r1
 800fc78:	4a10      	ldr	r2, [pc, #64]	@ (800fcbc <SetFilename+0x12c>)
 800fc7a:	4916      	ldr	r1, [pc, #88]	@ (800fcd4 <SetFilename+0x144>)
 800fc7c:	4816      	ldr	r0, [pc, #88]	@ (800fcd8 <SetFilename+0x148>)
 800fc7e:	f00d fa89 	bl	801d194 <siprintf>
 800fc82:	e003      	b.n	800fc8c <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 800fc84:	4915      	ldr	r1, [pc, #84]	@ (800fcdc <SetFilename+0x14c>)
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff fa4e 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 800fc8c:	4b0a      	ldr	r3, [pc, #40]	@ (800fcb8 <SetFilename+0x128>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fc92:	4b08      	ldr	r3, [pc, #32]	@ (800fcb4 <SetFilename+0x124>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	701a      	strb	r2, [r3, #0]

}
 800fc98:	bf00      	nop
 800fc9a:	3760      	adds	r7, #96	@ 0x60
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	08020adc 	.word	0x08020adc
 800fca4:	08020b50 	.word	0x08020b50
 800fca8:	20001a90 	.word	0x20001a90
 800fcac:	08020ea8 	.word	0x08020ea8
 800fcb0:	08020f1c 	.word	0x08020f1c
 800fcb4:	20001b4e 	.word	0x20001b4e
 800fcb8:	20001b4f 	.word	0x20001b4f
 800fcbc:	200012f0 	.word	0x200012f0
 800fcc0:	20001595 	.word	0x20001595
 800fcc4:	20001596 	.word	0x20001596
 800fcc8:	20001550 	.word	0x20001550
 800fccc:	08020f5c 	.word	0x08020f5c
 800fcd0:	200018b4 	.word	0x200018b4
 800fcd4:	08020f74 	.word	0x08020f74
 800fcd8:	200014e9 	.word	0x200014e9
 800fcdc:	08020f88 	.word	0x08020f88

0800fce0 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 800fcec:	4a04      	ldr	r2, [pc, #16]	@ (800fd00 <GetFilename+0x20>)
 800fcee:	4905      	ldr	r1, [pc, #20]	@ (800fd04 <GetFilename+0x24>)
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff fa19 	bl	800f128 <cli_printf>

}
 800fcf6:	bf00      	nop
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	200014e9 	.word	0x200014e9
 800fd04:	08020f5c 	.word	0x08020f5c

0800fd08 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b092      	sub	sp, #72	@ 0x48
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fd14:	4b41      	ldr	r3, [pc, #260]	@ (800fe1c <SetFileformat+0x114>)
 800fd16:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fd18:	4941      	ldr	r1, [pc, #260]	@ (800fe20 <SetFileformat+0x118>)
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f7ff fa04 	bl	800f128 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd20:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fd22:	f7f0 fabd 	bl	80002a0 <strlen>
 800fd26:	4603      	mov	r3, r0
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fd30:	483c      	ldr	r0, [pc, #240]	@ (800fe24 <SetFileformat+0x11c>)
 800fd32:	f7fb ff5f 	bl	800bbf4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 800fd36:	493c      	ldr	r1, [pc, #240]	@ (800fe28 <SetFileformat+0x120>)
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff f9f5 	bl	800f128 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 800fd3e:	493b      	ldr	r1, [pc, #236]	@ (800fe2c <SetFileformat+0x124>)
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f7ff f9f1 	bl	800f128 <cli_printf>
	cli_printf(cli, "2. (.json)");
 800fd46:	493a      	ldr	r1, [pc, #232]	@ (800fe30 <SetFileformat+0x128>)
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f7ff f9ed 	bl	800f128 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 800fd4e:	4939      	ldr	r1, [pc, #228]	@ (800fe34 <SetFileformat+0x12c>)
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7ff f9e9 	bl	800f128 <cli_printf>

	cli_other = 1;
 800fd56:	4b38      	ldr	r3, [pc, #224]	@ (800fe38 <SetFileformat+0x130>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fd5c:	4b37      	ldr	r3, [pc, #220]	@ (800fe3c <SetFileformat+0x134>)
 800fd5e:	2200      	movs	r2, #0
 800fd60:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fd62:	f107 0310 	add.w	r3, r7, #16
 800fd66:	2232      	movs	r2, #50	@ 0x32
 800fd68:	4619      	mov	r1, r3
 800fd6a:	68f8      	ldr	r0, [r7, #12]
 800fd6c:	f7ff fa1e 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fd72:	f7f0 fa95 	bl	80002a0 <strlen>
 800fd76:	4603      	mov	r3, r0
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fd80:	4828      	ldr	r0, [pc, #160]	@ (800fe24 <SetFileformat+0x11c>)
 800fd82:	f7fb ff37 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fd86:	f107 0310 	add.w	r3, r7, #16
 800fd8a:	2131      	movs	r1, #49	@ 0x31
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f00d fb53 	bl	801d438 <strchr>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d014      	beq.n	800fdc2 <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 800fd98:	4b29      	ldr	r3, [pc, #164]	@ (800fe40 <SetFileformat+0x138>)
 800fd9a:	4a2a      	ldr	r2, [pc, #168]	@ (800fe44 <SetFileformat+0x13c>)
 800fd9c:	6810      	ldr	r0, [r2, #0]
 800fd9e:	6018      	str	r0, [r3, #0]
 800fda0:	7912      	ldrb	r2, [r2, #4]
 800fda2:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800fda4:	4b28      	ldr	r3, [pc, #160]	@ (800fe48 <SetFileformat+0x140>)
 800fda6:	2201      	movs	r2, #1
 800fda8:	701a      	strb	r2, [r3, #0]
 800fdaa:	4b28      	ldr	r3, [pc, #160]	@ (800fe4c <SetFileformat+0x144>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fdb0:	4b27      	ldr	r3, [pc, #156]	@ (800fe50 <SetFileformat+0x148>)
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 800fdb8:	4b25      	ldr	r3, [pc, #148]	@ (800fe50 <SetFileformat+0x148>)
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800fdc0:	e01c      	b.n	800fdfc <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 800fdc2:	f107 0310 	add.w	r3, r7, #16
 800fdc6:	2132      	movs	r1, #50	@ 0x32
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f00d fb35 	bl	801d438 <strchr>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d013      	beq.n	800fdfc <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 800fdd4:	4b1a      	ldr	r3, [pc, #104]	@ (800fe40 <SetFileformat+0x138>)
 800fdd6:	4a1f      	ldr	r2, [pc, #124]	@ (800fe54 <SetFileformat+0x14c>)
 800fdd8:	6810      	ldr	r0, [r2, #0]
 800fdda:	6018      	str	r0, [r3, #0]
 800fddc:	8892      	ldrh	r2, [r2, #4]
 800fdde:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fde0:	4b19      	ldr	r3, [pc, #100]	@ (800fe48 <SetFileformat+0x140>)
 800fde2:	2201      	movs	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	4b19      	ldr	r3, [pc, #100]	@ (800fe4c <SetFileformat+0x144>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fdec:	4b18      	ldr	r3, [pc, #96]	@ (800fe50 <SetFileformat+0x148>)
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 800fdf4:	4b16      	ldr	r3, [pc, #88]	@ (800fe50 <SetFileformat+0x148>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 800fdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800fe3c <SetFileformat+0x134>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fe02:	4b0d      	ldr	r3, [pc, #52]	@ (800fe38 <SetFileformat+0x130>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fe08:	4a0d      	ldr	r2, [pc, #52]	@ (800fe40 <SetFileformat+0x138>)
 800fe0a:	4913      	ldr	r1, [pc, #76]	@ (800fe58 <SetFileformat+0x150>)
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f7ff f98b 	bl	800f128 <cli_printf>

}
 800fe12:	bf00      	nop
 800fe14:	3748      	adds	r7, #72	@ 0x48
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	08020adc 	.word	0x08020adc
 800fe20:	08020b50 	.word	0x08020b50
 800fe24:	20001a90 	.word	0x20001a90
 800fe28:	08020fa0 	.word	0x08020fa0
 800fe2c:	08020fc4 	.word	0x08020fc4
 800fe30:	08020fd0 	.word	0x08020fd0
 800fe34:	08020fdc 	.word	0x08020fdc
 800fe38:	20001b4e 	.word	0x20001b4e
 800fe3c:	20001b4f 	.word	0x20001b4f
 800fe40:	20001354 	.word	0x20001354
 800fe44:	0802100c 	.word	0x0802100c
 800fe48:	20001595 	.word	0x20001595
 800fe4c:	20001596 	.word	0x20001596
 800fe50:	20001550 	.word	0x20001550
 800fe54:	08021014 	.word	0x08021014
 800fe58:	0802101c 	.word	0x0802101c

0800fe5c <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fe68:	4a04      	ldr	r2, [pc, #16]	@ (800fe7c <GetFileformat+0x20>)
 800fe6a:	4905      	ldr	r1, [pc, #20]	@ (800fe80 <GetFileformat+0x24>)
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f7ff f95b 	bl	800f128 <cli_printf>

}
 800fe72:	bf00      	nop
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20001354 	.word	0x20001354
 800fe80:	0802101c 	.word	0x0802101c

0800fe84 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b096      	sub	sp, #88	@ 0x58
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fe90:	4b48      	ldr	r3, [pc, #288]	@ (800ffb4 <fanclean+0x130>)
 800fe92:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800fe98:	4b47      	ldr	r3, [pc, #284]	@ (800ffb8 <fanclean+0x134>)
 800fe9a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 800fea2:	4946      	ldr	r1, [pc, #280]	@ (800ffbc <fanclean+0x138>)
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f7ff f93f 	bl	800f128 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 800feaa:	4b45      	ldr	r3, [pc, #276]	@ (800ffc0 <fanclean+0x13c>)
 800feac:	2201      	movs	r2, #1
 800feae:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800feb0:	4b44      	ldr	r3, [pc, #272]	@ (800ffc4 <fanclean+0x140>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800feb6:	f107 0314 	add.w	r3, r7, #20
 800feba:	2232      	movs	r2, #50	@ 0x32
 800febc:	4619      	mov	r1, r3
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f7ff f974 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fec4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fec6:	f7f0 f9eb 	bl	80002a0 <strlen>
 800feca:	4603      	mov	r3, r0
 800fecc:	b29a      	uxth	r2, r3
 800fece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fed2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fed4:	483c      	ldr	r0, [pc, #240]	@ (800ffc8 <fanclean+0x144>)
 800fed6:	f7fb fe8d 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 800feda:	f107 0314 	add.w	r3, r7, #20
 800fede:	216e      	movs	r1, #110	@ 0x6e
 800fee0:	4618      	mov	r0, r3
 800fee2:	f00d faa9 	bl	801d438 <strchr>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00f      	beq.n	800ff0c <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 800feec:	4b37      	ldr	r3, [pc, #220]	@ (800ffcc <fanclean+0x148>)
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 800fef4:	4b36      	ldr	r3, [pc, #216]	@ (800ffd0 <fanclean+0x14c>)
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 800fefc:	4935      	ldr	r1, [pc, #212]	@ (800ffd4 <fanclean+0x150>)
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f7ff f912 	bl	800f128 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 800ff04:	2300      	movs	r3, #0
 800ff06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ff0a:	e00f      	b.n	800ff2c <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 800ff0c:	f107 0314 	add.w	r3, r7, #20
 800ff10:	2179      	movs	r1, #121	@ 0x79
 800ff12:	4618      	mov	r0, r3
 800ff14:	f00d fa90 	bl	801d438 <strchr>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d006      	beq.n	800ff2c <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 800ff1e:	4b2c      	ldr	r3, [pc, #176]	@ (800ffd0 <fanclean+0x14c>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 800ff26:	2301      	movs	r3, #1
 800ff28:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 800ff2c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d135      	bne.n	800ffa0 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff34:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ff36:	f7f0 f9b3 	bl	80002a0 <strlen>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff42:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ff44:	4820      	ldr	r0, [pc, #128]	@ (800ffc8 <fanclean+0x144>)
 800ff46:	f7fb fe55 	bl	800bbf4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 800ff4a:	4923      	ldr	r1, [pc, #140]	@ (800ffd8 <fanclean+0x154>)
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f7ff f8eb 	bl	800f128 <cli_printf>
		while (counter < 8) {
 800ff52:	e013      	b.n	800ff7c <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800ff54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ff56:	f7f0 f9a3 	bl	80002a0 <strlen>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ff64:	4818      	ldr	r0, [pc, #96]	@ (800ffc8 <fanclean+0x144>)
 800ff66:	f7fb fe45 	bl	800bbf4 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 800ff6a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800ff6e:	f7f3 fee9 	bl	8003d44 <HAL_Delay>
			toggle_blue_led();
 800ff72:	f7f1 f8a3 	bl	80010bc <toggle_blue_led>
			counter++;
 800ff76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff78:	3301      	adds	r3, #1
 800ff7a:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 800ff7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff7e:	2b07      	cmp	r3, #7
 800ff80:	dde8      	ble.n	800ff54 <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff82:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ff84:	f7f0 f98c 	bl	80002a0 <strlen>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff90:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ff92:	480d      	ldr	r0, [pc, #52]	@ (800ffc8 <fanclean+0x144>)
 800ff94:	f7fb fe2e 	bl	800bbf4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 800ff98:	4910      	ldr	r1, [pc, #64]	@ (800ffdc <fanclean+0x158>)
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff f8c4 	bl	800f128 <cli_printf>

	}

	flag_cli = 0;
 800ffa0:	4b08      	ldr	r3, [pc, #32]	@ (800ffc4 <fanclean+0x140>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ffa6:	4b06      	ldr	r3, [pc, #24]	@ (800ffc0 <fanclean+0x13c>)
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	701a      	strb	r2, [r3, #0]
}
 800ffac:	bf00      	nop
 800ffae:	3758      	adds	r7, #88	@ 0x58
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	08020adc 	.word	0x08020adc
 800ffb8:	08021038 	.word	0x08021038
 800ffbc:	08021044 	.word	0x08021044
 800ffc0:	20001b4e 	.word	0x20001b4e
 800ffc4:	20001b4f 	.word	0x20001b4f
 800ffc8:	20001a90 	.word	0x20001a90
 800ffcc:	200012f0 	.word	0x200012f0
 800ffd0:	20001550 	.word	0x20001550
 800ffd4:	08021080 	.word	0x08021080
 800ffd8:	080210a8 	.word	0x080210a8
 800ffdc:	080210e0 	.word	0x080210e0

0800ffe0 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b096      	sub	sp, #88	@ 0x58
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800ffec:	4b55      	ldr	r3, [pc, #340]	@ (8010144 <co2calibrate+0x164>)
 800ffee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 800fff4:	4b54      	ldr	r3, [pc, #336]	@ (8010148 <co2calibrate+0x168>)
 800fff6:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 800fffe:	4b53      	ldr	r3, [pc, #332]	@ (801014c <co2calibrate+0x16c>)
 8010000:	2201      	movs	r2, #1
 8010002:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010004:	4b52      	ldr	r3, [pc, #328]	@ (8010150 <co2calibrate+0x170>)
 8010006:	2200      	movs	r2, #0
 8010008:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 801000a:	f107 0310 	add.w	r3, r7, #16
 801000e:	2232      	movs	r2, #50	@ 0x32
 8010010:	2100      	movs	r1, #0
 8010012:	4618      	mov	r0, r3
 8010014:	f00d fa08 	bl	801d428 <memset>
	cli_printf(cli,
 8010018:	494e      	ldr	r1, [pc, #312]	@ (8010154 <co2calibrate+0x174>)
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff f884 	bl	800f128 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 8010020:	494d      	ldr	r1, [pc, #308]	@ (8010158 <co2calibrate+0x178>)
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f7ff f880 	bl	800f128 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010028:	f107 0310 	add.w	r3, r7, #16
 801002c:	2232      	movs	r2, #50	@ 0x32
 801002e:	4619      	mov	r1, r3
 8010030:	68f8      	ldr	r0, [r7, #12]
 8010032:	f7ff f8bb 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010036:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010038:	f7f0 f932 	bl	80002a0 <strlen>
 801003c:	4603      	mov	r3, r0
 801003e:	b29a      	uxth	r2, r3
 8010040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010044:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010046:	4845      	ldr	r0, [pc, #276]	@ (801015c <co2calibrate+0x17c>)
 8010048:	f7fb fdd4 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 801004c:	7c3b      	ldrb	r3, [r7, #16]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d01e      	beq.n	8010090 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 8010052:	4b43      	ldr	r3, [pc, #268]	@ (8010160 <co2calibrate+0x180>)
 8010054:	2201      	movs	r2, #1
 8010056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 801005a:	f107 0310 	add.w	r3, r7, #16
 801005e:	4618      	mov	r0, r3
 8010060:	f00b ff60 	bl	801bf24 <atoi>
 8010064:	4603      	mov	r3, r0
 8010066:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801006a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801006e:	4293      	cmp	r3, r2
 8010070:	d803      	bhi.n	801007a <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 8010072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010074:	b29a      	uxth	r2, r3
 8010076:	4b3a      	ldr	r3, [pc, #232]	@ (8010160 <co2calibrate+0x180>)
 8010078:	875a      	strh	r2, [r3, #58]	@ 0x3a
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 801007a:	4b39      	ldr	r3, [pc, #228]	@ (8010160 <co2calibrate+0x180>)
 801007c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
		cli_printf(cli,
 801007e:	461a      	mov	r2, r3
 8010080:	4938      	ldr	r1, [pc, #224]	@ (8010164 <co2calibrate+0x184>)
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff f850 	bl	800f128 <cli_printf>
		do_Calibration = 1;
 8010088:	2301      	movs	r3, #1
 801008a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 801008e:	e00a      	b.n	80100a6 <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 8010090:	4935      	ldr	r1, [pc, #212]	@ (8010168 <co2calibrate+0x188>)
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7ff f848 	bl	800f128 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 8010098:	4b31      	ldr	r3, [pc, #196]	@ (8010160 <co2calibrate+0x180>)
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 80100a6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d13f      	bne.n	801012e <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80100ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80100b0:	f7f0 f8f6 	bl	80002a0 <strlen>
 80100b4:	4603      	mov	r3, r0
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80100bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80100be:	4827      	ldr	r0, [pc, #156]	@ (801015c <co2calibrate+0x17c>)
 80100c0:	f7fb fd98 	bl	800bbf4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 80100c4:	4929      	ldr	r1, [pc, #164]	@ (801016c <co2calibrate+0x18c>)
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7ff f82e 	bl	800f128 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 80100cc:	4b24      	ldr	r3, [pc, #144]	@ (8010160 <co2calibrate+0x180>)
 80100ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d119      	bne.n	801010a <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 80100d6:	4b22      	ldr	r3, [pc, #136]	@ (8010160 <co2calibrate+0x180>)
 80100d8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80100da:	4618      	mov	r0, r3
 80100dc:	f003 f91e 	bl	801331c <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80100e0:	e013      	b.n	801010a <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80100e2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80100e4:	f7f0 f8dc 	bl	80002a0 <strlen>
 80100e8:	4603      	mov	r3, r0
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80100f0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80100f2:	481a      	ldr	r0, [pc, #104]	@ (801015c <co2calibrate+0x17c>)
 80100f4:	f7fb fd7e 	bl	800bbf4 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 80100f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80100fc:	f7f3 fe22 	bl	8003d44 <HAL_Delay>
			toggle_blue_led();
 8010100:	f7f0 ffdc 	bl	80010bc <toggle_blue_led>
			counter++;
 8010104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010106:	3301      	adds	r3, #1
 8010108:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 801010a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801010c:	2b07      	cmp	r3, #7
 801010e:	dde8      	ble.n	80100e2 <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010110:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010112:	f7f0 f8c5 	bl	80002a0 <strlen>
 8010116:	4603      	mov	r3, r0
 8010118:	b29a      	uxth	r2, r3
 801011a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801011e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010120:	480e      	ldr	r0, [pc, #56]	@ (801015c <co2calibrate+0x17c>)
 8010122:	f7fb fd67 	bl	800bbf4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 8010126:	4912      	ldr	r1, [pc, #72]	@ (8010170 <co2calibrate+0x190>)
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f7fe fffd 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 801012e:	4b08      	ldr	r3, [pc, #32]	@ (8010150 <co2calibrate+0x170>)
 8010130:	2200      	movs	r2, #0
 8010132:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010134:	4b05      	ldr	r3, [pc, #20]	@ (801014c <co2calibrate+0x16c>)
 8010136:	2200      	movs	r2, #0
 8010138:	701a      	strb	r2, [r3, #0]
}
 801013a:	bf00      	nop
 801013c:	3758      	adds	r7, #88	@ 0x58
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	08020adc 	.word	0x08020adc
 8010148:	08021038 	.word	0x08021038
 801014c:	20001b4e 	.word	0x20001b4e
 8010150:	20001b4f 	.word	0x20001b4f
 8010154:	080210f4 	.word	0x080210f4
 8010158:	08021138 	.word	0x08021138
 801015c:	20001a90 	.word	0x20001a90
 8010160:	20001550 	.word	0x20001550
 8010164:	0802118c 	.word	0x0802118c
 8010168:	080211dc 	.word	0x080211dc
 801016c:	080211fc 	.word	0x080211fc
 8010170:	08021220 	.word	0x08021220

08010174 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 8010174:	b580      	push	{r7, lr}
 8010176:	b092      	sub	sp, #72	@ 0x48
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010180:	4b22      	ldr	r3, [pc, #136]	@ (801020c <SystemRestart+0x98>)
 8010182:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 8010184:	4922      	ldr	r1, [pc, #136]	@ (8010210 <SystemRestart+0x9c>)
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7fe ffce 	bl	800f128 <cli_printf>

	cli_other = 1;
 801018c:	4b21      	ldr	r3, [pc, #132]	@ (8010214 <SystemRestart+0xa0>)
 801018e:	2201      	movs	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010192:	4b21      	ldr	r3, [pc, #132]	@ (8010218 <SystemRestart+0xa4>)
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8010198:	f107 0310 	add.w	r3, r7, #16
 801019c:	2232      	movs	r2, #50	@ 0x32
 801019e:	4619      	mov	r1, r3
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f7ff f803 	bl	800f1ac <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80101a6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80101a8:	f7f0 f87a 	bl	80002a0 <strlen>
 80101ac:	4603      	mov	r3, r0
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80101b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101b6:	4819      	ldr	r0, [pc, #100]	@ (801021c <SystemRestart+0xa8>)
 80101b8:	f7fb fd1c 	bl	800bbf4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 80101bc:	f107 0310 	add.w	r3, r7, #16
 80101c0:	2179      	movs	r1, #121	@ 0x79
 80101c2:	4618      	mov	r0, r3
 80101c4:	f00d f938 	bl	801d438 <strchr>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d006      	beq.n	80101dc <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 80101ce:	4914      	ldr	r1, [pc, #80]	@ (8010220 <SystemRestart+0xac>)
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f7fe ffa9 	bl	800f128 <cli_printf>
		HAL_NVIC_SystemReset();
 80101d6:	f7f4 fbc4 	bl	8004962 <HAL_NVIC_SystemReset>
 80101da:	e00c      	b.n	80101f6 <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 80101dc:	f107 0310 	add.w	r3, r7, #16
 80101e0:	216e      	movs	r1, #110	@ 0x6e
 80101e2:	4618      	mov	r0, r3
 80101e4:	f00d f928 	bl	801d438 <strchr>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d003      	beq.n	80101f6 <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 80101ee:	490d      	ldr	r1, [pc, #52]	@ (8010224 <SystemRestart+0xb0>)
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7fe ff99 	bl	800f128 <cli_printf>
	}

	flag_cli = 0;
 80101f6:	4b08      	ldr	r3, [pc, #32]	@ (8010218 <SystemRestart+0xa4>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80101fc:	4b05      	ldr	r3, [pc, #20]	@ (8010214 <SystemRestart+0xa0>)
 80101fe:	2200      	movs	r2, #0
 8010200:	701a      	strb	r2, [r3, #0]
}
 8010202:	bf00      	nop
 8010204:	3748      	adds	r7, #72	@ 0x48
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	08020adc 	.word	0x08020adc
 8010210:	0802123c 	.word	0x0802123c
 8010214:	20001b4e 	.word	0x20001b4e
 8010218:	20001b4f 	.word	0x20001b4f
 801021c:	20001a90 	.word	0x20001a90
 8010220:	08021264 	.word	0x08021264
 8010224:	08021280 	.word	0x08021280

08010228 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010234:	4b0a      	ldr	r3, [pc, #40]	@ (8010260 <Co2Level+0x38>)
 8010236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801023e:	f7f1 fa03 	bl	8001648 <get_scd30_measurement>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 8010242:	4b07      	ldr	r3, [pc, #28]	@ (8010260 <Co2Level+0x38>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4618      	mov	r0, r3
 8010248:	f7f0 f996 	bl	8000578 <__aeabi_f2d>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4904      	ldr	r1, [pc, #16]	@ (8010264 <Co2Level+0x3c>)
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f7fe ff68 	bl	800f128 <cli_printf>
#endif
}
 8010258:	bf00      	nop
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	20001550 	.word	0x20001550
 8010264:	08021298 	.word	0x08021298

08010268 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010274:	4b0a      	ldr	r3, [pc, #40]	@ (80102a0 <TempLevel+0x38>)
 8010276:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801027a:	2b00      	cmp	r3, #0
 801027c:	d101      	bne.n	8010282 <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 801027e:	f7f1 f9e3 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 8010282:	4b07      	ldr	r3, [pc, #28]	@ (80102a0 <TempLevel+0x38>)
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	4618      	mov	r0, r3
 8010288:	f7f0 f976 	bl	8000578 <__aeabi_f2d>
 801028c:	4602      	mov	r2, r0
 801028e:	460b      	mov	r3, r1
 8010290:	4904      	ldr	r1, [pc, #16]	@ (80102a4 <TempLevel+0x3c>)
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f7fe ff48 	bl	800f128 <cli_printf>
#endif
}
 8010298:	bf00      	nop
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20001550 	.word	0x20001550
 80102a4:	080212a8 	.word	0x080212a8

080102a8 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80102b4:	4b0a      	ldr	r3, [pc, #40]	@ (80102e0 <HumidLevel+0x38>)
 80102b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 80102be:	f7f1 f9c3 	bl	8001648 <get_scd30_measurement>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 80102c2:	4b07      	ldr	r3, [pc, #28]	@ (80102e0 <HumidLevel+0x38>)
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f0 f956 	bl	8000578 <__aeabi_f2d>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	4904      	ldr	r1, [pc, #16]	@ (80102e4 <HumidLevel+0x3c>)
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7fe ff28 	bl	800f128 <cli_printf>
#endif
}
 80102d8:	bf00      	nop
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20001550 	.word	0x20001550
 80102e4:	080212c4 	.word	0x080212c4

080102e8 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 80102f4:	491f      	ldr	r1, [pc, #124]	@ (8010374 <MotionDetection+0x8c>)
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f7fe ff16 	bl	800f128 <cli_printf>
	HAL_Delay(2000);
 80102fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8010300:	f7f3 fd20 	bl	8003d44 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 8010304:	f7f3 fd12 	bl	8003d2c <HAL_GetTick>
 8010308:	4603      	mov	r3, r0
 801030a:	4a1b      	ldr	r2, [pc, #108]	@ (8010378 <MotionDetection+0x90>)
 801030c:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 801030e:	4b1b      	ldr	r3, [pc, #108]	@ (801037c <MotionDetection+0x94>)
 8010310:	2200      	movs	r2, #0
 8010312:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8010314:	e01c      	b.n	8010350 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8010316:	2101      	movs	r1, #1
 8010318:	4819      	ldr	r0, [pc, #100]	@ (8010380 <MotionDetection+0x98>)
 801031a:	f7f5 fcd3 	bl	8005cc4 <HAL_GPIO_ReadPin>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d003      	beq.n	801032c <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 8010324:	4b17      	ldr	r3, [pc, #92]	@ (8010384 <MotionDetection+0x9c>)
 8010326:	2201      	movs	r2, #1
 8010328:	731a      	strb	r2, [r3, #12]
 801032a:	e002      	b.n	8010332 <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 801032c:	4b15      	ldr	r3, [pc, #84]	@ (8010384 <MotionDetection+0x9c>)
 801032e:	2200      	movs	r2, #0
 8010330:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8010332:	4b14      	ldr	r3, [pc, #80]	@ (8010384 <MotionDetection+0x9c>)
 8010334:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 8010336:	2b01      	cmp	r3, #1
 8010338:	d101      	bne.n	801033e <MotionDetection+0x56>
 801033a:	4b13      	ldr	r3, [pc, #76]	@ (8010388 <MotionDetection+0xa0>)
 801033c:	e000      	b.n	8010340 <MotionDetection+0x58>
 801033e:	4b13      	ldr	r3, [pc, #76]	@ (801038c <MotionDetection+0xa4>)
 8010340:	461a      	mov	r2, r3
 8010342:	4913      	ldr	r1, [pc, #76]	@ (8010390 <MotionDetection+0xa8>)
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7fe feef 	bl	800f128 <cli_printf>
//	         	}
		HAL_Delay(100);
 801034a:	2064      	movs	r0, #100	@ 0x64
 801034c:	f7f3 fcfa 	bl	8003d44 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8010350:	f7f3 fcec 	bl	8003d2c <HAL_GetTick>
 8010354:	4602      	mov	r2, r0
 8010356:	4b08      	ldr	r3, [pc, #32]	@ (8010378 <MotionDetection+0x90>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	1ad2      	subs	r2, r2, r3
 801035c:	4b0d      	ldr	r3, [pc, #52]	@ (8010394 <MotionDetection+0xac>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	429a      	cmp	r2, r3
 8010362:	d3d8      	bcc.n	8010316 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 8010364:	490c      	ldr	r1, [pc, #48]	@ (8010398 <MotionDetection+0xb0>)
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f7fe fede 	bl	800f128 <cli_printf>

}
 801036c:	bf00      	nop
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	080212dc 	.word	0x080212dc
 8010378:	20001b48 	.word	0x20001b48
 801037c:	20001b50 	.word	0x20001b50
 8010380:	40020000 	.word	0x40020000
 8010384:	20001550 	.word	0x20001550
 8010388:	08021314 	.word	0x08021314
 801038c:	0802131c 	.word	0x0802131c
 8010390:	08021324 	.word	0x08021324
 8010394:	20000020 	.word	0x20000020
 8010398:	08021338 	.word	0x08021338

0801039c <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 80103a8:	4922      	ldr	r1, [pc, #136]	@ (8010434 <AirQuality+0x98>)
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f7fe febc 	bl	800f128 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80103b0:	4b21      	ldr	r3, [pc, #132]	@ (8010438 <AirQuality+0x9c>)
 80103b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d104      	bne.n	80103c4 <AirQuality+0x28>
 80103ba:	4b1f      	ldr	r3, [pc, #124]	@ (8010438 <AirQuality+0x9c>)
 80103bc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d004      	beq.n	80103ce <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 80103c4:	491d      	ldr	r1, [pc, #116]	@ (801043c <AirQuality+0xa0>)
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f7fe feae 	bl	800f128 <cli_printf>
 80103cc:	e02e      	b.n	801042c <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 80103ce:	f7f1 f9f5 	bl	80017bc <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 80103d2:	4b19      	ldr	r3, [pc, #100]	@ (8010438 <AirQuality+0x9c>)
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f0 f8ce 	bl	8000578 <__aeabi_f2d>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	4917      	ldr	r1, [pc, #92]	@ (8010440 <AirQuality+0xa4>)
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f7fe fea0 	bl	800f128 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 80103e8:	4b13      	ldr	r3, [pc, #76]	@ (8010438 <AirQuality+0x9c>)
 80103ea:	695b      	ldr	r3, [r3, #20]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7f0 f8c3 	bl	8000578 <__aeabi_f2d>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4913      	ldr	r1, [pc, #76]	@ (8010444 <AirQuality+0xa8>)
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7fe fe95 	bl	800f128 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 80103fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010438 <AirQuality+0x9c>)
 8010400:	699b      	ldr	r3, [r3, #24]
 8010402:	4618      	mov	r0, r3
 8010404:	f7f0 f8b8 	bl	8000578 <__aeabi_f2d>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	490e      	ldr	r1, [pc, #56]	@ (8010448 <AirQuality+0xac>)
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7fe fe8a 	bl	800f128 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 8010414:	4b08      	ldr	r3, [pc, #32]	@ (8010438 <AirQuality+0x9c>)
 8010416:	69db      	ldr	r3, [r3, #28]
 8010418:	4618      	mov	r0, r3
 801041a:	f7f0 f8ad 	bl	8000578 <__aeabi_f2d>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	490a      	ldr	r1, [pc, #40]	@ (801044c <AirQuality+0xb0>)
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7fe fe7f 	bl	800f128 <cli_printf>
	}

}
 801042a:	bf00      	nop
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	08021348 	.word	0x08021348
 8010438:	20001550 	.word	0x20001550
 801043c:	08021364 	.word	0x08021364
 8010440:	08021384 	.word	0x08021384
 8010444:	08021390 	.word	0x08021390
 8010448:	080213a0 	.word	0x080213a0
 801044c:	080213b0 	.word	0x080213b0

08010450 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 801045c:	4808      	ldr	r0, [pc, #32]	@ (8010480 <BattVolt+0x30>)
 801045e:	f002 fd3f 	bl	8012ee0 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 8010462:	4b08      	ldr	r3, [pc, #32]	@ (8010484 <BattVolt+0x34>)
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	4618      	mov	r0, r3
 8010468:	f7f0 f886 	bl	8000578 <__aeabi_f2d>
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	4905      	ldr	r1, [pc, #20]	@ (8010488 <BattVolt+0x38>)
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f7fe fe58 	bl	800f128 <cli_printf>

}
 8010478:	bf00      	nop
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20001570 	.word	0x20001570
 8010484:	20001550 	.word	0x20001550
 8010488:	080213c0 	.word	0x080213c0

0801048c <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8010498:	4903      	ldr	r1, [pc, #12]	@ (80104a8 <port+0x1c>)
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f7fe fe44 	bl	800f128 <cli_printf>
}
 80104a0:	bf00      	nop
 80104a2:	3710      	adds	r7, #16
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	080213d8 	.word	0x080213d8

080104ac <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 80104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ae:	b0a3      	sub	sp, #140	@ 0x8c
 80104b0:	af06      	add	r7, sp, #24
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80104b8:	4b95      	ldr	r3, [pc, #596]	@ (8010710 <showall+0x264>)
 80104ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d104      	bne.n	80104cc <showall+0x20>
 80104c2:	4b93      	ldr	r3, [pc, #588]	@ (8010710 <showall+0x264>)
 80104c4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d006      	beq.n	80104da <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 80104cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80104d0:	4990      	ldr	r1, [pc, #576]	@ (8010714 <showall+0x268>)
 80104d2:	4618      	mov	r0, r3
 80104d4:	f00c fe5e 	bl	801d194 <siprintf>
 80104d8:	e00d      	b.n	80104f6 <showall+0x4a>
	} else {

		get_sps30_measurement();
 80104da:	f7f1 f96f 	bl	80017bc <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 80104de:	4b8c      	ldr	r3, [pc, #560]	@ (8010710 <showall+0x264>)
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f0 f848 	bl	8000578 <__aeabi_f2d>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80104f0:	4989      	ldr	r1, [pc, #548]	@ (8010718 <showall+0x26c>)
 80104f2:	f00c fe4f 	bl	801d194 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80104f6:	4889      	ldr	r0, [pc, #548]	@ (801071c <showall+0x270>)
 80104f8:	f002 fcf2 	bl	8012ee0 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80104fc:	2101      	movs	r1, #1
 80104fe:	4888      	ldr	r0, [pc, #544]	@ (8010720 <showall+0x274>)
 8010500:	f7f5 fbe0 	bl	8005cc4 <HAL_GPIO_ReadPin>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 801050a:	4b81      	ldr	r3, [pc, #516]	@ (8010710 <showall+0x264>)
 801050c:	2201      	movs	r2, #1
 801050e:	731a      	strb	r2, [r3, #12]
 8010510:	e002      	b.n	8010518 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 8010512:	4b7f      	ldr	r3, [pc, #508]	@ (8010710 <showall+0x264>)
 8010514:	2200      	movs	r2, #0
 8010516:	731a      	strb	r2, [r3, #12]
	}

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010518:	4b7d      	ldr	r3, [pc, #500]	@ (8010710 <showall+0x264>)
 801051a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <showall+0x7a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement();
 8010522:	f7f1 f891 	bl	8001648 <get_scd30_measurement>
#endif
	}

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8010526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801052a:	2200      	movs	r2, #0
 801052c:	4619      	mov	r1, r3
 801052e:	487d      	ldr	r0, [pc, #500]	@ (8010724 <showall+0x278>)
 8010530:	f7f8 ffea 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8010534:	f107 0310 	add.w	r3, r7, #16
 8010538:	2200      	movs	r2, #0
 801053a:	4619      	mov	r1, r3
 801053c:	4879      	ldr	r0, [pc, #484]	@ (8010724 <showall+0x278>)
 801053e:	f7f8 ff01 	bl	8009344 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 8010542:	4b79      	ldr	r3, [pc, #484]	@ (8010728 <showall+0x27c>)
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <showall+0xac>

		sprintf(buff_filewritten, "Data not written yet");
 801054a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801054e:	4977      	ldr	r1, [pc, #476]	@ (801072c <showall+0x280>)
 8010550:	4618      	mov	r0, r3
 8010552:	f00c fe1f 	bl	801d194 <siprintf>
 8010556:	e014      	b.n	8010582 <showall+0xd6>

	} else if (datawritten == 1) {
 8010558:	4b73      	ldr	r3, [pc, #460]	@ (8010728 <showall+0x27c>)
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d106      	bne.n	801056e <showall+0xc2>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 8010560:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010564:	4972      	ldr	r1, [pc, #456]	@ (8010730 <showall+0x284>)
 8010566:	4618      	mov	r0, r3
 8010568:	f00c fe14 	bl	801d194 <siprintf>
 801056c:	e009      	b.n	8010582 <showall+0xd6>
	} else if (datawritten == 2) {
 801056e:	4b6e      	ldr	r3, [pc, #440]	@ (8010728 <showall+0x27c>)
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d105      	bne.n	8010582 <showall+0xd6>

		sprintf(buff_filewritten, " **FAILED** ");
 8010576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801057a:	496e      	ldr	r1, [pc, #440]	@ (8010734 <showall+0x288>)
 801057c:	4618      	mov	r0, r3
 801057e:	f00c fe09 	bl	801d194 <siprintf>
	}

	cli_printf(cli, "");
 8010582:	496d      	ldr	r1, [pc, #436]	@ (8010738 <showall+0x28c>)
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f7fe fdcf 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 801058a:	496b      	ldr	r1, [pc, #428]	@ (8010738 <showall+0x28c>)
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	f7fe fdcb 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010592:	4969      	ldr	r1, [pc, #420]	@ (8010738 <showall+0x28c>)
 8010594:	68f8      	ldr	r0, [r7, #12]
 8010596:	f7fe fdc7 	bl	800f128 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 801059a:	f7f1 ff0f 	bl	80023bc <ver_GetUid>
 801059e:	4603      	mov	r3, r0
 80105a0:	461a      	mov	r2, r3
 80105a2:	4966      	ldr	r1, [pc, #408]	@ (801073c <showall+0x290>)
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f7fe fdbf 	bl	800f128 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 80105aa:	4a65      	ldr	r2, [pc, #404]	@ (8010740 <showall+0x294>)
 80105ac:	4965      	ldr	r1, [pc, #404]	@ (8010744 <showall+0x298>)
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f7fe fdba 	bl	800f128 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80105b4:	7c3b      	ldrb	r3, [r7, #16]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80105b6:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80105b8:	7c7b      	ldrb	r3, [r7, #17]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80105ba:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80105bc:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	460b      	mov	r3, r1
 80105c2:	4961      	ldr	r1, [pc, #388]	@ (8010748 <showall+0x29c>)
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f7fe fdaf 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 80105ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80105ce:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 80105d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80105d4:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 80105d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	460b      	mov	r3, r1
 80105de:	495b      	ldr	r1, [pc, #364]	@ (801074c <showall+0x2a0>)
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7fe fda1 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 80105e6:	4a5a      	ldr	r2, [pc, #360]	@ (8010750 <showall+0x2a4>)
 80105e8:	495a      	ldr	r1, [pc, #360]	@ (8010754 <showall+0x2a8>)
 80105ea:	68f8      	ldr	r0, [r7, #12]
 80105ec:	f7fe fd9c 	bl	800f128 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 80105f0:	4a59      	ldr	r2, [pc, #356]	@ (8010758 <showall+0x2ac>)
 80105f2:	495a      	ldr	r1, [pc, #360]	@ (801075c <showall+0x2b0>)
 80105f4:	68f8      	ldr	r0, [r7, #12]
 80105f6:	f7fe fd97 	bl	800f128 <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 80105fa:	4a59      	ldr	r2, [pc, #356]	@ (8010760 <showall+0x2b4>)
 80105fc:	4959      	ldr	r1, [pc, #356]	@ (8010764 <showall+0x2b8>)
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f7fe fd92 	bl	800f128 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8010604:	4a58      	ldr	r2, [pc, #352]	@ (8010768 <showall+0x2bc>)
 8010606:	4959      	ldr	r1, [pc, #356]	@ (801076c <showall+0x2c0>)
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f7fe fd8d 	bl	800f128 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 801060e:	4b58      	ldr	r3, [pc, #352]	@ (8010770 <showall+0x2c4>)
 8010610:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010614:	461a      	mov	r2, r3
 8010616:	4957      	ldr	r1, [pc, #348]	@ (8010774 <showall+0x2c8>)
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f7fe fd85 	bl	800f128 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 801061e:	4b3c      	ldr	r3, [pc, #240]	@ (8010710 <showall+0x264>)
 8010620:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 8010622:	4618      	mov	r0, r3
 8010624:	f7ef ffa8 	bl	8000578 <__aeabi_f2d>
 8010628:	4602      	mov	r2, r0
 801062a:	460b      	mov	r3, r1
 801062c:	4952      	ldr	r1, [pc, #328]	@ (8010778 <showall+0x2cc>)
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f7fe fd7a 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 8010634:	4b36      	ldr	r3, [pc, #216]	@ (8010710 <showall+0x264>)
 8010636:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8010638:	4618      	mov	r0, r3
 801063a:	f7ef ff9d 	bl	8000578 <__aeabi_f2d>
 801063e:	4602      	mov	r2, r0
 8010640:	460b      	mov	r3, r1
 8010642:	494e      	ldr	r1, [pc, #312]	@ (801077c <showall+0x2d0>)
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7fe fd6f 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 801064a:	4b31      	ldr	r3, [pc, #196]	@ (8010710 <showall+0x264>)
 801064c:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 801064e:	4618      	mov	r0, r3
 8010650:	f7ef ff92 	bl	8000578 <__aeabi_f2d>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	4949      	ldr	r1, [pc, #292]	@ (8010780 <showall+0x2d4>)
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f7fe fd64 	bl	800f128 <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8010660:	4b2b      	ldr	r3, [pc, #172]	@ (8010710 <showall+0x264>)
 8010662:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 8010664:	2b01      	cmp	r3, #1
 8010666:	d101      	bne.n	801066c <showall+0x1c0>
 8010668:	4b46      	ldr	r3, [pc, #280]	@ (8010784 <showall+0x2d8>)
 801066a:	e000      	b.n	801066e <showall+0x1c2>
 801066c:	4b46      	ldr	r3, [pc, #280]	@ (8010788 <showall+0x2dc>)
 801066e:	461a      	mov	r2, r3
 8010670:	4946      	ldr	r1, [pc, #280]	@ (801078c <showall+0x2e0>)
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7fe fd58 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 8010678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801067c:	461a      	mov	r2, r3
 801067e:	4944      	ldr	r1, [pc, #272]	@ (8010790 <showall+0x2e4>)
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f7fe fd51 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 8010686:	4943      	ldr	r1, [pc, #268]	@ (8010794 <showall+0x2e8>)
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f7fe fd4d 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 801068e:	4b20      	ldr	r3, [pc, #128]	@ (8010710 <showall+0x264>)
 8010690:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 8010692:	4618      	mov	r0, r3
 8010694:	f7ef ff70 	bl	8000578 <__aeabi_f2d>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	493e      	ldr	r1, [pc, #248]	@ (8010798 <showall+0x2ec>)
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	f7fe fd42 	bl	800f128 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 80106a4:	4b3d      	ldr	r3, [pc, #244]	@ (801079c <showall+0x2f0>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	461d      	mov	r5, r3
 80106aa:	4b3d      	ldr	r3, [pc, #244]	@ (80107a0 <showall+0x2f4>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	461e      	mov	r6, r3
 80106b0:	4b3c      	ldr	r3, [pc, #240]	@ (80107a4 <showall+0x2f8>)
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	461a      	mov	r2, r3
 80106b6:	4b3c      	ldr	r3, [pc, #240]	@ (80107a8 <showall+0x2fc>)
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	4619      	mov	r1, r3
 80106bc:	4b3b      	ldr	r3, [pc, #236]	@ (80107ac <showall+0x300>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	4618      	mov	r0, r3
 80106c2:	4b3b      	ldr	r3, [pc, #236]	@ (80107b0 <showall+0x304>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	461c      	mov	r4, r3
 80106c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80106cc:	9305      	str	r3, [sp, #20]
 80106ce:	4b22      	ldr	r3, [pc, #136]	@ (8010758 <showall+0x2ac>)
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	9403      	str	r4, [sp, #12]
 80106d4:	9002      	str	r0, [sp, #8]
 80106d6:	9101      	str	r1, [sp, #4]
 80106d8:	9200      	str	r2, [sp, #0]
 80106da:	4633      	mov	r3, r6
 80106dc:	462a      	mov	r2, r5
 80106de:	4935      	ldr	r1, [pc, #212]	@ (80107b4 <showall+0x308>)
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f7fe fd21 	bl	800f128 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 80106e6:	4a34      	ldr	r2, [pc, #208]	@ (80107b8 <showall+0x30c>)
 80106e8:	4934      	ldr	r1, [pc, #208]	@ (80107bc <showall+0x310>)
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7fe fd1c 	bl	800f128 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 80106f0:	4911      	ldr	r1, [pc, #68]	@ (8010738 <showall+0x28c>)
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f7fe fd18 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 80106f8:	490f      	ldr	r1, [pc, #60]	@ (8010738 <showall+0x28c>)
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7fe fd14 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010700:	490d      	ldr	r1, [pc, #52]	@ (8010738 <showall+0x28c>)
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	f7fe fd10 	bl	800f128 <cli_printf>
}
 8010708:	bf00      	nop
 801070a:	3774      	adds	r7, #116	@ 0x74
 801070c:	46bd      	mov	sp, r7
 801070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010710:	20001550 	.word	0x20001550
 8010714:	08021400 	.word	0x08021400
 8010718:	0802140c 	.word	0x0802140c
 801071c:	20001570 	.word	0x20001570
 8010720:	40020000 	.word	0x40020000
 8010724:	200018b4 	.word	0x200018b4
 8010728:	2000233c 	.word	0x2000233c
 801072c:	08021414 	.word	0x08021414
 8010730:	0802142c 	.word	0x0802142c
 8010734:	08021440 	.word	0x08021440
 8010738:	08021450 	.word	0x08021450
 801073c:	08021454 	.word	0x08021454
 8010740:	200013bd 	.word	0x200013bd
 8010744:	08021484 	.word	0x08021484
 8010748:	080214b4 	.word	0x080214b4
 801074c:	080214e4 	.word	0x080214e4
 8010750:	200013ef 	.word	0x200013ef
 8010754:	08021514 	.word	0x08021514
 8010758:	200014e9 	.word	0x200014e9
 801075c:	08021544 	.word	0x08021544
 8010760:	20001354 	.word	0x20001354
 8010764:	08021574 	.word	0x08021574
 8010768:	20001453 	.word	0x20001453
 801076c:	080215a4 	.word	0x080215a4
 8010770:	200012f0 	.word	0x200012f0
 8010774:	080215d4 	.word	0x080215d4
 8010778:	08021608 	.word	0x08021608
 801077c:	0802163c 	.word	0x0802163c
 8010780:	08021670 	.word	0x08021670
 8010784:	08021314 	.word	0x08021314
 8010788:	0802131c 	.word	0x0802131c
 801078c:	080216a4 	.word	0x080216a4
 8010790:	080216d4 	.word	0x080216d4
 8010794:	08021704 	.word	0x08021704
 8010798:	08021734 	.word	0x08021734
 801079c:	20002336 	.word	0x20002336
 80107a0:	20002337 	.word	0x20002337
 80107a4:	20002338 	.word	0x20002338
 80107a8:	20002339 	.word	0x20002339
 80107ac:	2000233a 	.word	0x2000233a
 80107b0:	2000233b 	.word	0x2000233b
 80107b4:	08021764 	.word	0x08021764
 80107b8:	2000002c 	.word	0x2000002c
 80107bc:	080217cc 	.word	0x080217cc

080107c0 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80107cc:	4911      	ldr	r1, [pc, #68]	@ (8010814 <systemversion+0x54>)
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7fe fcaa 	bl	800f128 <cli_printf>
		cli_printf(cli, "");
 80107d4:	490f      	ldr	r1, [pc, #60]	@ (8010814 <systemversion+0x54>)
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7fe fca6 	bl	800f128 <cli_printf>
		cli_printf(cli, "");
 80107dc:	490d      	ldr	r1, [pc, #52]	@ (8010814 <systemversion+0x54>)
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f7fe fca2 	bl	800f128 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 80107e4:	490c      	ldr	r1, [pc, #48]	@ (8010818 <systemversion+0x58>)
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f7fe fc9e 	bl	800f128 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 80107ec:	490b      	ldr	r1, [pc, #44]	@ (801081c <systemversion+0x5c>)
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7fe fc9a 	bl	800f128 <cli_printf>

		cli_printf(cli, "");
 80107f4:	4907      	ldr	r1, [pc, #28]	@ (8010814 <systemversion+0x54>)
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7fe fc96 	bl	800f128 <cli_printf>
			cli_printf(cli, "");
 80107fc:	4905      	ldr	r1, [pc, #20]	@ (8010814 <systemversion+0x54>)
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7fe fc92 	bl	800f128 <cli_printf>
			cli_printf(cli, "");
 8010804:	4903      	ldr	r1, [pc, #12]	@ (8010814 <systemversion+0x54>)
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	f7fe fc8e 	bl	800f128 <cli_printf>

}
 801080c:	bf00      	nop
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	08021450 	.word	0x08021450
 8010818:	080217fc 	.word	0x080217fc
 801081c:	08021834 	.word	0x08021834

08010820 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 801082c:	4917      	ldr	r1, [pc, #92]	@ (801088c <aboutDev+0x6c>)
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f7fe fc7a 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010834:	4915      	ldr	r1, [pc, #84]	@ (801088c <aboutDev+0x6c>)
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7fe fc76 	bl	800f128 <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 801083c:	4914      	ldr	r1, [pc, #80]	@ (8010890 <aboutDev+0x70>)
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f7fe fc72 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010844:	4911      	ldr	r1, [pc, #68]	@ (801088c <aboutDev+0x6c>)
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f7fe fc6e 	bl	800f128 <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 801084c:	4911      	ldr	r1, [pc, #68]	@ (8010894 <aboutDev+0x74>)
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7fe fc6a 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010854:	490d      	ldr	r1, [pc, #52]	@ (801088c <aboutDev+0x6c>)
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f7fe fc66 	bl	800f128 <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 801085c:	490e      	ldr	r1, [pc, #56]	@ (8010898 <aboutDev+0x78>)
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7fe fc62 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010864:	4909      	ldr	r1, [pc, #36]	@ (801088c <aboutDev+0x6c>)
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f7fe fc5e 	bl	800f128 <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 801086c:	490b      	ldr	r1, [pc, #44]	@ (801089c <aboutDev+0x7c>)
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f7fe fc5a 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 8010874:	4905      	ldr	r1, [pc, #20]	@ (801088c <aboutDev+0x6c>)
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f7fe fc56 	bl	800f128 <cli_printf>
	cli_printf(cli, "");
 801087c:	4903      	ldr	r1, [pc, #12]	@ (801088c <aboutDev+0x6c>)
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7fe fc52 	bl	800f128 <cli_printf>
}
 8010884:	bf00      	nop
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	08021450 	.word	0x08021450
 8010890:	0802186c 	.word	0x0802186c
 8010894:	08021894 	.word	0x08021894
 8010898:	080218bc 	.word	0x080218bc
 801089c:	080218d0 	.word	0x080218d0

080108a0 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80108a0:	b5b0      	push	{r4, r5, r7, lr}
 80108a2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80108a6:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80108a8:	f000 fd0f 	bl	80112ca <embeddedCliNewDefault>
 80108ac:	4603      	mov	r3, r0
 80108ae:	4aaa      	ldr	r2, [pc, #680]	@ (8010b58 <initializeEmbeddedCli+0x2b8>)
 80108b0:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80108b2:	4baa      	ldr	r3, [pc, #680]	@ (8010b5c <initializeEmbeddedCli+0x2bc>)
 80108b4:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 80108b8:	461d      	mov	r5, r3
 80108ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80108c2:	4ba7      	ldr	r3, [pc, #668]	@ (8010b60 <initializeEmbeddedCli+0x2c0>)
 80108c4:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80108c8:	461d      	mov	r5, r3
 80108ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ce:	682b      	ldr	r3, [r5, #0]
 80108d0:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80108d2:	4ba4      	ldr	r3, [pc, #656]	@ (8010b64 <initializeEmbeddedCli+0x2c4>)
 80108d4:	f507 7411 	add.w	r4, r7, #580	@ 0x244
 80108d8:	461d      	mov	r5, r3
 80108da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108de:	682b      	ldr	r3, [r5, #0]
 80108e0:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80108e2:	4ba1      	ldr	r3, [pc, #644]	@ (8010b68 <initializeEmbeddedCli+0x2c8>)
 80108e4:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 80108e8:	461d      	mov	r5, r3
 80108ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ee:	682b      	ldr	r3, [r5, #0]
 80108f0:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 80108f2:	4b9e      	ldr	r3, [pc, #632]	@ (8010b6c <initializeEmbeddedCli+0x2cc>)
 80108f4:	f507 7407 	add.w	r4, r7, #540	@ 0x21c
 80108f8:	461d      	mov	r5, r3
 80108fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108fe:	682b      	ldr	r3, [r5, #0]
 8010900:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 8010902:	4b9b      	ldr	r3, [pc, #620]	@ (8010b70 <initializeEmbeddedCli+0x2d0>)
 8010904:	f507 7402 	add.w	r4, r7, #520	@ 0x208
 8010908:	461d      	mov	r5, r3
 801090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801090e:	682b      	ldr	r3, [r5, #0]
 8010910:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 8010912:	4b98      	ldr	r3, [pc, #608]	@ (8010b74 <initializeEmbeddedCli+0x2d4>)
 8010914:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 8010918:	461d      	mov	r5, r3
 801091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 8010922:	4b95      	ldr	r3, [pc, #596]	@ (8010b78 <initializeEmbeddedCli+0x2d8>)
 8010924:	f507 74f0 	add.w	r4, r7, #480	@ 0x1e0
 8010928:	461d      	mov	r5, r3
 801092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801092e:	682b      	ldr	r3, [r5, #0]
 8010930:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 8010932:	4b92      	ldr	r3, [pc, #584]	@ (8010b7c <initializeEmbeddedCli+0x2dc>)
 8010934:	f507 74e6 	add.w	r4, r7, #460	@ 0x1cc
 8010938:	461d      	mov	r5, r3
 801093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801093e:	682b      	ldr	r3, [r5, #0]
 8010940:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 8010942:	4b8f      	ldr	r3, [pc, #572]	@ (8010b80 <initializeEmbeddedCli+0x2e0>)
 8010944:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8010948:	461d      	mov	r5, r3
 801094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801094e:	682b      	ldr	r3, [r5, #0]
 8010950:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 8010952:	4b8c      	ldr	r3, [pc, #560]	@ (8010b84 <initializeEmbeddedCli+0x2e4>)
 8010954:	f507 74d2 	add.w	r4, r7, #420	@ 0x1a4
 8010958:	461d      	mov	r5, r3
 801095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801095e:	682b      	ldr	r3, [r5, #0]
 8010960:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8010962:	4b89      	ldr	r3, [pc, #548]	@ (8010b88 <initializeEmbeddedCli+0x2e8>)
 8010964:	f507 74c8 	add.w	r4, r7, #400	@ 0x190
 8010968:	461d      	mov	r5, r3
 801096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801096e:	682b      	ldr	r3, [r5, #0]
 8010970:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 8010972:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801097a:	4a84      	ldr	r2, [pc, #528]	@ (8010b8c <initializeEmbeddedCli+0x2ec>)
 801097c:	461c      	mov	r4, r3
 801097e:	4615      	mov	r5, r2
 8010980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010984:	682b      	ldr	r3, [r5, #0]
 8010986:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8010988:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 801098c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010990:	4a7f      	ldr	r2, [pc, #508]	@ (8010b90 <initializeEmbeddedCli+0x2f0>)
 8010992:	461c      	mov	r4, r3
 8010994:	4615      	mov	r5, r2
 8010996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801099a:	682b      	ldr	r3, [r5, #0]
 801099c:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 801099e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80109a6:	4a7b      	ldr	r2, [pc, #492]	@ (8010b94 <initializeEmbeddedCli+0x2f4>)
 80109a8:	461c      	mov	r4, r3
 80109aa:	4615      	mov	r5, r2
 80109ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80109b4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80109bc:	4a76      	ldr	r2, [pc, #472]	@ (8010b98 <initializeEmbeddedCli+0x2f8>)
 80109be:	461c      	mov	r4, r3
 80109c0:	4615      	mov	r5, r2
 80109c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109c6:	682b      	ldr	r3, [r5, #0]
 80109c8:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80109ca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80109d2:	4a72      	ldr	r2, [pc, #456]	@ (8010b9c <initializeEmbeddedCli+0x2fc>)
 80109d4:	461c      	mov	r4, r3
 80109d6:	4615      	mov	r5, r2
 80109d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80109e0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80109e8:	4a6d      	ldr	r2, [pc, #436]	@ (8010ba0 <initializeEmbeddedCli+0x300>)
 80109ea:	461c      	mov	r4, r3
 80109ec:	4615      	mov	r5, r2
 80109ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109f2:	682b      	ldr	r3, [r5, #0]
 80109f4:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 80109f6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80109fa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80109fe:	4a69      	ldr	r2, [pc, #420]	@ (8010ba4 <initializeEmbeddedCli+0x304>)
 8010a00:	461c      	mov	r4, r3
 8010a02:	4615      	mov	r5, r2
 8010a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a08:	682b      	ldr	r3, [r5, #0]
 8010a0a:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8010a0c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010a14:	4a64      	ldr	r2, [pc, #400]	@ (8010ba8 <initializeEmbeddedCli+0x308>)
 8010a16:	461c      	mov	r4, r3
 8010a18:	4615      	mov	r5, r2
 8010a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a1e:	682b      	ldr	r3, [r5, #0]
 8010a20:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 8010a22:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a26:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010a2a:	4a60      	ldr	r2, [pc, #384]	@ (8010bac <initializeEmbeddedCli+0x30c>)
 8010a2c:	461c      	mov	r4, r3
 8010a2e:	4615      	mov	r5, r2
 8010a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8010a38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a3c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8010a40:	4a5b      	ldr	r2, [pc, #364]	@ (8010bb0 <initializeEmbeddedCli+0x310>)
 8010a42:	461c      	mov	r4, r3
 8010a44:	4615      	mov	r5, r2
 8010a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a4a:	682b      	ldr	r3, [r5, #0]
 8010a4c:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8010a4e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a52:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010a56:	4a57      	ldr	r2, [pc, #348]	@ (8010bb4 <initializeEmbeddedCli+0x314>)
 8010a58:	461c      	mov	r4, r3
 8010a5a:	4615      	mov	r5, r2
 8010a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a60:	682b      	ldr	r3, [r5, #0]
 8010a62:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8010a64:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010a6c:	4a52      	ldr	r2, [pc, #328]	@ (8010bb8 <initializeEmbeddedCli+0x318>)
 8010a6e:	461c      	mov	r4, r3
 8010a70:	4615      	mov	r5, r2
 8010a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a76:	682b      	ldr	r3, [r5, #0]
 8010a78:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8010a7a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a7e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8010a82:	4a4e      	ldr	r2, [pc, #312]	@ (8010bbc <initializeEmbeddedCli+0x31c>)
 8010a84:	461c      	mov	r4, r3
 8010a86:	4615      	mov	r5, r2
 8010a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8010a90:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010a94:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010a98:	4a49      	ldr	r2, [pc, #292]	@ (8010bc0 <initializeEmbeddedCli+0x320>)
 8010a9a:	461c      	mov	r4, r3
 8010a9c:	4615      	mov	r5, r2
 8010a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aa2:	682b      	ldr	r3, [r5, #0]
 8010aa4:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8010aa6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010aaa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8010aae:	4a45      	ldr	r2, [pc, #276]	@ (8010bc4 <initializeEmbeddedCli+0x324>)
 8010ab0:	461c      	mov	r4, r3
 8010ab2:	4615      	mov	r5, r2
 8010ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8010abc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010ac0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010ac4:	4a40      	ldr	r2, [pc, #256]	@ (8010bc8 <initializeEmbeddedCli+0x328>)
 8010ac6:	461c      	mov	r4, r3
 8010ac8:	4615      	mov	r5, r2
 8010aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ace:	682b      	ldr	r3, [r5, #0]
 8010ad0:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8010ad2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010ad6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8010ada:	4a3c      	ldr	r2, [pc, #240]	@ (8010bcc <initializeEmbeddedCli+0x32c>)
 8010adc:	461c      	mov	r4, r3
 8010ade:	4615      	mov	r5, r2
 8010ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8010ae8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010aec:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8010af0:	4a37      	ldr	r2, [pc, #220]	@ (8010bd0 <initializeEmbeddedCli+0x330>)
 8010af2:	461c      	mov	r4, r3
 8010af4:	4615      	mov	r5, r2
 8010af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010afa:	682b      	ldr	r3, [r5, #0]
 8010afc:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8010afe:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b02:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010b06:	4a33      	ldr	r2, [pc, #204]	@ (8010bd4 <initializeEmbeddedCli+0x334>)
 8010b08:	461c      	mov	r4, r3
 8010b0a:	4615      	mov	r5, r2
 8010b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8010b14:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010b18:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8010bd8 <initializeEmbeddedCli+0x338>)
 8010b1e:	461c      	mov	r4, r3
 8010b20:	4615      	mov	r5, r2
 8010b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b26:	682b      	ldr	r3, [r5, #0]
 8010b28:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8010b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010b58 <initializeEmbeddedCli+0x2b8>)
 8010b2c:	681c      	ldr	r4, [r3, #0]
 8010b2e:	466a      	mov	r2, sp
 8010b30:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8010b34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b38:	e882 0003 	stmia.w	r2, {r0, r1}
 8010b3c:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8010b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b42:	4620      	mov	r0, r4
 8010b44:	f000 fc7f 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8010b48:	4b03      	ldr	r3, [pc, #12]	@ (8010b58 <initializeEmbeddedCli+0x2b8>)
 8010b4a:	681c      	ldr	r4, [r3, #0]
 8010b4c:	466a      	mov	r2, sp
 8010b4e:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8010b52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b56:	e041      	b.n	8010bdc <initializeEmbeddedCli+0x33c>
 8010b58:	20001b40 	.word	0x20001b40
 8010b5c:	08021908 	.word	0x08021908
 8010b60:	0802195c 	.word	0x0802195c
 8010b64:	080219c4 	.word	0x080219c4
 8010b68:	08021a04 	.word	0x08021a04
 8010b6c:	08021a64 	.word	0x08021a64
 8010b70:	08021ab4 	.word	0x08021ab4
 8010b74:	08021ad8 	.word	0x08021ad8
 8010b78:	08021b0c 	.word	0x08021b0c
 8010b7c:	08021b38 	.word	0x08021b38
 8010b80:	08021b6c 	.word	0x08021b6c
 8010b84:	08021b98 	.word	0x08021b98
 8010b88:	08021bcc 	.word	0x08021bcc
 8010b8c:	08021c00 	.word	0x08021c00
 8010b90:	08021c4c 	.word	0x08021c4c
 8010b94:	08021c84 	.word	0x08021c84
 8010b98:	08021ce8 	.word	0x08021ce8
 8010b9c:	08021d1c 	.word	0x08021d1c
 8010ba0:	08021d58 	.word	0x08021d58
 8010ba4:	08021d8c 	.word	0x08021d8c
 8010ba8:	08021dcc 	.word	0x08021dcc
 8010bac:	08021e0c 	.word	0x08021e0c
 8010bb0:	08021e44 	.word	0x08021e44
 8010bb4:	08021e78 	.word	0x08021e78
 8010bb8:	08021ec0 	.word	0x08021ec0
 8010bbc:	08021f08 	.word	0x08021f08
 8010bc0:	08021f50 	.word	0x08021f50
 8010bc4:	08021f88 	.word	0x08021f88
 8010bc8:	08021fec 	.word	0x08021fec
 8010bcc:	08022018 	.word	0x08022018
 8010bd0:	08022050 	.word	0x08022050
 8010bd4:	08022094 	.word	0x08022094
 8010bd8:	080220cc 	.word	0x080220cc
 8010bdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8010be0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8010be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010be6:	4620      	mov	r0, r4
 8010be8:	f000 fc2d 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8010bec:	4bd6      	ldr	r3, [pc, #856]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010bee:	681c      	ldr	r4, [r3, #0]
 8010bf0:	466a      	mov	r2, sp
 8010bf2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8010bf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010bfa:	e882 0003 	stmia.w	r2, {r0, r1}
 8010bfe:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8010c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c04:	4620      	mov	r0, r4
 8010c06:	f000 fc1e 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010c0a:	4bcf      	ldr	r3, [pc, #828]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010c0c:	681c      	ldr	r4, [r3, #0]
 8010c0e:	466a      	mov	r2, sp
 8010c10:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8010c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c18:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c1c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8010c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 fc0f 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8010c28:	4bc7      	ldr	r3, [pc, #796]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010c2a:	681c      	ldr	r4, [r3, #0]
 8010c2c:	466a      	mov	r2, sp
 8010c2e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8010c32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c36:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c3a:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8010c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c40:	4620      	mov	r0, r4
 8010c42:	f000 fc00 	bl	8011446 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8010c46:	4bc0      	ldr	r3, [pc, #768]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010c48:	681c      	ldr	r4, [r3, #0]
 8010c4a:	466a      	mov	r2, sp
 8010c4c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8010c50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c54:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8010c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f000 fbf1 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8010c64:	4bb8      	ldr	r3, [pc, #736]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010c66:	681c      	ldr	r4, [r3, #0]
 8010c68:	466a      	mov	r2, sp
 8010c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8010c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c72:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c76:	f507 73fa 	add.w	r3, r7, #500	@ 0x1f4
 8010c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f000 fbe2 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8010c82:	4bb1      	ldr	r3, [pc, #708]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010c84:	681c      	ldr	r4, [r3, #0]
 8010c86:	466a      	mov	r2, sp
 8010c88:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8010c8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c90:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c94:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8010c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f000 fbd3 	bl	8011446 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8010ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010ca2:	681c      	ldr	r4, [r3, #0]
 8010ca4:	466a      	mov	r2, sp
 8010ca6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010cae:	e882 0003 	stmia.w	r2, {r0, r1}
 8010cb2:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8010cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f000 fbc4 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8010cbe:	4ba2      	ldr	r3, [pc, #648]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010cc0:	681c      	ldr	r4, [r3, #0]
 8010cc2:	466a      	mov	r2, sp
 8010cc4:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8010cc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010ccc:	e882 0003 	stmia.w	r2, {r0, r1}
 8010cd0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8010cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f000 fbb5 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8010cdc:	4b9a      	ldr	r3, [pc, #616]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010cde:	681c      	ldr	r4, [r3, #0]
 8010ce0:	466a      	mov	r2, sp
 8010ce2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8010ce6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010cea:	e882 0003 	stmia.w	r2, {r0, r1}
 8010cee:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8010cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 fba6 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8010cfa:	4b93      	ldr	r3, [pc, #588]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010cfc:	681c      	ldr	r4, [r3, #0]
 8010cfe:	466a      	mov	r2, sp
 8010d00:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8010d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010d08:	e882 0003 	stmia.w	r2, {r0, r1}
 8010d0c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 fb97 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010d18:	4b8b      	ldr	r3, [pc, #556]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010d1a:	681c      	ldr	r4, [r3, #0]
 8010d1c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010d24:	466d      	mov	r5, sp
 8010d26:	f103 020c 	add.w	r2, r3, #12
 8010d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d34:	4620      	mov	r0, r4
 8010d36:	f000 fb86 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8010d3a:	4b83      	ldr	r3, [pc, #524]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010d3c:	681c      	ldr	r4, [r3, #0]
 8010d3e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010d46:	466d      	mov	r5, sp
 8010d48:	f103 020c 	add.w	r2, r3, #12
 8010d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 fb75 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010d5c:	4b7a      	ldr	r3, [pc, #488]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010d5e:	681c      	ldr	r4, [r3, #0]
 8010d60:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d68:	466d      	mov	r5, sp
 8010d6a:	f103 020c 	add.w	r2, r3, #12
 8010d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 fb64 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010d7e:	4b72      	ldr	r3, [pc, #456]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010d80:	681c      	ldr	r4, [r3, #0]
 8010d82:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010d86:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8010d8a:	466d      	mov	r5, sp
 8010d8c:	f103 020c 	add.w	r2, r3, #12
 8010d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8010d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f000 fb53 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010da0:	4b69      	ldr	r3, [pc, #420]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010da2:	681c      	ldr	r4, [r3, #0]
 8010da4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010da8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8010dac:	466d      	mov	r5, sp
 8010dae:	f103 020c 	add.w	r2, r3, #12
 8010db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f000 fb42 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8010dc2:	4b61      	ldr	r3, [pc, #388]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010dc4:	681c      	ldr	r4, [r3, #0]
 8010dc6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010dca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8010dce:	466d      	mov	r5, sp
 8010dd0:	f103 020c 	add.w	r2, r3, #12
 8010dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010dde:	4620      	mov	r0, r4
 8010de0:	f000 fb31 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010de4:	4b58      	ldr	r3, [pc, #352]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010de6:	681c      	ldr	r4, [r3, #0]
 8010de8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010dec:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8010df0:	466d      	mov	r5, sp
 8010df2:	f103 020c 	add.w	r2, r3, #12
 8010df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8010dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e00:	4620      	mov	r0, r4
 8010e02:	f000 fb20 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8010e06:	4b50      	ldr	r3, [pc, #320]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010e08:	681c      	ldr	r4, [r3, #0]
 8010e0a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e0e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8010e12:	466d      	mov	r5, sp
 8010e14:	f103 020c 	add.w	r2, r3, #12
 8010e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 fb0f 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010e28:	4b47      	ldr	r3, [pc, #284]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010e2a:	681c      	ldr	r4, [r3, #0]
 8010e2c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e30:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8010e34:	466d      	mov	r5, sp
 8010e36:	f103 020c 	add.w	r2, r3, #12
 8010e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e44:	4620      	mov	r0, r4
 8010e46:	f000 fafe 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010e4c:	681c      	ldr	r4, [r3, #0]
 8010e4e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e52:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8010e56:	466d      	mov	r5, sp
 8010e58:	f103 020c 	add.w	r2, r3, #12
 8010e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 faed 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010e6c:	4b36      	ldr	r3, [pc, #216]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010e6e:	681c      	ldr	r4, [r3, #0]
 8010e70:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e74:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010e78:	466d      	mov	r5, sp
 8010e7a:	f103 020c 	add.w	r2, r3, #12
 8010e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8010e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f000 fadc 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010e90:	681c      	ldr	r4, [r3, #0]
 8010e92:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010e96:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8010e9a:	466d      	mov	r5, sp
 8010e9c:	f103 020c 	add.w	r2, r3, #12
 8010ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ea4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f000 facb 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010eb0:	4b25      	ldr	r3, [pc, #148]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010eb2:	681c      	ldr	r4, [r3, #0]
 8010eb4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010eb8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8010ebc:	466d      	mov	r5, sp
 8010ebe:	f103 020c 	add.w	r2, r3, #12
 8010ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8010eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f000 faba 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010ed4:	681c      	ldr	r4, [r3, #0]
 8010ed6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010eda:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010ede:	466d      	mov	r5, sp
 8010ee0:	f103 020c 	add.w	r2, r3, #12
 8010ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8010eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 faa9 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8010ef4:	4b14      	ldr	r3, [pc, #80]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010ef6:	681c      	ldr	r4, [r3, #0]
 8010ef8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010efc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8010f00:	466d      	mov	r5, sp
 8010f02:	f103 020c 	add.w	r2, r3, #12
 8010f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f10:	4620      	mov	r0, r4
 8010f12:	f000 fa98 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8010f16:	4b0c      	ldr	r3, [pc, #48]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010f18:	681c      	ldr	r4, [r3, #0]
 8010f1a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010f1e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8010f22:	466d      	mov	r5, sp
 8010f24:	f103 020c 	add.w	r2, r3, #12
 8010f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f32:	4620      	mov	r0, r4
 8010f34:	f000 fa87 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8010f38:	4b03      	ldr	r3, [pc, #12]	@ (8010f48 <initializeEmbeddedCli+0x6a8>)
 8010f3a:	681c      	ldr	r4, [r3, #0]
 8010f3c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010f40:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8010f44:	e002      	b.n	8010f4c <initializeEmbeddedCli+0x6ac>
 8010f46:	bf00      	nop
 8010f48:	20001b40 	.word	0x20001b40
 8010f4c:	466d      	mov	r5, sp
 8010f4e:	f103 020c 	add.w	r2, r3, #12
 8010f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 fa72 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 8010f62:	4b21      	ldr	r3, [pc, #132]	@ (8010fe8 <initializeEmbeddedCli+0x748>)
 8010f64:	681c      	ldr	r4, [r3, #0]
 8010f66:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010f6a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8010f6e:	466d      	mov	r5, sp
 8010f70:	f103 020c 	add.w	r2, r3, #12
 8010f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f000 fa61 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8010f84:	4b18      	ldr	r3, [pc, #96]	@ (8010fe8 <initializeEmbeddedCli+0x748>)
 8010f86:	681c      	ldr	r4, [r3, #0]
 8010f88:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010f8c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8010f90:	466d      	mov	r5, sp
 8010f92:	f103 020c 	add.w	r2, r3, #12
 8010f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fa50 	bl	8011446 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8010fa6:	4b10      	ldr	r3, [pc, #64]	@ (8010fe8 <initializeEmbeddedCli+0x748>)
 8010fa8:	681c      	ldr	r4, [r3, #0]
 8010faa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8010fae:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8010fb2:	466d      	mov	r5, sp
 8010fb4:	f103 020c 	add.w	r2, r3, #12
 8010fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8010fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 fa3f 	bl	8011446 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010fc8:	4b07      	ldr	r3, [pc, #28]	@ (8010fe8 <initializeEmbeddedCli+0x748>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a07      	ldr	r2, [pc, #28]	@ (8010fec <initializeEmbeddedCli+0x74c>)
 8010fce:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010fd0:	4b07      	ldr	r3, [pc, #28]	@ (8010ff0 <initializeEmbeddedCli+0x750>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010fd6:	4b07      	ldr	r3, [pc, #28]	@ (8010ff4 <initializeEmbeddedCli+0x754>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	701a      	strb	r2, [r3, #0]
}
 8010fdc:	bf00      	nop
 8010fde:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	20001b40 	.word	0x20001b40
 8010fec:	0800f0fd 	.word	0x0800f0fd
 8010ff0:	20001b4d 	.word	0x20001b4d
 8010ff4:	20001b4e 	.word	0x20001b4e

08010ff8 <console_process>:

void console_process(void) {
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010ffc:	4b03      	ldr	r3, [pc, #12]	@ (801100c <console_process+0x14>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4618      	mov	r0, r3
 8011002:	f000 f990 	bl	8011326 <embeddedCliProcess>
}
 8011006:	bf00      	nop
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	20001b40 	.word	0x20001b40

08011010 <console_uart_deinit>:

void console_uart_deinit() {
 8011010:	b580      	push	{r7, lr}
 8011012:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8011014:	4803      	ldr	r0, [pc, #12]	@ (8011024 <console_uart_deinit+0x14>)
 8011016:	f7fa fdbe 	bl	800bb96 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 801101a:	4802      	ldr	r0, [pc, #8]	@ (8011024 <console_uart_deinit+0x14>)
 801101c:	f7f2 fc5e 	bl	80038dc <HAL_UART_MspDeInit>
}
 8011020:	bf00      	nop
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20001a90 	.word	0x20001a90

08011028 <console_uart_init>:
void console_uart_init() {
 8011028:	b580      	push	{r7, lr}
 801102a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 801102c:	4815      	ldr	r0, [pc, #84]	@ (8011084 <console_uart_init+0x5c>)
 801102e:	f7fa fdb2 	bl	800bb96 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 8011032:	4b14      	ldr	r3, [pc, #80]	@ (8011084 <console_uart_init+0x5c>)
 8011034:	4a14      	ldr	r2, [pc, #80]	@ (8011088 <console_uart_init+0x60>)
 8011036:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8011038:	4b12      	ldr	r3, [pc, #72]	@ (8011084 <console_uart_init+0x5c>)
 801103a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801103e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011040:	4b10      	ldr	r3, [pc, #64]	@ (8011084 <console_uart_init+0x5c>)
 8011042:	2200      	movs	r2, #0
 8011044:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8011046:	4b0f      	ldr	r3, [pc, #60]	@ (8011084 <console_uart_init+0x5c>)
 8011048:	2200      	movs	r2, #0
 801104a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 801104c:	4b0d      	ldr	r3, [pc, #52]	@ (8011084 <console_uart_init+0x5c>)
 801104e:	2200      	movs	r2, #0
 8011050:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8011052:	4b0c      	ldr	r3, [pc, #48]	@ (8011084 <console_uart_init+0x5c>)
 8011054:	220c      	movs	r2, #12
 8011056:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011058:	4b0a      	ldr	r3, [pc, #40]	@ (8011084 <console_uart_init+0x5c>)
 801105a:	2200      	movs	r2, #0
 801105c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801105e:	4b09      	ldr	r3, [pc, #36]	@ (8011084 <console_uart_init+0x5c>)
 8011060:	2200      	movs	r2, #0
 8011062:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8011064:	4807      	ldr	r0, [pc, #28]	@ (8011084 <console_uart_init+0x5c>)
 8011066:	f7fa fd49 	bl	800bafc <HAL_UART_Init>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <console_uart_init+0x4c>
		Error_Handler();
 8011070:	f7f2 f912 	bl	8003298 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8011074:	2201      	movs	r2, #1
 8011076:	4905      	ldr	r1, [pc, #20]	@ (801108c <console_uart_init+0x64>)
 8011078:	4802      	ldr	r0, [pc, #8]	@ (8011084 <console_uart_init+0x5c>)
 801107a:	f7fa fe4d 	bl	800bd18 <HAL_UART_Receive_IT>
}
 801107e:	bf00      	nop
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	20001a90 	.word	0x20001a90
 8011088:	40011000 	.word	0x40011000
 801108c:	20001b4c 	.word	0x20001b4c

08011090 <console_init>:

void console_init(void) {
 8011090:	b580      	push	{r7, lr}
 8011092:	af00      	add	r7, sp, #0
	console_uart_init();
 8011094:	f7ff ffc8 	bl	8011028 <console_uart_init>
	initializeEmbeddedCli();
 8011098:	f7ff fc02 	bl	80108a0 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801109c:	2201      	movs	r2, #1
 801109e:	4903      	ldr	r1, [pc, #12]	@ (80110ac <console_init+0x1c>)
 80110a0:	4803      	ldr	r0, [pc, #12]	@ (80110b0 <console_init+0x20>)
 80110a2:	f7fa fe39 	bl	800bd18 <HAL_UART_Receive_IT>
}
 80110a6:	bf00      	nop
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	20001b4c 	.word	0x20001b4c
 80110b0:	20001a90 	.word	0x20001a90

080110b4 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 80110b8:	4b0e      	ldr	r3, [pc, #56]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110ba:	2240      	movs	r2, #64	@ 0x40
 80110bc:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80110be:	4b0d      	ldr	r3, [pc, #52]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110c0:	2240      	movs	r2, #64	@ 0x40
 80110c2:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 80110c4:	4b0b      	ldr	r3, [pc, #44]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110c6:	2280      	movs	r2, #128	@ 0x80
 80110c8:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80110ca:	4b0a      	ldr	r3, [pc, #40]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 80110d0:	4b08      	ldr	r3, [pc, #32]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 80110d6:	4b07      	ldr	r3, [pc, #28]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110d8:	2232      	movs	r2, #50	@ 0x32
 80110da:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 80110dc:	4b05      	ldr	r3, [pc, #20]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110de:	2201      	movs	r2, #1
 80110e0:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 80110e2:	4b04      	ldr	r3, [pc, #16]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
 80110e4:	4a04      	ldr	r2, [pc, #16]	@ (80110f8 <embeddedCliDefaultConfig+0x44>)
 80110e6:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 80110e8:	4b02      	ldr	r3, [pc, #8]	@ (80110f4 <embeddedCliDefaultConfig+0x40>)
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	20001b54 	.word	0x20001b54
 80110f8:	080220e4 	.word	0x080220e4

080110fc <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80110fc:	b480      	push	{r7}
 80110fe:	b085      	sub	sp, #20
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	895b      	ldrh	r3, [r3, #10]
 8011108:	2201      	movs	r2, #1
 801110a:	4413      	add	r3, r2
 801110c:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	889b      	ldrh	r3, [r3, #4]
 8011112:	3303      	adds	r3, #3
 8011114:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	88db      	ldrh	r3, [r3, #6]
 801111a:	3303      	adds	r3, #3
 801111c:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801111e:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	891b      	ldrh	r3, [r3, #8]
 8011124:	3303      	adds	r3, #3
 8011126:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8011128:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 801112a:	89fa      	ldrh	r2, [r7, #14]
 801112c:	4613      	mov	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4413      	add	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	3303      	adds	r3, #3
 8011136:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8011138:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 801113a:	89fb      	ldrh	r3, [r7, #14]
 801113c:	3303      	adds	r3, #3
 801113e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8011140:	4413      	add	r3, r2
 8011142:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8011144:	b29b      	uxth	r3, r3
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	b29b      	uxth	r3, r3
}
 801114a:	4618      	mov	r0, r3
 801114c:	3714      	adds	r7, #20
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr

08011156 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8011156:	b580      	push	{r7, lr}
 8011158:	b088      	sub	sp, #32
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 801115e:	2300      	movs	r3, #0
 8011160:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	895b      	ldrh	r3, [r3, #10]
 8011166:	2201      	movs	r2, #1
 8011168:	4413      	add	r3, r2
 801116a:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7ff ffc5 	bl	80110fc <embeddedCliRequiredSize>
 8011172:	4603      	mov	r3, r0
 8011174:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8011176:	2300      	movs	r3, #0
 8011178:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f00a fed2 	bl	801bf2c <malloc>
 8011188:	4603      	mov	r3, r0
 801118a:	461a      	mov	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d101      	bne.n	801119c <embeddedCliNew+0x46>
            return NULL;
 8011198:	2300      	movs	r3, #0
 801119a:	e092      	b.n	80112c2 <embeddedCliNew+0x16c>
        allocated = true;
 801119c:	2301      	movs	r3, #1
 801119e:	77fb      	strb	r3, [r7, #31]
 80111a0:	e007      	b.n	80111b2 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	8a1b      	ldrh	r3, [r3, #16]
 80111a6:	461a      	mov	r2, r3
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d901      	bls.n	80111b2 <embeddedCliNew+0x5c>
        return NULL;
 80111ae:	2300      	movs	r3, #0
 80111b0:	e087      	b.n	80112c2 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 80111b8:	693a      	ldr	r2, [r7, #16]
 80111ba:	2100      	movs	r1, #0
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f00c f933 	bl	801d428 <memset>

    cli = (EmbeddedCli *) buf;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	3310      	adds	r3, #16
 80111ca:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	68fa      	ldr	r2, [r7, #12]
 80111d0:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3334      	adds	r3, #52	@ 0x34
 80111d6:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	889b      	ldrh	r3, [r3, #4]
 80111e8:	3303      	adds	r3, #3
 80111ea:	f023 0303 	bic.w	r3, r3, #3
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	4413      	add	r3, r2
 80111f2:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	68fa      	ldr	r2, [r7, #12]
 80111f8:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	88db      	ldrh	r3, [r3, #6]
 80111fe:	3303      	adds	r3, #3
 8011200:	f023 0303 	bic.w	r3, r3, #3
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	4413      	add	r3, r2
 8011208:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8011210:	8afa      	ldrh	r2, [r7, #22]
 8011212:	4613      	mov	r3, r2
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	3303      	adds	r3, #3
 801121c:	f023 0303 	bic.w	r3, r3, #3
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	4413      	add	r3, r2
 8011224:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 801122c:	8afb      	ldrh	r3, [r7, #22]
 801122e:	3303      	adds	r3, #3
 8011230:	f023 0303 	bic.w	r3, r3, #3
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	4413      	add	r3, r2
 8011238:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	891a      	ldrh	r2, [r3, #8]
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8011248:	7ffb      	ldrb	r3, [r7, #31]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011254:	f043 0304 	orr.w	r3, r3, #4
 8011258:	b2da      	uxtb	r2, r3
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	7c9b      	ldrb	r3, [r3, #18]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d008      	beq.n	801127a <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801126e:	f043 0320 	orr.w	r3, r3, #32
 8011272:	b2da      	uxtb	r2, r3
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	889a      	ldrh	r2, [r3, #4]
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	2200      	movs	r2, #0
 8011286:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2200      	movs	r2, #0
 801128c:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	88da      	ldrh	r2, [r3, #6]
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	2200      	movs	r2, #0
 801129a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	895b      	ldrh	r3, [r3, #10]
 80112a0:	2201      	movs	r2, #1
 80112a2:	4413      	add	r3, r2
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 80112ba:	69b8      	ldr	r0, [r7, #24]
 80112bc:	f000 fc5e 	bl	8011b7c <initInternalBindings>

    return cli;
 80112c0:	69bb      	ldr	r3, [r7, #24]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3720      	adds	r7, #32
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80112ca:	b580      	push	{r7, lr}
 80112cc:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80112ce:	f7ff fef1 	bl	80110b4 <embeddedCliDefaultConfig>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff ff3e 	bl	8011156 <embeddedCliNew>
 80112da:	4603      	mov	r3, r0
}
 80112dc:	4618      	mov	r0, r3
 80112de:	bd80      	pop	{r7, pc}

080112e0 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	3310      	adds	r3, #16
 80112f6:	78fa      	ldrb	r2, [r7, #3]
 80112f8:	4611      	mov	r1, r2
 80112fa:	4618      	mov	r0, r3
 80112fc:	f001 f865 	bl	80123ca <fifoBufPush>
 8011300:	4603      	mov	r3, r0
 8011302:	f083 0301 	eor.w	r3, r3, #1
 8011306:	b2db      	uxtb	r3, r3
 8011308:	2b00      	cmp	r3, #0
 801130a:	d008      	beq.n	801131e <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011312:	f043 0301 	orr.w	r3, r3, #1
 8011316:	b2da      	uxtb	r2, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 801131e:	bf00      	nop
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8011326:	b580      	push	{r7, lr}
 8011328:	b084      	sub	sp, #16
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	f000 8083 	beq.w	801143e <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011344:	f003 0302 	and.w	r3, r3, #2
 8011348:	2b00      	cmp	r3, #0
 801134a:	d155      	bne.n	80113f8 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011352:	f043 0302 	orr.w	r3, r3, #2
 8011356:	b2da      	uxtb	r2, r3
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 ff8f 	bl	8012288 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 801136a:	e045      	b.n	80113f8 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	3310      	adds	r3, #16
 8011370:	4618      	mov	r0, r3
 8011372:	f001 f802 	bl	801237a <fifoBufPop>
 8011376:	4603      	mov	r3, r0
 8011378:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011380:	f003 0308 	and.w	r3, r3, #8
 8011384:	2b00      	cmp	r3, #0
 8011386:	d005      	beq.n	8011394 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8011388:	7afb      	ldrb	r3, [r7, #11]
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fa17 	bl	80117c0 <onEscapedInput>
 8011392:	e02a      	b.n	80113ea <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801139a:	2b1b      	cmp	r3, #27
 801139c:	d10c      	bne.n	80113b8 <embeddedCliProcess+0x92>
 801139e:	7afb      	ldrb	r3, [r7, #11]
 80113a0:	2b5b      	cmp	r3, #91	@ 0x5b
 80113a2:	d109      	bne.n	80113b8 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80113aa:	f043 0308 	orr.w	r3, r3, #8
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80113b6:	e018      	b.n	80113ea <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80113b8:	7afb      	ldrb	r3, [r7, #11]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f000 ff85 	bl	80122ca <isControlChar>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d005      	beq.n	80113d2 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80113c6:	7afb      	ldrb	r3, [r7, #11]
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 fa54 	bl	8011878 <onControlInput>
 80113d0:	e00b      	b.n	80113ea <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80113d2:	7afb      	ldrb	r3, [r7, #11]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f000 ff98 	bl	801230a <isDisplayableChar>
 80113da:	4603      	mov	r3, r0
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d004      	beq.n	80113ea <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80113e0:	7afb      	ldrb	r3, [r7, #11]
 80113e2:	4619      	mov	r1, r3
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 fa17 	bl	8011818 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f000 fe35 	bl	801205a <printLiveAutocompletion>

        impl->lastChar = c;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	7afa      	ldrb	r2, [r7, #11]
 80113f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	3310      	adds	r3, #16
 80113fc:	4618      	mov	r0, r3
 80113fe:	f000 ff9b 	bl	8012338 <fifoBufAvailable>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1b1      	bne.n	801136c <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	d014      	beq.n	8011440 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2200      	movs	r2, #0
 801141a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	69db      	ldr	r3, [r3, #28]
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	8c12      	ldrh	r2, [r2, #32]
 8011424:	4413      	add	r3, r2
 8011426:	2200      	movs	r2, #0
 8011428:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011430:	f023 0301 	bic.w	r3, r3, #1
 8011434:	b2da      	uxtb	r2, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 801143c:	e000      	b.n	8011440 <embeddedCliProcess+0x11a>
        return;
 801143e:	bf00      	nop
    }
}
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8011446:	b084      	sub	sp, #16
 8011448:	b4b0      	push	{r4, r5, r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011454:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011466:	429a      	cmp	r2, r3
 8011468:	d101      	bne.n	801146e <embeddedCliAddBinding+0x28>
        return false;
 801146a:	2300      	movs	r3, #0
 801146c:	e017      	b.n	801149e <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011476:	4619      	mov	r1, r3
 8011478:	460b      	mov	r3, r1
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	440b      	add	r3, r1
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	461d      	mov	r5, r3
 8011484:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8011488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801148c:	6823      	ldr	r3, [r4, #0]
 801148e:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011494:	3301      	adds	r3, #1
 8011496:	b29a      	uxth	r2, r3
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 801149c:	2301      	movs	r3, #1
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bcb0      	pop	{r4, r5, r7}
 80114a6:	b004      	add	sp, #16
 80114a8:	4770      	bx	lr
	...

080114ac <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d031      	beq.n	8011522 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80114ca:	f003 0310 	and.w	r3, r3, #16
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 fea6 	bl	8012224 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80114d8:	6839      	ldr	r1, [r7, #0]
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 fed4 	bl	8012288 <writeToOutput>
    writeToOutput(cli, lineBreak);
 80114e0:	4b12      	ldr	r3, [pc, #72]	@ (801152c <embeddedCliPrint+0x80>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 fece 	bl	8012288 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80114f2:	f003 0310 	and.w	r3, r3, #16
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d114      	bne.n	8011524 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	4619      	mov	r1, r3
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f000 fec1 	bl	8012288 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	69db      	ldr	r3, [r3, #28]
 801150a:	4619      	mov	r1, r3
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f000 febb 	bl	8012288 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	8c1a      	ldrh	r2, [r3, #32]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fd9d 	bl	801205a <printLiveAutocompletion>
 8011520:	e000      	b.n	8011524 <embeddedCliPrint+0x78>
        return;
 8011522:	bf00      	nop
    }
}
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	20000024 	.word	0x20000024

08011530 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d066      	beq.n	801160c <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 801153e:	4b35      	ldr	r3, [pc, #212]	@ (8011614 <embeddedCliTokenizeArgs+0xe4>)
 8011540:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8011542:	2300      	movs	r3, #0
 8011544:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8011546:	2300      	movs	r3, #0
 8011548:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 801154a:	2300      	movs	r3, #0
 801154c:	61bb      	str	r3, [r7, #24]

    int i = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8011552:	e047      	b.n	80115e4 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	3301      	adds	r3, #1
 8011558:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 801155a:	7fbb      	ldrb	r3, [r7, #30]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d002      	beq.n	8011566 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8011560:	2300      	movs	r3, #0
 8011562:	77bb      	strb	r3, [r7, #30]
 8011564:	e029      	b.n	80115ba <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8011566:	7cfb      	ldrb	r3, [r7, #19]
 8011568:	2b5c      	cmp	r3, #92	@ 0x5c
 801156a:	d102      	bne.n	8011572 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 801156c:	2301      	movs	r3, #1
 801156e:	77bb      	strb	r3, [r7, #30]
            continue;
 8011570:	e038      	b.n	80115e4 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8011572:	7cfb      	ldrb	r3, [r7, #19]
 8011574:	2b22      	cmp	r3, #34	@ 0x22
 8011576:	d110      	bne.n	801159a <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8011578:	7ffb      	ldrb	r3, [r7, #31]
 801157a:	2b00      	cmp	r3, #0
 801157c:	bf14      	ite	ne
 801157e:	2301      	movne	r3, #1
 8011580:	2300      	moveq	r3, #0
 8011582:	b2db      	uxtb	r3, r3
 8011584:	f083 0301 	eor.w	r3, r3, #1
 8011588:	b2db      	uxtb	r3, r3
 801158a:	77fb      	strb	r3, [r7, #31]
 801158c:	7ffb      	ldrb	r3, [r7, #31]
 801158e:	f003 0301 	and.w	r3, r3, #1
 8011592:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8011594:	2300      	movs	r3, #0
 8011596:	74fb      	strb	r3, [r7, #19]
 8011598:	e00f      	b.n	80115ba <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 801159a:	7ffb      	ldrb	r3, [r7, #31]
 801159c:	f083 0301 	eor.w	r3, r3, #1
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d009      	beq.n	80115ba <embeddedCliTokenizeArgs+0x8a>
 80115a6:	7cfb      	ldrb	r3, [r7, #19]
 80115a8:	4619      	mov	r1, r3
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f00b ff44 	bl	801d438 <strchr>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d001      	beq.n	80115ba <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80115b6:	2300      	movs	r3, #0
 80115b8:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80115ba:	7cfb      	ldrb	r3, [r7, #19]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d109      	bne.n	80115d4 <embeddedCliTokenizeArgs+0xa4>
 80115c0:	69bb      	ldr	r3, [r7, #24]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dd0e      	ble.n	80115e4 <embeddedCliTokenizeArgs+0xb4>
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	3b01      	subs	r3, #1
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4413      	add	r3, r2
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d007      	beq.n	80115e4 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80115d4:	69bb      	ldr	r3, [r7, #24]
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	4413      	add	r3, r2
 80115da:	7cfa      	ldrb	r2, [r7, #19]
 80115dc:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	3301      	adds	r3, #1
 80115e2:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	4413      	add	r3, r2
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	74fb      	strb	r3, [r7, #19]
 80115ee:	7cfb      	ldrb	r3, [r7, #19]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1af      	bne.n	8011554 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	4413      	add	r3, r2
 80115fa:	2200      	movs	r2, #0
 80115fc:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	3301      	adds	r3, #1
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	4413      	add	r3, r2
 8011606:	2200      	movs	r2, #0
 8011608:	701a      	strb	r2, [r3, #0]
 801160a:	e000      	b.n	801160e <embeddedCliTokenizeArgs+0xde>
        return;
 801160c:	bf00      	nop
}
 801160e:	3720      	adds	r7, #32
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	080220e8 	.word	0x080220e8

08011618 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8011624:	887b      	ldrh	r3, [r7, #2]
 8011626:	4619      	mov	r1, r3
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f000 ffd5 	bl	80125d8 <getTokenPosition>
 801162e:	4603      	mov	r3, r0
 8011630:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8011632:	89fb      	ldrh	r3, [r7, #14]
 8011634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011638:	4293      	cmp	r3, r2
 801163a:	d003      	beq.n	8011644 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 801163c:	89fb      	ldrh	r3, [r7, #14]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	4413      	add	r3, r2
 8011642:	e000      	b.n	8011646 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 801164e:	b580      	push	{r7, lr}
 8011650:	b084      	sub	sp, #16
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
 8011656:	460b      	mov	r3, r1
 8011658:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 801165a:	887b      	ldrh	r3, [r7, #2]
 801165c:	4619      	mov	r1, r3
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f000 ffba 	bl	80125d8 <getTokenPosition>
 8011664:	4603      	mov	r3, r0
 8011666:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8011668:	89fb      	ldrh	r3, [r7, #14]
 801166a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801166e:	4293      	cmp	r3, r2
 8011670:	d003      	beq.n	801167a <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8011672:	89fb      	ldrh	r3, [r7, #14]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	4413      	add	r3, r2
 8011678:	e000      	b.n	801167c <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d003      	beq.n	801169a <embeddedCliGetTokenCount+0x16>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d101      	bne.n	801169e <embeddedCliGetTokenCount+0x1a>
        return 0;
 801169a:	2300      	movs	r3, #0
 801169c:	e019      	b.n	80116d2 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 801169e:	2300      	movs	r3, #0
 80116a0:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80116a2:	2301      	movs	r3, #1
 80116a4:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	4413      	add	r3, r2
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d109      	bne.n	80116c6 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3301      	adds	r3, #1
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	4413      	add	r3, r2
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d006      	beq.n	80116ce <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80116c0:	897b      	ldrh	r3, [r7, #10]
 80116c2:	3301      	adds	r3, #1
 80116c4:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3301      	adds	r3, #1
 80116ca:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80116cc:	e7eb      	b.n	80116a6 <embeddedCliGetTokenCount+0x22>
                break;
 80116ce:	bf00      	nop
    }

    return tokenCount;
 80116d0:	897b      	ldrh	r3, [r7, #10]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
	...

080116e0 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b086      	sub	sp, #24
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	460b      	mov	r3, r1
 80116ea:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	899b      	ldrh	r3, [r3, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d05c      	beq.n	80117b4 <navigateHistory+0xd4>
 80116fa:	78fb      	ldrb	r3, [r7, #3]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d005      	beq.n	801170c <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	895a      	ldrh	r2, [r3, #10]
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	899b      	ldrh	r3, [r3, #12]
 8011708:	429a      	cmp	r2, r3
 801170a:	d053      	beq.n	80117b4 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 801170c:	78fb      	ldrb	r3, [r7, #3]
 801170e:	f083 0301 	eor.w	r3, r3, #1
 8011712:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8011714:	2b00      	cmp	r3, #0
 8011716:	d003      	beq.n	8011720 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	895b      	ldrh	r3, [r3, #10]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d049      	beq.n	80117b4 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 fd7f 	bl	8012224 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 fdab 	bl	8012288 <writeToOutput>

    if (navigateUp)
 8011732:	78fb      	ldrb	r3, [r7, #3]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d006      	beq.n	8011746 <navigateHistory+0x66>
        ++impl->history.current;
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	895b      	ldrh	r3, [r3, #10]
 801173c:	3301      	adds	r3, #1
 801173e:	b29a      	uxth	r2, r3
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	815a      	strh	r2, [r3, #10]
 8011744:	e005      	b.n	8011752 <navigateHistory+0x72>
    else
        --impl->history.current;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	895b      	ldrh	r3, [r3, #10]
 801174a:	3b01      	subs	r3, #1
 801174c:	b29a      	uxth	r2, r3
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	1d1a      	adds	r2, r3, #4
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	895b      	ldrh	r3, [r3, #10]
 801175a:	4619      	mov	r1, r3
 801175c:	4610      	mov	r0, r2
 801175e:	f000 fec2 	bl	80124e6 <historyGet>
 8011762:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d101      	bne.n	801176e <navigateHistory+0x8e>
        item = "";
 801176a:	4b14      	ldr	r3, [pc, #80]	@ (80117bc <navigateHistory+0xdc>)
 801176c:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 801176e:	6978      	ldr	r0, [r7, #20]
 8011770:	f7ee fd96 	bl	80002a0 <strlen>
 8011774:	4603      	mov	r3, r0
 8011776:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	69db      	ldr	r3, [r3, #28]
 801177c:	89fa      	ldrh	r2, [r7, #14]
 801177e:	6979      	ldr	r1, [r7, #20]
 8011780:	4618      	mov	r0, r3
 8011782:	f00b ff68 	bl	801d656 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	69da      	ldr	r2, [r3, #28]
 801178a:	89fb      	ldrh	r3, [r7, #14]
 801178c:	4413      	add	r3, r2
 801178e:	2200      	movs	r2, #0
 8011790:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	89fa      	ldrh	r2, [r7, #14]
 8011796:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	69db      	ldr	r3, [r3, #28]
 801179c:	4619      	mov	r1, r3
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 fd72 	bl	8012288 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	8c1a      	ldrh	r2, [r3, #32]
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f000 fc54 	bl	801205a <printLiveAutocompletion>
 80117b2:	e000      	b.n	80117b6 <navigateHistory+0xd6>
        return;
 80117b4:	bf00      	nop
}
 80117b6:	3718      	adds	r7, #24
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	080220ec 	.word	0x080220ec

080117c0 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	460b      	mov	r3, r1
 80117ca:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80117d2:	78fb      	ldrb	r3, [r7, #3]
 80117d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80117d6:	d91b      	bls.n	8011810 <onEscapedInput+0x50>
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	2b7e      	cmp	r3, #126	@ 0x7e
 80117dc:	d818      	bhi.n	8011810 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80117e4:	f023 0308 	bic.w	r3, r3, #8
 80117e8:	b2da      	uxtb	r2, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 80117f0:	78fb      	ldrb	r3, [r7, #3]
 80117f2:	2b41      	cmp	r3, #65	@ 0x41
 80117f4:	d002      	beq.n	80117fc <onEscapedInput+0x3c>
 80117f6:	78fb      	ldrb	r3, [r7, #3]
 80117f8:	2b42      	cmp	r3, #66	@ 0x42
 80117fa:	d109      	bne.n	8011810 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80117fc:	78fb      	ldrb	r3, [r7, #3]
 80117fe:	2b41      	cmp	r3, #65	@ 0x41
 8011800:	bf0c      	ite	eq
 8011802:	2301      	moveq	r3, #1
 8011804:	2300      	movne	r3, #0
 8011806:	b2db      	uxtb	r3, r3
 8011808:	4619      	mov	r1, r3
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff ff68 	bl	80116e0 <navigateHistory>
        }
    }
}
 8011810:	bf00      	nop
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	460b      	mov	r3, r1
 8011822:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	8c1b      	ldrh	r3, [r3, #32]
 801182e:	3302      	adds	r3, #2
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8011834:	4293      	cmp	r3, r2
 8011836:	da1a      	bge.n	801186e <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	69db      	ldr	r3, [r3, #28]
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	8c12      	ldrh	r2, [r2, #32]
 8011840:	4413      	add	r3, r2
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	8c1b      	ldrh	r3, [r3, #32]
 801184a:	3301      	adds	r3, #1
 801184c:	b29a      	uxth	r2, r3
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	69db      	ldr	r3, [r3, #28]
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	8c12      	ldrh	r2, [r2, #32]
 801185a:	4413      	add	r3, r2
 801185c:	2200      	movs	r2, #0
 801185e:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	4611      	mov	r1, r2
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	4798      	blx	r3
 801186c:	e000      	b.n	8011870 <onCharInput+0x58>
        return;
 801186e:	bf00      	nop
}
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
	...

08011878 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	460b      	mov	r3, r1
 8011882:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011890:	2b0d      	cmp	r3, #13
 8011892:	d102      	bne.n	801189a <onControlInput+0x22>
 8011894:	78fb      	ldrb	r3, [r7, #3]
 8011896:	2b0a      	cmp	r3, #10
 8011898:	d062      	beq.n	8011960 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 80118a0:	2b0a      	cmp	r3, #10
 80118a2:	d102      	bne.n	80118aa <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80118a4:	78fb      	ldrb	r3, [r7, #3]
 80118a6:	2b0d      	cmp	r3, #13
 80118a8:	d05a      	beq.n	8011960 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	2b0d      	cmp	r3, #13
 80118ae:	d002      	beq.n	80118b6 <onControlInput+0x3e>
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	2b0a      	cmp	r3, #10
 80118b4:	d126      	bne.n	8011904 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 fc2a 	bl	8012110 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 80118bc:	4b2a      	ldr	r3, [pc, #168]	@ (8011968 <onControlInput+0xf0>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4619      	mov	r1, r3
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fce0 	bl	8012288 <writeToOutput>

        if (impl->cmdSize > 0)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	8c1b      	ldrh	r3, [r3, #32]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <onControlInput+0x5e>
            parseCommand(cli);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 f84b 	bl	801196c <parseCommand>
        impl->cmdSize = 0;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2200      	movs	r2, #0
 80118da:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	69db      	ldr	r3, [r3, #28]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	8c12      	ldrh	r2, [r2, #32]
 80118e4:	4413      	add	r3, r2
 80118e6:	2200      	movs	r2, #0
 80118e8:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2200      	movs	r2, #0
 80118ee:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2200      	movs	r2, #0
 80118f4:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4619      	mov	r1, r3
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 fcc3 	bl	8012288 <writeToOutput>
 8011902:	e02e      	b.n	8011962 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8011904:	78fb      	ldrb	r3, [r7, #3]
 8011906:	2b08      	cmp	r3, #8
 8011908:	d002      	beq.n	8011910 <onControlInput+0x98>
 801190a:	78fb      	ldrb	r3, [r7, #3]
 801190c:	2b7f      	cmp	r3, #127	@ 0x7f
 801190e:	d120      	bne.n	8011952 <onControlInput+0xda>
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	8c1b      	ldrh	r3, [r3, #32]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d01c      	beq.n	8011952 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2108      	movs	r1, #8
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2120      	movs	r1, #32
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2108      	movs	r1, #8
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	8c1b      	ldrh	r3, [r3, #32]
 801193a:	3b01      	subs	r3, #1
 801193c:	b29a      	uxth	r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	68fa      	ldr	r2, [r7, #12]
 8011948:	8c12      	ldrh	r2, [r2, #32]
 801194a:	4413      	add	r3, r2
 801194c:	2200      	movs	r2, #0
 801194e:	701a      	strb	r2, [r3, #0]
 8011950:	e007      	b.n	8011962 <onControlInput+0xea>
    } else if (c == '\t') {
 8011952:	78fb      	ldrb	r3, [r7, #3]
 8011954:	2b09      	cmp	r3, #9
 8011956:	d104      	bne.n	8011962 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 fbd9 	bl	8012110 <onAutocompleteRequest>
 801195e:	e000      	b.n	8011962 <onControlInput+0xea>
        return;
 8011960:	bf00      	nop
    }

}
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	20000024 	.word	0x20000024

0801196c <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 801196c:	b590      	push	{r4, r7, lr}
 801196e:	b08f      	sub	sp, #60	@ 0x3c
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 801197a:	2301      	movs	r3, #1
 801197c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8011980:	2300      	movs	r3, #0
 8011982:	633b      	str	r3, [r7, #48]	@ 0x30
 8011984:	e00d      	b.n	80119a2 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	69da      	ldr	r2, [r3, #28]
 801198a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801198c:	4413      	add	r3, r2
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	2b20      	cmp	r3, #32
 8011992:	d003      	beq.n	801199c <parseCommand+0x30>
            isEmpty = false;
 8011994:	2300      	movs	r3, #0
 8011996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 801199a:	e008      	b.n	80119ae <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 801199c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801199e:	3301      	adds	r3, #1
 80119a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	8c1b      	ldrh	r3, [r3, #32]
 80119a6:	461a      	mov	r2, r3
 80119a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119aa:	4293      	cmp	r3, r2
 80119ac:	dbeb      	blt.n	8011986 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80119ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f040 80dc 	bne.w	8011b70 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	1d1a      	adds	r2, r3, #4
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	4619      	mov	r1, r3
 80119c2:	4610      	mov	r0, r2
 80119c4:	f000 fd2b 	bl	801241e <historyPut>

    char *cmdName = NULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80119cc:	2300      	movs	r3, #0
 80119ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80119d0:	2300      	movs	r3, #0
 80119d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80119d6:	2300      	movs	r3, #0
 80119d8:	623b      	str	r3, [r7, #32]
 80119da:	e030      	b.n	8011a3e <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80119dc:	69bb      	ldr	r3, [r7, #24]
 80119de:	69da      	ldr	r2, [r3, #28]
 80119e0:	6a3b      	ldr	r3, [r7, #32]
 80119e2:	4413      	add	r3, r2
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80119e8:	7dfb      	ldrb	r3, [r7, #23]
 80119ea:	2b20      	cmp	r3, #32
 80119ec:	d10f      	bne.n	8011a0e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80119ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d105      	bne.n	8011a00 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	69da      	ldr	r2, [r3, #28]
 80119f8:	6a3b      	ldr	r3, [r7, #32]
 80119fa:	4413      	add	r3, r2
 80119fc:	2200      	movs	r2, #0
 80119fe:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8011a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d018      	beq.n	8011a38 <parseCommand+0xcc>
                nameFinished = true;
 8011a06:	2301      	movs	r3, #1
 8011a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011a0c:	e014      	b.n	8011a38 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8011a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d105      	bne.n	8011a20 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	69da      	ldr	r2, [r3, #28]
 8011a18:	6a3b      	ldr	r3, [r7, #32]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a1e:	e00b      	b.n	8011a38 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8011a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d108      	bne.n	8011a38 <parseCommand+0xcc>
 8011a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d004      	beq.n	8011a38 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	69da      	ldr	r2, [r3, #28]
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	4413      	add	r3, r2
 8011a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	623b      	str	r3, [r7, #32]
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	8c1b      	ldrh	r3, [r3, #32]
 8011a42:	461a      	mov	r2, r3
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	4293      	cmp	r3, r2
 8011a48:	dbc8      	blt.n	80119dc <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	69da      	ldr	r2, [r3, #28]
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	8c1b      	ldrh	r3, [r3, #32]
 8011a52:	3301      	adds	r3, #1
 8011a54:	4413      	add	r3, r2
 8011a56:	2200      	movs	r2, #0
 8011a58:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8011a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 8089 	beq.w	8011b74 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011a62:	2300      	movs	r3, #0
 8011a64:	61fb      	str	r3, [r7, #28]
 8011a66:	e054      	b.n	8011b12 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a6c:	69fa      	ldr	r2, [r7, #28]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	4413      	add	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	440b      	add	r3, r1
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a7e:	f7ee fbaf 	bl	80001e0 <strcmp>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d141      	bne.n	8011b0c <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a8c:	69fa      	ldr	r2, [r7, #28]
 8011a8e:	4613      	mov	r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	4413      	add	r3, r2
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	440b      	add	r3, r1
 8011a98:	691b      	ldr	r3, [r3, #16]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d040      	beq.n	8011b20 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	4413      	add	r3, r2
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	440b      	add	r3, r1
 8011aae:	7a1b      	ldrb	r3, [r3, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8011ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ab6:	f7ff fd3b 	bl	8011530 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011ac0:	f043 0310 	orr.w	r3, r3, #16
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ad0:	69fa      	ldr	r2, [r7, #28]
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	440b      	add	r3, r1
 8011adc:	691c      	ldr	r4, [r3, #16]
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ae2:	69fa      	ldr	r2, [r7, #28]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	440b      	add	r3, r1
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	461a      	mov	r2, r3
 8011af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011afe:	f023 0310 	bic.w	r3, r3, #16
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8011b0a:	e034      	b.n	8011b76 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	3301      	adds	r3, #1
 8011b10:	61fb      	str	r3, [r7, #28]
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011b16:	461a      	mov	r2, r3
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	dba4      	blt.n	8011a68 <parseCommand+0xfc>
 8011b1e:	e000      	b.n	8011b22 <parseCommand+0x1b6>
                break;
 8011b20:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d01d      	beq.n	8011b66 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8011b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2c:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8011b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b30:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011b38:	f043 0310 	orr.w	r3, r3, #16
 8011b3c:	b2da      	uxtb	r2, r3
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	f107 020c 	add.w	r2, r7, #12
 8011b4c:	4611      	mov	r1, r2
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011b58:	f023 0310 	bic.w	r3, r3, #16
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8011b64:	e007      	b.n	8011b76 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8011b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 f997 	bl	8011e9c <onUnknownCommand>
 8011b6e:	e002      	b.n	8011b76 <parseCommand+0x20a>
        return;
 8011b70:	bf00      	nop
 8011b72:	e000      	b.n	8011b76 <parseCommand+0x20a>
        return;
 8011b74:	bf00      	nop
    }
}
 8011b76:	373c      	adds	r7, #60	@ 0x3c
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd90      	pop	{r4, r7, pc}

08011b7c <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8011b7c:	b5b0      	push	{r4, r5, r7, lr}
 8011b7e:	b08a      	sub	sp, #40	@ 0x28
 8011b80:	af02      	add	r7, sp, #8
 8011b82:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8011b84:	4b0c      	ldr	r3, [pc, #48]	@ (8011bb8 <initInternalBindings+0x3c>)
 8011b86:	f107 040c 	add.w	r4, r7, #12
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8011b94:	466a      	mov	r2, sp
 8011b96:	f107 0318 	add.w	r3, r7, #24
 8011b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b9e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ba2:	f107 030c 	add.w	r3, r7, #12
 8011ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff fc4c 	bl	8011446 <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8011bae:	bf00      	nop
 8011bb0:	3720      	adds	r7, #32
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	08022110 	.word	0x08022110

08011bbc <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08c      	sub	sp, #48	@ 0x30
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d10a      	bne.n	8011bec <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8011bd6:	49a5      	ldr	r1, [pc, #660]	@ (8011e6c <onHelp+0x2b0>)
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f000 fb55 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011bde:	4ba4      	ldr	r3, [pc, #656]	@ (8011e70 <onHelp+0x2b4>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4619      	mov	r1, r3
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f000 fb4f 	bl	8012288 <writeToOutput>
        return;
 8011bea:	e13b      	b.n	8011e64 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8011bec:	4ba1      	ldr	r3, [pc, #644]	@ (8011e74 <onHelp+0x2b8>)
 8011bee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d03d      	beq.n	8011c72 <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8011bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8011e74 <onHelp+0x2b8>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8011bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8011e70 <onHelp+0x2b4>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4619      	mov	r1, r3
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f000 fb3f 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c0a:	4b99      	ldr	r3, [pc, #612]	@ (8011e70 <onHelp+0x2b4>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4619      	mov	r1, r3
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f000 fb39 	bl	8012288 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011c16:	4998      	ldr	r1, [pc, #608]	@ (8011e78 <onHelp+0x2bc>)
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f000 fb35 	bl	8012288 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011c1e:	4b94      	ldr	r3, [pc, #592]	@ (8011e70 <onHelp+0x2b4>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4619      	mov	r1, r3
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f000 fb2f 	bl	8012288 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011c2a:	4994      	ldr	r1, [pc, #592]	@ (8011e7c <onHelp+0x2c0>)
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f000 fb2b 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c32:	4b8f      	ldr	r3, [pc, #572]	@ (8011e70 <onHelp+0x2b4>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4619      	mov	r1, r3
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f000 fb25 	bl	8012288 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8011c3e:	4990      	ldr	r1, [pc, #576]	@ (8011e80 <onHelp+0x2c4>)
 8011c40:	68f8      	ldr	r0, [r7, #12]
 8011c42:	f000 fb21 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c46:	4b8a      	ldr	r3, [pc, #552]	@ (8011e70 <onHelp+0x2b4>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f000 fb1b 	bl	8012288 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8011c52:	498c      	ldr	r1, [pc, #560]	@ (8011e84 <onHelp+0x2c8>)
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 fb17 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c5a:	4b85      	ldr	r3, [pc, #532]	@ (8011e70 <onHelp+0x2b4>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f000 fb11 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011c66:	4b82      	ldr	r3, [pc, #520]	@ (8011e70 <onHelp+0x2b4>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 fb0b 	bl	8012288 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8011c72:	68b8      	ldr	r0, [r7, #8]
 8011c74:	f7ff fd06 	bl	8011684 <embeddedCliGetTokenCount>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8011c7c:	8b7b      	ldrh	r3, [r7, #26]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d176      	bne.n	8011d70 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011c82:	2300      	movs	r3, #0
 8011c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c86:	e03c      	b.n	8011d02 <onHelp+0x146>
            writeToOutput(cli, " * ");
 8011c88:	497f      	ldr	r1, [pc, #508]	@ (8011e88 <onHelp+0x2cc>)
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f000 fafc 	bl	8012288 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c96:	4613      	mov	r3, r2
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	4413      	add	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	440b      	add	r3, r1
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f000 faef 	bl	8012288 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011caa:	4b71      	ldr	r3, [pc, #452]	@ (8011e70 <onHelp+0x2b4>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4619      	mov	r1, r3
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f000 fae9 	bl	8012288 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011cba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	009b      	lsls	r3, r3, #2
 8011cc0:	4413      	add	r3, r2
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	440b      	add	r3, r1
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d017      	beq.n	8011cfc <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2109      	movs	r1, #9
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cdc:	4613      	mov	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4413      	add	r3, r2
 8011ce2:	009b      	lsls	r3, r3, #2
 8011ce4:	440b      	add	r3, r1
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 facc 	bl	8012288 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011cf0:	4b5f      	ldr	r3, [pc, #380]	@ (8011e70 <onHelp+0x2b4>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f000 fac6 	bl	8012288 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cfe:	3301      	adds	r3, #1
 8011d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011d06:	461a      	mov	r2, r3
 8011d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	dbbc      	blt.n	8011c88 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8011d0e:	4b58      	ldr	r3, [pc, #352]	@ (8011e70 <onHelp+0x2b4>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4619      	mov	r1, r3
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f000 fab7 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011d1a:	4b55      	ldr	r3, [pc, #340]	@ (8011e70 <onHelp+0x2b4>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f000 fab1 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011d26:	4b52      	ldr	r3, [pc, #328]	@ (8011e70 <onHelp+0x2b4>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f000 faab 	bl	8012288 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8011d32:	4956      	ldr	r1, [pc, #344]	@ (8011e8c <onHelp+0x2d0>)
 8011d34:	68f8      	ldr	r0, [r7, #12]
 8011d36:	f000 faa7 	bl	8012288 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8011d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8011e70 <onHelp+0x2b4>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f000 faa1 	bl	8012288 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8011d46:	4952      	ldr	r1, [pc, #328]	@ (8011e90 <onHelp+0x2d4>)
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f000 fa9d 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011d4e:	4b48      	ldr	r3, [pc, #288]	@ (8011e70 <onHelp+0x2b4>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4619      	mov	r1, r3
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f000 fa97 	bl	8012288 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8011d5a:	494e      	ldr	r1, [pc, #312]	@ (8011e94 <onHelp+0x2d8>)
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fa93 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011d62:	4b43      	ldr	r3, [pc, #268]	@ (8011e70 <onHelp+0x2b4>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	4619      	mov	r1, r3
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f000 fa8d 	bl	8012288 <writeToOutput>
 8011d6e:	e079      	b.n	8011e64 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8011d70:	8b7b      	ldrh	r3, [r7, #26]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d16c      	bne.n	8011e50 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8011d76:	2300      	movs	r3, #0
 8011d78:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	68b8      	ldr	r0, [r7, #8]
 8011d7e:	f7ff fc4b 	bl	8011618 <embeddedCliGetToken>
 8011d82:	6178      	str	r0, [r7, #20]
        bool found = false;
 8011d84:	2300      	movs	r3, #0
 8011d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	623b      	str	r3, [r7, #32]
 8011d8e:	e020      	b.n	8011dd2 <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011d94:	6a3a      	ldr	r2, [r7, #32]
 8011d96:	4613      	mov	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4413      	add	r3, r2
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	440b      	add	r3, r1
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	6979      	ldr	r1, [r7, #20]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7ee fa1b 	bl	80001e0 <strcmp>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d10d      	bne.n	8011dcc <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011db4:	6a3a      	ldr	r2, [r7, #32]
 8011db6:	4613      	mov	r3, r2
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	440b      	add	r3, r1
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8011dca:	e008      	b.n	8011dde <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011dcc:	6a3b      	ldr	r3, [r7, #32]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	623b      	str	r3, [r7, #32]
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	6a3b      	ldr	r3, [r7, #32]
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	dbd8      	blt.n	8011d90 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 8011dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d020      	beq.n	8011e28 <onHelp+0x26c>
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d01d      	beq.n	8011e28 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8011dec:	4926      	ldr	r1, [pc, #152]	@ (8011e88 <onHelp+0x2cc>)
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 fa4a 	bl	8012288 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011df4:	6979      	ldr	r1, [r7, #20]
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f000 fa46 	bl	8012288 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8011e70 <onHelp+0x2b4>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4619      	mov	r1, r3
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f000 fa40 	bl	8012288 <writeToOutput>
            cli->writeChar(cli, '\t');
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2109      	movs	r1, #9
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f000 fa37 	bl	8012288 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011e1a:	4b15      	ldr	r3, [pc, #84]	@ (8011e70 <onHelp+0x2b4>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4619      	mov	r1, r3
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f000 fa31 	bl	8012288 <writeToOutput>
 8011e26:	e01d      	b.n	8011e64 <onHelp+0x2a8>
        } else if (found) {
 8011e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00a      	beq.n	8011e46 <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8011e30:	490e      	ldr	r1, [pc, #56]	@ (8011e6c <onHelp+0x2b0>)
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f000 fa28 	bl	8012288 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011e38:	4b0d      	ldr	r3, [pc, #52]	@ (8011e70 <onHelp+0x2b4>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f000 fa22 	bl	8012288 <writeToOutput>
 8011e44:	e00e      	b.n	8011e64 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 8011e46:	6979      	ldr	r1, [r7, #20]
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f000 f827 	bl	8011e9c <onUnknownCommand>
 8011e4e:	e009      	b.n	8011e64 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011e50:	4911      	ldr	r1, [pc, #68]	@ (8011e98 <onHelp+0x2dc>)
 8011e52:	68f8      	ldr	r0, [r7, #12]
 8011e54:	f000 fa18 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011e58:	4b05      	ldr	r3, [pc, #20]	@ (8011e70 <onHelp+0x2b4>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 fa12 	bl	8012288 <writeToOutput>
    }
}
 8011e64:	3730      	adds	r7, #48	@ 0x30
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	08022124 	.word	0x08022124
 8011e70:	20000024 	.word	0x20000024
 8011e74:	20001550 	.word	0x20001550
 8011e78:	0802213c 	.word	0x0802213c
 8011e7c:	08022164 	.word	0x08022164
 8011e80:	0802218c 	.word	0x0802218c
 8011e84:	080221a0 	.word	0x080221a0
 8011e88:	080221bc 	.word	0x080221bc
 8011e8c:	080221c0 	.word	0x080221c0
 8011e90:	080221e0 	.word	0x080221e0
 8011e94:	08022204 	.word	0x08022204
 8011e98:	08022218 	.word	0x08022218

08011e9c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8011ea6:	490b      	ldr	r1, [pc, #44]	@ (8011ed4 <onUnknownCommand+0x38>)
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 f9ed 	bl	8012288 <writeToOutput>
    writeToOutput(cli, name);
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f9e9 	bl	8012288 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8011eb6:	4908      	ldr	r1, [pc, #32]	@ (8011ed8 <onUnknownCommand+0x3c>)
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 f9e5 	bl	8012288 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011ebe:	4b07      	ldr	r3, [pc, #28]	@ (8011edc <onUnknownCommand+0x40>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f9df 	bl	8012288 <writeToOutput>
}
 8011eca:	bf00      	nop
 8011ecc:	3708      	adds	r7, #8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	08022248 	.word	0x08022248
 8011ed8:	0802225c 	.word	0x0802225c
 8011edc:	20000024 	.word	0x20000024

08011ee0 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08e      	sub	sp, #56	@ 0x38
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011eec:	2300      	movs	r3, #0
 8011eee:	613b      	str	r3, [r7, #16]
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	82bb      	strh	r3, [r7, #20]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ee f9d1 	bl	80002a0 <strlen>
 8011efe:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d002      	beq.n	8011f14 <getAutocompletedCommand+0x34>
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d108      	bne.n	8011f26 <getAutocompletedCommand+0x46>
        return cmd;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	461a      	mov	r2, r3
 8011f18:	f107 0310 	add.w	r3, r7, #16
 8011f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f20:	e882 0003 	stmia.w	r2, {r0, r1}
 8011f24:	e095      	b.n	8012052 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011f26:	2300      	movs	r3, #0
 8011f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f2a:	e083      	b.n	8012034 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011f2c:	6a3b      	ldr	r3, [r7, #32]
 8011f2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f32:	4613      	mov	r3, r2
 8011f34:	009b      	lsls	r3, r3, #2
 8011f36:	4413      	add	r3, r2
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	440b      	add	r3, r1
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011f40:	69f8      	ldr	r0, [r7, #28]
 8011f42:	f7ee f9ad 	bl	80002a0 <strlen>
 8011f46:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f4e:	4413      	add	r3, r2
 8011f50:	781a      	ldrb	r2, [r3, #0]
 8011f52:	6a3b      	ldr	r3, [r7, #32]
 8011f54:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f58:	440b      	add	r3, r1
 8011f5a:	f022 0201 	bic.w	r2, r2, #1
 8011f5e:	b2d2      	uxtb	r2, r2
 8011f60:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011f62:	69ba      	ldr	r2, [r7, #24]
 8011f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d35e      	bcc.n	8012028 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011f70:	2300      	movs	r3, #0
 8011f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f74:	e010      	b.n	8011f98 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f7a:	4413      	add	r3, r2
 8011f7c:	781a      	ldrb	r2, [r3, #0]
 8011f7e:	69f9      	ldr	r1, [r7, #28]
 8011f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f82:	440b      	add	r3, r1
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d003      	beq.n	8011f92 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8011f90:	e006      	b.n	8011fa0 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f94:	3301      	adds	r3, #1
 8011f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d3ea      	bcc.n	8011f76 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011fa4:	f083 0301 	eor.w	r3, r3, #1
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d13e      	bne.n	801202c <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8011fae:	6a3b      	ldr	r3, [r7, #32]
 8011fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fb4:	4413      	add	r3, r2
 8011fb6:	781a      	ldrb	r2, [r3, #0]
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fbe:	440b      	add	r3, r1
 8011fc0:	f042 0201 	orr.w	r2, r2, #1
 8011fc4:	b2d2      	uxtb	r2, r2
 8011fc6:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011fc8:	8afb      	ldrh	r3, [r7, #22]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d004      	beq.n	8011fd8 <getAutocompletedCommand+0xf8>
 8011fce:	8abb      	ldrh	r3, [r7, #20]
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d202      	bcs.n	8011fde <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011fde:	8afb      	ldrh	r3, [r7, #22]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011fe6:	8afb      	ldrh	r3, [r7, #22]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d102      	bne.n	8011ff2 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	613b      	str	r3, [r7, #16]
            continue;
 8011ff0:	e01d      	b.n	801202e <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011ff2:	6a3b      	ldr	r3, [r7, #32]
 8011ff4:	8c1b      	ldrh	r3, [r3, #32]
 8011ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ff8:	e010      	b.n	801201c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ffe:	4413      	add	r3, r2
 8012000:	781a      	ldrb	r2, [r3, #0]
 8012002:	69f9      	ldr	r1, [r7, #28]
 8012004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012006:	440b      	add	r3, r1
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	429a      	cmp	r2, r3
 801200c:	d003      	beq.n	8012016 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012010:	b29b      	uxth	r3, r3
 8012012:	82bb      	strh	r3, [r7, #20]
                break;
 8012014:	e00b      	b.n	801202e <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8012016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012018:	3301      	adds	r3, #1
 801201a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801201c:	8abb      	ldrh	r3, [r7, #20]
 801201e:	461a      	mov	r2, r3
 8012020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012022:	4293      	cmp	r3, r2
 8012024:	d3e9      	bcc.n	8011ffa <getAutocompletedCommand+0x11a>
 8012026:	e002      	b.n	801202e <getAutocompletedCommand+0x14e>
            continue;
 8012028:	bf00      	nop
 801202a:	e000      	b.n	801202e <getAutocompletedCommand+0x14e>
            continue;
 801202c:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801202e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012030:	3301      	adds	r3, #1
 8012032:	637b      	str	r3, [r7, #52]	@ 0x34
 8012034:	6a3b      	ldr	r3, [r7, #32]
 8012036:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012038:	461a      	mov	r2, r3
 801203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801203c:	4293      	cmp	r3, r2
 801203e:	f6ff af75 	blt.w	8011f2c <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	461a      	mov	r2, r3
 8012046:	f107 0310 	add.w	r3, r7, #16
 801204a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801204e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	3738      	adds	r7, #56	@ 0x38
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 801205a:	b580      	push	{r7, lr}
 801205c:	b088      	sub	sp, #32
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801206e:	f003 0320 	and.w	r3, r3, #32
 8012072:	2b00      	cmp	r3, #0
 8012074:	d048      	beq.n	8012108 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	69da      	ldr	r2, [r3, #28]
 801207a:	f107 030c 	add.w	r3, r7, #12
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	4618      	mov	r0, r3
 8012082:	f7ff ff2d 	bl	8011ee0 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8012086:	8a7b      	ldrh	r3, [r7, #18]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d102      	bne.n	8012092 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	8c1b      	ldrh	r3, [r3, #32]
 8012090:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	8c1b      	ldrh	r3, [r3, #32]
 8012096:	61fb      	str	r3, [r7, #28]
 8012098:	e00b      	b.n	80120b2 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	68f9      	ldr	r1, [r7, #12]
 80120a0:	69fa      	ldr	r2, [r7, #28]
 80120a2:	440a      	add	r2, r1
 80120a4:	7812      	ldrb	r2, [r2, #0]
 80120a6:	4611      	mov	r1, r2
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	3301      	adds	r3, #1
 80120b0:	61fb      	str	r3, [r7, #28]
 80120b2:	8a3b      	ldrh	r3, [r7, #16]
 80120b4:	461a      	mov	r2, r3
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d3ee      	bcc.n	801209a <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80120bc:	8a3b      	ldrh	r3, [r7, #16]
 80120be:	61bb      	str	r3, [r7, #24]
 80120c0:	e007      	b.n	80120d2 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2120      	movs	r1, #32
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	3301      	adds	r3, #1
 80120d0:	61bb      	str	r3, [r7, #24]
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80120d6:	461a      	mov	r2, r3
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	4293      	cmp	r3, r2
 80120dc:	d3f1      	bcc.n	80120c2 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 80120de:	8a3a      	ldrh	r2, [r7, #16]
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	210d      	movs	r1, #13
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4619      	mov	r1, r3
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 f8c7 	bl	8012288 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 f8c1 	bl	8012288 <writeToOutput>
 8012106:	e000      	b.n	801210a <printLiveAutocompletion+0xb0>
        return;
 8012108:	bf00      	nop
}
 801210a:	3720      	adds	r7, #32
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8012110:	b580      	push	{r7, lr}
 8012112:	b088      	sub	sp, #32
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	69da      	ldr	r2, [r3, #28]
 8012122:	f107 030c 	add.w	r3, r7, #12
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	f7ff fed9 	bl	8011ee0 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 801212e:	8a7b      	ldrh	r3, [r7, #18]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d071      	beq.n	8012218 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8012134:	8a7b      	ldrh	r3, [r7, #18]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d004      	beq.n	8012144 <onAutocompleteRequest+0x34>
 801213a:	8a3a      	ldrh	r2, [r7, #16]
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	8c1b      	ldrh	r3, [r3, #32]
 8012140:	429a      	cmp	r2, r3
 8012142:	d92a      	bls.n	801219a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	69db      	ldr	r3, [r3, #28]
 8012148:	68f9      	ldr	r1, [r7, #12]
 801214a:	8a3a      	ldrh	r2, [r7, #16]
 801214c:	4618      	mov	r0, r3
 801214e:	f00b fa82 	bl	801d656 <memcpy>
        if (cmd.candidateCount == 1) {
 8012152:	8a7b      	ldrh	r3, [r7, #18]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d109      	bne.n	801216c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	69db      	ldr	r3, [r3, #28]
 801215c:	8a3a      	ldrh	r2, [r7, #16]
 801215e:	4413      	add	r3, r2
 8012160:	2220      	movs	r2, #32
 8012162:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8012164:	8a3b      	ldrh	r3, [r7, #16]
 8012166:	3301      	adds	r3, #1
 8012168:	b29b      	uxth	r3, r3
 801216a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	69db      	ldr	r3, [r3, #28]
 8012170:	8a3a      	ldrh	r2, [r7, #16]
 8012172:	4413      	add	r3, r2
 8012174:	2200      	movs	r2, #0
 8012176:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	69db      	ldr	r3, [r3, #28]
 801217c:	69ba      	ldr	r2, [r7, #24]
 801217e:	8c12      	ldrh	r2, [r2, #32]
 8012180:	4413      	add	r3, r2
 8012182:	4619      	mov	r1, r3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 f87f 	bl	8012288 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 801218a:	8a3a      	ldrh	r2, [r7, #16]
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	8c1a      	ldrh	r2, [r3, #32]
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8012198:	e03f      	b.n	801221a <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f842 	bl	8012224 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80121a0:	2300      	movs	r3, #0
 80121a2:	61fb      	str	r3, [r7, #28]
 80121a4:	e021      	b.n	80121ea <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	4413      	add	r3, r2
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d014      	beq.n	80121e2 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80121bc:	69fa      	ldr	r2, [r7, #28]
 80121be:	4613      	mov	r3, r2
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	4413      	add	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	440b      	add	r3, r1
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80121cc:	6979      	ldr	r1, [r7, #20]
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 f85a 	bl	8012288 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80121d4:	4b12      	ldr	r3, [pc, #72]	@ (8012220 <onAutocompleteRequest+0x110>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4619      	mov	r1, r3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 f854 	bl	8012288 <writeToOutput>
 80121e0:	e000      	b.n	80121e4 <onAutocompleteRequest+0xd4>
            continue;
 80121e2:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	3301      	adds	r3, #1
 80121e8:	61fb      	str	r3, [r7, #28]
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80121ee:	461a      	mov	r2, r3
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	4293      	cmp	r3, r2
 80121f4:	dbd7      	blt.n	80121a6 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4619      	mov	r1, r3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 f843 	bl	8012288 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	69db      	ldr	r3, [r3, #28]
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f83d 	bl	8012288 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	8c1a      	ldrh	r2, [r3, #32]
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012216:	e000      	b.n	801221a <onAutocompleteRequest+0x10a>
        return;
 8012218:	bf00      	nop
}
 801221a:	3720      	adds	r7, #32
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20000024 	.word	0x20000024

08012224 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b087      	sub	sp, #28
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012236:	461c      	mov	r4, r3
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4618      	mov	r0, r3
 801223e:	f7ee f82f 	bl	80002a0 <strlen>
 8012242:	4603      	mov	r3, r0
 8012244:	4423      	add	r3, r4
 8012246:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	210d      	movs	r1, #13
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8012252:	2300      	movs	r3, #0
 8012254:	617b      	str	r3, [r7, #20]
 8012256:	e007      	b.n	8012268 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2120      	movs	r1, #32
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	3301      	adds	r3, #1
 8012266:	617b      	str	r3, [r7, #20]
 8012268:	697a      	ldr	r2, [r7, #20]
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	429a      	cmp	r2, r3
 801226e:	d3f3      	bcc.n	8012258 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	210d      	movs	r1, #13
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	4798      	blx	r3
    impl->inputLineLength = 0;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	2200      	movs	r2, #0
 801227e:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8012280:	bf00      	nop
 8012282:	371c      	adds	r7, #28
 8012284:	46bd      	mov	sp, r7
 8012286:	bd90      	pop	{r4, r7, pc}

08012288 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8012292:	6838      	ldr	r0, [r7, #0]
 8012294:	f7ee f804 	bl	80002a0 <strlen>
 8012298:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801229a:	2300      	movs	r3, #0
 801229c:	60fb      	str	r3, [r7, #12]
 801229e:	e00b      	b.n	80122b8 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	440a      	add	r2, r1
 80122aa:	7812      	ldrb	r2, [r2, #0]
 80122ac:	4611      	mov	r1, r2
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3301      	adds	r3, #1
 80122b6:	60fb      	str	r3, [r7, #12]
 80122b8:	68fa      	ldr	r2, [r7, #12]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d3ef      	bcc.n	80122a0 <writeToOutput+0x18>
    }
}
 80122c0:	bf00      	nop
 80122c2:	bf00      	nop
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <isControlChar>:

static bool isControlChar(char c) {
 80122ca:	b480      	push	{r7}
 80122cc:	b083      	sub	sp, #12
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	4603      	mov	r3, r0
 80122d2:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	2b0d      	cmp	r3, #13
 80122d8:	d00b      	beq.n	80122f2 <isControlChar+0x28>
 80122da:	79fb      	ldrb	r3, [r7, #7]
 80122dc:	2b0a      	cmp	r3, #10
 80122de:	d008      	beq.n	80122f2 <isControlChar+0x28>
 80122e0:	79fb      	ldrb	r3, [r7, #7]
 80122e2:	2b08      	cmp	r3, #8
 80122e4:	d005      	beq.n	80122f2 <isControlChar+0x28>
 80122e6:	79fb      	ldrb	r3, [r7, #7]
 80122e8:	2b09      	cmp	r3, #9
 80122ea:	d002      	beq.n	80122f2 <isControlChar+0x28>
 80122ec:	79fb      	ldrb	r3, [r7, #7]
 80122ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80122f0:	d101      	bne.n	80122f6 <isControlChar+0x2c>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <isControlChar+0x2e>
 80122f6:	2300      	movs	r3, #0
 80122f8:	f003 0301 	and.w	r3, r3, #1
 80122fc:	b2db      	uxtb	r3, r3
}
 80122fe:	4618      	mov	r0, r3
 8012300:	370c      	adds	r7, #12
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr

0801230a <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 801230a:	b480      	push	{r7}
 801230c:	b083      	sub	sp, #12
 801230e:	af00      	add	r7, sp, #0
 8012310:	4603      	mov	r3, r0
 8012312:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8012314:	79fb      	ldrb	r3, [r7, #7]
 8012316:	2b1f      	cmp	r3, #31
 8012318:	d904      	bls.n	8012324 <isDisplayableChar+0x1a>
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	2b7e      	cmp	r3, #126	@ 0x7e
 801231e:	d801      	bhi.n	8012324 <isDisplayableChar+0x1a>
 8012320:	2301      	movs	r3, #1
 8012322:	e000      	b.n	8012326 <isDisplayableChar+0x1c>
 8012324:	2300      	movs	r3, #0
 8012326:	f003 0301 	and.w	r3, r3, #1
 801232a:	b2db      	uxtb	r3, r3
}
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr

08012338 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	88da      	ldrh	r2, [r3, #6]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	889b      	ldrh	r3, [r3, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	d306      	bcc.n	801235a <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	88da      	ldrh	r2, [r3, #6]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	889b      	ldrh	r3, [r3, #4]
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	b29b      	uxth	r3, r3
 8012358:	e009      	b.n	801236e <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	891a      	ldrh	r2, [r3, #8]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	889b      	ldrh	r3, [r3, #4]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	b29a      	uxth	r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	88db      	ldrh	r3, [r3, #6]
 801236a:	4413      	add	r3, r2
 801236c:	b29b      	uxth	r3, r3
}
 801236e:	4618      	mov	r0, r3
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 801237a:	b480      	push	{r7}
 801237c:	b085      	sub	sp, #20
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8012382:	2300      	movs	r3, #0
 8012384:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	889a      	ldrh	r2, [r3, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	88db      	ldrh	r3, [r3, #6]
 801238e:	429a      	cmp	r2, r3
 8012390:	d014      	beq.n	80123bc <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	8892      	ldrh	r2, [r2, #4]
 801239a:	4413      	add	r3, r2
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	889b      	ldrh	r3, [r3, #4]
 80123a4:	3301      	adds	r3, #1
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	8912      	ldrh	r2, [r2, #8]
 80123ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80123b0:	fb01 f202 	mul.w	r2, r1, r2
 80123b4:	1a9b      	subs	r3, r3, r2
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3714      	adds	r7, #20
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr

080123ca <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80123ca:	b480      	push	{r7}
 80123cc:	b085      	sub	sp, #20
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
 80123d2:	460b      	mov	r3, r1
 80123d4:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	88db      	ldrh	r3, [r3, #6]
 80123da:	3301      	adds	r3, #1
 80123dc:	b29b      	uxth	r3, r3
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	8912      	ldrh	r2, [r2, #8]
 80123e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80123e6:	fb01 f202 	mul.w	r2, r1, r2
 80123ea:	1a9b      	subs	r3, r3, r2
 80123ec:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	889b      	ldrh	r3, [r3, #4]
 80123f2:	89fa      	ldrh	r2, [r7, #14]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d00b      	beq.n	8012410 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	88d2      	ldrh	r2, [r2, #6]
 8012400:	4413      	add	r3, r2
 8012402:	78fa      	ldrb	r2, [r7, #3]
 8012404:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	89fa      	ldrh	r2, [r7, #14]
 801240a:	80da      	strh	r2, [r3, #6]
        return true;
 801240c:	2301      	movs	r3, #1
 801240e:	e000      	b.n	8012412 <fifoBufPush+0x48>
    }
    return false;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr

0801241e <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801241e:	b580      	push	{r7, lr}
 8012420:	b088      	sub	sp, #32
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8012428:	6838      	ldr	r0, [r7, #0]
 801242a:	f7ed ff39 	bl	80002a0 <strlen>
 801242e:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	889b      	ldrh	r3, [r3, #4]
 8012434:	461a      	mov	r2, r3
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	3301      	adds	r3, #1
 801243a:	429a      	cmp	r2, r3
 801243c:	d201      	bcs.n	8012442 <historyPut+0x24>
        return false;
 801243e:	2300      	movs	r3, #0
 8012440:	e04d      	b.n	80124de <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f86a 	bl	801251e <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 801244a:	e024      	b.n	8012496 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	891b      	ldrh	r3, [r3, #8]
 8012450:	4619      	mov	r1, r3
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f847 	bl	80124e6 <historyGet>
 8012458:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 801245a:	6978      	ldr	r0, [r7, #20]
 801245c:	f7ed ff20 	bl	80002a0 <strlen>
 8012460:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	697a      	ldr	r2, [r7, #20]
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	461a      	mov	r2, r3
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	4413      	add	r3, r2
 8012470:	3301      	adds	r3, #1
 8012472:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	889b      	ldrh	r3, [r3, #4]
 8012478:	461a      	mov	r2, r3
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	3301      	adds	r3, #1
 8012484:	68fa      	ldr	r2, [r7, #12]
 8012486:	429a      	cmp	r2, r3
 8012488:	d20a      	bcs.n	80124a0 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	891b      	ldrh	r3, [r3, #8]
 801248e:	3b01      	subs	r3, #1
 8012490:	b29a      	uxth	r2, r3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1d6      	bne.n	801244c <historyPut+0x2e>
 801249e:	e000      	b.n	80124a2 <historyPut+0x84>
            break;
 80124a0:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	891b      	ldrh	r3, [r3, #8]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d00a      	beq.n	80124c0 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	3301      	adds	r3, #1
 80124b2:	18d0      	adds	r0, r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	69fa      	ldr	r2, [r7, #28]
 80124ba:	4619      	mov	r1, r3
 80124bc:	f00a ff9a 	bl	801d3f4 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6818      	ldr	r0, [r3, #0]
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	3301      	adds	r3, #1
 80124c8:	461a      	mov	r2, r3
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	f00b f8c3 	bl	801d656 <memcpy>
    ++history->itemsCount;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	891b      	ldrh	r3, [r3, #8]
 80124d4:	3301      	adds	r3, #1
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	811a      	strh	r2, [r3, #8]

    return true;
 80124dc:	2301      	movs	r3, #1
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3720      	adds	r7, #32
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b082      	sub	sp, #8
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	460b      	mov	r3, r1
 80124f0:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80124f2:	887b      	ldrh	r3, [r7, #2]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d004      	beq.n	8012502 <historyGet+0x1c>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	891b      	ldrh	r3, [r3, #8]
 80124fc:	887a      	ldrh	r2, [r7, #2]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d901      	bls.n	8012506 <historyGet+0x20>
        return NULL;
 8012502:	2300      	movs	r3, #0
 8012504:	e007      	b.n	8012516 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	887a      	ldrh	r2, [r7, #2]
 801250c:	4611      	mov	r1, r2
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff f882 	bl	8011618 <embeddedCliGetToken>
 8012514:	4603      	mov	r3, r0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801251e:	b580      	push	{r7, lr}
 8012520:	b086      	sub	sp, #24
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d04c      	beq.n	80125c8 <historyRemove+0xaa>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	891b      	ldrh	r3, [r3, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d048      	beq.n	80125c8 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8012536:	2300      	movs	r3, #0
 8012538:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801253a:	2301      	movs	r3, #1
 801253c:	827b      	strh	r3, [r7, #18]
 801253e:	e013      	b.n	8012568 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	8a7a      	ldrh	r2, [r7, #18]
 8012546:	4611      	mov	r1, r2
 8012548:	4618      	mov	r0, r3
 801254a:	f7ff f880 	bl	801164e <embeddedCliGetTokenVariable>
 801254e:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8012550:	6839      	ldr	r1, [r7, #0]
 8012552:	6978      	ldr	r0, [r7, #20]
 8012554:	f7ed fe44 	bl	80001e0 <strcmp>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00a      	beq.n	8012574 <historyRemove+0x56>
            break;
        }
        item = NULL;
 801255e:	2300      	movs	r3, #0
 8012560:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8012562:	8a7b      	ldrh	r3, [r7, #18]
 8012564:	3301      	adds	r3, #1
 8012566:	827b      	strh	r3, [r7, #18]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	891b      	ldrh	r3, [r3, #8]
 801256c:	8a7a      	ldrh	r2, [r7, #18]
 801256e:	429a      	cmp	r2, r3
 8012570:	d9e6      	bls.n	8012540 <historyRemove+0x22>
 8012572:	e000      	b.n	8012576 <historyRemove+0x58>
            break;
 8012574:	bf00      	nop
    }
    if (item == NULL)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d027      	beq.n	80125cc <historyRemove+0xae>
        return;

    --history->itemsCount;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	891b      	ldrh	r3, [r3, #8]
 8012580:	3b01      	subs	r3, #1
 8012582:	b29a      	uxth	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8012588:	8a7a      	ldrh	r2, [r7, #18]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	891b      	ldrh	r3, [r3, #8]
 801258e:	3301      	adds	r3, #1
 8012590:	429a      	cmp	r2, r3
 8012592:	d01d      	beq.n	80125d0 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8012594:	6978      	ldr	r0, [r7, #20]
 8012596:	f7ed fe83 	bl	80002a0 <strlen>
 801259a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	889b      	ldrh	r3, [r3, #4]
 80125a0:	4619      	mov	r1, r3
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	3301      	adds	r3, #1
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	441a      	add	r2, r3
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	1acb      	subs	r3, r1, r3
 80125b2:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	3301      	adds	r3, #1
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	4413      	add	r3, r2
 80125bc:	68ba      	ldr	r2, [r7, #8]
 80125be:	4619      	mov	r1, r3
 80125c0:	6978      	ldr	r0, [r7, #20]
 80125c2:	f00a ff17 	bl	801d3f4 <memmove>
 80125c6:	e004      	b.n	80125d2 <historyRemove+0xb4>
        return;
 80125c8:	bf00      	nop
 80125ca:	e002      	b.n	80125d2 <historyRemove+0xb4>
        return;
 80125cc:	bf00      	nop
 80125ce:	e000      	b.n	80125d2 <historyRemove+0xb4>
        return;
 80125d0:	bf00      	nop
}
 80125d2:	3718      	adds	r7, #24
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	460b      	mov	r3, r1
 80125e2:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <getTokenPosition+0x18>
 80125ea:	887b      	ldrh	r3, [r7, #2]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80125f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80125f4:	e028      	b.n	8012648 <getTokenPosition+0x70>
    uint16_t i = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80125fa:	2301      	movs	r3, #1
 80125fc:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80125fe:	89ba      	ldrh	r2, [r7, #12]
 8012600:	887b      	ldrh	r3, [r7, #2]
 8012602:	429a      	cmp	r2, r3
 8012604:	d013      	beq.n	801262e <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8012606:	89fb      	ldrh	r3, [r7, #14]
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	4413      	add	r3, r2
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d109      	bne.n	8012626 <getTokenPosition+0x4e>
            ++tokenCount;
 8012612:	89bb      	ldrh	r3, [r7, #12]
 8012614:	3301      	adds	r3, #1
 8012616:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8012618:	89fb      	ldrh	r3, [r7, #14]
 801261a:	3301      	adds	r3, #1
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	4413      	add	r3, r2
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d005      	beq.n	8012632 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8012626:	89fb      	ldrh	r3, [r7, #14]
 8012628:	3301      	adds	r3, #1
 801262a:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 801262c:	e7e7      	b.n	80125fe <getTokenPosition+0x26>
            break;
 801262e:	bf00      	nop
 8012630:	e000      	b.n	8012634 <getTokenPosition+0x5c>
                break;
 8012632:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8012634:	89fb      	ldrh	r3, [r7, #14]
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	4413      	add	r3, r2
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d001      	beq.n	8012644 <getTokenPosition+0x6c>
        return i;
 8012640:	89fb      	ldrh	r3, [r7, #14]
 8012642:	e001      	b.n	8012648 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8012644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012658:	4904      	ldr	r1, [pc, #16]	@ (801266c <MX_FATFS_Init+0x18>)
 801265a:	4805      	ldr	r0, [pc, #20]	@ (8012670 <MX_FATFS_Init+0x1c>)
 801265c:	f007 ff92 	bl	801a584 <FATFS_LinkDriver>
 8012660:	4603      	mov	r3, r0
 8012662:	461a      	mov	r2, r3
 8012664:	4b03      	ldr	r3, [pc, #12]	@ (8012674 <MX_FATFS_Init+0x20>)
 8012666:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012668:	bf00      	nop
 801266a:	bd80      	pop	{r7, pc}
 801266c:	20001b6c 	.word	0x20001b6c
 8012670:	08022bac 	.word	0x08022bac
 8012674:	20001b68 	.word	0x20001b68

08012678 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012678:	b480      	push	{r7}
 801267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801267c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801267e:	4618      	mov	r0, r3
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr

08012688 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801268e:	2300      	movs	r3, #0
 8012690:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012692:	f000 f86b 	bl	801276c <BSP_SD_IsDetected>
 8012696:	4603      	mov	r3, r0
 8012698:	2b01      	cmp	r3, #1
 801269a:	d001      	beq.n	80126a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801269c:	2301      	movs	r3, #1
 801269e:	e005      	b.n	80126ac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80126a0:	4804      	ldr	r0, [pc, #16]	@ (80126b4 <BSP_SD_Init+0x2c>)
 80126a2:	f7f7 fa02 	bl	8009aaa <HAL_SD_Init>
 80126a6:	4603      	mov	r3, r0
 80126a8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80126aa:	79fb      	ldrb	r3, [r7, #7]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	200018d4 	.word	0x200018d4

080126b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b088      	sub	sp, #32
 80126bc:	af02      	add	r7, sp, #8
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
 80126c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80126c6:	2300      	movs	r3, #0
 80126c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	9300      	str	r3, [sp, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	68ba      	ldr	r2, [r7, #8]
 80126d2:	68f9      	ldr	r1, [r7, #12]
 80126d4:	4806      	ldr	r0, [pc, #24]	@ (80126f0 <BSP_SD_ReadBlocks+0x38>)
 80126d6:	f7f7 fa99 	bl	8009c0c <HAL_SD_ReadBlocks>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80126e0:	2301      	movs	r3, #1
 80126e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	200018d4 	.word	0x200018d4

080126f4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b088      	sub	sp, #32
 80126f8:	af02      	add	r7, sp, #8
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
 8012700:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012702:	2300      	movs	r3, #0
 8012704:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	9300      	str	r3, [sp, #0]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68ba      	ldr	r2, [r7, #8]
 801270e:	68f9      	ldr	r1, [r7, #12]
 8012710:	4806      	ldr	r0, [pc, #24]	@ (801272c <BSP_SD_WriteBlocks+0x38>)
 8012712:	f7f7 fc59 	bl	8009fc8 <HAL_SD_WriteBlocks>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801271c:	2301      	movs	r3, #1
 801271e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012720:	7dfb      	ldrb	r3, [r7, #23]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3718      	adds	r7, #24
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	200018d4 	.word	0x200018d4

08012730 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012734:	4805      	ldr	r0, [pc, #20]	@ (801274c <BSP_SD_GetCardState+0x1c>)
 8012736:	f7f7 ff9d 	bl	800a674 <HAL_SD_GetCardState>
 801273a:	4603      	mov	r3, r0
 801273c:	2b04      	cmp	r3, #4
 801273e:	bf14      	ite	ne
 8012740:	2301      	movne	r3, #1
 8012742:	2300      	moveq	r3, #0
 8012744:	b2db      	uxtb	r3, r3
}
 8012746:	4618      	mov	r0, r3
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	200018d4 	.word	0x200018d4

08012750 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	4803      	ldr	r0, [pc, #12]	@ (8012768 <BSP_SD_GetCardInfo+0x18>)
 801275c:	f7f7 ff5e 	bl	800a61c <HAL_SD_GetCardInfo>
}
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	200018d4 	.word	0x200018d4

0801276c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012772:	2301      	movs	r3, #1
 8012774:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8012776:	79fb      	ldrb	r3, [r7, #7]
 8012778:	b2db      	uxtb	r3, r3
}
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
	...

08012788 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	4603      	mov	r3, r0
 8012790:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012792:	4b0b      	ldr	r3, [pc, #44]	@ (80127c0 <SD_CheckStatus+0x38>)
 8012794:	2201      	movs	r2, #1
 8012796:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012798:	f7ff ffca 	bl	8012730 <BSP_SD_GetCardState>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d107      	bne.n	80127b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80127a2:	4b07      	ldr	r3, [pc, #28]	@ (80127c0 <SD_CheckStatus+0x38>)
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	f023 0301 	bic.w	r3, r3, #1
 80127ac:	b2da      	uxtb	r2, r3
 80127ae:	4b04      	ldr	r3, [pc, #16]	@ (80127c0 <SD_CheckStatus+0x38>)
 80127b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80127b2:	4b03      	ldr	r3, [pc, #12]	@ (80127c0 <SD_CheckStatus+0x38>)
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	b2db      	uxtb	r3, r3
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	20000028 	.word	0x20000028

080127c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	4603      	mov	r3, r0
 80127cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80127ce:	4b0b      	ldr	r3, [pc, #44]	@ (80127fc <SD_initialize+0x38>)
 80127d0:	2201      	movs	r2, #1
 80127d2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80127d4:	f7ff ff58 	bl	8012688 <BSP_SD_Init>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d107      	bne.n	80127ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80127de:	79fb      	ldrb	r3, [r7, #7]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7ff ffd1 	bl	8012788 <SD_CheckStatus>
 80127e6:	4603      	mov	r3, r0
 80127e8:	461a      	mov	r2, r3
 80127ea:	4b04      	ldr	r3, [pc, #16]	@ (80127fc <SD_initialize+0x38>)
 80127ec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80127ee:	4b03      	ldr	r3, [pc, #12]	@ (80127fc <SD_initialize+0x38>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	b2db      	uxtb	r3, r3
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	20000028 	.word	0x20000028

08012800 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	4603      	mov	r3, r0
 8012808:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801280a:	79fb      	ldrb	r3, [r7, #7]
 801280c:	4618      	mov	r0, r3
 801280e:	f7ff ffbb 	bl	8012788 <SD_CheckStatus>
 8012812:	4603      	mov	r3, r0
}
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b086      	sub	sp, #24
 8012820:	af00      	add	r7, sp, #0
 8012822:	60b9      	str	r1, [r7, #8]
 8012824:	607a      	str	r2, [r7, #4]
 8012826:	603b      	str	r3, [r7, #0]
 8012828:	4603      	mov	r3, r0
 801282a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801282c:	2301      	movs	r3, #1
 801282e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8012830:	f04f 33ff 	mov.w	r3, #4294967295
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	6879      	ldr	r1, [r7, #4]
 8012838:	68b8      	ldr	r0, [r7, #8]
 801283a:	f7ff ff3d 	bl	80126b8 <BSP_SD_ReadBlocks>
 801283e:	4603      	mov	r3, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d107      	bne.n	8012854 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012844:	bf00      	nop
 8012846:	f7ff ff73 	bl	8012730 <BSP_SD_GetCardState>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d1fa      	bne.n	8012846 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8012850:	2300      	movs	r3, #0
 8012852:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012854:	7dfb      	ldrb	r3, [r7, #23]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3718      	adds	r7, #24
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b086      	sub	sp, #24
 8012862:	af00      	add	r7, sp, #0
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
 8012868:	603b      	str	r3, [r7, #0]
 801286a:	4603      	mov	r3, r0
 801286c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801286e:	2301      	movs	r3, #1
 8012870:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012872:	f04f 33ff 	mov.w	r3, #4294967295
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	6879      	ldr	r1, [r7, #4]
 801287a:	68b8      	ldr	r0, [r7, #8]
 801287c:	f7ff ff3a 	bl	80126f4 <BSP_SD_WriteBlocks>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d107      	bne.n	8012896 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8012886:	bf00      	nop
 8012888:	f7ff ff52 	bl	8012730 <BSP_SD_GetCardState>
 801288c:	4603      	mov	r3, r0
 801288e:	2b00      	cmp	r3, #0
 8012890:	d1fa      	bne.n	8012888 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8012892:	2300      	movs	r3, #0
 8012894:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012896:	7dfb      	ldrb	r3, [r7, #23]
}
 8012898:	4618      	mov	r0, r3
 801289a:	3718      	adds	r7, #24
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b08c      	sub	sp, #48	@ 0x30
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	4603      	mov	r3, r0
 80128a8:	603a      	str	r2, [r7, #0]
 80128aa:	71fb      	strb	r3, [r7, #7]
 80128ac:	460b      	mov	r3, r1
 80128ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80128b0:	2301      	movs	r3, #1
 80128b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80128b6:	4b25      	ldr	r3, [pc, #148]	@ (801294c <SD_ioctl+0xac>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d001      	beq.n	80128c8 <SD_ioctl+0x28>
 80128c4:	2303      	movs	r3, #3
 80128c6:	e03c      	b.n	8012942 <SD_ioctl+0xa2>

  switch (cmd)
 80128c8:	79bb      	ldrb	r3, [r7, #6]
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d834      	bhi.n	8012938 <SD_ioctl+0x98>
 80128ce:	a201      	add	r2, pc, #4	@ (adr r2, 80128d4 <SD_ioctl+0x34>)
 80128d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d4:	080128e5 	.word	0x080128e5
 80128d8:	080128ed 	.word	0x080128ed
 80128dc:	08012905 	.word	0x08012905
 80128e0:	0801291f 	.word	0x0801291f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80128ea:	e028      	b.n	801293e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80128ec:	f107 030c 	add.w	r3, r7, #12
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ff ff2d 	bl	8012750 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80128f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80128fc:	2300      	movs	r3, #0
 80128fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012902:	e01c      	b.n	801293e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012904:	f107 030c 	add.w	r3, r7, #12
 8012908:	4618      	mov	r0, r3
 801290a:	f7ff ff21 	bl	8012750 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012910:	b29a      	uxth	r2, r3
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012916:	2300      	movs	r3, #0
 8012918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801291c:	e00f      	b.n	801293e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801291e:	f107 030c 	add.w	r3, r7, #12
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff ff14 	bl	8012750 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801292a:	0a5a      	lsrs	r2, r3, #9
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012930:	2300      	movs	r3, #0
 8012932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012936:	e002      	b.n	801293e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012938:	2304      	movs	r3, #4
 801293a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801293e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012942:	4618      	mov	r0, r3
 8012944:	3730      	adds	r7, #48	@ 0x30
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	20000028 	.word	0x20000028

08012950 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8012950:	b480      	push	{r7}
 8012952:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8012954:	4b03      	ldr	r3, [pc, #12]	@ (8012964 <RtcInt+0x14>)
 8012956:	2201      	movs	r2, #1
 8012958:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 801295a:	bf00      	nop
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr
 8012964:	20000029 	.word	0x20000029

08012968 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8012968:	b480      	push	{r7}
 801296a:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 801296c:	4b06      	ldr	r3, [pc, #24]	@ (8012988 <Rtc_Alarm_watchdog_disable+0x20>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	689a      	ldr	r2, [r3, #8]
 8012972:	4b05      	ldr	r3, [pc, #20]	@ (8012988 <Rtc_Alarm_watchdog_disable+0x20>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801297a:	609a      	str	r2, [r3, #8]
}
 801297c:	bf00      	nop
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	200018b4 	.word	0x200018b4

0801298c <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b092      	sub	sp, #72	@ 0x48
 8012990:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8012992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012996:	2200      	movs	r2, #0
 8012998:	4619      	mov	r1, r3
 801299a:	4828      	ldr	r0, [pc, #160]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 801299c:	f7f6 fcd2 	bl	8009344 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80129a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129a4:	2200      	movs	r2, #0
 80129a6:	4619      	mov	r1, r3
 80129a8:	4824      	ldr	r0, [pc, #144]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 80129aa:	f7f6 fdad 	bl	8009508 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 80129ae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80129b2:	3319      	adds	r3, #25
 80129b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 80129b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80129bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80129be:	d902      	bls.n	80129c6 <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 80129c0:	2300      	movs	r3, #0
 80129c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 80129c6:	1d3b      	adds	r3, r7, #4
 80129c8:	2228      	movs	r2, #40	@ 0x28
 80129ca:	2100      	movs	r1, #0
 80129cc:	4618      	mov	r0, r3
 80129ce:	f00a fd2b 	bl	801d428 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 80129d6:	2300      	movs	r3, #0
 80129d8:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 80129da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 80129e2:	2300      	movs	r3, #0
 80129e4:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80129e6:	2300      	movs	r3, #0
 80129e8:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80129ea:	2300      	movs	r3, #0
 80129ec:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 80129ee:	4b14      	ldr	r3, [pc, #80]	@ (8012a40 <Rtc_Alarm_watchdog+0xb4>)
 80129f0:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80129f2:	2300      	movs	r3, #0
 80129f4:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80129f6:	2300      	movs	r3, #0
 80129f8:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 80129fa:	2301      	movs	r3, #1
 80129fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8012a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012a04:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8012a06:	1d3b      	adds	r3, r7, #4
 8012a08:	2200      	movs	r2, #0
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	480b      	ldr	r0, [pc, #44]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 8012a0e:	f7f6 fdcb 	bl	80095a8 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8012a12:	4b0a      	ldr	r3, [pc, #40]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	689a      	ldr	r2, [r3, #8]
 8012a18:	4b08      	ldr	r3, [pc, #32]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012a20:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8012a22:	4b06      	ldr	r3, [pc, #24]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	4b04      	ldr	r3, [pc, #16]	@ (8012a3c <Rtc_Alarm_watchdog+0xb0>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8012a32:	60da      	str	r2, [r3, #12]

}
 8012a34:	bf00      	nop
 8012a36:	3748      	adds	r7, #72	@ 0x48
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	200018b4 	.word	0x200018b4
 8012a40:	80808000 	.word	0x80808000

08012a44 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b088      	sub	sp, #32
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8012a4c:	f107 030c 	add.w	r3, r7, #12
 8012a50:	4619      	mov	r1, r3
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 f8e4 	bl	8012c20 <Parse_Date>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8012a5c:	7ffb      	ldrb	r3, [r7, #31]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d10c      	bne.n	8012a7c <Set_Date+0x38>
		sDate.Date = date[0];
 8012a62:	7b3b      	ldrb	r3, [r7, #12]
 8012a64:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8012a66:	7b7b      	ldrb	r3, [r7, #13]
 8012a68:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8012a6a:	7bbb      	ldrb	r3, [r7, #14]
 8012a6c:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8012a6e:	f107 0318 	add.w	r3, r7, #24
 8012a72:	2200      	movs	r2, #0
 8012a74:	4619      	mov	r1, r3
 8012a76:	4805      	ldr	r0, [pc, #20]	@ (8012a8c <Set_Date+0x48>)
 8012a78:	f7f6 fcc2 	bl	8009400 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8012a7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012a80:	f7f1 f960 	bl	8003d44 <HAL_Delay>
}
 8012a84:	bf00      	nop
 8012a86:	3720      	adds	r7, #32
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	200018b4 	.word	0x200018b4

08012a90 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b094      	sub	sp, #80	@ 0x50
 8012a94:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8012a96:	4b44      	ldr	r3, [pc, #272]	@ (8012ba8 <Rtc_set_alarm+0x118>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d07f      	beq.n	8012b9e <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8012aa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	4619      	mov	r1, r3
 8012aac:	483f      	ldr	r0, [pc, #252]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012aae:	f7f6 fc49 	bl	8009344 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8012ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	4619      	mov	r1, r3
 8012aba:	483c      	ldr	r0, [pc, #240]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012abc:	f7f6 fd24 	bl	8009508 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8012ac0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8012bb0 <Rtc_set_alarm+0x120>)
 8012ac8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	4413      	add	r3, r2
 8012ad0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8012ad4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012ad8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8012adc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ae0:	2b3b      	cmp	r3, #59	@ 0x3b
 8012ae2:	d917      	bls.n	8012b14 <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8012ae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ae8:	4a31      	ldr	r2, [pc, #196]	@ (8012bb0 <Rtc_set_alarm+0x120>)
 8012aea:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8012aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8012af2:	fb01 f202 	mul.w	r2, r1, r2
 8012af6:	1a9b      	subs	r3, r3, r2
 8012af8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8012afc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012b00:	3301      	adds	r3, #1
 8012b02:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8012b06:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012b0a:	2b17      	cmp	r3, #23
 8012b0c:	d902      	bls.n	8012b14 <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8012b14:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8012b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b1c:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8012b20:	9100      	str	r1, [sp, #0]
 8012b22:	4924      	ldr	r1, [pc, #144]	@ (8012bb4 <Rtc_set_alarm+0x124>)
 8012b24:	4824      	ldr	r0, [pc, #144]	@ (8012bb8 <Rtc_set_alarm+0x128>)
 8012b26:	f00a fb35 	bl	801d194 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8012b2a:	1d3b      	adds	r3, r7, #4
 8012b2c:	2228      	movs	r2, #40	@ 0x28
 8012b2e:	2100      	movs	r1, #0
 8012b30:	4618      	mov	r0, r3
 8012b32:	f00a fc79 	bl	801d428 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8012b36:	2300      	movs	r3, #0
 8012b38:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8012b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8012b52:	4b1a      	ldr	r3, [pc, #104]	@ (8012bbc <Rtc_set_alarm+0x12c>)
 8012b54:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012b56:	2300      	movs	r3, #0
 8012b58:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8012b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012b68:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8012b6a:	1d3b      	adds	r3, r7, #4
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4619      	mov	r1, r3
 8012b70:	480e      	ldr	r0, [pc, #56]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012b72:	f7f6 fd19 	bl	80095a8 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8012b76:	4b0d      	ldr	r3, [pc, #52]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	689a      	ldr	r2, [r3, #8]
 8012b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012b84:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8012b86:	4b09      	ldr	r3, [pc, #36]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	b2da      	uxtb	r2, r3
 8012b8e:	4b07      	ldr	r3, [pc, #28]	@ (8012bac <Rtc_set_alarm+0x11c>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8012b96:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8012b98:	4b03      	ldr	r3, [pc, #12]	@ (8012ba8 <Rtc_set_alarm+0x118>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8012b9e:	bf00      	nop
 8012ba0:	3748      	adds	r7, #72	@ 0x48
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	20000029 	.word	0x20000029
 8012bac:	200018b4 	.word	0x200018b4
 8012bb0:	200012f0 	.word	0x200012f0
 8012bb4:	08022290 	.word	0x08022290
 8012bb8:	2000002c 	.word	0x2000002c
 8012bbc:	80800080 	.word	0x80800080

08012bc0 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b08c      	sub	sp, #48	@ 0x30
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8012bc8:	f107 030c 	add.w	r3, r7, #12
 8012bcc:	4619      	mov	r1, r3
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f890 	bl	8012cf4 <Parse_Time>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8012bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d113      	bne.n	8012c0a <Set_Time+0x4a>
		sTime.Hours = time[0];
 8012be2:	7b3b      	ldrb	r3, [r7, #12]
 8012be4:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8012be6:	7b7b      	ldrb	r3, [r7, #13]
 8012be8:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8012bea:	7bbb      	ldrb	r3, [r7, #14]
 8012bec:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8012bf6:	f107 0318 	add.w	r3, r7, #24
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4807      	ldr	r0, [pc, #28]	@ (8012c1c <Set_Time+0x5c>)
 8012c00:	f7f6 fb06 	bl	8009210 <HAL_RTC_SetTime>
 8012c04:	4603      	mov	r3, r0
 8012c06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8012c0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012c0e:	f7f1 f899 	bl	8003d44 <HAL_Delay>

}
 8012c12:	bf00      	nop
 8012c14:	3730      	adds	r7, #48	@ 0x30
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	200018b4 	.word	0x200018b4

08012c20 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8012c32:	492e      	ldr	r1, [pc, #184]	@ (8012cec <Parse_Date+0xcc>)
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f00a fc0d 	bl	801d454 <strtok>
 8012c3a:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d14b      	bne.n	8012cda <Parse_Date+0xba>
		{
			return 1;
 8012c42:	2301      	movs	r3, #1
 8012c44:	e04d      	b.n	8012ce2 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8012c46:	68b8      	ldr	r0, [r7, #8]
 8012c48:	f009 f96c 	bl	801bf24 <atoi>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10a      	bne.n	8012c6c <Parse_Date+0x4c>
 8012c56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c5a:	2b1f      	cmp	r3, #31
 8012c5c:	dc03      	bgt.n	8012c66 <Parse_Date+0x46>
 8012c5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	dc02      	bgt.n	8012c6c <Parse_Date+0x4c>
			{
				val= 1;
 8012c66:	2301      	movs	r3, #1
 8012c68:	81bb      	strh	r3, [r7, #12]
 8012c6a:	e028      	b.n	8012cbe <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8012c6c:	89fb      	ldrh	r3, [r7, #14]
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d10a      	bne.n	8012c88 <Parse_Date+0x68>
 8012c72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c76:	2b0c      	cmp	r3, #12
 8012c78:	dc03      	bgt.n	8012c82 <Parse_Date+0x62>
 8012c7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	dc02      	bgt.n	8012c88 <Parse_Date+0x68>
			{
				val= 1;
 8012c82:	2301      	movs	r3, #1
 8012c84:	81bb      	strh	r3, [r7, #12]
 8012c86:	e01a      	b.n	8012cbe <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8012c88:	89fb      	ldrh	r3, [r7, #14]
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d112      	bne.n	8012cb4 <Parse_Date+0x94>
 8012c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012c96:	dd0d      	ble.n	8012cb4 <Parse_Date+0x94>
			{
				val=val%100;
 8012c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c9c:	4a14      	ldr	r2, [pc, #80]	@ (8012cf0 <Parse_Date+0xd0>)
 8012c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8012ca2:	1151      	asrs	r1, r2, #5
 8012ca4:	17da      	asrs	r2, r3, #31
 8012ca6:	1a8a      	subs	r2, r1, r2
 8012ca8:	2164      	movs	r1, #100	@ 0x64
 8012caa:	fb01 f202 	mul.w	r2, r1, r2
 8012cae:	1a9b      	subs	r3, r3, r2
 8012cb0:	81bb      	strh	r3, [r7, #12]
 8012cb2:	e004      	b.n	8012cbe <Parse_Date+0x9e>
			}
			else if(i > 2)
 8012cb4:	89fb      	ldrh	r3, [r7, #14]
 8012cb6:	2b02      	cmp	r3, #2
 8012cb8:	d901      	bls.n	8012cbe <Parse_Date+0x9e>
			{
				return 1;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e011      	b.n	8012ce2 <Parse_Date+0xc2>
			}


		   date[i] =val;
 8012cbe:	89fb      	ldrh	r3, [r7, #14]
 8012cc0:	683a      	ldr	r2, [r7, #0]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	89ba      	ldrh	r2, [r7, #12]
 8012cc6:	b2d2      	uxtb	r2, r2
 8012cc8:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8012cca:	4908      	ldr	r1, [pc, #32]	@ (8012cec <Parse_Date+0xcc>)
 8012ccc:	2000      	movs	r0, #0
 8012cce:	f00a fbc1 	bl	801d454 <strtok>
 8012cd2:	60b8      	str	r0, [r7, #8]
		i++;
 8012cd4:	89fb      	ldrh	r3, [r7, #14]
 8012cd6:	3301      	adds	r3, #1
 8012cd8:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1b2      	bne.n	8012c46 <Parse_Date+0x26>
	}

	}

	return 0;
 8012ce0:	2300      	movs	r3, #0

}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3710      	adds	r7, #16
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
 8012cea:	bf00      	nop
 8012cec:	080222a0 	.word	0x080222a0
 8012cf0:	51eb851f 	.word	0x51eb851f

08012cf4 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8012d06:	492a      	ldr	r1, [pc, #168]	@ (8012db0 <Parse_Time+0xbc>)
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f00a fba3 	bl	801d454 <strtok>
 8012d0e:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d143      	bne.n	8012d9e <Parse_Time+0xaa>
			{
				return 1;
 8012d16:	2301      	movs	r3, #1
 8012d18:	e045      	b.n	8012da6 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8012d1a:	68b8      	ldr	r0, [r7, #8]
 8012d1c:	f009 f902 	bl	801bf24 <atoi>
 8012d20:	4603      	mov	r3, r0
 8012d22:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8012d24:	89fb      	ldrh	r3, [r7, #14]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10a      	bne.n	8012d40 <Parse_Time+0x4c>
 8012d2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d2e:	2b18      	cmp	r3, #24
 8012d30:	dc03      	bgt.n	8012d3a <Parse_Time+0x46>
 8012d32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	da02      	bge.n	8012d40 <Parse_Time+0x4c>
				{
					val= 24;
 8012d3a:	2318      	movs	r3, #24
 8012d3c:	81bb      	strh	r3, [r7, #12]
 8012d3e:	e020      	b.n	8012d82 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012d40:	89fb      	ldrh	r3, [r7, #14]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d10a      	bne.n	8012d5c <Parse_Time+0x68>
 8012d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d4a:	2b3b      	cmp	r3, #59	@ 0x3b
 8012d4c:	dc03      	bgt.n	8012d56 <Parse_Time+0x62>
 8012d4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	da02      	bge.n	8012d5c <Parse_Time+0x68>
				{
					val= 59;
 8012d56:	233b      	movs	r3, #59	@ 0x3b
 8012d58:	81bb      	strh	r3, [r7, #12]
 8012d5a:	e012      	b.n	8012d82 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8012d5c:	89fb      	ldrh	r3, [r7, #14]
 8012d5e:	2b02      	cmp	r3, #2
 8012d60:	d10a      	bne.n	8012d78 <Parse_Time+0x84>
 8012d62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d66:	2b3b      	cmp	r3, #59	@ 0x3b
 8012d68:	dc03      	bgt.n	8012d72 <Parse_Time+0x7e>
 8012d6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	da02      	bge.n	8012d78 <Parse_Time+0x84>
				{
					val=59;
 8012d72:	233b      	movs	r3, #59	@ 0x3b
 8012d74:	81bb      	strh	r3, [r7, #12]
 8012d76:	e004      	b.n	8012d82 <Parse_Time+0x8e>
				}
				else if(i > 2)
 8012d78:	89fb      	ldrh	r3, [r7, #14]
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	d901      	bls.n	8012d82 <Parse_Time+0x8e>
				{
					return 1;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e011      	b.n	8012da6 <Parse_Time+0xb2>
				}


				time[i] =val;
 8012d82:	89fb      	ldrh	r3, [r7, #14]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	4413      	add	r3, r2
 8012d88:	89ba      	ldrh	r2, [r7, #12]
 8012d8a:	b2d2      	uxtb	r2, r2
 8012d8c:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8012d8e:	4908      	ldr	r1, [pc, #32]	@ (8012db0 <Parse_Time+0xbc>)
 8012d90:	2000      	movs	r0, #0
 8012d92:	f00a fb5f 	bl	801d454 <strtok>
 8012d96:	60b8      	str	r0, [r7, #8]
			i++;
 8012d98:	89fb      	ldrh	r3, [r7, #14]
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1ba      	bne.n	8012d1a <Parse_Time+0x26>
		}

		}

		return 0;
 8012da4:	2300      	movs	r3, #0
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	080222a0 	.word	0x080222a0

08012db4 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012dc0:	78fb      	ldrb	r3, [r7, #3]
 8012dc2:	091b      	lsrs	r3, r3, #4
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	1c5a      	adds	r2, r3, #1
 8012dcc:	607a      	str	r2, [r7, #4]
 8012dce:	4a08      	ldr	r2, [pc, #32]	@ (8012df0 <CharToHexasc+0x3c>)
 8012dd0:	5c52      	ldrb	r2, [r2, r1]
 8012dd2:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8012dd4:	78fb      	ldrb	r3, [r7, #3]
 8012dd6:	f003 030f 	and.w	r3, r3, #15
 8012dda:	4a05      	ldr	r2, [pc, #20]	@ (8012df0 <CharToHexasc+0x3c>)
 8012ddc:	5cd2      	ldrb	r2, [r2, r3]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	701a      	strb	r2, [r3, #0]
}
 8012de2:	bf00      	nop
 8012de4:	370c      	adds	r7, #12
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop
 8012df0:	08022bc0 	.word	0x08022bc0

08012df4 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b088      	sub	sp, #32
 8012df8:	af00      	add	r7, sp, #0
	adc_Disable();
 8012dfa:	4830      	ldr	r0, [pc, #192]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012dfc:	f7f1 f84d 	bl	8003e9a <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012e00:	f107 0314 	add.w	r3, r7, #20
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]
 8012e08:	605a      	str	r2, [r3, #4]
 8012e0a:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8012e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8012ec0 <adc_InitOneShotMode+0xcc>)
 8012e10:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012e12:	4b2a      	ldr	r3, [pc, #168]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012e18:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012e1a:	4b28      	ldr	r3, [pc, #160]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012e20:	4b26      	ldr	r3, [pc, #152]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e22:	2200      	movs	r2, #0
 8012e24:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8012e26:	4b25      	ldr	r3, [pc, #148]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012e2c:	4b23      	ldr	r3, [pc, #140]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e2e:	2200      	movs	r2, #0
 8012e30:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012e34:	4b21      	ldr	r3, [pc, #132]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e36:	2200      	movs	r2, #0
 8012e38:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012e3a:	4b20      	ldr	r3, [pc, #128]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e3c:	4a21      	ldr	r2, [pc, #132]	@ (8012ec4 <adc_InitOneShotMode+0xd0>)
 8012e3e:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012e40:	4b1e      	ldr	r3, [pc, #120]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8012e46:	4b1d      	ldr	r3, [pc, #116]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e48:	2201      	movs	r2, #1
 8012e4a:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012e54:	4b19      	ldr	r3, [pc, #100]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e56:	2201      	movs	r2, #1
 8012e58:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012e5a:	4818      	ldr	r0, [pc, #96]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e5c:	f7f0 ffda 	bl	8003e14 <HAL_ADC_Init>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d001      	beq.n	8012e6a <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8012e66:	f7f0 fa17 	bl	8003298 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012e6e:	f107 0314 	add.w	r3, r7, #20
 8012e72:	4619      	mov	r1, r3
 8012e74:	4811      	ldr	r0, [pc, #68]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012e76:	f7f1 fbe1 	bl	800463c <HAL_ADCEx_MultiModeConfigChannel>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d001      	beq.n	8012e84 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8012e80:	f7f0 fa0a 	bl	8003298 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8012e84:	1d3b      	adds	r3, r7, #4
 8012e86:	2200      	movs	r2, #0
 8012e88:	601a      	str	r2, [r3, #0]
 8012e8a:	605a      	str	r2, [r3, #4]
 8012e8c:	609a      	str	r2, [r3, #8]
 8012e8e:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8012e90:	230a      	movs	r3, #10
 8012e92:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8012e94:	2301      	movs	r3, #1
 8012e96:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8012e98:	2302      	movs	r3, #2
 8012e9a:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012ea0:	1d3b      	adds	r3, r7, #4
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	4805      	ldr	r0, [pc, #20]	@ (8012ebc <adc_InitOneShotMode+0xc8>)
 8012ea6:	f7f1 f9ab 	bl	8004200 <HAL_ADC_ConfigChannel>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8012eb0:	f7f0 f9f2 	bl	8003298 <Error_Handler>
		  }



}
 8012eb4:	bf00      	nop
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2000180c 	.word	0x2000180c
 8012ec0:	40012000 	.word	0x40012000
 8012ec4:	0f000001 	.word	0x0f000001

08012ec8 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8012ecc:	4802      	ldr	r0, [pc, #8]	@ (8012ed8 <adc_Getval+0x10>)
 8012ece:	f7f1 f989 	bl	80041e4 <HAL_ADC_GetValue>
 8012ed2:	4603      	mov	r3, r0

}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	2000180c 	.word	0x2000180c
 8012edc:	00000000 	.word	0x00000000

08012ee0 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012ee8:	f7ff ff84 	bl	8012df4 <adc_InitOneShotMode>
	HAL_Delay(1);
 8012eec:	2001      	movs	r0, #1
 8012eee:	f7f0 ff29 	bl	8003d44 <HAL_Delay>
	adc_Start();
 8012ef2:	4847      	ldr	r0, [pc, #284]	@ (8013010 <adc_Measure+0x130>)
 8012ef4:	f7f1 f804 	bl	8003f00 <HAL_ADC_Start>
	HAL_Delay(1);
 8012ef8:	2001      	movs	r0, #1
 8012efa:	f7f0 ff23 	bl	8003d44 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012efe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f02:	4843      	ldr	r0, [pc, #268]	@ (8013010 <adc_Measure+0x130>)
 8012f04:	f7f1 f8e3 	bl	80040ce <HAL_ADC_PollForConversion>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d01d      	beq.n	8012f4a <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012f0e:	2001      	movs	r0, #1
 8012f10:	f7f0 ff18 	bl	8003d44 <HAL_Delay>
		   adc_Start();
 8012f14:	483e      	ldr	r0, [pc, #248]	@ (8013010 <adc_Measure+0x130>)
 8012f16:	f7f0 fff3 	bl	8003f00 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012f1a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f1e:	483c      	ldr	r0, [pc, #240]	@ (8013010 <adc_Measure+0x130>)
 8012f20:	f7f1 f8d5 	bl	80040ce <HAL_ADC_PollForConversion>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00f      	beq.n	8012f4a <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012f2a:	2001      	movs	r0, #1
 8012f2c:	f7f0 ff0a 	bl	8003d44 <HAL_Delay>
				adc_Start();
 8012f30:	4837      	ldr	r0, [pc, #220]	@ (8013010 <adc_Measure+0x130>)
 8012f32:	f7f0 ffe5 	bl	8003f00 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012f36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f3a:	4835      	ldr	r0, [pc, #212]	@ (8013010 <adc_Measure+0x130>)
 8012f3c:	f7f1 f8c7 	bl	80040ce <HAL_ADC_PollForConversion>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d001      	beq.n	8012f4a <adc_Measure+0x6a>
				{
					return 0;
 8012f46:	2300      	movs	r3, #0
 8012f48:	e05a      	b.n	8013000 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012f4a:	4831      	ldr	r0, [pc, #196]	@ (8013010 <adc_Measure+0x130>)
 8012f4c:	f7f1 f88c 	bl	8004068 <HAL_ADC_Stop>

	val = adc_Getval();
 8012f50:	f7ff ffba 	bl	8012ec8 <adc_Getval>
 8012f54:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8012f56:	2001      	movs	r0, #1
 8012f58:	f7f0 fef4 	bl	8003d44 <HAL_Delay>
	adc_Start();
 8012f5c:	482c      	ldr	r0, [pc, #176]	@ (8013010 <adc_Measure+0x130>)
 8012f5e:	f7f0 ffcf 	bl	8003f00 <HAL_ADC_Start>
	HAL_Delay(1);
 8012f62:	2001      	movs	r0, #1
 8012f64:	f7f0 feee 	bl	8003d44 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012f68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f6c:	4828      	ldr	r0, [pc, #160]	@ (8013010 <adc_Measure+0x130>)
 8012f6e:	f7f1 f8ae 	bl	80040ce <HAL_ADC_PollForConversion>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d01d      	beq.n	8012fb4 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012f78:	2001      	movs	r0, #1
 8012f7a:	f7f0 fee3 	bl	8003d44 <HAL_Delay>
		   adc_Start();
 8012f7e:	4824      	ldr	r0, [pc, #144]	@ (8013010 <adc_Measure+0x130>)
 8012f80:	f7f0 ffbe 	bl	8003f00 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012f84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012f88:	4821      	ldr	r0, [pc, #132]	@ (8013010 <adc_Measure+0x130>)
 8012f8a:	f7f1 f8a0 	bl	80040ce <HAL_ADC_PollForConversion>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00f      	beq.n	8012fb4 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8012f94:	2001      	movs	r0, #1
 8012f96:	f7f0 fed5 	bl	8003d44 <HAL_Delay>
				adc_Start();
 8012f9a:	481d      	ldr	r0, [pc, #116]	@ (8013010 <adc_Measure+0x130>)
 8012f9c:	f7f0 ffb0 	bl	8003f00 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012fa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012fa4:	481a      	ldr	r0, [pc, #104]	@ (8013010 <adc_Measure+0x130>)
 8012fa6:	f7f1 f892 	bl	80040ce <HAL_ADC_PollForConversion>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d001      	beq.n	8012fb4 <adc_Measure+0xd4>
				{
					return 0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	e025      	b.n	8013000 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012fb4:	4816      	ldr	r0, [pc, #88]	@ (8013010 <adc_Measure+0x130>)
 8012fb6:	f7f1 f857 	bl	8004068 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8012fba:	f7ff ff85 	bl	8012ec8 <adc_Getval>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	085b      	lsrs	r3, r3, #1
 8012fc6:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	ee07 3a90 	vmov	s15, r3
 8012fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fd2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8013014 <adc_Measure+0x134>
 8012fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fda:	ee17 0a90 	vmov	r0, s15
 8012fde:	f7ed facb 	bl	8000578 <__aeabi_f2d>
 8012fe2:	a309      	add	r3, pc, #36	@ (adr r3, 8013008 <adc_Measure+0x128>)
 8012fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe8:	f7ed fb1e 	bl	8000628 <__aeabi_dmul>
 8012fec:	4602      	mov	r2, r0
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4610      	mov	r0, r2
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	f7ed fe10 	bl	8000c18 <__aeabi_d2f>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	601a      	str	r2, [r3, #0]


	return 1;
 8012ffe:	2301      	movs	r3, #1


}
 8013000:	4618      	mov	r0, r3
 8013002:	3710      	adds	r7, #16
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	851eb852 	.word	0x851eb852
 801300c:	3ff451eb 	.word	0x3ff451eb
 8013010:	2000180c 	.word	0x2000180c
 8013014:	3a533333 	.word	0x3a533333

08013018 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	4603      	mov	r3, r0
 8013020:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 8013022:	4a04      	ldr	r2, [pc, #16]	@ (8013034 <init_driver+0x1c>)
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	7013      	strb	r3, [r2, #0]
}
 8013028:	bf00      	nop
 801302a:	370c      	adds	r7, #12
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr
 8013034:	20001b70 	.word	0x20001b70

08013038 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 801303e:	2300      	movs	r3, #0
 8013040:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 8013042:	2300      	movs	r3, #0
 8013044:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 8013046:	1d3b      	adds	r3, r7, #4
 8013048:	4618      	mov	r0, r3
 801304a:	f000 f8ab 	bl	80131a4 <scd30_get_data_ready>
 801304e:	4603      	mov	r3, r0
 8013050:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8013052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d012      	beq.n	8013080 <scd30_await_data_ready+0x48>
        return local_error;
 801305a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801305e:	e014      	b.n	801308a <scd30_await_data_ready+0x52>
    }
    while (data_ready == 0) {
        sensirion_hal_sleep_us(100000);
 8013060:	480c      	ldr	r0, [pc, #48]	@ (8013094 <scd30_await_data_ready+0x5c>)
 8013062:	f000 fbb9 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
        local_error = scd30_get_data_ready(&data_ready);
 8013066:	1d3b      	adds	r3, r7, #4
 8013068:	4618      	mov	r0, r3
 801306a:	f000 f89b 	bl	80131a4 <scd30_get_data_ready>
 801306e:	4603      	mov	r3, r0
 8013070:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 8013072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <scd30_await_data_ready+0x48>
            return local_error;
 801307a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801307e:	e004      	b.n	801308a <scd30_await_data_ready+0x52>
    while (data_ready == 0) {
 8013080:	88bb      	ldrh	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d0ec      	beq.n	8013060 <scd30_await_data_ready+0x28>
        }
    }
    return local_error;
 8013086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3708      	adds	r7, #8
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	000186a0 	.word	0x000186a0

08013098 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 80130a8:	f7ff ffc6 	bl	8013038 <scd30_await_data_ready>
 80130ac:	4603      	mov	r3, r0
 80130ae:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80130b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d002      	beq.n	80130be <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 80130b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80130bc:	e008      	b.n	80130d0 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	68b9      	ldr	r1, [r7, #8]
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f000 f8be 	bl	8013244 <scd30_read_measurement_data>
 80130c8:	4603      	mov	r3, r0
 80130ca:	82fb      	strh	r3, [r7, #22]
    return local_error;
 80130cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	4603      	mov	r3, r0
 80130e0:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80130e2:	2300      	movs	r3, #0
 80130e4:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80130e6:	2300      	movs	r3, #0
 80130e8:	60fb      	str	r3, [r7, #12]
 80130ea:	2300      	movs	r3, #0
 80130ec:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 80130f2:	8ab9      	ldrh	r1, [r7, #20]
 80130f4:	f107 030c 	add.w	r3, r7, #12
 80130f8:	2210      	movs	r2, #16
 80130fa:	4618      	mov	r0, r3
 80130fc:	f000 fa2c 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 8013100:	4603      	mov	r3, r0
 8013102:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8013104:	88fa      	ldrh	r2, [r7, #6]
 8013106:	8ab9      	ldrh	r1, [r7, #20]
 8013108:	f107 030c 	add.w	r3, r7, #12
 801310c:	4618      	mov	r0, r3
 801310e:	f000 fa46 	bl	801359e <sensirion_i2c_add_uint16_t_to_buffer>
 8013112:	4603      	mov	r3, r0
 8013114:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8013116:	4b0b      	ldr	r3, [pc, #44]	@ (8013144 <scd30_start_periodic_measurement+0x6c>)
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	8aba      	ldrh	r2, [r7, #20]
 801311c:	f107 010c 	add.w	r1, r7, #12
 8013120:	4618      	mov	r0, r3
 8013122:	f000 fa6c 	bl	80135fe <sensirion_i2c_write_data>
 8013126:	4603      	mov	r3, r0
 8013128:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 801312a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <scd30_start_periodic_measurement+0x60>
        return local_error;
 8013132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013136:	e001      	b.n	801313c <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 8013138:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801313c:	4618      	mov	r0, r3
 801313e:	3718      	adds	r7, #24
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	20001b70 	.word	0x20001b70

08013148 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 801314e:	2300      	movs	r3, #0
 8013150:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8013152:	2300      	movs	r3, #0
 8013154:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8013156:	2300      	movs	r3, #0
 8013158:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 801315a:	88b9      	ldrh	r1, [r7, #4]
 801315c:	463b      	mov	r3, r7
 801315e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013162:	4618      	mov	r0, r3
 8013164:	f000 f9f8 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 8013168:	4603      	mov	r3, r0
 801316a:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801316c:	4b0c      	ldr	r3, [pc, #48]	@ (80131a0 <scd30_stop_periodic_measurement+0x58>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	88ba      	ldrh	r2, [r7, #4]
 8013172:	4639      	mov	r1, r7
 8013174:	4618      	mov	r0, r3
 8013176:	f000 fa42 	bl	80135fe <sensirion_i2c_write_data>
 801317a:	4603      	mov	r3, r0
 801317c:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 801317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d002      	beq.n	801318c <scd30_stop_periodic_measurement+0x44>
        return local_error;
 8013186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801318a:	e005      	b.n	8013198 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801318c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8013190:	f000 fb22 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8013194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8013198:	4618      	mov	r0, r3
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	20001b70 	.word	0x20001b70

080131a4 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80131ac:	2300      	movs	r3, #0
 80131ae:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80131b0:	4b22      	ldr	r3, [pc, #136]	@ (801323c <scd30_get_data_ready+0x98>)
 80131b2:	881b      	ldrh	r3, [r3, #0]
 80131b4:	813b      	strh	r3, [r7, #8]
 80131b6:	2300      	movs	r3, #0
 80131b8:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 80131be:	89b9      	ldrh	r1, [r7, #12]
 80131c0:	f107 0308 	add.w	r3, r7, #8
 80131c4:	f240 2202 	movw	r2, #514	@ 0x202
 80131c8:	4618      	mov	r0, r3
 80131ca:	f000 f9c5 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 80131ce:	4603      	mov	r3, r0
 80131d0:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80131d2:	4b1b      	ldr	r3, [pc, #108]	@ (8013240 <scd30_get_data_ready+0x9c>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	89ba      	ldrh	r2, [r7, #12]
 80131d8:	f107 0108 	add.w	r1, r7, #8
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 fa0e 	bl	80135fe <sensirion_i2c_write_data>
 80131e2:	4603      	mov	r3, r0
 80131e4:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80131e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d002      	beq.n	80131f4 <scd30_get_data_ready+0x50>
        return local_error;
 80131ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80131f2:	e01f      	b.n	8013234 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80131f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80131f8:	f000 faee 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80131fc:	4b10      	ldr	r3, [pc, #64]	@ (8013240 <scd30_get_data_ready+0x9c>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	f107 0108 	add.w	r1, r7, #8
 8013204:	2202      	movs	r2, #2
 8013206:	4618      	mov	r0, r3
 8013208:	f000 fa0c 	bl	8013624 <sensirion_i2c_read_data_inplace>
 801320c:	4603      	mov	r3, r0
 801320e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8013210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d002      	beq.n	801321e <scd30_get_data_ready+0x7a>
        return local_error;
 8013218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801321c:	e00a      	b.n	8013234 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801321e:	f107 0308 	add.w	r3, r7, #8
 8013222:	4618      	mov	r0, r3
 8013224:	f000 f906 	bl	8013434 <sensirion_common_bytes_to_uint16_t>
 8013228:	4603      	mov	r3, r0
 801322a:	461a      	mov	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8013230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3710      	adds	r7, #16
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	080222a4 	.word	0x080222a4
 8013240:	20001b70 	.word	0x20001b70

08013244 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 8013244:	b580      	push	{r7, lr}
 8013246:	b08a      	sub	sp, #40	@ 0x28
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 8013250:	2300      	movs	r3, #0
 8013252:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 8013254:	2300      	movs	r3, #0
 8013256:	613b      	str	r3, [r7, #16]
 8013258:	f107 0314 	add.w	r3, r7, #20
 801325c:	2200      	movs	r2, #0
 801325e:	601a      	str	r2, [r3, #0]
 8013260:	605a      	str	r2, [r3, #4]
 8013262:	609a      	str	r2, [r3, #8]
 8013264:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 8013266:	2300      	movs	r3, #0
 8013268:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 801326a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 801326c:	f107 0310 	add.w	r3, r7, #16
 8013270:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8013274:	4618      	mov	r0, r3
 8013276:	f000 f96f 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 801327a:	4603      	mov	r3, r0
 801327c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801327e:	4b26      	ldr	r3, [pc, #152]	@ (8013318 <scd30_read_measurement_data+0xd4>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013284:	f107 0110 	add.w	r1, r7, #16
 8013288:	4618      	mov	r0, r3
 801328a:	f000 f9b8 	bl	80135fe <sensirion_i2c_write_data>
 801328e:	4603      	mov	r3, r0
 8013290:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8013292:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013296:	2b00      	cmp	r3, #0
 8013298:	d002      	beq.n	80132a0 <scd30_read_measurement_data+0x5c>
        return local_error;
 801329a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801329e:	e036      	b.n	801330e <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80132a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80132a4:	f000 fa98 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 80132a8:	4b1b      	ldr	r3, [pc, #108]	@ (8013318 <scd30_read_measurement_data+0xd4>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	f107 0110 	add.w	r1, r7, #16
 80132b0:	220c      	movs	r2, #12
 80132b2:	4618      	mov	r0, r3
 80132b4:	f000 f9b6 	bl	8013624 <sensirion_i2c_read_data_inplace>
 80132b8:	4603      	mov	r3, r0
 80132ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80132bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <scd30_read_measurement_data+0x86>
        return local_error;
 80132c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80132c8:	e021      	b.n	801330e <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 80132ca:	f107 0310 	add.w	r3, r7, #16
 80132ce:	4618      	mov	r0, r3
 80132d0:	f000 f8e0 	bl	8013494 <sensirion_common_bytes_to_float>
 80132d4:	eef0 7a40 	vmov.f32	s15, s0
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 80132de:	f107 0310 	add.w	r3, r7, #16
 80132e2:	3304      	adds	r3, #4
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 f8d5 	bl	8013494 <sensirion_common_bytes_to_float>
 80132ea:	eef0 7a40 	vmov.f32	s15, s0
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 80132f4:	f107 0310 	add.w	r3, r7, #16
 80132f8:	3308      	adds	r3, #8
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 f8ca 	bl	8013494 <sensirion_common_bytes_to_float>
 8013300:	eef0 7a40 	vmov.f32	s15, s0
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 801330a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801330e:	4618      	mov	r0, r3
 8013310:	3728      	adds	r7, #40	@ 0x28
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	20001b70 	.word	0x20001b70

0801331c <scd30_force_recalibration>:
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8013326:	2300      	movs	r3, #0
 8013328:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801332a:	2300      	movs	r3, #0
 801332c:	60fb      	str	r3, [r7, #12]
 801332e:	2300      	movs	r3, #0
 8013330:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8013332:	2300      	movs	r3, #0
 8013334:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 8013336:	8ab9      	ldrh	r1, [r7, #20]
 8013338:	f107 030c 	add.w	r3, r7, #12
 801333c:	f245 2204 	movw	r2, #20996	@ 0x5204
 8013340:	4618      	mov	r0, r3
 8013342:	f000 f909 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 8013346:	4603      	mov	r3, r0
 8013348:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801334a:	88fa      	ldrh	r2, [r7, #6]
 801334c:	8ab9      	ldrh	r1, [r7, #20]
 801334e:	f107 030c 	add.w	r3, r7, #12
 8013352:	4618      	mov	r0, r3
 8013354:	f000 f923 	bl	801359e <sensirion_i2c_add_uint16_t_to_buffer>
 8013358:	4603      	mov	r3, r0
 801335a:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801335c:	4b0d      	ldr	r3, [pc, #52]	@ (8013394 <scd30_force_recalibration+0x78>)
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	8aba      	ldrh	r2, [r7, #20]
 8013362:	f107 010c 	add.w	r1, r7, #12
 8013366:	4618      	mov	r0, r3
 8013368:	f000 f949 	bl	80135fe <sensirion_i2c_write_data>
 801336c:	4603      	mov	r3, r0
 801336e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8013370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <scd30_force_recalibration+0x62>
        return local_error;
 8013378:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801337c:	e005      	b.n	801338a <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801337e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8013382:	f000 fa29 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8013386:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20001b70 	.word	0x20001b70

08013398 <scd30_read_firmware_version>:
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
    return local_error;
}

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80133a2:	2300      	movs	r3, #0
 80133a4:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80133a6:	4b21      	ldr	r3, [pc, #132]	@ (801342c <scd30_read_firmware_version+0x94>)
 80133a8:	881b      	ldrh	r3, [r3, #0]
 80133aa:	813b      	strh	r3, [r7, #8]
 80133ac:	2300      	movs	r3, #0
 80133ae:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80133b0:	2300      	movs	r3, #0
 80133b2:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 80133b4:	89b9      	ldrh	r1, [r7, #12]
 80133b6:	f107 0308 	add.w	r3, r7, #8
 80133ba:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 f8ca 	bl	8013558 <sensirion_i2c_add_command_to_buffer>
 80133c4:	4603      	mov	r3, r0
 80133c6:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80133c8:	4b19      	ldr	r3, [pc, #100]	@ (8013430 <scd30_read_firmware_version+0x98>)
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	89ba      	ldrh	r2, [r7, #12]
 80133ce:	f107 0108 	add.w	r1, r7, #8
 80133d2:	4618      	mov	r0, r3
 80133d4:	f000 f913 	bl	80135fe <sensirion_i2c_write_data>
 80133d8:	4603      	mov	r3, r0
 80133da:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80133dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d002      	beq.n	80133ea <scd30_read_firmware_version+0x52>
        return local_error;
 80133e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133e8:	e01c      	b.n	8013424 <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80133ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80133ee:	f000 f9f3 	bl	80137d8 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80133f2:	4b0f      	ldr	r3, [pc, #60]	@ (8013430 <scd30_read_firmware_version+0x98>)
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	f107 0108 	add.w	r1, r7, #8
 80133fa:	2202      	movs	r2, #2
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 f911 	bl	8013624 <sensirion_i2c_read_data_inplace>
 8013402:	4603      	mov	r3, r0
 8013404:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8013406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d002      	beq.n	8013414 <scd30_read_firmware_version+0x7c>
        return local_error;
 801340e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013412:	e007      	b.n	8013424 <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8013414:	7a3a      	ldrb	r2, [r7, #8]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 801341a:	7a7a      	ldrb	r2, [r7, #9]
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	701a      	strb	r2, [r3, #0]
    return local_error;
 8013420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	080222a4 	.word	0x080222a4
 8013430:	20001b70 	.word	0x20001b70

08013434 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8013434:	b480      	push	{r7}
 8013436:	b083      	sub	sp, #12
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	021b      	lsls	r3, r3, #8
 8013442:	b21a      	sxth	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	3301      	adds	r3, #1
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	b21b      	sxth	r3, r3
 801344c:	4313      	orrs	r3, r2
 801344e:	b21b      	sxth	r3, r3
 8013450:	b29b      	uxth	r3, r3
}
 8013452:	4618      	mov	r0, r3
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 801345e:	b480      	push	{r7}
 8013460:	b083      	sub	sp, #12
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	061a      	lsls	r2, r3, #24
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	3301      	adds	r3, #1
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	041b      	lsls	r3, r3, #16
 8013474:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	3302      	adds	r3, #2
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801347e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	3203      	adds	r2, #3
 8013484:	7812      	ldrb	r2, [r2, #0]
 8013486:	4313      	orrs	r3, r2
}
 8013488:	4618      	mov	r0, r3
 801348a:	370c      	adds	r7, #12
 801348c:	46bd      	mov	sp, r7
 801348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013492:	4770      	bx	lr

08013494 <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8013494:	b580      	push	{r7, lr}
 8013496:	b084      	sub	sp, #16
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7ff ffde 	bl	801345e <sensirion_common_bytes_to_uint32_t>
 80134a2:	4603      	mov	r3, r0
 80134a4:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	ee07 3a90 	vmov	s15, r3
}
 80134ac:	eeb0 0a67 	vmov.f32	s0, s15
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80134b6:	b480      	push	{r7}
 80134b8:	b085      	sub	sp, #20
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
 80134be:	460b      	mov	r3, r1
 80134c0:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80134c2:	23ff      	movs	r3, #255	@ 0xff
 80134c4:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80134c6:	2300      	movs	r3, #0
 80134c8:	81fb      	strh	r3, [r7, #14]
 80134ca:	e021      	b.n	8013510 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	4413      	add	r3, r2
 80134d2:	781a      	ldrb	r2, [r3, #0]
 80134d4:	7b7b      	ldrb	r3, [r7, #13]
 80134d6:	4053      	eors	r3, r2
 80134d8:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80134da:	2308      	movs	r3, #8
 80134dc:	733b      	strb	r3, [r7, #12]
 80134de:	e011      	b.n	8013504 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 80134e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	da07      	bge.n	80134f8 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80134e8:	7b7b      	ldrb	r3, [r7, #13]
 80134ea:	005b      	lsls	r3, r3, #1
 80134ec:	b25b      	sxtb	r3, r3
 80134ee:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80134f2:	b25b      	sxtb	r3, r3
 80134f4:	737b      	strb	r3, [r7, #13]
 80134f6:	e002      	b.n	80134fe <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 80134f8:	7b7b      	ldrb	r3, [r7, #13]
 80134fa:	005b      	lsls	r3, r3, #1
 80134fc:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80134fe:	7b3b      	ldrb	r3, [r7, #12]
 8013500:	3b01      	subs	r3, #1
 8013502:	733b      	strb	r3, [r7, #12]
 8013504:	7b3b      	ldrb	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d1ea      	bne.n	80134e0 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 801350a:	89fb      	ldrh	r3, [r7, #14]
 801350c:	3301      	adds	r3, #1
 801350e:	81fb      	strh	r3, [r7, #14]
 8013510:	89fa      	ldrh	r2, [r7, #14]
 8013512:	887b      	ldrh	r3, [r7, #2]
 8013514:	429a      	cmp	r2, r3
 8013516:	d3d9      	bcc.n	80134cc <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8013518:	7b7b      	ldrb	r3, [r7, #13]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3714      	adds	r7, #20
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr

08013526 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8013526:	b580      	push	{r7, lr}
 8013528:	b082      	sub	sp, #8
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]
 801352e:	460b      	mov	r3, r1
 8013530:	807b      	strh	r3, [r7, #2]
 8013532:	4613      	mov	r3, r2
 8013534:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8013536:	887b      	ldrh	r3, [r7, #2]
 8013538:	4619      	mov	r1, r3
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7ff ffbb 	bl	80134b6 <sensirion_i2c_generate_crc>
 8013540:	4603      	mov	r3, r0
 8013542:	461a      	mov	r2, r3
 8013544:	787b      	ldrb	r3, [r7, #1]
 8013546:	4293      	cmp	r3, r2
 8013548:	d001      	beq.n	801354e <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 801354a:	2301      	movs	r3, #1
 801354c:	e000      	b.n	8013550 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 801354e:	2300      	movs	r3, #0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8013558:	b480      	push	{r7}
 801355a:	b083      	sub	sp, #12
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	460b      	mov	r3, r1
 8013562:	807b      	strh	r3, [r7, #2]
 8013564:	4613      	mov	r3, r2
 8013566:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8013568:	883b      	ldrh	r3, [r7, #0]
 801356a:	0a1b      	lsrs	r3, r3, #8
 801356c:	b29a      	uxth	r2, r3
 801356e:	887b      	ldrh	r3, [r7, #2]
 8013570:	1c59      	adds	r1, r3, #1
 8013572:	8079      	strh	r1, [r7, #2]
 8013574:	4619      	mov	r1, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	440b      	add	r3, r1
 801357a:	b2d2      	uxtb	r2, r2
 801357c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 801357e:	887b      	ldrh	r3, [r7, #2]
 8013580:	1c5a      	adds	r2, r3, #1
 8013582:	807a      	strh	r2, [r7, #2]
 8013584:	461a      	mov	r2, r3
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4413      	add	r3, r2
 801358a:	883a      	ldrh	r2, [r7, #0]
 801358c:	b2d2      	uxtb	r2, r2
 801358e:	701a      	strb	r2, [r3, #0]
    return offset;
 8013590:	887b      	ldrh	r3, [r7, #2]
}
 8013592:	4618      	mov	r0, r3
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 801359e:	b590      	push	{r4, r7, lr}
 80135a0:	b083      	sub	sp, #12
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	460b      	mov	r3, r1
 80135a8:	807b      	strh	r3, [r7, #2]
 80135aa:	4613      	mov	r3, r2
 80135ac:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80135ae:	883b      	ldrh	r3, [r7, #0]
 80135b0:	0a1b      	lsrs	r3, r3, #8
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	887b      	ldrh	r3, [r7, #2]
 80135b6:	1c59      	adds	r1, r3, #1
 80135b8:	8079      	strh	r1, [r7, #2]
 80135ba:	4619      	mov	r1, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	440b      	add	r3, r1
 80135c0:	b2d2      	uxtb	r2, r2
 80135c2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 80135c4:	887b      	ldrh	r3, [r7, #2]
 80135c6:	1c5a      	adds	r2, r3, #1
 80135c8:	807a      	strh	r2, [r7, #2]
 80135ca:	461a      	mov	r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	4413      	add	r3, r2
 80135d0:	883a      	ldrh	r2, [r7, #0]
 80135d2:	b2d2      	uxtb	r2, r2
 80135d4:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 80135d6:	887b      	ldrh	r3, [r7, #2]
 80135d8:	3b02      	subs	r3, #2
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 80135de:	887b      	ldrh	r3, [r7, #2]
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	18d4      	adds	r4, r2, r3
 80135e4:	2102      	movs	r1, #2
 80135e6:	f7ff ff66 	bl	80134b6 <sensirion_i2c_generate_crc>
 80135ea:	4603      	mov	r3, r0
 80135ec:	7023      	strb	r3, [r4, #0]
    offset++;
 80135ee:	887b      	ldrh	r3, [r7, #2]
 80135f0:	3301      	adds	r3, #1
 80135f2:	807b      	strh	r3, [r7, #2]

    return offset;
 80135f4:	887b      	ldrh	r3, [r7, #2]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	370c      	adds	r7, #12
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd90      	pop	{r4, r7, pc}

080135fe <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80135fe:	b580      	push	{r7, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	af00      	add	r7, sp, #0
 8013604:	4603      	mov	r3, r0
 8013606:	6039      	str	r1, [r7, #0]
 8013608:	71fb      	strb	r3, [r7, #7]
 801360a:	4613      	mov	r3, r2
 801360c:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 801360e:	88ba      	ldrh	r2, [r7, #4]
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	4618      	mov	r0, r3
 8013616:	f000 f8c3 	bl	80137a0 <sensirion_i2c_hal_write>
 801361a:	4603      	mov	r3, r0
}
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	4603      	mov	r3, r0
 801362c:	6039      	str	r1, [r7, #0]
 801362e:	71fb      	strb	r3, [r7, #7]
 8013630:	4613      	mov	r3, r2
 8013632:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8013634:	88bb      	ldrh	r3, [r7, #4]
 8013636:	085b      	lsrs	r3, r3, #1
 8013638:	b29b      	uxth	r3, r3
 801363a:	461a      	mov	r2, r3
 801363c:	0052      	lsls	r2, r2, #1
 801363e:	4413      	add	r3, r2
 8013640:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8013642:	88bb      	ldrh	r3, [r7, #4]
 8013644:	f003 0301 	and.w	r3, r3, #1
 8013648:	b29b      	uxth	r3, r3
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 801364e:	2304      	movs	r3, #4
 8013650:	e047      	b.n	80136e2 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8013652:	897a      	ldrh	r2, [r7, #10]
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 f885 	bl	8013768 <sensirion_i2c_hal_read>
 801365e:	4603      	mov	r3, r0
 8013660:	813b      	strh	r3, [r7, #8]
    if (error) {
 8013662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d002      	beq.n	8013670 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 801366a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801366e:	e038      	b.n	80136e2 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8013670:	2300      	movs	r3, #0
 8013672:	81fb      	strh	r3, [r7, #14]
 8013674:	2300      	movs	r3, #0
 8013676:	81bb      	strh	r3, [r7, #12]
 8013678:	e02e      	b.n	80136d8 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801367a:	89fb      	ldrh	r3, [r7, #14]
 801367c:	683a      	ldr	r2, [r7, #0]
 801367e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8013680:	89fb      	ldrh	r3, [r7, #14]
 8013682:	3302      	adds	r3, #2
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	461a      	mov	r2, r3
 801368c:	2102      	movs	r1, #2
 801368e:	f7ff ff4a 	bl	8013526 <sensirion_i2c_check_crc>
 8013692:	4603      	mov	r3, r0
 8013694:	813b      	strh	r3, [r7, #8]
        if (error) {
 8013696:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d002      	beq.n	80136a4 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 801369e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80136a2:	e01e      	b.n	80136e2 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80136a4:	89fb      	ldrh	r3, [r7, #14]
 80136a6:	683a      	ldr	r2, [r7, #0]
 80136a8:	441a      	add	r2, r3
 80136aa:	89bb      	ldrh	r3, [r7, #12]
 80136ac:	1c59      	adds	r1, r3, #1
 80136ae:	81b9      	strh	r1, [r7, #12]
 80136b0:	4619      	mov	r1, r3
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	440b      	add	r3, r1
 80136b6:	7812      	ldrb	r2, [r2, #0]
 80136b8:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80136ba:	89fb      	ldrh	r3, [r7, #14]
 80136bc:	3301      	adds	r3, #1
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	441a      	add	r2, r3
 80136c2:	89bb      	ldrh	r3, [r7, #12]
 80136c4:	1c59      	adds	r1, r3, #1
 80136c6:	81b9      	strh	r1, [r7, #12]
 80136c8:	4619      	mov	r1, r3
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	440b      	add	r3, r1
 80136ce:	7812      	ldrb	r2, [r2, #0]
 80136d0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80136d2:	89fb      	ldrh	r3, [r7, #14]
 80136d4:	3303      	adds	r3, #3
 80136d6:	81fb      	strh	r3, [r7, #14]
 80136d8:	89fa      	ldrh	r2, [r7, #14]
 80136da:	897b      	ldrh	r3, [r7, #10]
 80136dc:	429a      	cmp	r2, r3
 80136de:	d3cc      	bcc.n	801367a <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3710      	adds	r7, #16
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 80136f0:	4814      	ldr	r0, [pc, #80]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 80136f2:	f7f2 fc75 	bl	8005fe0 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 80136f6:	4b13      	ldr	r3, [pc, #76]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 80136f8:	4a13      	ldr	r2, [pc, #76]	@ (8013748 <sensirion_i2c_hal_init+0x5c>)
 80136fa:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 80136fc:	4b11      	ldr	r3, [pc, #68]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 80136fe:	4a13      	ldr	r2, [pc, #76]	@ (801374c <sensirion_i2c_hal_init+0x60>)
 8013700:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013702:	4b10      	ldr	r3, [pc, #64]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 8013704:	2200      	movs	r2, #0
 8013706:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8013708:	4b0e      	ldr	r3, [pc, #56]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 801370a:	2200      	movs	r2, #0
 801370c:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801370e:	4b0d      	ldr	r3, [pc, #52]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 8013710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8013714:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013716:	4b0b      	ldr	r3, [pc, #44]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 8013718:	2200      	movs	r2, #0
 801371a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 801371c:	4b09      	ldr	r3, [pc, #36]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 801371e:	2200      	movs	r2, #0
 8013720:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013722:	4b08      	ldr	r3, [pc, #32]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 8013724:	2200      	movs	r2, #0
 8013726:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013728:	4b06      	ldr	r3, [pc, #24]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 801372a:	2200      	movs	r2, #0
 801372c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801372e:	4805      	ldr	r0, [pc, #20]	@ (8013744 <sensirion_i2c_hal_init+0x58>)
 8013730:	f7f2 fb12 	bl	8005d58 <HAL_I2C_Init>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d001      	beq.n	801373e <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 801373a:	f7ef fdad 	bl	8003298 <Error_Handler>
	  }
}
 801373e:	bf00      	nop
 8013740:	bd80      	pop	{r7, pc}
 8013742:	bf00      	nop
 8013744:	20001854 	.word	0x20001854
 8013748:	40005400 	.word	0x40005400
 801374c:	000186a0 	.word	0x000186a0

08013750 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8013750:	b580      	push	{r7, lr}
 8013752:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8013754:	4803      	ldr	r0, [pc, #12]	@ (8013764 <sensirion_i2c_hal_free+0x14>)
 8013756:	f7f2 fc43 	bl	8005fe0 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 801375a:	4802      	ldr	r0, [pc, #8]	@ (8013764 <sensirion_i2c_hal_free+0x14>)
 801375c:	f7ef fe76 	bl	800344c <HAL_I2C_MspDeInit>
}
 8013760:	bf00      	nop
 8013762:	bd80      	pop	{r7, pc}
 8013764:	20001854 	.word	0x20001854

08013768 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af02      	add	r7, sp, #8
 801376e:	4603      	mov	r3, r0
 8013770:	6039      	str	r1, [r7, #0]
 8013772:	71fb      	strb	r3, [r7, #7]
 8013774:	4613      	mov	r3, r2
 8013776:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8013778:	79fb      	ldrb	r3, [r7, #7]
 801377a:	b29b      	uxth	r3, r3
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	b299      	uxth	r1, r3
 8013780:	88bb      	ldrh	r3, [r7, #4]
 8013782:	f04f 32ff 	mov.w	r2, #4294967295
 8013786:	9200      	str	r2, [sp, #0]
 8013788:	683a      	ldr	r2, [r7, #0]
 801378a:	4804      	ldr	r0, [pc, #16]	@ (801379c <sensirion_i2c_hal_read+0x34>)
 801378c:	f7f2 fd56 	bl	800623c <HAL_I2C_Master_Receive>
 8013790:	4603      	mov	r3, r0
 8013792:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8013794:	4618      	mov	r0, r3
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	20001854 	.word	0x20001854

080137a0 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af02      	add	r7, sp, #8
 80137a6:	4603      	mov	r3, r0
 80137a8:	6039      	str	r1, [r7, #0]
 80137aa:	71fb      	strb	r3, [r7, #7]
 80137ac:	4613      	mov	r3, r2
 80137ae:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 80137b0:	79fb      	ldrb	r3, [r7, #7]
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	b299      	uxth	r1, r3
 80137b8:	88bb      	ldrh	r3, [r7, #4]
 80137ba:	f04f 32ff 	mov.w	r2, #4294967295
 80137be:	9200      	str	r2, [sp, #0]
 80137c0:	683a      	ldr	r2, [r7, #0]
 80137c2:	4804      	ldr	r0, [pc, #16]	@ (80137d4 <sensirion_i2c_hal_write+0x34>)
 80137c4:	f7f2 fc3c 	bl	8006040 <HAL_I2C_Master_Transmit>
 80137c8:	4603      	mov	r3, r0
 80137ca:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	20001854 	.word	0x20001854

080137d8 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	4a0d      	ldr	r2, [pc, #52]	@ (8013818 <sensirion_i2c_hal_sleep_usec+0x40>)
 80137e4:	fba2 2303 	umull	r2, r3, r2, r3
 80137e8:	099b      	lsrs	r3, r3, #6
 80137ea:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	4b0a      	ldr	r3, [pc, #40]	@ (8013818 <sensirion_i2c_hal_sleep_usec+0x40>)
 80137f0:	fba3 1302 	umull	r1, r3, r3, r2
 80137f4:	099b      	lsrs	r3, r3, #6
 80137f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80137fa:	fb01 f303 	mul.w	r3, r1, r3
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	d002      	beq.n	801380a <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	3301      	adds	r3, #1
 8013808:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 801380a:	68f8      	ldr	r0, [r7, #12]
 801380c:	f7f0 fa9a 	bl	8003d44 <HAL_Delay>
}
 8013810:	bf00      	nop
 8013812:	3710      	adds	r7, #16
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	10624dd3 	.word	0x10624dd3

0801381c <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	061a      	lsls	r2, r3, #24
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3301      	adds	r3, #1
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	041b      	lsls	r3, r3, #16
 8013832:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	3302      	adds	r3, #2
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801383c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	3203      	adds	r2, #3
 8013842:	7812      	ldrb	r2, [r2, #0]
 8013844:	4313      	orrs	r3, r2
}
 8013846:	4618      	mov	r0, r3
 8013848:	370c      	adds	r7, #12
 801384a:	46bd      	mov	sp, r7
 801384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013850:	4770      	bx	lr

08013852 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8013852:	b580      	push	{r7, lr}
 8013854:	b084      	sub	sp, #16
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f7ff ffde 	bl	801381c <sensirion_bytes_to_uint32_t>
 8013860:	4603      	mov	r3, r0
 8013862:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	ee07 3a90 	vmov	s15, r3
}
 801386a:	eeb0 0a67 	vmov.f32	s0, s15
 801386e:	3710      	adds	r7, #16
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	4603      	mov	r3, r0
 801387c:	603a      	str	r2, [r7, #0]
 801387e:	71fb      	strb	r3, [r7, #7]
 8013880:	460b      	mov	r3, r1
 8013882:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8013884:	79fa      	ldrb	r2, [r7, #7]
 8013886:	79bb      	ldrb	r3, [r7, #6]
 8013888:	4413      	add	r3, r2
 801388a:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 801388c:	e006      	b.n	801389c <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	1c5a      	adds	r2, r3, #1
 8013892:	603a      	str	r2, [r7, #0]
 8013894:	781a      	ldrb	r2, [r3, #0]
 8013896:	79fb      	ldrb	r3, [r7, #7]
 8013898:	4413      	add	r3, r2
 801389a:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 801389c:	79bb      	ldrb	r3, [r7, #6]
 801389e:	1e5a      	subs	r2, r3, #1
 80138a0:	71ba      	strb	r2, [r7, #6]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d1f3      	bne.n	801388e <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 80138a6:	79fb      	ldrb	r3, [r7, #7]
 80138a8:	43db      	mvns	r3, r3
 80138aa:	b2db      	uxtb	r3, r3
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr

080138b8 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 80138b8:	b480      	push	{r7}
 80138ba:	b087      	sub	sp, #28
 80138bc:	af00      	add	r7, sp, #0
 80138be:	4603      	mov	r3, r0
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
 80138c4:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80138c6:	2300      	movs	r3, #0
 80138c8:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80138ca:	e026      	b.n	801391a <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	60ba      	str	r2, [r7, #8]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80138d6:	7d7b      	ldrb	r3, [r7, #21]
 80138d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80138da:	dc16      	bgt.n	801390a <sensirion_shdlc_stuff_data+0x52>
 80138dc:	2b7d      	cmp	r3, #125	@ 0x7d
 80138de:	da03      	bge.n	80138e8 <sensirion_shdlc_stuff_data+0x30>
 80138e0:	2b11      	cmp	r3, #17
 80138e2:	d001      	beq.n	80138e8 <sensirion_shdlc_stuff_data+0x30>
 80138e4:	2b13      	cmp	r3, #19
 80138e6:	d110      	bne.n	801390a <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	607a      	str	r2, [r7, #4]
 80138ee:	227d      	movs	r2, #125	@ 0x7d
 80138f0:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	1c5a      	adds	r2, r3, #1
 80138f6:	607a      	str	r2, [r7, #4]
 80138f8:	7d7a      	ldrb	r2, [r7, #21]
 80138fa:	f082 0220 	eor.w	r2, r2, #32
 80138fe:	b2d2      	uxtb	r2, r2
 8013900:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8013902:	8afb      	ldrh	r3, [r7, #22]
 8013904:	3302      	adds	r3, #2
 8013906:	82fb      	strh	r3, [r7, #22]
                break;
 8013908:	e007      	b.n	801391a <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	1c5a      	adds	r2, r3, #1
 801390e:	607a      	str	r2, [r7, #4]
 8013910:	7d7a      	ldrb	r2, [r7, #21]
 8013912:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8013914:	8afb      	ldrh	r3, [r7, #22]
 8013916:	3301      	adds	r3, #1
 8013918:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 801391a:	7bfb      	ldrb	r3, [r7, #15]
 801391c:	1e5a      	subs	r2, r3, #1
 801391e:	73fa      	strb	r2, [r7, #15]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d1d3      	bne.n	80138cc <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8013924:	8afb      	ldrh	r3, [r7, #22]
}
 8013926:	4618      	mov	r0, r3
 8013928:	371c      	adds	r7, #28
 801392a:	46bd      	mov	sp, r7
 801392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013930:	4770      	bx	lr

08013932 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8013932:	b480      	push	{r7}
 8013934:	b083      	sub	sp, #12
 8013936:	af00      	add	r7, sp, #0
 8013938:	4603      	mov	r3, r0
 801393a:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 801393c:	79fb      	ldrb	r3, [r7, #7]
 801393e:	2b7d      	cmp	r3, #125	@ 0x7d
 8013940:	bf0c      	ite	eq
 8013942:	2301      	moveq	r3, #1
 8013944:	2300      	movne	r3, #0
 8013946:	b2db      	uxtb	r3, r3
}
 8013948:	4618      	mov	r0, r3
 801394a:	370c      	adds	r7, #12
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr

08013954 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	4603      	mov	r3, r0
 801395c:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 801395e:	79fb      	ldrb	r3, [r7, #7]
 8013960:	2b5e      	cmp	r3, #94	@ 0x5e
 8013962:	d010      	beq.n	8013986 <sensirion_shdlc_unstuff_byte+0x32>
 8013964:	2b5e      	cmp	r3, #94	@ 0x5e
 8013966:	dc10      	bgt.n	801398a <sensirion_shdlc_unstuff_byte+0x36>
 8013968:	2b5d      	cmp	r3, #93	@ 0x5d
 801396a:	d00a      	beq.n	8013982 <sensirion_shdlc_unstuff_byte+0x2e>
 801396c:	2b5d      	cmp	r3, #93	@ 0x5d
 801396e:	dc0c      	bgt.n	801398a <sensirion_shdlc_unstuff_byte+0x36>
 8013970:	2b31      	cmp	r3, #49	@ 0x31
 8013972:	d002      	beq.n	801397a <sensirion_shdlc_unstuff_byte+0x26>
 8013974:	2b33      	cmp	r3, #51	@ 0x33
 8013976:	d002      	beq.n	801397e <sensirion_shdlc_unstuff_byte+0x2a>
 8013978:	e007      	b.n	801398a <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 801397a:	2311      	movs	r3, #17
 801397c:	e006      	b.n	801398c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 801397e:	2313      	movs	r3, #19
 8013980:	e004      	b.n	801398c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8013982:	237d      	movs	r3, #125	@ 0x7d
 8013984:	e002      	b.n	801398c <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8013986:	237e      	movs	r3, #126	@ 0x7e
 8013988:	e000      	b.n	801398c <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 801398a:	79fb      	ldrb	r3, [r7, #7]
    }
}
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	603b      	str	r3, [r7, #0]
 80139a0:	4603      	mov	r3, r0
 80139a2:	71fb      	strb	r3, [r7, #7]
 80139a4:	460b      	mov	r3, r1
 80139a6:	71bb      	strb	r3, [r7, #6]
 80139a8:	4613      	mov	r3, r2
 80139aa:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 80139ac:	797a      	ldrb	r2, [r7, #5]
 80139ae:	79b9      	ldrb	r1, [r7, #6]
 80139b0:	79f8      	ldrb	r0, [r7, #7]
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	f000 f818 	bl	80139e8 <sensirion_shdlc_tx>
 80139b8:	4603      	mov	r3, r0
 80139ba:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80139bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <sensirion_shdlc_xcv+0x32>
        return ret;
 80139c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80139c8:	e00a      	b.n	80139e0 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80139ca:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80139ce:	f000 fb07 	bl	8013fe0 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80139d2:	7e3b      	ldrb	r3, [r7, #24]
 80139d4:	6a3a      	ldr	r2, [r7, #32]
 80139d6:	69f9      	ldr	r1, [r7, #28]
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 f8d7 	bl	8013b8c <sensirion_shdlc_rx>
 80139de:	4603      	mov	r3, r0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3710      	adds	r7, #16
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80139e8:	b590      	push	{r4, r7, lr}
 80139ea:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	4604      	mov	r4, r0
 80139f2:	4608      	mov	r0, r1
 80139f4:	4611      	mov	r1, r2
 80139f6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80139fa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80139fe:	6013      	str	r3, [r2, #0]
 8013a00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a04:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8013a08:	4622      	mov	r2, r4
 8013a0a:	701a      	strb	r2, [r3, #0]
 8013a0c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a10:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8013a14:	4602      	mov	r2, r0
 8013a16:	701a      	strb	r2, [r3, #0]
 8013a18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a1c:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013a20:	460a      	mov	r2, r1
 8013a22:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8013a24:	2300      	movs	r3, #0
 8013a26:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8013a2a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a2e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8013a32:	781a      	ldrb	r2, [r3, #0]
 8013a34:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a38:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	4413      	add	r3, r2
 8013a40:	b2d8      	uxtb	r0, r3
 8013a42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a46:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013a4a:	7819      	ldrb	r1, [r3, #0]
 8013a4c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a50:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	f7ff ff0d 	bl	8013874 <sensirion_shdlc_crc>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8013a60:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a64:	1c5a      	adds	r2, r3, #1
 8013a66:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013a70:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8013a74:	217e      	movs	r1, #126	@ 0x7e
 8013a76:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8013a78:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a7c:	f107 0208 	add.w	r2, r7, #8
 8013a80:	441a      	add	r2, r3
 8013a82:	1dfb      	adds	r3, r7, #7
 8013a84:	4619      	mov	r1, r3
 8013a86:	2001      	movs	r0, #1
 8013a88:	f7ff ff16 	bl	80138b8 <sensirion_shdlc_stuff_data>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a94:	4413      	add	r3, r2
 8013a96:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8013a9a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013a9e:	f107 0208 	add.w	r2, r7, #8
 8013aa2:	441a      	add	r2, r3
 8013aa4:	1dbb      	adds	r3, r7, #6
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	2001      	movs	r0, #1
 8013aaa:	f7ff ff05 	bl	80138b8 <sensirion_shdlc_stuff_data>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8013abc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013ac0:	f107 0208 	add.w	r2, r7, #8
 8013ac4:	441a      	add	r2, r3
 8013ac6:	1d7b      	adds	r3, r7, #5
 8013ac8:	4619      	mov	r1, r3
 8013aca:	2001      	movs	r0, #1
 8013acc:	f7ff fef4 	bl	80138b8 <sensirion_shdlc_stuff_data>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013ad8:	4413      	add	r3, r2
 8013ada:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8013ade:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013ae2:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8013ae6:	7818      	ldrb	r0, [r3, #0]
 8013ae8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013aec:	f107 0208 	add.w	r2, r7, #8
 8013af0:	441a      	add	r2, r3
 8013af2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013af6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8013afa:	6819      	ldr	r1, [r3, #0]
 8013afc:	f7ff fedc 	bl	80138b8 <sensirion_shdlc_stuff_data>
 8013b00:	4603      	mov	r3, r0
 8013b02:	461a      	mov	r2, r3
 8013b04:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b08:	4413      	add	r3, r2
 8013b0a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8013b0e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b12:	f107 0208 	add.w	r2, r7, #8
 8013b16:	441a      	add	r2, r3
 8013b18:	f207 2313 	addw	r3, r7, #531	@ 0x213
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	2001      	movs	r0, #1
 8013b20:	f7ff feca 	bl	80138b8 <sensirion_shdlc_stuff_data>
 8013b24:	4603      	mov	r3, r0
 8013b26:	461a      	mov	r2, r3
 8013b28:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8013b32:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b36:	1c5a      	adds	r2, r3, #1
 8013b38:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8013b42:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8013b46:	217e      	movs	r1, #126	@ 0x7e
 8013b48:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8013b4a:	f107 0208 	add.w	r2, r7, #8
 8013b4e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b52:	4611      	mov	r1, r2
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 f9db 	bl	8013f10 <sensirion_uart_tx>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 8013b60:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	da02      	bge.n	8013b6e <sensirion_shdlc_tx+0x186>
        return ret;
 8013b68:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8013b6c:	e009      	b.n	8013b82 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8013b6e:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 8013b72:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d002      	beq.n	8013b80 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8013b7a:	f06f 0305 	mvn.w	r3, #5
 8013b7e:	e000      	b.n	8013b82 <sensirion_shdlc_tx+0x19a>
    return 0;
 8013b80:	2300      	movs	r3, #0
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd90      	pop	{r4, r7, pc}

08013b8c <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8013b8c:	b590      	push	{r4, r7, lr}
 8013b8e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013b98:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b9c:	6019      	str	r1, [r3, #0]
 8013b9e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013ba2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013ba6:	601a      	str	r2, [r3, #0]
 8013ba8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013bac:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8013bb4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013bb8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8013bc2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013bc6:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	3306      	adds	r3, #6
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	005b      	lsls	r3, r3, #1
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	f107 0210 	add.w	r2, r7, #16
 8013bd8:	4611      	mov	r1, r2
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f000 f9d2 	bl	8013f84 <sensirion_uart_rx>
 8013be0:	4603      	mov	r3, r0
 8013be2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8013be6:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	dd03      	ble.n	8013bf6 <sensirion_shdlc_rx+0x6a>
 8013bee:	4ba0      	ldr	r3, [pc, #640]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	2b7e      	cmp	r3, #126	@ 0x7e
 8013bf4:	d002      	beq.n	8013bfc <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8013bf6:	f06f 0301 	mvn.w	r3, #1
 8013bfa:	e133      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013c02:	2301      	movs	r3, #1
 8013c04:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013c08:	2300      	movs	r3, #0
 8013c0a:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8013c0e:	e03a      	b.n	8013c86 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8013c10:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d015      	beq.n	8013c44 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013c18:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c1c:	4a94      	ldr	r2, [pc, #592]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013c1e:	5cd2      	ldrb	r2, [r2, r3]
 8013c20:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013c24:	1c59      	adds	r1, r3, #1
 8013c26:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013c30:	185c      	adds	r4, r3, r1
 8013c32:	4610      	mov	r0, r2
 8013c34:	f7ff fe8e 	bl	8013954 <sensirion_shdlc_unstuff_byte>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013c42:	e01b      	b.n	8013c7c <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013c44:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c48:	4a89      	ldr	r2, [pc, #548]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013c4a:	5cd3      	ldrb	r3, [r2, r3]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7ff fe70 	bl	8013932 <sensirion_shdlc_check_unstuff>
 8013c52:	4603      	mov	r3, r0
 8013c54:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013c58:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d10d      	bne.n	8013c7c <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8013c60:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013c64:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013c68:	1c59      	adds	r1, r3, #1
 8013c6a:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013c6e:	4619      	mov	r1, r3
 8013c70:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8013c74:	440b      	add	r3, r1
 8013c76:	497e      	ldr	r1, [pc, #504]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013c78:	5c8a      	ldrb	r2, [r1, r2]
 8013c7a:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013c7c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013c80:	3301      	adds	r3, #1
 8013c82:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013c86:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013c8a:	2b03      	cmp	r3, #3
 8013c8c:	d806      	bhi.n	8013c9c <sensirion_shdlc_rx+0x110>
 8013c8e:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013c92:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013c96:	3b02      	subs	r3, #2
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	dbb9      	blt.n	8013c10 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8013c9c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013ca0:	2b04      	cmp	r3, #4
 8013ca2:	d103      	bne.n	8013cac <sensirion_shdlc_rx+0x120>
 8013ca4:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013cac:	f06f 0304 	mvn.w	r3, #4
 8013cb0:	e0d8      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8013cb2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013cb6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	78db      	ldrb	r3, [r3, #3]
 8013cbe:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8013cc2:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8013cc6:	7812      	ldrb	r2, [r2, #0]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d202      	bcs.n	8013cd2 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8013ccc:	f06f 0306 	mvn.w	r3, #6
 8013cd0:	e0c8      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8013cde:	e040      	b.n	8013d62 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8013ce0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d018      	beq.n	8013d1a <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8013ce8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013cec:	4a60      	ldr	r2, [pc, #384]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013cee:	5cd2      	ldrb	r2, [r2, r3]
 8013cf0:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013cf4:	1c59      	adds	r1, r3, #1
 8013cf6:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d00:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	185c      	adds	r4, r3, r1
 8013d08:	4610      	mov	r0, r2
 8013d0a:	f7ff fe23 	bl	8013954 <sensirion_shdlc_unstuff_byte>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8013d18:	e01e      	b.n	8013d58 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013d1a:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013d1e:	4a54      	ldr	r2, [pc, #336]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013d20:	5cd3      	ldrb	r3, [r2, r3]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff fe05 	bl	8013932 <sensirion_shdlc_check_unstuff>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8013d2e:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d110      	bne.n	8013d58 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8013d36:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013d3a:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8013d3e:	1c59      	adds	r1, r3, #1
 8013d40:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8013d44:	4619      	mov	r1, r3
 8013d46:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d4a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	440b      	add	r3, r1
 8013d52:	4947      	ldr	r1, [pc, #284]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013d54:	5c8a      	ldrb	r2, [r1, r2]
 8013d56:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8013d58:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8013d62:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d66:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	78db      	ldrb	r3, [r3, #3]
 8013d6e:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d206      	bcs.n	8013d84 <sensirion_shdlc_rx+0x1f8>
 8013d76:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013d7a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013d7e:	3b02      	subs	r3, #2
 8013d80:	429a      	cmp	r2, r3
 8013d82:	dbad      	blt.n	8013ce0 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8013d84:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d002      	beq.n	8013d92 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013d8c:	f06f 0304 	mvn.w	r3, #4
 8013d90:	e068      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8013d92:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013d96:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	78db      	ldrb	r3, [r3, #3]
 8013d9e:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d202      	bcs.n	8013dac <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013da6:	f06f 0304 	mvn.w	r3, #4
 8013daa:	e05b      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8013dac:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013db0:	1c5a      	adds	r2, r3, #1
 8013db2:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013db6:	461a      	mov	r2, r3
 8013db8:	4b2d      	ldr	r3, [pc, #180]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013dba:	5c9b      	ldrb	r3, [r3, r2]
 8013dbc:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8013dc0:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff fdb4 	bl	8013932 <sensirion_shdlc_check_unstuff>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00d      	beq.n	8013dec <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8013dd0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013dd4:	1c5a      	adds	r2, r3, #1
 8013dd6:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8013dda:	461a      	mov	r2, r3
 8013ddc:	4b24      	ldr	r3, [pc, #144]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013dde:	5c9b      	ldrb	r3, [r3, r2]
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7ff fdb7 	bl	8013954 <sensirion_shdlc_unstuff_byte>
 8013de6:	4603      	mov	r3, r0
 8013de8:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013dec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013df0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	781a      	ldrb	r2, [r3, #0]
 8013df8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013dfc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	785b      	ldrb	r3, [r3, #1]
 8013e04:	4413      	add	r3, r2
 8013e06:	b2da      	uxtb	r2, r3
 8013e08:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013e0c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	789b      	ldrb	r3, [r3, #2]
 8013e14:	4413      	add	r3, r2
 8013e16:	b2d8      	uxtb	r0, r3
 8013e18:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013e1c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	78d9      	ldrb	r1, [r3, #3]
 8013e24:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8013e28:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	f7ff fd21 	bl	8013874 <sensirion_shdlc_crc>
 8013e32:	4603      	mov	r3, r0
 8013e34:	461a      	mov	r2, r3
 8013e36:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d002      	beq.n	8013e44 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8013e3e:	f06f 0303 	mvn.w	r3, #3
 8013e42:	e00f      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013e44:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8013e48:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	da05      	bge.n	8013e5c <sensirion_shdlc_rx+0x2d0>
 8013e50:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8013e54:	4a06      	ldr	r2, [pc, #24]	@ (8013e70 <sensirion_shdlc_rx+0x2e4>)
 8013e56:	5cd3      	ldrb	r3, [r2, r3]
 8013e58:	2b7e      	cmp	r3, #126	@ 0x7e
 8013e5a:	d002      	beq.n	8013e62 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013e5c:	f06f 0302 	mvn.w	r3, #2
 8013e60:	e000      	b.n	8013e64 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd90      	pop	{r4, r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	200015a8 	.word	0x200015a8

08013e74 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013e74:	b580      	push	{r7, lr}
 8013e76:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8013e78:	4819      	ldr	r0, [pc, #100]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e7a:	f7f7 fe8c 	bl	800bb96 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8013e7e:	4b18      	ldr	r3, [pc, #96]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e80:	4a18      	ldr	r2, [pc, #96]	@ (8013ee4 <sensirion_uart_open+0x70>)
 8013e82:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8013e84:	4b16      	ldr	r3, [pc, #88]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e86:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8013e8a:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013e8c:	4b14      	ldr	r3, [pc, #80]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8013e92:	4b13      	ldr	r3, [pc, #76]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8013e98:	4b11      	ldr	r3, [pc, #68]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8013e9e:	4b10      	ldr	r3, [pc, #64]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013ea0:	220c      	movs	r2, #12
 8013ea2:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013eac:	2200      	movs	r2, #0
 8013eae:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013eb0:	480b      	ldr	r0, [pc, #44]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013eb2:	f7f7 fe23 	bl	800bafc <HAL_UART_Init>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d001      	beq.n	8013ec0 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8013ebc:	f7ef f9ec 	bl	8003298 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8013ec0:	f240 220a 	movw	r2, #522	@ 0x20a
 8013ec4:	4908      	ldr	r1, [pc, #32]	@ (8013ee8 <sensirion_uart_open+0x74>)
 8013ec6:	4806      	ldr	r0, [pc, #24]	@ (8013ee0 <sensirion_uart_open+0x6c>)
 8013ec8:	f7f7 ff56 	bl	800bd78 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8013ecc:	4b07      	ldr	r3, [pc, #28]	@ (8013eec <sensirion_uart_open+0x78>)
 8013ece:	2200      	movs	r2, #0
 8013ed0:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8013ed2:	4b07      	ldr	r3, [pc, #28]	@ (8013ef0 <sensirion_uart_open+0x7c>)
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8013ed8:	2300      	movs	r3, #0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	20001ad4 	.word	0x20001ad4
 8013ee4:	40004400 	.word	0x40004400
 8013ee8:	200015a8 	.word	0x200015a8
 8013eec:	20001b72 	.word	0x20001b72
 8013ef0:	20001b74 	.word	0x20001b74

08013ef4 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8013ef8:	4804      	ldr	r0, [pc, #16]	@ (8013f0c <sensirion_uart_close+0x18>)
 8013efa:	f7f7 fe4c 	bl	800bb96 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8013efe:	4803      	ldr	r0, [pc, #12]	@ (8013f0c <sensirion_uart_close+0x18>)
 8013f00:	f7ef fcec 	bl	80038dc <HAL_UART_MspDeInit>
    return 0;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	20001ad4 	.word	0x20001ad4

08013f10 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	6039      	str	r1, [r7, #0]
 8013f1a:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013f1c:	88fa      	ldrh	r2, [r7, #6]
 8013f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f22:	6839      	ldr	r1, [r7, #0]
 8013f24:	4807      	ldr	r0, [pc, #28]	@ (8013f44 <sensirion_uart_tx+0x34>)
 8013f26:	f7f7 fe65 	bl	800bbf4 <HAL_UART_Transmit>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d102      	bne.n	8013f36 <sensirion_uart_tx+0x26>
		{
			return data_len;
 8013f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f34:	e001      	b.n	8013f3a <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013f36:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3708      	adds	r7, #8
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20001ad4 	.word	0x20001ad4

08013f48 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	460b      	mov	r3, r1
 8013f52:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013f54:	4a07      	ldr	r2, [pc, #28]	@ (8013f74 <HAL_UARTEx_RxEventCallback+0x2c>)
 8013f56:	887b      	ldrh	r3, [r7, #2]
 8013f58:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013f5a:	4b07      	ldr	r3, [pc, #28]	@ (8013f78 <HAL_UARTEx_RxEventCallback+0x30>)
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8013f60:	f240 220a 	movw	r2, #522	@ 0x20a
 8013f64:	4905      	ldr	r1, [pc, #20]	@ (8013f7c <HAL_UARTEx_RxEventCallback+0x34>)
 8013f66:	4806      	ldr	r0, [pc, #24]	@ (8013f80 <HAL_UARTEx_RxEventCallback+0x38>)
 8013f68:	f7f7 ff06 	bl	800bd78 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013f6c:	bf00      	nop
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	20001b72 	.word	0x20001b72
 8013f78:	20001b76 	.word	0x20001b76
 8013f7c:	200015a8 	.word	0x200015a8
 8013f80:	20001ad4 	.word	0x20001ad4

08013f84 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	6039      	str	r1, [r7, #0]
 8013f8e:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013f90:	2300      	movs	r3, #0
 8013f92:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013f94:	e005      	b.n	8013fa2 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	3301      	adds	r3, #1
 8013f9a:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013f9c:	200a      	movs	r0, #10
 8013f9e:	f7ef fed1 	bl	8003d44 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8013fd0 <sensirion_uart_rx+0x4c>)
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d102      	bne.n	8013fb0 <sensirion_uart_rx+0x2c>
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2b02      	cmp	r3, #2
 8013fae:	d9f2      	bls.n	8013f96 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013fb0:	4b07      	ldr	r3, [pc, #28]	@ (8013fd0 <sensirion_uart_rx+0x4c>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8013fb6:	4b07      	ldr	r3, [pc, #28]	@ (8013fd4 <sensirion_uart_rx+0x50>)
 8013fb8:	2200      	movs	r2, #0
 8013fba:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013fbc:	4b06      	ldr	r3, [pc, #24]	@ (8013fd8 <sensirion_uart_rx+0x54>)
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8013fc2:	4b06      	ldr	r3, [pc, #24]	@ (8013fdc <sensirion_uart_rx+0x58>)
 8013fc4:	881b      	ldrh	r3, [r3, #0]
 8013fc6:	b21b      	sxth	r3, r3
	//return i;
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	20001b76 	.word	0x20001b76
 8013fd4:	20001b78 	.word	0x20001b78
 8013fd8:	20001b74 	.word	0x20001b74
 8013fdc:	20001b72 	.word	0x20001b72

08013fe0 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	4a06      	ldr	r2, [pc, #24]	@ (8014004 <sensirion_sleep_usec+0x24>)
 8013fec:	fba2 2303 	umull	r2, r3, r2, r3
 8013ff0:	099b      	lsrs	r3, r3, #6
 8013ff2:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f7ef fea5 	bl	8003d44 <HAL_Delay>
}
 8013ffa:	bf00      	nop
 8013ffc:	3708      	adds	r7, #8
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	10624dd3 	.word	0x10624dd3

08014008 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8014008:	b580      	push	{r7, lr}
 801400a:	b08a      	sub	sp, #40	@ 0x28
 801400c:	af04      	add	r7, sp, #16
 801400e:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8014010:	2303      	movs	r3, #3
 8014012:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8014014:	f107 020c 	add.w	r2, r7, #12
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	9302      	str	r3, [sp, #8]
 801401c:	f107 0310 	add.w	r3, r7, #16
 8014020:	9301      	str	r3, [sp, #4]
 8014022:	2320      	movs	r3, #32
 8014024:	9300      	str	r3, [sp, #0]
 8014026:	4613      	mov	r3, r2
 8014028:	2201      	movs	r2, #1
 801402a:	21d0      	movs	r1, #208	@ 0xd0
 801402c:	2000      	movs	r0, #0
 801402e:	f7ff fcb3 	bl	8013998 <sensirion_shdlc_xcv>
 8014032:	4603      	mov	r3, r0
 8014034:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8014036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801403a:	2b00      	cmp	r3, #0
 801403c:	da02      	bge.n	8014044 <sps30_get_serial+0x3c>
        return ret;
 801403e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014042:	e009      	b.n	8014058 <sps30_get_serial+0x50>

    if (header.state)
 8014044:	7cbb      	ldrb	r3, [r7, #18]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d005      	beq.n	8014056 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 801404a:	7cbb      	ldrb	r3, [r7, #18]
 801404c:	b21b      	sxth	r3, r3
 801404e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014052:	b21b      	sxth	r3, r3
 8014054:	e000      	b.n	8014058 <sps30_get_serial+0x50>

    return 0;
 8014056:	2300      	movs	r3, #0
}
 8014058:	4618      	mov	r0, r3
 801405a:	3718      	adds	r7, #24
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8014066:	f240 3301 	movw	r3, #769	@ 0x301
 801406a:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 801406c:	463a      	mov	r2, r7
 801406e:	2300      	movs	r3, #0
 8014070:	9302      	str	r3, [sp, #8]
 8014072:	1d3b      	adds	r3, r7, #4
 8014074:	9301      	str	r3, [sp, #4]
 8014076:	2300      	movs	r3, #0
 8014078:	9300      	str	r3, [sp, #0]
 801407a:	4613      	mov	r3, r2
 801407c:	2202      	movs	r2, #2
 801407e:	2100      	movs	r1, #0
 8014080:	2000      	movs	r0, #0
 8014082:	f7ff fc89 	bl	8013998 <sensirion_shdlc_xcv>
 8014086:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8014096:	2300      	movs	r3, #0
 8014098:	9302      	str	r3, [sp, #8]
 801409a:	1d3b      	adds	r3, r7, #4
 801409c:	9301      	str	r3, [sp, #4]
 801409e:	2300      	movs	r3, #0
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	2300      	movs	r3, #0
 80140a4:	2200      	movs	r2, #0
 80140a6:	2101      	movs	r1, #1
 80140a8:	2000      	movs	r0, #0
 80140aa:	f7ff fc75 	bl	8013998 <sensirion_shdlc_xcv>
 80140ae:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3708      	adds	r7, #8
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b092      	sub	sp, #72	@ 0x48
 80140bc:	af04      	add	r7, sp, #16
 80140be:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 80140c0:	f107 0308 	add.w	r3, r7, #8
 80140c4:	9302      	str	r3, [sp, #8]
 80140c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80140ca:	9301      	str	r3, [sp, #4]
 80140cc:	2328      	movs	r3, #40	@ 0x28
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	2300      	movs	r3, #0
 80140d2:	2200      	movs	r2, #0
 80140d4:	2103      	movs	r1, #3
 80140d6:	2000      	movs	r0, #0
 80140d8:	f7ff fc5e 	bl	8013998 <sensirion_shdlc_xcv>
 80140dc:	4603      	mov	r3, r0
 80140de:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80140e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <sps30_read_measurement+0x36>
        return error;
 80140e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80140ec:	e07f      	b.n	80141ee <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80140ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80140f2:	2b28      	cmp	r3, #40	@ 0x28
 80140f4:	d002      	beq.n	80140fc <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80140f6:	f04f 33ff 	mov.w	r3, #4294967295
 80140fa:	e078      	b.n	80141ee <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80140fc:	f107 0308 	add.w	r3, r7, #8
 8014100:	4618      	mov	r0, r3
 8014102:	f7ff fba6 	bl	8013852 <sensirion_bytes_to_float>
 8014106:	eef0 7a40 	vmov.f32	s15, s0
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8014110:	f107 0308 	add.w	r3, r7, #8
 8014114:	3304      	adds	r3, #4
 8014116:	4618      	mov	r0, r3
 8014118:	f7ff fb9b 	bl	8013852 <sensirion_bytes_to_float>
 801411c:	eef0 7a40 	vmov.f32	s15, s0
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8014126:	f107 0308 	add.w	r3, r7, #8
 801412a:	3308      	adds	r3, #8
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff fb90 	bl	8013852 <sensirion_bytes_to_float>
 8014132:	eef0 7a40 	vmov.f32	s15, s0
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 801413c:	f107 0308 	add.w	r3, r7, #8
 8014140:	330c      	adds	r3, #12
 8014142:	4618      	mov	r0, r3
 8014144:	f7ff fb85 	bl	8013852 <sensirion_bytes_to_float>
 8014148:	eef0 7a40 	vmov.f32	s15, s0
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8014152:	f107 0308 	add.w	r3, r7, #8
 8014156:	3310      	adds	r3, #16
 8014158:	4618      	mov	r0, r3
 801415a:	f7ff fb7a 	bl	8013852 <sensirion_bytes_to_float>
 801415e:	eef0 7a40 	vmov.f32	s15, s0
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8014168:	f107 0308 	add.w	r3, r7, #8
 801416c:	3314      	adds	r3, #20
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fb6f 	bl	8013852 <sensirion_bytes_to_float>
 8014174:	eef0 7a40 	vmov.f32	s15, s0
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 801417e:	f107 0308 	add.w	r3, r7, #8
 8014182:	3318      	adds	r3, #24
 8014184:	4618      	mov	r0, r3
 8014186:	f7ff fb64 	bl	8013852 <sensirion_bytes_to_float>
 801418a:	eef0 7a40 	vmov.f32	s15, s0
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8014194:	f107 0308 	add.w	r3, r7, #8
 8014198:	331c      	adds	r3, #28
 801419a:	4618      	mov	r0, r3
 801419c:	f7ff fb59 	bl	8013852 <sensirion_bytes_to_float>
 80141a0:	eef0 7a40 	vmov.f32	s15, s0
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 80141aa:	f107 0308 	add.w	r3, r7, #8
 80141ae:	3320      	adds	r3, #32
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff fb4e 	bl	8013852 <sensirion_bytes_to_float>
 80141b6:	eef0 7a40 	vmov.f32	s15, s0
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 80141c0:	f107 0308 	add.w	r3, r7, #8
 80141c4:	3324      	adds	r3, #36	@ 0x24
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7ff fb43 	bl	8013852 <sensirion_bytes_to_float>
 80141cc:	eef0 7a40 	vmov.f32	s15, s0
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 80141d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d006      	beq.n	80141ec <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 80141de:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80141e2:	b21b      	sxth	r3, r3
 80141e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80141e8:	b21b      	sxth	r3, r3
 80141ea:	e000      	b.n	80141ee <sps30_read_measurement+0x136>
    }

    return 0;
 80141ec:	2300      	movs	r3, #0
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3738      	adds	r7, #56	@ 0x38
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b086      	sub	sp, #24
 80141fa:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 80141fc:	2300      	movs	r3, #0
 80141fe:	9302      	str	r3, [sp, #8]
 8014200:	1d3b      	adds	r3, r7, #4
 8014202:	9301      	str	r3, [sp, #4]
 8014204:	2300      	movs	r3, #0
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	2300      	movs	r3, #0
 801420a:	2200      	movs	r2, #0
 801420c:	2156      	movs	r1, #86	@ 0x56
 801420e:	2000      	movs	r0, #0
 8014210:	f7ff fbc2 	bl	8013998 <sensirion_shdlc_xcv>
 8014214:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8014216:	4618      	mov	r0, r3
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 801421e:	b580      	push	{r7, lr}
 8014220:	b08a      	sub	sp, #40	@ 0x28
 8014222:	af04      	add	r7, sp, #16
 8014224:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8014226:	f107 0308 	add.w	r3, r7, #8
 801422a:	9302      	str	r3, [sp, #8]
 801422c:	f107 0310 	add.w	r3, r7, #16
 8014230:	9301      	str	r3, [sp, #4]
 8014232:	2307      	movs	r3, #7
 8014234:	9300      	str	r3, [sp, #0]
 8014236:	2300      	movs	r3, #0
 8014238:	2200      	movs	r2, #0
 801423a:	21d1      	movs	r1, #209	@ 0xd1
 801423c:	2000      	movs	r0, #0
 801423e:	f7ff fbab 	bl	8013998 <sensirion_shdlc_xcv>
 8014242:	4603      	mov	r3, r0
 8014244:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8014246:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d002      	beq.n	8014254 <sps30_read_version+0x36>
        return error;
 801424e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014252:	e01f      	b.n	8014294 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8014254:	7cfb      	ldrb	r3, [r7, #19]
 8014256:	2b07      	cmp	r3, #7
 8014258:	d002      	beq.n	8014260 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801425a:	f04f 33ff 	mov.w	r3, #4294967295
 801425e:	e019      	b.n	8014294 <sps30_read_version+0x76>
    }

    if (header.state) {
 8014260:	7cbb      	ldrb	r3, [r7, #18]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d005      	beq.n	8014272 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8014266:	7cbb      	ldrb	r3, [r7, #18]
 8014268:	b21b      	sxth	r3, r3
 801426a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801426e:	b21b      	sxth	r3, r3
 8014270:	e010      	b.n	8014294 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8014272:	7a3a      	ldrb	r2, [r7, #8]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8014278:	7a7a      	ldrb	r2, [r7, #9]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 801427e:	7afa      	ldrb	r2, [r7, #11]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8014284:	7b7a      	ldrb	r2, [r7, #13]
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 801428a:	7bba      	ldrb	r2, [r7, #14]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	711a      	strb	r2, [r3, #4]

    return error;
 8014290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014294:	4618      	mov	r0, r3
 8014296:	3718      	adds	r7, #24
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	460b      	mov	r3, r1
 80142a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80142a8:	f640 0074 	movw	r0, #2164	@ 0x874
 80142ac:	f007 fdf6 	bl	801be9c <USBD_static_malloc>
 80142b0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d109      	bne.n	80142cc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	32b0      	adds	r2, #176	@ 0xb0
 80142c2:	2100      	movs	r1, #0
 80142c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80142c8:	2302      	movs	r3, #2
 80142ca:	e06e      	b.n	80143aa <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	32b0      	adds	r2, #176	@ 0xb0
 80142d6:	68f9      	ldr	r1, [r7, #12]
 80142d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	32b0      	adds	r2, #176	@ 0xb0
 80142e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	7c1b      	ldrb	r3, [r3, #16]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d12b      	bne.n	8014350 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80142f8:	4b2e      	ldr	r3, [pc, #184]	@ (80143b4 <USBD_MSC_Init+0x118>)
 80142fa:	7819      	ldrb	r1, [r3, #0]
 80142fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014300:	2202      	movs	r2, #2
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f007 fc87 	bl	801bc16 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8014308:	4b2a      	ldr	r3, [pc, #168]	@ (80143b4 <USBD_MSC_Init+0x118>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	f003 020f 	and.w	r2, r3, #15
 8014310:	6879      	ldr	r1, [r7, #4]
 8014312:	4613      	mov	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	4413      	add	r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	440b      	add	r3, r1
 801431c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014320:	2201      	movs	r2, #1
 8014322:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014324:	4b24      	ldr	r3, [pc, #144]	@ (80143b8 <USBD_MSC_Init+0x11c>)
 8014326:	7819      	ldrb	r1, [r3, #0]
 8014328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801432c:	2202      	movs	r2, #2
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f007 fc71 	bl	801bc16 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8014334:	4b20      	ldr	r3, [pc, #128]	@ (80143b8 <USBD_MSC_Init+0x11c>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	f003 020f 	and.w	r2, r3, #15
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	4613      	mov	r3, r2
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	4413      	add	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	440b      	add	r3, r1
 8014348:	3324      	adds	r3, #36	@ 0x24
 801434a:	2201      	movs	r2, #1
 801434c:	801a      	strh	r2, [r3, #0]
 801434e:	e028      	b.n	80143a2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8014350:	4b18      	ldr	r3, [pc, #96]	@ (80143b4 <USBD_MSC_Init+0x118>)
 8014352:	7819      	ldrb	r1, [r3, #0]
 8014354:	2340      	movs	r3, #64	@ 0x40
 8014356:	2202      	movs	r2, #2
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f007 fc5c 	bl	801bc16 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801435e:	4b15      	ldr	r3, [pc, #84]	@ (80143b4 <USBD_MSC_Init+0x118>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	f003 020f 	and.w	r2, r3, #15
 8014366:	6879      	ldr	r1, [r7, #4]
 8014368:	4613      	mov	r3, r2
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	4413      	add	r3, r2
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	440b      	add	r3, r1
 8014372:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014376:	2201      	movs	r2, #1
 8014378:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801437a:	4b0f      	ldr	r3, [pc, #60]	@ (80143b8 <USBD_MSC_Init+0x11c>)
 801437c:	7819      	ldrb	r1, [r3, #0]
 801437e:	2340      	movs	r3, #64	@ 0x40
 8014380:	2202      	movs	r2, #2
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f007 fc47 	bl	801bc16 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8014388:	4b0b      	ldr	r3, [pc, #44]	@ (80143b8 <USBD_MSC_Init+0x11c>)
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	f003 020f 	and.w	r2, r3, #15
 8014390:	6879      	ldr	r1, [r7, #4]
 8014392:	4613      	mov	r3, r2
 8014394:	009b      	lsls	r3, r3, #2
 8014396:	4413      	add	r3, r2
 8014398:	009b      	lsls	r3, r3, #2
 801439a:	440b      	add	r3, r1
 801439c:	3324      	adds	r3, #36	@ 0x24
 801439e:	2201      	movs	r2, #1
 80143a0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 fa2c 	bl	8014800 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80143a8:	2300      	movs	r3, #0
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	200000af 	.word	0x200000af
 80143b8:	200000ae 	.word	0x200000ae

080143bc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	460b      	mov	r3, r1
 80143c6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80143c8:	4b26      	ldr	r3, [pc, #152]	@ (8014464 <USBD_MSC_DeInit+0xa8>)
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	4619      	mov	r1, r3
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f007 fc47 	bl	801bc62 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80143d4:	4b23      	ldr	r3, [pc, #140]	@ (8014464 <USBD_MSC_DeInit+0xa8>)
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	f003 020f 	and.w	r2, r3, #15
 80143dc:	6879      	ldr	r1, [r7, #4]
 80143de:	4613      	mov	r3, r2
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	4413      	add	r3, r2
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	440b      	add	r3, r1
 80143e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80143ec:	2200      	movs	r2, #0
 80143ee:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80143f0:	4b1d      	ldr	r3, [pc, #116]	@ (8014468 <USBD_MSC_DeInit+0xac>)
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	4619      	mov	r1, r3
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f007 fc33 	bl	801bc62 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80143fc:	4b1a      	ldr	r3, [pc, #104]	@ (8014468 <USBD_MSC_DeInit+0xac>)
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	f003 020f 	and.w	r2, r3, #15
 8014404:	6879      	ldr	r1, [r7, #4]
 8014406:	4613      	mov	r3, r2
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	4413      	add	r3, r2
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	440b      	add	r3, r1
 8014410:	3324      	adds	r3, #36	@ 0x24
 8014412:	2200      	movs	r2, #0
 8014414:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	32b0      	adds	r2, #176	@ 0xb0
 8014420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d018      	beq.n	801445a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f000 fa67 	bl	80148fc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	32b0      	adds	r2, #176	@ 0xb0
 8014438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443c:	4618      	mov	r0, r3
 801443e:	f007 fd3b 	bl	801beb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	32b0      	adds	r2, #176	@ 0xb0
 801444c:	2100      	movs	r1, #0
 801444e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801445a:	2300      	movs	r3, #0
}
 801445c:	4618      	mov	r0, r3
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	200000af 	.word	0x200000af
 8014468:	200000ae 	.word	0x200000ae

0801446c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	32b0      	adds	r2, #176	@ 0xb0
 8014480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014484:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8014486:	2300      	movs	r3, #0
 8014488:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801448a:	2300      	movs	r3, #0
 801448c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d101      	bne.n	8014498 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8014494:	2303      	movs	r3, #3
 8014496:	e0e1      	b.n	801465c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d053      	beq.n	801454c <USBD_MSC_Setup+0xe0>
 80144a4:	2b20      	cmp	r3, #32
 80144a6:	f040 80d1 	bne.w	801464c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	785b      	ldrb	r3, [r3, #1]
 80144ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80144b0:	d002      	beq.n	80144b8 <USBD_MSC_Setup+0x4c>
 80144b2:	2bff      	cmp	r3, #255	@ 0xff
 80144b4:	d02a      	beq.n	801450c <USBD_MSC_Setup+0xa0>
 80144b6:	e041      	b.n	801453c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	885b      	ldrh	r3, [r3, #2]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d11e      	bne.n	80144fe <USBD_MSC_Setup+0x92>
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	88db      	ldrh	r3, [r3, #6]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d11a      	bne.n	80144fe <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	da15      	bge.n	80144fe <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	33b0      	adds	r3, #176	@ 0xb0
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	4413      	add	r3, r2
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	699b      	ldr	r3, [r3, #24]
 80144e4:	4798      	blx	r3
 80144e6:	4603      	mov	r3, r0
 80144e8:	461a      	mov	r2, r3
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	2201      	movs	r2, #1
 80144f2:	4619      	mov	r1, r3
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f003 f945 	bl	8017784 <USBD_CtlSendData>
 80144fa:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80144fc:	e025      	b.n	801454a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80144fe:	6839      	ldr	r1, [r7, #0]
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f003 f8ce 	bl	80176a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014506:	2303      	movs	r3, #3
 8014508:	75fb      	strb	r3, [r7, #23]
          break;
 801450a:	e01e      	b.n	801454a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	885b      	ldrh	r3, [r3, #2]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d10c      	bne.n	801452e <USBD_MSC_Setup+0xc2>
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	88db      	ldrh	r3, [r3, #6]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d108      	bne.n	801452e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014522:	2b00      	cmp	r3, #0
 8014524:	db03      	blt.n	801452e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 f9b4 	bl	8014894 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801452c:	e00d      	b.n	801454a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801452e:	6839      	ldr	r1, [r7, #0]
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f003 f8b6 	bl	80176a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014536:	2303      	movs	r3, #3
 8014538:	75fb      	strb	r3, [r7, #23]
          break;
 801453a:	e006      	b.n	801454a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f003 f8af 	bl	80176a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014544:	2303      	movs	r3, #3
 8014546:	75fb      	strb	r3, [r7, #23]
          break;
 8014548:	bf00      	nop
      }
      break;
 801454a:	e086      	b.n	801465a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	785b      	ldrb	r3, [r3, #1]
 8014550:	2b0b      	cmp	r3, #11
 8014552:	d872      	bhi.n	801463a <USBD_MSC_Setup+0x1ce>
 8014554:	a201      	add	r2, pc, #4	@ (adr r2, 801455c <USBD_MSC_Setup+0xf0>)
 8014556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801455a:	bf00      	nop
 801455c:	0801458d 	.word	0x0801458d
 8014560:	08014609 	.word	0x08014609
 8014564:	0801463b 	.word	0x0801463b
 8014568:	0801463b 	.word	0x0801463b
 801456c:	0801463b 	.word	0x0801463b
 8014570:	0801463b 	.word	0x0801463b
 8014574:	0801463b 	.word	0x0801463b
 8014578:	0801463b 	.word	0x0801463b
 801457c:	0801463b 	.word	0x0801463b
 8014580:	0801463b 	.word	0x0801463b
 8014584:	080145b7 	.word	0x080145b7
 8014588:	080145e1 	.word	0x080145e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b03      	cmp	r3, #3
 8014596:	d107      	bne.n	80145a8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014598:	f107 030e 	add.w	r3, r7, #14
 801459c:	2202      	movs	r2, #2
 801459e:	4619      	mov	r1, r3
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f003 f8ef 	bl	8017784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145a6:	e050      	b.n	801464a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80145a8:	6839      	ldr	r1, [r7, #0]
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f003 f879 	bl	80176a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80145b0:	2303      	movs	r3, #3
 80145b2:	75fb      	strb	r3, [r7, #23]
          break;
 80145b4:	e049      	b.n	801464a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b03      	cmp	r3, #3
 80145c0:	d107      	bne.n	80145d2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	3304      	adds	r3, #4
 80145c6:	2201      	movs	r2, #1
 80145c8:	4619      	mov	r1, r3
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f003 f8da 	bl	8017784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145d0:	e03b      	b.n	801464a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80145d2:	6839      	ldr	r1, [r7, #0]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f003 f864 	bl	80176a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80145da:	2303      	movs	r3, #3
 80145dc:	75fb      	strb	r3, [r7, #23]
          break;
 80145de:	e034      	b.n	801464a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	2b03      	cmp	r3, #3
 80145ea:	d106      	bne.n	80145fa <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	885b      	ldrh	r3, [r3, #2]
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	461a      	mov	r2, r3
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145f8:	e027      	b.n	801464a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f003 f850 	bl	80176a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014602:	2303      	movs	r3, #3
 8014604:	75fb      	strb	r3, [r7, #23]
          break;
 8014606:	e020      	b.n	801464a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801460e:	b2db      	uxtb	r3, r3
 8014610:	2b03      	cmp	r3, #3
 8014612:	d119      	bne.n	8014648 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	885b      	ldrh	r3, [r3, #2]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d115      	bne.n	8014648 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	889b      	ldrh	r3, [r3, #4]
 8014620:	b2db      	uxtb	r3, r3
 8014622:	4619      	mov	r1, r3
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f007 fb3b 	bl	801bca0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	889b      	ldrh	r3, [r3, #4]
 801462e:	b2db      	uxtb	r3, r3
 8014630:	4619      	mov	r1, r3
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 fb2e 	bl	8014c94 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8014638:	e006      	b.n	8014648 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801463a:	6839      	ldr	r1, [r7, #0]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f003 f830 	bl	80176a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014642:	2303      	movs	r3, #3
 8014644:	75fb      	strb	r3, [r7, #23]
          break;
 8014646:	e000      	b.n	801464a <USBD_MSC_Setup+0x1de>
          break;
 8014648:	bf00      	nop
      }
      break;
 801464a:	e006      	b.n	801465a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801464c:	6839      	ldr	r1, [r7, #0]
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f003 f827 	bl	80176a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014654:	2303      	movs	r3, #3
 8014656:	75fb      	strb	r3, [r7, #23]
      break;
 8014658:	bf00      	nop
  }

  return (uint8_t)ret;
 801465a:	7dfb      	ldrb	r3, [r7, #23]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3718      	adds	r7, #24
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	460b      	mov	r3, r1
 801466e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014670:	78fb      	ldrb	r3, [r7, #3]
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f000 f959 	bl	801492c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801467a:	2300      	movs	r3, #0
}
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	460b      	mov	r3, r1
 801468e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8014690:	78fb      	ldrb	r3, [r7, #3]
 8014692:	4619      	mov	r1, r3
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f000 f983 	bl	80149a0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b084      	sub	sp, #16
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80146ac:	2181      	movs	r1, #129	@ 0x81
 80146ae:	4812      	ldr	r0, [pc, #72]	@ (80146f8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80146b0:	f002 f9c1 	bl	8016a36 <USBD_GetEpDesc>
 80146b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80146b6:	2101      	movs	r1, #1
 80146b8:	480f      	ldr	r0, [pc, #60]	@ (80146f8 <USBD_MSC_GetHSCfgDesc+0x54>)
 80146ba:	f002 f9bc 	bl	8016a36 <USBD_GetEpDesc>
 80146be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d006      	beq.n	80146d4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2200      	movs	r2, #0
 80146ca:	711a      	strb	r2, [r3, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	f042 0202 	orr.w	r2, r2, #2
 80146d2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d006      	beq.n	80146e8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	2200      	movs	r2, #0
 80146de:	711a      	strb	r2, [r3, #4]
 80146e0:	2200      	movs	r2, #0
 80146e2:	f042 0202 	orr.w	r2, r2, #2
 80146e6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2220      	movs	r2, #32
 80146ec:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80146ee:	4b02      	ldr	r3, [pc, #8]	@ (80146f8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	20000084 	.word	0x20000084

080146fc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014704:	2181      	movs	r1, #129	@ 0x81
 8014706:	4812      	ldr	r0, [pc, #72]	@ (8014750 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014708:	f002 f995 	bl	8016a36 <USBD_GetEpDesc>
 801470c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801470e:	2101      	movs	r1, #1
 8014710:	480f      	ldr	r0, [pc, #60]	@ (8014750 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014712:	f002 f990 	bl	8016a36 <USBD_GetEpDesc>
 8014716:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d006      	beq.n	801472c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014726:	711a      	strb	r2, [r3, #4]
 8014728:	2200      	movs	r2, #0
 801472a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d006      	beq.n	8014740 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	2200      	movs	r2, #0
 8014736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801473a:	711a      	strb	r2, [r3, #4]
 801473c:	2200      	movs	r2, #0
 801473e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2220      	movs	r2, #32
 8014744:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8014746:	4b02      	ldr	r3, [pc, #8]	@ (8014750 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8014748:	4618      	mov	r0, r3
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	20000084 	.word	0x20000084

08014754 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801475c:	2181      	movs	r1, #129	@ 0x81
 801475e:	4812      	ldr	r0, [pc, #72]	@ (80147a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014760:	f002 f969 	bl	8016a36 <USBD_GetEpDesc>
 8014764:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8014766:	2101      	movs	r1, #1
 8014768:	480f      	ldr	r0, [pc, #60]	@ (80147a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801476a:	f002 f964 	bl	8016a36 <USBD_GetEpDesc>
 801476e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d006      	beq.n	8014784 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2200      	movs	r2, #0
 801477a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801477e:	711a      	strb	r2, [r3, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d006      	beq.n	8014798 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	2200      	movs	r2, #0
 801478e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014792:	711a      	strb	r2, [r3, #4]
 8014794:	2200      	movs	r2, #0
 8014796:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2220      	movs	r2, #32
 801479c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801479e:	4b02      	ldr	r3, [pc, #8]	@ (80147a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3710      	adds	r7, #16
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	20000084 	.word	0x20000084

080147ac <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b083      	sub	sp, #12
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	220a      	movs	r2, #10
 80147b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80147ba:	4b03      	ldr	r3, [pc, #12]	@ (80147c8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80147bc:	4618      	mov	r0, r3
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr
 80147c8:	200000a4 	.word	0x200000a4

080147cc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80147dc:	2303      	movs	r3, #3
 80147de:	e009      	b.n	80147f4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	33b0      	adds	r3, #176	@ 0xb0
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	4413      	add	r3, r2
 80147ee:	683a      	ldr	r2, [r7, #0]
 80147f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80147f2:	2300      	movs	r3, #0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	32b0      	adds	r2, #176	@ 0xb0
 8014812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014816:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d032      	beq.n	8014884 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2200      	movs	r2, #0
 8014822:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2200      	movs	r2, #0
 801482e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	2200      	movs	r2, #0
 8014836:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2200      	movs	r2, #0
 801483e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	33b0      	adds	r3, #176	@ 0xb0
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	4413      	add	r3, r2
 8014850:	685b      	ldr	r3, [r3, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2000      	movs	r0, #0
 8014856:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8014858:	4b0c      	ldr	r3, [pc, #48]	@ (801488c <MSC_BOT_Init+0x8c>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	4619      	mov	r1, r3
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f007 fa1e 	bl	801bca0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8014864:	4b0a      	ldr	r3, [pc, #40]	@ (8014890 <MSC_BOT_Init+0x90>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	4619      	mov	r1, r3
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f007 fa18 	bl	801bca0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014870:	4b06      	ldr	r3, [pc, #24]	@ (801488c <MSC_BOT_Init+0x8c>)
 8014872:	7819      	ldrb	r1, [r3, #0]
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 801487a:	231f      	movs	r3, #31
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f007 fad8 	bl	801be32 <USBD_LL_PrepareReceive>
 8014882:	e000      	b.n	8014886 <MSC_BOT_Init+0x86>
    return;
 8014884:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014886:	3710      	adds	r7, #16
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	200000af 	.word	0x200000af
 8014890:	200000ae 	.word	0x200000ae

08014894 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	32b0      	adds	r2, #176	@ 0xb0
 80148a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d01b      	beq.n	80148ea <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2200      	movs	r2, #0
 80148b6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2201      	movs	r2, #1
 80148bc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80148be:	4b0d      	ldr	r3, [pc, #52]	@ (80148f4 <MSC_BOT_Reset+0x60>)
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	4619      	mov	r1, r3
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f007 fa29 	bl	801bd1c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80148ca:	4b0b      	ldr	r3, [pc, #44]	@ (80148f8 <MSC_BOT_Reset+0x64>)
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	4619      	mov	r1, r3
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f007 fa23 	bl	801bd1c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80148d6:	4b08      	ldr	r3, [pc, #32]	@ (80148f8 <MSC_BOT_Reset+0x64>)
 80148d8:	7819      	ldrb	r1, [r3, #0]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80148e0:	231f      	movs	r3, #31
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f007 faa5 	bl	801be32 <USBD_LL_PrepareReceive>
 80148e8:	e000      	b.n	80148ec <MSC_BOT_Reset+0x58>
    return;
 80148ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	200000ae 	.word	0x200000ae
 80148f8:	200000af 	.word	0x200000af

080148fc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80148fc:	b480      	push	{r7}
 80148fe:	b085      	sub	sp, #20
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	32b0      	adds	r2, #176	@ 0xb0
 801490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014912:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d002      	beq.n	8014920 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2200      	movs	r2, #0
 801491e:	721a      	strb	r2, [r3, #8]
  }
}
 8014920:	bf00      	nop
 8014922:	3714      	adds	r7, #20
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr

0801492c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	460b      	mov	r3, r1
 8014936:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	32b0      	adds	r2, #176	@ 0xb0
 8014942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014946:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d020      	beq.n	8014990 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	7a1b      	ldrb	r3, [r3, #8]
 8014952:	2b02      	cmp	r3, #2
 8014954:	d005      	beq.n	8014962 <MSC_BOT_DataIn+0x36>
 8014956:	2b02      	cmp	r3, #2
 8014958:	db1c      	blt.n	8014994 <MSC_BOT_DataIn+0x68>
 801495a:	3b03      	subs	r3, #3
 801495c:	2b01      	cmp	r3, #1
 801495e:	d819      	bhi.n	8014994 <MSC_BOT_DataIn+0x68>
 8014960:	e011      	b.n	8014986 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801496e:	461a      	mov	r2, r3
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f000 f9c9 	bl	8014d08 <SCSI_ProcessCmd>
 8014976:	4603      	mov	r3, r0
 8014978:	2b00      	cmp	r3, #0
 801497a:	da0d      	bge.n	8014998 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801497c:	2101      	movs	r1, #1
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 f90c 	bl	8014b9c <MSC_BOT_SendCSW>
      }
      break;
 8014984:	e008      	b.n	8014998 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014986:	2100      	movs	r1, #0
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f000 f907 	bl	8014b9c <MSC_BOT_SendCSW>
      break;
 801498e:	e004      	b.n	801499a <MSC_BOT_DataIn+0x6e>
    return;
 8014990:	bf00      	nop
 8014992:	e002      	b.n	801499a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8014994:	bf00      	nop
 8014996:	e000      	b.n	801499a <MSC_BOT_DataIn+0x6e>
      break;
 8014998:	bf00      	nop
  }
}
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	460b      	mov	r3, r1
 80149aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	32b0      	adds	r2, #176	@ 0xb0
 80149b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d01c      	beq.n	80149fc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	7a1b      	ldrb	r3, [r3, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d002      	beq.n	80149d0 <MSC_BOT_DataOut+0x30>
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d004      	beq.n	80149d8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80149ce:	e018      	b.n	8014a02 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f819 	bl	8014a08 <MSC_BOT_CBW_Decode>
      break;
 80149d6:	e014      	b.n	8014a02 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80149e4:	461a      	mov	r2, r3
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 f98e 	bl	8014d08 <SCSI_ProcessCmd>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	da06      	bge.n	8014a00 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80149f2:	2101      	movs	r1, #1
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f000 f8d1 	bl	8014b9c <MSC_BOT_SendCSW>
      break;
 80149fa:	e001      	b.n	8014a00 <MSC_BOT_DataOut+0x60>
    return;
 80149fc:	bf00      	nop
 80149fe:	e000      	b.n	8014a02 <MSC_BOT_DataOut+0x62>
      break;
 8014a00:	bf00      	nop
  }
}
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	32b0      	adds	r2, #176	@ 0xb0
 8014a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d079      	beq.n	8014b1a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8014b28 <MSC_BOT_CBW_Decode+0x120>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	4619      	mov	r1, r3
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f007 fa15 	bl	801be74 <USBD_LL_GetRxDataSize>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b1f      	cmp	r3, #31
 8014a4e:	d114      	bne.n	8014a7a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014a56:	4a35      	ldr	r2, [pc, #212]	@ (8014b2c <MSC_BOT_CBW_Decode+0x124>)
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	d10e      	bne.n	8014a7a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014a62:	2b01      	cmp	r3, #1
 8014a64:	d809      	bhi.n	8014a7a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d004      	beq.n	8014a7a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014a76:	2b10      	cmp	r3, #16
 8014a78:	d90e      	bls.n	8014a98 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014a80:	2320      	movs	r3, #32
 8014a82:	2205      	movs	r2, #5
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 fe29 	bl	80156dc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	2202      	movs	r2, #2
 8014a8e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 f8bd 	bl	8014c10 <MSC_BOT_Abort>
 8014a96:	e043      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8014aa4:	461a      	mov	r2, r3
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 f92e 	bl	8014d08 <SCSI_ProcessCmd>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	da0c      	bge.n	8014acc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	7a1b      	ldrb	r3, [r3, #8]
 8014ab6:	2b05      	cmp	r3, #5
 8014ab8:	d104      	bne.n	8014ac4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014aba:	2101      	movs	r1, #1
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f000 f86d 	bl	8014b9c <MSC_BOT_SendCSW>
 8014ac2:	e02d      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 f8a3 	bl	8014c10 <MSC_BOT_Abort>
 8014aca:	e029      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	7a1b      	ldrb	r3, [r3, #8]
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	d024      	beq.n	8014b1e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d020      	beq.n	8014b1e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014ae0:	2b03      	cmp	r3, #3
 8014ae2:	d01c      	beq.n	8014b1e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d009      	beq.n	8014b00 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f103 0110 	add.w	r1, r3, #16
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	461a      	mov	r2, r3
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 f819 	bl	8014b30 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014afe:	e00f      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d104      	bne.n	8014b12 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014b08:	2100      	movs	r1, #0
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 f846 	bl	8014b9c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014b10:	e006      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 f87c 	bl	8014c10 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014b18:	e002      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
    return;
 8014b1a:	bf00      	nop
 8014b1c:	e000      	b.n	8014b20 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014b1e:	bf00      	nop
    }
  }
}
 8014b20:	3710      	adds	r7, #16
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	200000af 	.word	0x200000af
 8014b2c:	43425355 	.word	0x43425355

08014b30 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	60f8      	str	r0, [r7, #12]
 8014b38:	60b9      	str	r1, [r7, #8]
 8014b3a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	32b0      	adds	r2, #176	@ 0xb0
 8014b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b4a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d01e      	beq.n	8014b90 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8014b58:	687a      	ldr	r2, [r7, #4]
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	bf28      	it	cs
 8014b5e:	4613      	movcs	r3, r2
 8014b60:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	1ad2      	subs	r2, r2, r3
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	2200      	movs	r2, #0
 8014b76:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	2204      	movs	r2, #4
 8014b7e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8014b80:	4b05      	ldr	r3, [pc, #20]	@ (8014b98 <MSC_BOT_SendData+0x68>)
 8014b82:	7819      	ldrb	r1, [r3, #0]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	68ba      	ldr	r2, [r7, #8]
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	f007 f931 	bl	801bdf0 <USBD_LL_Transmit>
 8014b8e:	e000      	b.n	8014b92 <MSC_BOT_SendData+0x62>
    return;
 8014b90:	bf00      	nop
}
 8014b92:	3718      	adds	r7, #24
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	200000ae 	.word	0x200000ae

08014b9c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	32b0      	adds	r2, #176	@ 0xb0
 8014bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bb6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d01d      	beq.n	8014bfa <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	4a10      	ldr	r2, [pc, #64]	@ (8014c04 <MSC_BOT_SendCSW+0x68>)
 8014bc2:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	78fa      	ldrb	r2, [r7, #3]
 8014bca:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8014bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8014c08 <MSC_BOT_SendCSW+0x6c>)
 8014bd6:	7819      	ldrb	r1, [r3, #0]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 8014bde:	230d      	movs	r3, #13
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f007 f905 	bl	801bdf0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014be6:	4b09      	ldr	r3, [pc, #36]	@ (8014c0c <MSC_BOT_SendCSW+0x70>)
 8014be8:	7819      	ldrb	r1, [r3, #0]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8014bf0:	231f      	movs	r3, #31
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f007 f91d 	bl	801be32 <USBD_LL_PrepareReceive>
 8014bf8:	e000      	b.n	8014bfc <MSC_BOT_SendCSW+0x60>
    return;
 8014bfa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	53425355 	.word	0x53425355
 8014c08:	200000ae 	.word	0x200000ae
 8014c0c:	200000af 	.word	0x200000af

08014c10 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	32b0      	adds	r2, #176	@ 0xb0
 8014c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c26:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d02a      	beq.n	8014c84 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d10e      	bne.n	8014c56 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d009      	beq.n	8014c56 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d105      	bne.n	8014c56 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014c4a:	4b10      	ldr	r3, [pc, #64]	@ (8014c8c <MSC_BOT_Abort+0x7c>)
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f007 f844 	bl	801bcde <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014c56:	4b0e      	ldr	r3, [pc, #56]	@ (8014c90 <MSC_BOT_Abort+0x80>)
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f007 f83e 	bl	801bcde <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	7a5b      	ldrb	r3, [r3, #9]
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d10d      	bne.n	8014c86 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014c6a:	4b09      	ldr	r3, [pc, #36]	@ (8014c90 <MSC_BOT_Abort+0x80>)
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f007 f834 	bl	801bcde <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014c76:	4b05      	ldr	r3, [pc, #20]	@ (8014c8c <MSC_BOT_Abort+0x7c>)
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f007 f82e 	bl	801bcde <USBD_LL_StallEP>
 8014c82:	e000      	b.n	8014c86 <MSC_BOT_Abort+0x76>
    return;
 8014c84:	bf00      	nop
  }
}
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	200000af 	.word	0x200000af
 8014c90:	200000ae 	.word	0x200000ae

08014c94 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	32b0      	adds	r2, #176	@ 0xb0
 8014caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d01d      	beq.n	8014cf2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	7a5b      	ldrb	r3, [r3, #9]
 8014cba:	2b02      	cmp	r3, #2
 8014cbc:	d10c      	bne.n	8014cd8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8014cbe:	4b10      	ldr	r3, [pc, #64]	@ (8014d00 <MSC_BOT_CplClrFeature+0x6c>)
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f007 f80a 	bl	801bcde <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8014cca:	4b0e      	ldr	r3, [pc, #56]	@ (8014d04 <MSC_BOT_CplClrFeature+0x70>)
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f007 f804 	bl	801bcde <USBD_LL_StallEP>
 8014cd6:	e00f      	b.n	8014cf8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8014cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	da0a      	bge.n	8014cf6 <MSC_BOT_CplClrFeature+0x62>
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	7a5b      	ldrb	r3, [r3, #9]
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d006      	beq.n	8014cf6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014ce8:	2101      	movs	r1, #1
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f7ff ff56 	bl	8014b9c <MSC_BOT_SendCSW>
 8014cf0:	e002      	b.n	8014cf8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8014cf2:	bf00      	nop
 8014cf4:	e000      	b.n	8014cf8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8014cf6:	bf00      	nop
  }
}
 8014cf8:	3710      	adds	r7, #16
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	200000ae 	.word	0x200000ae
 8014d04:	200000af 	.word	0x200000af

08014d08 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	460b      	mov	r3, r1
 8014d12:	607a      	str	r2, [r7, #4]
 8014d14:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	32b0      	adds	r2, #176	@ 0xb0
 8014d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d24:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d102      	bne.n	8014d32 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d30:	e168      	b.n	8015004 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	2baa      	cmp	r3, #170	@ 0xaa
 8014d38:	f000 8144 	beq.w	8014fc4 <SCSI_ProcessCmd+0x2bc>
 8014d3c:	2baa      	cmp	r3, #170	@ 0xaa
 8014d3e:	f300 8153 	bgt.w	8014fe8 <SCSI_ProcessCmd+0x2e0>
 8014d42:	2ba8      	cmp	r3, #168	@ 0xa8
 8014d44:	f000 812c 	beq.w	8014fa0 <SCSI_ProcessCmd+0x298>
 8014d48:	2ba8      	cmp	r3, #168	@ 0xa8
 8014d4a:	f300 814d 	bgt.w	8014fe8 <SCSI_ProcessCmd+0x2e0>
 8014d4e:	2b5a      	cmp	r3, #90	@ 0x5a
 8014d50:	f300 80c0 	bgt.w	8014ed4 <SCSI_ProcessCmd+0x1cc>
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f2c0 8147 	blt.w	8014fe8 <SCSI_ProcessCmd+0x2e0>
 8014d5a:	2b5a      	cmp	r3, #90	@ 0x5a
 8014d5c:	f200 8144 	bhi.w	8014fe8 <SCSI_ProcessCmd+0x2e0>
 8014d60:	a201      	add	r2, pc, #4	@ (adr r2, 8014d68 <SCSI_ProcessCmd+0x60>)
 8014d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d66:	bf00      	nop
 8014d68:	08014edb 	.word	0x08014edb
 8014d6c:	08014fe9 	.word	0x08014fe9
 8014d70:	08014fe9 	.word	0x08014fe9
 8014d74:	08014eed 	.word	0x08014eed
 8014d78:	08014fe9 	.word	0x08014fe9
 8014d7c:	08014fe9 	.word	0x08014fe9
 8014d80:	08014fe9 	.word	0x08014fe9
 8014d84:	08014fe9 	.word	0x08014fe9
 8014d88:	08014fe9 	.word	0x08014fe9
 8014d8c:	08014fe9 	.word	0x08014fe9
 8014d90:	08014fe9 	.word	0x08014fe9
 8014d94:	08014fe9 	.word	0x08014fe9
 8014d98:	08014fe9 	.word	0x08014fe9
 8014d9c:	08014fe9 	.word	0x08014fe9
 8014da0:	08014fe9 	.word	0x08014fe9
 8014da4:	08014fe9 	.word	0x08014fe9
 8014da8:	08014fe9 	.word	0x08014fe9
 8014dac:	08014fe9 	.word	0x08014fe9
 8014db0:	08014eff 	.word	0x08014eff
 8014db4:	08014fe9 	.word	0x08014fe9
 8014db8:	08014fe9 	.word	0x08014fe9
 8014dbc:	08014fe9 	.word	0x08014fe9
 8014dc0:	08014fe9 	.word	0x08014fe9
 8014dc4:	08014fe9 	.word	0x08014fe9
 8014dc8:	08014fe9 	.word	0x08014fe9
 8014dcc:	08014fe9 	.word	0x08014fe9
 8014dd0:	08014f35 	.word	0x08014f35
 8014dd4:	08014f11 	.word	0x08014f11
 8014dd8:	08014fe9 	.word	0x08014fe9
 8014ddc:	08014fe9 	.word	0x08014fe9
 8014de0:	08014f23 	.word	0x08014f23
 8014de4:	08014fe9 	.word	0x08014fe9
 8014de8:	08014fe9 	.word	0x08014fe9
 8014dec:	08014fe9 	.word	0x08014fe9
 8014df0:	08014fe9 	.word	0x08014fe9
 8014df4:	08014f59 	.word	0x08014f59
 8014df8:	08014fe9 	.word	0x08014fe9
 8014dfc:	08014f6b 	.word	0x08014f6b
 8014e00:	08014fe9 	.word	0x08014fe9
 8014e04:	08014fe9 	.word	0x08014fe9
 8014e08:	08014f8f 	.word	0x08014f8f
 8014e0c:	08014fe9 	.word	0x08014fe9
 8014e10:	08014fb3 	.word	0x08014fb3
 8014e14:	08014fe9 	.word	0x08014fe9
 8014e18:	08014fe9 	.word	0x08014fe9
 8014e1c:	08014fe9 	.word	0x08014fe9
 8014e20:	08014fe9 	.word	0x08014fe9
 8014e24:	08014fd7 	.word	0x08014fd7
 8014e28:	08014fe9 	.word	0x08014fe9
 8014e2c:	08014fe9 	.word	0x08014fe9
 8014e30:	08014fe9 	.word	0x08014fe9
 8014e34:	08014fe9 	.word	0x08014fe9
 8014e38:	08014fe9 	.word	0x08014fe9
 8014e3c:	08014fe9 	.word	0x08014fe9
 8014e40:	08014fe9 	.word	0x08014fe9
 8014e44:	08014fe9 	.word	0x08014fe9
 8014e48:	08014fe9 	.word	0x08014fe9
 8014e4c:	08014fe9 	.word	0x08014fe9
 8014e50:	08014fe9 	.word	0x08014fe9
 8014e54:	08014fe9 	.word	0x08014fe9
 8014e58:	08014fe9 	.word	0x08014fe9
 8014e5c:	08014fe9 	.word	0x08014fe9
 8014e60:	08014fe9 	.word	0x08014fe9
 8014e64:	08014fe9 	.word	0x08014fe9
 8014e68:	08014fe9 	.word	0x08014fe9
 8014e6c:	08014fe9 	.word	0x08014fe9
 8014e70:	08014fe9 	.word	0x08014fe9
 8014e74:	08014fe9 	.word	0x08014fe9
 8014e78:	08014fe9 	.word	0x08014fe9
 8014e7c:	08014fe9 	.word	0x08014fe9
 8014e80:	08014fe9 	.word	0x08014fe9
 8014e84:	08014fe9 	.word	0x08014fe9
 8014e88:	08014fe9 	.word	0x08014fe9
 8014e8c:	08014fe9 	.word	0x08014fe9
 8014e90:	08014fe9 	.word	0x08014fe9
 8014e94:	08014fe9 	.word	0x08014fe9
 8014e98:	08014fe9 	.word	0x08014fe9
 8014e9c:	08014fe9 	.word	0x08014fe9
 8014ea0:	08014fe9 	.word	0x08014fe9
 8014ea4:	08014fe9 	.word	0x08014fe9
 8014ea8:	08014fe9 	.word	0x08014fe9
 8014eac:	08014fe9 	.word	0x08014fe9
 8014eb0:	08014fe9 	.word	0x08014fe9
 8014eb4:	08014fe9 	.word	0x08014fe9
 8014eb8:	08014fe9 	.word	0x08014fe9
 8014ebc:	08014fe9 	.word	0x08014fe9
 8014ec0:	08014fe9 	.word	0x08014fe9
 8014ec4:	08014fe9 	.word	0x08014fe9
 8014ec8:	08014fe9 	.word	0x08014fe9
 8014ecc:	08014fe9 	.word	0x08014fe9
 8014ed0:	08014f47 	.word	0x08014f47
 8014ed4:	2b9e      	cmp	r3, #158	@ 0x9e
 8014ed6:	d051      	beq.n	8014f7c <SCSI_ProcessCmd+0x274>
 8014ed8:	e086      	b.n	8014fe8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8014eda:	7afb      	ldrb	r3, [r7, #11]
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	4619      	mov	r1, r3
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f000 f893 	bl	801500c <SCSI_TestUnitReady>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8014eea:	e089      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014eec:	7afb      	ldrb	r3, [r7, #11]
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f000 fb6c 	bl	80155d0 <SCSI_RequestSense>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	75fb      	strb	r3, [r7, #23]
      break;
 8014efc:	e080      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014efe:	7afb      	ldrb	r3, [r7, #11]
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	4619      	mov	r1, r3
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f000 f8db 	bl	80150c0 <SCSI_Inquiry>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8014f0e:	e077      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014f10:	7afb      	ldrb	r3, [r7, #11]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	4619      	mov	r1, r3
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f000 fc2e 	bl	8015778 <SCSI_StartStopUnit>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8014f20:	e06e      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014f22:	7afb      	ldrb	r3, [r7, #11]
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	4619      	mov	r1, r3
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f000 fc7a 	bl	8015822 <SCSI_AllowPreventRemovable>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	75fb      	strb	r3, [r7, #23]
      break;
 8014f32:	e065      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014f34:	7afb      	ldrb	r3, [r7, #11]
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	4619      	mov	r1, r3
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f000 fae8 	bl	8015510 <SCSI_ModeSense6>
 8014f40:	4603      	mov	r3, r0
 8014f42:	75fb      	strb	r3, [r7, #23]
      break;
 8014f44:	e05c      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014f46:	7afb      	ldrb	r3, [r7, #11]
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	68f8      	ldr	r0, [r7, #12]
 8014f4e:	f000 fb0f 	bl	8015570 <SCSI_ModeSense10>
 8014f52:	4603      	mov	r3, r0
 8014f54:	75fb      	strb	r3, [r7, #23]
      break;
 8014f56:	e053      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014f58:	7afb      	ldrb	r3, [r7, #11]
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	68f8      	ldr	r0, [r7, #12]
 8014f60:	f000 fa5b 	bl	801541a <SCSI_ReadFormatCapacity>
 8014f64:	4603      	mov	r3, r0
 8014f66:	75fb      	strb	r3, [r7, #23]
      break;
 8014f68:	e04a      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014f6a:	7afb      	ldrb	r3, [r7, #11]
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	68f8      	ldr	r0, [r7, #12]
 8014f72:	f000 f921 	bl	80151b8 <SCSI_ReadCapacity10>
 8014f76:	4603      	mov	r3, r0
 8014f78:	75fb      	strb	r3, [r7, #23]
      break;
 8014f7a:	e041      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014f7c:	7afb      	ldrb	r3, [r7, #11]
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	4619      	mov	r1, r3
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	f000 f996 	bl	80152b4 <SCSI_ReadCapacity16>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8014f8c:	e038      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014f8e:	7afb      	ldrb	r3, [r7, #11]
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	4619      	mov	r1, r3
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f000 fc71 	bl	801587c <SCSI_Read10>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8014f9e:	e02f      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014fa0:	7afb      	ldrb	r3, [r7, #11]
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 fd12 	bl	80159d0 <SCSI_Read12>
 8014fac:	4603      	mov	r3, r0
 8014fae:	75fb      	strb	r3, [r7, #23]
      break;
 8014fb0:	e026      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014fb2:	7afb      	ldrb	r3, [r7, #11]
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	f000 fdbd 	bl	8015b38 <SCSI_Write10>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8014fc2:	e01d      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014fc4:	7afb      	ldrb	r3, [r7, #11]
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	4619      	mov	r1, r3
 8014fca:	68f8      	ldr	r0, [r7, #12]
 8014fcc:	f000 fe8a 	bl	8015ce4 <SCSI_Write12>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8014fd4:	e014      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8014fd6:	7afb      	ldrb	r3, [r7, #11]
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	68f8      	ldr	r0, [r7, #12]
 8014fde:	f000 ff67 	bl	8015eb0 <SCSI_Verify10>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8014fe6:	e00b      	b.n	8015000 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014fe8:	7af9      	ldrb	r1, [r7, #11]
 8014fea:	2320      	movs	r3, #32
 8014fec:	2205      	movs	r2, #5
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f000 fb74 	bl	80156dc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	2202      	movs	r2, #2
 8014ff8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014ffa:	23ff      	movs	r3, #255	@ 0xff
 8014ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8014ffe:	bf00      	nop
  }

  return ret;
 8015000:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015004:	4618      	mov	r0, r3
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b086      	sub	sp, #24
 8015010:	af00      	add	r7, sp, #0
 8015012:	60f8      	str	r0, [r7, #12]
 8015014:	460b      	mov	r3, r1
 8015016:	607a      	str	r2, [r7, #4]
 8015018:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	32b0      	adds	r2, #176	@ 0xb0
 8015024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015028:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d102      	bne.n	8015036 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8015030:	f04f 33ff 	mov.w	r3, #4294967295
 8015034:	e03f      	b.n	80150b6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00a      	beq.n	8015056 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015046:	2320      	movs	r3, #32
 8015048:	2205      	movs	r2, #5
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f000 fb46 	bl	80156dc <SCSI_SenseCode>

    return -1;
 8015050:	f04f 33ff 	mov.w	r3, #4294967295
 8015054:	e02f      	b.n	80150b6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801505c:	2b02      	cmp	r3, #2
 801505e:	d10b      	bne.n	8015078 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015060:	7af9      	ldrb	r1, [r7, #11]
 8015062:	233a      	movs	r3, #58	@ 0x3a
 8015064:	2202      	movs	r2, #2
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f000 fb38 	bl	80156dc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	2205      	movs	r2, #5
 8015070:	721a      	strb	r2, [r3, #8]
    return -1;
 8015072:	f04f 33ff 	mov.w	r3, #4294967295
 8015076:	e01e      	b.n	80150b6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	33b0      	adds	r3, #176	@ 0xb0
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	4413      	add	r3, r2
 8015086:	685b      	ldr	r3, [r3, #4]
 8015088:	689b      	ldr	r3, [r3, #8]
 801508a:	7afa      	ldrb	r2, [r7, #11]
 801508c:	4610      	mov	r0, r2
 801508e:	4798      	blx	r3
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00b      	beq.n	80150ae <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015096:	7af9      	ldrb	r1, [r7, #11]
 8015098:	233a      	movs	r3, #58	@ 0x3a
 801509a:	2202      	movs	r2, #2
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	f000 fb1d 	bl	80156dc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	2205      	movs	r2, #5
 80150a6:	721a      	strb	r2, [r3, #8]

    return -1;
 80150a8:	f04f 33ff 	mov.w	r3, #4294967295
 80150ac:	e003      	b.n	80150b6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	2200      	movs	r2, #0
 80150b2:	60da      	str	r2, [r3, #12]

  return 0;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3718      	adds	r7, #24
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
	...

080150c0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b088      	sub	sp, #32
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	460b      	mov	r3, r1
 80150ca:	607a      	str	r2, [r7, #4]
 80150cc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	32b0      	adds	r2, #176	@ 0xb0
 80150d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150dc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80150de:	69bb      	ldr	r3, [r7, #24]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d102      	bne.n	80150ea <SCSI_Inquiry+0x2a>
  {
    return -1;
 80150e4:	f04f 33ff 	mov.w	r3, #4294967295
 80150e8:	e05e      	b.n	80151a8 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80150ea:	69bb      	ldr	r3, [r7, #24]
 80150ec:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d10a      	bne.n	801510a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80150fa:	2320      	movs	r3, #32
 80150fc:	2205      	movs	r2, #5
 80150fe:	68f8      	ldr	r0, [r7, #12]
 8015100:	f000 faec 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015104:	f04f 33ff 	mov.w	r3, #4294967295
 8015108:	e04e      	b.n	80151a8 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	3301      	adds	r3, #1
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	f003 0301 	and.w	r3, r3, #1
 8015114:	2b00      	cmp	r3, #0
 8015116:	d020      	beq.n	801515a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	3302      	adds	r3, #2
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d105      	bne.n	801512e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8015122:	2206      	movs	r2, #6
 8015124:	4922      	ldr	r1, [pc, #136]	@ (80151b0 <SCSI_Inquiry+0xf0>)
 8015126:	69b8      	ldr	r0, [r7, #24]
 8015128:	f001 f848 	bl	80161bc <SCSI_UpdateBotData>
 801512c:	e03b      	b.n	80151a6 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	3302      	adds	r3, #2
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	2b80      	cmp	r3, #128	@ 0x80
 8015136:	d105      	bne.n	8015144 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8015138:	2208      	movs	r2, #8
 801513a:	491e      	ldr	r1, [pc, #120]	@ (80151b4 <SCSI_Inquiry+0xf4>)
 801513c:	69b8      	ldr	r0, [r7, #24]
 801513e:	f001 f83d 	bl	80161bc <SCSI_UpdateBotData>
 8015142:	e030      	b.n	80151a6 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8015144:	69bb      	ldr	r3, [r7, #24]
 8015146:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801514a:	2324      	movs	r3, #36	@ 0x24
 801514c:	2205      	movs	r2, #5
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	f000 fac4 	bl	80156dc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8015154:	f04f 33ff 	mov.w	r3, #4294967295
 8015158:	e026      	b.n	80151a8 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	33b0      	adds	r3, #176	@ 0xb0
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	4413      	add	r3, r2
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	69d9      	ldr	r1, [r3, #28]
 801516c:	7afa      	ldrb	r2, [r7, #11]
 801516e:	4613      	mov	r3, r2
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	4413      	add	r3, r2
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	440b      	add	r3, r1
 8015178:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	3304      	adds	r3, #4
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	3305      	adds	r3, #5
 8015182:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	3304      	adds	r3, #4
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	461a      	mov	r2, r3
 801518c:	8bfb      	ldrh	r3, [r7, #30]
 801518e:	4293      	cmp	r3, r2
 8015190:	d303      	bcc.n	801519a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	3304      	adds	r3, #4
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801519a:	8bfb      	ldrh	r3, [r7, #30]
 801519c:	461a      	mov	r2, r3
 801519e:	6979      	ldr	r1, [r7, #20]
 80151a0:	69b8      	ldr	r0, [r7, #24]
 80151a2:	f001 f80b 	bl	80161bc <SCSI_UpdateBotData>
  }

  return 0;
 80151a6:	2300      	movs	r3, #0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3720      	adds	r7, #32
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	200000b0 	.word	0x200000b0
 80151b4:	200000b8 	.word	0x200000b8

080151b8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b086      	sub	sp, #24
 80151bc:	af00      	add	r7, sp, #0
 80151be:	60f8      	str	r0, [r7, #12]
 80151c0:	460b      	mov	r3, r1
 80151c2:	607a      	str	r2, [r7, #4]
 80151c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	32b0      	adds	r2, #176	@ 0xb0
 80151d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d102      	bne.n	80151e2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80151dc:	f04f 33ff 	mov.w	r3, #4294967295
 80151e0:	e064      	b.n	80152ac <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	33b0      	adds	r3, #176	@ 0xb0
 80151ec:	009b      	lsls	r3, r3, #2
 80151ee:	4413      	add	r3, r2
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 80151fa:	697a      	ldr	r2, [r7, #20]
 80151fc:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8015200:	7af8      	ldrb	r0, [r7, #11]
 8015202:	4798      	blx	r3
 8015204:	4603      	mov	r3, r0
 8015206:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8015208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d104      	bne.n	801521a <SCSI_ReadCapacity10+0x62>
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015216:	2b02      	cmp	r3, #2
 8015218:	d108      	bne.n	801522c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801521a:	7af9      	ldrb	r1, [r7, #11]
 801521c:	233a      	movs	r3, #58	@ 0x3a
 801521e:	2202      	movs	r2, #2
 8015220:	68f8      	ldr	r0, [r7, #12]
 8015222:	f000 fa5b 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015226:	f04f 33ff 	mov.w	r3, #4294967295
 801522a:	e03f      	b.n	80152ac <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015232:	3b01      	subs	r3, #1
 8015234:	0e1b      	lsrs	r3, r3, #24
 8015236:	b2da      	uxtb	r2, r3
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015242:	3b01      	subs	r3, #1
 8015244:	0c1b      	lsrs	r3, r3, #16
 8015246:	b2da      	uxtb	r2, r3
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015252:	3b01      	subs	r3, #1
 8015254:	0a1b      	lsrs	r3, r3, #8
 8015256:	b2da      	uxtb	r2, r3
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015262:	b2db      	uxtb	r3, r3
 8015264:	3b01      	subs	r3, #1
 8015266:	b2da      	uxtb	r2, r3
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015272:	161b      	asrs	r3, r3, #24
 8015274:	b2da      	uxtb	r2, r3
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015280:	141b      	asrs	r3, r3, #16
 8015282:	b2da      	uxtb	r2, r3
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801528e:	0a1b      	lsrs	r3, r3, #8
 8015290:	b29b      	uxth	r3, r3
 8015292:	b2da      	uxtb	r2, r3
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801529e:	b2da      	uxtb	r2, r3
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	2208      	movs	r2, #8
 80152a8:	60da      	str	r2, [r3, #12]

  return 0;
 80152aa:	2300      	movs	r3, #0

}
 80152ac:	4618      	mov	r0, r3
 80152ae:	3718      	adds	r7, #24
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}

080152b4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b088      	sub	sp, #32
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	60f8      	str	r0, [r7, #12]
 80152bc:	460b      	mov	r3, r1
 80152be:	607a      	str	r2, [r7, #4]
 80152c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	32b0      	adds	r2, #176	@ 0xb0
 80152cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80152d8:	f04f 33ff 	mov.w	r3, #4294967295
 80152dc:	e099      	b.n	8015412 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	33b0      	adds	r3, #176	@ 0xb0
 80152e8:	009b      	lsls	r3, r3, #2
 80152ea:	4413      	add	r3, r2
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	69ba      	ldr	r2, [r7, #24]
 80152f2:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 80152f6:	69ba      	ldr	r2, [r7, #24]
 80152f8:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 80152fc:	7af8      	ldrb	r0, [r7, #11]
 80152fe:	4798      	blx	r3
 8015300:	4603      	mov	r3, r0
 8015302:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8015304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d104      	bne.n	8015316 <SCSI_ReadCapacity16+0x62>
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015312:	2b02      	cmp	r3, #2
 8015314:	d108      	bne.n	8015328 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015316:	7af9      	ldrb	r1, [r7, #11]
 8015318:	233a      	movs	r3, #58	@ 0x3a
 801531a:	2202      	movs	r2, #2
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f000 f9dd 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015322:	f04f 33ff 	mov.w	r3, #4294967295
 8015326:	e074      	b.n	8015412 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	330a      	adds	r3, #10
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	330b      	adds	r3, #11
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015338:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	330c      	adds	r3, #12
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8015342:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	320d      	adds	r2, #13
 8015348:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801534a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015350:	2300      	movs	r3, #0
 8015352:	77fb      	strb	r3, [r7, #31]
 8015354:	e007      	b.n	8015366 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8015356:	7ffb      	ldrb	r3, [r7, #31]
 8015358:	69ba      	ldr	r2, [r7, #24]
 801535a:	4413      	add	r3, r2
 801535c:	2200      	movs	r2, #0
 801535e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015360:	7ffb      	ldrb	r3, [r7, #31]
 8015362:	3301      	adds	r3, #1
 8015364:	77fb      	strb	r3, [r7, #31]
 8015366:	7ffa      	ldrb	r2, [r7, #31]
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	429a      	cmp	r2, r3
 801536e:	d3f2      	bcc.n	8015356 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015370:	69bb      	ldr	r3, [r7, #24]
 8015372:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015376:	3b01      	subs	r3, #1
 8015378:	0e1b      	lsrs	r3, r3, #24
 801537a:	b2da      	uxtb	r2, r3
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015386:	3b01      	subs	r3, #1
 8015388:	0c1b      	lsrs	r3, r3, #16
 801538a:	b2da      	uxtb	r2, r3
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015396:	3b01      	subs	r3, #1
 8015398:	0a1b      	lsrs	r3, r3, #8
 801539a:	b2da      	uxtb	r2, r3
 801539c:	69bb      	ldr	r3, [r7, #24]
 801539e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	3b01      	subs	r3, #1
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	69bb      	ldr	r3, [r7, #24]
 80153ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80153b6:	161b      	asrs	r3, r3, #24
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80153be:	69bb      	ldr	r3, [r7, #24]
 80153c0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80153c4:	141b      	asrs	r3, r3, #16
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80153cc:	69bb      	ldr	r3, [r7, #24]
 80153ce:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80153d2:	0a1b      	lsrs	r3, r3, #8
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	b2da      	uxtb	r2, r3
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80153e2:	b2da      	uxtb	r2, r3
 80153e4:	69bb      	ldr	r3, [r7, #24]
 80153e6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	330a      	adds	r3, #10
 80153ec:	781b      	ldrb	r3, [r3, #0]
 80153ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	330b      	adds	r3, #11
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80153f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	330c      	adds	r3, #12
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8015402:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	320d      	adds	r2, #13
 8015408:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801540a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	60da      	str	r2, [r3, #12]

  return 0;
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3720      	adds	r7, #32
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801541a:	b580      	push	{r7, lr}
 801541c:	b088      	sub	sp, #32
 801541e:	af00      	add	r7, sp, #0
 8015420:	60f8      	str	r0, [r7, #12]
 8015422:	460b      	mov	r3, r1
 8015424:	607a      	str	r2, [r7, #4]
 8015426:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	32b0      	adds	r2, #176	@ 0xb0
 8015432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015436:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8015438:	69bb      	ldr	r3, [r7, #24]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d102      	bne.n	8015444 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 801543e:	f04f 33ff 	mov.w	r3, #4294967295
 8015442:	e061      	b.n	8015508 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801544a:	68fa      	ldr	r2, [r7, #12]
 801544c:	33b0      	adds	r3, #176	@ 0xb0
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	f107 0214 	add.w	r2, r7, #20
 801545a:	f107 0110 	add.w	r1, r7, #16
 801545e:	7af8      	ldrb	r0, [r7, #11]
 8015460:	4798      	blx	r3
 8015462:	4603      	mov	r3, r0
 8015464:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8015466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d104      	bne.n	8015478 <SCSI_ReadFormatCapacity+0x5e>
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015474:	2b02      	cmp	r3, #2
 8015476:	d108      	bne.n	801548a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015478:	7af9      	ldrb	r1, [r7, #11]
 801547a:	233a      	movs	r3, #58	@ 0x3a
 801547c:	2202      	movs	r2, #2
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f000 f92c 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015484:	f04f 33ff 	mov.w	r3, #4294967295
 8015488:	e03e      	b.n	8015508 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 801548a:	2300      	movs	r3, #0
 801548c:	83fb      	strh	r3, [r7, #30]
 801548e:	e007      	b.n	80154a0 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8015490:	8bfb      	ldrh	r3, [r7, #30]
 8015492:	69ba      	ldr	r2, [r7, #24]
 8015494:	4413      	add	r3, r2
 8015496:	2200      	movs	r2, #0
 8015498:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801549a:	8bfb      	ldrh	r3, [r7, #30]
 801549c:	3301      	adds	r3, #1
 801549e:	83fb      	strh	r3, [r7, #30]
 80154a0:	8bfb      	ldrh	r3, [r7, #30]
 80154a2:	2b0b      	cmp	r3, #11
 80154a4:	d9f4      	bls.n	8015490 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	2208      	movs	r2, #8
 80154aa:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	3b01      	subs	r3, #1
 80154b0:	0e1b      	lsrs	r3, r3, #24
 80154b2:	b2da      	uxtb	r2, r3
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	3b01      	subs	r3, #1
 80154bc:	0c1b      	lsrs	r3, r3, #16
 80154be:	b2da      	uxtb	r2, r3
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	3b01      	subs	r3, #1
 80154c8:	0a1b      	lsrs	r3, r3, #8
 80154ca:	b2da      	uxtb	r2, r3
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	3b01      	subs	r3, #1
 80154d6:	b2da      	uxtb	r2, r3
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	2202      	movs	r2, #2
 80154e0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80154e2:	8abb      	ldrh	r3, [r7, #20]
 80154e4:	141b      	asrs	r3, r3, #16
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80154ec:	8abb      	ldrh	r3, [r7, #20]
 80154ee:	0a1b      	lsrs	r3, r3, #8
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80154f8:	8abb      	ldrh	r3, [r7, #20]
 80154fa:	b2da      	uxtb	r2, r3
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	220c      	movs	r2, #12
 8015504:	60da      	str	r2, [r3, #12]

  return 0;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3720      	adds	r7, #32
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	460b      	mov	r3, r1
 801551a:	607a      	str	r2, [r7, #4]
 801551c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	32b0      	adds	r2, #176	@ 0xb0
 8015528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801552c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801552e:	2317      	movs	r3, #23
 8015530:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d102      	bne.n	801553e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8015538:	f04f 33ff 	mov.w	r3, #4294967295
 801553c:	e011      	b.n	8015562 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	3304      	adds	r3, #4
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	461a      	mov	r2, r3
 8015546:	8afb      	ldrh	r3, [r7, #22]
 8015548:	4293      	cmp	r3, r2
 801554a:	d303      	bcc.n	8015554 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	3304      	adds	r3, #4
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8015554:	8afb      	ldrh	r3, [r7, #22]
 8015556:	461a      	mov	r2, r3
 8015558:	4904      	ldr	r1, [pc, #16]	@ (801556c <SCSI_ModeSense6+0x5c>)
 801555a:	6938      	ldr	r0, [r7, #16]
 801555c:	f000 fe2e 	bl	80161bc <SCSI_UpdateBotData>

  return 0;
 8015560:	2300      	movs	r3, #0
}
 8015562:	4618      	mov	r0, r3
 8015564:	3718      	adds	r7, #24
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	200000c0 	.word	0x200000c0

08015570 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b086      	sub	sp, #24
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	460b      	mov	r3, r1
 801557a:	607a      	str	r2, [r7, #4]
 801557c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	32b0      	adds	r2, #176	@ 0xb0
 8015588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801558c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801558e:	231b      	movs	r3, #27
 8015590:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d102      	bne.n	801559e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8015598:	f04f 33ff 	mov.w	r3, #4294967295
 801559c:	e011      	b.n	80155c2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	3308      	adds	r3, #8
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	8afb      	ldrh	r3, [r7, #22]
 80155a8:	4293      	cmp	r3, r2
 80155aa:	d303      	bcc.n	80155b4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	3308      	adds	r3, #8
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80155b4:	8afb      	ldrh	r3, [r7, #22]
 80155b6:	461a      	mov	r2, r3
 80155b8:	4904      	ldr	r1, [pc, #16]	@ (80155cc <SCSI_ModeSense10+0x5c>)
 80155ba:	6938      	ldr	r0, [r7, #16]
 80155bc:	f000 fdfe 	bl	80161bc <SCSI_UpdateBotData>

  return 0;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3718      	adds	r7, #24
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	200000d8 	.word	0x200000d8

080155d0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b086      	sub	sp, #24
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	460b      	mov	r3, r1
 80155da:	607a      	str	r2, [r7, #4]
 80155dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	32b0      	adds	r2, #176	@ 0xb0
 80155e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d102      	bne.n	80155fa <SCSI_RequestSense+0x2a>
  {
    return -1;
 80155f4:	f04f 33ff 	mov.w	r3, #4294967295
 80155f8:	e06c      	b.n	80156d4 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015600:	2b00      	cmp	r3, #0
 8015602:	d10a      	bne.n	801561a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801560a:	2320      	movs	r3, #32
 801560c:	2205      	movs	r2, #5
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f000 f864 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015614:	f04f 33ff 	mov.w	r3, #4294967295
 8015618:	e05c      	b.n	80156d4 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801561a:	2300      	movs	r3, #0
 801561c:	75fb      	strb	r3, [r7, #23]
 801561e:	e007      	b.n	8015630 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8015620:	7dfb      	ldrb	r3, [r7, #23]
 8015622:	693a      	ldr	r2, [r7, #16]
 8015624:	4413      	add	r3, r2
 8015626:	2200      	movs	r2, #0
 8015628:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801562a:	7dfb      	ldrb	r3, [r7, #23]
 801562c:	3301      	adds	r3, #1
 801562e:	75fb      	strb	r3, [r7, #23]
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	2b11      	cmp	r3, #17
 8015634:	d9f4      	bls.n	8015620 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	2270      	movs	r2, #112	@ 0x70
 801563a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	220c      	movs	r2, #12
 8015640:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801564e:	429a      	cmp	r2, r3
 8015650:	d031      	beq.n	80156b6 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015658:	461a      	mov	r2, r3
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8015660:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 801566e:	693a      	ldr	r2, [r7, #16]
 8015670:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015674:	00db      	lsls	r3, r3, #3
 8015676:	4413      	add	r3, r2
 8015678:	791a      	ldrb	r2, [r3, #4]
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8015684:	693a      	ldr	r2, [r7, #16]
 8015686:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801568a:	00db      	lsls	r3, r3, #3
 801568c:	4413      	add	r3, r2
 801568e:	795a      	ldrb	r2, [r3, #5]
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 801569a:	3301      	adds	r3, #1
 801569c:	b2da      	uxtb	r2, r3
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 80156aa:	2b04      	cmp	r3, #4
 80156ac:	d103      	bne.n	80156b6 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	2200      	movs	r2, #0
 80156b2:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	2212      	movs	r2, #18
 80156ba:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	3304      	adds	r3, #4
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	2b12      	cmp	r3, #18
 80156c4:	d805      	bhi.n	80156d2 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	3304      	adds	r3, #4
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	461a      	mov	r2, r3
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3718      	adds	r7, #24
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80156dc:	b480      	push	{r7}
 80156de:	b085      	sub	sp, #20
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	4608      	mov	r0, r1
 80156e6:	4611      	mov	r1, r2
 80156e8:	461a      	mov	r2, r3
 80156ea:	4603      	mov	r3, r0
 80156ec:	70fb      	strb	r3, [r7, #3]
 80156ee:	460b      	mov	r3, r1
 80156f0:	70bb      	strb	r3, [r7, #2]
 80156f2:	4613      	mov	r3, r2
 80156f4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	32b0      	adds	r2, #176	@ 0xb0
 8015700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015704:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d02f      	beq.n	801576c <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015712:	461a      	mov	r2, r3
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 801571a:	78b9      	ldrb	r1, [r7, #2]
 801571c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801572c:	00db      	lsls	r3, r3, #3
 801572e:	4413      	add	r3, r2
 8015730:	787a      	ldrb	r2, [r7, #1]
 8015732:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801573a:	68fa      	ldr	r2, [r7, #12]
 801573c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015740:	00db      	lsls	r3, r3, #3
 8015742:	4413      	add	r3, r2
 8015744:	2200      	movs	r2, #0
 8015746:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801574e:	3301      	adds	r3, #1
 8015750:	b2da      	uxtb	r2, r3
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801575e:	2b04      	cmp	r3, #4
 8015760:	d105      	bne.n	801576e <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2200      	movs	r2, #0
 8015766:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 801576a:	e000      	b.n	801576e <SCSI_SenseCode+0x92>
    return;
 801576c:	bf00      	nop
  }
}
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr

08015778 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b086      	sub	sp, #24
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	460b      	mov	r3, r1
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	32b0      	adds	r2, #176	@ 0xb0
 8015790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015794:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d102      	bne.n	80157a2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 801579c:	f04f 33ff 	mov.w	r3, #4294967295
 80157a0:	e03b      	b.n	801581a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d10f      	bne.n	80157cc <SCSI_StartStopUnit+0x54>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	3304      	adds	r3, #4
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	f003 0303 	and.w	r3, r3, #3
 80157b6:	2b02      	cmp	r3, #2
 80157b8:	d108      	bne.n	80157cc <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80157ba:	7af9      	ldrb	r1, [r7, #11]
 80157bc:	2324      	movs	r3, #36	@ 0x24
 80157be:	2205      	movs	r2, #5
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	f7ff ff8b 	bl	80156dc <SCSI_SenseCode>

    return -1;
 80157c6:	f04f 33ff 	mov.w	r3, #4294967295
 80157ca:	e026      	b.n	801581a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	3304      	adds	r3, #4
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	f003 0303 	and.w	r3, r3, #3
 80157d6:	2b01      	cmp	r3, #1
 80157d8:	d104      	bne.n	80157e4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	2200      	movs	r2, #0
 80157de:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80157e2:	e016      	b.n	8015812 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	3304      	adds	r3, #4
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	f003 0303 	and.w	r3, r3, #3
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d104      	bne.n	80157fc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	2202      	movs	r2, #2
 80157f6:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80157fa:	e00a      	b.n	8015812 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	3304      	adds	r3, #4
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	f003 0303 	and.w	r3, r3, #3
 8015806:	2b03      	cmp	r3, #3
 8015808:	d103      	bne.n	8015812 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	2200      	movs	r2, #0
 801580e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2200      	movs	r2, #0
 8015816:	60da      	str	r2, [r3, #12]

  return 0;
 8015818:	2300      	movs	r3, #0
}
 801581a:	4618      	mov	r0, r3
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015822:	b480      	push	{r7}
 8015824:	b087      	sub	sp, #28
 8015826:	af00      	add	r7, sp, #0
 8015828:	60f8      	str	r0, [r7, #12]
 801582a:	460b      	mov	r3, r1
 801582c:	607a      	str	r2, [r7, #4]
 801582e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	32b0      	adds	r2, #176	@ 0xb0
 801583a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801583e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d102      	bne.n	801584c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8015846:	f04f 33ff 	mov.w	r3, #4294967295
 801584a:	e011      	b.n	8015870 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	3304      	adds	r3, #4
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d104      	bne.n	8015860 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	2200      	movs	r2, #0
 801585a:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801585e:	e003      	b.n	8015868 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	2201      	movs	r2, #1
 8015864:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	2200      	movs	r2, #0
 801586c:	60da      	str	r2, [r3, #12]

  return 0;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	371c      	adds	r7, #28
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b086      	sub	sp, #24
 8015880:	af00      	add	r7, sp, #0
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	460b      	mov	r3, r1
 8015886:	607a      	str	r2, [r7, #4]
 8015888:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	32b0      	adds	r2, #176	@ 0xb0
 8015894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015898:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d102      	bne.n	80158a6 <SCSI_Read10+0x2a>
  {
    return -1;
 80158a0:	f04f 33ff 	mov.w	r3, #4294967295
 80158a4:	e090      	b.n	80159c8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	7a1b      	ldrb	r3, [r3, #8]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	f040 8082 	bne.w	80159b4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80158b6:	b25b      	sxtb	r3, r3
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	db0a      	blt.n	80158d2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80158c2:	2320      	movs	r3, #32
 80158c4:	2205      	movs	r2, #5
 80158c6:	68f8      	ldr	r0, [r7, #12]
 80158c8:	f7ff ff08 	bl	80156dc <SCSI_SenseCode>
      return -1;
 80158cc:	f04f 33ff 	mov.w	r3, #4294967295
 80158d0:	e07a      	b.n	80159c8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80158d8:	2b02      	cmp	r3, #2
 80158da:	d108      	bne.n	80158ee <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80158dc:	7af9      	ldrb	r1, [r7, #11]
 80158de:	233a      	movs	r3, #58	@ 0x3a
 80158e0:	2202      	movs	r2, #2
 80158e2:	68f8      	ldr	r0, [r7, #12]
 80158e4:	f7ff fefa 	bl	80156dc <SCSI_SenseCode>

      return -1;
 80158e8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ec:	e06c      	b.n	80159c8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	33b0      	adds	r3, #176	@ 0xb0
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	4413      	add	r3, r2
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	689b      	ldr	r3, [r3, #8]
 8015900:	7afa      	ldrb	r2, [r7, #11]
 8015902:	4610      	mov	r0, r2
 8015904:	4798      	blx	r3
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d008      	beq.n	801591e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801590c:	7af9      	ldrb	r1, [r7, #11]
 801590e:	233a      	movs	r3, #58	@ 0x3a
 8015910:	2202      	movs	r2, #2
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f7ff fee2 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
 801591c:	e054      	b.n	80159c8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	3302      	adds	r3, #2
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	3303      	adds	r3, #3
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801592e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	3304      	adds	r3, #4
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015938:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	3205      	adds	r2, #5
 801593e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015940:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	3307      	adds	r3, #7
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	021b      	lsls	r3, r3, #8
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	3208      	adds	r2, #8
 8015954:	7812      	ldrb	r2, [r2, #0]
 8015956:	431a      	orrs	r2, r3
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801596a:	7af9      	ldrb	r1, [r7, #11]
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f000 fadc 	bl	8015f2a <SCSI_CheckAddressRange>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	da02      	bge.n	801597e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015978:	f04f 33ff 	mov.w	r3, #4294967295
 801597c:	e024      	b.n	80159c8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801598a:	6979      	ldr	r1, [r7, #20]
 801598c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8015990:	fb01 f303 	mul.w	r3, r1, r3
 8015994:	429a      	cmp	r2, r3
 8015996:	d00a      	beq.n	80159ae <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801599e:	2320      	movs	r3, #32
 80159a0:	2205      	movs	r2, #5
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f7ff fe9a 	bl	80156dc <SCSI_SenseCode>
      return -1;
 80159a8:	f04f 33ff 	mov.w	r3, #4294967295
 80159ac:	e00c      	b.n	80159c8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	2202      	movs	r2, #2
 80159b2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80159ba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80159bc:	7afb      	ldrb	r3, [r7, #11]
 80159be:	4619      	mov	r1, r3
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	f000 fadf 	bl	8015f84 <SCSI_ProcessRead>
 80159c6:	4603      	mov	r3, r0
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3718      	adds	r7, #24
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b086      	sub	sp, #24
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	460b      	mov	r3, r1
 80159da:	607a      	str	r2, [r7, #4]
 80159dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	32b0      	adds	r2, #176	@ 0xb0
 80159e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d102      	bne.n	80159fa <SCSI_Read12+0x2a>
  {
    return -1;
 80159f4:	f04f 33ff 	mov.w	r3, #4294967295
 80159f8:	e09a      	b.n	8015b30 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	7a1b      	ldrb	r3, [r3, #8]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	f040 808c 	bne.w	8015b1c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015a0a:	b25b      	sxtb	r3, r3
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	db0a      	blt.n	8015a26 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015a16:	2320      	movs	r3, #32
 8015a18:	2205      	movs	r2, #5
 8015a1a:	68f8      	ldr	r0, [r7, #12]
 8015a1c:	f7ff fe5e 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015a20:	f04f 33ff 	mov.w	r3, #4294967295
 8015a24:	e084      	b.n	8015b30 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8015a2c:	2b02      	cmp	r3, #2
 8015a2e:	d108      	bne.n	8015a42 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015a30:	7af9      	ldrb	r1, [r7, #11]
 8015a32:	233a      	movs	r3, #58	@ 0x3a
 8015a34:	2202      	movs	r2, #2
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f7ff fe50 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a40:	e076      	b.n	8015b30 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a48:	68fa      	ldr	r2, [r7, #12]
 8015a4a:	33b0      	adds	r3, #176	@ 0xb0
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	4413      	add	r3, r2
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	689b      	ldr	r3, [r3, #8]
 8015a54:	7afa      	ldrb	r2, [r7, #11]
 8015a56:	4610      	mov	r0, r2
 8015a58:	4798      	blx	r3
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d008      	beq.n	8015a72 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015a60:	7af9      	ldrb	r1, [r7, #11]
 8015a62:	233a      	movs	r3, #58	@ 0x3a
 8015a64:	2202      	movs	r2, #2
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7ff fe38 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a70:	e05e      	b.n	8015b30 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	3302      	adds	r3, #2
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	3303      	adds	r3, #3
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015a82:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	3304      	adds	r3, #4
 8015a88:	781b      	ldrb	r3, [r3, #0]
 8015a8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015a8c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015a8e:	687a      	ldr	r2, [r7, #4]
 8015a90:	3205      	adds	r2, #5
 8015a92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015a94:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	3306      	adds	r3, #6
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	3307      	adds	r3, #7
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015aac:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3308      	adds	r3, #8
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015ab6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	3209      	adds	r2, #9
 8015abc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015abe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015ad2:	7af9      	ldrb	r1, [r7, #11]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f000 fa28 	bl	8015f2a <SCSI_CheckAddressRange>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	da02      	bge.n	8015ae6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae4:	e024      	b.n	8015b30 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015af2:	6979      	ldr	r1, [r7, #20]
 8015af4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8015af8:	fb01 f303 	mul.w	r3, r1, r3
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d00a      	beq.n	8015b16 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015b06:	2320      	movs	r3, #32
 8015b08:	2205      	movs	r2, #5
 8015b0a:	68f8      	ldr	r0, [r7, #12]
 8015b0c:	f7ff fde6 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015b10:	f04f 33ff 	mov.w	r3, #4294967295
 8015b14:	e00c      	b.n	8015b30 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	2202      	movs	r2, #2
 8015b1a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015b22:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015b24:	7afb      	ldrb	r3, [r7, #11]
 8015b26:	4619      	mov	r1, r3
 8015b28:	68f8      	ldr	r0, [r7, #12]
 8015b2a:	f000 fa2b 	bl	8015f84 <SCSI_ProcessRead>
 8015b2e:	4603      	mov	r3, r0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3718      	adds	r7, #24
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b086      	sub	sp, #24
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	460b      	mov	r3, r1
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	32b0      	adds	r2, #176	@ 0xb0
 8015b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b54:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d102      	bne.n	8015b62 <SCSI_Write10+0x2a>
  {
    return -1;
 8015b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b60:	e0ba      	b.n	8015cd8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	7a1b      	ldrb	r3, [r3, #8]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	f040 80b0 	bne.w	8015ccc <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d10a      	bne.n	8015b8c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015b7c:	2320      	movs	r3, #32
 8015b7e:	2205      	movs	r2, #5
 8015b80:	68f8      	ldr	r0, [r7, #12]
 8015b82:	f7ff fdab 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015b86:	f04f 33ff 	mov.w	r3, #4294967295
 8015b8a:	e0a5      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015b92:	b25b      	sxtb	r3, r3
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	da0a      	bge.n	8015bae <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015b9e:	2320      	movs	r3, #32
 8015ba0:	2205      	movs	r2, #5
 8015ba2:	68f8      	ldr	r0, [r7, #12]
 8015ba4:	f7ff fd9a 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8015bac:	e094      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	33b0      	adds	r3, #176	@ 0xb0
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4413      	add	r3, r2
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	689b      	ldr	r3, [r3, #8]
 8015bc0:	7afa      	ldrb	r2, [r7, #11]
 8015bc2:	4610      	mov	r0, r2
 8015bc4:	4798      	blx	r3
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d008      	beq.n	8015bde <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015bcc:	7af9      	ldrb	r1, [r7, #11]
 8015bce:	233a      	movs	r3, #58	@ 0x3a
 8015bd0:	2202      	movs	r2, #2
 8015bd2:	68f8      	ldr	r0, [r7, #12]
 8015bd4:	f7ff fd82 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8015bdc:	e07c      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	33b0      	adds	r3, #176	@ 0xb0
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	4413      	add	r3, r2
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	68db      	ldr	r3, [r3, #12]
 8015bf0:	7afa      	ldrb	r2, [r7, #11]
 8015bf2:	4610      	mov	r0, r2
 8015bf4:	4798      	blx	r3
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d008      	beq.n	8015c0e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015bfc:	7af9      	ldrb	r1, [r7, #11]
 8015bfe:	2327      	movs	r3, #39	@ 0x27
 8015c00:	2202      	movs	r2, #2
 8015c02:	68f8      	ldr	r0, [r7, #12]
 8015c04:	f7ff fd6a 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015c08:	f04f 33ff 	mov.w	r3, #4294967295
 8015c0c:	e064      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	3302      	adds	r3, #2
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	3303      	adds	r3, #3
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015c1e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	3304      	adds	r3, #4
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015c28:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015c2a:	687a      	ldr	r2, [r7, #4]
 8015c2c:	3205      	adds	r2, #5
 8015c2e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015c30:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	3307      	adds	r3, #7
 8015c3c:	781b      	ldrb	r3, [r3, #0]
 8015c3e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	3208      	adds	r2, #8
 8015c44:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015c46:	431a      	orrs	r2, r3
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015c5a:	7af9      	ldrb	r1, [r7, #11]
 8015c5c:	68f8      	ldr	r0, [r7, #12]
 8015c5e:	f000 f964 	bl	8015f2a <SCSI_CheckAddressRange>
 8015c62:	4603      	mov	r3, r0
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	da02      	bge.n	8015c6e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015c68:	f04f 33ff 	mov.w	r3, #4294967295
 8015c6c:	e034      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015c74:	697a      	ldr	r2, [r7, #20]
 8015c76:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015c7a:	fb02 f303 	mul.w	r3, r2, r3
 8015c7e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015c86:	693a      	ldr	r2, [r7, #16]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d00a      	beq.n	8015ca2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015c92:	2320      	movs	r3, #32
 8015c94:	2205      	movs	r2, #5
 8015c96:	68f8      	ldr	r0, [r7, #12]
 8015c98:	f7ff fd20 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca0:	e01a      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ca8:	bf28      	it	cs
 8015caa:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015cae:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8015ce0 <SCSI_Write10+0x1a8>)
 8015cb8:	7819      	ldrb	r1, [r3, #0]
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	f103 0210 	add.w	r2, r3, #16
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f006 f8b5 	bl	801be32 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	e005      	b.n	8015cd8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8015ccc:	7afb      	ldrb	r3, [r7, #11]
 8015cce:	4619      	mov	r1, r3
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f000 f9dd 	bl	8016090 <SCSI_ProcessWrite>
 8015cd6:	4603      	mov	r3, r0
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3718      	adds	r7, #24
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	200000af 	.word	0x200000af

08015ce4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b086      	sub	sp, #24
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	460b      	mov	r3, r1
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	32b0      	adds	r2, #176	@ 0xb0
 8015cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d00:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d102      	bne.n	8015d0e <SCSI_Write12+0x2a>
  {
    return -1;
 8015d08:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0c:	e0ca      	b.n	8015ea4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	7a1b      	ldrb	r3, [r3, #8]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	f040 80c0 	bne.w	8015e98 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d10a      	bne.n	8015d38 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015d28:	2320      	movs	r3, #32
 8015d2a:	2205      	movs	r2, #5
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f7ff fcd5 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015d32:	f04f 33ff 	mov.w	r3, #4294967295
 8015d36:	e0b5      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8015d3e:	b25b      	sxtb	r3, r3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	da0a      	bge.n	8015d5a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015d4a:	2320      	movs	r3, #32
 8015d4c:	2205      	movs	r2, #5
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	f7ff fcc4 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015d54:	f04f 33ff 	mov.w	r3, #4294967295
 8015d58:	e0a4      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d60:	68fa      	ldr	r2, [r7, #12]
 8015d62:	33b0      	adds	r3, #176	@ 0xb0
 8015d64:	009b      	lsls	r3, r3, #2
 8015d66:	4413      	add	r3, r2
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	689b      	ldr	r3, [r3, #8]
 8015d6c:	7afa      	ldrb	r2, [r7, #11]
 8015d6e:	4610      	mov	r0, r2
 8015d70:	4798      	blx	r3
 8015d72:	4603      	mov	r3, r0
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d00b      	beq.n	8015d90 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015d78:	7af9      	ldrb	r1, [r7, #11]
 8015d7a:	233a      	movs	r3, #58	@ 0x3a
 8015d7c:	2202      	movs	r2, #2
 8015d7e:	68f8      	ldr	r0, [r7, #12]
 8015d80:	f7ff fcac 	bl	80156dc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	2205      	movs	r2, #5
 8015d88:	721a      	strb	r2, [r3, #8]
      return -1;
 8015d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d8e:	e089      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	33b0      	adds	r3, #176	@ 0xb0
 8015d9a:	009b      	lsls	r3, r3, #2
 8015d9c:	4413      	add	r3, r2
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	68db      	ldr	r3, [r3, #12]
 8015da2:	7afa      	ldrb	r2, [r7, #11]
 8015da4:	4610      	mov	r0, r2
 8015da6:	4798      	blx	r3
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d00b      	beq.n	8015dc6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015dae:	7af9      	ldrb	r1, [r7, #11]
 8015db0:	2327      	movs	r3, #39	@ 0x27
 8015db2:	2202      	movs	r2, #2
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f7ff fc91 	bl	80156dc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	2205      	movs	r2, #5
 8015dbe:	721a      	strb	r2, [r3, #8]
      return -1;
 8015dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc4:	e06e      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	3302      	adds	r3, #2
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	3303      	adds	r3, #3
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015dd6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015de0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	3205      	adds	r2, #5
 8015de6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015de8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	3306      	adds	r3, #6
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	3307      	adds	r3, #7
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015e00:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	3308      	adds	r3, #8
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015e0a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	3209      	adds	r2, #9
 8015e10:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015e12:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015e1a:	697b      	ldr	r3, [r7, #20]
 8015e1c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015e26:	7af9      	ldrb	r1, [r7, #11]
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f000 f87e 	bl	8015f2a <SCSI_CheckAddressRange>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	da02      	bge.n	8015e3a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295
 8015e38:	e034      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015e40:	697a      	ldr	r2, [r7, #20]
 8015e42:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015e46:	fb02 f303 	mul.w	r3, r2, r3
 8015e4a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8015e52:	693a      	ldr	r2, [r7, #16]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d00a      	beq.n	8015e6e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8015e5e:	2320      	movs	r3, #32
 8015e60:	2205      	movs	r2, #5
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f7ff fc3a 	bl	80156dc <SCSI_SenseCode>
      return -1;
 8015e68:	f04f 33ff 	mov.w	r3, #4294967295
 8015e6c:	e01a      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015e74:	bf28      	it	cs
 8015e76:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015e7a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	2201      	movs	r2, #1
 8015e80:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015e82:	4b0a      	ldr	r3, [pc, #40]	@ (8015eac <SCSI_Write12+0x1c8>)
 8015e84:	7819      	ldrb	r1, [r3, #0]
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	f103 0210 	add.w	r2, r3, #16
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	f005 ffcf 	bl	801be32 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015e94:	2300      	movs	r3, #0
 8015e96:	e005      	b.n	8015ea4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015e98:	7afb      	ldrb	r3, [r7, #11]
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f000 f8f7 	bl	8016090 <SCSI_ProcessWrite>
 8015ea2:	4603      	mov	r3, r0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3718      	adds	r7, #24
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	200000af 	.word	0x200000af

08015eb0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	460b      	mov	r3, r1
 8015eba:	607a      	str	r2, [r7, #4]
 8015ebc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	32b0      	adds	r2, #176	@ 0xb0
 8015ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ecc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d102      	bne.n	8015eda <SCSI_Verify10+0x2a>
  {
    return -1;
 8015ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed8:	e023      	b.n	8015f22 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	3301      	adds	r3, #1
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d008      	beq.n	8015efa <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015ee8:	7af9      	ldrb	r1, [r7, #11]
 8015eea:	2324      	movs	r3, #36	@ 0x24
 8015eec:	2205      	movs	r2, #5
 8015eee:	68f8      	ldr	r0, [r7, #12]
 8015ef0:	f7ff fbf4 	bl	80156dc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ef8:	e013      	b.n	8015f22 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015f06:	7af9      	ldrb	r1, [r7, #11]
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f000 f80e 	bl	8015f2a <SCSI_CheckAddressRange>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	da02      	bge.n	8015f1a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015f14:	f04f 33ff 	mov.w	r3, #4294967295
 8015f18:	e003      	b.n	8015f22 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	60da      	str	r2, [r3, #12]

  return 0;
 8015f20:	2300      	movs	r3, #0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3718      	adds	r7, #24
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b086      	sub	sp, #24
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	60f8      	str	r0, [r7, #12]
 8015f32:	607a      	str	r2, [r7, #4]
 8015f34:	603b      	str	r3, [r7, #0]
 8015f36:	460b      	mov	r3, r1
 8015f38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	32b0      	adds	r2, #176	@ 0xb0
 8015f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d102      	bne.n	8015f56 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015f50:	f04f 33ff 	mov.w	r3, #4294967295
 8015f54:	e011      	b.n	8015f7a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	441a      	add	r2, r3
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d908      	bls.n	8015f78 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015f66:	7af9      	ldrb	r1, [r7, #11]
 8015f68:	2321      	movs	r3, #33	@ 0x21
 8015f6a:	2205      	movs	r2, #5
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f7ff fbb5 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8015f72:	f04f 33ff 	mov.w	r3, #4294967295
 8015f76:	e000      	b.n	8015f7a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3718      	adds	r7, #24
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
	...

08015f84 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015f84:	b590      	push	{r4, r7, lr}
 8015f86:	b085      	sub	sp, #20
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	460b      	mov	r3, r1
 8015f8e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	32b0      	adds	r2, #176	@ 0xb0
 8015f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f9e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d102      	bne.n	8015fac <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015faa:	e06a      	b.n	8016082 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8015fb2:	68fa      	ldr	r2, [r7, #12]
 8015fb4:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8015fb8:	fb02 f303 	mul.w	r3, r2, r3
 8015fbc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015fc4:	bf28      	it	cs
 8015fc6:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8015fca:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	33b0      	adds	r3, #176	@ 0xb0
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	4413      	add	r3, r2
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	691c      	ldr	r4, [r3, #16]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	f103 0110 	add.w	r1, r3, #16
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	78f8      	ldrb	r0, [r7, #3]
 8015ffc:	47a0      	blx	r4
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	da08      	bge.n	8016016 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8016004:	78f9      	ldrb	r1, [r7, #3]
 8016006:	2311      	movs	r3, #17
 8016008:	2204      	movs	r2, #4
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff fb66 	bl	80156dc <SCSI_SenseCode>
    return -1;
 8016010:	f04f 33ff 	mov.w	r3, #4294967295
 8016014:	e035      	b.n	8016082 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8016016:	4b1d      	ldr	r3, [pc, #116]	@ (801608c <SCSI_ProcessRead+0x108>)
 8016018:	7819      	ldrb	r1, [r3, #0]
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f103 0210 	add.w	r2, r3, #16
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f005 fee4 	bl	801bdf0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016034:	4619      	mov	r1, r3
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	fbb3 f3f1 	udiv	r3, r3, r1
 801603c:	441a      	add	r2, r3
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016050:	4619      	mov	r1, r3
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	fbb3 f3f1 	udiv	r3, r3, r1
 8016058:	1ad2      	subs	r2, r2, r3
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	1ad2      	subs	r2, r2, r3
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8016076:	2b00      	cmp	r3, #0
 8016078:	d102      	bne.n	8016080 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2203      	movs	r2, #3
 801607e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8016080:	2300      	movs	r3, #0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3714      	adds	r7, #20
 8016086:	46bd      	mov	sp, r7
 8016088:	bd90      	pop	{r4, r7, pc}
 801608a:	bf00      	nop
 801608c:	200000ae 	.word	0x200000ae

08016090 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8016090:	b590      	push	{r4, r7, lr}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	460b      	mov	r3, r1
 801609a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	32b0      	adds	r2, #176	@ 0xb0
 80160a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160aa:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d102      	bne.n	80160b8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80160b2:	f04f 33ff 	mov.w	r3, #4294967295
 80160b6:	e07a      	b.n	80161ae <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80160be:	68fa      	ldr	r2, [r7, #12]
 80160c0:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80160c4:	fb02 f303 	mul.w	r3, r2, r3
 80160c8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80160d0:	bf28      	it	cs
 80160d2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80160d6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	33b0      	adds	r3, #176	@ 0xb0
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	4413      	add	r3, r2
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	695c      	ldr	r4, [r3, #20]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f103 0110 	add.w	r1, r3, #16
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80160fc:	4618      	mov	r0, r3
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8016104:	b29b      	uxth	r3, r3
 8016106:	78f8      	ldrb	r0, [r7, #3]
 8016108:	47a0      	blx	r4
 801610a:	4603      	mov	r3, r0
 801610c:	2b00      	cmp	r3, #0
 801610e:	da08      	bge.n	8016122 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8016110:	78f9      	ldrb	r1, [r7, #3]
 8016112:	2303      	movs	r3, #3
 8016114:	2204      	movs	r2, #4
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7ff fae0 	bl	80156dc <SCSI_SenseCode>
    return -1;
 801611c:	f04f 33ff 	mov.w	r3, #4294967295
 8016120:	e045      	b.n	80161ae <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801612e:	4619      	mov	r1, r3
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	fbb3 f3f1 	udiv	r3, r3, r1
 8016136:	441a      	add	r2, r3
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801614a:	4619      	mov	r1, r3
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016152:	1ad2      	subs	r2, r2, r3
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	1ad2      	subs	r2, r2, r3
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8016170:	2b00      	cmp	r3, #0
 8016172:	d104      	bne.n	801617e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016174:	2100      	movs	r1, #0
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f7fe fd10 	bl	8014b9c <MSC_BOT_SendCSW>
 801617c:	e016      	b.n	80161ac <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801618a:	fb02 f303 	mul.w	r3, r2, r3
 801618e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016192:	bf28      	it	cs
 8016194:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8016198:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801619a:	4b07      	ldr	r3, [pc, #28]	@ (80161b8 <SCSI_ProcessWrite+0x128>)
 801619c:	7819      	ldrb	r1, [r3, #0]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	f103 0210 	add.w	r2, r3, #16
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f005 fe43 	bl	801be32 <USBD_LL_PrepareReceive>
  }

  return 0;
 80161ac:	2300      	movs	r3, #0
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3714      	adds	r7, #20
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd90      	pop	{r4, r7, pc}
 80161b6:	bf00      	nop
 80161b8:	200000af 	.word	0x200000af

080161bc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80161bc:	b480      	push	{r7}
 80161be:	b087      	sub	sp, #28
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	4613      	mov	r3, r2
 80161c8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80161ca:	88fb      	ldrh	r3, [r7, #6]
 80161cc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d102      	bne.n	80161da <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80161d4:	f04f 33ff 	mov.w	r3, #4294967295
 80161d8:	e013      	b.n	8016202 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80161da:	8afa      	ldrh	r2, [r7, #22]
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80161e0:	e00b      	b.n	80161fa <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80161e2:	8afb      	ldrh	r3, [r7, #22]
 80161e4:	3b01      	subs	r3, #1
 80161e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80161e8:	8afb      	ldrh	r3, [r7, #22]
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	441a      	add	r2, r3
 80161ee:	8afb      	ldrh	r3, [r7, #22]
 80161f0:	7811      	ldrb	r1, [r2, #0]
 80161f2:	68fa      	ldr	r2, [r7, #12]
 80161f4:	4413      	add	r3, r2
 80161f6:	460a      	mov	r2, r1
 80161f8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80161fa:	8afb      	ldrh	r3, [r7, #22]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d1f0      	bne.n	80161e2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8016200:	2300      	movs	r3, #0
}
 8016202:	4618      	mov	r0, r3
 8016204:	371c      	adds	r7, #28
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr

0801620e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801620e:	b580      	push	{r7, lr}
 8016210:	b086      	sub	sp, #24
 8016212:	af00      	add	r7, sp, #0
 8016214:	60f8      	str	r0, [r7, #12]
 8016216:	60b9      	str	r1, [r7, #8]
 8016218:	4613      	mov	r3, r2
 801621a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d101      	bne.n	8016226 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016222:	2303      	movs	r3, #3
 8016224:	e01f      	b.n	8016266 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2200      	movs	r2, #0
 8016232:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d003      	beq.n	801624c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	68ba      	ldr	r2, [r7, #8]
 8016248:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2201      	movs	r2, #1
 8016250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	79fa      	ldrb	r2, [r7, #7]
 8016258:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801625a:	68f8      	ldr	r0, [r7, #12]
 801625c:	f005 fc3e 	bl	801badc <USBD_LL_Init>
 8016260:	4603      	mov	r3, r0
 8016262:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016264:	7dfb      	ldrb	r3, [r7, #23]
}
 8016266:	4618      	mov	r0, r3
 8016268:	3718      	adds	r7, #24
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b084      	sub	sp, #16
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f005 fcb2 	bl	801bbe0 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2201      	movs	r2, #1
 8016280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801628a:	2b00      	cmp	r3, #0
 801628c:	d009      	beq.n	80162a2 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	6852      	ldr	r2, [r2, #4]
 801629a:	b2d2      	uxtb	r2, r2
 801629c:	4611      	mov	r1, r2
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2200      	movs	r2, #0
 80162a6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2200      	movs	r2, #0
 80162ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2200      	movs	r2, #0
 80162b6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f005 fc5a 	bl	801bb74 <USBD_LL_DeInit>
 80162c0:	4603      	mov	r3, r0
 80162c2:	73fb      	strb	r3, [r7, #15]

  return ret;
 80162c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3710      	adds	r7, #16
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}

080162ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80162ce:	b580      	push	{r7, lr}
 80162d0:	b084      	sub	sp, #16
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	6078      	str	r0, [r7, #4]
 80162d6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80162d8:	2300      	movs	r3, #0
 80162da:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d101      	bne.n	80162e6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80162e2:	2303      	movs	r3, #3
 80162e4:	e025      	b.n	8016332 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	683a      	ldr	r2, [r7, #0]
 80162ea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	32ae      	adds	r2, #174	@ 0xae
 80162f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00f      	beq.n	8016322 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	32ae      	adds	r2, #174	@ 0xae
 801630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016312:	f107 020e 	add.w	r2, r7, #14
 8016316:	4610      	mov	r0, r2
 8016318:	4798      	blx	r3
 801631a:	4602      	mov	r2, r0
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016328:	1c5a      	adds	r2, r3, #1
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016330:	2300      	movs	r3, #0
}
 8016332:	4618      	mov	r0, r3
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801633a:	b580      	push	{r7, lr}
 801633c:	b082      	sub	sp, #8
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f005 fc31 	bl	801bbaa <USBD_LL_Start>
 8016348:	4603      	mov	r3, r0
}
 801634a:	4618      	mov	r0, r3
 801634c:	3708      	adds	r7, #8
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}

08016352 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8016352:	b580      	push	{r7, lr}
 8016354:	b082      	sub	sp, #8
 8016356:	af00      	add	r7, sp, #0
 8016358:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f005 fc40 	bl	801bbe0 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016366:	2b00      	cmp	r3, #0
 8016368:	d009      	beq.n	801637e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	6852      	ldr	r2, [r2, #4]
 8016376:	b2d2      	uxtb	r2, r2
 8016378:	4611      	mov	r1, r2
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 801637e:	2300      	movs	r3, #0
}
 8016380:	4618      	mov	r0, r3
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016388:	b480      	push	{r7}
 801638a:	b083      	sub	sp, #12
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016390:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016392:	4618      	mov	r0, r3
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr

0801639e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b084      	sub	sp, #16
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
 80163a6:	460b      	mov	r3, r1
 80163a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80163aa:	2300      	movs	r3, #0
 80163ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d009      	beq.n	80163cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	78fa      	ldrb	r2, [r7, #3]
 80163c2:	4611      	mov	r1, r2
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	4798      	blx	r3
 80163c8:	4603      	mov	r3, r0
 80163ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80163cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}

080163d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80163d6:	b580      	push	{r7, lr}
 80163d8:	b084      	sub	sp, #16
 80163da:	af00      	add	r7, sp, #0
 80163dc:	6078      	str	r0, [r7, #4]
 80163de:	460b      	mov	r3, r1
 80163e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80163e2:	2300      	movs	r3, #0
 80163e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80163ec:	685b      	ldr	r3, [r3, #4]
 80163ee:	78fa      	ldrb	r2, [r7, #3]
 80163f0:	4611      	mov	r1, r2
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	4798      	blx	r3
 80163f6:	4603      	mov	r3, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d001      	beq.n	8016400 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80163fc:	2303      	movs	r3, #3
 80163fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016400:	7bfb      	ldrb	r3, [r7, #15]
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b084      	sub	sp, #16
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
 8016412:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801641a:	6839      	ldr	r1, [r7, #0]
 801641c:	4618      	mov	r0, r3
 801641e:	f001 f906 	bl	801762e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2201      	movs	r2, #1
 8016426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016430:	461a      	mov	r2, r3
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801643e:	f003 031f 	and.w	r3, r3, #31
 8016442:	2b02      	cmp	r3, #2
 8016444:	d01a      	beq.n	801647c <USBD_LL_SetupStage+0x72>
 8016446:	2b02      	cmp	r3, #2
 8016448:	d822      	bhi.n	8016490 <USBD_LL_SetupStage+0x86>
 801644a:	2b00      	cmp	r3, #0
 801644c:	d002      	beq.n	8016454 <USBD_LL_SetupStage+0x4a>
 801644e:	2b01      	cmp	r3, #1
 8016450:	d00a      	beq.n	8016468 <USBD_LL_SetupStage+0x5e>
 8016452:	e01d      	b.n	8016490 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801645a:	4619      	mov	r1, r3
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f000 fb5d 	bl	8016b1c <USBD_StdDevReq>
 8016462:	4603      	mov	r3, r0
 8016464:	73fb      	strb	r3, [r7, #15]
      break;
 8016466:	e020      	b.n	80164aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801646e:	4619      	mov	r1, r3
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f000 fbc5 	bl	8016c00 <USBD_StdItfReq>
 8016476:	4603      	mov	r3, r0
 8016478:	73fb      	strb	r3, [r7, #15]
      break;
 801647a:	e016      	b.n	80164aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016482:	4619      	mov	r1, r3
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 fc27 	bl	8016cd8 <USBD_StdEPReq>
 801648a:	4603      	mov	r3, r0
 801648c:	73fb      	strb	r3, [r7, #15]
      break;
 801648e:	e00c      	b.n	80164aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016496:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801649a:	b2db      	uxtb	r3, r3
 801649c:	4619      	mov	r1, r3
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f005 fc1d 	bl	801bcde <USBD_LL_StallEP>
 80164a4:	4603      	mov	r3, r0
 80164a6:	73fb      	strb	r3, [r7, #15]
      break;
 80164a8:	bf00      	nop
  }

  return ret;
 80164aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3710      	adds	r7, #16
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b086      	sub	sp, #24
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	460b      	mov	r3, r1
 80164be:	607a      	str	r2, [r7, #4]
 80164c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80164c2:	2300      	movs	r3, #0
 80164c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80164c6:	7afb      	ldrb	r3, [r7, #11]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d16e      	bne.n	80165aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80164d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80164da:	2b03      	cmp	r3, #3
 80164dc:	f040 8098 	bne.w	8016610 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80164e0:	693b      	ldr	r3, [r7, #16]
 80164e2:	689a      	ldr	r2, [r3, #8]
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d913      	bls.n	8016514 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	689a      	ldr	r2, [r3, #8]
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	1ad2      	subs	r2, r2, r3
 80164f6:	693b      	ldr	r3, [r7, #16]
 80164f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	68da      	ldr	r2, [r3, #12]
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	689b      	ldr	r3, [r3, #8]
 8016502:	4293      	cmp	r3, r2
 8016504:	bf28      	it	cs
 8016506:	4613      	movcs	r3, r2
 8016508:	461a      	mov	r2, r3
 801650a:	6879      	ldr	r1, [r7, #4]
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f001 f965 	bl	80177dc <USBD_CtlContinueRx>
 8016512:	e07d      	b.n	8016610 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801651a:	f003 031f 	and.w	r3, r3, #31
 801651e:	2b02      	cmp	r3, #2
 8016520:	d014      	beq.n	801654c <USBD_LL_DataOutStage+0x98>
 8016522:	2b02      	cmp	r3, #2
 8016524:	d81d      	bhi.n	8016562 <USBD_LL_DataOutStage+0xae>
 8016526:	2b00      	cmp	r3, #0
 8016528:	d002      	beq.n	8016530 <USBD_LL_DataOutStage+0x7c>
 801652a:	2b01      	cmp	r3, #1
 801652c:	d003      	beq.n	8016536 <USBD_LL_DataOutStage+0x82>
 801652e:	e018      	b.n	8016562 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016530:	2300      	movs	r3, #0
 8016532:	75bb      	strb	r3, [r7, #22]
            break;
 8016534:	e018      	b.n	8016568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801653c:	b2db      	uxtb	r3, r3
 801653e:	4619      	mov	r1, r3
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f000 fa5e 	bl	8016a02 <USBD_CoreFindIF>
 8016546:	4603      	mov	r3, r0
 8016548:	75bb      	strb	r3, [r7, #22]
            break;
 801654a:	e00d      	b.n	8016568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016552:	b2db      	uxtb	r3, r3
 8016554:	4619      	mov	r1, r3
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f000 fa60 	bl	8016a1c <USBD_CoreFindEP>
 801655c:	4603      	mov	r3, r0
 801655e:	75bb      	strb	r3, [r7, #22]
            break;
 8016560:	e002      	b.n	8016568 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016562:	2300      	movs	r3, #0
 8016564:	75bb      	strb	r3, [r7, #22]
            break;
 8016566:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016568:	7dbb      	ldrb	r3, [r7, #22]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d119      	bne.n	80165a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016574:	b2db      	uxtb	r3, r3
 8016576:	2b03      	cmp	r3, #3
 8016578:	d113      	bne.n	80165a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801657a:	7dba      	ldrb	r2, [r7, #22]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	32ae      	adds	r2, #174	@ 0xae
 8016580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016584:	691b      	ldr	r3, [r3, #16]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d00b      	beq.n	80165a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801658a:	7dba      	ldrb	r2, [r7, #22]
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016592:	7dba      	ldrb	r2, [r7, #22]
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	32ae      	adds	r2, #174	@ 0xae
 8016598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801659c:	691b      	ldr	r3, [r3, #16]
 801659e:	68f8      	ldr	r0, [r7, #12]
 80165a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80165a2:	68f8      	ldr	r0, [r7, #12]
 80165a4:	f001 f92b 	bl	80177fe <USBD_CtlSendStatus>
 80165a8:	e032      	b.n	8016610 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80165aa:	7afb      	ldrb	r3, [r7, #11]
 80165ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	4619      	mov	r1, r3
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f000 fa31 	bl	8016a1c <USBD_CoreFindEP>
 80165ba:	4603      	mov	r3, r0
 80165bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165be:	7dbb      	ldrb	r3, [r7, #22]
 80165c0:	2bff      	cmp	r3, #255	@ 0xff
 80165c2:	d025      	beq.n	8016610 <USBD_LL_DataOutStage+0x15c>
 80165c4:	7dbb      	ldrb	r3, [r7, #22]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d122      	bne.n	8016610 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	2b03      	cmp	r3, #3
 80165d4:	d117      	bne.n	8016606 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80165d6:	7dba      	ldrb	r2, [r7, #22]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	32ae      	adds	r2, #174	@ 0xae
 80165dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165e0:	699b      	ldr	r3, [r3, #24]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d00f      	beq.n	8016606 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80165e6:	7dba      	ldrb	r2, [r7, #22]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80165ee:	7dba      	ldrb	r2, [r7, #22]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	32ae      	adds	r2, #174	@ 0xae
 80165f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f8:	699b      	ldr	r3, [r3, #24]
 80165fa:	7afa      	ldrb	r2, [r7, #11]
 80165fc:	4611      	mov	r1, r2
 80165fe:	68f8      	ldr	r0, [r7, #12]
 8016600:	4798      	blx	r3
 8016602:	4603      	mov	r3, r0
 8016604:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016606:	7dfb      	ldrb	r3, [r7, #23]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801660c:	7dfb      	ldrb	r3, [r7, #23]
 801660e:	e000      	b.n	8016612 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016610:	2300      	movs	r3, #0
}
 8016612:	4618      	mov	r0, r3
 8016614:	3718      	adds	r7, #24
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}

0801661a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801661a:	b580      	push	{r7, lr}
 801661c:	b086      	sub	sp, #24
 801661e:	af00      	add	r7, sp, #0
 8016620:	60f8      	str	r0, [r7, #12]
 8016622:	460b      	mov	r3, r1
 8016624:	607a      	str	r2, [r7, #4]
 8016626:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016628:	7afb      	ldrb	r3, [r7, #11]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d16f      	bne.n	801670e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	3314      	adds	r3, #20
 8016632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801663a:	2b02      	cmp	r3, #2
 801663c:	d15a      	bne.n	80166f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	689a      	ldr	r2, [r3, #8]
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	429a      	cmp	r2, r3
 8016648:	d914      	bls.n	8016674 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	689a      	ldr	r2, [r3, #8]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	1ad2      	subs	r2, r2, r3
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	689b      	ldr	r3, [r3, #8]
 801665c:	461a      	mov	r2, r3
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	f001 f8aa 	bl	80177ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016666:	2300      	movs	r3, #0
 8016668:	2200      	movs	r2, #0
 801666a:	2100      	movs	r1, #0
 801666c:	68f8      	ldr	r0, [r7, #12]
 801666e:	f005 fbe0 	bl	801be32 <USBD_LL_PrepareReceive>
 8016672:	e03f      	b.n	80166f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	68da      	ldr	r2, [r3, #12]
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	689b      	ldr	r3, [r3, #8]
 801667c:	429a      	cmp	r2, r3
 801667e:	d11c      	bne.n	80166ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	685a      	ldr	r2, [r3, #4]
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016688:	429a      	cmp	r2, r3
 801668a:	d316      	bcc.n	80166ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	685a      	ldr	r2, [r3, #4]
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016696:	429a      	cmp	r2, r3
 8016698:	d20f      	bcs.n	80166ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801669a:	2200      	movs	r2, #0
 801669c:	2100      	movs	r1, #0
 801669e:	68f8      	ldr	r0, [r7, #12]
 80166a0:	f001 f88b 	bl	80177ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2200      	movs	r2, #0
 80166a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80166ac:	2300      	movs	r3, #0
 80166ae:	2200      	movs	r2, #0
 80166b0:	2100      	movs	r1, #0
 80166b2:	68f8      	ldr	r0, [r7, #12]
 80166b4:	f005 fbbd 	bl	801be32 <USBD_LL_PrepareReceive>
 80166b8:	e01c      	b.n	80166f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b03      	cmp	r3, #3
 80166c4:	d10f      	bne.n	80166e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166cc:	68db      	ldr	r3, [r3, #12]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d009      	beq.n	80166e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2200      	movs	r2, #0
 80166d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	68f8      	ldr	r0, [r7, #12]
 80166e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80166e6:	2180      	movs	r1, #128	@ 0x80
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	f005 faf8 	bl	801bcde <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f001 f898 	bl	8017824 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d03a      	beq.n	8016774 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80166fe:	68f8      	ldr	r0, [r7, #12]
 8016700:	f7ff fe42 	bl	8016388 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	2200      	movs	r2, #0
 8016708:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801670c:	e032      	b.n	8016774 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801670e:	7afb      	ldrb	r3, [r7, #11]
 8016710:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016714:	b2db      	uxtb	r3, r3
 8016716:	4619      	mov	r1, r3
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f000 f97f 	bl	8016a1c <USBD_CoreFindEP>
 801671e:	4603      	mov	r3, r0
 8016720:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016722:	7dfb      	ldrb	r3, [r7, #23]
 8016724:	2bff      	cmp	r3, #255	@ 0xff
 8016726:	d025      	beq.n	8016774 <USBD_LL_DataInStage+0x15a>
 8016728:	7dfb      	ldrb	r3, [r7, #23]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d122      	bne.n	8016774 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2b03      	cmp	r3, #3
 8016738:	d11c      	bne.n	8016774 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801673a:	7dfa      	ldrb	r2, [r7, #23]
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	32ae      	adds	r2, #174	@ 0xae
 8016740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016744:	695b      	ldr	r3, [r3, #20]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d014      	beq.n	8016774 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801674a:	7dfa      	ldrb	r2, [r7, #23]
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016752:	7dfa      	ldrb	r2, [r7, #23]
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	32ae      	adds	r2, #174	@ 0xae
 8016758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801675c:	695b      	ldr	r3, [r3, #20]
 801675e:	7afa      	ldrb	r2, [r7, #11]
 8016760:	4611      	mov	r1, r2
 8016762:	68f8      	ldr	r0, [r7, #12]
 8016764:	4798      	blx	r3
 8016766:	4603      	mov	r3, r0
 8016768:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801676a:	7dbb      	ldrb	r3, [r7, #22]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016770:	7dbb      	ldrb	r3, [r7, #22]
 8016772:	e000      	b.n	8016776 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3718      	adds	r7, #24
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801677e:	b580      	push	{r7, lr}
 8016780:	b084      	sub	sp, #16
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016786:	2300      	movs	r3, #0
 8016788:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2201      	movs	r2, #1
 801678e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2200      	movs	r2, #0
 8016796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2200      	movs	r2, #0
 801679e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2200      	movs	r2, #0
 80167ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d014      	beq.n	80167e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00e      	beq.n	80167e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	687a      	ldr	r2, [r7, #4]
 80167d0:	6852      	ldr	r2, [r2, #4]
 80167d2:	b2d2      	uxtb	r2, r2
 80167d4:	4611      	mov	r1, r2
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	4798      	blx	r3
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d001      	beq.n	80167e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80167e0:	2303      	movs	r3, #3
 80167e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80167e4:	2340      	movs	r3, #64	@ 0x40
 80167e6:	2200      	movs	r2, #0
 80167e8:	2100      	movs	r1, #0
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f005 fa13 	bl	801bc16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2201      	movs	r2, #1
 80167f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2240      	movs	r2, #64	@ 0x40
 80167fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016800:	2340      	movs	r3, #64	@ 0x40
 8016802:	2200      	movs	r2, #0
 8016804:	2180      	movs	r1, #128	@ 0x80
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f005 fa05 	bl	801bc16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	2201      	movs	r2, #1
 8016810:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2240      	movs	r2, #64	@ 0x40
 8016816:	621a      	str	r2, [r3, #32]

  return ret;
 8016818:	7bfb      	ldrb	r3, [r7, #15]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016822:	b480      	push	{r7}
 8016824:	b083      	sub	sp, #12
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	460b      	mov	r3, r1
 801682c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	78fa      	ldrb	r2, [r7, #3]
 8016832:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016834:	2300      	movs	r3, #0
}
 8016836:	4618      	mov	r0, r3
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr

08016842 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016842:	b480      	push	{r7}
 8016844:	b083      	sub	sp, #12
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016850:	b2da      	uxtb	r2, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2204      	movs	r2, #4
 801685c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016860:	2300      	movs	r3, #0
}
 8016862:	4618      	mov	r0, r3
 8016864:	370c      	adds	r7, #12
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr

0801686e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801686e:	b480      	push	{r7}
 8016870:	b083      	sub	sp, #12
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801687c:	b2db      	uxtb	r3, r3
 801687e:	2b04      	cmp	r3, #4
 8016880:	d106      	bne.n	8016890 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016888:	b2da      	uxtb	r2, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016890:	2300      	movs	r3, #0
}
 8016892:	4618      	mov	r0, r3
 8016894:	370c      	adds	r7, #12
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr

0801689e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b082      	sub	sp, #8
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	2b03      	cmp	r3, #3
 80168b0:	d110      	bne.n	80168d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d00b      	beq.n	80168d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168c2:	69db      	ldr	r3, [r3, #28]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d005      	beq.n	80168d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168ce:	69db      	ldr	r3, [r3, #28]
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80168d4:	2300      	movs	r3, #0
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}

080168de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80168de:	b580      	push	{r7, lr}
 80168e0:	b082      	sub	sp, #8
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
 80168e6:	460b      	mov	r3, r1
 80168e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	32ae      	adds	r2, #174	@ 0xae
 80168f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d101      	bne.n	8016900 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80168fc:	2303      	movs	r3, #3
 80168fe:	e01c      	b.n	801693a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016906:	b2db      	uxtb	r3, r3
 8016908:	2b03      	cmp	r3, #3
 801690a:	d115      	bne.n	8016938 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	32ae      	adds	r2, #174	@ 0xae
 8016916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801691a:	6a1b      	ldr	r3, [r3, #32]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d00b      	beq.n	8016938 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	32ae      	adds	r2, #174	@ 0xae
 801692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801692e:	6a1b      	ldr	r3, [r3, #32]
 8016930:	78fa      	ldrb	r2, [r7, #3]
 8016932:	4611      	mov	r1, r2
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}

08016942 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016942:	b580      	push	{r7, lr}
 8016944:	b082      	sub	sp, #8
 8016946:	af00      	add	r7, sp, #0
 8016948:	6078      	str	r0, [r7, #4]
 801694a:	460b      	mov	r3, r1
 801694c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	32ae      	adds	r2, #174	@ 0xae
 8016958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d101      	bne.n	8016964 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016960:	2303      	movs	r3, #3
 8016962:	e01c      	b.n	801699e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801696a:	b2db      	uxtb	r3, r3
 801696c:	2b03      	cmp	r3, #3
 801696e:	d115      	bne.n	801699c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	32ae      	adds	r2, #174	@ 0xae
 801697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00b      	beq.n	801699c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	32ae      	adds	r2, #174	@ 0xae
 801698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016994:	78fa      	ldrb	r2, [r7, #3]
 8016996:	4611      	mov	r1, r2
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801699c:	2300      	movs	r3, #0
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3708      	adds	r7, #8
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80169a6:	b480      	push	{r7}
 80169a8:	b083      	sub	sp, #12
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169ae:	2300      	movs	r3, #0
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	370c      	adds	r7, #12
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr

080169bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2201      	movs	r2, #1
 80169cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d00e      	beq.n	80169f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	6852      	ldr	r2, [r2, #4]
 80169e6:	b2d2      	uxtb	r2, r2
 80169e8:	4611      	mov	r1, r2
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	4798      	blx	r3
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d001      	beq.n	80169f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80169f4:	2303      	movs	r3, #3
 80169f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80169f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}

08016a02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a02:	b480      	push	{r7}
 8016a04:	b083      	sub	sp, #12
 8016a06:	af00      	add	r7, sp, #0
 8016a08:	6078      	str	r0, [r7, #4]
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	460b      	mov	r3, r1
 8016a26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016a28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	370c      	adds	r7, #12
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a34:	4770      	bx	lr

08016a36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b086      	sub	sp, #24
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	6078      	str	r0, [r7, #4]
 8016a3e:	460b      	mov	r3, r1
 8016a40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	885b      	ldrh	r3, [r3, #2]
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	7812      	ldrb	r2, [r2, #0]
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d91f      	bls.n	8016a9c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016a62:	e013      	b.n	8016a8c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016a64:	f107 030a 	add.w	r3, r7, #10
 8016a68:	4619      	mov	r1, r3
 8016a6a:	6978      	ldr	r0, [r7, #20]
 8016a6c:	f000 f81b 	bl	8016aa6 <USBD_GetNextDesc>
 8016a70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	785b      	ldrb	r3, [r3, #1]
 8016a76:	2b05      	cmp	r3, #5
 8016a78:	d108      	bne.n	8016a8c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	789b      	ldrb	r3, [r3, #2]
 8016a82:	78fa      	ldrb	r2, [r7, #3]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d008      	beq.n	8016a9a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	885b      	ldrh	r3, [r3, #2]
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	897b      	ldrh	r3, [r7, #10]
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d8e5      	bhi.n	8016a64 <USBD_GetEpDesc+0x2e>
 8016a98:	e000      	b.n	8016a9c <USBD_GetEpDesc+0x66>
          break;
 8016a9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016a9c:	693b      	ldr	r3, [r7, #16]
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3718      	adds	r7, #24
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016aa6:	b480      	push	{r7}
 8016aa8:	b085      	sub	sp, #20
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	881b      	ldrh	r3, [r3, #0]
 8016ab8:	68fa      	ldr	r2, [r7, #12]
 8016aba:	7812      	ldrb	r2, [r2, #0]
 8016abc:	4413      	add	r3, r2
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	4413      	add	r3, r2
 8016ace:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016ad0:	68fb      	ldr	r3, [r7, #12]
}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3714      	adds	r7, #20
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016adc:	4770      	bx	lr

08016ade <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016ade:	b480      	push	{r7}
 8016ae0:	b087      	sub	sp, #28
 8016ae2:	af00      	add	r7, sp, #0
 8016ae4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016aea:	697b      	ldr	r3, [r7, #20]
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	3301      	adds	r3, #1
 8016af4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	781b      	ldrb	r3, [r3, #0]
 8016afa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016afc:	8a3b      	ldrh	r3, [r7, #16]
 8016afe:	021b      	lsls	r3, r3, #8
 8016b00:	b21a      	sxth	r2, r3
 8016b02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b06:	4313      	orrs	r3, r2
 8016b08:	b21b      	sxth	r3, r3
 8016b0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016b0c:	89fb      	ldrh	r3, [r7, #14]
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	371c      	adds	r7, #28
 8016b12:	46bd      	mov	sp, r7
 8016b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b18:	4770      	bx	lr
	...

08016b1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b084      	sub	sp, #16
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b32:	2b40      	cmp	r3, #64	@ 0x40
 8016b34:	d005      	beq.n	8016b42 <USBD_StdDevReq+0x26>
 8016b36:	2b40      	cmp	r3, #64	@ 0x40
 8016b38:	d857      	bhi.n	8016bea <USBD_StdDevReq+0xce>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d00f      	beq.n	8016b5e <USBD_StdDevReq+0x42>
 8016b3e:	2b20      	cmp	r3, #32
 8016b40:	d153      	bne.n	8016bea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	32ae      	adds	r2, #174	@ 0xae
 8016b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b50:	689b      	ldr	r3, [r3, #8]
 8016b52:	6839      	ldr	r1, [r7, #0]
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	4798      	blx	r3
 8016b58:	4603      	mov	r3, r0
 8016b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8016b5c:	e04a      	b.n	8016bf4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	785b      	ldrb	r3, [r3, #1]
 8016b62:	2b09      	cmp	r3, #9
 8016b64:	d83b      	bhi.n	8016bde <USBD_StdDevReq+0xc2>
 8016b66:	a201      	add	r2, pc, #4	@ (adr r2, 8016b6c <USBD_StdDevReq+0x50>)
 8016b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6c:	08016bc1 	.word	0x08016bc1
 8016b70:	08016bd5 	.word	0x08016bd5
 8016b74:	08016bdf 	.word	0x08016bdf
 8016b78:	08016bcb 	.word	0x08016bcb
 8016b7c:	08016bdf 	.word	0x08016bdf
 8016b80:	08016b9f 	.word	0x08016b9f
 8016b84:	08016b95 	.word	0x08016b95
 8016b88:	08016bdf 	.word	0x08016bdf
 8016b8c:	08016bb7 	.word	0x08016bb7
 8016b90:	08016ba9 	.word	0x08016ba9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016b94:	6839      	ldr	r1, [r7, #0]
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f000 fa3c 	bl	8017014 <USBD_GetDescriptor>
          break;
 8016b9c:	e024      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016b9e:	6839      	ldr	r1, [r7, #0]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f000 fba1 	bl	80172e8 <USBD_SetAddress>
          break;
 8016ba6:	e01f      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 fbe0 	bl	8017370 <USBD_SetConfig>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	73fb      	strb	r3, [r7, #15]
          break;
 8016bb4:	e018      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016bb6:	6839      	ldr	r1, [r7, #0]
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f000 fc83 	bl	80174c4 <USBD_GetConfig>
          break;
 8016bbe:	e013      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016bc0:	6839      	ldr	r1, [r7, #0]
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f000 fcb4 	bl	8017530 <USBD_GetStatus>
          break;
 8016bc8:	e00e      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016bca:	6839      	ldr	r1, [r7, #0]
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f000 fce3 	bl	8017598 <USBD_SetFeature>
          break;
 8016bd2:	e009      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016bd4:	6839      	ldr	r1, [r7, #0]
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fd07 	bl	80175ea <USBD_ClrFeature>
          break;
 8016bdc:	e004      	b.n	8016be8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016bde:	6839      	ldr	r1, [r7, #0]
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f000 fd5e 	bl	80176a2 <USBD_CtlError>
          break;
 8016be6:	bf00      	nop
      }
      break;
 8016be8:	e004      	b.n	8016bf4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 fd58 	bl	80176a2 <USBD_CtlError>
      break;
 8016bf2:	bf00      	nop
  }

  return ret;
 8016bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop

08016c00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c16:	2b40      	cmp	r3, #64	@ 0x40
 8016c18:	d005      	beq.n	8016c26 <USBD_StdItfReq+0x26>
 8016c1a:	2b40      	cmp	r3, #64	@ 0x40
 8016c1c:	d852      	bhi.n	8016cc4 <USBD_StdItfReq+0xc4>
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d001      	beq.n	8016c26 <USBD_StdItfReq+0x26>
 8016c22:	2b20      	cmp	r3, #32
 8016c24:	d14e      	bne.n	8016cc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	2b02      	cmp	r3, #2
 8016c32:	d840      	bhi.n	8016cb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	889b      	ldrh	r3, [r3, #4]
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b01      	cmp	r3, #1
 8016c3c:	d836      	bhi.n	8016cac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	889b      	ldrh	r3, [r3, #4]
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	4619      	mov	r1, r3
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f7ff fedb 	bl	8016a02 <USBD_CoreFindIF>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c50:	7bbb      	ldrb	r3, [r7, #14]
 8016c52:	2bff      	cmp	r3, #255	@ 0xff
 8016c54:	d01d      	beq.n	8016c92 <USBD_StdItfReq+0x92>
 8016c56:	7bbb      	ldrb	r3, [r7, #14]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d11a      	bne.n	8016c92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016c5c:	7bba      	ldrb	r2, [r7, #14]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	32ae      	adds	r2, #174	@ 0xae
 8016c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c66:	689b      	ldr	r3, [r3, #8]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d00f      	beq.n	8016c8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016c6c:	7bba      	ldrb	r2, [r7, #14]
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016c74:	7bba      	ldrb	r2, [r7, #14]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	32ae      	adds	r2, #174	@ 0xae
 8016c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c7e:	689b      	ldr	r3, [r3, #8]
 8016c80:	6839      	ldr	r1, [r7, #0]
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	4798      	blx	r3
 8016c86:	4603      	mov	r3, r0
 8016c88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016c8a:	e004      	b.n	8016c96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016c8c:	2303      	movs	r3, #3
 8016c8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016c90:	e001      	b.n	8016c96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016c92:	2303      	movs	r3, #3
 8016c94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	88db      	ldrh	r3, [r3, #6]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d110      	bne.n	8016cc0 <USBD_StdItfReq+0xc0>
 8016c9e:	7bfb      	ldrb	r3, [r7, #15]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d10d      	bne.n	8016cc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f000 fdaa 	bl	80177fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016caa:	e009      	b.n	8016cc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016cac:	6839      	ldr	r1, [r7, #0]
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	f000 fcf7 	bl	80176a2 <USBD_CtlError>
          break;
 8016cb4:	e004      	b.n	8016cc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016cb6:	6839      	ldr	r1, [r7, #0]
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f000 fcf2 	bl	80176a2 <USBD_CtlError>
          break;
 8016cbe:	e000      	b.n	8016cc2 <USBD_StdItfReq+0xc2>
          break;
 8016cc0:	bf00      	nop
      }
      break;
 8016cc2:	e004      	b.n	8016cce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016cc4:	6839      	ldr	r1, [r7, #0]
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f000 fceb 	bl	80176a2 <USBD_CtlError>
      break;
 8016ccc:	bf00      	nop
  }

  return ret;
 8016cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3710      	adds	r7, #16
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	889b      	ldrh	r3, [r3, #4]
 8016cea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016cf4:	2b40      	cmp	r3, #64	@ 0x40
 8016cf6:	d007      	beq.n	8016d08 <USBD_StdEPReq+0x30>
 8016cf8:	2b40      	cmp	r3, #64	@ 0x40
 8016cfa:	f200 817f 	bhi.w	8016ffc <USBD_StdEPReq+0x324>
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d02a      	beq.n	8016d58 <USBD_StdEPReq+0x80>
 8016d02:	2b20      	cmp	r3, #32
 8016d04:	f040 817a 	bne.w	8016ffc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016d08:	7bbb      	ldrb	r3, [r7, #14]
 8016d0a:	4619      	mov	r1, r3
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f7ff fe85 	bl	8016a1c <USBD_CoreFindEP>
 8016d12:	4603      	mov	r3, r0
 8016d14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d16:	7b7b      	ldrb	r3, [r7, #13]
 8016d18:	2bff      	cmp	r3, #255	@ 0xff
 8016d1a:	f000 8174 	beq.w	8017006 <USBD_StdEPReq+0x32e>
 8016d1e:	7b7b      	ldrb	r3, [r7, #13]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f040 8170 	bne.w	8017006 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016d26:	7b7a      	ldrb	r2, [r7, #13]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016d2e:	7b7a      	ldrb	r2, [r7, #13]
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	32ae      	adds	r2, #174	@ 0xae
 8016d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d38:	689b      	ldr	r3, [r3, #8]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	f000 8163 	beq.w	8017006 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016d40:	7b7a      	ldrb	r2, [r7, #13]
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	32ae      	adds	r2, #174	@ 0xae
 8016d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d4a:	689b      	ldr	r3, [r3, #8]
 8016d4c:	6839      	ldr	r1, [r7, #0]
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	4798      	blx	r3
 8016d52:	4603      	mov	r3, r0
 8016d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016d56:	e156      	b.n	8017006 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	785b      	ldrb	r3, [r3, #1]
 8016d5c:	2b03      	cmp	r3, #3
 8016d5e:	d008      	beq.n	8016d72 <USBD_StdEPReq+0x9a>
 8016d60:	2b03      	cmp	r3, #3
 8016d62:	f300 8145 	bgt.w	8016ff0 <USBD_StdEPReq+0x318>
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	f000 809b 	beq.w	8016ea2 <USBD_StdEPReq+0x1ca>
 8016d6c:	2b01      	cmp	r3, #1
 8016d6e:	d03c      	beq.n	8016dea <USBD_StdEPReq+0x112>
 8016d70:	e13e      	b.n	8016ff0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	2b02      	cmp	r3, #2
 8016d7c:	d002      	beq.n	8016d84 <USBD_StdEPReq+0xac>
 8016d7e:	2b03      	cmp	r3, #3
 8016d80:	d016      	beq.n	8016db0 <USBD_StdEPReq+0xd8>
 8016d82:	e02c      	b.n	8016dde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d84:	7bbb      	ldrb	r3, [r7, #14]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d00d      	beq.n	8016da6 <USBD_StdEPReq+0xce>
 8016d8a:	7bbb      	ldrb	r3, [r7, #14]
 8016d8c:	2b80      	cmp	r3, #128	@ 0x80
 8016d8e:	d00a      	beq.n	8016da6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016d90:	7bbb      	ldrb	r3, [r7, #14]
 8016d92:	4619      	mov	r1, r3
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f004 ffa2 	bl	801bcde <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d9a:	2180      	movs	r1, #128	@ 0x80
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f004 ff9e 	bl	801bcde <USBD_LL_StallEP>
 8016da2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016da4:	e020      	b.n	8016de8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 fc7a 	bl	80176a2 <USBD_CtlError>
              break;
 8016dae:	e01b      	b.n	8016de8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	885b      	ldrh	r3, [r3, #2]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d10e      	bne.n	8016dd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d00b      	beq.n	8016dd6 <USBD_StdEPReq+0xfe>
 8016dbe:	7bbb      	ldrb	r3, [r7, #14]
 8016dc0:	2b80      	cmp	r3, #128	@ 0x80
 8016dc2:	d008      	beq.n	8016dd6 <USBD_StdEPReq+0xfe>
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	88db      	ldrh	r3, [r3, #6]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d104      	bne.n	8016dd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016dcc:	7bbb      	ldrb	r3, [r7, #14]
 8016dce:	4619      	mov	r1, r3
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f004 ff84 	bl	801bcde <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 fd11 	bl	80177fe <USBD_CtlSendStatus>

              break;
 8016ddc:	e004      	b.n	8016de8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016dde:	6839      	ldr	r1, [r7, #0]
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f000 fc5e 	bl	80176a2 <USBD_CtlError>
              break;
 8016de6:	bf00      	nop
          }
          break;
 8016de8:	e107      	b.n	8016ffa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016df0:	b2db      	uxtb	r3, r3
 8016df2:	2b02      	cmp	r3, #2
 8016df4:	d002      	beq.n	8016dfc <USBD_StdEPReq+0x124>
 8016df6:	2b03      	cmp	r3, #3
 8016df8:	d016      	beq.n	8016e28 <USBD_StdEPReq+0x150>
 8016dfa:	e04b      	b.n	8016e94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d00d      	beq.n	8016e1e <USBD_StdEPReq+0x146>
 8016e02:	7bbb      	ldrb	r3, [r7, #14]
 8016e04:	2b80      	cmp	r3, #128	@ 0x80
 8016e06:	d00a      	beq.n	8016e1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e08:	7bbb      	ldrb	r3, [r7, #14]
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f004 ff66 	bl	801bcde <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e12:	2180      	movs	r1, #128	@ 0x80
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f004 ff62 	bl	801bcde <USBD_LL_StallEP>
 8016e1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016e1c:	e040      	b.n	8016ea0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016e1e:	6839      	ldr	r1, [r7, #0]
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 fc3e 	bl	80176a2 <USBD_CtlError>
              break;
 8016e26:	e03b      	b.n	8016ea0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	885b      	ldrh	r3, [r3, #2]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d136      	bne.n	8016e9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016e30:	7bbb      	ldrb	r3, [r7, #14]
 8016e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d004      	beq.n	8016e44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016e3a:	7bbb      	ldrb	r3, [r7, #14]
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	f004 ff6c 	bl	801bd1c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f000 fcda 	bl	80177fe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e4a:	7bbb      	ldrb	r3, [r7, #14]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f7ff fde4 	bl	8016a1c <USBD_CoreFindEP>
 8016e54:	4603      	mov	r3, r0
 8016e56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e58:	7b7b      	ldrb	r3, [r7, #13]
 8016e5a:	2bff      	cmp	r3, #255	@ 0xff
 8016e5c:	d01f      	beq.n	8016e9e <USBD_StdEPReq+0x1c6>
 8016e5e:	7b7b      	ldrb	r3, [r7, #13]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d11c      	bne.n	8016e9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016e64:	7b7a      	ldrb	r2, [r7, #13]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016e6c:	7b7a      	ldrb	r2, [r7, #13]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	32ae      	adds	r2, #174	@ 0xae
 8016e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e76:	689b      	ldr	r3, [r3, #8]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d010      	beq.n	8016e9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016e7c:	7b7a      	ldrb	r2, [r7, #13]
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	32ae      	adds	r2, #174	@ 0xae
 8016e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e86:	689b      	ldr	r3, [r3, #8]
 8016e88:	6839      	ldr	r1, [r7, #0]
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	4798      	blx	r3
 8016e8e:	4603      	mov	r3, r0
 8016e90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016e92:	e004      	b.n	8016e9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016e94:	6839      	ldr	r1, [r7, #0]
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 fc03 	bl	80176a2 <USBD_CtlError>
              break;
 8016e9c:	e000      	b.n	8016ea0 <USBD_StdEPReq+0x1c8>
              break;
 8016e9e:	bf00      	nop
          }
          break;
 8016ea0:	e0ab      	b.n	8016ffa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ea8:	b2db      	uxtb	r3, r3
 8016eaa:	2b02      	cmp	r3, #2
 8016eac:	d002      	beq.n	8016eb4 <USBD_StdEPReq+0x1dc>
 8016eae:	2b03      	cmp	r3, #3
 8016eb0:	d032      	beq.n	8016f18 <USBD_StdEPReq+0x240>
 8016eb2:	e097      	b.n	8016fe4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016eb4:	7bbb      	ldrb	r3, [r7, #14]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d007      	beq.n	8016eca <USBD_StdEPReq+0x1f2>
 8016eba:	7bbb      	ldrb	r3, [r7, #14]
 8016ebc:	2b80      	cmp	r3, #128	@ 0x80
 8016ebe:	d004      	beq.n	8016eca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ec0:	6839      	ldr	r1, [r7, #0]
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 fbed 	bl	80176a2 <USBD_CtlError>
                break;
 8016ec8:	e091      	b.n	8016fee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016eca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	da0b      	bge.n	8016eea <USBD_StdEPReq+0x212>
 8016ed2:	7bbb      	ldrb	r3, [r7, #14]
 8016ed4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016ed8:	4613      	mov	r3, r2
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	4413      	add	r3, r2
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	3310      	adds	r3, #16
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	e00b      	b.n	8016f02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016eea:	7bbb      	ldrb	r3, [r7, #14]
 8016eec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	4413      	add	r3, r2
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	4413      	add	r3, r2
 8016f00:	3304      	adds	r3, #4
 8016f02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	2200      	movs	r2, #0
 8016f08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	2202      	movs	r2, #2
 8016f0e:	4619      	mov	r1, r3
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f000 fc37 	bl	8017784 <USBD_CtlSendData>
              break;
 8016f16:	e06a      	b.n	8016fee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	da11      	bge.n	8016f44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016f20:	7bbb      	ldrb	r3, [r7, #14]
 8016f22:	f003 020f 	and.w	r2, r3, #15
 8016f26:	6879      	ldr	r1, [r7, #4]
 8016f28:	4613      	mov	r3, r2
 8016f2a:	009b      	lsls	r3, r3, #2
 8016f2c:	4413      	add	r3, r2
 8016f2e:	009b      	lsls	r3, r3, #2
 8016f30:	440b      	add	r3, r1
 8016f32:	3324      	adds	r3, #36	@ 0x24
 8016f34:	881b      	ldrh	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d117      	bne.n	8016f6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016f3a:	6839      	ldr	r1, [r7, #0]
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f000 fbb0 	bl	80176a2 <USBD_CtlError>
                  break;
 8016f42:	e054      	b.n	8016fee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016f44:	7bbb      	ldrb	r3, [r7, #14]
 8016f46:	f003 020f 	and.w	r2, r3, #15
 8016f4a:	6879      	ldr	r1, [r7, #4]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	4413      	add	r3, r2
 8016f52:	009b      	lsls	r3, r3, #2
 8016f54:	440b      	add	r3, r1
 8016f56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016f5a:	881b      	ldrh	r3, [r3, #0]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d104      	bne.n	8016f6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016f60:	6839      	ldr	r1, [r7, #0]
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f000 fb9d 	bl	80176a2 <USBD_CtlError>
                  break;
 8016f68:	e041      	b.n	8016fee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	da0b      	bge.n	8016f8a <USBD_StdEPReq+0x2b2>
 8016f72:	7bbb      	ldrb	r3, [r7, #14]
 8016f74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016f78:	4613      	mov	r3, r2
 8016f7a:	009b      	lsls	r3, r3, #2
 8016f7c:	4413      	add	r3, r2
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	3310      	adds	r3, #16
 8016f82:	687a      	ldr	r2, [r7, #4]
 8016f84:	4413      	add	r3, r2
 8016f86:	3304      	adds	r3, #4
 8016f88:	e00b      	b.n	8016fa2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016f8a:	7bbb      	ldrb	r3, [r7, #14]
 8016f8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f90:	4613      	mov	r3, r2
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	4413      	add	r3, r2
 8016f96:	009b      	lsls	r3, r3, #2
 8016f98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	4413      	add	r3, r2
 8016fa0:	3304      	adds	r3, #4
 8016fa2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016fa4:	7bbb      	ldrb	r3, [r7, #14]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d002      	beq.n	8016fb0 <USBD_StdEPReq+0x2d8>
 8016faa:	7bbb      	ldrb	r3, [r7, #14]
 8016fac:	2b80      	cmp	r3, #128	@ 0x80
 8016fae:	d103      	bne.n	8016fb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	601a      	str	r2, [r3, #0]
 8016fb6:	e00e      	b.n	8016fd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016fb8:	7bbb      	ldrb	r3, [r7, #14]
 8016fba:	4619      	mov	r1, r3
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f004 fecc 	bl	801bd5a <USBD_LL_IsStallEP>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d003      	beq.n	8016fd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	2201      	movs	r2, #1
 8016fcc:	601a      	str	r2, [r3, #0]
 8016fce:	e002      	b.n	8016fd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	2202      	movs	r2, #2
 8016fda:	4619      	mov	r1, r3
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 fbd1 	bl	8017784 <USBD_CtlSendData>
              break;
 8016fe2:	e004      	b.n	8016fee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016fe4:	6839      	ldr	r1, [r7, #0]
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 fb5b 	bl	80176a2 <USBD_CtlError>
              break;
 8016fec:	bf00      	nop
          }
          break;
 8016fee:	e004      	b.n	8016ffa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016ff0:	6839      	ldr	r1, [r7, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 fb55 	bl	80176a2 <USBD_CtlError>
          break;
 8016ff8:	bf00      	nop
      }
      break;
 8016ffa:	e005      	b.n	8017008 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016ffc:	6839      	ldr	r1, [r7, #0]
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f000 fb4f 	bl	80176a2 <USBD_CtlError>
      break;
 8017004:	e000      	b.n	8017008 <USBD_StdEPReq+0x330>
      break;
 8017006:	bf00      	nop
  }

  return ret;
 8017008:	7bfb      	ldrb	r3, [r7, #15]
}
 801700a:	4618      	mov	r0, r3
 801700c:	3710      	adds	r7, #16
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}
	...

08017014 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801701e:	2300      	movs	r3, #0
 8017020:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017022:	2300      	movs	r3, #0
 8017024:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017026:	2300      	movs	r3, #0
 8017028:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	885b      	ldrh	r3, [r3, #2]
 801702e:	0a1b      	lsrs	r3, r3, #8
 8017030:	b29b      	uxth	r3, r3
 8017032:	3b01      	subs	r3, #1
 8017034:	2b06      	cmp	r3, #6
 8017036:	f200 8128 	bhi.w	801728a <USBD_GetDescriptor+0x276>
 801703a:	a201      	add	r2, pc, #4	@ (adr r2, 8017040 <USBD_GetDescriptor+0x2c>)
 801703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017040:	0801705d 	.word	0x0801705d
 8017044:	08017075 	.word	0x08017075
 8017048:	080170b5 	.word	0x080170b5
 801704c:	0801728b 	.word	0x0801728b
 8017050:	0801728b 	.word	0x0801728b
 8017054:	0801722b 	.word	0x0801722b
 8017058:	08017257 	.word	0x08017257
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	7c12      	ldrb	r2, [r2, #16]
 8017068:	f107 0108 	add.w	r1, r7, #8
 801706c:	4610      	mov	r0, r2
 801706e:	4798      	blx	r3
 8017070:	60f8      	str	r0, [r7, #12]
      break;
 8017072:	e112      	b.n	801729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	7c1b      	ldrb	r3, [r3, #16]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10d      	bne.n	8017098 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017084:	f107 0208 	add.w	r2, r7, #8
 8017088:	4610      	mov	r0, r2
 801708a:	4798      	blx	r3
 801708c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	3301      	adds	r3, #1
 8017092:	2202      	movs	r2, #2
 8017094:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017096:	e100      	b.n	801729a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170a0:	f107 0208 	add.w	r2, r7, #8
 80170a4:	4610      	mov	r0, r2
 80170a6:	4798      	blx	r3
 80170a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	3301      	adds	r3, #1
 80170ae:	2202      	movs	r2, #2
 80170b0:	701a      	strb	r2, [r3, #0]
      break;
 80170b2:	e0f2      	b.n	801729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	885b      	ldrh	r3, [r3, #2]
 80170b8:	b2db      	uxtb	r3, r3
 80170ba:	2b05      	cmp	r3, #5
 80170bc:	f200 80ac 	bhi.w	8017218 <USBD_GetDescriptor+0x204>
 80170c0:	a201      	add	r2, pc, #4	@ (adr r2, 80170c8 <USBD_GetDescriptor+0xb4>)
 80170c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c6:	bf00      	nop
 80170c8:	080170e1 	.word	0x080170e1
 80170cc:	08017115 	.word	0x08017115
 80170d0:	08017149 	.word	0x08017149
 80170d4:	0801717d 	.word	0x0801717d
 80170d8:	080171b1 	.word	0x080171b1
 80170dc:	080171e5 	.word	0x080171e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d00b      	beq.n	8017104 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	687a      	ldr	r2, [r7, #4]
 80170f6:	7c12      	ldrb	r2, [r2, #16]
 80170f8:	f107 0108 	add.w	r1, r7, #8
 80170fc:	4610      	mov	r0, r2
 80170fe:	4798      	blx	r3
 8017100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017102:	e091      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017104:	6839      	ldr	r1, [r7, #0]
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f000 facb 	bl	80176a2 <USBD_CtlError>
            err++;
 801710c:	7afb      	ldrb	r3, [r7, #11]
 801710e:	3301      	adds	r3, #1
 8017110:	72fb      	strb	r3, [r7, #11]
          break;
 8017112:	e089      	b.n	8017228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801711a:	689b      	ldr	r3, [r3, #8]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d00b      	beq.n	8017138 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017126:	689b      	ldr	r3, [r3, #8]
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	7c12      	ldrb	r2, [r2, #16]
 801712c:	f107 0108 	add.w	r1, r7, #8
 8017130:	4610      	mov	r0, r2
 8017132:	4798      	blx	r3
 8017134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017136:	e077      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017138:	6839      	ldr	r1, [r7, #0]
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f000 fab1 	bl	80176a2 <USBD_CtlError>
            err++;
 8017140:	7afb      	ldrb	r3, [r7, #11]
 8017142:	3301      	adds	r3, #1
 8017144:	72fb      	strb	r3, [r7, #11]
          break;
 8017146:	e06f      	b.n	8017228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00b      	beq.n	801716c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801715a:	68db      	ldr	r3, [r3, #12]
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	7c12      	ldrb	r2, [r2, #16]
 8017160:	f107 0108 	add.w	r1, r7, #8
 8017164:	4610      	mov	r0, r2
 8017166:	4798      	blx	r3
 8017168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801716a:	e05d      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801716c:	6839      	ldr	r1, [r7, #0]
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f000 fa97 	bl	80176a2 <USBD_CtlError>
            err++;
 8017174:	7afb      	ldrb	r3, [r7, #11]
 8017176:	3301      	adds	r3, #1
 8017178:	72fb      	strb	r3, [r7, #11]
          break;
 801717a:	e055      	b.n	8017228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017182:	691b      	ldr	r3, [r3, #16]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d00b      	beq.n	80171a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801718e:	691b      	ldr	r3, [r3, #16]
 8017190:	687a      	ldr	r2, [r7, #4]
 8017192:	7c12      	ldrb	r2, [r2, #16]
 8017194:	f107 0108 	add.w	r1, r7, #8
 8017198:	4610      	mov	r0, r2
 801719a:	4798      	blx	r3
 801719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801719e:	e043      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171a0:	6839      	ldr	r1, [r7, #0]
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 fa7d 	bl	80176a2 <USBD_CtlError>
            err++;
 80171a8:	7afb      	ldrb	r3, [r7, #11]
 80171aa:	3301      	adds	r3, #1
 80171ac:	72fb      	strb	r3, [r7, #11]
          break;
 80171ae:	e03b      	b.n	8017228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171b6:	695b      	ldr	r3, [r3, #20]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00b      	beq.n	80171d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171c2:	695b      	ldr	r3, [r3, #20]
 80171c4:	687a      	ldr	r2, [r7, #4]
 80171c6:	7c12      	ldrb	r2, [r2, #16]
 80171c8:	f107 0108 	add.w	r1, r7, #8
 80171cc:	4610      	mov	r0, r2
 80171ce:	4798      	blx	r3
 80171d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171d2:	e029      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171d4:	6839      	ldr	r1, [r7, #0]
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f000 fa63 	bl	80176a2 <USBD_CtlError>
            err++;
 80171dc:	7afb      	ldrb	r3, [r7, #11]
 80171de:	3301      	adds	r3, #1
 80171e0:	72fb      	strb	r3, [r7, #11]
          break;
 80171e2:	e021      	b.n	8017228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171ea:	699b      	ldr	r3, [r3, #24]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d00b      	beq.n	8017208 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171f6:	699b      	ldr	r3, [r3, #24]
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	7c12      	ldrb	r2, [r2, #16]
 80171fc:	f107 0108 	add.w	r1, r7, #8
 8017200:	4610      	mov	r0, r2
 8017202:	4798      	blx	r3
 8017204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017206:	e00f      	b.n	8017228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017208:	6839      	ldr	r1, [r7, #0]
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 fa49 	bl	80176a2 <USBD_CtlError>
            err++;
 8017210:	7afb      	ldrb	r3, [r7, #11]
 8017212:	3301      	adds	r3, #1
 8017214:	72fb      	strb	r3, [r7, #11]
          break;
 8017216:	e007      	b.n	8017228 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017218:	6839      	ldr	r1, [r7, #0]
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 fa41 	bl	80176a2 <USBD_CtlError>
          err++;
 8017220:	7afb      	ldrb	r3, [r7, #11]
 8017222:	3301      	adds	r3, #1
 8017224:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017226:	bf00      	nop
      }
      break;
 8017228:	e037      	b.n	801729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	7c1b      	ldrb	r3, [r3, #16]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d109      	bne.n	8017246 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801723a:	f107 0208 	add.w	r2, r7, #8
 801723e:	4610      	mov	r0, r2
 8017240:	4798      	blx	r3
 8017242:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017244:	e029      	b.n	801729a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017246:	6839      	ldr	r1, [r7, #0]
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 fa2a 	bl	80176a2 <USBD_CtlError>
        err++;
 801724e:	7afb      	ldrb	r3, [r7, #11]
 8017250:	3301      	adds	r3, #1
 8017252:	72fb      	strb	r3, [r7, #11]
      break;
 8017254:	e021      	b.n	801729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	7c1b      	ldrb	r3, [r3, #16]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d10d      	bne.n	801727a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017266:	f107 0208 	add.w	r2, r7, #8
 801726a:	4610      	mov	r0, r2
 801726c:	4798      	blx	r3
 801726e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	3301      	adds	r3, #1
 8017274:	2207      	movs	r2, #7
 8017276:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017278:	e00f      	b.n	801729a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801727a:	6839      	ldr	r1, [r7, #0]
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f000 fa10 	bl	80176a2 <USBD_CtlError>
        err++;
 8017282:	7afb      	ldrb	r3, [r7, #11]
 8017284:	3301      	adds	r3, #1
 8017286:	72fb      	strb	r3, [r7, #11]
      break;
 8017288:	e007      	b.n	801729a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801728a:	6839      	ldr	r1, [r7, #0]
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f000 fa08 	bl	80176a2 <USBD_CtlError>
      err++;
 8017292:	7afb      	ldrb	r3, [r7, #11]
 8017294:	3301      	adds	r3, #1
 8017296:	72fb      	strb	r3, [r7, #11]
      break;
 8017298:	bf00      	nop
  }

  if (err != 0U)
 801729a:	7afb      	ldrb	r3, [r7, #11]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d11e      	bne.n	80172de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	88db      	ldrh	r3, [r3, #6]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d016      	beq.n	80172d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80172a8:	893b      	ldrh	r3, [r7, #8]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d00e      	beq.n	80172cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	88da      	ldrh	r2, [r3, #6]
 80172b2:	893b      	ldrh	r3, [r7, #8]
 80172b4:	4293      	cmp	r3, r2
 80172b6:	bf28      	it	cs
 80172b8:	4613      	movcs	r3, r2
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80172be:	893b      	ldrh	r3, [r7, #8]
 80172c0:	461a      	mov	r2, r3
 80172c2:	68f9      	ldr	r1, [r7, #12]
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f000 fa5d 	bl	8017784 <USBD_CtlSendData>
 80172ca:	e009      	b.n	80172e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80172cc:	6839      	ldr	r1, [r7, #0]
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f000 f9e7 	bl	80176a2 <USBD_CtlError>
 80172d4:	e004      	b.n	80172e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f000 fa91 	bl	80177fe <USBD_CtlSendStatus>
 80172dc:	e000      	b.n	80172e0 <USBD_GetDescriptor+0x2cc>
    return;
 80172de:	bf00      	nop
  }
}
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop

080172e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	889b      	ldrh	r3, [r3, #4]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d131      	bne.n	801735e <USBD_SetAddress+0x76>
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	88db      	ldrh	r3, [r3, #6]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d12d      	bne.n	801735e <USBD_SetAddress+0x76>
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	885b      	ldrh	r3, [r3, #2]
 8017306:	2b7f      	cmp	r3, #127	@ 0x7f
 8017308:	d829      	bhi.n	801735e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	885b      	ldrh	r3, [r3, #2]
 801730e:	b2db      	uxtb	r3, r3
 8017310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801731c:	b2db      	uxtb	r3, r3
 801731e:	2b03      	cmp	r3, #3
 8017320:	d104      	bne.n	801732c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017322:	6839      	ldr	r1, [r7, #0]
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 f9bc 	bl	80176a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801732a:	e01d      	b.n	8017368 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	7bfa      	ldrb	r2, [r7, #15]
 8017330:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017334:	7bfb      	ldrb	r3, [r7, #15]
 8017336:	4619      	mov	r1, r3
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f004 fd3a 	bl	801bdb2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 fa5d 	bl	80177fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017344:	7bfb      	ldrb	r3, [r7, #15]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d004      	beq.n	8017354 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2202      	movs	r2, #2
 801734e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017352:	e009      	b.n	8017368 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2201      	movs	r2, #1
 8017358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801735c:	e004      	b.n	8017368 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801735e:	6839      	ldr	r1, [r7, #0]
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f000 f99e 	bl	80176a2 <USBD_CtlError>
  }
}
 8017366:	bf00      	nop
 8017368:	bf00      	nop
 801736a:	3710      	adds	r7, #16
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b084      	sub	sp, #16
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801737a:	2300      	movs	r3, #0
 801737c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	885b      	ldrh	r3, [r3, #2]
 8017382:	b2da      	uxtb	r2, r3
 8017384:	4b4e      	ldr	r3, [pc, #312]	@ (80174c0 <USBD_SetConfig+0x150>)
 8017386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017388:	4b4d      	ldr	r3, [pc, #308]	@ (80174c0 <USBD_SetConfig+0x150>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	2b01      	cmp	r3, #1
 801738e:	d905      	bls.n	801739c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017390:	6839      	ldr	r1, [r7, #0]
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f000 f985 	bl	80176a2 <USBD_CtlError>
    return USBD_FAIL;
 8017398:	2303      	movs	r3, #3
 801739a:	e08c      	b.n	80174b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	2b02      	cmp	r3, #2
 80173a6:	d002      	beq.n	80173ae <USBD_SetConfig+0x3e>
 80173a8:	2b03      	cmp	r3, #3
 80173aa:	d029      	beq.n	8017400 <USBD_SetConfig+0x90>
 80173ac:	e075      	b.n	801749a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80173ae:	4b44      	ldr	r3, [pc, #272]	@ (80174c0 <USBD_SetConfig+0x150>)
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d020      	beq.n	80173f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80173b6:	4b42      	ldr	r3, [pc, #264]	@ (80174c0 <USBD_SetConfig+0x150>)
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	461a      	mov	r2, r3
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80173c0:	4b3f      	ldr	r3, [pc, #252]	@ (80174c0 <USBD_SetConfig+0x150>)
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	4619      	mov	r1, r3
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f7fe ffe9 	bl	801639e <USBD_SetClassConfig>
 80173cc:	4603      	mov	r3, r0
 80173ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80173d0:	7bfb      	ldrb	r3, [r7, #15]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d008      	beq.n	80173e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80173d6:	6839      	ldr	r1, [r7, #0]
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f000 f962 	bl	80176a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2202      	movs	r2, #2
 80173e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80173e6:	e065      	b.n	80174b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f000 fa08 	bl	80177fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2203      	movs	r2, #3
 80173f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80173f6:	e05d      	b.n	80174b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f000 fa00 	bl	80177fe <USBD_CtlSendStatus>
      break;
 80173fe:	e059      	b.n	80174b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017400:	4b2f      	ldr	r3, [pc, #188]	@ (80174c0 <USBD_SetConfig+0x150>)
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d112      	bne.n	801742e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2202      	movs	r2, #2
 801740c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017410:	4b2b      	ldr	r3, [pc, #172]	@ (80174c0 <USBD_SetConfig+0x150>)
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	461a      	mov	r2, r3
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801741a:	4b29      	ldr	r3, [pc, #164]	@ (80174c0 <USBD_SetConfig+0x150>)
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	4619      	mov	r1, r3
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f7fe ffd8 	bl	80163d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f000 f9e9 	bl	80177fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801742c:	e042      	b.n	80174b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801742e:	4b24      	ldr	r3, [pc, #144]	@ (80174c0 <USBD_SetConfig+0x150>)
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	461a      	mov	r2, r3
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	429a      	cmp	r2, r3
 801743a:	d02a      	beq.n	8017492 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	b2db      	uxtb	r3, r3
 8017442:	4619      	mov	r1, r3
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f7fe ffc6 	bl	80163d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801744a:	4b1d      	ldr	r3, [pc, #116]	@ (80174c0 <USBD_SetConfig+0x150>)
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	461a      	mov	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017454:	4b1a      	ldr	r3, [pc, #104]	@ (80174c0 <USBD_SetConfig+0x150>)
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	4619      	mov	r1, r3
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f7fe ff9f 	bl	801639e <USBD_SetClassConfig>
 8017460:	4603      	mov	r3, r0
 8017462:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017464:	7bfb      	ldrb	r3, [r7, #15]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d00f      	beq.n	801748a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801746a:	6839      	ldr	r1, [r7, #0]
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 f918 	bl	80176a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	b2db      	uxtb	r3, r3
 8017478:	4619      	mov	r1, r3
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f7fe ffab 	bl	80163d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2202      	movs	r2, #2
 8017484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017488:	e014      	b.n	80174b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f000 f9b7 	bl	80177fe <USBD_CtlSendStatus>
      break;
 8017490:	e010      	b.n	80174b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f000 f9b3 	bl	80177fe <USBD_CtlSendStatus>
      break;
 8017498:	e00c      	b.n	80174b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801749a:	6839      	ldr	r1, [r7, #0]
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 f900 	bl	80176a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80174a2:	4b07      	ldr	r3, [pc, #28]	@ (80174c0 <USBD_SetConfig+0x150>)
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	4619      	mov	r1, r3
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f7fe ff94 	bl	80163d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80174ae:	2303      	movs	r3, #3
 80174b0:	73fb      	strb	r3, [r7, #15]
      break;
 80174b2:	bf00      	nop
  }

  return ret;
 80174b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	3710      	adds	r7, #16
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}
 80174be:	bf00      	nop
 80174c0:	20001b7a 	.word	0x20001b7a

080174c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	88db      	ldrh	r3, [r3, #6]
 80174d2:	2b01      	cmp	r3, #1
 80174d4:	d004      	beq.n	80174e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80174d6:	6839      	ldr	r1, [r7, #0]
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f000 f8e2 	bl	80176a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80174de:	e023      	b.n	8017528 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	2b02      	cmp	r3, #2
 80174ea:	dc02      	bgt.n	80174f2 <USBD_GetConfig+0x2e>
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	dc03      	bgt.n	80174f8 <USBD_GetConfig+0x34>
 80174f0:	e015      	b.n	801751e <USBD_GetConfig+0x5a>
 80174f2:	2b03      	cmp	r3, #3
 80174f4:	d00b      	beq.n	801750e <USBD_GetConfig+0x4a>
 80174f6:	e012      	b.n	801751e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2200      	movs	r2, #0
 80174fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	3308      	adds	r3, #8
 8017502:	2201      	movs	r2, #1
 8017504:	4619      	mov	r1, r3
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f000 f93c 	bl	8017784 <USBD_CtlSendData>
        break;
 801750c:	e00c      	b.n	8017528 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	3304      	adds	r3, #4
 8017512:	2201      	movs	r2, #1
 8017514:	4619      	mov	r1, r3
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f000 f934 	bl	8017784 <USBD_CtlSendData>
        break;
 801751c:	e004      	b.n	8017528 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801751e:	6839      	ldr	r1, [r7, #0]
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f000 f8be 	bl	80176a2 <USBD_CtlError>
        break;
 8017526:	bf00      	nop
}
 8017528:	bf00      	nop
 801752a:	3708      	adds	r7, #8
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}

08017530 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
 8017538:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017540:	b2db      	uxtb	r3, r3
 8017542:	3b01      	subs	r3, #1
 8017544:	2b02      	cmp	r3, #2
 8017546:	d81e      	bhi.n	8017586 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	88db      	ldrh	r3, [r3, #6]
 801754c:	2b02      	cmp	r3, #2
 801754e:	d004      	beq.n	801755a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f000 f8a5 	bl	80176a2 <USBD_CtlError>
        break;
 8017558:	e01a      	b.n	8017590 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	2201      	movs	r2, #1
 801755e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017566:	2b00      	cmp	r3, #0
 8017568:	d005      	beq.n	8017576 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	68db      	ldr	r3, [r3, #12]
 801756e:	f043 0202 	orr.w	r2, r3, #2
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	330c      	adds	r3, #12
 801757a:	2202      	movs	r2, #2
 801757c:	4619      	mov	r1, r3
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 f900 	bl	8017784 <USBD_CtlSendData>
      break;
 8017584:	e004      	b.n	8017590 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017586:	6839      	ldr	r1, [r7, #0]
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f000 f88a 	bl	80176a2 <USBD_CtlError>
      break;
 801758e:	bf00      	nop
  }
}
 8017590:	bf00      	nop
 8017592:	3708      	adds	r7, #8
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	885b      	ldrh	r3, [r3, #2]
 80175a6:	2b01      	cmp	r3, #1
 80175a8:	d107      	bne.n	80175ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	2201      	movs	r2, #1
 80175ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	f000 f923 	bl	80177fe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80175b8:	e013      	b.n	80175e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	885b      	ldrh	r3, [r3, #2]
 80175be:	2b02      	cmp	r3, #2
 80175c0:	d10b      	bne.n	80175da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	889b      	ldrh	r3, [r3, #4]
 80175c6:	0a1b      	lsrs	r3, r3, #8
 80175c8:	b29b      	uxth	r3, r3
 80175ca:	b2da      	uxtb	r2, r3
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f000 f913 	bl	80177fe <USBD_CtlSendStatus>
}
 80175d8:	e003      	b.n	80175e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80175da:	6839      	ldr	r1, [r7, #0]
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f000 f860 	bl	80176a2 <USBD_CtlError>
}
 80175e2:	bf00      	nop
 80175e4:	3708      	adds	r7, #8
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b082      	sub	sp, #8
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
 80175f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	3b01      	subs	r3, #1
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d80b      	bhi.n	801761a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	885b      	ldrh	r3, [r3, #2]
 8017606:	2b01      	cmp	r3, #1
 8017608:	d10c      	bne.n	8017624 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	2200      	movs	r2, #0
 801760e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f8f3 	bl	80177fe <USBD_CtlSendStatus>
      }
      break;
 8017618:	e004      	b.n	8017624 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801761a:	6839      	ldr	r1, [r7, #0]
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f000 f840 	bl	80176a2 <USBD_CtlError>
      break;
 8017622:	e000      	b.n	8017626 <USBD_ClrFeature+0x3c>
      break;
 8017624:	bf00      	nop
  }
}
 8017626:	bf00      	nop
 8017628:	3708      	adds	r7, #8
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}

0801762e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b084      	sub	sp, #16
 8017632:	af00      	add	r7, sp, #0
 8017634:	6078      	str	r0, [r7, #4]
 8017636:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	781a      	ldrb	r2, [r3, #0]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	3301      	adds	r3, #1
 8017648:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	781a      	ldrb	r2, [r3, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	3301      	adds	r3, #1
 8017656:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017658:	68f8      	ldr	r0, [r7, #12]
 801765a:	f7ff fa40 	bl	8016ade <SWAPBYTE>
 801765e:	4603      	mov	r3, r0
 8017660:	461a      	mov	r2, r3
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	3301      	adds	r3, #1
 801766a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	3301      	adds	r3, #1
 8017670:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017672:	68f8      	ldr	r0, [r7, #12]
 8017674:	f7ff fa33 	bl	8016ade <SWAPBYTE>
 8017678:	4603      	mov	r3, r0
 801767a:	461a      	mov	r2, r3
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	3301      	adds	r3, #1
 8017684:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	3301      	adds	r3, #1
 801768a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801768c:	68f8      	ldr	r0, [r7, #12]
 801768e:	f7ff fa26 	bl	8016ade <SWAPBYTE>
 8017692:	4603      	mov	r3, r0
 8017694:	461a      	mov	r2, r3
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	80da      	strh	r2, [r3, #6]
}
 801769a:	bf00      	nop
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}

080176a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176a2:	b580      	push	{r7, lr}
 80176a4:	b082      	sub	sp, #8
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
 80176aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80176ac:	2180      	movs	r1, #128	@ 0x80
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f004 fb15 	bl	801bcde <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80176b4:	2100      	movs	r1, #0
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f004 fb11 	bl	801bcde <USBD_LL_StallEP>
}
 80176bc:	bf00      	nop
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b086      	sub	sp, #24
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80176d0:	2300      	movs	r3, #0
 80176d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d036      	beq.n	8017748 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80176de:	6938      	ldr	r0, [r7, #16]
 80176e0:	f000 f836 	bl	8017750 <USBD_GetLen>
 80176e4:	4603      	mov	r3, r0
 80176e6:	3301      	adds	r3, #1
 80176e8:	b29b      	uxth	r3, r3
 80176ea:	005b      	lsls	r3, r3, #1
 80176ec:	b29a      	uxth	r2, r3
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80176f2:	7dfb      	ldrb	r3, [r7, #23]
 80176f4:	68ba      	ldr	r2, [r7, #8]
 80176f6:	4413      	add	r3, r2
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	7812      	ldrb	r2, [r2, #0]
 80176fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
 8017700:	3301      	adds	r3, #1
 8017702:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017704:	7dfb      	ldrb	r3, [r7, #23]
 8017706:	68ba      	ldr	r2, [r7, #8]
 8017708:	4413      	add	r3, r2
 801770a:	2203      	movs	r2, #3
 801770c:	701a      	strb	r2, [r3, #0]
  idx++;
 801770e:	7dfb      	ldrb	r3, [r7, #23]
 8017710:	3301      	adds	r3, #1
 8017712:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017714:	e013      	b.n	801773e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017716:	7dfb      	ldrb	r3, [r7, #23]
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	4413      	add	r3, r2
 801771c:	693a      	ldr	r2, [r7, #16]
 801771e:	7812      	ldrb	r2, [r2, #0]
 8017720:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	3301      	adds	r3, #1
 8017726:	613b      	str	r3, [r7, #16]
    idx++;
 8017728:	7dfb      	ldrb	r3, [r7, #23]
 801772a:	3301      	adds	r3, #1
 801772c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801772e:	7dfb      	ldrb	r3, [r7, #23]
 8017730:	68ba      	ldr	r2, [r7, #8]
 8017732:	4413      	add	r3, r2
 8017734:	2200      	movs	r2, #0
 8017736:	701a      	strb	r2, [r3, #0]
    idx++;
 8017738:	7dfb      	ldrb	r3, [r7, #23]
 801773a:	3301      	adds	r3, #1
 801773c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801773e:	693b      	ldr	r3, [r7, #16]
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d1e7      	bne.n	8017716 <USBD_GetString+0x52>
 8017746:	e000      	b.n	801774a <USBD_GetString+0x86>
    return;
 8017748:	bf00      	nop
  }
}
 801774a:	3718      	adds	r7, #24
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}

08017750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017750:	b480      	push	{r7}
 8017752:	b085      	sub	sp, #20
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017758:	2300      	movs	r3, #0
 801775a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017760:	e005      	b.n	801776e <USBD_GetLen+0x1e>
  {
    len++;
 8017762:	7bfb      	ldrb	r3, [r7, #15]
 8017764:	3301      	adds	r3, #1
 8017766:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	3301      	adds	r3, #1
 801776c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d1f5      	bne.n	8017762 <USBD_GetLen+0x12>
  }

  return len;
 8017776:	7bfb      	ldrb	r3, [r7, #15]
}
 8017778:	4618      	mov	r0, r3
 801777a:	3714      	adds	r7, #20
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	2202      	movs	r2, #2
 8017794:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	68ba      	ldr	r2, [r7, #8]
 80177a8:	2100      	movs	r1, #0
 80177aa:	68f8      	ldr	r0, [r7, #12]
 80177ac:	f004 fb20 	bl	801bdf0 <USBD_LL_Transmit>

  return USBD_OK;
 80177b0:	2300      	movs	r3, #0
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	3710      	adds	r7, #16
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}

080177ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80177ba:	b580      	push	{r7, lr}
 80177bc:	b084      	sub	sp, #16
 80177be:	af00      	add	r7, sp, #0
 80177c0:	60f8      	str	r0, [r7, #12]
 80177c2:	60b9      	str	r1, [r7, #8]
 80177c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	68ba      	ldr	r2, [r7, #8]
 80177ca:	2100      	movs	r1, #0
 80177cc:	68f8      	ldr	r0, [r7, #12]
 80177ce:	f004 fb0f 	bl	801bdf0 <USBD_LL_Transmit>

  return USBD_OK;
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}

080177dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	60b9      	str	r1, [r7, #8]
 80177e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	68ba      	ldr	r2, [r7, #8]
 80177ec:	2100      	movs	r1, #0
 80177ee:	68f8      	ldr	r0, [r7, #12]
 80177f0:	f004 fb1f 	bl	801be32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80177f4:	2300      	movs	r3, #0
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3710      	adds	r7, #16
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b082      	sub	sp, #8
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2204      	movs	r2, #4
 801780a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801780e:	2300      	movs	r3, #0
 8017810:	2200      	movs	r2, #0
 8017812:	2100      	movs	r1, #0
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f004 faeb 	bl	801bdf0 <USBD_LL_Transmit>

  return USBD_OK;
 801781a:	2300      	movs	r3, #0
}
 801781c:	4618      	mov	r0, r3
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}

08017824 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	2205      	movs	r2, #5
 8017830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017834:	2300      	movs	r3, #0
 8017836:	2200      	movs	r2, #0
 8017838:	2100      	movs	r1, #0
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	f004 faf9 	bl	801be32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017840:	2300      	movs	r3, #0
}
 8017842:	4618      	mov	r0, r3
 8017844:	3708      	adds	r7, #8
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
	...

0801784c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	4603      	mov	r3, r0
 8017854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017856:	79fb      	ldrb	r3, [r7, #7]
 8017858:	4a08      	ldr	r2, [pc, #32]	@ (801787c <disk_status+0x30>)
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	4413      	add	r3, r2
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	79fa      	ldrb	r2, [r7, #7]
 8017864:	4905      	ldr	r1, [pc, #20]	@ (801787c <disk_status+0x30>)
 8017866:	440a      	add	r2, r1
 8017868:	7a12      	ldrb	r2, [r2, #8]
 801786a:	4610      	mov	r0, r2
 801786c:	4798      	blx	r3
 801786e:	4603      	mov	r3, r0
 8017870:	73fb      	strb	r3, [r7, #15]
  return stat;
 8017872:	7bfb      	ldrb	r3, [r7, #15]
}
 8017874:	4618      	mov	r0, r3
 8017876:	3710      	adds	r7, #16
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	20001da4 	.word	0x20001da4

08017880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b084      	sub	sp, #16
 8017884:	af00      	add	r7, sp, #0
 8017886:	4603      	mov	r3, r0
 8017888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801788a:	2300      	movs	r3, #0
 801788c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801788e:	79fb      	ldrb	r3, [r7, #7]
 8017890:	4a0d      	ldr	r2, [pc, #52]	@ (80178c8 <disk_initialize+0x48>)
 8017892:	5cd3      	ldrb	r3, [r2, r3]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d111      	bne.n	80178bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017898:	79fb      	ldrb	r3, [r7, #7]
 801789a:	4a0b      	ldr	r2, [pc, #44]	@ (80178c8 <disk_initialize+0x48>)
 801789c:	2101      	movs	r1, #1
 801789e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80178a0:	79fb      	ldrb	r3, [r7, #7]
 80178a2:	4a09      	ldr	r2, [pc, #36]	@ (80178c8 <disk_initialize+0x48>)
 80178a4:	009b      	lsls	r3, r3, #2
 80178a6:	4413      	add	r3, r2
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	79fa      	ldrb	r2, [r7, #7]
 80178ae:	4906      	ldr	r1, [pc, #24]	@ (80178c8 <disk_initialize+0x48>)
 80178b0:	440a      	add	r2, r1
 80178b2:	7a12      	ldrb	r2, [r2, #8]
 80178b4:	4610      	mov	r0, r2
 80178b6:	4798      	blx	r3
 80178b8:	4603      	mov	r3, r0
 80178ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80178bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	3710      	adds	r7, #16
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}
 80178c6:	bf00      	nop
 80178c8:	20001da4 	.word	0x20001da4

080178cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80178cc:	b590      	push	{r4, r7, lr}
 80178ce:	b087      	sub	sp, #28
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60b9      	str	r1, [r7, #8]
 80178d4:	607a      	str	r2, [r7, #4]
 80178d6:	603b      	str	r3, [r7, #0]
 80178d8:	4603      	mov	r3, r0
 80178da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80178dc:	7bfb      	ldrb	r3, [r7, #15]
 80178de:	4a0a      	ldr	r2, [pc, #40]	@ (8017908 <disk_read+0x3c>)
 80178e0:	009b      	lsls	r3, r3, #2
 80178e2:	4413      	add	r3, r2
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	689c      	ldr	r4, [r3, #8]
 80178e8:	7bfb      	ldrb	r3, [r7, #15]
 80178ea:	4a07      	ldr	r2, [pc, #28]	@ (8017908 <disk_read+0x3c>)
 80178ec:	4413      	add	r3, r2
 80178ee:	7a18      	ldrb	r0, [r3, #8]
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	68b9      	ldr	r1, [r7, #8]
 80178f6:	47a0      	blx	r4
 80178f8:	4603      	mov	r3, r0
 80178fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80178fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	371c      	adds	r7, #28
 8017902:	46bd      	mov	sp, r7
 8017904:	bd90      	pop	{r4, r7, pc}
 8017906:	bf00      	nop
 8017908:	20001da4 	.word	0x20001da4

0801790c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801790c:	b590      	push	{r4, r7, lr}
 801790e:	b087      	sub	sp, #28
 8017910:	af00      	add	r7, sp, #0
 8017912:	60b9      	str	r1, [r7, #8]
 8017914:	607a      	str	r2, [r7, #4]
 8017916:	603b      	str	r3, [r7, #0]
 8017918:	4603      	mov	r3, r0
 801791a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801791c:	7bfb      	ldrb	r3, [r7, #15]
 801791e:	4a0a      	ldr	r2, [pc, #40]	@ (8017948 <disk_write+0x3c>)
 8017920:	009b      	lsls	r3, r3, #2
 8017922:	4413      	add	r3, r2
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	68dc      	ldr	r4, [r3, #12]
 8017928:	7bfb      	ldrb	r3, [r7, #15]
 801792a:	4a07      	ldr	r2, [pc, #28]	@ (8017948 <disk_write+0x3c>)
 801792c:	4413      	add	r3, r2
 801792e:	7a18      	ldrb	r0, [r3, #8]
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	687a      	ldr	r2, [r7, #4]
 8017934:	68b9      	ldr	r1, [r7, #8]
 8017936:	47a0      	blx	r4
 8017938:	4603      	mov	r3, r0
 801793a:	75fb      	strb	r3, [r7, #23]
  return res;
 801793c:	7dfb      	ldrb	r3, [r7, #23]
}
 801793e:	4618      	mov	r0, r3
 8017940:	371c      	adds	r7, #28
 8017942:	46bd      	mov	sp, r7
 8017944:	bd90      	pop	{r4, r7, pc}
 8017946:	bf00      	nop
 8017948:	20001da4 	.word	0x20001da4

0801794c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	4603      	mov	r3, r0
 8017954:	603a      	str	r2, [r7, #0]
 8017956:	71fb      	strb	r3, [r7, #7]
 8017958:	460b      	mov	r3, r1
 801795a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801795c:	79fb      	ldrb	r3, [r7, #7]
 801795e:	4a09      	ldr	r2, [pc, #36]	@ (8017984 <disk_ioctl+0x38>)
 8017960:	009b      	lsls	r3, r3, #2
 8017962:	4413      	add	r3, r2
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	691b      	ldr	r3, [r3, #16]
 8017968:	79fa      	ldrb	r2, [r7, #7]
 801796a:	4906      	ldr	r1, [pc, #24]	@ (8017984 <disk_ioctl+0x38>)
 801796c:	440a      	add	r2, r1
 801796e:	7a10      	ldrb	r0, [r2, #8]
 8017970:	79b9      	ldrb	r1, [r7, #6]
 8017972:	683a      	ldr	r2, [r7, #0]
 8017974:	4798      	blx	r3
 8017976:	4603      	mov	r3, r0
 8017978:	73fb      	strb	r3, [r7, #15]
  return res;
 801797a:	7bfb      	ldrb	r3, [r7, #15]
}
 801797c:	4618      	mov	r0, r3
 801797e:	3710      	adds	r7, #16
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	20001da4 	.word	0x20001da4

08017988 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017988:	b480      	push	{r7}
 801798a:	b085      	sub	sp, #20
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	3301      	adds	r3, #1
 8017994:	781b      	ldrb	r3, [r3, #0]
 8017996:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017998:	89fb      	ldrh	r3, [r7, #14]
 801799a:	021b      	lsls	r3, r3, #8
 801799c:	b21a      	sxth	r2, r3
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	b21b      	sxth	r3, r3
 80179a4:	4313      	orrs	r3, r2
 80179a6:	b21b      	sxth	r3, r3
 80179a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80179aa:	89fb      	ldrh	r3, [r7, #14]
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	3714      	adds	r7, #20
 80179b0:	46bd      	mov	sp, r7
 80179b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b6:	4770      	bx	lr

080179b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80179b8:	b480      	push	{r7}
 80179ba:	b085      	sub	sp, #20
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	3303      	adds	r3, #3
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	021b      	lsls	r3, r3, #8
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	3202      	adds	r2, #2
 80179d0:	7812      	ldrb	r2, [r2, #0]
 80179d2:	4313      	orrs	r3, r2
 80179d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	021b      	lsls	r3, r3, #8
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	3201      	adds	r2, #1
 80179de:	7812      	ldrb	r2, [r2, #0]
 80179e0:	4313      	orrs	r3, r2
 80179e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	021b      	lsls	r3, r3, #8
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	7812      	ldrb	r2, [r2, #0]
 80179ec:	4313      	orrs	r3, r2
 80179ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80179f0:	68fb      	ldr	r3, [r7, #12]
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3714      	adds	r7, #20
 80179f6:	46bd      	mov	sp, r7
 80179f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fc:	4770      	bx	lr

080179fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80179fe:	b480      	push	{r7}
 8017a00:	b083      	sub	sp, #12
 8017a02:	af00      	add	r7, sp, #0
 8017a04:	6078      	str	r0, [r7, #4]
 8017a06:	460b      	mov	r3, r1
 8017a08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	1c5a      	adds	r2, r3, #1
 8017a0e:	607a      	str	r2, [r7, #4]
 8017a10:	887a      	ldrh	r2, [r7, #2]
 8017a12:	b2d2      	uxtb	r2, r2
 8017a14:	701a      	strb	r2, [r3, #0]
 8017a16:	887b      	ldrh	r3, [r7, #2]
 8017a18:	0a1b      	lsrs	r3, r3, #8
 8017a1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	1c5a      	adds	r2, r3, #1
 8017a20:	607a      	str	r2, [r7, #4]
 8017a22:	887a      	ldrh	r2, [r7, #2]
 8017a24:	b2d2      	uxtb	r2, r2
 8017a26:	701a      	strb	r2, [r3, #0]
}
 8017a28:	bf00      	nop
 8017a2a:	370c      	adds	r7, #12
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
 8017a3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	1c5a      	adds	r2, r3, #1
 8017a42:	607a      	str	r2, [r7, #4]
 8017a44:	683a      	ldr	r2, [r7, #0]
 8017a46:	b2d2      	uxtb	r2, r2
 8017a48:	701a      	strb	r2, [r3, #0]
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	0a1b      	lsrs	r3, r3, #8
 8017a4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	1c5a      	adds	r2, r3, #1
 8017a54:	607a      	str	r2, [r7, #4]
 8017a56:	683a      	ldr	r2, [r7, #0]
 8017a58:	b2d2      	uxtb	r2, r2
 8017a5a:	701a      	strb	r2, [r3, #0]
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	0a1b      	lsrs	r3, r3, #8
 8017a60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	1c5a      	adds	r2, r3, #1
 8017a66:	607a      	str	r2, [r7, #4]
 8017a68:	683a      	ldr	r2, [r7, #0]
 8017a6a:	b2d2      	uxtb	r2, r2
 8017a6c:	701a      	strb	r2, [r3, #0]
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	0a1b      	lsrs	r3, r3, #8
 8017a72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	607a      	str	r2, [r7, #4]
 8017a7a:	683a      	ldr	r2, [r7, #0]
 8017a7c:	b2d2      	uxtb	r2, r2
 8017a7e:	701a      	strb	r2, [r3, #0]
}
 8017a80:	bf00      	nop
 8017a82:	370c      	adds	r7, #12
 8017a84:	46bd      	mov	sp, r7
 8017a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8a:	4770      	bx	lr

08017a8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017a8c:	b480      	push	{r7}
 8017a8e:	b087      	sub	sp, #28
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d00d      	beq.n	8017ac2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017aa6:	693a      	ldr	r2, [r7, #16]
 8017aa8:	1c53      	adds	r3, r2, #1
 8017aaa:	613b      	str	r3, [r7, #16]
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	1c59      	adds	r1, r3, #1
 8017ab0:	6179      	str	r1, [r7, #20]
 8017ab2:	7812      	ldrb	r2, [r2, #0]
 8017ab4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	3b01      	subs	r3, #1
 8017aba:	607b      	str	r3, [r7, #4]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d1f1      	bne.n	8017aa6 <mem_cpy+0x1a>
	}
}
 8017ac2:	bf00      	nop
 8017ac4:	371c      	adds	r7, #28
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr

08017ace <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017ace:	b480      	push	{r7}
 8017ad0:	b087      	sub	sp, #28
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	60f8      	str	r0, [r7, #12]
 8017ad6:	60b9      	str	r1, [r7, #8]
 8017ad8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	1c5a      	adds	r2, r3, #1
 8017ae2:	617a      	str	r2, [r7, #20]
 8017ae4:	68ba      	ldr	r2, [r7, #8]
 8017ae6:	b2d2      	uxtb	r2, r2
 8017ae8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	607b      	str	r3, [r7, #4]
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d1f3      	bne.n	8017ade <mem_set+0x10>
}
 8017af6:	bf00      	nop
 8017af8:	bf00      	nop
 8017afa:	371c      	adds	r7, #28
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017b04:	b480      	push	{r7}
 8017b06:	b089      	sub	sp, #36	@ 0x24
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	61fb      	str	r3, [r7, #28]
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017b1c:	69fb      	ldr	r3, [r7, #28]
 8017b1e:	1c5a      	adds	r2, r3, #1
 8017b20:	61fa      	str	r2, [r7, #28]
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	4619      	mov	r1, r3
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	1c5a      	adds	r2, r3, #1
 8017b2a:	61ba      	str	r2, [r7, #24]
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	1acb      	subs	r3, r1, r3
 8017b30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	3b01      	subs	r3, #1
 8017b36:	607b      	str	r3, [r7, #4]
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d002      	beq.n	8017b44 <mem_cmp+0x40>
 8017b3e:	697b      	ldr	r3, [r7, #20]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d0eb      	beq.n	8017b1c <mem_cmp+0x18>

	return r;
 8017b44:	697b      	ldr	r3, [r7, #20]
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	3724      	adds	r7, #36	@ 0x24
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b50:	4770      	bx	lr

08017b52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017b52:	b480      	push	{r7}
 8017b54:	b083      	sub	sp, #12
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
 8017b5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017b5c:	e002      	b.n	8017b64 <chk_chr+0x12>
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	3301      	adds	r3, #1
 8017b62:	607b      	str	r3, [r7, #4]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	781b      	ldrb	r3, [r3, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d005      	beq.n	8017b78 <chk_chr+0x26>
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	781b      	ldrb	r3, [r3, #0]
 8017b70:	461a      	mov	r2, r3
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	4293      	cmp	r3, r2
 8017b76:	d1f2      	bne.n	8017b5e <chk_chr+0xc>
	return *str;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	781b      	ldrb	r3, [r3, #0]
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	370c      	adds	r7, #12
 8017b80:	46bd      	mov	sp, r7
 8017b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b86:	4770      	bx	lr

08017b88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017b88:	b480      	push	{r7}
 8017b8a:	b085      	sub	sp, #20
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017b92:	2300      	movs	r3, #0
 8017b94:	60bb      	str	r3, [r7, #8]
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	60fb      	str	r3, [r7, #12]
 8017b9a:	e029      	b.n	8017bf0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017b9c:	4a27      	ldr	r2, [pc, #156]	@ (8017c3c <chk_lock+0xb4>)
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	011b      	lsls	r3, r3, #4
 8017ba2:	4413      	add	r3, r2
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d01d      	beq.n	8017be6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017baa:	4a24      	ldr	r2, [pc, #144]	@ (8017c3c <chk_lock+0xb4>)
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	011b      	lsls	r3, r3, #4
 8017bb0:	4413      	add	r3, r2
 8017bb2:	681a      	ldr	r2, [r3, #0]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d116      	bne.n	8017bea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8017c3c <chk_lock+0xb4>)
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	011b      	lsls	r3, r3, #4
 8017bc2:	4413      	add	r3, r2
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	681a      	ldr	r2, [r3, #0]
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d10c      	bne.n	8017bea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8017c3c <chk_lock+0xb4>)
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	011b      	lsls	r3, r3, #4
 8017bd6:	4413      	add	r3, r2
 8017bd8:	3308      	adds	r3, #8
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d102      	bne.n	8017bea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017be4:	e007      	b.n	8017bf6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017be6:	2301      	movs	r3, #1
 8017be8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	3301      	adds	r3, #1
 8017bee:	60fb      	str	r3, [r7, #12]
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2b01      	cmp	r3, #1
 8017bf4:	d9d2      	bls.n	8017b9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2b02      	cmp	r3, #2
 8017bfa:	d109      	bne.n	8017c10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d102      	bne.n	8017c08 <chk_lock+0x80>
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	2b02      	cmp	r3, #2
 8017c06:	d101      	bne.n	8017c0c <chk_lock+0x84>
 8017c08:	2300      	movs	r3, #0
 8017c0a:	e010      	b.n	8017c2e <chk_lock+0xa6>
 8017c0c:	2312      	movs	r3, #18
 8017c0e:	e00e      	b.n	8017c2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d108      	bne.n	8017c28 <chk_lock+0xa0>
 8017c16:	4a09      	ldr	r2, [pc, #36]	@ (8017c3c <chk_lock+0xb4>)
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	011b      	lsls	r3, r3, #4
 8017c1c:	4413      	add	r3, r2
 8017c1e:	330c      	adds	r3, #12
 8017c20:	881b      	ldrh	r3, [r3, #0]
 8017c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017c26:	d101      	bne.n	8017c2c <chk_lock+0xa4>
 8017c28:	2310      	movs	r3, #16
 8017c2a:	e000      	b.n	8017c2e <chk_lock+0xa6>
 8017c2c:	2300      	movs	r3, #0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3714      	adds	r7, #20
 8017c32:	46bd      	mov	sp, r7
 8017c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c38:	4770      	bx	lr
 8017c3a:	bf00      	nop
 8017c3c:	20001b84 	.word	0x20001b84

08017c40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017c40:	b480      	push	{r7}
 8017c42:	b083      	sub	sp, #12
 8017c44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017c46:	2300      	movs	r3, #0
 8017c48:	607b      	str	r3, [r7, #4]
 8017c4a:	e002      	b.n	8017c52 <enq_lock+0x12>
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	3301      	adds	r3, #1
 8017c50:	607b      	str	r3, [r7, #4]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d806      	bhi.n	8017c66 <enq_lock+0x26>
 8017c58:	4a09      	ldr	r2, [pc, #36]	@ (8017c80 <enq_lock+0x40>)
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	011b      	lsls	r3, r3, #4
 8017c5e:	4413      	add	r3, r2
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d1f2      	bne.n	8017c4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2b02      	cmp	r3, #2
 8017c6a:	bf14      	ite	ne
 8017c6c:	2301      	movne	r3, #1
 8017c6e:	2300      	moveq	r3, #0
 8017c70:	b2db      	uxtb	r3, r3
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	370c      	adds	r7, #12
 8017c76:	46bd      	mov	sp, r7
 8017c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7c:	4770      	bx	lr
 8017c7e:	bf00      	nop
 8017c80:	20001b84 	.word	0x20001b84

08017c84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017c84:	b480      	push	{r7}
 8017c86:	b085      	sub	sp, #20
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017c8e:	2300      	movs	r3, #0
 8017c90:	60fb      	str	r3, [r7, #12]
 8017c92:	e01f      	b.n	8017cd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017c94:	4a41      	ldr	r2, [pc, #260]	@ (8017d9c <inc_lock+0x118>)
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	011b      	lsls	r3, r3, #4
 8017c9a:	4413      	add	r3, r2
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d113      	bne.n	8017cce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017ca6:	4a3d      	ldr	r2, [pc, #244]	@ (8017d9c <inc_lock+0x118>)
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	011b      	lsls	r3, r3, #4
 8017cac:	4413      	add	r3, r2
 8017cae:	3304      	adds	r3, #4
 8017cb0:	681a      	ldr	r2, [r3, #0]
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d109      	bne.n	8017cce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017cba:	4a38      	ldr	r2, [pc, #224]	@ (8017d9c <inc_lock+0x118>)
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	011b      	lsls	r3, r3, #4
 8017cc0:	4413      	add	r3, r2
 8017cc2:	3308      	adds	r3, #8
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d006      	beq.n	8017cdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	60fb      	str	r3, [r7, #12]
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d9dc      	bls.n	8017c94 <inc_lock+0x10>
 8017cda:	e000      	b.n	8017cde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017cdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	2b02      	cmp	r3, #2
 8017ce2:	d132      	bne.n	8017d4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	60fb      	str	r3, [r7, #12]
 8017ce8:	e002      	b.n	8017cf0 <inc_lock+0x6c>
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	3301      	adds	r3, #1
 8017cee:	60fb      	str	r3, [r7, #12]
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	2b01      	cmp	r3, #1
 8017cf4:	d806      	bhi.n	8017d04 <inc_lock+0x80>
 8017cf6:	4a29      	ldr	r2, [pc, #164]	@ (8017d9c <inc_lock+0x118>)
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	011b      	lsls	r3, r3, #4
 8017cfc:	4413      	add	r3, r2
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1f2      	bne.n	8017cea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b02      	cmp	r3, #2
 8017d08:	d101      	bne.n	8017d0e <inc_lock+0x8a>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	e040      	b.n	8017d90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681a      	ldr	r2, [r3, #0]
 8017d12:	4922      	ldr	r1, [pc, #136]	@ (8017d9c <inc_lock+0x118>)
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	011b      	lsls	r3, r3, #4
 8017d18:	440b      	add	r3, r1
 8017d1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	689a      	ldr	r2, [r3, #8]
 8017d20:	491e      	ldr	r1, [pc, #120]	@ (8017d9c <inc_lock+0x118>)
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	011b      	lsls	r3, r3, #4
 8017d26:	440b      	add	r3, r1
 8017d28:	3304      	adds	r3, #4
 8017d2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	695a      	ldr	r2, [r3, #20]
 8017d30:	491a      	ldr	r1, [pc, #104]	@ (8017d9c <inc_lock+0x118>)
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	011b      	lsls	r3, r3, #4
 8017d36:	440b      	add	r3, r1
 8017d38:	3308      	adds	r3, #8
 8017d3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017d3c:	4a17      	ldr	r2, [pc, #92]	@ (8017d9c <inc_lock+0x118>)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	011b      	lsls	r3, r3, #4
 8017d42:	4413      	add	r3, r2
 8017d44:	330c      	adds	r3, #12
 8017d46:	2200      	movs	r2, #0
 8017d48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d009      	beq.n	8017d64 <inc_lock+0xe0>
 8017d50:	4a12      	ldr	r2, [pc, #72]	@ (8017d9c <inc_lock+0x118>)
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	011b      	lsls	r3, r3, #4
 8017d56:	4413      	add	r3, r2
 8017d58:	330c      	adds	r3, #12
 8017d5a:	881b      	ldrh	r3, [r3, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d001      	beq.n	8017d64 <inc_lock+0xe0>
 8017d60:	2300      	movs	r3, #0
 8017d62:	e015      	b.n	8017d90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d108      	bne.n	8017d7c <inc_lock+0xf8>
 8017d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8017d9c <inc_lock+0x118>)
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	011b      	lsls	r3, r3, #4
 8017d70:	4413      	add	r3, r2
 8017d72:	330c      	adds	r3, #12
 8017d74:	881b      	ldrh	r3, [r3, #0]
 8017d76:	3301      	adds	r3, #1
 8017d78:	b29a      	uxth	r2, r3
 8017d7a:	e001      	b.n	8017d80 <inc_lock+0xfc>
 8017d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017d80:	4906      	ldr	r1, [pc, #24]	@ (8017d9c <inc_lock+0x118>)
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	011b      	lsls	r3, r3, #4
 8017d86:	440b      	add	r3, r1
 8017d88:	330c      	adds	r3, #12
 8017d8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	3301      	adds	r3, #1
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3714      	adds	r7, #20
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr
 8017d9c:	20001b84 	.word	0x20001b84

08017da0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017da0:	b480      	push	{r7}
 8017da2:	b085      	sub	sp, #20
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	3b01      	subs	r3, #1
 8017dac:	607b      	str	r3, [r7, #4]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	d825      	bhi.n	8017e00 <dec_lock+0x60>
		n = Files[i].ctr;
 8017db4:	4a17      	ldr	r2, [pc, #92]	@ (8017e14 <dec_lock+0x74>)
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	011b      	lsls	r3, r3, #4
 8017dba:	4413      	add	r3, r2
 8017dbc:	330c      	adds	r3, #12
 8017dbe:	881b      	ldrh	r3, [r3, #0]
 8017dc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017dc2:	89fb      	ldrh	r3, [r7, #14]
 8017dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017dc8:	d101      	bne.n	8017dce <dec_lock+0x2e>
 8017dca:	2300      	movs	r3, #0
 8017dcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017dce:	89fb      	ldrh	r3, [r7, #14]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d002      	beq.n	8017dda <dec_lock+0x3a>
 8017dd4:	89fb      	ldrh	r3, [r7, #14]
 8017dd6:	3b01      	subs	r3, #1
 8017dd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017dda:	4a0e      	ldr	r2, [pc, #56]	@ (8017e14 <dec_lock+0x74>)
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	011b      	lsls	r3, r3, #4
 8017de0:	4413      	add	r3, r2
 8017de2:	330c      	adds	r3, #12
 8017de4:	89fa      	ldrh	r2, [r7, #14]
 8017de6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017de8:	89fb      	ldrh	r3, [r7, #14]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d105      	bne.n	8017dfa <dec_lock+0x5a>
 8017dee:	4a09      	ldr	r2, [pc, #36]	@ (8017e14 <dec_lock+0x74>)
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	011b      	lsls	r3, r3, #4
 8017df4:	4413      	add	r3, r2
 8017df6:	2200      	movs	r2, #0
 8017df8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	737b      	strb	r3, [r7, #13]
 8017dfe:	e001      	b.n	8017e04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017e00:	2302      	movs	r3, #2
 8017e02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017e04:	7b7b      	ldrb	r3, [r7, #13]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3714      	adds	r7, #20
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	20001b84 	.word	0x20001b84

08017e18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017e18:	b480      	push	{r7}
 8017e1a:	b085      	sub	sp, #20
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017e20:	2300      	movs	r3, #0
 8017e22:	60fb      	str	r3, [r7, #12]
 8017e24:	e010      	b.n	8017e48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017e26:	4a0d      	ldr	r2, [pc, #52]	@ (8017e5c <clear_lock+0x44>)
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	011b      	lsls	r3, r3, #4
 8017e2c:	4413      	add	r3, r2
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	687a      	ldr	r2, [r7, #4]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d105      	bne.n	8017e42 <clear_lock+0x2a>
 8017e36:	4a09      	ldr	r2, [pc, #36]	@ (8017e5c <clear_lock+0x44>)
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	011b      	lsls	r3, r3, #4
 8017e3c:	4413      	add	r3, r2
 8017e3e:	2200      	movs	r2, #0
 8017e40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	3301      	adds	r3, #1
 8017e46:	60fb      	str	r3, [r7, #12]
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d9eb      	bls.n	8017e26 <clear_lock+0xe>
	}
}
 8017e4e:	bf00      	nop
 8017e50:	bf00      	nop
 8017e52:	3714      	adds	r7, #20
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr
 8017e5c:	20001b84 	.word	0x20001b84

08017e60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b086      	sub	sp, #24
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	78db      	ldrb	r3, [r3, #3]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d034      	beq.n	8017ede <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	7858      	ldrb	r0, [r3, #1]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017e84:	2301      	movs	r3, #1
 8017e86:	697a      	ldr	r2, [r7, #20]
 8017e88:	f7ff fd40 	bl	801790c <disk_write>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d002      	beq.n	8017e98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017e92:	2301      	movs	r3, #1
 8017e94:	73fb      	strb	r3, [r7, #15]
 8017e96:	e022      	b.n	8017ede <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ea2:	697a      	ldr	r2, [r7, #20]
 8017ea4:	1ad2      	subs	r2, r2, r3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	69db      	ldr	r3, [r3, #28]
 8017eaa:	429a      	cmp	r2, r3
 8017eac:	d217      	bcs.n	8017ede <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	789b      	ldrb	r3, [r3, #2]
 8017eb2:	613b      	str	r3, [r7, #16]
 8017eb4:	e010      	b.n	8017ed8 <sync_window+0x78>
					wsect += fs->fsize;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	69db      	ldr	r3, [r3, #28]
 8017eba:	697a      	ldr	r2, [r7, #20]
 8017ebc:	4413      	add	r3, r2
 8017ebe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	7858      	ldrb	r0, [r3, #1]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017eca:	2301      	movs	r3, #1
 8017ecc:	697a      	ldr	r2, [r7, #20]
 8017ece:	f7ff fd1d 	bl	801790c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ed2:	693b      	ldr	r3, [r7, #16]
 8017ed4:	3b01      	subs	r3, #1
 8017ed6:	613b      	str	r3, [r7, #16]
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	2b01      	cmp	r3, #1
 8017edc:	d8eb      	bhi.n	8017eb6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3718      	adds	r7, #24
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b084      	sub	sp, #16
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017efa:	683a      	ldr	r2, [r7, #0]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d01b      	beq.n	8017f38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f7ff ffad 	bl	8017e60 <sync_window>
 8017f06:	4603      	mov	r3, r0
 8017f08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017f0a:	7bfb      	ldrb	r3, [r7, #15]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d113      	bne.n	8017f38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	7858      	ldrb	r0, [r3, #1]
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	683a      	ldr	r2, [r7, #0]
 8017f1e:	f7ff fcd5 	bl	80178cc <disk_read>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d004      	beq.n	8017f32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017f28:	f04f 33ff 	mov.w	r3, #4294967295
 8017f2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017f2e:	2301      	movs	r3, #1
 8017f30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	683a      	ldr	r2, [r7, #0]
 8017f36:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8017f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3710      	adds	r7, #16
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
	...

08017f44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f7ff ff87 	bl	8017e60 <sync_window>
 8017f52:	4603      	mov	r3, r0
 8017f54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017f56:	7bfb      	ldrb	r3, [r7, #15]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d158      	bne.n	801800e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	2b03      	cmp	r3, #3
 8017f62:	d148      	bne.n	8017ff6 <sync_fs+0xb2>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	791b      	ldrb	r3, [r3, #4]
 8017f68:	2b01      	cmp	r3, #1
 8017f6a:	d144      	bne.n	8017ff6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	3334      	adds	r3, #52	@ 0x34
 8017f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f74:	2100      	movs	r1, #0
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7ff fda9 	bl	8017ace <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	3334      	adds	r3, #52	@ 0x34
 8017f80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8017f84:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ff fd38 	bl	80179fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	3334      	adds	r3, #52	@ 0x34
 8017f92:	4921      	ldr	r1, [pc, #132]	@ (8018018 <sync_fs+0xd4>)
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7ff fd4d 	bl	8017a34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	3334      	adds	r3, #52	@ 0x34
 8017f9e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8017fa2:	491e      	ldr	r1, [pc, #120]	@ (801801c <sync_fs+0xd8>)
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7ff fd45 	bl	8017a34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	3334      	adds	r3, #52	@ 0x34
 8017fae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	695b      	ldr	r3, [r3, #20]
 8017fb6:	4619      	mov	r1, r3
 8017fb8:	4610      	mov	r0, r2
 8017fba:	f7ff fd3b 	bl	8017a34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	3334      	adds	r3, #52	@ 0x34
 8017fc2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	691b      	ldr	r3, [r3, #16]
 8017fca:	4619      	mov	r1, r3
 8017fcc:	4610      	mov	r0, r2
 8017fce:	f7ff fd31 	bl	8017a34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	6a1b      	ldr	r3, [r3, #32]
 8017fd6:	1c5a      	adds	r2, r3, #1
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	7858      	ldrb	r0, [r3, #1]
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017fea:	2301      	movs	r3, #1
 8017fec:	f7ff fc8e 	bl	801790c <disk_write>
			fs->fsi_flag = 0;
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	785b      	ldrb	r3, [r3, #1]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	2100      	movs	r1, #0
 8017ffe:	4618      	mov	r0, r3
 8018000:	f7ff fca4 	bl	801794c <disk_ioctl>
 8018004:	4603      	mov	r3, r0
 8018006:	2b00      	cmp	r3, #0
 8018008:	d001      	beq.n	801800e <sync_fs+0xca>
 801800a:	2301      	movs	r3, #1
 801800c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3710      	adds	r7, #16
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	41615252 	.word	0x41615252
 801801c:	61417272 	.word	0x61417272

08018020 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	3b02      	subs	r3, #2
 801802e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	699b      	ldr	r3, [r3, #24]
 8018034:	3b02      	subs	r3, #2
 8018036:	683a      	ldr	r2, [r7, #0]
 8018038:	429a      	cmp	r2, r3
 801803a:	d301      	bcc.n	8018040 <clust2sect+0x20>
 801803c:	2300      	movs	r3, #0
 801803e:	e008      	b.n	8018052 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	895b      	ldrh	r3, [r3, #10]
 8018044:	461a      	mov	r2, r3
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	fb03 f202 	mul.w	r2, r3, r2
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018050:	4413      	add	r3, r2
}
 8018052:	4618      	mov	r0, r3
 8018054:	370c      	adds	r7, #12
 8018056:	46bd      	mov	sp, r7
 8018058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805c:	4770      	bx	lr

0801805e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801805e:	b580      	push	{r7, lr}
 8018060:	b086      	sub	sp, #24
 8018062:	af00      	add	r7, sp, #0
 8018064:	6078      	str	r0, [r7, #4]
 8018066:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801806e:	683b      	ldr	r3, [r7, #0]
 8018070:	2b01      	cmp	r3, #1
 8018072:	d904      	bls.n	801807e <get_fat+0x20>
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	699b      	ldr	r3, [r3, #24]
 8018078:	683a      	ldr	r2, [r7, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d302      	bcc.n	8018084 <get_fat+0x26>
		val = 1;	/* Internal error */
 801807e:	2301      	movs	r3, #1
 8018080:	617b      	str	r3, [r7, #20]
 8018082:	e08e      	b.n	80181a2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8018084:	f04f 33ff 	mov.w	r3, #4294967295
 8018088:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	2b03      	cmp	r3, #3
 8018090:	d061      	beq.n	8018156 <get_fat+0xf8>
 8018092:	2b03      	cmp	r3, #3
 8018094:	dc7b      	bgt.n	801818e <get_fat+0x130>
 8018096:	2b01      	cmp	r3, #1
 8018098:	d002      	beq.n	80180a0 <get_fat+0x42>
 801809a:	2b02      	cmp	r3, #2
 801809c:	d041      	beq.n	8018122 <get_fat+0xc4>
 801809e:	e076      	b.n	801818e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80180a0:	683b      	ldr	r3, [r7, #0]
 80180a2:	60fb      	str	r3, [r7, #12]
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	085b      	lsrs	r3, r3, #1
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	4413      	add	r3, r2
 80180ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80180ae:	693b      	ldr	r3, [r7, #16]
 80180b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	0a5b      	lsrs	r3, r3, #9
 80180b6:	4413      	add	r3, r2
 80180b8:	4619      	mov	r1, r3
 80180ba:	6938      	ldr	r0, [r7, #16]
 80180bc:	f7ff ff14 	bl	8017ee8 <move_window>
 80180c0:	4603      	mov	r3, r0
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d166      	bne.n	8018194 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	1c5a      	adds	r2, r3, #1
 80180ca:	60fa      	str	r2, [r7, #12]
 80180cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80180d0:	693a      	ldr	r2, [r7, #16]
 80180d2:	4413      	add	r3, r2
 80180d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80180d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	0a5b      	lsrs	r3, r3, #9
 80180e2:	4413      	add	r3, r2
 80180e4:	4619      	mov	r1, r3
 80180e6:	6938      	ldr	r0, [r7, #16]
 80180e8:	f7ff fefe 	bl	8017ee8 <move_window>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d152      	bne.n	8018198 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80180f8:	693a      	ldr	r2, [r7, #16]
 80180fa:	4413      	add	r3, r2
 80180fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018100:	021b      	lsls	r3, r3, #8
 8018102:	68ba      	ldr	r2, [r7, #8]
 8018104:	4313      	orrs	r3, r2
 8018106:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	f003 0301 	and.w	r3, r3, #1
 801810e:	2b00      	cmp	r3, #0
 8018110:	d002      	beq.n	8018118 <get_fat+0xba>
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	091b      	lsrs	r3, r3, #4
 8018116:	e002      	b.n	801811e <get_fat+0xc0>
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801811e:	617b      	str	r3, [r7, #20]
			break;
 8018120:	e03f      	b.n	80181a2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018126:	683b      	ldr	r3, [r7, #0]
 8018128:	0a1b      	lsrs	r3, r3, #8
 801812a:	4413      	add	r3, r2
 801812c:	4619      	mov	r1, r3
 801812e:	6938      	ldr	r0, [r7, #16]
 8018130:	f7ff feda 	bl	8017ee8 <move_window>
 8018134:	4603      	mov	r3, r0
 8018136:	2b00      	cmp	r3, #0
 8018138:	d130      	bne.n	801819c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	005b      	lsls	r3, r3, #1
 8018144:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8018148:	4413      	add	r3, r2
 801814a:	4618      	mov	r0, r3
 801814c:	f7ff fc1c 	bl	8017988 <ld_word>
 8018150:	4603      	mov	r3, r0
 8018152:	617b      	str	r3, [r7, #20]
			break;
 8018154:	e025      	b.n	80181a2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	09db      	lsrs	r3, r3, #7
 801815e:	4413      	add	r3, r2
 8018160:	4619      	mov	r1, r3
 8018162:	6938      	ldr	r0, [r7, #16]
 8018164:	f7ff fec0 	bl	8017ee8 <move_window>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	d118      	bne.n	80181a0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	009b      	lsls	r3, r3, #2
 8018178:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801817c:	4413      	add	r3, r2
 801817e:	4618      	mov	r0, r3
 8018180:	f7ff fc1a 	bl	80179b8 <ld_dword>
 8018184:	4603      	mov	r3, r0
 8018186:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801818a:	617b      	str	r3, [r7, #20]
			break;
 801818c:	e009      	b.n	80181a2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801818e:	2301      	movs	r3, #1
 8018190:	617b      	str	r3, [r7, #20]
 8018192:	e006      	b.n	80181a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018194:	bf00      	nop
 8018196:	e004      	b.n	80181a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018198:	bf00      	nop
 801819a:	e002      	b.n	80181a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801819c:	bf00      	nop
 801819e:	e000      	b.n	80181a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80181a0:	bf00      	nop
		}
	}

	return val;
 80181a2:	697b      	ldr	r3, [r7, #20]
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	3718      	adds	r7, #24
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80181ac:	b590      	push	{r4, r7, lr}
 80181ae:	b089      	sub	sp, #36	@ 0x24
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80181b8:	2302      	movs	r3, #2
 80181ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	2b01      	cmp	r3, #1
 80181c0:	f240 80d9 	bls.w	8018376 <put_fat+0x1ca>
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	699b      	ldr	r3, [r3, #24]
 80181c8:	68ba      	ldr	r2, [r7, #8]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	f080 80d3 	bcs.w	8018376 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	2b03      	cmp	r3, #3
 80181d6:	f000 8096 	beq.w	8018306 <put_fat+0x15a>
 80181da:	2b03      	cmp	r3, #3
 80181dc:	f300 80cb 	bgt.w	8018376 <put_fat+0x1ca>
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d002      	beq.n	80181ea <put_fat+0x3e>
 80181e4:	2b02      	cmp	r3, #2
 80181e6:	d06e      	beq.n	80182c6 <put_fat+0x11a>
 80181e8:	e0c5      	b.n	8018376 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	61bb      	str	r3, [r7, #24]
 80181ee:	69bb      	ldr	r3, [r7, #24]
 80181f0:	085b      	lsrs	r3, r3, #1
 80181f2:	69ba      	ldr	r2, [r7, #24]
 80181f4:	4413      	add	r3, r2
 80181f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80181fc:	69bb      	ldr	r3, [r7, #24]
 80181fe:	0a5b      	lsrs	r3, r3, #9
 8018200:	4413      	add	r3, r2
 8018202:	4619      	mov	r1, r3
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7ff fe6f 	bl	8017ee8 <move_window>
 801820a:	4603      	mov	r3, r0
 801820c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801820e:	7ffb      	ldrb	r3, [r7, #31]
 8018210:	2b00      	cmp	r3, #0
 8018212:	f040 80a9 	bne.w	8018368 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	1c59      	adds	r1, r3, #1
 8018220:	61b9      	str	r1, [r7, #24]
 8018222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018226:	4413      	add	r3, r2
 8018228:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	f003 0301 	and.w	r3, r3, #1
 8018230:	2b00      	cmp	r3, #0
 8018232:	d00d      	beq.n	8018250 <put_fat+0xa4>
 8018234:	697b      	ldr	r3, [r7, #20]
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	b25b      	sxtb	r3, r3
 801823a:	f003 030f 	and.w	r3, r3, #15
 801823e:	b25a      	sxtb	r2, r3
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	b2db      	uxtb	r3, r3
 8018244:	011b      	lsls	r3, r3, #4
 8018246:	b25b      	sxtb	r3, r3
 8018248:	4313      	orrs	r3, r2
 801824a:	b25b      	sxtb	r3, r3
 801824c:	b2db      	uxtb	r3, r3
 801824e:	e001      	b.n	8018254 <put_fat+0xa8>
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	b2db      	uxtb	r3, r3
 8018254:	697a      	ldr	r2, [r7, #20]
 8018256:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	2201      	movs	r2, #1
 801825c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018262:	69bb      	ldr	r3, [r7, #24]
 8018264:	0a5b      	lsrs	r3, r3, #9
 8018266:	4413      	add	r3, r2
 8018268:	4619      	mov	r1, r3
 801826a:	68f8      	ldr	r0, [r7, #12]
 801826c:	f7ff fe3c 	bl	8017ee8 <move_window>
 8018270:	4603      	mov	r3, r0
 8018272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8018274:	7ffb      	ldrb	r3, [r7, #31]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d178      	bne.n	801836c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8018280:	69bb      	ldr	r3, [r7, #24]
 8018282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018286:	4413      	add	r3, r2
 8018288:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	f003 0301 	and.w	r3, r3, #1
 8018290:	2b00      	cmp	r3, #0
 8018292:	d003      	beq.n	801829c <put_fat+0xf0>
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	091b      	lsrs	r3, r3, #4
 8018298:	b2db      	uxtb	r3, r3
 801829a:	e00e      	b.n	80182ba <put_fat+0x10e>
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	781b      	ldrb	r3, [r3, #0]
 80182a0:	b25b      	sxtb	r3, r3
 80182a2:	f023 030f 	bic.w	r3, r3, #15
 80182a6:	b25a      	sxtb	r2, r3
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	0a1b      	lsrs	r3, r3, #8
 80182ac:	b25b      	sxtb	r3, r3
 80182ae:	f003 030f 	and.w	r3, r3, #15
 80182b2:	b25b      	sxtb	r3, r3
 80182b4:	4313      	orrs	r3, r2
 80182b6:	b25b      	sxtb	r3, r3
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	697a      	ldr	r2, [r7, #20]
 80182bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	2201      	movs	r2, #1
 80182c2:	70da      	strb	r2, [r3, #3]
			break;
 80182c4:	e057      	b.n	8018376 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	0a1b      	lsrs	r3, r3, #8
 80182ce:	4413      	add	r3, r2
 80182d0:	4619      	mov	r1, r3
 80182d2:	68f8      	ldr	r0, [r7, #12]
 80182d4:	f7ff fe08 	bl	8017ee8 <move_window>
 80182d8:	4603      	mov	r3, r0
 80182da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80182dc:	7ffb      	ldrb	r3, [r7, #31]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d146      	bne.n	8018370 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	005b      	lsls	r3, r3, #1
 80182ec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80182f0:	4413      	add	r3, r2
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	b292      	uxth	r2, r2
 80182f6:	4611      	mov	r1, r2
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7ff fb80 	bl	80179fe <st_word>
			fs->wflag = 1;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	2201      	movs	r2, #1
 8018302:	70da      	strb	r2, [r3, #3]
			break;
 8018304:	e037      	b.n	8018376 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	09db      	lsrs	r3, r3, #7
 801830e:	4413      	add	r3, r2
 8018310:	4619      	mov	r1, r3
 8018312:	68f8      	ldr	r0, [r7, #12]
 8018314:	f7ff fde8 	bl	8017ee8 <move_window>
 8018318:	4603      	mov	r3, r0
 801831a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801831c:	7ffb      	ldrb	r3, [r7, #31]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d128      	bne.n	8018374 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018336:	4413      	add	r3, r2
 8018338:	4618      	mov	r0, r3
 801833a:	f7ff fb3d 	bl	80179b8 <ld_dword>
 801833e:	4603      	mov	r3, r0
 8018340:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8018344:	4323      	orrs	r3, r4
 8018346:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	009b      	lsls	r3, r3, #2
 8018352:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8018356:	4413      	add	r3, r2
 8018358:	6879      	ldr	r1, [r7, #4]
 801835a:	4618      	mov	r0, r3
 801835c:	f7ff fb6a 	bl	8017a34 <st_dword>
			fs->wflag = 1;
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	2201      	movs	r2, #1
 8018364:	70da      	strb	r2, [r3, #3]
			break;
 8018366:	e006      	b.n	8018376 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018368:	bf00      	nop
 801836a:	e004      	b.n	8018376 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801836c:	bf00      	nop
 801836e:	e002      	b.n	8018376 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018370:	bf00      	nop
 8018372:	e000      	b.n	8018376 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8018374:	bf00      	nop
		}
	}
	return res;
 8018376:	7ffb      	ldrb	r3, [r7, #31]
}
 8018378:	4618      	mov	r0, r3
 801837a:	3724      	adds	r7, #36	@ 0x24
 801837c:	46bd      	mov	sp, r7
 801837e:	bd90      	pop	{r4, r7, pc}

08018380 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b088      	sub	sp, #32
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801838c:	2300      	movs	r3, #0
 801838e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	2b01      	cmp	r3, #1
 801839a:	d904      	bls.n	80183a6 <remove_chain+0x26>
 801839c:	69bb      	ldr	r3, [r7, #24]
 801839e:	699b      	ldr	r3, [r3, #24]
 80183a0:	68ba      	ldr	r2, [r7, #8]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d301      	bcc.n	80183aa <remove_chain+0x2a>
 80183a6:	2302      	movs	r3, #2
 80183a8:	e04b      	b.n	8018442 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d00c      	beq.n	80183ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80183b0:	f04f 32ff 	mov.w	r2, #4294967295
 80183b4:	6879      	ldr	r1, [r7, #4]
 80183b6:	69b8      	ldr	r0, [r7, #24]
 80183b8:	f7ff fef8 	bl	80181ac <put_fat>
 80183bc:	4603      	mov	r3, r0
 80183be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80183c0:	7ffb      	ldrb	r3, [r7, #31]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d001      	beq.n	80183ca <remove_chain+0x4a>
 80183c6:	7ffb      	ldrb	r3, [r7, #31]
 80183c8:	e03b      	b.n	8018442 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80183ca:	68b9      	ldr	r1, [r7, #8]
 80183cc:	68f8      	ldr	r0, [r7, #12]
 80183ce:	f7ff fe46 	bl	801805e <get_fat>
 80183d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d031      	beq.n	801843e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d101      	bne.n	80183e4 <remove_chain+0x64>
 80183e0:	2302      	movs	r3, #2
 80183e2:	e02e      	b.n	8018442 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183ea:	d101      	bne.n	80183f0 <remove_chain+0x70>
 80183ec:	2301      	movs	r3, #1
 80183ee:	e028      	b.n	8018442 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80183f0:	2200      	movs	r2, #0
 80183f2:	68b9      	ldr	r1, [r7, #8]
 80183f4:	69b8      	ldr	r0, [r7, #24]
 80183f6:	f7ff fed9 	bl	80181ac <put_fat>
 80183fa:	4603      	mov	r3, r0
 80183fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80183fe:	7ffb      	ldrb	r3, [r7, #31]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d001      	beq.n	8018408 <remove_chain+0x88>
 8018404:	7ffb      	ldrb	r3, [r7, #31]
 8018406:	e01c      	b.n	8018442 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018408:	69bb      	ldr	r3, [r7, #24]
 801840a:	695a      	ldr	r2, [r3, #20]
 801840c:	69bb      	ldr	r3, [r7, #24]
 801840e:	699b      	ldr	r3, [r3, #24]
 8018410:	3b02      	subs	r3, #2
 8018412:	429a      	cmp	r2, r3
 8018414:	d20b      	bcs.n	801842e <remove_chain+0xae>
			fs->free_clst++;
 8018416:	69bb      	ldr	r3, [r7, #24]
 8018418:	695b      	ldr	r3, [r3, #20]
 801841a:	1c5a      	adds	r2, r3, #1
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8018420:	69bb      	ldr	r3, [r7, #24]
 8018422:	791b      	ldrb	r3, [r3, #4]
 8018424:	f043 0301 	orr.w	r3, r3, #1
 8018428:	b2da      	uxtb	r2, r3
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	68ba      	ldr	r2, [r7, #8]
 8018438:	429a      	cmp	r2, r3
 801843a:	d3c6      	bcc.n	80183ca <remove_chain+0x4a>
 801843c:	e000      	b.n	8018440 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801843e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018440:	2300      	movs	r3, #0
}
 8018442:	4618      	mov	r0, r3
 8018444:	3720      	adds	r7, #32
 8018446:	46bd      	mov	sp, r7
 8018448:	bd80      	pop	{r7, pc}

0801844a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801844a:	b580      	push	{r7, lr}
 801844c:	b088      	sub	sp, #32
 801844e:	af00      	add	r7, sp, #0
 8018450:	6078      	str	r0, [r7, #4]
 8018452:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d10d      	bne.n	801847c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018466:	69bb      	ldr	r3, [r7, #24]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d004      	beq.n	8018476 <create_chain+0x2c>
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	699b      	ldr	r3, [r3, #24]
 8018470:	69ba      	ldr	r2, [r7, #24]
 8018472:	429a      	cmp	r2, r3
 8018474:	d31b      	bcc.n	80184ae <create_chain+0x64>
 8018476:	2301      	movs	r3, #1
 8018478:	61bb      	str	r3, [r7, #24]
 801847a:	e018      	b.n	80184ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801847c:	6839      	ldr	r1, [r7, #0]
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f7ff fded 	bl	801805e <get_fat>
 8018484:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	2b01      	cmp	r3, #1
 801848a:	d801      	bhi.n	8018490 <create_chain+0x46>
 801848c:	2301      	movs	r3, #1
 801848e:	e070      	b.n	8018572 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018496:	d101      	bne.n	801849c <create_chain+0x52>
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	e06a      	b.n	8018572 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	699b      	ldr	r3, [r3, #24]
 80184a0:	68fa      	ldr	r2, [r7, #12]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d201      	bcs.n	80184aa <create_chain+0x60>
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	e063      	b.n	8018572 <create_chain+0x128>
		scl = clst;
 80184aa:	683b      	ldr	r3, [r7, #0]
 80184ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80184b2:	69fb      	ldr	r3, [r7, #28]
 80184b4:	3301      	adds	r3, #1
 80184b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	699b      	ldr	r3, [r3, #24]
 80184bc:	69fa      	ldr	r2, [r7, #28]
 80184be:	429a      	cmp	r2, r3
 80184c0:	d307      	bcc.n	80184d2 <create_chain+0x88>
				ncl = 2;
 80184c2:	2302      	movs	r3, #2
 80184c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80184c6:	69fa      	ldr	r2, [r7, #28]
 80184c8:	69bb      	ldr	r3, [r7, #24]
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d901      	bls.n	80184d2 <create_chain+0x88>
 80184ce:	2300      	movs	r3, #0
 80184d0:	e04f      	b.n	8018572 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80184d2:	69f9      	ldr	r1, [r7, #28]
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f7ff fdc2 	bl	801805e <get_fat>
 80184da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d00e      	beq.n	8018500 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	2b01      	cmp	r3, #1
 80184e6:	d003      	beq.n	80184f0 <create_chain+0xa6>
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ee:	d101      	bne.n	80184f4 <create_chain+0xaa>
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	e03e      	b.n	8018572 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80184f4:	69fa      	ldr	r2, [r7, #28]
 80184f6:	69bb      	ldr	r3, [r7, #24]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d1da      	bne.n	80184b2 <create_chain+0x68>
 80184fc:	2300      	movs	r3, #0
 80184fe:	e038      	b.n	8018572 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018500:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018502:	f04f 32ff 	mov.w	r2, #4294967295
 8018506:	69f9      	ldr	r1, [r7, #28]
 8018508:	6938      	ldr	r0, [r7, #16]
 801850a:	f7ff fe4f 	bl	80181ac <put_fat>
 801850e:	4603      	mov	r3, r0
 8018510:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018512:	7dfb      	ldrb	r3, [r7, #23]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d109      	bne.n	801852c <create_chain+0xe2>
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d006      	beq.n	801852c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801851e:	69fa      	ldr	r2, [r7, #28]
 8018520:	6839      	ldr	r1, [r7, #0]
 8018522:	6938      	ldr	r0, [r7, #16]
 8018524:	f7ff fe42 	bl	80181ac <put_fat>
 8018528:	4603      	mov	r3, r0
 801852a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801852c:	7dfb      	ldrb	r3, [r7, #23]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d116      	bne.n	8018560 <create_chain+0x116>
		fs->last_clst = ncl;
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	69fa      	ldr	r2, [r7, #28]
 8018536:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	695a      	ldr	r2, [r3, #20]
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	699b      	ldr	r3, [r3, #24]
 8018540:	3b02      	subs	r3, #2
 8018542:	429a      	cmp	r2, r3
 8018544:	d804      	bhi.n	8018550 <create_chain+0x106>
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	695b      	ldr	r3, [r3, #20]
 801854a:	1e5a      	subs	r2, r3, #1
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	791b      	ldrb	r3, [r3, #4]
 8018554:	f043 0301 	orr.w	r3, r3, #1
 8018558:	b2da      	uxtb	r2, r3
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	711a      	strb	r2, [r3, #4]
 801855e:	e007      	b.n	8018570 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018560:	7dfb      	ldrb	r3, [r7, #23]
 8018562:	2b01      	cmp	r3, #1
 8018564:	d102      	bne.n	801856c <create_chain+0x122>
 8018566:	f04f 33ff 	mov.w	r3, #4294967295
 801856a:	e000      	b.n	801856e <create_chain+0x124>
 801856c:	2301      	movs	r3, #1
 801856e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018570:	69fb      	ldr	r3, [r7, #28]
}
 8018572:	4618      	mov	r0, r3
 8018574:	3720      	adds	r7, #32
 8018576:	46bd      	mov	sp, r7
 8018578:	bd80      	pop	{r7, pc}

0801857a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801857a:	b480      	push	{r7}
 801857c:	b087      	sub	sp, #28
 801857e:	af00      	add	r7, sp, #0
 8018580:	6078      	str	r0, [r7, #4]
 8018582:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801858e:	3304      	adds	r3, #4
 8018590:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	0a5b      	lsrs	r3, r3, #9
 8018596:	68fa      	ldr	r2, [r7, #12]
 8018598:	8952      	ldrh	r2, [r2, #10]
 801859a:	fbb3 f3f2 	udiv	r3, r3, r2
 801859e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	1d1a      	adds	r2, r3, #4
 80185a4:	613a      	str	r2, [r7, #16]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d101      	bne.n	80185b4 <clmt_clust+0x3a>
 80185b0:	2300      	movs	r3, #0
 80185b2:	e010      	b.n	80185d6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80185b4:	697a      	ldr	r2, [r7, #20]
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d307      	bcc.n	80185cc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80185bc:	697a      	ldr	r2, [r7, #20]
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	1ad3      	subs	r3, r2, r3
 80185c2:	617b      	str	r3, [r7, #20]
 80185c4:	693b      	ldr	r3, [r7, #16]
 80185c6:	3304      	adds	r3, #4
 80185c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80185ca:	e7e9      	b.n	80185a0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80185cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80185ce:	693b      	ldr	r3, [r7, #16]
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	4413      	add	r3, r2
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	371c      	adds	r7, #28
 80185da:	46bd      	mov	sp, r7
 80185dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e0:	4770      	bx	lr

080185e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b086      	sub	sp, #24
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	6078      	str	r0, [r7, #4]
 80185ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80185f2:	683b      	ldr	r3, [r7, #0]
 80185f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80185f8:	d204      	bcs.n	8018604 <dir_sdi+0x22>
 80185fa:	683b      	ldr	r3, [r7, #0]
 80185fc:	f003 031f 	and.w	r3, r3, #31
 8018600:	2b00      	cmp	r3, #0
 8018602:	d001      	beq.n	8018608 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018604:	2302      	movs	r3, #2
 8018606:	e063      	b.n	80186d0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	683a      	ldr	r2, [r7, #0]
 801860c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	689b      	ldr	r3, [r3, #8]
 8018612:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018614:	697b      	ldr	r3, [r7, #20]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d106      	bne.n	8018628 <dir_sdi+0x46>
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	781b      	ldrb	r3, [r3, #0]
 801861e:	2b02      	cmp	r3, #2
 8018620:	d902      	bls.n	8018628 <dir_sdi+0x46>
		clst = fs->dirbase;
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018626:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018628:	697b      	ldr	r3, [r7, #20]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d10c      	bne.n	8018648 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	095b      	lsrs	r3, r3, #5
 8018632:	693a      	ldr	r2, [r7, #16]
 8018634:	8912      	ldrh	r2, [r2, #8]
 8018636:	4293      	cmp	r3, r2
 8018638:	d301      	bcc.n	801863e <dir_sdi+0x5c>
 801863a:	2302      	movs	r3, #2
 801863c:	e048      	b.n	80186d0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	61da      	str	r2, [r3, #28]
 8018646:	e029      	b.n	801869c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018648:	693b      	ldr	r3, [r7, #16]
 801864a:	895b      	ldrh	r3, [r3, #10]
 801864c:	025b      	lsls	r3, r3, #9
 801864e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018650:	e019      	b.n	8018686 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	6979      	ldr	r1, [r7, #20]
 8018656:	4618      	mov	r0, r3
 8018658:	f7ff fd01 	bl	801805e <get_fat>
 801865c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018664:	d101      	bne.n	801866a <dir_sdi+0x88>
 8018666:	2301      	movs	r3, #1
 8018668:	e032      	b.n	80186d0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	2b01      	cmp	r3, #1
 801866e:	d904      	bls.n	801867a <dir_sdi+0x98>
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	699b      	ldr	r3, [r3, #24]
 8018674:	697a      	ldr	r2, [r7, #20]
 8018676:	429a      	cmp	r2, r3
 8018678:	d301      	bcc.n	801867e <dir_sdi+0x9c>
 801867a:	2302      	movs	r3, #2
 801867c:	e028      	b.n	80186d0 <dir_sdi+0xee>
			ofs -= csz;
 801867e:	683a      	ldr	r2, [r7, #0]
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	1ad3      	subs	r3, r2, r3
 8018684:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018686:	683a      	ldr	r2, [r7, #0]
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	429a      	cmp	r2, r3
 801868c:	d2e1      	bcs.n	8018652 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801868e:	6979      	ldr	r1, [r7, #20]
 8018690:	6938      	ldr	r0, [r7, #16]
 8018692:	f7ff fcc5 	bl	8018020 <clust2sect>
 8018696:	4602      	mov	r2, r0
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	697a      	ldr	r2, [r7, #20]
 80186a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	69db      	ldr	r3, [r3, #28]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d101      	bne.n	80186ae <dir_sdi+0xcc>
 80186aa:	2302      	movs	r3, #2
 80186ac:	e010      	b.n	80186d0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	69da      	ldr	r2, [r3, #28]
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	0a5b      	lsrs	r3, r3, #9
 80186b6:	441a      	add	r2, r3
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186c8:	441a      	add	r2, r3
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80186ce:	2300      	movs	r3, #0
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	3718      	adds	r7, #24
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b086      	sub	sp, #24
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	695b      	ldr	r3, [r3, #20]
 80186ec:	3320      	adds	r3, #32
 80186ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	69db      	ldr	r3, [r3, #28]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d003      	beq.n	8018700 <dir_next+0x28>
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80186fe:	d301      	bcc.n	8018704 <dir_next+0x2c>
 8018700:	2304      	movs	r3, #4
 8018702:	e0aa      	b.n	801885a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801870a:	2b00      	cmp	r3, #0
 801870c:	f040 8098 	bne.w	8018840 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	69db      	ldr	r3, [r3, #28]
 8018714:	1c5a      	adds	r2, r3, #1
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	699b      	ldr	r3, [r3, #24]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d10b      	bne.n	801873a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	095b      	lsrs	r3, r3, #5
 8018726:	68fa      	ldr	r2, [r7, #12]
 8018728:	8912      	ldrh	r2, [r2, #8]
 801872a:	4293      	cmp	r3, r2
 801872c:	f0c0 8088 	bcc.w	8018840 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2200      	movs	r2, #0
 8018734:	61da      	str	r2, [r3, #28]
 8018736:	2304      	movs	r3, #4
 8018738:	e08f      	b.n	801885a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	0a5b      	lsrs	r3, r3, #9
 801873e:	68fa      	ldr	r2, [r7, #12]
 8018740:	8952      	ldrh	r2, [r2, #10]
 8018742:	3a01      	subs	r2, #1
 8018744:	4013      	ands	r3, r2
 8018746:	2b00      	cmp	r3, #0
 8018748:	d17a      	bne.n	8018840 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801874a:	687a      	ldr	r2, [r7, #4]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	699b      	ldr	r3, [r3, #24]
 8018750:	4619      	mov	r1, r3
 8018752:	4610      	mov	r0, r2
 8018754:	f7ff fc83 	bl	801805e <get_fat>
 8018758:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	2b01      	cmp	r3, #1
 801875e:	d801      	bhi.n	8018764 <dir_next+0x8c>
 8018760:	2302      	movs	r3, #2
 8018762:	e07a      	b.n	801885a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801876a:	d101      	bne.n	8018770 <dir_next+0x98>
 801876c:	2301      	movs	r3, #1
 801876e:	e074      	b.n	801885a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	699b      	ldr	r3, [r3, #24]
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	429a      	cmp	r2, r3
 8018778:	d358      	bcc.n	801882c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d104      	bne.n	801878a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2200      	movs	r2, #0
 8018784:	61da      	str	r2, [r3, #28]
 8018786:	2304      	movs	r3, #4
 8018788:	e067      	b.n	801885a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801878a:	687a      	ldr	r2, [r7, #4]
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	699b      	ldr	r3, [r3, #24]
 8018790:	4619      	mov	r1, r3
 8018792:	4610      	mov	r0, r2
 8018794:	f7ff fe59 	bl	801844a <create_chain>
 8018798:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801879a:	697b      	ldr	r3, [r7, #20]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d101      	bne.n	80187a4 <dir_next+0xcc>
 80187a0:	2307      	movs	r3, #7
 80187a2:	e05a      	b.n	801885a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80187a4:	697b      	ldr	r3, [r7, #20]
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d101      	bne.n	80187ae <dir_next+0xd6>
 80187aa:	2302      	movs	r3, #2
 80187ac:	e055      	b.n	801885a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80187ae:	697b      	ldr	r3, [r7, #20]
 80187b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187b4:	d101      	bne.n	80187ba <dir_next+0xe2>
 80187b6:	2301      	movs	r3, #1
 80187b8:	e04f      	b.n	801885a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80187ba:	68f8      	ldr	r0, [r7, #12]
 80187bc:	f7ff fb50 	bl	8017e60 <sync_window>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d001      	beq.n	80187ca <dir_next+0xf2>
 80187c6:	2301      	movs	r3, #1
 80187c8:	e047      	b.n	801885a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	3334      	adds	r3, #52	@ 0x34
 80187ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80187d2:	2100      	movs	r1, #0
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7ff f97a 	bl	8017ace <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80187da:	2300      	movs	r3, #0
 80187dc:	613b      	str	r3, [r7, #16]
 80187de:	6979      	ldr	r1, [r7, #20]
 80187e0:	68f8      	ldr	r0, [r7, #12]
 80187e2:	f7ff fc1d 	bl	8018020 <clust2sect>
 80187e6:	4602      	mov	r2, r0
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80187ec:	e012      	b.n	8018814 <dir_next+0x13c>
						fs->wflag = 1;
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	2201      	movs	r2, #1
 80187f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80187f4:	68f8      	ldr	r0, [r7, #12]
 80187f6:	f7ff fb33 	bl	8017e60 <sync_window>
 80187fa:	4603      	mov	r3, r0
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d001      	beq.n	8018804 <dir_next+0x12c>
 8018800:	2301      	movs	r3, #1
 8018802:	e02a      	b.n	801885a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018804:	693b      	ldr	r3, [r7, #16]
 8018806:	3301      	adds	r3, #1
 8018808:	613b      	str	r3, [r7, #16]
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801880e:	1c5a      	adds	r2, r3, #1
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	631a      	str	r2, [r3, #48]	@ 0x30
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	895b      	ldrh	r3, [r3, #10]
 8018818:	461a      	mov	r2, r3
 801881a:	693b      	ldr	r3, [r7, #16]
 801881c:	4293      	cmp	r3, r2
 801881e:	d3e6      	bcc.n	80187ee <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	1ad2      	subs	r2, r2, r3
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	697a      	ldr	r2, [r7, #20]
 8018830:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8018832:	6979      	ldr	r1, [r7, #20]
 8018834:	68f8      	ldr	r0, [r7, #12]
 8018836:	f7ff fbf3 	bl	8018020 <clust2sect>
 801883a:	4602      	mov	r2, r0
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	68ba      	ldr	r2, [r7, #8]
 8018844:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018852:	441a      	add	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018858:	2300      	movs	r3, #0
}
 801885a:	4618      	mov	r0, r3
 801885c:	3718      	adds	r7, #24
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}

08018862 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b086      	sub	sp, #24
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
 801886a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8018872:	2100      	movs	r1, #0
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	f7ff feb4 	bl	80185e2 <dir_sdi>
 801887a:	4603      	mov	r3, r0
 801887c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801887e:	7dfb      	ldrb	r3, [r7, #23]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d12b      	bne.n	80188dc <dir_alloc+0x7a>
		n = 0;
 8018884:	2300      	movs	r3, #0
 8018886:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	69db      	ldr	r3, [r3, #28]
 801888c:	4619      	mov	r1, r3
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f7ff fb2a 	bl	8017ee8 <move_window>
 8018894:	4603      	mov	r3, r0
 8018896:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018898:	7dfb      	ldrb	r3, [r7, #23]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d11d      	bne.n	80188da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	6a1b      	ldr	r3, [r3, #32]
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	2be5      	cmp	r3, #229	@ 0xe5
 80188a6:	d004      	beq.n	80188b2 <dir_alloc+0x50>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	6a1b      	ldr	r3, [r3, #32]
 80188ac:	781b      	ldrb	r3, [r3, #0]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d107      	bne.n	80188c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80188b2:	693b      	ldr	r3, [r7, #16]
 80188b4:	3301      	adds	r3, #1
 80188b6:	613b      	str	r3, [r7, #16]
 80188b8:	693a      	ldr	r2, [r7, #16]
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	429a      	cmp	r2, r3
 80188be:	d102      	bne.n	80188c6 <dir_alloc+0x64>
 80188c0:	e00c      	b.n	80188dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80188c2:	2300      	movs	r3, #0
 80188c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80188c6:	2101      	movs	r1, #1
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f7ff ff05 	bl	80186d8 <dir_next>
 80188ce:	4603      	mov	r3, r0
 80188d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80188d2:	7dfb      	ldrb	r3, [r7, #23]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d0d7      	beq.n	8018888 <dir_alloc+0x26>
 80188d8:	e000      	b.n	80188dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80188da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80188dc:	7dfb      	ldrb	r3, [r7, #23]
 80188de:	2b04      	cmp	r3, #4
 80188e0:	d101      	bne.n	80188e6 <dir_alloc+0x84>
 80188e2:	2307      	movs	r3, #7
 80188e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80188e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3718      	adds	r7, #24
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}

080188f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b084      	sub	sp, #16
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
 80188f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	331a      	adds	r3, #26
 80188fe:	4618      	mov	r0, r3
 8018900:	f7ff f842 	bl	8017988 <ld_word>
 8018904:	4603      	mov	r3, r0
 8018906:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	2b03      	cmp	r3, #3
 801890e:	d109      	bne.n	8018924 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	3314      	adds	r3, #20
 8018914:	4618      	mov	r0, r3
 8018916:	f7ff f837 	bl	8017988 <ld_word>
 801891a:	4603      	mov	r3, r0
 801891c:	041b      	lsls	r3, r3, #16
 801891e:	68fa      	ldr	r2, [r7, #12]
 8018920:	4313      	orrs	r3, r2
 8018922:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018924:	68fb      	ldr	r3, [r7, #12]
}
 8018926:	4618      	mov	r0, r3
 8018928:	3710      	adds	r7, #16
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}

0801892e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801892e:	b580      	push	{r7, lr}
 8018930:	b084      	sub	sp, #16
 8018932:	af00      	add	r7, sp, #0
 8018934:	60f8      	str	r0, [r7, #12]
 8018936:	60b9      	str	r1, [r7, #8]
 8018938:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	331a      	adds	r3, #26
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	b292      	uxth	r2, r2
 8018942:	4611      	mov	r1, r2
 8018944:	4618      	mov	r0, r3
 8018946:	f7ff f85a 	bl	80179fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	781b      	ldrb	r3, [r3, #0]
 801894e:	2b03      	cmp	r3, #3
 8018950:	d109      	bne.n	8018966 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018952:	68bb      	ldr	r3, [r7, #8]
 8018954:	f103 0214 	add.w	r2, r3, #20
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	0c1b      	lsrs	r3, r3, #16
 801895c:	b29b      	uxth	r3, r3
 801895e:	4619      	mov	r1, r3
 8018960:	4610      	mov	r0, r2
 8018962:	f7ff f84c 	bl	80179fe <st_word>
	}
}
 8018966:	bf00      	nop
 8018968:	3710      	adds	r7, #16
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}
	...

08018970 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018970:	b590      	push	{r4, r7, lr}
 8018972:	b087      	sub	sp, #28
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	331a      	adds	r3, #26
 801897e:	4618      	mov	r0, r3
 8018980:	f7ff f802 	bl	8017988 <ld_word>
 8018984:	4603      	mov	r3, r0
 8018986:	2b00      	cmp	r3, #0
 8018988:	d001      	beq.n	801898e <cmp_lfn+0x1e>
 801898a:	2300      	movs	r3, #0
 801898c:	e059      	b.n	8018a42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018996:	1e5a      	subs	r2, r3, #1
 8018998:	4613      	mov	r3, r2
 801899a:	005b      	lsls	r3, r3, #1
 801899c:	4413      	add	r3, r2
 801899e:	009b      	lsls	r3, r3, #2
 80189a0:	4413      	add	r3, r2
 80189a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80189a4:	2301      	movs	r3, #1
 80189a6:	81fb      	strh	r3, [r7, #14]
 80189a8:	2300      	movs	r3, #0
 80189aa:	613b      	str	r3, [r7, #16]
 80189ac:	e033      	b.n	8018a16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80189ae:	4a27      	ldr	r2, [pc, #156]	@ (8018a4c <cmp_lfn+0xdc>)
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	4413      	add	r3, r2
 80189b4:	781b      	ldrb	r3, [r3, #0]
 80189b6:	461a      	mov	r2, r3
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	4413      	add	r3, r2
 80189bc:	4618      	mov	r0, r3
 80189be:	f7fe ffe3 	bl	8017988 <ld_word>
 80189c2:	4603      	mov	r3, r0
 80189c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80189c6:	89fb      	ldrh	r3, [r7, #14]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d01a      	beq.n	8018a02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80189d0:	d812      	bhi.n	80189f8 <cmp_lfn+0x88>
 80189d2:	89bb      	ldrh	r3, [r7, #12]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f001 fe21 	bl	801a61c <ff_wtoupper>
 80189da:	4603      	mov	r3, r0
 80189dc:	461c      	mov	r4, r3
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	1c5a      	adds	r2, r3, #1
 80189e2:	617a      	str	r2, [r7, #20]
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	4413      	add	r3, r2
 80189ea:	881b      	ldrh	r3, [r3, #0]
 80189ec:	4618      	mov	r0, r3
 80189ee:	f001 fe15 	bl	801a61c <ff_wtoupper>
 80189f2:	4603      	mov	r3, r0
 80189f4:	429c      	cmp	r4, r3
 80189f6:	d001      	beq.n	80189fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80189f8:	2300      	movs	r3, #0
 80189fa:	e022      	b.n	8018a42 <cmp_lfn+0xd2>
			}
			wc = uc;
 80189fc:	89bb      	ldrh	r3, [r7, #12]
 80189fe:	81fb      	strh	r3, [r7, #14]
 8018a00:	e006      	b.n	8018a10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018a02:	89bb      	ldrh	r3, [r7, #12]
 8018a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018a08:	4293      	cmp	r3, r2
 8018a0a:	d001      	beq.n	8018a10 <cmp_lfn+0xa0>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	e018      	b.n	8018a42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	3301      	adds	r3, #1
 8018a14:	613b      	str	r3, [r7, #16]
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	2b0c      	cmp	r3, #12
 8018a1a:	d9c8      	bls.n	80189ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00b      	beq.n	8018a40 <cmp_lfn+0xd0>
 8018a28:	89fb      	ldrh	r3, [r7, #14]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d008      	beq.n	8018a40 <cmp_lfn+0xd0>
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	005b      	lsls	r3, r3, #1
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	4413      	add	r3, r2
 8018a36:	881b      	ldrh	r3, [r3, #0]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d001      	beq.n	8018a40 <cmp_lfn+0xd0>
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	e000      	b.n	8018a42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018a40:	2301      	movs	r3, #1
}
 8018a42:	4618      	mov	r0, r3
 8018a44:	371c      	adds	r7, #28
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd90      	pop	{r4, r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	08022c50 	.word	0x08022c50

08018a50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b088      	sub	sp, #32
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	4611      	mov	r1, r2
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	460b      	mov	r3, r1
 8018a60:	71fb      	strb	r3, [r7, #7]
 8018a62:	4613      	mov	r3, r2
 8018a64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	330d      	adds	r3, #13
 8018a6a:	79ba      	ldrb	r2, [r7, #6]
 8018a6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	330b      	adds	r3, #11
 8018a72:	220f      	movs	r2, #15
 8018a74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	330c      	adds	r3, #12
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018a7e:	68bb      	ldr	r3, [r7, #8]
 8018a80:	331a      	adds	r3, #26
 8018a82:	2100      	movs	r1, #0
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7fe ffba 	bl	80179fe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018a8a:	79fb      	ldrb	r3, [r7, #7]
 8018a8c:	1e5a      	subs	r2, r3, #1
 8018a8e:	4613      	mov	r3, r2
 8018a90:	005b      	lsls	r3, r3, #1
 8018a92:	4413      	add	r3, r2
 8018a94:	009b      	lsls	r3, r3, #2
 8018a96:	4413      	add	r3, r2
 8018a98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	82fb      	strh	r3, [r7, #22]
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018aa2:	8afb      	ldrh	r3, [r7, #22]
 8018aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d007      	beq.n	8018abc <put_lfn+0x6c>
 8018aac:	69fb      	ldr	r3, [r7, #28]
 8018aae:	1c5a      	adds	r2, r3, #1
 8018ab0:	61fa      	str	r2, [r7, #28]
 8018ab2:	005b      	lsls	r3, r3, #1
 8018ab4:	68fa      	ldr	r2, [r7, #12]
 8018ab6:	4413      	add	r3, r2
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018abc:	4a17      	ldr	r2, [pc, #92]	@ (8018b1c <put_lfn+0xcc>)
 8018abe:	69bb      	ldr	r3, [r7, #24]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	781b      	ldrb	r3, [r3, #0]
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	4413      	add	r3, r2
 8018aca:	8afa      	ldrh	r2, [r7, #22]
 8018acc:	4611      	mov	r1, r2
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7fe ff95 	bl	80179fe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018ad4:	8afb      	ldrh	r3, [r7, #22]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d102      	bne.n	8018ae0 <put_lfn+0x90>
 8018ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018ade:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	61bb      	str	r3, [r7, #24]
 8018ae6:	69bb      	ldr	r3, [r7, #24]
 8018ae8:	2b0c      	cmp	r3, #12
 8018aea:	d9da      	bls.n	8018aa2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018aec:	8afb      	ldrh	r3, [r7, #22]
 8018aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018af2:	4293      	cmp	r3, r2
 8018af4:	d006      	beq.n	8018b04 <put_lfn+0xb4>
 8018af6:	69fb      	ldr	r3, [r7, #28]
 8018af8:	005b      	lsls	r3, r3, #1
 8018afa:	68fa      	ldr	r2, [r7, #12]
 8018afc:	4413      	add	r3, r2
 8018afe:	881b      	ldrh	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d103      	bne.n	8018b0c <put_lfn+0xbc>
 8018b04:	79fb      	ldrb	r3, [r7, #7]
 8018b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018b0c:	68bb      	ldr	r3, [r7, #8]
 8018b0e:	79fa      	ldrb	r2, [r7, #7]
 8018b10:	701a      	strb	r2, [r3, #0]
}
 8018b12:	bf00      	nop
 8018b14:	3720      	adds	r7, #32
 8018b16:	46bd      	mov	sp, r7
 8018b18:	bd80      	pop	{r7, pc}
 8018b1a:	bf00      	nop
 8018b1c:	08022c50 	.word	0x08022c50

08018b20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b08c      	sub	sp, #48	@ 0x30
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	60f8      	str	r0, [r7, #12]
 8018b28:	60b9      	str	r1, [r7, #8]
 8018b2a:	607a      	str	r2, [r7, #4]
 8018b2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018b2e:	220b      	movs	r2, #11
 8018b30:	68b9      	ldr	r1, [r7, #8]
 8018b32:	68f8      	ldr	r0, [r7, #12]
 8018b34:	f7fe ffaa 	bl	8017a8c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	2b05      	cmp	r3, #5
 8018b3c:	d92b      	bls.n	8018b96 <gen_numname+0x76>
		sr = seq;
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018b42:	e022      	b.n	8018b8a <gen_numname+0x6a>
			wc = *lfn++;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	1c9a      	adds	r2, r3, #2
 8018b48:	607a      	str	r2, [r7, #4]
 8018b4a:	881b      	ldrh	r3, [r3, #0]
 8018b4c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8018b4e:	2300      	movs	r3, #0
 8018b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b52:	e017      	b.n	8018b84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	005a      	lsls	r2, r3, #1
 8018b58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b5a:	f003 0301 	and.w	r3, r3, #1
 8018b5e:	4413      	add	r3, r2
 8018b60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018b62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b64:	085b      	lsrs	r3, r3, #1
 8018b66:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018b68:	69fb      	ldr	r3, [r7, #28]
 8018b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d005      	beq.n	8018b7e <gen_numname+0x5e>
 8018b72:	69fb      	ldr	r3, [r7, #28]
 8018b74:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8018b78:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8018b7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b80:	3301      	adds	r3, #1
 8018b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b86:	2b0f      	cmp	r3, #15
 8018b88:	d9e4      	bls.n	8018b54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d1d8      	bne.n	8018b44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018b92:	69fb      	ldr	r3, [r7, #28]
 8018b94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018b96:	2307      	movs	r3, #7
 8018b98:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8018b9a:	683b      	ldr	r3, [r7, #0]
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	f003 030f 	and.w	r3, r3, #15
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	3330      	adds	r3, #48	@ 0x30
 8018ba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8018baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018bae:	2b39      	cmp	r3, #57	@ 0x39
 8018bb0:	d904      	bls.n	8018bbc <gen_numname+0x9c>
 8018bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018bb6:	3307      	adds	r3, #7
 8018bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8018bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbe:	1e5a      	subs	r2, r3, #1
 8018bc0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018bc2:	3330      	adds	r3, #48	@ 0x30
 8018bc4:	443b      	add	r3, r7
 8018bc6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018bca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	091b      	lsrs	r3, r3, #4
 8018bd2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018bd4:	683b      	ldr	r3, [r7, #0]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d1df      	bne.n	8018b9a <gen_numname+0x7a>
	ns[i] = '~';
 8018bda:	f107 0214 	add.w	r2, r7, #20
 8018bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018be0:	4413      	add	r3, r2
 8018be2:	227e      	movs	r2, #126	@ 0x7e
 8018be4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018be6:	2300      	movs	r3, #0
 8018be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8018bea:	e002      	b.n	8018bf2 <gen_numname+0xd2>
 8018bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bee:	3301      	adds	r3, #1
 8018bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8018bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf6:	429a      	cmp	r2, r3
 8018bf8:	d205      	bcs.n	8018c06 <gen_numname+0xe6>
 8018bfa:	68fa      	ldr	r2, [r7, #12]
 8018bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bfe:	4413      	add	r3, r2
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	2b20      	cmp	r3, #32
 8018c04:	d1f2      	bne.n	8018bec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c08:	2b07      	cmp	r3, #7
 8018c0a:	d807      	bhi.n	8018c1c <gen_numname+0xfc>
 8018c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c0e:	1c5a      	adds	r2, r3, #1
 8018c10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8018c12:	3330      	adds	r3, #48	@ 0x30
 8018c14:	443b      	add	r3, r7
 8018c16:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018c1a:	e000      	b.n	8018c1e <gen_numname+0xfe>
 8018c1c:	2120      	movs	r1, #32
 8018c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c20:	1c5a      	adds	r2, r3, #1
 8018c22:	627a      	str	r2, [r7, #36]	@ 0x24
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	4413      	add	r3, r2
 8018c28:	460a      	mov	r2, r1
 8018c2a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c2e:	2b07      	cmp	r3, #7
 8018c30:	d9e9      	bls.n	8018c06 <gen_numname+0xe6>
}
 8018c32:	bf00      	nop
 8018c34:	bf00      	nop
 8018c36:	3730      	adds	r7, #48	@ 0x30
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018c3c:	b480      	push	{r7}
 8018c3e:	b085      	sub	sp, #20
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018c44:	2300      	movs	r3, #0
 8018c46:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018c48:	230b      	movs	r3, #11
 8018c4a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018c4c:	7bfb      	ldrb	r3, [r7, #15]
 8018c4e:	b2da      	uxtb	r2, r3
 8018c50:	0852      	lsrs	r2, r2, #1
 8018c52:	01db      	lsls	r3, r3, #7
 8018c54:	4313      	orrs	r3, r2
 8018c56:	b2da      	uxtb	r2, r3
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	1c59      	adds	r1, r3, #1
 8018c5c:	6079      	str	r1, [r7, #4]
 8018c5e:	781b      	ldrb	r3, [r3, #0]
 8018c60:	4413      	add	r3, r2
 8018c62:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	3b01      	subs	r3, #1
 8018c68:	60bb      	str	r3, [r7, #8]
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d1ed      	bne.n	8018c4c <sum_sfn+0x10>
	return sum;
 8018c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	3714      	adds	r7, #20
 8018c76:	46bd      	mov	sp, r7
 8018c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7c:	4770      	bx	lr

08018c7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018c7e:	b580      	push	{r7, lr}
 8018c80:	b086      	sub	sp, #24
 8018c82:	af00      	add	r7, sp, #0
 8018c84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	f7ff fca7 	bl	80185e2 <dir_sdi>
 8018c94:	4603      	mov	r3, r0
 8018c96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018c98:	7dfb      	ldrb	r3, [r7, #23]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d001      	beq.n	8018ca2 <dir_find+0x24>
 8018c9e:	7dfb      	ldrb	r3, [r7, #23]
 8018ca0:	e0a9      	b.n	8018df6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018ca2:	23ff      	movs	r3, #255	@ 0xff
 8018ca4:	753b      	strb	r3, [r7, #20]
 8018ca6:	7d3b      	ldrb	r3, [r7, #20]
 8018ca8:	757b      	strb	r3, [r7, #21]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	f04f 32ff 	mov.w	r2, #4294967295
 8018cb0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	69db      	ldr	r3, [r3, #28]
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	6938      	ldr	r0, [r7, #16]
 8018cba:	f7ff f915 	bl	8017ee8 <move_window>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018cc2:	7dfb      	ldrb	r3, [r7, #23]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	f040 8090 	bne.w	8018dea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6a1b      	ldr	r3, [r3, #32]
 8018cce:	781b      	ldrb	r3, [r3, #0]
 8018cd0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018cd2:	7dbb      	ldrb	r3, [r7, #22]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d102      	bne.n	8018cde <dir_find+0x60>
 8018cd8:	2304      	movs	r3, #4
 8018cda:	75fb      	strb	r3, [r7, #23]
 8018cdc:	e08a      	b.n	8018df4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6a1b      	ldr	r3, [r3, #32]
 8018ce2:	330b      	adds	r3, #11
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018cea:	73fb      	strb	r3, [r7, #15]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	7bfa      	ldrb	r2, [r7, #15]
 8018cf0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018cf2:	7dbb      	ldrb	r3, [r7, #22]
 8018cf4:	2be5      	cmp	r3, #229	@ 0xe5
 8018cf6:	d007      	beq.n	8018d08 <dir_find+0x8a>
 8018cf8:	7bfb      	ldrb	r3, [r7, #15]
 8018cfa:	f003 0308 	and.w	r3, r3, #8
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d009      	beq.n	8018d16 <dir_find+0x98>
 8018d02:	7bfb      	ldrb	r3, [r7, #15]
 8018d04:	2b0f      	cmp	r3, #15
 8018d06:	d006      	beq.n	8018d16 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018d08:	23ff      	movs	r3, #255	@ 0xff
 8018d0a:	757b      	strb	r3, [r7, #21]
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8018d12:	631a      	str	r2, [r3, #48]	@ 0x30
 8018d14:	e05e      	b.n	8018dd4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018d16:	7bfb      	ldrb	r3, [r7, #15]
 8018d18:	2b0f      	cmp	r3, #15
 8018d1a:	d136      	bne.n	8018d8a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d154      	bne.n	8018dd4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018d2a:	7dbb      	ldrb	r3, [r7, #22]
 8018d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d00d      	beq.n	8018d50 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6a1b      	ldr	r3, [r3, #32]
 8018d38:	7b5b      	ldrb	r3, [r3, #13]
 8018d3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018d3c:	7dbb      	ldrb	r3, [r7, #22]
 8018d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018d42:	75bb      	strb	r3, [r7, #22]
 8018d44:	7dbb      	ldrb	r3, [r7, #22]
 8018d46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	695a      	ldr	r2, [r3, #20]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018d50:	7dba      	ldrb	r2, [r7, #22]
 8018d52:	7d7b      	ldrb	r3, [r7, #21]
 8018d54:	429a      	cmp	r2, r3
 8018d56:	d115      	bne.n	8018d84 <dir_find+0x106>
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	6a1b      	ldr	r3, [r3, #32]
 8018d5c:	330d      	adds	r3, #13
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	7d3a      	ldrb	r2, [r7, #20]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d10e      	bne.n	8018d84 <dir_find+0x106>
 8018d66:	693b      	ldr	r3, [r7, #16]
 8018d68:	68da      	ldr	r2, [r3, #12]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6a1b      	ldr	r3, [r3, #32]
 8018d6e:	4619      	mov	r1, r3
 8018d70:	4610      	mov	r0, r2
 8018d72:	f7ff fdfd 	bl	8018970 <cmp_lfn>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d003      	beq.n	8018d84 <dir_find+0x106>
 8018d7c:	7d7b      	ldrb	r3, [r7, #21]
 8018d7e:	3b01      	subs	r3, #1
 8018d80:	b2db      	uxtb	r3, r3
 8018d82:	e000      	b.n	8018d86 <dir_find+0x108>
 8018d84:	23ff      	movs	r3, #255	@ 0xff
 8018d86:	757b      	strb	r3, [r7, #21]
 8018d88:	e024      	b.n	8018dd4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018d8a:	7d7b      	ldrb	r3, [r7, #21]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d109      	bne.n	8018da4 <dir_find+0x126>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6a1b      	ldr	r3, [r3, #32]
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7ff ff51 	bl	8018c3c <sum_sfn>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	7d3b      	ldrb	r3, [r7, #20]
 8018da0:	4293      	cmp	r3, r2
 8018da2:	d024      	beq.n	8018dee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018daa:	f003 0301 	and.w	r3, r3, #1
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d10a      	bne.n	8018dc8 <dir_find+0x14a>
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6a18      	ldr	r0, [r3, #32]
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	3324      	adds	r3, #36	@ 0x24
 8018dba:	220b      	movs	r2, #11
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	f7fe fea1 	bl	8017b04 <mem_cmp>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d014      	beq.n	8018df2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018dc8:	23ff      	movs	r3, #255	@ 0xff
 8018dca:	757b      	strb	r3, [r7, #21]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f04f 32ff 	mov.w	r2, #4294967295
 8018dd2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018dd4:	2100      	movs	r1, #0
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f7ff fc7e 	bl	80186d8 <dir_next>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018de0:	7dfb      	ldrb	r3, [r7, #23]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	f43f af65 	beq.w	8018cb2 <dir_find+0x34>
 8018de8:	e004      	b.n	8018df4 <dir_find+0x176>
		if (res != FR_OK) break;
 8018dea:	bf00      	nop
 8018dec:	e002      	b.n	8018df4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018dee:	bf00      	nop
 8018df0:	e000      	b.n	8018df4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018df2:	bf00      	nop

	return res;
 8018df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	3718      	adds	r7, #24
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}
	...

08018e00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b08c      	sub	sp, #48	@ 0x30
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018e14:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d001      	beq.n	8018e20 <dir_register+0x20>
 8018e1c:	2306      	movs	r3, #6
 8018e1e:	e0e0      	b.n	8018fe2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018e20:	2300      	movs	r3, #0
 8018e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e24:	e002      	b.n	8018e2c <dir_register+0x2c>
 8018e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e28:	3301      	adds	r3, #1
 8018e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	68da      	ldr	r2, [r3, #12]
 8018e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e32:	005b      	lsls	r3, r3, #1
 8018e34:	4413      	add	r3, r2
 8018e36:	881b      	ldrh	r3, [r3, #0]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d1f4      	bne.n	8018e26 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8018e42:	f107 030c 	add.w	r3, r7, #12
 8018e46:	220c      	movs	r2, #12
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7fe fe1f 	bl	8017a8c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018e4e:	7dfb      	ldrb	r3, [r7, #23]
 8018e50:	f003 0301 	and.w	r3, r3, #1
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d032      	beq.n	8018ebe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	2240      	movs	r2, #64	@ 0x40
 8018e5c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8018e60:	2301      	movs	r3, #1
 8018e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e64:	e016      	b.n	8018e94 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8018e6c:	69fb      	ldr	r3, [r7, #28]
 8018e6e:	68da      	ldr	r2, [r3, #12]
 8018e70:	f107 010c 	add.w	r1, r7, #12
 8018e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e76:	f7ff fe53 	bl	8018b20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f7ff feff 	bl	8018c7e <dir_find>
 8018e80:	4603      	mov	r3, r0
 8018e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8018e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d106      	bne.n	8018e9c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e90:	3301      	adds	r3, #1
 8018e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e96:	2b63      	cmp	r3, #99	@ 0x63
 8018e98:	d9e5      	bls.n	8018e66 <dir_register+0x66>
 8018e9a:	e000      	b.n	8018e9e <dir_register+0x9e>
			if (res != FR_OK) break;
 8018e9c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ea0:	2b64      	cmp	r3, #100	@ 0x64
 8018ea2:	d101      	bne.n	8018ea8 <dir_register+0xa8>
 8018ea4:	2307      	movs	r3, #7
 8018ea6:	e09c      	b.n	8018fe2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018eac:	2b04      	cmp	r3, #4
 8018eae:	d002      	beq.n	8018eb6 <dir_register+0xb6>
 8018eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018eb4:	e095      	b.n	8018fe2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018eb6:	7dfa      	ldrb	r2, [r7, #23]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018ebe:	7dfb      	ldrb	r3, [r7, #23]
 8018ec0:	f003 0302 	and.w	r3, r3, #2
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d007      	beq.n	8018ed8 <dir_register+0xd8>
 8018ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eca:	330c      	adds	r3, #12
 8018ecc:	4a47      	ldr	r2, [pc, #284]	@ (8018fec <dir_register+0x1ec>)
 8018ece:	fba2 2303 	umull	r2, r3, r2, r3
 8018ed2:	089b      	lsrs	r3, r3, #2
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	e000      	b.n	8018eda <dir_register+0xda>
 8018ed8:	2301      	movs	r3, #1
 8018eda:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018edc:	6a39      	ldr	r1, [r7, #32]
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f7ff fcbf 	bl	8018862 <dir_alloc>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018eea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d148      	bne.n	8018f84 <dir_register+0x184>
 8018ef2:	6a3b      	ldr	r3, [r7, #32]
 8018ef4:	3b01      	subs	r3, #1
 8018ef6:	623b      	str	r3, [r7, #32]
 8018ef8:	6a3b      	ldr	r3, [r7, #32]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d042      	beq.n	8018f84 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	695a      	ldr	r2, [r3, #20]
 8018f02:	6a3b      	ldr	r3, [r7, #32]
 8018f04:	015b      	lsls	r3, r3, #5
 8018f06:	1ad3      	subs	r3, r2, r3
 8018f08:	4619      	mov	r1, r3
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	f7ff fb69 	bl	80185e2 <dir_sdi>
 8018f10:	4603      	mov	r3, r0
 8018f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d132      	bne.n	8018f84 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	3324      	adds	r3, #36	@ 0x24
 8018f22:	4618      	mov	r0, r3
 8018f24:	f7ff fe8a 	bl	8018c3c <sum_sfn>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	69db      	ldr	r3, [r3, #28]
 8018f30:	4619      	mov	r1, r3
 8018f32:	69f8      	ldr	r0, [r7, #28]
 8018f34:	f7fe ffd8 	bl	8017ee8 <move_window>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8018f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d11d      	bne.n	8018f82 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018f46:	69fb      	ldr	r3, [r7, #28]
 8018f48:	68d8      	ldr	r0, [r3, #12]
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6a19      	ldr	r1, [r3, #32]
 8018f4e:	6a3b      	ldr	r3, [r7, #32]
 8018f50:	b2da      	uxtb	r2, r3
 8018f52:	7efb      	ldrb	r3, [r7, #27]
 8018f54:	f7ff fd7c 	bl	8018a50 <put_lfn>
				fs->wflag = 1;
 8018f58:	69fb      	ldr	r3, [r7, #28]
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018f5e:	2100      	movs	r1, #0
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f7ff fbb9 	bl	80186d8 <dir_next>
 8018f66:	4603      	mov	r3, r0
 8018f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8018f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d107      	bne.n	8018f84 <dir_register+0x184>
 8018f74:	6a3b      	ldr	r3, [r7, #32]
 8018f76:	3b01      	subs	r3, #1
 8018f78:	623b      	str	r3, [r7, #32]
 8018f7a:	6a3b      	ldr	r3, [r7, #32]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d1d5      	bne.n	8018f2c <dir_register+0x12c>
 8018f80:	e000      	b.n	8018f84 <dir_register+0x184>
				if (res != FR_OK) break;
 8018f82:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018f84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d128      	bne.n	8018fde <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	69db      	ldr	r3, [r3, #28]
 8018f90:	4619      	mov	r1, r3
 8018f92:	69f8      	ldr	r0, [r7, #28]
 8018f94:	f7fe ffa8 	bl	8017ee8 <move_window>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8018f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d11b      	bne.n	8018fde <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	6a1b      	ldr	r3, [r3, #32]
 8018faa:	2220      	movs	r2, #32
 8018fac:	2100      	movs	r1, #0
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fe fd8d 	bl	8017ace <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6a18      	ldr	r0, [r3, #32]
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	3324      	adds	r3, #36	@ 0x24
 8018fbc:	220b      	movs	r2, #11
 8018fbe:	4619      	mov	r1, r3
 8018fc0:	f7fe fd64 	bl	8017a8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6a1b      	ldr	r3, [r3, #32]
 8018fce:	330c      	adds	r3, #12
 8018fd0:	f002 0218 	and.w	r2, r2, #24
 8018fd4:	b2d2      	uxtb	r2, r2
 8018fd6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018fd8:	69fb      	ldr	r3, [r7, #28]
 8018fda:	2201      	movs	r2, #1
 8018fdc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	3730      	adds	r7, #48	@ 0x30
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	4ec4ec4f 	.word	0x4ec4ec4f

08018ff0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b088      	sub	sp, #32
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
 8018ff8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	2200      	movs	r2, #0
 8019004:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	69db      	ldr	r3, [r3, #28]
 801900a:	2b00      	cmp	r3, #0
 801900c:	f000 80ca 	beq.w	80191a4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019018:	d032      	beq.n	8019080 <get_fileinfo+0x90>
			i = j = 0;
 801901a:	2300      	movs	r3, #0
 801901c:	61bb      	str	r3, [r7, #24]
 801901e:	69bb      	ldr	r3, [r7, #24]
 8019020:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8019022:	e01b      	b.n	801905c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8019024:	89fb      	ldrh	r3, [r7, #14]
 8019026:	2100      	movs	r1, #0
 8019028:	4618      	mov	r0, r3
 801902a:	f001 fabb 	bl	801a5a4 <ff_convert>
 801902e:	4603      	mov	r3, r0
 8019030:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8019032:	89fb      	ldrh	r3, [r7, #14]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d102      	bne.n	801903e <get_fileinfo+0x4e>
 8019038:	2300      	movs	r3, #0
 801903a:	61fb      	str	r3, [r7, #28]
 801903c:	e01a      	b.n	8019074 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801903e:	69fb      	ldr	r3, [r7, #28]
 8019040:	2bfe      	cmp	r3, #254	@ 0xfe
 8019042:	d902      	bls.n	801904a <get_fileinfo+0x5a>
 8019044:	2300      	movs	r3, #0
 8019046:	61fb      	str	r3, [r7, #28]
 8019048:	e014      	b.n	8019074 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801904a:	69fb      	ldr	r3, [r7, #28]
 801904c:	1c5a      	adds	r2, r3, #1
 801904e:	61fa      	str	r2, [r7, #28]
 8019050:	89fa      	ldrh	r2, [r7, #14]
 8019052:	b2d1      	uxtb	r1, r2
 8019054:	683a      	ldr	r2, [r7, #0]
 8019056:	4413      	add	r3, r2
 8019058:	460a      	mov	r2, r1
 801905a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801905c:	693b      	ldr	r3, [r7, #16]
 801905e:	68da      	ldr	r2, [r3, #12]
 8019060:	69bb      	ldr	r3, [r7, #24]
 8019062:	1c59      	adds	r1, r3, #1
 8019064:	61b9      	str	r1, [r7, #24]
 8019066:	005b      	lsls	r3, r3, #1
 8019068:	4413      	add	r3, r2
 801906a:	881b      	ldrh	r3, [r3, #0]
 801906c:	81fb      	strh	r3, [r7, #14]
 801906e:	89fb      	ldrh	r3, [r7, #14]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d1d7      	bne.n	8019024 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8019074:	683a      	ldr	r2, [r7, #0]
 8019076:	69fb      	ldr	r3, [r7, #28]
 8019078:	4413      	add	r3, r2
 801907a:	3316      	adds	r3, #22
 801907c:	2200      	movs	r2, #0
 801907e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8019080:	2300      	movs	r3, #0
 8019082:	61bb      	str	r3, [r7, #24]
 8019084:	69bb      	ldr	r3, [r7, #24]
 8019086:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8019088:	683a      	ldr	r2, [r7, #0]
 801908a:	69fb      	ldr	r3, [r7, #28]
 801908c:	4413      	add	r3, r2
 801908e:	3316      	adds	r3, #22
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8019094:	e04d      	b.n	8019132 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	6a1a      	ldr	r2, [r3, #32]
 801909a:	69fb      	ldr	r3, [r7, #28]
 801909c:	1c59      	adds	r1, r3, #1
 801909e:	61f9      	str	r1, [r7, #28]
 80190a0:	4413      	add	r3, r2
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80190a6:	7dfb      	ldrb	r3, [r7, #23]
 80190a8:	2b20      	cmp	r3, #32
 80190aa:	d041      	beq.n	8019130 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80190ac:	7dfb      	ldrb	r3, [r7, #23]
 80190ae:	2b05      	cmp	r3, #5
 80190b0:	d101      	bne.n	80190b6 <get_fileinfo+0xc6>
 80190b2:	23e5      	movs	r3, #229	@ 0xe5
 80190b4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80190b6:	69fb      	ldr	r3, [r7, #28]
 80190b8:	2b09      	cmp	r3, #9
 80190ba:	d10f      	bne.n	80190dc <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 80190bc:	89bb      	ldrh	r3, [r7, #12]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d105      	bne.n	80190ce <get_fileinfo+0xde>
 80190c2:	683a      	ldr	r2, [r7, #0]
 80190c4:	69bb      	ldr	r3, [r7, #24]
 80190c6:	4413      	add	r3, r2
 80190c8:	3316      	adds	r3, #22
 80190ca:	222e      	movs	r2, #46	@ 0x2e
 80190cc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80190ce:	69bb      	ldr	r3, [r7, #24]
 80190d0:	1c5a      	adds	r2, r3, #1
 80190d2:	61ba      	str	r2, [r7, #24]
 80190d4:	683a      	ldr	r2, [r7, #0]
 80190d6:	4413      	add	r3, r2
 80190d8:	222e      	movs	r2, #46	@ 0x2e
 80190da:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80190dc:	683a      	ldr	r2, [r7, #0]
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	4413      	add	r3, r2
 80190e2:	3309      	adds	r3, #9
 80190e4:	7dfa      	ldrb	r2, [r7, #23]
 80190e6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80190e8:	89bb      	ldrh	r3, [r7, #12]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d11c      	bne.n	8019128 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80190ee:	7dfb      	ldrb	r3, [r7, #23]
 80190f0:	2b40      	cmp	r3, #64	@ 0x40
 80190f2:	d913      	bls.n	801911c <get_fileinfo+0x12c>
 80190f4:	7dfb      	ldrb	r3, [r7, #23]
 80190f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80190f8:	d810      	bhi.n	801911c <get_fileinfo+0x12c>
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6a1b      	ldr	r3, [r3, #32]
 80190fe:	330c      	adds	r3, #12
 8019100:	781b      	ldrb	r3, [r3, #0]
 8019102:	461a      	mov	r2, r3
 8019104:	69fb      	ldr	r3, [r7, #28]
 8019106:	2b08      	cmp	r3, #8
 8019108:	d901      	bls.n	801910e <get_fileinfo+0x11e>
 801910a:	2310      	movs	r3, #16
 801910c:	e000      	b.n	8019110 <get_fileinfo+0x120>
 801910e:	2308      	movs	r3, #8
 8019110:	4013      	ands	r3, r2
 8019112:	2b00      	cmp	r3, #0
 8019114:	d002      	beq.n	801911c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8019116:	7dfb      	ldrb	r3, [r7, #23]
 8019118:	3320      	adds	r3, #32
 801911a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801911c:	683a      	ldr	r2, [r7, #0]
 801911e:	69bb      	ldr	r3, [r7, #24]
 8019120:	4413      	add	r3, r2
 8019122:	3316      	adds	r3, #22
 8019124:	7dfa      	ldrb	r2, [r7, #23]
 8019126:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8019128:	69bb      	ldr	r3, [r7, #24]
 801912a:	3301      	adds	r3, #1
 801912c:	61bb      	str	r3, [r7, #24]
 801912e:	e000      	b.n	8019132 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8019130:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8019132:	69fb      	ldr	r3, [r7, #28]
 8019134:	2b0a      	cmp	r3, #10
 8019136:	d9ae      	bls.n	8019096 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8019138:	89bb      	ldrh	r3, [r7, #12]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d10d      	bne.n	801915a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801913e:	683a      	ldr	r2, [r7, #0]
 8019140:	69bb      	ldr	r3, [r7, #24]
 8019142:	4413      	add	r3, r2
 8019144:	3316      	adds	r3, #22
 8019146:	2200      	movs	r2, #0
 8019148:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6a1b      	ldr	r3, [r3, #32]
 801914e:	330c      	adds	r3, #12
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d101      	bne.n	801915a <get_fileinfo+0x16a>
 8019156:	2300      	movs	r3, #0
 8019158:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801915a:	683a      	ldr	r2, [r7, #0]
 801915c:	69bb      	ldr	r3, [r7, #24]
 801915e:	4413      	add	r3, r2
 8019160:	3309      	adds	r3, #9
 8019162:	2200      	movs	r2, #0
 8019164:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6a1b      	ldr	r3, [r3, #32]
 801916a:	7ada      	ldrb	r2, [r3, #11]
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6a1b      	ldr	r3, [r3, #32]
 8019174:	331c      	adds	r3, #28
 8019176:	4618      	mov	r0, r3
 8019178:	f7fe fc1e 	bl	80179b8 <ld_dword>
 801917c:	4602      	mov	r2, r0
 801917e:	683b      	ldr	r3, [r7, #0]
 8019180:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	6a1b      	ldr	r3, [r3, #32]
 8019186:	3316      	adds	r3, #22
 8019188:	4618      	mov	r0, r3
 801918a:	f7fe fc15 	bl	80179b8 <ld_dword>
 801918e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8019190:	68bb      	ldr	r3, [r7, #8]
 8019192:	b29a      	uxth	r2, r3
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	80da      	strh	r2, [r3, #6]
 8019198:	68bb      	ldr	r3, [r7, #8]
 801919a:	0c1b      	lsrs	r3, r3, #16
 801919c:	b29a      	uxth	r2, r3
 801919e:	683b      	ldr	r3, [r7, #0]
 80191a0:	809a      	strh	r2, [r3, #4]
 80191a2:	e000      	b.n	80191a6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80191a4:	bf00      	nop
}
 80191a6:	3720      	adds	r7, #32
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b08a      	sub	sp, #40	@ 0x28
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	613b      	str	r3, [r7, #16]
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	68db      	ldr	r3, [r3, #12]
 80191c2:	60fb      	str	r3, [r7, #12]
 80191c4:	2300      	movs	r3, #0
 80191c6:	617b      	str	r3, [r7, #20]
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80191cc:	69bb      	ldr	r3, [r7, #24]
 80191ce:	1c5a      	adds	r2, r3, #1
 80191d0:	61ba      	str	r2, [r7, #24]
 80191d2:	693a      	ldr	r2, [r7, #16]
 80191d4:	4413      	add	r3, r2
 80191d6:	781b      	ldrb	r3, [r3, #0]
 80191d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80191da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191dc:	2b1f      	cmp	r3, #31
 80191de:	d940      	bls.n	8019262 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80191e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80191e4:	d006      	beq.n	80191f4 <create_name+0x48>
 80191e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80191e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80191ea:	d110      	bne.n	801920e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80191ec:	e002      	b.n	80191f4 <create_name+0x48>
 80191ee:	69bb      	ldr	r3, [r7, #24]
 80191f0:	3301      	adds	r3, #1
 80191f2:	61bb      	str	r3, [r7, #24]
 80191f4:	693a      	ldr	r2, [r7, #16]
 80191f6:	69bb      	ldr	r3, [r7, #24]
 80191f8:	4413      	add	r3, r2
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80191fe:	d0f6      	beq.n	80191ee <create_name+0x42>
 8019200:	693a      	ldr	r2, [r7, #16]
 8019202:	69bb      	ldr	r3, [r7, #24]
 8019204:	4413      	add	r3, r2
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	2b5c      	cmp	r3, #92	@ 0x5c
 801920a:	d0f0      	beq.n	80191ee <create_name+0x42>
			break;
 801920c:	e02a      	b.n	8019264 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801920e:	697b      	ldr	r3, [r7, #20]
 8019210:	2bfe      	cmp	r3, #254	@ 0xfe
 8019212:	d901      	bls.n	8019218 <create_name+0x6c>
 8019214:	2306      	movs	r3, #6
 8019216:	e17d      	b.n	8019514 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8019218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801921a:	b2db      	uxtb	r3, r3
 801921c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801921e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019220:	2101      	movs	r1, #1
 8019222:	4618      	mov	r0, r3
 8019224:	f001 f9be 	bl	801a5a4 <ff_convert>
 8019228:	4603      	mov	r3, r0
 801922a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801922c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801922e:	2b00      	cmp	r3, #0
 8019230:	d101      	bne.n	8019236 <create_name+0x8a>
 8019232:	2306      	movs	r3, #6
 8019234:	e16e      	b.n	8019514 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8019236:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019238:	2b7f      	cmp	r3, #127	@ 0x7f
 801923a:	d809      	bhi.n	8019250 <create_name+0xa4>
 801923c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801923e:	4619      	mov	r1, r3
 8019240:	488d      	ldr	r0, [pc, #564]	@ (8019478 <create_name+0x2cc>)
 8019242:	f7fe fc86 	bl	8017b52 <chk_chr>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d001      	beq.n	8019250 <create_name+0xa4>
 801924c:	2306      	movs	r3, #6
 801924e:	e161      	b.n	8019514 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8019250:	697b      	ldr	r3, [r7, #20]
 8019252:	1c5a      	adds	r2, r3, #1
 8019254:	617a      	str	r2, [r7, #20]
 8019256:	005b      	lsls	r3, r3, #1
 8019258:	68fa      	ldr	r2, [r7, #12]
 801925a:	4413      	add	r3, r2
 801925c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801925e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8019260:	e7b4      	b.n	80191cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8019262:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8019264:	693a      	ldr	r2, [r7, #16]
 8019266:	69bb      	ldr	r3, [r7, #24]
 8019268:	441a      	add	r2, r3
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801926e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019270:	2b1f      	cmp	r3, #31
 8019272:	d801      	bhi.n	8019278 <create_name+0xcc>
 8019274:	2304      	movs	r3, #4
 8019276:	e000      	b.n	801927a <create_name+0xce>
 8019278:	2300      	movs	r3, #0
 801927a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801927e:	e011      	b.n	80192a4 <create_name+0xf8>
		w = lfn[di - 1];
 8019280:	697b      	ldr	r3, [r7, #20]
 8019282:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019286:	3b01      	subs	r3, #1
 8019288:	005b      	lsls	r3, r3, #1
 801928a:	68fa      	ldr	r2, [r7, #12]
 801928c:	4413      	add	r3, r2
 801928e:	881b      	ldrh	r3, [r3, #0]
 8019290:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8019292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019294:	2b20      	cmp	r3, #32
 8019296:	d002      	beq.n	801929e <create_name+0xf2>
 8019298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801929a:	2b2e      	cmp	r3, #46	@ 0x2e
 801929c:	d106      	bne.n	80192ac <create_name+0x100>
		di--;
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	3b01      	subs	r3, #1
 80192a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d1ea      	bne.n	8019280 <create_name+0xd4>
 80192aa:	e000      	b.n	80192ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80192ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	005b      	lsls	r3, r3, #1
 80192b2:	68fa      	ldr	r2, [r7, #12]
 80192b4:	4413      	add	r3, r2
 80192b6:	2200      	movs	r2, #0
 80192b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80192ba:	697b      	ldr	r3, [r7, #20]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d101      	bne.n	80192c4 <create_name+0x118>
 80192c0:	2306      	movs	r3, #6
 80192c2:	e127      	b.n	8019514 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	3324      	adds	r3, #36	@ 0x24
 80192c8:	220b      	movs	r2, #11
 80192ca:	2120      	movs	r1, #32
 80192cc:	4618      	mov	r0, r3
 80192ce:	f7fe fbfe 	bl	8017ace <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80192d2:	2300      	movs	r3, #0
 80192d4:	61bb      	str	r3, [r7, #24]
 80192d6:	e002      	b.n	80192de <create_name+0x132>
 80192d8:	69bb      	ldr	r3, [r7, #24]
 80192da:	3301      	adds	r3, #1
 80192dc:	61bb      	str	r3, [r7, #24]
 80192de:	69bb      	ldr	r3, [r7, #24]
 80192e0:	005b      	lsls	r3, r3, #1
 80192e2:	68fa      	ldr	r2, [r7, #12]
 80192e4:	4413      	add	r3, r2
 80192e6:	881b      	ldrh	r3, [r3, #0]
 80192e8:	2b20      	cmp	r3, #32
 80192ea:	d0f5      	beq.n	80192d8 <create_name+0x12c>
 80192ec:	69bb      	ldr	r3, [r7, #24]
 80192ee:	005b      	lsls	r3, r3, #1
 80192f0:	68fa      	ldr	r2, [r7, #12]
 80192f2:	4413      	add	r3, r2
 80192f4:	881b      	ldrh	r3, [r3, #0]
 80192f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80192f8:	d0ee      	beq.n	80192d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80192fa:	69bb      	ldr	r3, [r7, #24]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d009      	beq.n	8019314 <create_name+0x168>
 8019300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019304:	f043 0303 	orr.w	r3, r3, #3
 8019308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801930c:	e002      	b.n	8019314 <create_name+0x168>
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	3b01      	subs	r3, #1
 8019312:	617b      	str	r3, [r7, #20]
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d009      	beq.n	801932e <create_name+0x182>
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019320:	3b01      	subs	r3, #1
 8019322:	005b      	lsls	r3, r3, #1
 8019324:	68fa      	ldr	r2, [r7, #12]
 8019326:	4413      	add	r3, r2
 8019328:	881b      	ldrh	r3, [r3, #0]
 801932a:	2b2e      	cmp	r3, #46	@ 0x2e
 801932c:	d1ef      	bne.n	801930e <create_name+0x162>

	i = b = 0; ni = 8;
 801932e:	2300      	movs	r3, #0
 8019330:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019334:	2300      	movs	r3, #0
 8019336:	623b      	str	r3, [r7, #32]
 8019338:	2308      	movs	r3, #8
 801933a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801933c:	69bb      	ldr	r3, [r7, #24]
 801933e:	1c5a      	adds	r2, r3, #1
 8019340:	61ba      	str	r2, [r7, #24]
 8019342:	005b      	lsls	r3, r3, #1
 8019344:	68fa      	ldr	r2, [r7, #12]
 8019346:	4413      	add	r3, r2
 8019348:	881b      	ldrh	r3, [r3, #0]
 801934a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801934c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801934e:	2b00      	cmp	r3, #0
 8019350:	f000 8090 	beq.w	8019474 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019356:	2b20      	cmp	r3, #32
 8019358:	d006      	beq.n	8019368 <create_name+0x1bc>
 801935a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801935c:	2b2e      	cmp	r3, #46	@ 0x2e
 801935e:	d10a      	bne.n	8019376 <create_name+0x1ca>
 8019360:	69ba      	ldr	r2, [r7, #24]
 8019362:	697b      	ldr	r3, [r7, #20]
 8019364:	429a      	cmp	r2, r3
 8019366:	d006      	beq.n	8019376 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8019368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801936c:	f043 0303 	orr.w	r3, r3, #3
 8019370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019374:	e07d      	b.n	8019472 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019376:	6a3a      	ldr	r2, [r7, #32]
 8019378:	69fb      	ldr	r3, [r7, #28]
 801937a:	429a      	cmp	r2, r3
 801937c:	d203      	bcs.n	8019386 <create_name+0x1da>
 801937e:	69ba      	ldr	r2, [r7, #24]
 8019380:	697b      	ldr	r3, [r7, #20]
 8019382:	429a      	cmp	r2, r3
 8019384:	d123      	bne.n	80193ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8019386:	69fb      	ldr	r3, [r7, #28]
 8019388:	2b0b      	cmp	r3, #11
 801938a:	d106      	bne.n	801939a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801938c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019390:	f043 0303 	orr.w	r3, r3, #3
 8019394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019398:	e075      	b.n	8019486 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801939a:	69ba      	ldr	r2, [r7, #24]
 801939c:	697b      	ldr	r3, [r7, #20]
 801939e:	429a      	cmp	r2, r3
 80193a0:	d005      	beq.n	80193ae <create_name+0x202>
 80193a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193a6:	f043 0303 	orr.w	r3, r3, #3
 80193aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80193ae:	69ba      	ldr	r2, [r7, #24]
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	429a      	cmp	r2, r3
 80193b4:	d866      	bhi.n	8019484 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	61bb      	str	r3, [r7, #24]
 80193ba:	2308      	movs	r3, #8
 80193bc:	623b      	str	r3, [r7, #32]
 80193be:	230b      	movs	r3, #11
 80193c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80193c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80193cc:	e051      	b.n	8019472 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80193ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80193d2:	d914      	bls.n	80193fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80193d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193d6:	2100      	movs	r1, #0
 80193d8:	4618      	mov	r0, r3
 80193da:	f001 f8e3 	bl	801a5a4 <ff_convert>
 80193de:	4603      	mov	r3, r0
 80193e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80193e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d004      	beq.n	80193f2 <create_name+0x246>
 80193e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80193ea:	3b80      	subs	r3, #128	@ 0x80
 80193ec:	4a23      	ldr	r2, [pc, #140]	@ (801947c <create_name+0x2d0>)
 80193ee:	5cd3      	ldrb	r3, [r2, r3]
 80193f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80193f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193f6:	f043 0302 	orr.w	r3, r3, #2
 80193fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80193fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019400:	2b00      	cmp	r3, #0
 8019402:	d007      	beq.n	8019414 <create_name+0x268>
 8019404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019406:	4619      	mov	r1, r3
 8019408:	481d      	ldr	r0, [pc, #116]	@ (8019480 <create_name+0x2d4>)
 801940a:	f7fe fba2 	bl	8017b52 <chk_chr>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d008      	beq.n	8019426 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019414:	235f      	movs	r3, #95	@ 0x5f
 8019416:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8019418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801941c:	f043 0303 	orr.w	r3, r3, #3
 8019420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019424:	e01b      	b.n	801945e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8019426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019428:	2b40      	cmp	r3, #64	@ 0x40
 801942a:	d909      	bls.n	8019440 <create_name+0x294>
 801942c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801942e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019430:	d806      	bhi.n	8019440 <create_name+0x294>
					b |= 2;
 8019432:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019436:	f043 0302 	orr.w	r3, r3, #2
 801943a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801943e:	e00e      	b.n	801945e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8019440:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019442:	2b60      	cmp	r3, #96	@ 0x60
 8019444:	d90b      	bls.n	801945e <create_name+0x2b2>
 8019446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019448:	2b7a      	cmp	r3, #122	@ 0x7a
 801944a:	d808      	bhi.n	801945e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801944c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019450:	f043 0301 	orr.w	r3, r3, #1
 8019454:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801945a:	3b20      	subs	r3, #32
 801945c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801945e:	6a3b      	ldr	r3, [r7, #32]
 8019460:	1c5a      	adds	r2, r3, #1
 8019462:	623a      	str	r2, [r7, #32]
 8019464:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019466:	b2d1      	uxtb	r1, r2
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	4413      	add	r3, r2
 801946c:	460a      	mov	r2, r1
 801946e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8019472:	e763      	b.n	801933c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8019474:	bf00      	nop
 8019476:	e006      	b.n	8019486 <create_name+0x2da>
 8019478:	080222a8 	.word	0x080222a8
 801947c:	08022bd0 	.word	0x08022bd0
 8019480:	080222b4 	.word	0x080222b4
			if (si > di) break;			/* No extension */
 8019484:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801948c:	2be5      	cmp	r3, #229	@ 0xe5
 801948e:	d103      	bne.n	8019498 <create_name+0x2ec>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2205      	movs	r2, #5
 8019494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8019498:	69fb      	ldr	r3, [r7, #28]
 801949a:	2b08      	cmp	r3, #8
 801949c:	d104      	bne.n	80194a8 <create_name+0x2fc>
 801949e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194a2:	009b      	lsls	r3, r3, #2
 80194a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80194a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194ac:	f003 030c 	and.w	r3, r3, #12
 80194b0:	2b0c      	cmp	r3, #12
 80194b2:	d005      	beq.n	80194c0 <create_name+0x314>
 80194b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194b8:	f003 0303 	and.w	r3, r3, #3
 80194bc:	2b03      	cmp	r3, #3
 80194be:	d105      	bne.n	80194cc <create_name+0x320>
 80194c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194c4:	f043 0302 	orr.w	r3, r3, #2
 80194c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80194cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194d0:	f003 0302 	and.w	r3, r3, #2
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d117      	bne.n	8019508 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80194d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194dc:	f003 0303 	and.w	r3, r3, #3
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d105      	bne.n	80194f0 <create_name+0x344>
 80194e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194e8:	f043 0310 	orr.w	r3, r3, #16
 80194ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80194f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80194f4:	f003 030c 	and.w	r3, r3, #12
 80194f8:	2b04      	cmp	r3, #4
 80194fa:	d105      	bne.n	8019508 <create_name+0x35c>
 80194fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019500:	f043 0308 	orr.w	r3, r3, #8
 8019504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801950e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8019512:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8019514:	4618      	mov	r0, r3
 8019516:	3728      	adds	r7, #40	@ 0x28
 8019518:	46bd      	mov	sp, r7
 801951a:	bd80      	pop	{r7, pc}

0801951c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b086      	sub	sp, #24
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019530:	e002      	b.n	8019538 <follow_path+0x1c>
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	3301      	adds	r3, #1
 8019536:	603b      	str	r3, [r7, #0]
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	2b2f      	cmp	r3, #47	@ 0x2f
 801953e:	d0f8      	beq.n	8019532 <follow_path+0x16>
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	781b      	ldrb	r3, [r3, #0]
 8019544:	2b5c      	cmp	r3, #92	@ 0x5c
 8019546:	d0f4      	beq.n	8019532 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	2200      	movs	r2, #0
 801954c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	2b1f      	cmp	r3, #31
 8019554:	d80a      	bhi.n	801956c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2280      	movs	r2, #128	@ 0x80
 801955a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801955e:	2100      	movs	r1, #0
 8019560:	6878      	ldr	r0, [r7, #4]
 8019562:	f7ff f83e 	bl	80185e2 <dir_sdi>
 8019566:	4603      	mov	r3, r0
 8019568:	75fb      	strb	r3, [r7, #23]
 801956a:	e043      	b.n	80195f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801956c:	463b      	mov	r3, r7
 801956e:	4619      	mov	r1, r3
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	f7ff fe1b 	bl	80191ac <create_name>
 8019576:	4603      	mov	r3, r0
 8019578:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801957a:	7dfb      	ldrb	r3, [r7, #23]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d134      	bne.n	80195ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019580:	6878      	ldr	r0, [r7, #4]
 8019582:	f7ff fb7c 	bl	8018c7e <dir_find>
 8019586:	4603      	mov	r3, r0
 8019588:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8019590:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019592:	7dfb      	ldrb	r3, [r7, #23]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d00a      	beq.n	80195ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019598:	7dfb      	ldrb	r3, [r7, #23]
 801959a:	2b04      	cmp	r3, #4
 801959c:	d127      	bne.n	80195ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801959e:	7afb      	ldrb	r3, [r7, #11]
 80195a0:	f003 0304 	and.w	r3, r3, #4
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d122      	bne.n	80195ee <follow_path+0xd2>
 80195a8:	2305      	movs	r3, #5
 80195aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80195ac:	e01f      	b.n	80195ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80195ae:	7afb      	ldrb	r3, [r7, #11]
 80195b0:	f003 0304 	and.w	r3, r3, #4
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d11c      	bne.n	80195f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80195b8:	693b      	ldr	r3, [r7, #16]
 80195ba:	799b      	ldrb	r3, [r3, #6]
 80195bc:	f003 0310 	and.w	r3, r3, #16
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d102      	bne.n	80195ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80195c4:	2305      	movs	r3, #5
 80195c6:	75fb      	strb	r3, [r7, #23]
 80195c8:	e014      	b.n	80195f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	695b      	ldr	r3, [r3, #20]
 80195d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80195d8:	4413      	add	r3, r2
 80195da:	4619      	mov	r1, r3
 80195dc:	68f8      	ldr	r0, [r7, #12]
 80195de:	f7ff f987 	bl	80188f0 <ld_clust>
 80195e2:	4602      	mov	r2, r0
 80195e4:	693b      	ldr	r3, [r7, #16]
 80195e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80195e8:	e7c0      	b.n	801956c <follow_path+0x50>
			if (res != FR_OK) break;
 80195ea:	bf00      	nop
 80195ec:	e002      	b.n	80195f4 <follow_path+0xd8>
				break;
 80195ee:	bf00      	nop
 80195f0:	e000      	b.n	80195f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80195f2:	bf00      	nop
			}
		}
	}

	return res;
 80195f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	3718      	adds	r7, #24
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}

080195fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80195fe:	b480      	push	{r7}
 8019600:	b087      	sub	sp, #28
 8019602:	af00      	add	r7, sp, #0
 8019604:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019606:	f04f 33ff 	mov.w	r3, #4294967295
 801960a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d031      	beq.n	8019678 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	617b      	str	r3, [r7, #20]
 801961a:	e002      	b.n	8019622 <get_ldnumber+0x24>
 801961c:	697b      	ldr	r3, [r7, #20]
 801961e:	3301      	adds	r3, #1
 8019620:	617b      	str	r3, [r7, #20]
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	2b1f      	cmp	r3, #31
 8019628:	d903      	bls.n	8019632 <get_ldnumber+0x34>
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	2b3a      	cmp	r3, #58	@ 0x3a
 8019630:	d1f4      	bne.n	801961c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019632:	697b      	ldr	r3, [r7, #20]
 8019634:	781b      	ldrb	r3, [r3, #0]
 8019636:	2b3a      	cmp	r3, #58	@ 0x3a
 8019638:	d11c      	bne.n	8019674 <get_ldnumber+0x76>
			tp = *path;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	1c5a      	adds	r2, r3, #1
 8019644:	60fa      	str	r2, [r7, #12]
 8019646:	781b      	ldrb	r3, [r3, #0]
 8019648:	3b30      	subs	r3, #48	@ 0x30
 801964a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	2b09      	cmp	r3, #9
 8019650:	d80e      	bhi.n	8019670 <get_ldnumber+0x72>
 8019652:	68fa      	ldr	r2, [r7, #12]
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	429a      	cmp	r2, r3
 8019658:	d10a      	bne.n	8019670 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d107      	bne.n	8019670 <get_ldnumber+0x72>
					vol = (int)i;
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019664:	697b      	ldr	r3, [r7, #20]
 8019666:	3301      	adds	r3, #1
 8019668:	617b      	str	r3, [r7, #20]
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	697a      	ldr	r2, [r7, #20]
 801966e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	e002      	b.n	801967a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019674:	2300      	movs	r3, #0
 8019676:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019678:	693b      	ldr	r3, [r7, #16]
}
 801967a:	4618      	mov	r0, r3
 801967c:	371c      	adds	r7, #28
 801967e:	46bd      	mov	sp, r7
 8019680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019684:	4770      	bx	lr
	...

08019688 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b082      	sub	sp, #8
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2200      	movs	r2, #0
 8019696:	70da      	strb	r2, [r3, #3]
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	f04f 32ff 	mov.w	r2, #4294967295
 801969e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80196a0:	6839      	ldr	r1, [r7, #0]
 80196a2:	6878      	ldr	r0, [r7, #4]
 80196a4:	f7fe fc20 	bl	8017ee8 <move_window>
 80196a8:	4603      	mov	r3, r0
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d001      	beq.n	80196b2 <check_fs+0x2a>
 80196ae:	2304      	movs	r3, #4
 80196b0:	e038      	b.n	8019724 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	3334      	adds	r3, #52	@ 0x34
 80196b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80196ba:	4618      	mov	r0, r3
 80196bc:	f7fe f964 	bl	8017988 <ld_word>
 80196c0:	4603      	mov	r3, r0
 80196c2:	461a      	mov	r2, r3
 80196c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80196c8:	429a      	cmp	r2, r3
 80196ca:	d001      	beq.n	80196d0 <check_fs+0x48>
 80196cc:	2303      	movs	r3, #3
 80196ce:	e029      	b.n	8019724 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80196d6:	2be9      	cmp	r3, #233	@ 0xe9
 80196d8:	d009      	beq.n	80196ee <check_fs+0x66>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80196e0:	2beb      	cmp	r3, #235	@ 0xeb
 80196e2:	d11e      	bne.n	8019722 <check_fs+0x9a>
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80196ea:	2b90      	cmp	r3, #144	@ 0x90
 80196ec:	d119      	bne.n	8019722 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	3334      	adds	r3, #52	@ 0x34
 80196f2:	3336      	adds	r3, #54	@ 0x36
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7fe f95f 	bl	80179b8 <ld_dword>
 80196fa:	4603      	mov	r3, r0
 80196fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8019700:	4a0a      	ldr	r2, [pc, #40]	@ (801972c <check_fs+0xa4>)
 8019702:	4293      	cmp	r3, r2
 8019704:	d101      	bne.n	801970a <check_fs+0x82>
 8019706:	2300      	movs	r3, #0
 8019708:	e00c      	b.n	8019724 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	3334      	adds	r3, #52	@ 0x34
 801970e:	3352      	adds	r3, #82	@ 0x52
 8019710:	4618      	mov	r0, r3
 8019712:	f7fe f951 	bl	80179b8 <ld_dword>
 8019716:	4603      	mov	r3, r0
 8019718:	4a05      	ldr	r2, [pc, #20]	@ (8019730 <check_fs+0xa8>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d101      	bne.n	8019722 <check_fs+0x9a>
 801971e:	2300      	movs	r3, #0
 8019720:	e000      	b.n	8019724 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019722:	2302      	movs	r3, #2
}
 8019724:	4618      	mov	r0, r3
 8019726:	3708      	adds	r7, #8
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	00544146 	.word	0x00544146
 8019730:	33544146 	.word	0x33544146

08019734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b096      	sub	sp, #88	@ 0x58
 8019738:	af00      	add	r7, sp, #0
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	4613      	mov	r3, r2
 8019740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	2200      	movs	r2, #0
 8019746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019748:	68f8      	ldr	r0, [r7, #12]
 801974a:	f7ff ff58 	bl	80195fe <get_ldnumber>
 801974e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019752:	2b00      	cmp	r3, #0
 8019754:	da01      	bge.n	801975a <find_volume+0x26>
 8019756:	230b      	movs	r3, #11
 8019758:	e230      	b.n	8019bbc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801975a:	4aa1      	ldr	r2, [pc, #644]	@ (80199e0 <find_volume+0x2ac>)
 801975c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019762:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019766:	2b00      	cmp	r3, #0
 8019768:	d101      	bne.n	801976e <find_volume+0x3a>
 801976a:	230c      	movs	r3, #12
 801976c:	e226      	b.n	8019bbc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801976e:	68bb      	ldr	r3, [r7, #8]
 8019770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019772:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019774:	79fb      	ldrb	r3, [r7, #7]
 8019776:	f023 0301 	bic.w	r3, r3, #1
 801977a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d01a      	beq.n	80197ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019786:	785b      	ldrb	r3, [r3, #1]
 8019788:	4618      	mov	r0, r3
 801978a:	f7fe f85f 	bl	801784c <disk_status>
 801978e:	4603      	mov	r3, r0
 8019790:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019794:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019798:	f003 0301 	and.w	r3, r3, #1
 801979c:	2b00      	cmp	r3, #0
 801979e:	d10c      	bne.n	80197ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80197a0:	79fb      	ldrb	r3, [r7, #7]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d007      	beq.n	80197b6 <find_volume+0x82>
 80197a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197aa:	f003 0304 	and.w	r3, r3, #4
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d001      	beq.n	80197b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80197b2:	230a      	movs	r3, #10
 80197b4:	e202      	b.n	8019bbc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80197b6:	2300      	movs	r3, #0
 80197b8:	e200      	b.n	8019bbc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80197ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197bc:	2200      	movs	r2, #0
 80197be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80197c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197c2:	b2da      	uxtb	r2, r3
 80197c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80197c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ca:	785b      	ldrb	r3, [r3, #1]
 80197cc:	4618      	mov	r0, r3
 80197ce:	f7fe f857 	bl	8017880 <disk_initialize>
 80197d2:	4603      	mov	r3, r0
 80197d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80197d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d001      	beq.n	80197e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80197e4:	2303      	movs	r3, #3
 80197e6:	e1e9      	b.n	8019bbc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80197e8:	79fb      	ldrb	r3, [r7, #7]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d007      	beq.n	80197fe <find_volume+0xca>
 80197ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197f2:	f003 0304 	and.w	r3, r3, #4
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d001      	beq.n	80197fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80197fa:	230a      	movs	r3, #10
 80197fc:	e1de      	b.n	8019bbc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8019802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019804:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019806:	f7ff ff3f 	bl	8019688 <check_fs>
 801980a:	4603      	mov	r3, r0
 801980c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019814:	2b02      	cmp	r3, #2
 8019816:	d149      	bne.n	80198ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019818:	2300      	movs	r3, #0
 801981a:	643b      	str	r3, [r7, #64]	@ 0x40
 801981c:	e01e      	b.n	801985c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801981e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019820:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019826:	011b      	lsls	r3, r3, #4
 8019828:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801982c:	4413      	add	r3, r2
 801982e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019832:	3304      	adds	r3, #4
 8019834:	781b      	ldrb	r3, [r3, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d006      	beq.n	8019848 <find_volume+0x114>
 801983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801983c:	3308      	adds	r3, #8
 801983e:	4618      	mov	r0, r3
 8019840:	f7fe f8ba 	bl	80179b8 <ld_dword>
 8019844:	4602      	mov	r2, r0
 8019846:	e000      	b.n	801984a <find_volume+0x116>
 8019848:	2200      	movs	r2, #0
 801984a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801984c:	009b      	lsls	r3, r3, #2
 801984e:	3358      	adds	r3, #88	@ 0x58
 8019850:	443b      	add	r3, r7
 8019852:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019858:	3301      	adds	r3, #1
 801985a:	643b      	str	r3, [r7, #64]	@ 0x40
 801985c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801985e:	2b03      	cmp	r3, #3
 8019860:	d9dd      	bls.n	801981e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019862:	2300      	movs	r3, #0
 8019864:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8019866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <find_volume+0x13e>
 801986c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801986e:	3b01      	subs	r3, #1
 8019870:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019874:	009b      	lsls	r3, r3, #2
 8019876:	3358      	adds	r3, #88	@ 0x58
 8019878:	443b      	add	r3, r7
 801987a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801987e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019882:	2b00      	cmp	r3, #0
 8019884:	d005      	beq.n	8019892 <find_volume+0x15e>
 8019886:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019888:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801988a:	f7ff fefd 	bl	8019688 <check_fs>
 801988e:	4603      	mov	r3, r0
 8019890:	e000      	b.n	8019894 <find_volume+0x160>
 8019892:	2303      	movs	r3, #3
 8019894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019898:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801989c:	2b01      	cmp	r3, #1
 801989e:	d905      	bls.n	80198ac <find_volume+0x178>
 80198a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198a2:	3301      	adds	r3, #1
 80198a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80198a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198a8:	2b03      	cmp	r3, #3
 80198aa:	d9e2      	bls.n	8019872 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80198ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80198b0:	2b04      	cmp	r3, #4
 80198b2:	d101      	bne.n	80198b8 <find_volume+0x184>
 80198b4:	2301      	movs	r3, #1
 80198b6:	e181      	b.n	8019bbc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80198b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d901      	bls.n	80198c4 <find_volume+0x190>
 80198c0:	230d      	movs	r3, #13
 80198c2:	e17b      	b.n	8019bbc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80198c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198c6:	3334      	adds	r3, #52	@ 0x34
 80198c8:	330b      	adds	r3, #11
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7fe f85c 	bl	8017988 <ld_word>
 80198d0:	4603      	mov	r3, r0
 80198d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80198d6:	d001      	beq.n	80198dc <find_volume+0x1a8>
 80198d8:	230d      	movs	r3, #13
 80198da:	e16f      	b.n	8019bbc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80198dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198de:	3334      	adds	r3, #52	@ 0x34
 80198e0:	3316      	adds	r3, #22
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7fe f850 	bl	8017988 <ld_word>
 80198e8:	4603      	mov	r3, r0
 80198ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80198ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d106      	bne.n	8019900 <find_volume+0x1cc>
 80198f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198f4:	3334      	adds	r3, #52	@ 0x34
 80198f6:	3324      	adds	r3, #36	@ 0x24
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7fe f85d 	bl	80179b8 <ld_dword>
 80198fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8019900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019902:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019904:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019908:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801990e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019912:	789b      	ldrb	r3, [r3, #2]
 8019914:	2b01      	cmp	r3, #1
 8019916:	d005      	beq.n	8019924 <find_volume+0x1f0>
 8019918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801991a:	789b      	ldrb	r3, [r3, #2]
 801991c:	2b02      	cmp	r3, #2
 801991e:	d001      	beq.n	8019924 <find_volume+0x1f0>
 8019920:	230d      	movs	r3, #13
 8019922:	e14b      	b.n	8019bbc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019926:	789b      	ldrb	r3, [r3, #2]
 8019928:	461a      	mov	r2, r3
 801992a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801992c:	fb02 f303 	mul.w	r3, r2, r3
 8019930:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019938:	461a      	mov	r2, r3
 801993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801993c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019940:	895b      	ldrh	r3, [r3, #10]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d008      	beq.n	8019958 <find_volume+0x224>
 8019946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019948:	895b      	ldrh	r3, [r3, #10]
 801994a:	461a      	mov	r2, r3
 801994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801994e:	895b      	ldrh	r3, [r3, #10]
 8019950:	3b01      	subs	r3, #1
 8019952:	4013      	ands	r3, r2
 8019954:	2b00      	cmp	r3, #0
 8019956:	d001      	beq.n	801995c <find_volume+0x228>
 8019958:	230d      	movs	r3, #13
 801995a:	e12f      	b.n	8019bbc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801995e:	3334      	adds	r3, #52	@ 0x34
 8019960:	3311      	adds	r3, #17
 8019962:	4618      	mov	r0, r3
 8019964:	f7fe f810 	bl	8017988 <ld_word>
 8019968:	4603      	mov	r3, r0
 801996a:	461a      	mov	r2, r3
 801996c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801996e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019972:	891b      	ldrh	r3, [r3, #8]
 8019974:	f003 030f 	and.w	r3, r3, #15
 8019978:	b29b      	uxth	r3, r3
 801997a:	2b00      	cmp	r3, #0
 801997c:	d001      	beq.n	8019982 <find_volume+0x24e>
 801997e:	230d      	movs	r3, #13
 8019980:	e11c      	b.n	8019bbc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019984:	3334      	adds	r3, #52	@ 0x34
 8019986:	3313      	adds	r3, #19
 8019988:	4618      	mov	r0, r3
 801998a:	f7fd fffd 	bl	8017988 <ld_word>
 801998e:	4603      	mov	r3, r0
 8019990:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019994:	2b00      	cmp	r3, #0
 8019996:	d106      	bne.n	80199a6 <find_volume+0x272>
 8019998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801999a:	3334      	adds	r3, #52	@ 0x34
 801999c:	3320      	adds	r3, #32
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fe f80a 	bl	80179b8 <ld_dword>
 80199a4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80199a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199a8:	3334      	adds	r3, #52	@ 0x34
 80199aa:	330e      	adds	r3, #14
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7fd ffeb 	bl	8017988 <ld_word>
 80199b2:	4603      	mov	r3, r0
 80199b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80199b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d101      	bne.n	80199c0 <find_volume+0x28c>
 80199bc:	230d      	movs	r3, #13
 80199be:	e0fd      	b.n	8019bbc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80199c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80199c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199c4:	4413      	add	r3, r2
 80199c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80199c8:	8912      	ldrh	r2, [r2, #8]
 80199ca:	0912      	lsrs	r2, r2, #4
 80199cc:	b292      	uxth	r2, r2
 80199ce:	4413      	add	r3, r2
 80199d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80199d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80199d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d204      	bcs.n	80199e4 <find_volume+0x2b0>
 80199da:	230d      	movs	r3, #13
 80199dc:	e0ee      	b.n	8019bbc <find_volume+0x488>
 80199de:	bf00      	nop
 80199e0:	20001b7c 	.word	0x20001b7c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80199e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80199e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199e8:	1ad3      	subs	r3, r2, r3
 80199ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80199ec:	8952      	ldrh	r2, [r2, #10]
 80199ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80199f2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80199f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d101      	bne.n	80199fe <find_volume+0x2ca>
 80199fa:	230d      	movs	r3, #13
 80199fc:	e0de      	b.n	8019bbc <find_volume+0x488>
		fmt = FS_FAT32;
 80199fe:	2303      	movs	r3, #3
 8019a00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a06:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8019a0a:	4293      	cmp	r3, r2
 8019a0c:	d802      	bhi.n	8019a14 <find_volume+0x2e0>
 8019a0e:	2302      	movs	r3, #2
 8019a10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a16:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8019a1a:	4293      	cmp	r3, r2
 8019a1c:	d802      	bhi.n	8019a24 <find_volume+0x2f0>
 8019a1e:	2301      	movs	r3, #1
 8019a20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a26:	1c9a      	adds	r2, r3, #2
 8019a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a2a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8019a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019a30:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019a32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a36:	441a      	add	r2, r3
 8019a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a3a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8019a3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8019a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a40:	441a      	add	r2, r3
 8019a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a44:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8019a46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019a4a:	2b03      	cmp	r3, #3
 8019a4c:	d11e      	bne.n	8019a8c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a50:	3334      	adds	r3, #52	@ 0x34
 8019a52:	332a      	adds	r3, #42	@ 0x2a
 8019a54:	4618      	mov	r0, r3
 8019a56:	f7fd ff97 	bl	8017988 <ld_word>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d001      	beq.n	8019a64 <find_volume+0x330>
 8019a60:	230d      	movs	r3, #13
 8019a62:	e0ab      	b.n	8019bbc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a66:	891b      	ldrh	r3, [r3, #8]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d001      	beq.n	8019a70 <find_volume+0x33c>
 8019a6c:	230d      	movs	r3, #13
 8019a6e:	e0a5      	b.n	8019bbc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a72:	3334      	adds	r3, #52	@ 0x34
 8019a74:	332c      	adds	r3, #44	@ 0x2c
 8019a76:	4618      	mov	r0, r3
 8019a78:	f7fd ff9e 	bl	80179b8 <ld_dword>
 8019a7c:	4602      	mov	r2, r0
 8019a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a80:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a84:	699b      	ldr	r3, [r3, #24]
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8019a8a:	e01f      	b.n	8019acc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a8e:	891b      	ldrh	r3, [r3, #8]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d101      	bne.n	8019a98 <find_volume+0x364>
 8019a94:	230d      	movs	r3, #13
 8019a96:	e091      	b.n	8019bbc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019a9e:	441a      	add	r2, r3
 8019aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aa2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019aa8:	2b02      	cmp	r3, #2
 8019aaa:	d103      	bne.n	8019ab4 <find_volume+0x380>
 8019aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aae:	699b      	ldr	r3, [r3, #24]
 8019ab0:	005b      	lsls	r3, r3, #1
 8019ab2:	e00a      	b.n	8019aca <find_volume+0x396>
 8019ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ab6:	699a      	ldr	r2, [r3, #24]
 8019ab8:	4613      	mov	r3, r2
 8019aba:	005b      	lsls	r3, r3, #1
 8019abc:	4413      	add	r3, r2
 8019abe:	085a      	lsrs	r2, r3, #1
 8019ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ac2:	699b      	ldr	r3, [r3, #24]
 8019ac4:	f003 0301 	and.w	r3, r3, #1
 8019ac8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8019aca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8019acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ace:	69da      	ldr	r2, [r3, #28]
 8019ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ad2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8019ad6:	0a5b      	lsrs	r3, r3, #9
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d201      	bcs.n	8019ae0 <find_volume+0x3ac>
 8019adc:	230d      	movs	r3, #13
 8019ade:	e06d      	b.n	8019bbc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ae6:	615a      	str	r2, [r3, #20]
 8019ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aea:	695a      	ldr	r2, [r3, #20]
 8019aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019aee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019af2:	2280      	movs	r2, #128	@ 0x80
 8019af4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019af6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019afa:	2b03      	cmp	r3, #3
 8019afc:	d149      	bne.n	8019b92 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8019afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b00:	3334      	adds	r3, #52	@ 0x34
 8019b02:	3330      	adds	r3, #48	@ 0x30
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7fd ff3f 	bl	8017988 <ld_word>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	2b01      	cmp	r3, #1
 8019b0e:	d140      	bne.n	8019b92 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b12:	3301      	adds	r3, #1
 8019b14:	4619      	mov	r1, r3
 8019b16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019b18:	f7fe f9e6 	bl	8017ee8 <move_window>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d137      	bne.n	8019b92 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b24:	2200      	movs	r2, #0
 8019b26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b2a:	3334      	adds	r3, #52	@ 0x34
 8019b2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7fd ff29 	bl	8017988 <ld_word>
 8019b36:	4603      	mov	r3, r0
 8019b38:	461a      	mov	r2, r3
 8019b3a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	d127      	bne.n	8019b92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b44:	3334      	adds	r3, #52	@ 0x34
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fd ff36 	bl	80179b8 <ld_dword>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8019bc4 <find_volume+0x490>)
 8019b50:	4293      	cmp	r3, r2
 8019b52:	d11e      	bne.n	8019b92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b56:	3334      	adds	r3, #52	@ 0x34
 8019b58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7fd ff2b 	bl	80179b8 <ld_dword>
 8019b62:	4603      	mov	r3, r0
 8019b64:	4a18      	ldr	r2, [pc, #96]	@ (8019bc8 <find_volume+0x494>)
 8019b66:	4293      	cmp	r3, r2
 8019b68:	d113      	bne.n	8019b92 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b6c:	3334      	adds	r3, #52	@ 0x34
 8019b6e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7fd ff20 	bl	80179b8 <ld_dword>
 8019b78:	4602      	mov	r2, r0
 8019b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b7c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b80:	3334      	adds	r3, #52	@ 0x34
 8019b82:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8019b86:	4618      	mov	r0, r3
 8019b88:	f7fd ff16 	bl	80179b8 <ld_dword>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b90:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b94:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019b98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8019bcc <find_volume+0x498>)
 8019b9c:	881b      	ldrh	r3, [r3, #0]
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	b29a      	uxth	r2, r3
 8019ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8019bcc <find_volume+0x498>)
 8019ba4:	801a      	strh	r2, [r3, #0]
 8019ba6:	4b09      	ldr	r3, [pc, #36]	@ (8019bcc <find_volume+0x498>)
 8019ba8:	881a      	ldrh	r2, [r3, #0]
 8019baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bac:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8019bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bb0:	4a07      	ldr	r2, [pc, #28]	@ (8019bd0 <find_volume+0x49c>)
 8019bb2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019bb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019bb6:	f7fe f92f 	bl	8017e18 <clear_lock>
#endif
	return FR_OK;
 8019bba:	2300      	movs	r3, #0
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	3758      	adds	r7, #88	@ 0x58
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}
 8019bc4:	41615252 	.word	0x41615252
 8019bc8:	61417272 	.word	0x61417272
 8019bcc:	20001b80 	.word	0x20001b80
 8019bd0:	20001ba4 	.word	0x20001ba4

08019bd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b084      	sub	sp, #16
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
 8019bdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8019bde:	2309      	movs	r3, #9
 8019be0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d01c      	beq.n	8019c22 <validate+0x4e>
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d018      	beq.n	8019c22 <validate+0x4e>
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d013      	beq.n	8019c22 <validate+0x4e>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	889a      	ldrh	r2, [r3, #4]
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	88db      	ldrh	r3, [r3, #6]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d10c      	bne.n	8019c22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	785b      	ldrb	r3, [r3, #1]
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7fd fe1c 	bl	801784c <disk_status>
 8019c14:	4603      	mov	r3, r0
 8019c16:	f003 0301 	and.w	r3, r3, #1
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d101      	bne.n	8019c22 <validate+0x4e>
			res = FR_OK;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019c22:	7bfb      	ldrb	r3, [r7, #15]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d102      	bne.n	8019c2e <validate+0x5a>
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	e000      	b.n	8019c30 <validate+0x5c>
 8019c2e:	2300      	movs	r3, #0
 8019c30:	683a      	ldr	r2, [r7, #0]
 8019c32:	6013      	str	r3, [r2, #0]
	return res;
 8019c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c36:	4618      	mov	r0, r3
 8019c38:	3710      	adds	r7, #16
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
	...

08019c40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b088      	sub	sp, #32
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	60f8      	str	r0, [r7, #12]
 8019c48:	60b9      	str	r1, [r7, #8]
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019c52:	f107 0310 	add.w	r3, r7, #16
 8019c56:	4618      	mov	r0, r3
 8019c58:	f7ff fcd1 	bl	80195fe <get_ldnumber>
 8019c5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019c5e:	69fb      	ldr	r3, [r7, #28]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	da01      	bge.n	8019c68 <f_mount+0x28>
 8019c64:	230b      	movs	r3, #11
 8019c66:	e02b      	b.n	8019cc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019c68:	4a17      	ldr	r2, [pc, #92]	@ (8019cc8 <f_mount+0x88>)
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019c72:	69bb      	ldr	r3, [r7, #24]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d005      	beq.n	8019c84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019c78:	69b8      	ldr	r0, [r7, #24]
 8019c7a:	f7fe f8cd 	bl	8017e18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019c7e:	69bb      	ldr	r3, [r7, #24]
 8019c80:	2200      	movs	r2, #0
 8019c82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d002      	beq.n	8019c90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019c90:	68fa      	ldr	r2, [r7, #12]
 8019c92:	490d      	ldr	r1, [pc, #52]	@ (8019cc8 <f_mount+0x88>)
 8019c94:	69fb      	ldr	r3, [r7, #28]
 8019c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d002      	beq.n	8019ca6 <f_mount+0x66>
 8019ca0:	79fb      	ldrb	r3, [r7, #7]
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	d001      	beq.n	8019caa <f_mount+0x6a>
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	e00a      	b.n	8019cc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8019caa:	f107 010c 	add.w	r1, r7, #12
 8019cae:	f107 0308 	add.w	r3, r7, #8
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f7ff fd3d 	bl	8019734 <find_volume>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8019cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	3720      	adds	r7, #32
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}
 8019cc8:	20001b7c 	.word	0x20001b7c

08019ccc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b09a      	sub	sp, #104	@ 0x68
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	60f8      	str	r0, [r7, #12]
 8019cd4:	60b9      	str	r1, [r7, #8]
 8019cd6:	4613      	mov	r3, r2
 8019cd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d101      	bne.n	8019ce4 <f_open+0x18>
 8019ce0:	2309      	movs	r3, #9
 8019ce2:	e1a9      	b.n	801a038 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019ce4:	79fb      	ldrb	r3, [r7, #7]
 8019ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019cea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8019cec:	79fa      	ldrb	r2, [r7, #7]
 8019cee:	f107 0114 	add.w	r1, r7, #20
 8019cf2:	f107 0308 	add.w	r3, r7, #8
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7ff fd1c 	bl	8019734 <find_volume>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8019d02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	f040 818d 	bne.w	801a026 <f_open+0x35a>
		dj.obj.fs = fs;
 8019d0c:	697b      	ldr	r3, [r7, #20]
 8019d0e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019d10:	68ba      	ldr	r2, [r7, #8]
 8019d12:	f107 0318 	add.w	r3, r7, #24
 8019d16:	4611      	mov	r1, r2
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7ff fbff 	bl	801951c <follow_path>
 8019d1e:	4603      	mov	r3, r0
 8019d20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019d24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d118      	bne.n	8019d5e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019d30:	b25b      	sxtb	r3, r3
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	da03      	bge.n	8019d3e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019d36:	2306      	movs	r3, #6
 8019d38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019d3c:	e00f      	b.n	8019d5e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019d3e:	79fb      	ldrb	r3, [r7, #7]
 8019d40:	2b01      	cmp	r3, #1
 8019d42:	bf8c      	ite	hi
 8019d44:	2301      	movhi	r3, #1
 8019d46:	2300      	movls	r3, #0
 8019d48:	b2db      	uxtb	r3, r3
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	f107 0318 	add.w	r3, r7, #24
 8019d50:	4611      	mov	r1, r2
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7fd ff18 	bl	8017b88 <chk_lock>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019d5e:	79fb      	ldrb	r3, [r7, #7]
 8019d60:	f003 031c 	and.w	r3, r3, #28
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d07f      	beq.n	8019e68 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8019d68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d017      	beq.n	8019da0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019d70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019d74:	2b04      	cmp	r3, #4
 8019d76:	d10e      	bne.n	8019d96 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019d78:	f7fd ff62 	bl	8017c40 <enq_lock>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d006      	beq.n	8019d90 <f_open+0xc4>
 8019d82:	f107 0318 	add.w	r3, r7, #24
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7ff f83a 	bl	8018e00 <dir_register>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	e000      	b.n	8019d92 <f_open+0xc6>
 8019d90:	2312      	movs	r3, #18
 8019d92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019d96:	79fb      	ldrb	r3, [r7, #7]
 8019d98:	f043 0308 	orr.w	r3, r3, #8
 8019d9c:	71fb      	strb	r3, [r7, #7]
 8019d9e:	e010      	b.n	8019dc2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019da0:	7fbb      	ldrb	r3, [r7, #30]
 8019da2:	f003 0311 	and.w	r3, r3, #17
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d003      	beq.n	8019db2 <f_open+0xe6>
					res = FR_DENIED;
 8019daa:	2307      	movs	r3, #7
 8019dac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019db0:	e007      	b.n	8019dc2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019db2:	79fb      	ldrb	r3, [r7, #7]
 8019db4:	f003 0304 	and.w	r3, r3, #4
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d002      	beq.n	8019dc2 <f_open+0xf6>
 8019dbc:	2308      	movs	r3, #8
 8019dbe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d168      	bne.n	8019e9c <f_open+0x1d0>
 8019dca:	79fb      	ldrb	r3, [r7, #7]
 8019dcc:	f003 0308 	and.w	r3, r3, #8
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d063      	beq.n	8019e9c <f_open+0x1d0>
				dw = GET_FATTIME();
 8019dd4:	f7f8 fc50 	bl	8012678 <get_fattime>
 8019dd8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8019dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ddc:	330e      	adds	r3, #14
 8019dde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7fd fe27 	bl	8017a34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8019de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019de8:	3316      	adds	r3, #22
 8019dea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7fd fe21 	bl	8017a34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019df4:	330b      	adds	r3, #11
 8019df6:	2220      	movs	r2, #32
 8019df8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019dfe:	4611      	mov	r1, r2
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7fe fd75 	bl	80188f0 <ld_clust>
 8019e06:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019e08:	697b      	ldr	r3, [r7, #20]
 8019e0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7fe fd8d 	bl	801892e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e16:	331c      	adds	r3, #28
 8019e18:	2100      	movs	r1, #0
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7fd fe0a 	bl	8017a34 <st_dword>
					fs->wflag = 1;
 8019e20:	697b      	ldr	r3, [r7, #20]
 8019e22:	2201      	movs	r2, #1
 8019e24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d037      	beq.n	8019e9c <f_open+0x1d0>
						dw = fs->winsect;
 8019e2c:	697b      	ldr	r3, [r7, #20]
 8019e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019e30:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019e32:	f107 0318 	add.w	r3, r7, #24
 8019e36:	2200      	movs	r2, #0
 8019e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fe faa0 	bl	8018380 <remove_chain>
 8019e40:	4603      	mov	r3, r0
 8019e42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8019e46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d126      	bne.n	8019e9c <f_open+0x1d0>
							res = move_window(fs, dw);
 8019e4e:	697b      	ldr	r3, [r7, #20]
 8019e50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7fe f848 	bl	8017ee8 <move_window>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019e62:	3a01      	subs	r2, #1
 8019e64:	611a      	str	r2, [r3, #16]
 8019e66:	e019      	b.n	8019e9c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019e68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d115      	bne.n	8019e9c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019e70:	7fbb      	ldrb	r3, [r7, #30]
 8019e72:	f003 0310 	and.w	r3, r3, #16
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d003      	beq.n	8019e82 <f_open+0x1b6>
					res = FR_NO_FILE;
 8019e7a:	2304      	movs	r3, #4
 8019e7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019e80:	e00c      	b.n	8019e9c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019e82:	79fb      	ldrb	r3, [r7, #7]
 8019e84:	f003 0302 	and.w	r3, r3, #2
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d007      	beq.n	8019e9c <f_open+0x1d0>
 8019e8c:	7fbb      	ldrb	r3, [r7, #30]
 8019e8e:	f003 0301 	and.w	r3, r3, #1
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d002      	beq.n	8019e9c <f_open+0x1d0>
						res = FR_DENIED;
 8019e96:	2307      	movs	r3, #7
 8019e98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d126      	bne.n	8019ef2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019ea4:	79fb      	ldrb	r3, [r7, #7]
 8019ea6:	f003 0308 	and.w	r3, r3, #8
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d003      	beq.n	8019eb6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8019eae:	79fb      	ldrb	r3, [r7, #7]
 8019eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019eb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8019ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019ec4:	79fb      	ldrb	r3, [r7, #7]
 8019ec6:	2b01      	cmp	r3, #1
 8019ec8:	bf8c      	ite	hi
 8019eca:	2301      	movhi	r3, #1
 8019ecc:	2300      	movls	r3, #0
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	461a      	mov	r2, r3
 8019ed2:	f107 0318 	add.w	r3, r7, #24
 8019ed6:	4611      	mov	r1, r2
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7fd fed3 	bl	8017c84 <inc_lock>
 8019ede:	4602      	mov	r2, r0
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	691b      	ldr	r3, [r3, #16]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d102      	bne.n	8019ef2 <f_open+0x226>
 8019eec:	2302      	movs	r3, #2
 8019eee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019ef2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	f040 8095 	bne.w	801a026 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f00:	4611      	mov	r1, r2
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7fe fcf4 	bl	80188f0 <ld_clust>
 8019f08:	4602      	mov	r2, r0
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f10:	331c      	adds	r3, #28
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7fd fd50 	bl	80179b8 <ld_dword>
 8019f18:	4602      	mov	r2, r0
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	2200      	movs	r2, #0
 8019f22:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019f24:	697a      	ldr	r2, [r7, #20]
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	88da      	ldrh	r2, [r3, #6]
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	79fa      	ldrb	r2, [r7, #7]
 8019f36:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	2200      	movs	r2, #0
 8019f42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	2200      	movs	r2, #0
 8019f48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	3330      	adds	r3, #48	@ 0x30
 8019f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019f52:	2100      	movs	r1, #0
 8019f54:	4618      	mov	r0, r3
 8019f56:	f7fd fdba 	bl	8017ace <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019f5a:	79fb      	ldrb	r3, [r7, #7]
 8019f5c:	f003 0320 	and.w	r3, r3, #32
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d060      	beq.n	801a026 <f_open+0x35a>
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	68db      	ldr	r3, [r3, #12]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d05c      	beq.n	801a026 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	68da      	ldr	r2, [r3, #12]
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	895b      	ldrh	r3, [r3, #10]
 8019f78:	025b      	lsls	r3, r3, #9
 8019f7a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	689b      	ldr	r3, [r3, #8]
 8019f80:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	68db      	ldr	r3, [r3, #12]
 8019f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f88:	e016      	b.n	8019fb8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f7fe f865 	bl	801805e <get_fat>
 8019f94:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d802      	bhi.n	8019fa2 <f_open+0x2d6>
 8019f9c:	2302      	movs	r3, #2
 8019f9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fa8:	d102      	bne.n	8019fb0 <f_open+0x2e4>
 8019faa:	2301      	movs	r3, #1
 8019fac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019fb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fb4:	1ad3      	subs	r3, r2, r3
 8019fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d103      	bne.n	8019fc8 <f_open+0x2fc>
 8019fc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fc4:	429a      	cmp	r2, r3
 8019fc6:	d8e0      	bhi.n	8019f8a <f_open+0x2be>
				}
				fp->clust = clst;
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019fcc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019fce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d127      	bne.n	801a026 <f_open+0x35a>
 8019fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d022      	beq.n	801a026 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7fe f81b 	bl	8018020 <clust2sect>
 8019fea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d103      	bne.n	8019ffa <f_open+0x32e>
						res = FR_INT_ERR;
 8019ff2:	2302      	movs	r3, #2
 8019ff4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8019ff8:	e015      	b.n	801a026 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ffc:	0a5a      	lsrs	r2, r3, #9
 8019ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a000:	441a      	add	r2, r3
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a006:	697b      	ldr	r3, [r7, #20]
 801a008:	7858      	ldrb	r0, [r3, #1]
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	6a1a      	ldr	r2, [r3, #32]
 801a014:	2301      	movs	r3, #1
 801a016:	f7fd fc59 	bl	80178cc <disk_read>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d002      	beq.n	801a026 <f_open+0x35a>
 801a020:	2301      	movs	r3, #1
 801a022:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a026:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d002      	beq.n	801a034 <f_open+0x368>
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	2200      	movs	r2, #0
 801a032:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801a034:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801a038:	4618      	mov	r0, r3
 801a03a:	3768      	adds	r7, #104	@ 0x68
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}

0801a040 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b08c      	sub	sp, #48	@ 0x30
 801a044:	af00      	add	r7, sp, #0
 801a046:	60f8      	str	r0, [r7, #12]
 801a048:	60b9      	str	r1, [r7, #8]
 801a04a:	607a      	str	r2, [r7, #4]
 801a04c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801a04e:	68bb      	ldr	r3, [r7, #8]
 801a050:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	2200      	movs	r2, #0
 801a056:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	f107 0210 	add.w	r2, r7, #16
 801a05e:	4611      	mov	r1, r2
 801a060:	4618      	mov	r0, r3
 801a062:	f7ff fdb7 	bl	8019bd4 <validate>
 801a066:	4603      	mov	r3, r0
 801a068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a06c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a070:	2b00      	cmp	r3, #0
 801a072:	d107      	bne.n	801a084 <f_write+0x44>
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	7d5b      	ldrb	r3, [r3, #21]
 801a078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a07c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a080:	2b00      	cmp	r3, #0
 801a082:	d002      	beq.n	801a08a <f_write+0x4a>
 801a084:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a088:	e14b      	b.n	801a322 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	7d1b      	ldrb	r3, [r3, #20]
 801a08e:	f003 0302 	and.w	r3, r3, #2
 801a092:	2b00      	cmp	r3, #0
 801a094:	d101      	bne.n	801a09a <f_write+0x5a>
 801a096:	2307      	movs	r3, #7
 801a098:	e143      	b.n	801a322 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	699a      	ldr	r2, [r3, #24]
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	441a      	add	r2, r3
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	699b      	ldr	r3, [r3, #24]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	f080 812d 	bcs.w	801a306 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	699b      	ldr	r3, [r3, #24]
 801a0b0:	43db      	mvns	r3, r3
 801a0b2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801a0b4:	e127      	b.n	801a306 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	699b      	ldr	r3, [r3, #24]
 801a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	f040 80e3 	bne.w	801a28a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	699b      	ldr	r3, [r3, #24]
 801a0c8:	0a5b      	lsrs	r3, r3, #9
 801a0ca:	693a      	ldr	r2, [r7, #16]
 801a0cc:	8952      	ldrh	r2, [r2, #10]
 801a0ce:	3a01      	subs	r2, #1
 801a0d0:	4013      	ands	r3, r2
 801a0d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801a0d4:	69bb      	ldr	r3, [r7, #24]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d143      	bne.n	801a162 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	699b      	ldr	r3, [r3, #24]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d10c      	bne.n	801a0fc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	689b      	ldr	r3, [r3, #8]
 801a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801a0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d11a      	bne.n	801a124 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	2100      	movs	r1, #0
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7fe f9a9 	bl	801844a <create_chain>
 801a0f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a0fa:	e013      	b.n	801a124 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a100:	2b00      	cmp	r3, #0
 801a102:	d007      	beq.n	801a114 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	699b      	ldr	r3, [r3, #24]
 801a108:	4619      	mov	r1, r3
 801a10a:	68f8      	ldr	r0, [r7, #12]
 801a10c:	f7fe fa35 	bl	801857a <clmt_clust>
 801a110:	62b8      	str	r0, [r7, #40]	@ 0x28
 801a112:	e007      	b.n	801a124 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a114:	68fa      	ldr	r2, [r7, #12]
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	69db      	ldr	r3, [r3, #28]
 801a11a:	4619      	mov	r1, r3
 801a11c:	4610      	mov	r0, r2
 801a11e:	f7fe f994 	bl	801844a <create_chain>
 801a122:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a126:	2b00      	cmp	r3, #0
 801a128:	f000 80f2 	beq.w	801a310 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a12e:	2b01      	cmp	r3, #1
 801a130:	d104      	bne.n	801a13c <f_write+0xfc>
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2202      	movs	r2, #2
 801a136:	755a      	strb	r2, [r3, #21]
 801a138:	2302      	movs	r3, #2
 801a13a:	e0f2      	b.n	801a322 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a142:	d104      	bne.n	801a14e <f_write+0x10e>
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	2201      	movs	r2, #1
 801a148:	755a      	strb	r2, [r3, #21]
 801a14a:	2301      	movs	r3, #1
 801a14c:	e0e9      	b.n	801a322 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a152:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	689b      	ldr	r3, [r3, #8]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d102      	bne.n	801a162 <f_write+0x122>
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a160:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	7d1b      	ldrb	r3, [r3, #20]
 801a166:	b25b      	sxtb	r3, r3
 801a168:	2b00      	cmp	r3, #0
 801a16a:	da18      	bge.n	801a19e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a16c:	693b      	ldr	r3, [r7, #16]
 801a16e:	7858      	ldrb	r0, [r3, #1]
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	6a1a      	ldr	r2, [r3, #32]
 801a17a:	2301      	movs	r3, #1
 801a17c:	f7fd fbc6 	bl	801790c <disk_write>
 801a180:	4603      	mov	r3, r0
 801a182:	2b00      	cmp	r3, #0
 801a184:	d004      	beq.n	801a190 <f_write+0x150>
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	2201      	movs	r2, #1
 801a18a:	755a      	strb	r2, [r3, #21]
 801a18c:	2301      	movs	r3, #1
 801a18e:	e0c8      	b.n	801a322 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	7d1b      	ldrb	r3, [r3, #20]
 801a194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a198:	b2da      	uxtb	r2, r3
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a19e:	693a      	ldr	r2, [r7, #16]
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	69db      	ldr	r3, [r3, #28]
 801a1a4:	4619      	mov	r1, r3
 801a1a6:	4610      	mov	r0, r2
 801a1a8:	f7fd ff3a 	bl	8018020 <clust2sect>
 801a1ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a1ae:	697b      	ldr	r3, [r7, #20]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d104      	bne.n	801a1be <f_write+0x17e>
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	2202      	movs	r2, #2
 801a1b8:	755a      	strb	r2, [r3, #21]
 801a1ba:	2302      	movs	r3, #2
 801a1bc:	e0b1      	b.n	801a322 <f_write+0x2e2>
			sect += csect;
 801a1be:	697a      	ldr	r2, [r7, #20]
 801a1c0:	69bb      	ldr	r3, [r7, #24]
 801a1c2:	4413      	add	r3, r2
 801a1c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	0a5b      	lsrs	r3, r3, #9
 801a1ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a1cc:	6a3b      	ldr	r3, [r7, #32]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d03c      	beq.n	801a24c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a1d2:	69ba      	ldr	r2, [r7, #24]
 801a1d4:	6a3b      	ldr	r3, [r7, #32]
 801a1d6:	4413      	add	r3, r2
 801a1d8:	693a      	ldr	r2, [r7, #16]
 801a1da:	8952      	ldrh	r2, [r2, #10]
 801a1dc:	4293      	cmp	r3, r2
 801a1de:	d905      	bls.n	801a1ec <f_write+0x1ac>
					cc = fs->csize - csect;
 801a1e0:	693b      	ldr	r3, [r7, #16]
 801a1e2:	895b      	ldrh	r3, [r3, #10]
 801a1e4:	461a      	mov	r2, r3
 801a1e6:	69bb      	ldr	r3, [r7, #24]
 801a1e8:	1ad3      	subs	r3, r2, r3
 801a1ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	7858      	ldrb	r0, [r3, #1]
 801a1f0:	6a3b      	ldr	r3, [r7, #32]
 801a1f2:	697a      	ldr	r2, [r7, #20]
 801a1f4:	69f9      	ldr	r1, [r7, #28]
 801a1f6:	f7fd fb89 	bl	801790c <disk_write>
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d004      	beq.n	801a20a <f_write+0x1ca>
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	2201      	movs	r2, #1
 801a204:	755a      	strb	r2, [r3, #21]
 801a206:	2301      	movs	r3, #1
 801a208:	e08b      	b.n	801a322 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	6a1a      	ldr	r2, [r3, #32]
 801a20e:	697b      	ldr	r3, [r7, #20]
 801a210:	1ad3      	subs	r3, r2, r3
 801a212:	6a3a      	ldr	r2, [r7, #32]
 801a214:	429a      	cmp	r2, r3
 801a216:	d915      	bls.n	801a244 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	6a1a      	ldr	r2, [r3, #32]
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	1ad3      	subs	r3, r2, r3
 801a226:	025b      	lsls	r3, r3, #9
 801a228:	69fa      	ldr	r2, [r7, #28]
 801a22a:	4413      	add	r3, r2
 801a22c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a230:	4619      	mov	r1, r3
 801a232:	f7fd fc2b 	bl	8017a8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	7d1b      	ldrb	r3, [r3, #20]
 801a23a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a23e:	b2da      	uxtb	r2, r3
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a244:	6a3b      	ldr	r3, [r7, #32]
 801a246:	025b      	lsls	r3, r3, #9
 801a248:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801a24a:	e03f      	b.n	801a2cc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	6a1b      	ldr	r3, [r3, #32]
 801a250:	697a      	ldr	r2, [r7, #20]
 801a252:	429a      	cmp	r2, r3
 801a254:	d016      	beq.n	801a284 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	699a      	ldr	r2, [r3, #24]
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a25e:	429a      	cmp	r2, r3
 801a260:	d210      	bcs.n	801a284 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	7858      	ldrb	r0, [r3, #1]
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a26c:	2301      	movs	r3, #1
 801a26e:	697a      	ldr	r2, [r7, #20]
 801a270:	f7fd fb2c 	bl	80178cc <disk_read>
 801a274:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801a276:	2b00      	cmp	r3, #0
 801a278:	d004      	beq.n	801a284 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	2201      	movs	r2, #1
 801a27e:	755a      	strb	r2, [r3, #21]
 801a280:	2301      	movs	r3, #1
 801a282:	e04e      	b.n	801a322 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	697a      	ldr	r2, [r7, #20]
 801a288:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	699b      	ldr	r3, [r3, #24]
 801a28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a292:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801a296:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801a298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d901      	bls.n	801a2a4 <f_write+0x264>
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	699b      	ldr	r3, [r3, #24]
 801a2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a2b2:	4413      	add	r3, r2
 801a2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a2b6:	69f9      	ldr	r1, [r7, #28]
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f7fd fbe7 	bl	8017a8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	7d1b      	ldrb	r3, [r3, #20]
 801a2c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a2c6:	b2da      	uxtb	r2, r3
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a2cc:	69fa      	ldr	r2, [r7, #28]
 801a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2d0:	4413      	add	r3, r2
 801a2d2:	61fb      	str	r3, [r7, #28]
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	699a      	ldr	r2, [r3, #24]
 801a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2da:	441a      	add	r2, r3
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	619a      	str	r2, [r3, #24]
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	68da      	ldr	r2, [r3, #12]
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	699b      	ldr	r3, [r3, #24]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	bf38      	it	cc
 801a2ec:	461a      	movcc	r2, r3
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	60da      	str	r2, [r3, #12]
 801a2f2:	683b      	ldr	r3, [r7, #0]
 801a2f4:	681a      	ldr	r2, [r3, #0]
 801a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2f8:	441a      	add	r2, r3
 801a2fa:	683b      	ldr	r3, [r7, #0]
 801a2fc:	601a      	str	r2, [r3, #0]
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a302:	1ad3      	subs	r3, r2, r3
 801a304:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	f47f aed4 	bne.w	801a0b6 <f_write+0x76>
 801a30e:	e000      	b.n	801a312 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a310:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	7d1b      	ldrb	r3, [r3, #20]
 801a316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a31a:	b2da      	uxtb	r2, r3
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801a320:	2300      	movs	r3, #0
}
 801a322:	4618      	mov	r0, r3
 801a324:	3730      	adds	r7, #48	@ 0x30
 801a326:	46bd      	mov	sp, r7
 801a328:	bd80      	pop	{r7, pc}

0801a32a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801a32a:	b580      	push	{r7, lr}
 801a32c:	b086      	sub	sp, #24
 801a32e:	af00      	add	r7, sp, #0
 801a330:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	f107 0208 	add.w	r2, r7, #8
 801a338:	4611      	mov	r1, r2
 801a33a:	4618      	mov	r0, r3
 801a33c:	f7ff fc4a 	bl	8019bd4 <validate>
 801a340:	4603      	mov	r3, r0
 801a342:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a344:	7dfb      	ldrb	r3, [r7, #23]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d168      	bne.n	801a41c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	7d1b      	ldrb	r3, [r3, #20]
 801a34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a352:	2b00      	cmp	r3, #0
 801a354:	d062      	beq.n	801a41c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	7d1b      	ldrb	r3, [r3, #20]
 801a35a:	b25b      	sxtb	r3, r3
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	da15      	bge.n	801a38c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801a360:	68bb      	ldr	r3, [r7, #8]
 801a362:	7858      	ldrb	r0, [r3, #1]
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	6a1a      	ldr	r2, [r3, #32]
 801a36e:	2301      	movs	r3, #1
 801a370:	f7fd facc 	bl	801790c <disk_write>
 801a374:	4603      	mov	r3, r0
 801a376:	2b00      	cmp	r3, #0
 801a378:	d001      	beq.n	801a37e <f_sync+0x54>
 801a37a:	2301      	movs	r3, #1
 801a37c:	e04f      	b.n	801a41e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	7d1b      	ldrb	r3, [r3, #20]
 801a382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a386:	b2da      	uxtb	r2, r3
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801a38c:	f7f8 f974 	bl	8012678 <get_fattime>
 801a390:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801a392:	68ba      	ldr	r2, [r7, #8]
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a398:	4619      	mov	r1, r3
 801a39a:	4610      	mov	r0, r2
 801a39c:	f7fd fda4 	bl	8017ee8 <move_window>
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801a3a4:	7dfb      	ldrb	r3, [r7, #23]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d138      	bne.n	801a41c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a3ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	330b      	adds	r3, #11
 801a3b4:	781a      	ldrb	r2, [r3, #0]
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	330b      	adds	r3, #11
 801a3ba:	f042 0220 	orr.w	r2, r2, #32
 801a3be:	b2d2      	uxtb	r2, r2
 801a3c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	6818      	ldr	r0, [r3, #0]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	689b      	ldr	r3, [r3, #8]
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	68f9      	ldr	r1, [r7, #12]
 801a3ce:	f7fe faae 	bl	801892e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	f103 021c 	add.w	r2, r3, #28
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	68db      	ldr	r3, [r3, #12]
 801a3dc:	4619      	mov	r1, r3
 801a3de:	4610      	mov	r0, r2
 801a3e0:	f7fd fb28 	bl	8017a34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	3316      	adds	r3, #22
 801a3e8:	6939      	ldr	r1, [r7, #16]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7fd fb22 	bl	8017a34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	3312      	adds	r3, #18
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7fd fb01 	bl	80179fe <st_word>
					fs->wflag = 1;
 801a3fc:	68bb      	ldr	r3, [r7, #8]
 801a3fe:	2201      	movs	r2, #1
 801a400:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a402:	68bb      	ldr	r3, [r7, #8]
 801a404:	4618      	mov	r0, r3
 801a406:	f7fd fd9d 	bl	8017f44 <sync_fs>
 801a40a:	4603      	mov	r3, r0
 801a40c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	7d1b      	ldrb	r3, [r3, #20]
 801a412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a416:	b2da      	uxtb	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a41e:	4618      	mov	r0, r3
 801a420:	3718      	adds	r7, #24
 801a422:	46bd      	mov	sp, r7
 801a424:	bd80      	pop	{r7, pc}

0801a426 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a426:	b580      	push	{r7, lr}
 801a428:	b084      	sub	sp, #16
 801a42a:	af00      	add	r7, sp, #0
 801a42c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f7ff ff7b 	bl	801a32a <f_sync>
 801a434:	4603      	mov	r3, r0
 801a436:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a438:	7bfb      	ldrb	r3, [r7, #15]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d118      	bne.n	801a470 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	f107 0208 	add.w	r2, r7, #8
 801a444:	4611      	mov	r1, r2
 801a446:	4618      	mov	r0, r3
 801a448:	f7ff fbc4 	bl	8019bd4 <validate>
 801a44c:	4603      	mov	r3, r0
 801a44e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a450:	7bfb      	ldrb	r3, [r7, #15]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d10c      	bne.n	801a470 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	691b      	ldr	r3, [r3, #16]
 801a45a:	4618      	mov	r0, r3
 801a45c:	f7fd fca0 	bl	8017da0 <dec_lock>
 801a460:	4603      	mov	r3, r0
 801a462:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a464:	7bfb      	ldrb	r3, [r7, #15]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d102      	bne.n	801a470 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	2200      	movs	r2, #0
 801a46e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a470:	7bfb      	ldrb	r3, [r7, #15]
}
 801a472:	4618      	mov	r0, r3
 801a474:	3710      	adds	r7, #16
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}

0801a47a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801a47a:	b580      	push	{r7, lr}
 801a47c:	b090      	sub	sp, #64	@ 0x40
 801a47e:	af00      	add	r7, sp, #0
 801a480:	6078      	str	r0, [r7, #4]
 801a482:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801a484:	f107 0108 	add.w	r1, r7, #8
 801a488:	1d3b      	adds	r3, r7, #4
 801a48a:	2200      	movs	r2, #0
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7ff f951 	bl	8019734 <find_volume>
 801a492:	4603      	mov	r3, r0
 801a494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801a498:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d11f      	bne.n	801a4e0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801a4a0:	687a      	ldr	r2, [r7, #4]
 801a4a2:	f107 0308 	add.w	r3, r7, #8
 801a4a6:	4611      	mov	r1, r2
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	f7ff f837 	bl	801951c <follow_path>
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801a4b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d111      	bne.n	801a4e0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801a4bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a4c0:	b25b      	sxtb	r3, r3
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	da03      	bge.n	801a4ce <f_stat+0x54>
				res = FR_INVALID_NAME;
 801a4c6:	2306      	movs	r3, #6
 801a4c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801a4cc:	e008      	b.n	801a4e0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d005      	beq.n	801a4e0 <f_stat+0x66>
 801a4d4:	f107 0308 	add.w	r3, r7, #8
 801a4d8:	6839      	ldr	r1, [r7, #0]
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7fe fd88 	bl	8018ff0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801a4e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3740      	adds	r7, #64	@ 0x40
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}

0801a4ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	b087      	sub	sp, #28
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	60f8      	str	r0, [r7, #12]
 801a4f4:	60b9      	str	r1, [r7, #8]
 801a4f6:	4613      	mov	r3, r2
 801a4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a4fa:	2301      	movs	r3, #1
 801a4fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a4fe:	2300      	movs	r3, #0
 801a500:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a502:	4b1f      	ldr	r3, [pc, #124]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a504:	7a5b      	ldrb	r3, [r3, #9]
 801a506:	b2db      	uxtb	r3, r3
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d131      	bne.n	801a570 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a50c:	4b1c      	ldr	r3, [pc, #112]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a50e:	7a5b      	ldrb	r3, [r3, #9]
 801a510:	b2db      	uxtb	r3, r3
 801a512:	461a      	mov	r2, r3
 801a514:	4b1a      	ldr	r3, [pc, #104]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a516:	2100      	movs	r1, #0
 801a518:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a51a:	4b19      	ldr	r3, [pc, #100]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a51c:	7a5b      	ldrb	r3, [r3, #9]
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	4a17      	ldr	r2, [pc, #92]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a522:	009b      	lsls	r3, r3, #2
 801a524:	4413      	add	r3, r2
 801a526:	68fa      	ldr	r2, [r7, #12]
 801a528:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a52a:	4b15      	ldr	r3, [pc, #84]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a52c:	7a5b      	ldrb	r3, [r3, #9]
 801a52e:	b2db      	uxtb	r3, r3
 801a530:	461a      	mov	r2, r3
 801a532:	4b13      	ldr	r3, [pc, #76]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a534:	4413      	add	r3, r2
 801a536:	79fa      	ldrb	r2, [r7, #7]
 801a538:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a53a:	4b11      	ldr	r3, [pc, #68]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a53c:	7a5b      	ldrb	r3, [r3, #9]
 801a53e:	b2db      	uxtb	r3, r3
 801a540:	1c5a      	adds	r2, r3, #1
 801a542:	b2d1      	uxtb	r1, r2
 801a544:	4a0e      	ldr	r2, [pc, #56]	@ (801a580 <FATFS_LinkDriverEx+0x94>)
 801a546:	7251      	strb	r1, [r2, #9]
 801a548:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a54a:	7dbb      	ldrb	r3, [r7, #22]
 801a54c:	3330      	adds	r3, #48	@ 0x30
 801a54e:	b2da      	uxtb	r2, r3
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	3301      	adds	r3, #1
 801a558:	223a      	movs	r2, #58	@ 0x3a
 801a55a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a55c:	68bb      	ldr	r3, [r7, #8]
 801a55e:	3302      	adds	r3, #2
 801a560:	222f      	movs	r2, #47	@ 0x2f
 801a562:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	3303      	adds	r3, #3
 801a568:	2200      	movs	r2, #0
 801a56a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a56c:	2300      	movs	r3, #0
 801a56e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a570:	7dfb      	ldrb	r3, [r7, #23]
}
 801a572:	4618      	mov	r0, r3
 801a574:	371c      	adds	r7, #28
 801a576:	46bd      	mov	sp, r7
 801a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57c:	4770      	bx	lr
 801a57e:	bf00      	nop
 801a580:	20001da4 	.word	0x20001da4

0801a584 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a58e:	2200      	movs	r2, #0
 801a590:	6839      	ldr	r1, [r7, #0]
 801a592:	6878      	ldr	r0, [r7, #4]
 801a594:	f7ff ffaa 	bl	801a4ec <FATFS_LinkDriverEx>
 801a598:	4603      	mov	r3, r0
}
 801a59a:	4618      	mov	r0, r3
 801a59c:	3708      	adds	r7, #8
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	bd80      	pop	{r7, pc}
	...

0801a5a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b085      	sub	sp, #20
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	6039      	str	r1, [r7, #0]
 801a5ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a5b0:	88fb      	ldrh	r3, [r7, #6]
 801a5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 801a5b4:	d802      	bhi.n	801a5bc <ff_convert+0x18>
		c = chr;
 801a5b6:	88fb      	ldrh	r3, [r7, #6]
 801a5b8:	81fb      	strh	r3, [r7, #14]
 801a5ba:	e025      	b.n	801a608 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d00b      	beq.n	801a5da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a5c2:	88fb      	ldrh	r3, [r7, #6]
 801a5c4:	2bff      	cmp	r3, #255	@ 0xff
 801a5c6:	d805      	bhi.n	801a5d4 <ff_convert+0x30>
 801a5c8:	88fb      	ldrh	r3, [r7, #6]
 801a5ca:	3b80      	subs	r3, #128	@ 0x80
 801a5cc:	4a12      	ldr	r2, [pc, #72]	@ (801a618 <ff_convert+0x74>)
 801a5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a5d2:	e000      	b.n	801a5d6 <ff_convert+0x32>
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	81fb      	strh	r3, [r7, #14]
 801a5d8:	e016      	b.n	801a608 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a5da:	2300      	movs	r3, #0
 801a5dc:	81fb      	strh	r3, [r7, #14]
 801a5de:	e009      	b.n	801a5f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a5e0:	89fb      	ldrh	r3, [r7, #14]
 801a5e2:	4a0d      	ldr	r2, [pc, #52]	@ (801a618 <ff_convert+0x74>)
 801a5e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a5e8:	88fa      	ldrh	r2, [r7, #6]
 801a5ea:	429a      	cmp	r2, r3
 801a5ec:	d006      	beq.n	801a5fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a5ee:	89fb      	ldrh	r3, [r7, #14]
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	81fb      	strh	r3, [r7, #14]
 801a5f4:	89fb      	ldrh	r3, [r7, #14]
 801a5f6:	2b7f      	cmp	r3, #127	@ 0x7f
 801a5f8:	d9f2      	bls.n	801a5e0 <ff_convert+0x3c>
 801a5fa:	e000      	b.n	801a5fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a5fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a5fe:	89fb      	ldrh	r3, [r7, #14]
 801a600:	3380      	adds	r3, #128	@ 0x80
 801a602:	b29b      	uxth	r3, r3
 801a604:	b2db      	uxtb	r3, r3
 801a606:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a608:	89fb      	ldrh	r3, [r7, #14]
}
 801a60a:	4618      	mov	r0, r3
 801a60c:	3714      	adds	r7, #20
 801a60e:	46bd      	mov	sp, r7
 801a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a614:	4770      	bx	lr
 801a616:	bf00      	nop
 801a618:	08022c60 	.word	0x08022c60

0801a61c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a61c:	b480      	push	{r7}
 801a61e:	b087      	sub	sp, #28
 801a620:	af00      	add	r7, sp, #0
 801a622:	4603      	mov	r3, r0
 801a624:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a626:	88fb      	ldrh	r3, [r7, #6]
 801a628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a62c:	d201      	bcs.n	801a632 <ff_wtoupper+0x16>
 801a62e:	4b3e      	ldr	r3, [pc, #248]	@ (801a728 <ff_wtoupper+0x10c>)
 801a630:	e000      	b.n	801a634 <ff_wtoupper+0x18>
 801a632:	4b3e      	ldr	r3, [pc, #248]	@ (801a72c <ff_wtoupper+0x110>)
 801a634:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a636:	697b      	ldr	r3, [r7, #20]
 801a638:	1c9a      	adds	r2, r3, #2
 801a63a:	617a      	str	r2, [r7, #20]
 801a63c:	881b      	ldrh	r3, [r3, #0]
 801a63e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a640:	8a7b      	ldrh	r3, [r7, #18]
 801a642:	2b00      	cmp	r3, #0
 801a644:	d068      	beq.n	801a718 <ff_wtoupper+0xfc>
 801a646:	88fa      	ldrh	r2, [r7, #6]
 801a648:	8a7b      	ldrh	r3, [r7, #18]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d364      	bcc.n	801a718 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a64e:	697b      	ldr	r3, [r7, #20]
 801a650:	1c9a      	adds	r2, r3, #2
 801a652:	617a      	str	r2, [r7, #20]
 801a654:	881b      	ldrh	r3, [r3, #0]
 801a656:	823b      	strh	r3, [r7, #16]
 801a658:	8a3b      	ldrh	r3, [r7, #16]
 801a65a:	0a1b      	lsrs	r3, r3, #8
 801a65c:	81fb      	strh	r3, [r7, #14]
 801a65e:	8a3b      	ldrh	r3, [r7, #16]
 801a660:	b2db      	uxtb	r3, r3
 801a662:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a664:	88fa      	ldrh	r2, [r7, #6]
 801a666:	8a79      	ldrh	r1, [r7, #18]
 801a668:	8a3b      	ldrh	r3, [r7, #16]
 801a66a:	440b      	add	r3, r1
 801a66c:	429a      	cmp	r2, r3
 801a66e:	da49      	bge.n	801a704 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a670:	89fb      	ldrh	r3, [r7, #14]
 801a672:	2b08      	cmp	r3, #8
 801a674:	d84f      	bhi.n	801a716 <ff_wtoupper+0xfa>
 801a676:	a201      	add	r2, pc, #4	@ (adr r2, 801a67c <ff_wtoupper+0x60>)
 801a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a67c:	0801a6a1 	.word	0x0801a6a1
 801a680:	0801a6b3 	.word	0x0801a6b3
 801a684:	0801a6c9 	.word	0x0801a6c9
 801a688:	0801a6d1 	.word	0x0801a6d1
 801a68c:	0801a6d9 	.word	0x0801a6d9
 801a690:	0801a6e1 	.word	0x0801a6e1
 801a694:	0801a6e9 	.word	0x0801a6e9
 801a698:	0801a6f1 	.word	0x0801a6f1
 801a69c:	0801a6f9 	.word	0x0801a6f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a6a0:	88fa      	ldrh	r2, [r7, #6]
 801a6a2:	8a7b      	ldrh	r3, [r7, #18]
 801a6a4:	1ad3      	subs	r3, r2, r3
 801a6a6:	005b      	lsls	r3, r3, #1
 801a6a8:	697a      	ldr	r2, [r7, #20]
 801a6aa:	4413      	add	r3, r2
 801a6ac:	881b      	ldrh	r3, [r3, #0]
 801a6ae:	80fb      	strh	r3, [r7, #6]
 801a6b0:	e027      	b.n	801a702 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a6b2:	88fa      	ldrh	r2, [r7, #6]
 801a6b4:	8a7b      	ldrh	r3, [r7, #18]
 801a6b6:	1ad3      	subs	r3, r2, r3
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	f003 0301 	and.w	r3, r3, #1
 801a6be:	b29b      	uxth	r3, r3
 801a6c0:	88fa      	ldrh	r2, [r7, #6]
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	80fb      	strh	r3, [r7, #6]
 801a6c6:	e01c      	b.n	801a702 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a6c8:	88fb      	ldrh	r3, [r7, #6]
 801a6ca:	3b10      	subs	r3, #16
 801a6cc:	80fb      	strh	r3, [r7, #6]
 801a6ce:	e018      	b.n	801a702 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a6d0:	88fb      	ldrh	r3, [r7, #6]
 801a6d2:	3b20      	subs	r3, #32
 801a6d4:	80fb      	strh	r3, [r7, #6]
 801a6d6:	e014      	b.n	801a702 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a6d8:	88fb      	ldrh	r3, [r7, #6]
 801a6da:	3b30      	subs	r3, #48	@ 0x30
 801a6dc:	80fb      	strh	r3, [r7, #6]
 801a6de:	e010      	b.n	801a702 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a6e0:	88fb      	ldrh	r3, [r7, #6]
 801a6e2:	3b1a      	subs	r3, #26
 801a6e4:	80fb      	strh	r3, [r7, #6]
 801a6e6:	e00c      	b.n	801a702 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a6e8:	88fb      	ldrh	r3, [r7, #6]
 801a6ea:	3308      	adds	r3, #8
 801a6ec:	80fb      	strh	r3, [r7, #6]
 801a6ee:	e008      	b.n	801a702 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a6f0:	88fb      	ldrh	r3, [r7, #6]
 801a6f2:	3b50      	subs	r3, #80	@ 0x50
 801a6f4:	80fb      	strh	r3, [r7, #6]
 801a6f6:	e004      	b.n	801a702 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a6f8:	88fb      	ldrh	r3, [r7, #6]
 801a6fa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801a6fe:	80fb      	strh	r3, [r7, #6]
 801a700:	bf00      	nop
			}
			break;
 801a702:	e008      	b.n	801a716 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a704:	89fb      	ldrh	r3, [r7, #14]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d195      	bne.n	801a636 <ff_wtoupper+0x1a>
 801a70a:	8a3b      	ldrh	r3, [r7, #16]
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	697a      	ldr	r2, [r7, #20]
 801a710:	4413      	add	r3, r2
 801a712:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a714:	e78f      	b.n	801a636 <ff_wtoupper+0x1a>
			break;
 801a716:	bf00      	nop
	}

	return chr;
 801a718:	88fb      	ldrh	r3, [r7, #6]
}
 801a71a:	4618      	mov	r0, r3
 801a71c:	371c      	adds	r7, #28
 801a71e:	46bd      	mov	sp, r7
 801a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a724:	4770      	bx	lr
 801a726:	bf00      	nop
 801a728:	08022d60 	.word	0x08022d60
 801a72c:	08022f54 	.word	0x08022f54

0801a730 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801a738:	2201      	movs	r2, #1
 801a73a:	6879      	ldr	r1, [r7, #4]
 801a73c:	480e      	ldr	r0, [pc, #56]	@ (801a778 <Mount_SD+0x48>)
 801a73e:	f7ff fa7f 	bl	8019c40 <f_mount>
 801a742:	4603      	mov	r3, r0
 801a744:	461a      	mov	r2, r3
 801a746:	4b0d      	ldr	r3, [pc, #52]	@ (801a77c <Mount_SD+0x4c>)
 801a748:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a74a:	4b0c      	ldr	r3, [pc, #48]	@ (801a77c <Mount_SD+0x4c>)
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d006      	beq.n	801a760 <Mount_SD+0x30>
		if (sdioPrints)
 801a752:	2300      	movs	r3, #0
 801a754:	2b00      	cmp	r3, #0
 801a756:	d009      	beq.n	801a76c <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801a758:	4809      	ldr	r0, [pc, #36]	@ (801a780 <Mount_SD+0x50>)
 801a75a:	f002 fd13 	bl	801d184 <puts>
 801a75e:	e005      	b.n	801a76c <Mount_SD+0x3c>
	} else if (sdioPrints)
 801a760:	2300      	movs	r3, #0
 801a762:	2b00      	cmp	r3, #0
 801a764:	d002      	beq.n	801a76c <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801a766:	4807      	ldr	r0, [pc, #28]	@ (801a784 <Mount_SD+0x54>)
 801a768:	f002 fd0c 	bl	801d184 <puts>

	return fresult;
 801a76c:	4b03      	ldr	r3, [pc, #12]	@ (801a77c <Mount_SD+0x4c>)
 801a76e:	781b      	ldrb	r3, [r3, #0]
}
 801a770:	4618      	mov	r0, r3
 801a772:	3708      	adds	r7, #8
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	20001db0 	.word	0x20001db0
 801a77c:	2000232c 	.word	0x2000232c
 801a780:	080222f0 	.word	0x080222f0
 801a784:	08022310 	.word	0x08022310

0801a788 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801a788:	b580      	push	{r7, lr}
 801a78a:	b082      	sub	sp, #8
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801a790:	2201      	movs	r2, #1
 801a792:	6879      	ldr	r1, [r7, #4]
 801a794:	2000      	movs	r0, #0
 801a796:	f7ff fa53 	bl	8019c40 <f_mount>
 801a79a:	4603      	mov	r3, r0
 801a79c:	461a      	mov	r2, r3
 801a79e:	4b0b      	ldr	r3, [pc, #44]	@ (801a7cc <Unmount_SD+0x44>)
 801a7a0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a7a2:	4b0a      	ldr	r3, [pc, #40]	@ (801a7cc <Unmount_SD+0x44>)
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d106      	bne.n	801a7b8 <Unmount_SD+0x30>
		if (sdioPrints)
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d009      	beq.n	801a7c4 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801a7b0:	4807      	ldr	r0, [pc, #28]	@ (801a7d0 <Unmount_SD+0x48>)
 801a7b2:	f002 fce7 	bl	801d184 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801a7b6:	e005      	b.n	801a7c4 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d002      	beq.n	801a7c4 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801a7be:	4805      	ldr	r0, [pc, #20]	@ (801a7d4 <Unmount_SD+0x4c>)
 801a7c0:	f002 fce0 	bl	801d184 <puts>
}
 801a7c4:	bf00      	nop
 801a7c6:	3708      	adds	r7, #8
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}
 801a7cc:	2000232c 	.word	0x2000232c
 801a7d0:	08022330 	.word	0x08022330
 801a7d4:	08022354 	.word	0x08022354

0801a7d8 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b0a8      	sub	sp, #160	@ 0xa0
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801a7e0:	4941      	ldr	r1, [pc, #260]	@ (801a8e8 <Create_File+0x110>)
 801a7e2:	6878      	ldr	r0, [r7, #4]
 801a7e4:	f7ff fe49 	bl	801a47a <f_stat>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	4b3f      	ldr	r3, [pc, #252]	@ (801a8ec <Create_File+0x114>)
 801a7ee:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a7f0:	4b3e      	ldr	r3, [pc, #248]	@ (801a8ec <Create_File+0x114>)
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d114      	bne.n	801a822 <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801a7f8:	4b3d      	ldr	r3, [pc, #244]	@ (801a8f0 <Create_File+0x118>)
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801a7fe:	f107 0308 	add.w	r3, r7, #8
 801a802:	687a      	ldr	r2, [r7, #4]
 801a804:	493b      	ldr	r1, [pc, #236]	@ (801a8f4 <Create_File+0x11c>)
 801a806:	4618      	mov	r0, r3
 801a808:	f002 fcc4 	bl	801d194 <siprintf>
				name);
		if (sdioPrints)
 801a80c:	2300      	movs	r3, #0
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d004      	beq.n	801a81c <Create_File+0x44>
			printf(buf);
 801a812:	f107 0308 	add.w	r3, r7, #8
 801a816:	4618      	mov	r0, r3
 801a818:	f002 fc4c 	bl	801d0b4 <iprintf>

		return fresult;
 801a81c:	4b33      	ldr	r3, [pc, #204]	@ (801a8ec <Create_File+0x114>)
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	e05d      	b.n	801a8de <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801a822:	220b      	movs	r2, #11
 801a824:	6879      	ldr	r1, [r7, #4]
 801a826:	4834      	ldr	r0, [pc, #208]	@ (801a8f8 <Create_File+0x120>)
 801a828:	f7ff fa50 	bl	8019ccc <f_open>
 801a82c:	4603      	mov	r3, r0
 801a82e:	461a      	mov	r2, r3
 801a830:	4b2e      	ldr	r3, [pc, #184]	@ (801a8ec <Create_File+0x114>)
 801a832:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a834:	4b2d      	ldr	r3, [pc, #180]	@ (801a8ec <Create_File+0x114>)
 801a836:	781b      	ldrb	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d013      	beq.n	801a864 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801a83c:	4b2b      	ldr	r3, [pc, #172]	@ (801a8ec <Create_File+0x114>)
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	461a      	mov	r2, r3
 801a842:	f107 0008 	add.w	r0, r7, #8
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	492c      	ldr	r1, [pc, #176]	@ (801a8fc <Create_File+0x124>)
 801a84a:	f002 fca3 	bl	801d194 <siprintf>
					name);
			if (sdioPrints)
 801a84e:	2300      	movs	r3, #0
 801a850:	2b00      	cmp	r3, #0
 801a852:	d004      	beq.n	801a85e <Create_File+0x86>
				printf(buf);
 801a854:	f107 0308 	add.w	r3, r7, #8
 801a858:	4618      	mov	r0, r3
 801a85a:	f002 fc2b 	bl	801d0b4 <iprintf>

			return fresult;
 801a85e:	4b23      	ldr	r3, [pc, #140]	@ (801a8ec <Create_File+0x114>)
 801a860:	781b      	ldrb	r3, [r3, #0]
 801a862:	e03c      	b.n	801a8de <Create_File+0x106>
		} else {

			sprintf(buf,
 801a864:	f107 0308 	add.w	r3, r7, #8
 801a868:	687a      	ldr	r2, [r7, #4]
 801a86a:	4925      	ldr	r1, [pc, #148]	@ (801a900 <Create_File+0x128>)
 801a86c:	4618      	mov	r0, r3
 801a86e:	f002 fc91 	bl	801d194 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801a872:	2300      	movs	r3, #0
 801a874:	2b00      	cmp	r3, #0
 801a876:	d004      	beq.n	801a882 <Create_File+0xaa>
				printf(buf);
 801a878:	f107 0308 	add.w	r3, r7, #8
 801a87c:	4618      	mov	r0, r3
 801a87e:	f002 fc19 	bl	801d0b4 <iprintf>

		}

		fresult = f_close(&fil);
 801a882:	481d      	ldr	r0, [pc, #116]	@ (801a8f8 <Create_File+0x120>)
 801a884:	f7ff fdcf 	bl	801a426 <f_close>
 801a888:	4603      	mov	r3, r0
 801a88a:	461a      	mov	r2, r3
 801a88c:	4b17      	ldr	r3, [pc, #92]	@ (801a8ec <Create_File+0x114>)
 801a88e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a890:	4b16      	ldr	r3, [pc, #88]	@ (801a8ec <Create_File+0x114>)
 801a892:	781b      	ldrb	r3, [r3, #0]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d011      	beq.n	801a8bc <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801a898:	4b14      	ldr	r3, [pc, #80]	@ (801a8ec <Create_File+0x114>)
 801a89a:	781b      	ldrb	r3, [r3, #0]
 801a89c:	461a      	mov	r2, r3
 801a89e:	f107 0008 	add.w	r0, r7, #8
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	4917      	ldr	r1, [pc, #92]	@ (801a904 <Create_File+0x12c>)
 801a8a6:	f002 fc75 	bl	801d194 <siprintf>
			if (sdioPrints)
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d014      	beq.n	801a8da <Create_File+0x102>
				printf(buf);
 801a8b0:	f107 0308 	add.w	r3, r7, #8
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f002 fbfd 	bl	801d0b4 <iprintf>
 801a8ba:	e00e      	b.n	801a8da <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a8bc:	f107 0308 	add.w	r3, r7, #8
 801a8c0:	687a      	ldr	r2, [r7, #4]
 801a8c2:	4911      	ldr	r1, [pc, #68]	@ (801a908 <Create_File+0x130>)
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f002 fc65 	bl	801d194 <siprintf>
			if (sdioPrints)
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d004      	beq.n	801a8da <Create_File+0x102>
				printf(buf);
 801a8d0:	f107 0308 	add.w	r3, r7, #8
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f002 fbed 	bl	801d0b4 <iprintf>

		}
	}
	return fresult;
 801a8da:	4b04      	ldr	r3, [pc, #16]	@ (801a8ec <Create_File+0x114>)
 801a8dc:	781b      	ldrb	r3, [r3, #0]
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	37a0      	adds	r7, #160	@ 0xa0
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
 801a8e6:	bf00      	nop
 801a8e8:	20002214 	.word	0x20002214
 801a8ec:	2000232c 	.word	0x2000232c
 801a8f0:	20002335 	.word	0x20002335
 801a8f4:	08022518 	.word	0x08022518
 801a8f8:	20001fe4 	.word	0x20001fe4
 801a8fc:	0802254c 	.word	0x0802254c
 801a900:	08022574 	.word	0x08022574
 801a904:	080225b4 	.word	0x080225b4
 801a908:	080224f8 	.word	0x080224f8

0801a90c <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b0a8      	sub	sp, #160	@ 0xa0
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
 801a914:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801a916:	4951      	ldr	r1, [pc, #324]	@ (801aa5c <Update_File+0x150>)
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f7ff fdae 	bl	801a47a <f_stat>
 801a91e:	4603      	mov	r3, r0
 801a920:	461a      	mov	r2, r3
 801a922:	4b4f      	ldr	r3, [pc, #316]	@ (801aa60 <Update_File+0x154>)
 801a924:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a926:	4b4e      	ldr	r3, [pc, #312]	@ (801aa60 <Update_File+0x154>)
 801a928:	781b      	ldrb	r3, [r3, #0]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d011      	beq.n	801a952 <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801a92e:	f107 0308 	add.w	r3, r7, #8
 801a932:	687a      	ldr	r2, [r7, #4]
 801a934:	494b      	ldr	r1, [pc, #300]	@ (801aa64 <Update_File+0x158>)
 801a936:	4618      	mov	r0, r3
 801a938:	f002 fc2c 	bl	801d194 <siprintf>
		if (sdioPrints)
 801a93c:	2300      	movs	r3, #0
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d004      	beq.n	801a94c <Update_File+0x40>
			printf(buf);
 801a942:	f107 0308 	add.w	r3, r7, #8
 801a946:	4618      	mov	r0, r3
 801a948:	f002 fbb4 	bl	801d0b4 <iprintf>

		return fresult;
 801a94c:	4b44      	ldr	r3, [pc, #272]	@ (801aa60 <Update_File+0x154>)
 801a94e:	781b      	ldrb	r3, [r3, #0]
 801a950:	e080      	b.n	801aa54 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801a952:	2232      	movs	r2, #50	@ 0x32
 801a954:	6879      	ldr	r1, [r7, #4]
 801a956:	4844      	ldr	r0, [pc, #272]	@ (801aa68 <Update_File+0x15c>)
 801a958:	f7ff f9b8 	bl	8019ccc <f_open>
 801a95c:	4603      	mov	r3, r0
 801a95e:	461a      	mov	r2, r3
 801a960:	4b3f      	ldr	r3, [pc, #252]	@ (801aa60 <Update_File+0x154>)
 801a962:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a964:	4b3e      	ldr	r3, [pc, #248]	@ (801aa60 <Update_File+0x154>)
 801a966:	781b      	ldrb	r3, [r3, #0]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d013      	beq.n	801a994 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801a96c:	4b3c      	ldr	r3, [pc, #240]	@ (801aa60 <Update_File+0x154>)
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	461a      	mov	r2, r3
 801a972:	f107 0008 	add.w	r0, r7, #8
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	493c      	ldr	r1, [pc, #240]	@ (801aa6c <Update_File+0x160>)
 801a97a:	f002 fc0b 	bl	801d194 <siprintf>
					name);
			if (sdioPrints)
 801a97e:	2300      	movs	r3, #0
 801a980:	2b00      	cmp	r3, #0
 801a982:	d004      	beq.n	801a98e <Update_File+0x82>
				printf(buf);
 801a984:	f107 0308 	add.w	r3, r7, #8
 801a988:	4618      	mov	r0, r3
 801a98a:	f002 fb93 	bl	801d0b4 <iprintf>

			return fresult;
 801a98e:	4b34      	ldr	r3, [pc, #208]	@ (801aa60 <Update_File+0x154>)
 801a990:	781b      	ldrb	r3, [r3, #0]
 801a992:	e05f      	b.n	801aa54 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801a994:	6838      	ldr	r0, [r7, #0]
 801a996:	f7e5 fc83 	bl	80002a0 <strlen>
 801a99a:	4602      	mov	r2, r0
 801a99c:	4b34      	ldr	r3, [pc, #208]	@ (801aa70 <Update_File+0x164>)
 801a99e:	6839      	ldr	r1, [r7, #0]
 801a9a0:	4831      	ldr	r0, [pc, #196]	@ (801aa68 <Update_File+0x15c>)
 801a9a2:	f7ff fb4d 	bl	801a040 <f_write>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	4b2d      	ldr	r3, [pc, #180]	@ (801aa60 <Update_File+0x154>)
 801a9ac:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a9ae:	4b2c      	ldr	r3, [pc, #176]	@ (801aa60 <Update_File+0x154>)
 801a9b0:	781b      	ldrb	r3, [r3, #0]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d011      	beq.n	801a9da <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801a9b6:	4b2a      	ldr	r3, [pc, #168]	@ (801aa60 <Update_File+0x154>)
 801a9b8:	781b      	ldrb	r3, [r3, #0]
 801a9ba:	461a      	mov	r2, r3
 801a9bc:	f107 0008 	add.w	r0, r7, #8
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	492c      	ldr	r1, [pc, #176]	@ (801aa74 <Update_File+0x168>)
 801a9c4:	f002 fbe6 	bl	801d194 <siprintf>
					name);
			if (sdioPrints)
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d014      	beq.n	801a9f8 <Update_File+0xec>
				printf(buf);
 801a9ce:	f107 0308 	add.w	r3, r7, #8
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f002 fb6e 	bl	801d0b4 <iprintf>
 801a9d8:	e00e      	b.n	801a9f8 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801a9da:	f107 0308 	add.w	r3, r7, #8
 801a9de:	687a      	ldr	r2, [r7, #4]
 801a9e0:	4925      	ldr	r1, [pc, #148]	@ (801aa78 <Update_File+0x16c>)
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	f002 fbd6 	bl	801d194 <siprintf>
			if (sdioPrints)
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d004      	beq.n	801a9f8 <Update_File+0xec>
				printf(buf);
 801a9ee:	f107 0308 	add.w	r3, r7, #8
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	f002 fb5e 	bl	801d0b4 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801a9f8:	481b      	ldr	r0, [pc, #108]	@ (801aa68 <Update_File+0x15c>)
 801a9fa:	f7ff fd14 	bl	801a426 <f_close>
 801a9fe:	4603      	mov	r3, r0
 801aa00:	461a      	mov	r2, r3
 801aa02:	4b17      	ldr	r3, [pc, #92]	@ (801aa60 <Update_File+0x154>)
 801aa04:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801aa06:	4b16      	ldr	r3, [pc, #88]	@ (801aa60 <Update_File+0x154>)
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d011      	beq.n	801aa32 <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801aa0e:	4b14      	ldr	r3, [pc, #80]	@ (801aa60 <Update_File+0x154>)
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	461a      	mov	r2, r3
 801aa14:	f107 0008 	add.w	r0, r7, #8
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	4918      	ldr	r1, [pc, #96]	@ (801aa7c <Update_File+0x170>)
 801aa1c:	f002 fbba 	bl	801d194 <siprintf>
					name);
			if (sdioPrints)
 801aa20:	2300      	movs	r3, #0
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d014      	beq.n	801aa50 <Update_File+0x144>
				printf(buf);
 801aa26:	f107 0308 	add.w	r3, r7, #8
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f002 fb42 	bl	801d0b4 <iprintf>
 801aa30:	e00e      	b.n	801aa50 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801aa32:	f107 0308 	add.w	r3, r7, #8
 801aa36:	687a      	ldr	r2, [r7, #4]
 801aa38:	4911      	ldr	r1, [pc, #68]	@ (801aa80 <Update_File+0x174>)
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	f002 fbaa 	bl	801d194 <siprintf>
			if (sdioPrints)
 801aa40:	2300      	movs	r3, #0
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d004      	beq.n	801aa50 <Update_File+0x144>
				printf(buf);
 801aa46:	f107 0308 	add.w	r3, r7, #8
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f002 fb32 	bl	801d0b4 <iprintf>

		}
	}
	return fresult;
 801aa50:	4b03      	ldr	r3, [pc, #12]	@ (801aa60 <Update_File+0x154>)
 801aa52:	781b      	ldrb	r3, [r3, #0]
}
 801aa54:	4618      	mov	r0, r3
 801aa56:	37a0      	adds	r7, #160	@ 0xa0
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}
 801aa5c:	20002214 	.word	0x20002214
 801aa60:	2000232c 	.word	0x2000232c
 801aa64:	080223a8 	.word	0x080223a8
 801aa68:	20001fe4 	.word	0x20001fe4
 801aa6c:	080223c8 	.word	0x080223c8
 801aa70:	20002330 	.word	0x20002330
 801aa74:	080225d8 	.word	0x080225d8
 801aa78:	08022600 	.word	0x08022600
 801aa7c:	080224d0 	.word	0x080224d0
 801aa80:	080224f8 	.word	0x080224f8

0801aa84 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b088      	sub	sp, #32
 801aa88:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801aa8a:	f107 0314 	add.w	r3, r7, #20
 801aa8e:	2200      	movs	r2, #0
 801aa90:	4619      	mov	r1, r3
 801aa92:	48b4      	ldr	r0, [pc, #720]	@ (801ad64 <json_update+0x2e0>)
 801aa94:	f7ee fd38 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801aa98:	463b      	mov	r3, r7
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	4619      	mov	r1, r3
 801aa9e:	48b1      	ldr	r0, [pc, #708]	@ (801ad64 <json_update+0x2e0>)
 801aaa0:	f7ee fc50 	bl	8009344 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801aaa4:	7dba      	ldrb	r2, [r7, #22]
 801aaa6:	4bb0      	ldr	r3, [pc, #704]	@ (801ad68 <json_update+0x2e4>)
 801aaa8:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801aaaa:	7d7a      	ldrb	r2, [r7, #21]
 801aaac:	4baf      	ldr	r3, [pc, #700]	@ (801ad6c <json_update+0x2e8>)
 801aaae:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801aab0:	7dfa      	ldrb	r2, [r7, #23]
 801aab2:	4baf      	ldr	r3, [pc, #700]	@ (801ad70 <json_update+0x2ec>)
 801aab4:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801aab6:	783a      	ldrb	r2, [r7, #0]
 801aab8:	4bae      	ldr	r3, [pc, #696]	@ (801ad74 <json_update+0x2f0>)
 801aaba:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801aabc:	787a      	ldrb	r2, [r7, #1]
 801aabe:	4bae      	ldr	r3, [pc, #696]	@ (801ad78 <json_update+0x2f4>)
 801aac0:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801aac2:	78ba      	ldrb	r2, [r7, #2]
 801aac4:	4bad      	ldr	r3, [pc, #692]	@ (801ad7c <json_update+0x2f8>)
 801aac6:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801aac8:	48ad      	ldr	r0, [pc, #692]	@ (801ad80 <json_update+0x2fc>)
 801aaca:	f7ff fe31 	bl	801a730 <Mount_SD>
 801aace:	4603      	mov	r3, r0
 801aad0:	461a      	mov	r2, r3
 801aad2:	4bac      	ldr	r3, [pc, #688]	@ (801ad84 <json_update+0x300>)
 801aad4:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801aad6:	4bab      	ldr	r3, [pc, #684]	@ (801ad84 <json_update+0x300>)
 801aad8:	781b      	ldrb	r3, [r3, #0]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	f040 8137 	bne.w	801ad4e <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801aae0:	49a9      	ldr	r1, [pc, #676]	@ (801ad88 <json_update+0x304>)
 801aae2:	48aa      	ldr	r0, [pc, #680]	@ (801ad8c <json_update+0x308>)
 801aae4:	f002 fb56 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801aae8:	49a8      	ldr	r1, [pc, #672]	@ (801ad8c <json_update+0x308>)
 801aaea:	48a9      	ldr	r0, [pc, #676]	@ (801ad90 <json_update+0x30c>)
 801aaec:	f7ff ff0e 	bl	801a90c <Update_File>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	461a      	mov	r2, r3
 801aaf4:	4ba3      	ldr	r3, [pc, #652]	@ (801ad84 <json_update+0x300>)
 801aaf6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aaf8:	22ff      	movs	r2, #255	@ 0xff
 801aafa:	2100      	movs	r1, #0
 801aafc:	48a3      	ldr	r0, [pc, #652]	@ (801ad8c <json_update+0x308>)
 801aafe:	f002 fc93 	bl	801d428 <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801ab02:	f7e7 fc5b 	bl	80023bc <ver_GetUid>
 801ab06:	4603      	mov	r3, r0
 801ab08:	461a      	mov	r2, r3
 801ab0a:	49a2      	ldr	r1, [pc, #648]	@ (801ad94 <json_update+0x310>)
 801ab0c:	489f      	ldr	r0, [pc, #636]	@ (801ad8c <json_update+0x308>)
 801ab0e:	f002 fb41 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ab12:	499e      	ldr	r1, [pc, #632]	@ (801ad8c <json_update+0x308>)
 801ab14:	489e      	ldr	r0, [pc, #632]	@ (801ad90 <json_update+0x30c>)
 801ab16:	f7ff fef9 	bl	801a90c <Update_File>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	461a      	mov	r2, r3
 801ab1e:	4b99      	ldr	r3, [pc, #612]	@ (801ad84 <json_update+0x300>)
 801ab20:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab22:	22ff      	movs	r2, #255	@ 0xff
 801ab24:	2100      	movs	r1, #0
 801ab26:	4899      	ldr	r0, [pc, #612]	@ (801ad8c <json_update+0x308>)
 801ab28:	f002 fc7e 	bl	801d428 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801ab2c:	4a9a      	ldr	r2, [pc, #616]	@ (801ad98 <json_update+0x314>)
 801ab2e:	499b      	ldr	r1, [pc, #620]	@ (801ad9c <json_update+0x318>)
 801ab30:	4896      	ldr	r0, [pc, #600]	@ (801ad8c <json_update+0x308>)
 801ab32:	f002 fb2f 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ab36:	4995      	ldr	r1, [pc, #596]	@ (801ad8c <json_update+0x308>)
 801ab38:	4895      	ldr	r0, [pc, #596]	@ (801ad90 <json_update+0x30c>)
 801ab3a:	f7ff fee7 	bl	801a90c <Update_File>
 801ab3e:	4603      	mov	r3, r0
 801ab40:	461a      	mov	r2, r3
 801ab42:	4b90      	ldr	r3, [pc, #576]	@ (801ad84 <json_update+0x300>)
 801ab44:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab46:	22ff      	movs	r2, #255	@ 0xff
 801ab48:	2100      	movs	r1, #0
 801ab4a:	4890      	ldr	r0, [pc, #576]	@ (801ad8c <json_update+0x308>)
 801ab4c:	f002 fc6c 	bl	801d428 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801ab50:	783b      	ldrb	r3, [r7, #0]
 801ab52:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801ab54:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801ab56:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801ab58:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801ab5a:	9300      	str	r3, [sp, #0]
 801ab5c:	460b      	mov	r3, r1
 801ab5e:	4990      	ldr	r1, [pc, #576]	@ (801ada0 <json_update+0x31c>)
 801ab60:	488a      	ldr	r0, [pc, #552]	@ (801ad8c <json_update+0x308>)
 801ab62:	f002 fb17 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ab66:	4989      	ldr	r1, [pc, #548]	@ (801ad8c <json_update+0x308>)
 801ab68:	4889      	ldr	r0, [pc, #548]	@ (801ad90 <json_update+0x30c>)
 801ab6a:	f7ff fecf 	bl	801a90c <Update_File>
 801ab6e:	4603      	mov	r3, r0
 801ab70:	461a      	mov	r2, r3
 801ab72:	4b84      	ldr	r3, [pc, #528]	@ (801ad84 <json_update+0x300>)
 801ab74:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab76:	22ff      	movs	r2, #255	@ 0xff
 801ab78:	2100      	movs	r1, #0
 801ab7a:	4884      	ldr	r0, [pc, #528]	@ (801ad8c <json_update+0x308>)
 801ab7c:	f002 fc54 	bl	801d428 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801ab80:	4a88      	ldr	r2, [pc, #544]	@ (801ada4 <json_update+0x320>)
 801ab82:	4989      	ldr	r1, [pc, #548]	@ (801ada8 <json_update+0x324>)
 801ab84:	4881      	ldr	r0, [pc, #516]	@ (801ad8c <json_update+0x308>)
 801ab86:	f002 fb05 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ab8a:	4980      	ldr	r1, [pc, #512]	@ (801ad8c <json_update+0x308>)
 801ab8c:	4880      	ldr	r0, [pc, #512]	@ (801ad90 <json_update+0x30c>)
 801ab8e:	f7ff febd 	bl	801a90c <Update_File>
 801ab92:	4603      	mov	r3, r0
 801ab94:	461a      	mov	r2, r3
 801ab96:	4b7b      	ldr	r3, [pc, #492]	@ (801ad84 <json_update+0x300>)
 801ab98:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab9a:	22ff      	movs	r2, #255	@ 0xff
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	487b      	ldr	r0, [pc, #492]	@ (801ad8c <json_update+0x308>)
 801aba0:	f002 fc42 	bl	801d428 <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801aba4:	4a81      	ldr	r2, [pc, #516]	@ (801adac <json_update+0x328>)
 801aba6:	4982      	ldr	r1, [pc, #520]	@ (801adb0 <json_update+0x32c>)
 801aba8:	4878      	ldr	r0, [pc, #480]	@ (801ad8c <json_update+0x308>)
 801abaa:	f002 faf3 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801abae:	4977      	ldr	r1, [pc, #476]	@ (801ad8c <json_update+0x308>)
 801abb0:	4877      	ldr	r0, [pc, #476]	@ (801ad90 <json_update+0x30c>)
 801abb2:	f7ff feab 	bl	801a90c <Update_File>
 801abb6:	4603      	mov	r3, r0
 801abb8:	461a      	mov	r2, r3
 801abba:	4b72      	ldr	r3, [pc, #456]	@ (801ad84 <json_update+0x300>)
 801abbc:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801abbe:	22ff      	movs	r2, #255	@ 0xff
 801abc0:	2100      	movs	r1, #0
 801abc2:	4872      	ldr	r0, [pc, #456]	@ (801ad8c <json_update+0x308>)
 801abc4:	f002 fc30 	bl	801d428 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801abc8:	4a7a      	ldr	r2, [pc, #488]	@ (801adb4 <json_update+0x330>)
 801abca:	497b      	ldr	r1, [pc, #492]	@ (801adb8 <json_update+0x334>)
 801abcc:	486f      	ldr	r0, [pc, #444]	@ (801ad8c <json_update+0x308>)
 801abce:	f002 fae1 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801abd2:	496e      	ldr	r1, [pc, #440]	@ (801ad8c <json_update+0x308>)
 801abd4:	486e      	ldr	r0, [pc, #440]	@ (801ad90 <json_update+0x30c>)
 801abd6:	f7ff fe99 	bl	801a90c <Update_File>
 801abda:	4603      	mov	r3, r0
 801abdc:	461a      	mov	r2, r3
 801abde:	4b69      	ldr	r3, [pc, #420]	@ (801ad84 <json_update+0x300>)
 801abe0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801abe2:	22ff      	movs	r2, #255	@ 0xff
 801abe4:	2100      	movs	r1, #0
 801abe6:	4869      	ldr	r0, [pc, #420]	@ (801ad8c <json_update+0x308>)
 801abe8:	f002 fc1e 	bl	801d428 <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801abec:	4b73      	ldr	r3, [pc, #460]	@ (801adbc <json_update+0x338>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	4618      	mov	r0, r3
 801abf2:	f7e5 fcc1 	bl	8000578 <__aeabi_f2d>
 801abf6:	4602      	mov	r2, r0
 801abf8:	460b      	mov	r3, r1
 801abfa:	4971      	ldr	r1, [pc, #452]	@ (801adc0 <json_update+0x33c>)
 801abfc:	4863      	ldr	r0, [pc, #396]	@ (801ad8c <json_update+0x308>)
 801abfe:	f002 fac9 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ac02:	4962      	ldr	r1, [pc, #392]	@ (801ad8c <json_update+0x308>)
 801ac04:	4862      	ldr	r0, [pc, #392]	@ (801ad90 <json_update+0x30c>)
 801ac06:	f7ff fe81 	bl	801a90c <Update_File>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	461a      	mov	r2, r3
 801ac0e:	4b5d      	ldr	r3, [pc, #372]	@ (801ad84 <json_update+0x300>)
 801ac10:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac12:	22ff      	movs	r2, #255	@ 0xff
 801ac14:	2100      	movs	r1, #0
 801ac16:	485d      	ldr	r0, [pc, #372]	@ (801ad8c <json_update+0x308>)
 801ac18:	f002 fc06 	bl	801d428 <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801ac1c:	4b67      	ldr	r3, [pc, #412]	@ (801adbc <json_update+0x338>)
 801ac1e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7e5 fca9 	bl	8000578 <__aeabi_f2d>
 801ac26:	4602      	mov	r2, r0
 801ac28:	460b      	mov	r3, r1
 801ac2a:	4966      	ldr	r1, [pc, #408]	@ (801adc4 <json_update+0x340>)
 801ac2c:	4857      	ldr	r0, [pc, #348]	@ (801ad8c <json_update+0x308>)
 801ac2e:	f002 fab1 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ac32:	4956      	ldr	r1, [pc, #344]	@ (801ad8c <json_update+0x308>)
 801ac34:	4856      	ldr	r0, [pc, #344]	@ (801ad90 <json_update+0x30c>)
 801ac36:	f7ff fe69 	bl	801a90c <Update_File>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	461a      	mov	r2, r3
 801ac3e:	4b51      	ldr	r3, [pc, #324]	@ (801ad84 <json_update+0x300>)
 801ac40:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ac42:	22ff      	movs	r2, #255	@ 0xff
 801ac44:	2100      	movs	r1, #0
 801ac46:	4851      	ldr	r0, [pc, #324]	@ (801ad8c <json_update+0x308>)
 801ac48:	f002 fbee 	bl	801d428 <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801ac4c:	4b5b      	ldr	r3, [pc, #364]	@ (801adbc <json_update+0x338>)
 801ac4e:	689b      	ldr	r3, [r3, #8]
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7e5 fc91 	bl	8000578 <__aeabi_f2d>
 801ac56:	4602      	mov	r2, r0
 801ac58:	460b      	mov	r3, r1
 801ac5a:	495b      	ldr	r1, [pc, #364]	@ (801adc8 <json_update+0x344>)
 801ac5c:	484b      	ldr	r0, [pc, #300]	@ (801ad8c <json_update+0x308>)
 801ac5e:	f002 fa99 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ac62:	494a      	ldr	r1, [pc, #296]	@ (801ad8c <json_update+0x308>)
 801ac64:	484a      	ldr	r0, [pc, #296]	@ (801ad90 <json_update+0x30c>)
 801ac66:	f7ff fe51 	bl	801a90c <Update_File>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	461a      	mov	r2, r3
 801ac6e:	4b45      	ldr	r3, [pc, #276]	@ (801ad84 <json_update+0x300>)
 801ac70:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801ac72:	22ff      	movs	r2, #255	@ 0xff
 801ac74:	2100      	movs	r1, #0
 801ac76:	4845      	ldr	r0, [pc, #276]	@ (801ad8c <json_update+0x308>)
 801ac78:	f002 fbd6 	bl	801d428 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801ac7c:	4b4f      	ldr	r3, [pc, #316]	@ (801adbc <json_update+0x338>)
 801ac7e:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d001      	beq.n	801ac88 <json_update+0x204>
 801ac84:	4b51      	ldr	r3, [pc, #324]	@ (801adcc <json_update+0x348>)
 801ac86:	e000      	b.n	801ac8a <json_update+0x206>
 801ac88:	4b51      	ldr	r3, [pc, #324]	@ (801add0 <json_update+0x34c>)
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	4951      	ldr	r1, [pc, #324]	@ (801add4 <json_update+0x350>)
 801ac8e:	483f      	ldr	r0, [pc, #252]	@ (801ad8c <json_update+0x308>)
 801ac90:	f002 fa80 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ac94:	493d      	ldr	r1, [pc, #244]	@ (801ad8c <json_update+0x308>)
 801ac96:	483e      	ldr	r0, [pc, #248]	@ (801ad90 <json_update+0x30c>)
 801ac98:	f7ff fe38 	bl	801a90c <Update_File>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	461a      	mov	r2, r3
 801aca0:	4b38      	ldr	r3, [pc, #224]	@ (801ad84 <json_update+0x300>)
 801aca2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aca4:	22ff      	movs	r2, #255	@ 0xff
 801aca6:	2100      	movs	r1, #0
 801aca8:	4838      	ldr	r0, [pc, #224]	@ (801ad8c <json_update+0x308>)
 801acaa:	f002 fbbd 	bl	801d428 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801acae:	4b43      	ldr	r3, [pc, #268]	@ (801adbc <json_update+0x338>)
 801acb0:	695b      	ldr	r3, [r3, #20]
 801acb2:	4618      	mov	r0, r3
 801acb4:	f7e5 fc60 	bl	8000578 <__aeabi_f2d>
 801acb8:	4602      	mov	r2, r0
 801acba:	460b      	mov	r3, r1
 801acbc:	4946      	ldr	r1, [pc, #280]	@ (801add8 <json_update+0x354>)
 801acbe:	4833      	ldr	r0, [pc, #204]	@ (801ad8c <json_update+0x308>)
 801acc0:	f002 fa68 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801acc4:	4931      	ldr	r1, [pc, #196]	@ (801ad8c <json_update+0x308>)
 801acc6:	4832      	ldr	r0, [pc, #200]	@ (801ad90 <json_update+0x30c>)
 801acc8:	f7ff fe20 	bl	801a90c <Update_File>
 801accc:	4603      	mov	r3, r0
 801acce:	461a      	mov	r2, r3
 801acd0:	4b2c      	ldr	r3, [pc, #176]	@ (801ad84 <json_update+0x300>)
 801acd2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801acd4:	22ff      	movs	r2, #255	@ 0xff
 801acd6:	2100      	movs	r1, #0
 801acd8:	482c      	ldr	r0, [pc, #176]	@ (801ad8c <json_update+0x308>)
 801acda:	f002 fba5 	bl	801d428 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801acde:	493f      	ldr	r1, [pc, #252]	@ (801addc <json_update+0x358>)
 801ace0:	482a      	ldr	r0, [pc, #168]	@ (801ad8c <json_update+0x308>)
 801ace2:	f002 fa57 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ace6:	4929      	ldr	r1, [pc, #164]	@ (801ad8c <json_update+0x308>)
 801ace8:	4829      	ldr	r0, [pc, #164]	@ (801ad90 <json_update+0x30c>)
 801acea:	f7ff fe0f 	bl	801a90c <Update_File>
 801acee:	4603      	mov	r3, r0
 801acf0:	461a      	mov	r2, r3
 801acf2:	4b24      	ldr	r3, [pc, #144]	@ (801ad84 <json_update+0x300>)
 801acf4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801acf6:	22ff      	movs	r2, #255	@ 0xff
 801acf8:	2100      	movs	r1, #0
 801acfa:	4824      	ldr	r0, [pc, #144]	@ (801ad8c <json_update+0x308>)
 801acfc:	f002 fb94 	bl	801d428 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801ad00:	4b2e      	ldr	r3, [pc, #184]	@ (801adbc <json_update+0x338>)
 801ad02:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7e5 fc37 	bl	8000578 <__aeabi_f2d>
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	460b      	mov	r3, r1
 801ad0e:	4934      	ldr	r1, [pc, #208]	@ (801ade0 <json_update+0x35c>)
 801ad10:	481e      	ldr	r0, [pc, #120]	@ (801ad8c <json_update+0x308>)
 801ad12:	f002 fa3f 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ad16:	491d      	ldr	r1, [pc, #116]	@ (801ad8c <json_update+0x308>)
 801ad18:	481d      	ldr	r0, [pc, #116]	@ (801ad90 <json_update+0x30c>)
 801ad1a:	f7ff fdf7 	bl	801a90c <Update_File>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	461a      	mov	r2, r3
 801ad22:	4b18      	ldr	r3, [pc, #96]	@ (801ad84 <json_update+0x300>)
 801ad24:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801ad26:	22ff      	movs	r2, #255	@ 0xff
 801ad28:	2100      	movs	r1, #0
 801ad2a:	4818      	ldr	r0, [pc, #96]	@ (801ad8c <json_update+0x308>)
 801ad2c:	f002 fb7c 	bl	801d428 <memset>
		sprintf(buffer, "}\n\n");
 801ad30:	492c      	ldr	r1, [pc, #176]	@ (801ade4 <json_update+0x360>)
 801ad32:	4816      	ldr	r0, [pc, #88]	@ (801ad8c <json_update+0x308>)
 801ad34:	f002 fa2e 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ad38:	4914      	ldr	r1, [pc, #80]	@ (801ad8c <json_update+0x308>)
 801ad3a:	4815      	ldr	r0, [pc, #84]	@ (801ad90 <json_update+0x30c>)
 801ad3c:	f7ff fde6 	bl	801a90c <Update_File>
 801ad40:	4603      	mov	r3, r0
 801ad42:	461a      	mov	r2, r3
 801ad44:	4b0f      	ldr	r3, [pc, #60]	@ (801ad84 <json_update+0x300>)
 801ad46:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801ad48:	480d      	ldr	r0, [pc, #52]	@ (801ad80 <json_update+0x2fc>)
 801ad4a:	f7ff fd1d 	bl	801a788 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801ad4e:	4b0d      	ldr	r3, [pc, #52]	@ (801ad84 <json_update+0x300>)
 801ad50:	781b      	ldrb	r3, [r3, #0]
 801ad52:	b25a      	sxtb	r2, r3
 801ad54:	4b19      	ldr	r3, [pc, #100]	@ (801adbc <json_update+0x338>)
 801ad56:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801ad5a:	bf00      	nop
 801ad5c:	3718      	adds	r7, #24
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}
 801ad62:	bf00      	nop
 801ad64:	200018b4 	.word	0x200018b4
 801ad68:	20002336 	.word	0x20002336
 801ad6c:	20002337 	.word	0x20002337
 801ad70:	20002338 	.word	0x20002338
 801ad74:	20002339 	.word	0x20002339
 801ad78:	2000233a 	.word	0x2000233a
 801ad7c:	2000233b 	.word	0x2000233b
 801ad80:	080226ec 	.word	0x080226ec
 801ad84:	20002334 	.word	0x20002334
 801ad88:	080226f0 	.word	0x080226f0
 801ad8c:	20002340 	.word	0x20002340
 801ad90:	20001485 	.word	0x20001485
 801ad94:	080226f4 	.word	0x080226f4
 801ad98:	200013bd 	.word	0x200013bd
 801ad9c:	08022704 	.word	0x08022704
 801ada0:	08022710 	.word	0x08022710
 801ada4:	200013ef 	.word	0x200013ef
 801ada8:	08022730 	.word	0x08022730
 801adac:	200014e9 	.word	0x200014e9
 801adb0:	08022744 	.word	0x08022744
 801adb4:	20001453 	.word	0x20001453
 801adb8:	08022758 	.word	0x08022758
 801adbc:	20001550 	.word	0x20001550
 801adc0:	08022768 	.word	0x08022768
 801adc4:	08022778 	.word	0x08022778
 801adc8:	08022790 	.word	0x08022790
 801adcc:	080227a4 	.word	0x080227a4
 801add0:	080227ac 	.word	0x080227ac
 801add4:	080227b4 	.word	0x080227b4
 801add8:	080227c4 	.word	0x080227c4
 801addc:	080227d8 	.word	0x080227d8
 801ade0:	080227e8 	.word	0x080227e8
 801ade4:	080227fc 	.word	0x080227fc

0801ade8 <csv_update>:
void csv_update() {
 801ade8:	b580      	push	{r7, lr}
 801adea:	b088      	sub	sp, #32
 801adec:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801adee:	f107 0314 	add.w	r3, r7, #20
 801adf2:	2200      	movs	r2, #0
 801adf4:	4619      	mov	r1, r3
 801adf6:	48ab      	ldr	r0, [pc, #684]	@ (801b0a4 <csv_update+0x2bc>)
 801adf8:	f7ee fb86 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801adfc:	463b      	mov	r3, r7
 801adfe:	2200      	movs	r2, #0
 801ae00:	4619      	mov	r1, r3
 801ae02:	48a8      	ldr	r0, [pc, #672]	@ (801b0a4 <csv_update+0x2bc>)
 801ae04:	f7ee fa9e 	bl	8009344 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801ae08:	7dba      	ldrb	r2, [r7, #22]
 801ae0a:	4ba7      	ldr	r3, [pc, #668]	@ (801b0a8 <csv_update+0x2c0>)
 801ae0c:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801ae0e:	7d7a      	ldrb	r2, [r7, #21]
 801ae10:	4ba6      	ldr	r3, [pc, #664]	@ (801b0ac <csv_update+0x2c4>)
 801ae12:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801ae14:	7dfa      	ldrb	r2, [r7, #23]
 801ae16:	4ba6      	ldr	r3, [pc, #664]	@ (801b0b0 <csv_update+0x2c8>)
 801ae18:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801ae1a:	783a      	ldrb	r2, [r7, #0]
 801ae1c:	4ba5      	ldr	r3, [pc, #660]	@ (801b0b4 <csv_update+0x2cc>)
 801ae1e:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801ae20:	787a      	ldrb	r2, [r7, #1]
 801ae22:	4ba5      	ldr	r3, [pc, #660]	@ (801b0b8 <csv_update+0x2d0>)
 801ae24:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801ae26:	78ba      	ldrb	r2, [r7, #2]
 801ae28:	4ba4      	ldr	r3, [pc, #656]	@ (801b0bc <csv_update+0x2d4>)
 801ae2a:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801ae2c:	48a4      	ldr	r0, [pc, #656]	@ (801b0c0 <csv_update+0x2d8>)
 801ae2e:	f7ff fc7f 	bl	801a730 <Mount_SD>
 801ae32:	4603      	mov	r3, r0
 801ae34:	461a      	mov	r2, r3
 801ae36:	4ba3      	ldr	r3, [pc, #652]	@ (801b0c4 <csv_update+0x2dc>)
 801ae38:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ae3a:	4ba2      	ldr	r3, [pc, #648]	@ (801b0c4 <csv_update+0x2dc>)
 801ae3c:	781b      	ldrb	r3, [r3, #0]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	f040 8126 	bne.w	801b090 <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801ae44:	f7e7 faba 	bl	80023bc <ver_GetUid>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	499e      	ldr	r1, [pc, #632]	@ (801b0c8 <csv_update+0x2e0>)
 801ae4e:	489f      	ldr	r0, [pc, #636]	@ (801b0cc <csv_update+0x2e4>)
 801ae50:	f002 f9a0 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ae54:	499d      	ldr	r1, [pc, #628]	@ (801b0cc <csv_update+0x2e4>)
 801ae56:	489e      	ldr	r0, [pc, #632]	@ (801b0d0 <csv_update+0x2e8>)
 801ae58:	f7ff fd58 	bl	801a90c <Update_File>
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	461a      	mov	r2, r3
 801ae60:	4b98      	ldr	r3, [pc, #608]	@ (801b0c4 <csv_update+0x2dc>)
 801ae62:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ae64:	22ff      	movs	r2, #255	@ 0xff
 801ae66:	2100      	movs	r1, #0
 801ae68:	4898      	ldr	r0, [pc, #608]	@ (801b0cc <csv_update+0x2e4>)
 801ae6a:	f002 fadd 	bl	801d428 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801ae6e:	4a99      	ldr	r2, [pc, #612]	@ (801b0d4 <csv_update+0x2ec>)
 801ae70:	4995      	ldr	r1, [pc, #596]	@ (801b0c8 <csv_update+0x2e0>)
 801ae72:	4896      	ldr	r0, [pc, #600]	@ (801b0cc <csv_update+0x2e4>)
 801ae74:	f002 f98e 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801ae78:	4994      	ldr	r1, [pc, #592]	@ (801b0cc <csv_update+0x2e4>)
 801ae7a:	4895      	ldr	r0, [pc, #596]	@ (801b0d0 <csv_update+0x2e8>)
 801ae7c:	f7ff fd46 	bl	801a90c <Update_File>
 801ae80:	4603      	mov	r3, r0
 801ae82:	461a      	mov	r2, r3
 801ae84:	4b8f      	ldr	r3, [pc, #572]	@ (801b0c4 <csv_update+0x2dc>)
 801ae86:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ae88:	22ff      	movs	r2, #255	@ 0xff
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	488f      	ldr	r0, [pc, #572]	@ (801b0cc <csv_update+0x2e4>)
 801ae8e:	f002 facb 	bl	801d428 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801ae92:	783b      	ldrb	r3, [r7, #0]
 801ae94:	461a      	mov	r2, r3
 801ae96:	787b      	ldrb	r3, [r7, #1]
 801ae98:	4619      	mov	r1, r3
				sTime.Seconds);
 801ae9a:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801ae9c:	9300      	str	r3, [sp, #0]
 801ae9e:	460b      	mov	r3, r1
 801aea0:	498d      	ldr	r1, [pc, #564]	@ (801b0d8 <csv_update+0x2f0>)
 801aea2:	488a      	ldr	r0, [pc, #552]	@ (801b0cc <csv_update+0x2e4>)
 801aea4:	f002 f976 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801aea8:	4988      	ldr	r1, [pc, #544]	@ (801b0cc <csv_update+0x2e4>)
 801aeaa:	4889      	ldr	r0, [pc, #548]	@ (801b0d0 <csv_update+0x2e8>)
 801aeac:	f7ff fd2e 	bl	801a90c <Update_File>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	461a      	mov	r2, r3
 801aeb4:	4b83      	ldr	r3, [pc, #524]	@ (801b0c4 <csv_update+0x2dc>)
 801aeb6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aeb8:	22ff      	movs	r2, #255	@ 0xff
 801aeba:	2100      	movs	r1, #0
 801aebc:	4883      	ldr	r0, [pc, #524]	@ (801b0cc <csv_update+0x2e4>)
 801aebe:	f002 fab3 	bl	801d428 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801aec2:	4a86      	ldr	r2, [pc, #536]	@ (801b0dc <csv_update+0x2f4>)
 801aec4:	4980      	ldr	r1, [pc, #512]	@ (801b0c8 <csv_update+0x2e0>)
 801aec6:	4881      	ldr	r0, [pc, #516]	@ (801b0cc <csv_update+0x2e4>)
 801aec8:	f002 f964 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801aecc:	497f      	ldr	r1, [pc, #508]	@ (801b0cc <csv_update+0x2e4>)
 801aece:	4880      	ldr	r0, [pc, #512]	@ (801b0d0 <csv_update+0x2e8>)
 801aed0:	f7ff fd1c 	bl	801a90c <Update_File>
 801aed4:	4603      	mov	r3, r0
 801aed6:	461a      	mov	r2, r3
 801aed8:	4b7a      	ldr	r3, [pc, #488]	@ (801b0c4 <csv_update+0x2dc>)
 801aeda:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aedc:	22ff      	movs	r2, #255	@ 0xff
 801aede:	2100      	movs	r1, #0
 801aee0:	487a      	ldr	r0, [pc, #488]	@ (801b0cc <csv_update+0x2e4>)
 801aee2:	f002 faa1 	bl	801d428 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801aee6:	4a7e      	ldr	r2, [pc, #504]	@ (801b0e0 <csv_update+0x2f8>)
 801aee8:	4977      	ldr	r1, [pc, #476]	@ (801b0c8 <csv_update+0x2e0>)
 801aeea:	4878      	ldr	r0, [pc, #480]	@ (801b0cc <csv_update+0x2e4>)
 801aeec:	f002 f952 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801aef0:	4976      	ldr	r1, [pc, #472]	@ (801b0cc <csv_update+0x2e4>)
 801aef2:	4877      	ldr	r0, [pc, #476]	@ (801b0d0 <csv_update+0x2e8>)
 801aef4:	f7ff fd0a 	bl	801a90c <Update_File>
 801aef8:	4603      	mov	r3, r0
 801aefa:	461a      	mov	r2, r3
 801aefc:	4b71      	ldr	r3, [pc, #452]	@ (801b0c4 <csv_update+0x2dc>)
 801aefe:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af00:	22ff      	movs	r2, #255	@ 0xff
 801af02:	2100      	movs	r1, #0
 801af04:	4871      	ldr	r0, [pc, #452]	@ (801b0cc <csv_update+0x2e4>)
 801af06:	f002 fa8f 	bl	801d428 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801af0a:	4a76      	ldr	r2, [pc, #472]	@ (801b0e4 <csv_update+0x2fc>)
 801af0c:	496e      	ldr	r1, [pc, #440]	@ (801b0c8 <csv_update+0x2e0>)
 801af0e:	486f      	ldr	r0, [pc, #444]	@ (801b0cc <csv_update+0x2e4>)
 801af10:	f002 f940 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801af14:	496d      	ldr	r1, [pc, #436]	@ (801b0cc <csv_update+0x2e4>)
 801af16:	486e      	ldr	r0, [pc, #440]	@ (801b0d0 <csv_update+0x2e8>)
 801af18:	f7ff fcf8 	bl	801a90c <Update_File>
 801af1c:	4603      	mov	r3, r0
 801af1e:	461a      	mov	r2, r3
 801af20:	4b68      	ldr	r3, [pc, #416]	@ (801b0c4 <csv_update+0x2dc>)
 801af22:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801af24:	22ff      	movs	r2, #255	@ 0xff
 801af26:	2100      	movs	r1, #0
 801af28:	4868      	ldr	r0, [pc, #416]	@ (801b0cc <csv_update+0x2e4>)
 801af2a:	f002 fa7d 	bl	801d428 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801af2e:	4b6e      	ldr	r3, [pc, #440]	@ (801b0e8 <csv_update+0x300>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	4618      	mov	r0, r3
 801af34:	f7e5 fb20 	bl	8000578 <__aeabi_f2d>
 801af38:	4602      	mov	r2, r0
 801af3a:	460b      	mov	r3, r1
 801af3c:	496b      	ldr	r1, [pc, #428]	@ (801b0ec <csv_update+0x304>)
 801af3e:	4863      	ldr	r0, [pc, #396]	@ (801b0cc <csv_update+0x2e4>)
 801af40:	f002 f928 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801af44:	4961      	ldr	r1, [pc, #388]	@ (801b0cc <csv_update+0x2e4>)
 801af46:	4862      	ldr	r0, [pc, #392]	@ (801b0d0 <csv_update+0x2e8>)
 801af48:	f7ff fce0 	bl	801a90c <Update_File>
 801af4c:	4603      	mov	r3, r0
 801af4e:	461a      	mov	r2, r3
 801af50:	4b5c      	ldr	r3, [pc, #368]	@ (801b0c4 <csv_update+0x2dc>)
 801af52:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af54:	22ff      	movs	r2, #255	@ 0xff
 801af56:	2100      	movs	r1, #0
 801af58:	485c      	ldr	r0, [pc, #368]	@ (801b0cc <csv_update+0x2e4>)
 801af5a:	f002 fa65 	bl	801d428 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801af5e:	4b62      	ldr	r3, [pc, #392]	@ (801b0e8 <csv_update+0x300>)
 801af60:	685b      	ldr	r3, [r3, #4]
 801af62:	4618      	mov	r0, r3
 801af64:	f7e5 fb08 	bl	8000578 <__aeabi_f2d>
 801af68:	4602      	mov	r2, r0
 801af6a:	460b      	mov	r3, r1
 801af6c:	495f      	ldr	r1, [pc, #380]	@ (801b0ec <csv_update+0x304>)
 801af6e:	4857      	ldr	r0, [pc, #348]	@ (801b0cc <csv_update+0x2e4>)
 801af70:	f002 f910 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801af74:	4955      	ldr	r1, [pc, #340]	@ (801b0cc <csv_update+0x2e4>)
 801af76:	4856      	ldr	r0, [pc, #344]	@ (801b0d0 <csv_update+0x2e8>)
 801af78:	f7ff fcc8 	bl	801a90c <Update_File>
 801af7c:	4603      	mov	r3, r0
 801af7e:	461a      	mov	r2, r3
 801af80:	4b50      	ldr	r3, [pc, #320]	@ (801b0c4 <csv_update+0x2dc>)
 801af82:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801af84:	22ff      	movs	r2, #255	@ 0xff
 801af86:	2100      	movs	r1, #0
 801af88:	4850      	ldr	r0, [pc, #320]	@ (801b0cc <csv_update+0x2e4>)
 801af8a:	f002 fa4d 	bl	801d428 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801af8e:	4b56      	ldr	r3, [pc, #344]	@ (801b0e8 <csv_update+0x300>)
 801af90:	689b      	ldr	r3, [r3, #8]
 801af92:	4618      	mov	r0, r3
 801af94:	f7e5 faf0 	bl	8000578 <__aeabi_f2d>
 801af98:	4602      	mov	r2, r0
 801af9a:	460b      	mov	r3, r1
 801af9c:	4953      	ldr	r1, [pc, #332]	@ (801b0ec <csv_update+0x304>)
 801af9e:	484b      	ldr	r0, [pc, #300]	@ (801b0cc <csv_update+0x2e4>)
 801afa0:	f002 f8f8 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801afa4:	4949      	ldr	r1, [pc, #292]	@ (801b0cc <csv_update+0x2e4>)
 801afa6:	484a      	ldr	r0, [pc, #296]	@ (801b0d0 <csv_update+0x2e8>)
 801afa8:	f7ff fcb0 	bl	801a90c <Update_File>
 801afac:	4603      	mov	r3, r0
 801afae:	461a      	mov	r2, r3
 801afb0:	4b44      	ldr	r3, [pc, #272]	@ (801b0c4 <csv_update+0x2dc>)
 801afb2:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801afb4:	22ff      	movs	r2, #255	@ 0xff
 801afb6:	2100      	movs	r1, #0
 801afb8:	4844      	ldr	r0, [pc, #272]	@ (801b0cc <csv_update+0x2e4>)
 801afba:	f002 fa35 	bl	801d428 <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801afbe:	4b4a      	ldr	r3, [pc, #296]	@ (801b0e8 <csv_update+0x300>)
 801afc0:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801afc2:	2b01      	cmp	r3, #1
 801afc4:	d101      	bne.n	801afca <csv_update+0x1e2>
 801afc6:	4b4a      	ldr	r3, [pc, #296]	@ (801b0f0 <csv_update+0x308>)
 801afc8:	e000      	b.n	801afcc <csv_update+0x1e4>
 801afca:	4b4a      	ldr	r3, [pc, #296]	@ (801b0f4 <csv_update+0x30c>)
 801afcc:	461a      	mov	r2, r3
 801afce:	493e      	ldr	r1, [pc, #248]	@ (801b0c8 <csv_update+0x2e0>)
 801afd0:	483e      	ldr	r0, [pc, #248]	@ (801b0cc <csv_update+0x2e4>)
 801afd2:	f002 f8df 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801afd6:	493d      	ldr	r1, [pc, #244]	@ (801b0cc <csv_update+0x2e4>)
 801afd8:	483d      	ldr	r0, [pc, #244]	@ (801b0d0 <csv_update+0x2e8>)
 801afda:	f7ff fc97 	bl	801a90c <Update_File>
 801afde:	4603      	mov	r3, r0
 801afe0:	461a      	mov	r2, r3
 801afe2:	4b38      	ldr	r3, [pc, #224]	@ (801b0c4 <csv_update+0x2dc>)
 801afe4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801afe6:	22ff      	movs	r2, #255	@ 0xff
 801afe8:	2100      	movs	r1, #0
 801afea:	4838      	ldr	r0, [pc, #224]	@ (801b0cc <csv_update+0x2e4>)
 801afec:	f002 fa1c 	bl	801d428 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801aff0:	4b3d      	ldr	r3, [pc, #244]	@ (801b0e8 <csv_update+0x300>)
 801aff2:	695b      	ldr	r3, [r3, #20]
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7e5 fabf 	bl	8000578 <__aeabi_f2d>
 801affa:	4602      	mov	r2, r0
 801affc:	460b      	mov	r3, r1
 801affe:	493e      	ldr	r1, [pc, #248]	@ (801b0f8 <csv_update+0x310>)
 801b000:	4832      	ldr	r0, [pc, #200]	@ (801b0cc <csv_update+0x2e4>)
 801b002:	f002 f8c7 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801b006:	4931      	ldr	r1, [pc, #196]	@ (801b0cc <csv_update+0x2e4>)
 801b008:	4831      	ldr	r0, [pc, #196]	@ (801b0d0 <csv_update+0x2e8>)
 801b00a:	f7ff fc7f 	bl	801a90c <Update_File>
 801b00e:	4603      	mov	r3, r0
 801b010:	461a      	mov	r2, r3
 801b012:	4b2c      	ldr	r3, [pc, #176]	@ (801b0c4 <csv_update+0x2dc>)
 801b014:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801b016:	22ff      	movs	r2, #255	@ 0xff
 801b018:	2100      	movs	r1, #0
 801b01a:	482c      	ldr	r0, [pc, #176]	@ (801b0cc <csv_update+0x2e4>)
 801b01c:	f002 fa04 	bl	801d428 <memset>
		sprintf(buffer, "NONE ,");
 801b020:	4936      	ldr	r1, [pc, #216]	@ (801b0fc <csv_update+0x314>)
 801b022:	482a      	ldr	r0, [pc, #168]	@ (801b0cc <csv_update+0x2e4>)
 801b024:	f002 f8b6 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801b028:	4928      	ldr	r1, [pc, #160]	@ (801b0cc <csv_update+0x2e4>)
 801b02a:	4829      	ldr	r0, [pc, #164]	@ (801b0d0 <csv_update+0x2e8>)
 801b02c:	f7ff fc6e 	bl	801a90c <Update_File>
 801b030:	4603      	mov	r3, r0
 801b032:	461a      	mov	r2, r3
 801b034:	4b23      	ldr	r3, [pc, #140]	@ (801b0c4 <csv_update+0x2dc>)
 801b036:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801b038:	22ff      	movs	r2, #255	@ 0xff
 801b03a:	2100      	movs	r1, #0
 801b03c:	4823      	ldr	r0, [pc, #140]	@ (801b0cc <csv_update+0x2e4>)
 801b03e:	f002 f9f3 	bl	801d428 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801b042:	4b29      	ldr	r3, [pc, #164]	@ (801b0e8 <csv_update+0x300>)
 801b044:	6a1b      	ldr	r3, [r3, #32]
 801b046:	4618      	mov	r0, r3
 801b048:	f7e5 fa96 	bl	8000578 <__aeabi_f2d>
 801b04c:	4602      	mov	r2, r0
 801b04e:	460b      	mov	r3, r1
 801b050:	4929      	ldr	r1, [pc, #164]	@ (801b0f8 <csv_update+0x310>)
 801b052:	481e      	ldr	r0, [pc, #120]	@ (801b0cc <csv_update+0x2e4>)
 801b054:	f002 f89e 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801b058:	491c      	ldr	r1, [pc, #112]	@ (801b0cc <csv_update+0x2e4>)
 801b05a:	481d      	ldr	r0, [pc, #116]	@ (801b0d0 <csv_update+0x2e8>)
 801b05c:	f7ff fc56 	bl	801a90c <Update_File>
 801b060:	4603      	mov	r3, r0
 801b062:	461a      	mov	r2, r3
 801b064:	4b17      	ldr	r3, [pc, #92]	@ (801b0c4 <csv_update+0x2dc>)
 801b066:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801b068:	22ff      	movs	r2, #255	@ 0xff
 801b06a:	2100      	movs	r1, #0
 801b06c:	4817      	ldr	r0, [pc, #92]	@ (801b0cc <csv_update+0x2e4>)
 801b06e:	f002 f9db 	bl	801d428 <memset>
		sprintf(buffer, "\n");
 801b072:	4923      	ldr	r1, [pc, #140]	@ (801b100 <csv_update+0x318>)
 801b074:	4815      	ldr	r0, [pc, #84]	@ (801b0cc <csv_update+0x2e4>)
 801b076:	f002 f88d 	bl	801d194 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801b07a:	4914      	ldr	r1, [pc, #80]	@ (801b0cc <csv_update+0x2e4>)
 801b07c:	4814      	ldr	r0, [pc, #80]	@ (801b0d0 <csv_update+0x2e8>)
 801b07e:	f7ff fc45 	bl	801a90c <Update_File>
 801b082:	4603      	mov	r3, r0
 801b084:	461a      	mov	r2, r3
 801b086:	4b0f      	ldr	r3, [pc, #60]	@ (801b0c4 <csv_update+0x2dc>)
 801b088:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801b08a:	480d      	ldr	r0, [pc, #52]	@ (801b0c0 <csv_update+0x2d8>)
 801b08c:	f7ff fb7c 	bl	801a788 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801b090:	4b0c      	ldr	r3, [pc, #48]	@ (801b0c4 <csv_update+0x2dc>)
 801b092:	781b      	ldrb	r3, [r3, #0]
 801b094:	b25a      	sxtb	r2, r3
 801b096:	4b14      	ldr	r3, [pc, #80]	@ (801b0e8 <csv_update+0x300>)
 801b098:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801b09c:	bf00      	nop
 801b09e:	3718      	adds	r7, #24
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}
 801b0a4:	200018b4 	.word	0x200018b4
 801b0a8:	20002336 	.word	0x20002336
 801b0ac:	20002337 	.word	0x20002337
 801b0b0:	20002338 	.word	0x20002338
 801b0b4:	20002339 	.word	0x20002339
 801b0b8:	2000233a 	.word	0x2000233a
 801b0bc:	2000233b 	.word	0x2000233b
 801b0c0:	080226ec 	.word	0x080226ec
 801b0c4:	20002334 	.word	0x20002334
 801b0c8:	08022800 	.word	0x08022800
 801b0cc:	20002340 	.word	0x20002340
 801b0d0:	20001485 	.word	0x20001485
 801b0d4:	200013bd 	.word	0x200013bd
 801b0d8:	08022808 	.word	0x08022808
 801b0dc:	200013ef 	.word	0x200013ef
 801b0e0:	200014e9 	.word	0x200014e9
 801b0e4:	20001453 	.word	0x20001453
 801b0e8:	20001550 	.word	0x20001550
 801b0ec:	0802281c 	.word	0x0802281c
 801b0f0:	080227a4 	.word	0x080227a4
 801b0f4:	080227ac 	.word	0x080227ac
 801b0f8:	08022824 	.word	0x08022824
 801b0fc:	0802282c 	.word	0x0802282c
 801b100:	08022834 	.word	0x08022834

0801b104 <csv_header>:
void csv_header() {
 801b104:	b580      	push	{r7, lr}
 801b106:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801b108:	485d      	ldr	r0, [pc, #372]	@ (801b280 <csv_header+0x17c>)
 801b10a:	f7ff fb11 	bl	801a730 <Mount_SD>
 801b10e:	4603      	mov	r3, r0
 801b110:	461a      	mov	r2, r3
 801b112:	4b5c      	ldr	r3, [pc, #368]	@ (801b284 <csv_header+0x180>)
 801b114:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801b116:	4b5b      	ldr	r3, [pc, #364]	@ (801b284 <csv_header+0x180>)
 801b118:	781b      	ldrb	r3, [r3, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	f040 80a7 	bne.w	801b26e <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801b120:	4959      	ldr	r1, [pc, #356]	@ (801b288 <csv_header+0x184>)
 801b122:	485a      	ldr	r0, [pc, #360]	@ (801b28c <csv_header+0x188>)
 801b124:	f002 f836 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b128:	4958      	ldr	r1, [pc, #352]	@ (801b28c <csv_header+0x188>)
 801b12a:	4859      	ldr	r0, [pc, #356]	@ (801b290 <csv_header+0x18c>)
 801b12c:	f7ff fbee 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b130:	22ff      	movs	r2, #255	@ 0xff
 801b132:	2100      	movs	r1, #0
 801b134:	4855      	ldr	r0, [pc, #340]	@ (801b28c <csv_header+0x188>)
 801b136:	f002 f977 	bl	801d428 <memset>
		sprintf(buffer, "id ,");
 801b13a:	4956      	ldr	r1, [pc, #344]	@ (801b294 <csv_header+0x190>)
 801b13c:	4853      	ldr	r0, [pc, #332]	@ (801b28c <csv_header+0x188>)
 801b13e:	f002 f829 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b142:	4952      	ldr	r1, [pc, #328]	@ (801b28c <csv_header+0x188>)
 801b144:	4852      	ldr	r0, [pc, #328]	@ (801b290 <csv_header+0x18c>)
 801b146:	f7ff fbe1 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b14a:	22ff      	movs	r2, #255	@ 0xff
 801b14c:	2100      	movs	r1, #0
 801b14e:	484f      	ldr	r0, [pc, #316]	@ (801b28c <csv_header+0x188>)
 801b150:	f002 f96a 	bl	801d428 <memset>
		sprintf(buffer, "timestamp ,");
 801b154:	4950      	ldr	r1, [pc, #320]	@ (801b298 <csv_header+0x194>)
 801b156:	484d      	ldr	r0, [pc, #308]	@ (801b28c <csv_header+0x188>)
 801b158:	f002 f81c 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b15c:	494b      	ldr	r1, [pc, #300]	@ (801b28c <csv_header+0x188>)
 801b15e:	484c      	ldr	r0, [pc, #304]	@ (801b290 <csv_header+0x18c>)
 801b160:	f7ff fbd4 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b164:	22ff      	movs	r2, #255	@ 0xff
 801b166:	2100      	movs	r1, #0
 801b168:	4848      	ldr	r0, [pc, #288]	@ (801b28c <csv_header+0x188>)
 801b16a:	f002 f95d 	bl	801d428 <memset>
		sprintf(buffer, "location ,");
 801b16e:	494b      	ldr	r1, [pc, #300]	@ (801b29c <csv_header+0x198>)
 801b170:	4846      	ldr	r0, [pc, #280]	@ (801b28c <csv_header+0x188>)
 801b172:	f002 f80f 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b176:	4945      	ldr	r1, [pc, #276]	@ (801b28c <csv_header+0x188>)
 801b178:	4845      	ldr	r0, [pc, #276]	@ (801b290 <csv_header+0x18c>)
 801b17a:	f7ff fbc7 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b17e:	22ff      	movs	r2, #255	@ 0xff
 801b180:	2100      	movs	r1, #0
 801b182:	4842      	ldr	r0, [pc, #264]	@ (801b28c <csv_header+0x188>)
 801b184:	f002 f950 	bl	801d428 <memset>
		sprintf(buffer, "Filename ,");
 801b188:	4945      	ldr	r1, [pc, #276]	@ (801b2a0 <csv_header+0x19c>)
 801b18a:	4840      	ldr	r0, [pc, #256]	@ (801b28c <csv_header+0x188>)
 801b18c:	f002 f802 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b190:	493e      	ldr	r1, [pc, #248]	@ (801b28c <csv_header+0x188>)
 801b192:	483f      	ldr	r0, [pc, #252]	@ (801b290 <csv_header+0x18c>)
 801b194:	f7ff fbba 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b198:	22ff      	movs	r2, #255	@ 0xff
 801b19a:	2100      	movs	r1, #0
 801b19c:	483b      	ldr	r0, [pc, #236]	@ (801b28c <csv_header+0x188>)
 801b19e:	f002 f943 	bl	801d428 <memset>
		sprintf(buffer, "group ,");
 801b1a2:	4940      	ldr	r1, [pc, #256]	@ (801b2a4 <csv_header+0x1a0>)
 801b1a4:	4839      	ldr	r0, [pc, #228]	@ (801b28c <csv_header+0x188>)
 801b1a6:	f001 fff5 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b1aa:	4938      	ldr	r1, [pc, #224]	@ (801b28c <csv_header+0x188>)
 801b1ac:	4838      	ldr	r0, [pc, #224]	@ (801b290 <csv_header+0x18c>)
 801b1ae:	f7ff fbad 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b1b2:	22ff      	movs	r2, #255	@ 0xff
 801b1b4:	2100      	movs	r1, #0
 801b1b6:	4835      	ldr	r0, [pc, #212]	@ (801b28c <csv_header+0x188>)
 801b1b8:	f002 f936 	bl	801d428 <memset>
		sprintf(buffer, "co2 ,");
 801b1bc:	493a      	ldr	r1, [pc, #232]	@ (801b2a8 <csv_header+0x1a4>)
 801b1be:	4833      	ldr	r0, [pc, #204]	@ (801b28c <csv_header+0x188>)
 801b1c0:	f001 ffe8 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b1c4:	4931      	ldr	r1, [pc, #196]	@ (801b28c <csv_header+0x188>)
 801b1c6:	4832      	ldr	r0, [pc, #200]	@ (801b290 <csv_header+0x18c>)
 801b1c8:	f7ff fba0 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b1cc:	22ff      	movs	r2, #255	@ 0xff
 801b1ce:	2100      	movs	r1, #0
 801b1d0:	482e      	ldr	r0, [pc, #184]	@ (801b28c <csv_header+0x188>)
 801b1d2:	f002 f929 	bl	801d428 <memset>
		sprintf(buffer, "temperature ,");
 801b1d6:	4935      	ldr	r1, [pc, #212]	@ (801b2ac <csv_header+0x1a8>)
 801b1d8:	482c      	ldr	r0, [pc, #176]	@ (801b28c <csv_header+0x188>)
 801b1da:	f001 ffdb 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b1de:	492b      	ldr	r1, [pc, #172]	@ (801b28c <csv_header+0x188>)
 801b1e0:	482b      	ldr	r0, [pc, #172]	@ (801b290 <csv_header+0x18c>)
 801b1e2:	f7ff fb93 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b1e6:	22ff      	movs	r2, #255	@ 0xff
 801b1e8:	2100      	movs	r1, #0
 801b1ea:	4828      	ldr	r0, [pc, #160]	@ (801b28c <csv_header+0x188>)
 801b1ec:	f002 f91c 	bl	801d428 <memset>
		sprintf(buffer, "humidity ,");
 801b1f0:	492f      	ldr	r1, [pc, #188]	@ (801b2b0 <csv_header+0x1ac>)
 801b1f2:	4826      	ldr	r0, [pc, #152]	@ (801b28c <csv_header+0x188>)
 801b1f4:	f001 ffce 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b1f8:	4924      	ldr	r1, [pc, #144]	@ (801b28c <csv_header+0x188>)
 801b1fa:	4825      	ldr	r0, [pc, #148]	@ (801b290 <csv_header+0x18c>)
 801b1fc:	f7ff fb86 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b200:	22ff      	movs	r2, #255	@ 0xff
 801b202:	2100      	movs	r1, #0
 801b204:	4821      	ldr	r0, [pc, #132]	@ (801b28c <csv_header+0x188>)
 801b206:	f002 f90f 	bl	801d428 <memset>
		sprintf(buffer, "pir ,");
 801b20a:	492a      	ldr	r1, [pc, #168]	@ (801b2b4 <csv_header+0x1b0>)
 801b20c:	481f      	ldr	r0, [pc, #124]	@ (801b28c <csv_header+0x188>)
 801b20e:	f001 ffc1 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b212:	491e      	ldr	r1, [pc, #120]	@ (801b28c <csv_header+0x188>)
 801b214:	481e      	ldr	r0, [pc, #120]	@ (801b290 <csv_header+0x18c>)
 801b216:	f7ff fb79 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b21a:	22ff      	movs	r2, #255	@ 0xff
 801b21c:	2100      	movs	r1, #0
 801b21e:	481b      	ldr	r0, [pc, #108]	@ (801b28c <csv_header+0x188>)
 801b220:	f002 f902 	bl	801d428 <memset>
		sprintf(buffer, "pm2.5 ,");
 801b224:	4924      	ldr	r1, [pc, #144]	@ (801b2b8 <csv_header+0x1b4>)
 801b226:	4819      	ldr	r0, [pc, #100]	@ (801b28c <csv_header+0x188>)
 801b228:	f001 ffb4 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b22c:	4917      	ldr	r1, [pc, #92]	@ (801b28c <csv_header+0x188>)
 801b22e:	4818      	ldr	r0, [pc, #96]	@ (801b290 <csv_header+0x18c>)
 801b230:	f7ff fb6c 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b234:	22ff      	movs	r2, #255	@ 0xff
 801b236:	2100      	movs	r1, #0
 801b238:	4814      	ldr	r0, [pc, #80]	@ (801b28c <csv_header+0x188>)
 801b23a:	f002 f8f5 	bl	801d428 <memset>
		sprintf(buffer, "port ,");
 801b23e:	491f      	ldr	r1, [pc, #124]	@ (801b2bc <csv_header+0x1b8>)
 801b240:	4812      	ldr	r0, [pc, #72]	@ (801b28c <csv_header+0x188>)
 801b242:	f001 ffa7 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b246:	4911      	ldr	r1, [pc, #68]	@ (801b28c <csv_header+0x188>)
 801b248:	4811      	ldr	r0, [pc, #68]	@ (801b290 <csv_header+0x18c>)
 801b24a:	f7ff fb5f 	bl	801a90c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801b24e:	22ff      	movs	r2, #255	@ 0xff
 801b250:	2100      	movs	r1, #0
 801b252:	480e      	ldr	r0, [pc, #56]	@ (801b28c <csv_header+0x188>)
 801b254:	f002 f8e8 	bl	801d428 <memset>
		sprintf(buffer, "battery \n\n");
 801b258:	4919      	ldr	r1, [pc, #100]	@ (801b2c0 <csv_header+0x1bc>)
 801b25a:	480c      	ldr	r0, [pc, #48]	@ (801b28c <csv_header+0x188>)
 801b25c:	f001 ff9a 	bl	801d194 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801b260:	490a      	ldr	r1, [pc, #40]	@ (801b28c <csv_header+0x188>)
 801b262:	480b      	ldr	r0, [pc, #44]	@ (801b290 <csv_header+0x18c>)
 801b264:	f7ff fb52 	bl	801a90c <Update_File>

		Unmount_SD("/");
 801b268:	4805      	ldr	r0, [pc, #20]	@ (801b280 <csv_header+0x17c>)
 801b26a:	f7ff fa8d 	bl	801a788 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801b26e:	4b05      	ldr	r3, [pc, #20]	@ (801b284 <csv_header+0x180>)
 801b270:	781b      	ldrb	r3, [r3, #0]
 801b272:	b25a      	sxtb	r2, r3
 801b274:	4b13      	ldr	r3, [pc, #76]	@ (801b2c4 <csv_header+0x1c0>)
 801b276:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801b27a:	bf00      	nop
 801b27c:	bd80      	pop	{r7, pc}
 801b27e:	bf00      	nop
 801b280:	080226ec 	.word	0x080226ec
 801b284:	20002334 	.word	0x20002334
 801b288:	08022838 	.word	0x08022838
 801b28c:	20002340 	.word	0x20002340
 801b290:	20001485 	.word	0x20001485
 801b294:	08022844 	.word	0x08022844
 801b298:	0802284c 	.word	0x0802284c
 801b29c:	08022858 	.word	0x08022858
 801b2a0:	08022864 	.word	0x08022864
 801b2a4:	08022870 	.word	0x08022870
 801b2a8:	08022878 	.word	0x08022878
 801b2ac:	08022880 	.word	0x08022880
 801b2b0:	08022890 	.word	0x08022890
 801b2b4:	0802289c 	.word	0x0802289c
 801b2b8:	080228a4 	.word	0x080228a4
 801b2bc:	080228ac 	.word	0x080228ac
 801b2c0:	080228b4 	.word	0x080228b4
 801b2c4:	20001550 	.word	0x20001550

0801b2c8 <filesaving_process>:
uint8_t filesaving_process() {
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801b2cc:	22ff      	movs	r2, #255	@ 0xff
 801b2ce:	2100      	movs	r1, #0
 801b2d0:	480f      	ldr	r0, [pc, #60]	@ (801b310 <filesaving_process+0x48>)
 801b2d2:	f002 f8a9 	bl	801d428 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801b2d6:	4b0f      	ldr	r3, [pc, #60]	@ (801b314 <filesaving_process+0x4c>)
 801b2d8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d002      	beq.n	801b2e6 <filesaving_process+0x1e>
		csv_update();
 801b2e0:	f7ff fd82 	bl	801ade8 <csv_update>
 801b2e4:	e001      	b.n	801b2ea <filesaving_process+0x22>
	} else {
		json_update();
 801b2e6:	f7ff fbcd 	bl	801aa84 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801b2ea:	4b0a      	ldr	r3, [pc, #40]	@ (801b314 <filesaving_process+0x4c>)
 801b2ec:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d006      	beq.n	801b302 <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801b2f4:	f7e6 fe64 	bl	8001fc0 <blink_red>
		datawritten = 2;
 801b2f8:	4b07      	ldr	r3, [pc, #28]	@ (801b318 <filesaving_process+0x50>)
 801b2fa:	2202      	movs	r2, #2
 801b2fc:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801b2fe:	2301      	movs	r3, #1
 801b300:	e003      	b.n	801b30a <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801b302:	4b05      	ldr	r3, [pc, #20]	@ (801b318 <filesaving_process+0x50>)
 801b304:	2201      	movs	r2, #1
 801b306:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801b308:	2300      	movs	r3, #0
//	__enable_irq();
}
 801b30a:	4618      	mov	r0, r3
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	bf00      	nop
 801b310:	20002340 	.word	0x20002340
 801b314:	20001550 	.word	0x20001550
 801b318:	2000233c 	.word	0x2000233c

0801b31c <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b08c      	sub	sp, #48	@ 0x30
 801b320:	af04      	add	r7, sp, #16
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801b326:	f107 031c 	add.w	r3, r7, #28
 801b32a:	2200      	movs	r2, #0
 801b32c:	4619      	mov	r1, r3
 801b32e:	4832      	ldr	r0, [pc, #200]	@ (801b3f8 <createfile+0xdc>)
 801b330:	f7ee f8ea 	bl	8009508 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801b334:	f107 0308 	add.w	r3, r7, #8
 801b338:	2200      	movs	r2, #0
 801b33a:	4619      	mov	r1, r3
 801b33c:	482e      	ldr	r0, [pc, #184]	@ (801b3f8 <createfile+0xdc>)
 801b33e:	f7ee f801 	bl	8009344 <HAL_RTC_GetTime>

	sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801b342:	7ffb      	ldrb	r3, [r7, #31]
 801b344:	4618      	mov	r0, r3
 801b346:	7f7b      	ldrb	r3, [r7, #29]
 801b348:	461a      	mov	r2, r3
 801b34a:	7fbb      	ldrb	r3, [r7, #30]
 801b34c:	4619      	mov	r1, r3
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	9302      	str	r3, [sp, #8]
 801b352:	9101      	str	r1, [sp, #4]
 801b354:	9200      	str	r2, [sp, #0]
 801b356:	4603      	mov	r3, r0
 801b358:	687a      	ldr	r2, [r7, #4]
 801b35a:	4928      	ldr	r1, [pc, #160]	@ (801b3fc <createfile+0xe0>)
 801b35c:	4828      	ldr	r0, [pc, #160]	@ (801b400 <createfile+0xe4>)
 801b35e:	f001 ff19 	bl	801d194 <siprintf>
	sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801b362:	7ffb      	ldrb	r3, [r7, #31]
 801b364:	4619      	mov	r1, r3
 801b366:	7f7b      	ldrb	r3, [r7, #29]
 801b368:	7fba      	ldrb	r2, [r7, #30]
 801b36a:	9201      	str	r2, [sp, #4]
 801b36c:	9300      	str	r3, [sp, #0]
 801b36e:	460b      	mov	r3, r1
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	4924      	ldr	r1, [pc, #144]	@ (801b404 <createfile+0xe8>)
 801b374:	4824      	ldr	r0, [pc, #144]	@ (801b408 <createfile+0xec>)
 801b376:	f001 ff0d 	bl	801d194 <siprintf>

	set_param_flags();
 801b37a:	4b24      	ldr	r3, [pc, #144]	@ (801b40c <createfile+0xf0>)
 801b37c:	2201      	movs	r2, #1
 801b37e:	701a      	strb	r2, [r3, #0]
 801b380:	4b23      	ldr	r3, [pc, #140]	@ (801b410 <createfile+0xf4>)
 801b382:	2201      	movs	r2, #1
 801b384:	701a      	strb	r2, [r3, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801b386:	4823      	ldr	r0, [pc, #140]	@ (801b414 <createfile+0xf8>)
 801b388:	f7ff f9d2 	bl	801a730 <Mount_SD>
 801b38c:	4603      	mov	r3, r0
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d002      	beq.n	801b398 <createfile+0x7c>
	} else {
		//	__enable_irq();
		return -1;
 801b392:	f04f 33ff 	mov.w	r3, #4294967295
 801b396:	e02b      	b.n	801b3f0 <createfile+0xd4>
	}
	Unmount_SD("/");
 801b398:	481e      	ldr	r0, [pc, #120]	@ (801b414 <createfile+0xf8>)
 801b39a:	f7ff f9f5 	bl	801a788 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801b39e:	481d      	ldr	r0, [pc, #116]	@ (801b414 <createfile+0xf8>)
 801b3a0:	f7ff f9c6 	bl	801a730 <Mount_SD>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	4b1b      	ldr	r3, [pc, #108]	@ (801b418 <createfile+0xfc>)
 801b3aa:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801b3ac:	4b1a      	ldr	r3, [pc, #104]	@ (801b418 <createfile+0xfc>)
 801b3ae:	781b      	ldrb	r3, [r3, #0]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d119      	bne.n	801b3e8 <createfile+0xcc>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801b3b4:	4812      	ldr	r0, [pc, #72]	@ (801b400 <createfile+0xe4>)
 801b3b6:	f7ff fa0f 	bl	801a7d8 <Create_File>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	461a      	mov	r2, r3
 801b3be:	4b16      	ldr	r3, [pc, #88]	@ (801b418 <createfile+0xfc>)
 801b3c0:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801b3c2:	4814      	ldr	r0, [pc, #80]	@ (801b414 <createfile+0xf8>)
 801b3c4:	f7ff f9e0 	bl	801a788 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801b3c8:	4b14      	ldr	r3, [pc, #80]	@ (801b41c <createfile+0x100>)
 801b3ca:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d00d      	beq.n	801b3ee <createfile+0xd2>
			if (file_already_exist) {
 801b3d2:	4b13      	ldr	r3, [pc, #76]	@ (801b420 <createfile+0x104>)
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d003      	beq.n	801b3e2 <createfile+0xc6>
				file_already_exist = 0;
 801b3da:	4b11      	ldr	r3, [pc, #68]	@ (801b420 <createfile+0x104>)
 801b3dc:	2200      	movs	r2, #0
 801b3de:	701a      	strb	r2, [r3, #0]
 801b3e0:	e005      	b.n	801b3ee <createfile+0xd2>
			} else {
				csv_header();  //json does not require an header only csv
 801b3e2:	f7ff fe8f 	bl	801b104 <csv_header>
 801b3e6:	e002      	b.n	801b3ee <createfile+0xd2>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 801b3ec:	e000      	b.n	801b3f0 <createfile+0xd4>
	}
//	__enable_irq();
	return 0;
 801b3ee:	2300      	movs	r3, #0
}
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	3720      	adds	r7, #32
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	bd80      	pop	{r7, pc}
 801b3f8:	200018b4 	.word	0x200018b4
 801b3fc:	080228c0 	.word	0x080228c0
 801b400:	20001485 	.word	0x20001485
 801b404:	080228d4 	.word	0x080228d4
 801b408:	200014e9 	.word	0x200014e9
 801b40c:	20001595 	.word	0x20001595
 801b410:	20001596 	.word	0x20001596
 801b414:	080226ec 	.word	0x080226ec
 801b418:	20002334 	.word	0x20002334
 801b41c:	20001550 	.word	0x20001550
 801b420:	20002335 	.word	0x20002335

0801b424 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801b428:	4905      	ldr	r1, [pc, #20]	@ (801b440 <MX_USB_DEVICE_DeInit+0x1c>)
 801b42a:	4806      	ldr	r0, [pc, #24]	@ (801b444 <MX_USB_DEVICE_DeInit+0x20>)
 801b42c:	f7f8 ffc6 	bl	80143bc <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801b430:	4804      	ldr	r0, [pc, #16]	@ (801b444 <MX_USB_DEVICE_DeInit+0x20>)
 801b432:	f7fa ff8e 	bl	8016352 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801b436:	4803      	ldr	r0, [pc, #12]	@ (801b444 <MX_USB_DEVICE_DeInit+0x20>)
 801b438:	f7fa ff19 	bl	801626e <USBD_DeInit>

}
 801b43c:	bf00      	nop
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	20000144 	.word	0x20000144
 801b444:	20002440 	.word	0x20002440

0801b448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b44c:	2200      	movs	r2, #0
 801b44e:	4912      	ldr	r1, [pc, #72]	@ (801b498 <MX_USB_DEVICE_Init+0x50>)
 801b450:	4812      	ldr	r0, [pc, #72]	@ (801b49c <MX_USB_DEVICE_Init+0x54>)
 801b452:	f7fa fedc 	bl	801620e <USBD_Init>
 801b456:	4603      	mov	r3, r0
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d001      	beq.n	801b460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b45c:	f7e7 ff1c 	bl	8003298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801b460:	490f      	ldr	r1, [pc, #60]	@ (801b4a0 <MX_USB_DEVICE_Init+0x58>)
 801b462:	480e      	ldr	r0, [pc, #56]	@ (801b49c <MX_USB_DEVICE_Init+0x54>)
 801b464:	f7fa ff33 	bl	80162ce <USBD_RegisterClass>
 801b468:	4603      	mov	r3, r0
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d001      	beq.n	801b472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b46e:	f7e7 ff13 	bl	8003298 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801b472:	490c      	ldr	r1, [pc, #48]	@ (801b4a4 <MX_USB_DEVICE_Init+0x5c>)
 801b474:	4809      	ldr	r0, [pc, #36]	@ (801b49c <MX_USB_DEVICE_Init+0x54>)
 801b476:	f7f9 f9a9 	bl	80147cc <USBD_MSC_RegisterStorage>
 801b47a:	4603      	mov	r3, r0
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d001      	beq.n	801b484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b480:	f7e7 ff0a 	bl	8003298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b484:	4805      	ldr	r0, [pc, #20]	@ (801b49c <MX_USB_DEVICE_Init+0x54>)
 801b486:	f7fa ff58 	bl	801633a <USBD_Start>
 801b48a:	4603      	mov	r3, r0
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d001      	beq.n	801b494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b490:	f7e7 ff02 	bl	8003298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b494:	bf00      	nop
 801b496:	bd80      	pop	{r7, pc}
 801b498:	200000f4 	.word	0x200000f4
 801b49c:	20002440 	.word	0x20002440
 801b4a0:	2000004c 	.word	0x2000004c
 801b4a4:	20000144 	.word	0x20000144

0801b4a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b4a8:	b480      	push	{r7}
 801b4aa:	b083      	sub	sp, #12
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	6039      	str	r1, [r7, #0]
 801b4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b4b4:	683b      	ldr	r3, [r7, #0]
 801b4b6:	2212      	movs	r2, #18
 801b4b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b4ba:	4b03      	ldr	r3, [pc, #12]	@ (801b4c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	370c      	adds	r7, #12
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c6:	4770      	bx	lr
 801b4c8:	20000110 	.word	0x20000110

0801b4cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b4cc:	b480      	push	{r7}
 801b4ce:	b083      	sub	sp, #12
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	6039      	str	r1, [r7, #0]
 801b4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	2204      	movs	r2, #4
 801b4dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b4de:	4b03      	ldr	r3, [pc, #12]	@ (801b4ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	370c      	adds	r7, #12
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr
 801b4ec:	20000124 	.word	0x20000124

0801b4f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b082      	sub	sp, #8
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	6039      	str	r1, [r7, #0]
 801b4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b4fc:	79fb      	ldrb	r3, [r7, #7]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d105      	bne.n	801b50e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b502:	683a      	ldr	r2, [r7, #0]
 801b504:	4907      	ldr	r1, [pc, #28]	@ (801b524 <USBD_FS_ProductStrDescriptor+0x34>)
 801b506:	4808      	ldr	r0, [pc, #32]	@ (801b528 <USBD_FS_ProductStrDescriptor+0x38>)
 801b508:	f7fc f8dc 	bl	80176c4 <USBD_GetString>
 801b50c:	e004      	b.n	801b518 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b50e:	683a      	ldr	r2, [r7, #0]
 801b510:	4904      	ldr	r1, [pc, #16]	@ (801b524 <USBD_FS_ProductStrDescriptor+0x34>)
 801b512:	4805      	ldr	r0, [pc, #20]	@ (801b528 <USBD_FS_ProductStrDescriptor+0x38>)
 801b514:	f7fc f8d6 	bl	80176c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b518:	4b02      	ldr	r3, [pc, #8]	@ (801b524 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	3708      	adds	r7, #8
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}
 801b522:	bf00      	nop
 801b524:	2000271c 	.word	0x2000271c
 801b528:	080228e8 	.word	0x080228e8

0801b52c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	4603      	mov	r3, r0
 801b534:	6039      	str	r1, [r7, #0]
 801b536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b538:	683a      	ldr	r2, [r7, #0]
 801b53a:	4904      	ldr	r1, [pc, #16]	@ (801b54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b53c:	4804      	ldr	r0, [pc, #16]	@ (801b550 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b53e:	f7fc f8c1 	bl	80176c4 <USBD_GetString>
  return USBD_StrDesc;
 801b542:	4b02      	ldr	r3, [pc, #8]	@ (801b54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b544:	4618      	mov	r0, r3
 801b546:	3708      	adds	r7, #8
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}
 801b54c:	2000271c 	.word	0x2000271c
 801b550:	080228fc 	.word	0x080228fc

0801b554 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	4603      	mov	r3, r0
 801b55c:	6039      	str	r1, [r7, #0]
 801b55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	221a      	movs	r2, #26
 801b564:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b566:	f000 f843 	bl	801b5f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b56a:	4b02      	ldr	r3, [pc, #8]	@ (801b574 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b56c:	4618      	mov	r0, r3
 801b56e:	3708      	adds	r7, #8
 801b570:	46bd      	mov	sp, r7
 801b572:	bd80      	pop	{r7, pc}
 801b574:	20000128 	.word	0x20000128

0801b578 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b082      	sub	sp, #8
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	4603      	mov	r3, r0
 801b580:	6039      	str	r1, [r7, #0]
 801b582:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b584:	79fb      	ldrb	r3, [r7, #7]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d105      	bne.n	801b596 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b58a:	683a      	ldr	r2, [r7, #0]
 801b58c:	4907      	ldr	r1, [pc, #28]	@ (801b5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801b58e:	4808      	ldr	r0, [pc, #32]	@ (801b5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b590:	f7fc f898 	bl	80176c4 <USBD_GetString>
 801b594:	e004      	b.n	801b5a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b596:	683a      	ldr	r2, [r7, #0]
 801b598:	4904      	ldr	r1, [pc, #16]	@ (801b5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801b59a:	4805      	ldr	r0, [pc, #20]	@ (801b5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b59c:	f7fc f892 	bl	80176c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b5a0:	4b02      	ldr	r3, [pc, #8]	@ (801b5ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	3708      	adds	r7, #8
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	bd80      	pop	{r7, pc}
 801b5aa:	bf00      	nop
 801b5ac:	2000271c 	.word	0x2000271c
 801b5b0:	08022910 	.word	0x08022910

0801b5b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b082      	sub	sp, #8
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	6039      	str	r1, [r7, #0]
 801b5be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b5c0:	79fb      	ldrb	r3, [r7, #7]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d105      	bne.n	801b5d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b5c6:	683a      	ldr	r2, [r7, #0]
 801b5c8:	4907      	ldr	r1, [pc, #28]	@ (801b5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b5ca:	4808      	ldr	r0, [pc, #32]	@ (801b5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b5cc:	f7fc f87a 	bl	80176c4 <USBD_GetString>
 801b5d0:	e004      	b.n	801b5dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b5d2:	683a      	ldr	r2, [r7, #0]
 801b5d4:	4904      	ldr	r1, [pc, #16]	@ (801b5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b5d6:	4805      	ldr	r0, [pc, #20]	@ (801b5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b5d8:	f7fc f874 	bl	80176c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b5dc:	4b02      	ldr	r3, [pc, #8]	@ (801b5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b5de:	4618      	mov	r0, r3
 801b5e0:	3708      	adds	r7, #8
 801b5e2:	46bd      	mov	sp, r7
 801b5e4:	bd80      	pop	{r7, pc}
 801b5e6:	bf00      	nop
 801b5e8:	2000271c 	.word	0x2000271c
 801b5ec:	0802291c 	.word	0x0802291c

0801b5f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b084      	sub	sp, #16
 801b5f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b5f6:	4b0f      	ldr	r3, [pc, #60]	@ (801b634 <Get_SerialNum+0x44>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b5fc:	4b0e      	ldr	r3, [pc, #56]	@ (801b638 <Get_SerialNum+0x48>)
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b602:	4b0e      	ldr	r3, [pc, #56]	@ (801b63c <Get_SerialNum+0x4c>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b608:	68fa      	ldr	r2, [r7, #12]
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	4413      	add	r3, r2
 801b60e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	2b00      	cmp	r3, #0
 801b614:	d009      	beq.n	801b62a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b616:	2208      	movs	r2, #8
 801b618:	4909      	ldr	r1, [pc, #36]	@ (801b640 <Get_SerialNum+0x50>)
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f000 f814 	bl	801b648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b620:	2204      	movs	r2, #4
 801b622:	4908      	ldr	r1, [pc, #32]	@ (801b644 <Get_SerialNum+0x54>)
 801b624:	68b8      	ldr	r0, [r7, #8]
 801b626:	f000 f80f 	bl	801b648 <IntToUnicode>
  }
}
 801b62a:	bf00      	nop
 801b62c:	3710      	adds	r7, #16
 801b62e:	46bd      	mov	sp, r7
 801b630:	bd80      	pop	{r7, pc}
 801b632:	bf00      	nop
 801b634:	1fff7a10 	.word	0x1fff7a10
 801b638:	1fff7a14 	.word	0x1fff7a14
 801b63c:	1fff7a18 	.word	0x1fff7a18
 801b640:	2000012a 	.word	0x2000012a
 801b644:	2000013a 	.word	0x2000013a

0801b648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b648:	b480      	push	{r7}
 801b64a:	b087      	sub	sp, #28
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	60f8      	str	r0, [r7, #12]
 801b650:	60b9      	str	r1, [r7, #8]
 801b652:	4613      	mov	r3, r2
 801b654:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b65a:	2300      	movs	r3, #0
 801b65c:	75fb      	strb	r3, [r7, #23]
 801b65e:	e027      	b.n	801b6b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	0f1b      	lsrs	r3, r3, #28
 801b664:	2b09      	cmp	r3, #9
 801b666:	d80b      	bhi.n	801b680 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	0f1b      	lsrs	r3, r3, #28
 801b66c:	b2da      	uxtb	r2, r3
 801b66e:	7dfb      	ldrb	r3, [r7, #23]
 801b670:	005b      	lsls	r3, r3, #1
 801b672:	4619      	mov	r1, r3
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	440b      	add	r3, r1
 801b678:	3230      	adds	r2, #48	@ 0x30
 801b67a:	b2d2      	uxtb	r2, r2
 801b67c:	701a      	strb	r2, [r3, #0]
 801b67e:	e00a      	b.n	801b696 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	0f1b      	lsrs	r3, r3, #28
 801b684:	b2da      	uxtb	r2, r3
 801b686:	7dfb      	ldrb	r3, [r7, #23]
 801b688:	005b      	lsls	r3, r3, #1
 801b68a:	4619      	mov	r1, r3
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	440b      	add	r3, r1
 801b690:	3237      	adds	r2, #55	@ 0x37
 801b692:	b2d2      	uxtb	r2, r2
 801b694:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	011b      	lsls	r3, r3, #4
 801b69a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b69c:	7dfb      	ldrb	r3, [r7, #23]
 801b69e:	005b      	lsls	r3, r3, #1
 801b6a0:	3301      	adds	r3, #1
 801b6a2:	68ba      	ldr	r2, [r7, #8]
 801b6a4:	4413      	add	r3, r2
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b6aa:	7dfb      	ldrb	r3, [r7, #23]
 801b6ac:	3301      	adds	r3, #1
 801b6ae:	75fb      	strb	r3, [r7, #23]
 801b6b0:	7dfa      	ldrb	r2, [r7, #23]
 801b6b2:	79fb      	ldrb	r3, [r7, #7]
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	d3d3      	bcc.n	801b660 <IntToUnicode+0x18>
  }
}
 801b6b8:	bf00      	nop
 801b6ba:	bf00      	nop
 801b6bc:	371c      	adds	r7, #28
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c4:	4770      	bx	lr

0801b6c6 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801b6c6:	b480      	push	{r7}
 801b6c8:	b083      	sub	sp, #12
 801b6ca:	af00      	add	r7, sp, #0
 801b6cc:	4603      	mov	r3, r0
 801b6ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801b6d0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	370c      	adds	r7, #12
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6dc:	4770      	bx	lr
	...

0801b6e0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b08e      	sub	sp, #56	@ 0x38
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	60b9      	str	r1, [r7, #8]
 801b6ea:	607a      	str	r2, [r7, #4]
 801b6ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801b6ee:	23ff      	movs	r3, #255	@ 0xff
 801b6f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801b6f4:	f107 0314 	add.w	r3, r7, #20
 801b6f8:	4619      	mov	r1, r3
 801b6fa:	480a      	ldr	r0, [pc, #40]	@ (801b724 <STORAGE_GetCapacity_FS+0x44>)
 801b6fc:	f7ee ff8e 	bl	800a61c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b702:	1e5a      	subs	r2, r3, #1
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801b710:	2300      	movs	r3, #0
 801b712:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801b716:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801b71a:	4618      	mov	r0, r3
 801b71c:	3738      	adds	r7, #56	@ 0x38
 801b71e:	46bd      	mov	sp, r7
 801b720:	bd80      	pop	{r7, pc}
 801b722:	bf00      	nop
 801b724:	200018d4 	.word	0x200018d4

0801b728 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801b728:	b480      	push	{r7}
 801b72a:	b083      	sub	sp, #12
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	4603      	mov	r3, r0
 801b730:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801b732:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b734:	4618      	mov	r0, r3
 801b736:	370c      	adds	r7, #12
 801b738:	46bd      	mov	sp, r7
 801b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73e:	4770      	bx	lr

0801b740 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801b740:	b480      	push	{r7}
 801b742:	b083      	sub	sp, #12
 801b744:	af00      	add	r7, sp, #0
 801b746:	4603      	mov	r3, r0
 801b748:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801b74a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b74c:	4618      	mov	r0, r3
 801b74e:	370c      	adds	r7, #12
 801b750:	46bd      	mov	sp, r7
 801b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b756:	4770      	bx	lr

0801b758 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b088      	sub	sp, #32
 801b75c:	af02      	add	r7, sp, #8
 801b75e:	60b9      	str	r1, [r7, #8]
 801b760:	607a      	str	r2, [r7, #4]
 801b762:	461a      	mov	r2, r3
 801b764:	4603      	mov	r3, r0
 801b766:	73fb      	strb	r3, [r7, #15]
 801b768:	4613      	mov	r3, r2
 801b76a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801b76c:	23ff      	movs	r3, #255	@ 0xff
 801b76e:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801b770:	f7e8 fadc 	bl	8003d2c <HAL_GetTick>
 801b774:	4603      	mov	r3, r0
 801b776:	4a0d      	ldr	r2, [pc, #52]	@ (801b7ac <STORAGE_Read_FS+0x54>)
 801b778:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b77a:	89bb      	ldrh	r3, [r7, #12]
 801b77c:	f04f 32ff 	mov.w	r2, #4294967295
 801b780:	9200      	str	r2, [sp, #0]
 801b782:	687a      	ldr	r2, [r7, #4]
 801b784:	68b9      	ldr	r1, [r7, #8]
 801b786:	480a      	ldr	r0, [pc, #40]	@ (801b7b0 <STORAGE_Read_FS+0x58>)
 801b788:	f7ee fa40 	bl	8009c0c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b78c:	bf00      	nop
 801b78e:	4808      	ldr	r0, [pc, #32]	@ (801b7b0 <STORAGE_Read_FS+0x58>)
 801b790:	f7ee ff70 	bl	800a674 <HAL_SD_GetCardState>
 801b794:	4603      	mov	r3, r0
 801b796:	2b04      	cmp	r3, #4
 801b798:	d1f9      	bne.n	801b78e <STORAGE_Read_FS+0x36>
	  ret = 0;
 801b79a:	2300      	movs	r3, #0
 801b79c:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	3718      	adds	r7, #24
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bd80      	pop	{r7, pc}
 801b7aa:	bf00      	nop
 801b7ac:	200017dc 	.word	0x200017dc
 801b7b0:	200018d4 	.word	0x200018d4

0801b7b4 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b088      	sub	sp, #32
 801b7b8:	af02      	add	r7, sp, #8
 801b7ba:	60b9      	str	r1, [r7, #8]
 801b7bc:	607a      	str	r2, [r7, #4]
 801b7be:	461a      	mov	r2, r3
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	73fb      	strb	r3, [r7, #15]
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801b7c8:	23ff      	movs	r3, #255	@ 0xff
 801b7ca:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b7cc:	89bb      	ldrh	r3, [r7, #12]
 801b7ce:	f04f 32ff 	mov.w	r2, #4294967295
 801b7d2:	9200      	str	r2, [sp, #0]
 801b7d4:	687a      	ldr	r2, [r7, #4]
 801b7d6:	68b9      	ldr	r1, [r7, #8]
 801b7d8:	4808      	ldr	r0, [pc, #32]	@ (801b7fc <STORAGE_Write_FS+0x48>)
 801b7da:	f7ee fbf5 	bl	8009fc8 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b7de:	bf00      	nop
 801b7e0:	4806      	ldr	r0, [pc, #24]	@ (801b7fc <STORAGE_Write_FS+0x48>)
 801b7e2:	f7ee ff47 	bl	800a674 <HAL_SD_GetCardState>
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	2b04      	cmp	r3, #4
 801b7ea:	d1f9      	bne.n	801b7e0 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b7f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	3718      	adds	r7, #24
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	bd80      	pop	{r7, pc}
 801b7fc:	200018d4 	.word	0x200018d4

0801b800 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801b800:	b480      	push	{r7}
 801b802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801b804:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801b806:	4618      	mov	r0, r3
 801b808:	46bd      	mov	sp, r7
 801b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80e:	4770      	bx	lr

0801b810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b810:	b580      	push	{r7, lr}
 801b812:	b08a      	sub	sp, #40	@ 0x28
 801b814:	af00      	add	r7, sp, #0
 801b816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b818:	f107 0314 	add.w	r3, r7, #20
 801b81c:	2200      	movs	r2, #0
 801b81e:	601a      	str	r2, [r3, #0]
 801b820:	605a      	str	r2, [r3, #4]
 801b822:	609a      	str	r2, [r3, #8]
 801b824:	60da      	str	r2, [r3, #12]
 801b826:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b830:	d13a      	bne.n	801b8a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b832:	2300      	movs	r3, #0
 801b834:	613b      	str	r3, [r7, #16]
 801b836:	4b1e      	ldr	r3, [pc, #120]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b83a:	4a1d      	ldr	r2, [pc, #116]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b83c:	f043 0301 	orr.w	r3, r3, #1
 801b840:	6313      	str	r3, [r2, #48]	@ 0x30
 801b842:	4b1b      	ldr	r3, [pc, #108]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b846:	f003 0301 	and.w	r3, r3, #1
 801b84a:	613b      	str	r3, [r7, #16]
 801b84c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b84e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801b852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b854:	2302      	movs	r3, #2
 801b856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b858:	2300      	movs	r3, #0
 801b85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b85c:	2303      	movs	r3, #3
 801b85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b860:	230a      	movs	r3, #10
 801b862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b864:	f107 0314 	add.w	r3, r7, #20
 801b868:	4619      	mov	r1, r3
 801b86a:	4812      	ldr	r0, [pc, #72]	@ (801b8b4 <HAL_PCD_MspInit+0xa4>)
 801b86c:	f7e9 ffc2 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b870:	4b0f      	ldr	r3, [pc, #60]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b874:	4a0e      	ldr	r2, [pc, #56]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b87a:	6353      	str	r3, [r2, #52]	@ 0x34
 801b87c:	2300      	movs	r3, #0
 801b87e:	60fb      	str	r3, [r7, #12]
 801b880:	4b0b      	ldr	r3, [pc, #44]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b884:	4a0a      	ldr	r2, [pc, #40]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b88a:	6453      	str	r3, [r2, #68]	@ 0x44
 801b88c:	4b08      	ldr	r3, [pc, #32]	@ (801b8b0 <HAL_PCD_MspInit+0xa0>)
 801b88e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b894:	60fb      	str	r3, [r7, #12]
 801b896:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b898:	2200      	movs	r2, #0
 801b89a:	2100      	movs	r1, #0
 801b89c:	2043      	movs	r0, #67	@ 0x43
 801b89e:	f7e9 f828 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b8a2:	2043      	movs	r0, #67	@ 0x43
 801b8a4:	f7e9 f841 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b8a8:	bf00      	nop
 801b8aa:	3728      	adds	r7, #40	@ 0x28
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	bd80      	pop	{r7, pc}
 801b8b0:	40023800 	.word	0x40023800
 801b8b4:	40020000 	.word	0x40020000

0801b8b8 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b082      	sub	sp, #8
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b8c8:	d10d      	bne.n	801b8e6 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801b8ca:	4b09      	ldr	r3, [pc, #36]	@ (801b8f0 <HAL_PCD_MspDeInit+0x38>)
 801b8cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8ce:	4a08      	ldr	r2, [pc, #32]	@ (801b8f0 <HAL_PCD_MspDeInit+0x38>)
 801b8d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b8d4:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801b8d6:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801b8da:	4806      	ldr	r0, [pc, #24]	@ (801b8f4 <HAL_PCD_MspDeInit+0x3c>)
 801b8dc:	f7ea f90e 	bl	8005afc <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801b8e0:	2043      	movs	r0, #67	@ 0x43
 801b8e2:	f7e9 f830 	bl	8004946 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801b8e6:	bf00      	nop
 801b8e8:	3708      	adds	r7, #8
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	bd80      	pop	{r7, pc}
 801b8ee:	bf00      	nop
 801b8f0:	40023800 	.word	0x40023800
 801b8f4:	40020000 	.word	0x40020000

0801b8f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b8f8:	b580      	push	{r7, lr}
 801b8fa:	b082      	sub	sp, #8
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801b90c:	4619      	mov	r1, r3
 801b90e:	4610      	mov	r0, r2
 801b910:	f7fa fd7b 	bl	801640a <USBD_LL_SetupStage>
}
 801b914:	bf00      	nop
 801b916:	3708      	adds	r7, #8
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}

0801b91c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b082      	sub	sp, #8
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	460b      	mov	r3, r1
 801b926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b92e:	78fa      	ldrb	r2, [r7, #3]
 801b930:	6879      	ldr	r1, [r7, #4]
 801b932:	4613      	mov	r3, r2
 801b934:	00db      	lsls	r3, r3, #3
 801b936:	4413      	add	r3, r2
 801b938:	009b      	lsls	r3, r3, #2
 801b93a:	440b      	add	r3, r1
 801b93c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801b940:	681a      	ldr	r2, [r3, #0]
 801b942:	78fb      	ldrb	r3, [r7, #3]
 801b944:	4619      	mov	r1, r3
 801b946:	f7fa fdb5 	bl	80164b4 <USBD_LL_DataOutStage>
}
 801b94a:	bf00      	nop
 801b94c:	3708      	adds	r7, #8
 801b94e:	46bd      	mov	sp, r7
 801b950:	bd80      	pop	{r7, pc}

0801b952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b952:	b580      	push	{r7, lr}
 801b954:	b082      	sub	sp, #8
 801b956:	af00      	add	r7, sp, #0
 801b958:	6078      	str	r0, [r7, #4]
 801b95a:	460b      	mov	r3, r1
 801b95c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801b964:	78fa      	ldrb	r2, [r7, #3]
 801b966:	6879      	ldr	r1, [r7, #4]
 801b968:	4613      	mov	r3, r2
 801b96a:	00db      	lsls	r3, r3, #3
 801b96c:	4413      	add	r3, r2
 801b96e:	009b      	lsls	r3, r3, #2
 801b970:	440b      	add	r3, r1
 801b972:	334c      	adds	r3, #76	@ 0x4c
 801b974:	681a      	ldr	r2, [r3, #0]
 801b976:	78fb      	ldrb	r3, [r7, #3]
 801b978:	4619      	mov	r1, r3
 801b97a:	f7fa fe4e 	bl	801661a <USBD_LL_DataInStage>
}
 801b97e:	bf00      	nop
 801b980:	3708      	adds	r7, #8
 801b982:	46bd      	mov	sp, r7
 801b984:	bd80      	pop	{r7, pc}

0801b986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b986:	b580      	push	{r7, lr}
 801b988:	b082      	sub	sp, #8
 801b98a:	af00      	add	r7, sp, #0
 801b98c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b994:	4618      	mov	r0, r3
 801b996:	f7fa ff82 	bl	801689e <USBD_LL_SOF>
}
 801b99a:	bf00      	nop
 801b99c:	3708      	adds	r7, #8
 801b99e:	46bd      	mov	sp, r7
 801b9a0:	bd80      	pop	{r7, pc}

0801b9a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9a2:	b580      	push	{r7, lr}
 801b9a4:	b084      	sub	sp, #16
 801b9a6:	af00      	add	r7, sp, #0
 801b9a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d102      	bne.n	801b9bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	73fb      	strb	r3, [r7, #15]
 801b9ba:	e008      	b.n	801b9ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	2b02      	cmp	r3, #2
 801b9c2:	d102      	bne.n	801b9ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b9c4:	2301      	movs	r3, #1
 801b9c6:	73fb      	strb	r3, [r7, #15]
 801b9c8:	e001      	b.n	801b9ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b9ca:	f7e7 fc65 	bl	8003298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b9d4:	7bfa      	ldrb	r2, [r7, #15]
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	4618      	mov	r0, r3
 801b9da:	f7fa ff22 	bl	8016822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	f7fa feca 	bl	801677e <USBD_LL_Reset>
}
 801b9ea:	bf00      	nop
 801b9ec:	3710      	adds	r7, #16
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd80      	pop	{r7, pc}
	...

0801b9f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9f4:	b580      	push	{r7, lr}
 801b9f6:	b082      	sub	sp, #8
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ba02:	4618      	mov	r0, r3
 801ba04:	f7fa ff1d 	bl	8016842 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	687a      	ldr	r2, [r7, #4]
 801ba14:	6812      	ldr	r2, [r2, #0]
 801ba16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801ba1a:	f043 0301 	orr.w	r3, r3, #1
 801ba1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	6a1b      	ldr	r3, [r3, #32]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d005      	beq.n	801ba34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ba28:	4b04      	ldr	r3, [pc, #16]	@ (801ba3c <HAL_PCD_SuspendCallback+0x48>)
 801ba2a:	691b      	ldr	r3, [r3, #16]
 801ba2c:	4a03      	ldr	r2, [pc, #12]	@ (801ba3c <HAL_PCD_SuspendCallback+0x48>)
 801ba2e:	f043 0306 	orr.w	r3, r3, #6
 801ba32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ba34:	bf00      	nop
 801ba36:	3708      	adds	r7, #8
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bd80      	pop	{r7, pc}
 801ba3c:	e000ed00 	.word	0xe000ed00

0801ba40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b082      	sub	sp, #8
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f7fa ff0d 	bl	801686e <USBD_LL_Resume>
}
 801ba54:	bf00      	nop
 801ba56:	3708      	adds	r7, #8
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}

0801ba5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b082      	sub	sp, #8
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
 801ba64:	460b      	mov	r3, r1
 801ba66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ba6e:	78fa      	ldrb	r2, [r7, #3]
 801ba70:	4611      	mov	r1, r2
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7fa ff65 	bl	8016942 <USBD_LL_IsoOUTIncomplete>
}
 801ba78:	bf00      	nop
 801ba7a:	3708      	adds	r7, #8
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd80      	pop	{r7, pc}

0801ba80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b082      	sub	sp, #8
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	6078      	str	r0, [r7, #4]
 801ba88:	460b      	mov	r3, r1
 801ba8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801ba92:	78fa      	ldrb	r2, [r7, #3]
 801ba94:	4611      	mov	r1, r2
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7fa ff21 	bl	80168de <USBD_LL_IsoINIncomplete>
}
 801ba9c:	bf00      	nop
 801ba9e:	3708      	adds	r7, #8
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}

0801baa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b082      	sub	sp, #8
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801bab2:	4618      	mov	r0, r3
 801bab4:	f7fa ff77 	bl	80169a6 <USBD_LL_DevConnected>
}
 801bab8:	bf00      	nop
 801baba:	3708      	adds	r7, #8
 801babc:	46bd      	mov	sp, r7
 801babe:	bd80      	pop	{r7, pc}

0801bac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b082      	sub	sp, #8
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801bace:	4618      	mov	r0, r3
 801bad0:	f7fa ff74 	bl	80169bc <USBD_LL_DevDisconnected>
}
 801bad4:	bf00      	nop
 801bad6:	3708      	adds	r7, #8
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}

0801badc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d13c      	bne.n	801bb66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801baec:	4a20      	ldr	r2, [pc, #128]	@ (801bb70 <USBD_LL_Init+0x94>)
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	4a1e      	ldr	r2, [pc, #120]	@ (801bb70 <USBD_LL_Init+0x94>)
 801baf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801bafc:	4b1c      	ldr	r3, [pc, #112]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bafe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801bb02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801bb04:	4b1a      	ldr	r3, [pc, #104]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb06:	2204      	movs	r2, #4
 801bb08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801bb0a:	4b19      	ldr	r3, [pc, #100]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb0c:	2202      	movs	r2, #2
 801bb0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bb10:	4b17      	ldr	r3, [pc, #92]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb12:	2200      	movs	r2, #0
 801bb14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bb16:	4b16      	ldr	r3, [pc, #88]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb18:	2202      	movs	r2, #2
 801bb1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bb1c:	4b14      	ldr	r3, [pc, #80]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb1e:	2200      	movs	r2, #0
 801bb20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801bb22:	4b13      	ldr	r3, [pc, #76]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb24:	2200      	movs	r2, #0
 801bb26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801bb28:	4b11      	ldr	r3, [pc, #68]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801bb2e:	4b10      	ldr	r3, [pc, #64]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb30:	2200      	movs	r2, #0
 801bb32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801bb34:	4b0e      	ldr	r3, [pc, #56]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb36:	2200      	movs	r2, #0
 801bb38:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801bb3a:	480d      	ldr	r0, [pc, #52]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb3c:	f7eb fa51 	bl	8006fe2 <HAL_PCD_Init>
 801bb40:	4603      	mov	r3, r0
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d001      	beq.n	801bb4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801bb46:	f7e7 fba7 	bl	8003298 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801bb4a:	2180      	movs	r1, #128	@ 0x80
 801bb4c:	4808      	ldr	r0, [pc, #32]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb4e:	f7ec fd32 	bl	80085b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801bb52:	2240      	movs	r2, #64	@ 0x40
 801bb54:	2100      	movs	r1, #0
 801bb56:	4806      	ldr	r0, [pc, #24]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb58:	f7ec fce6 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801bb5c:	2280      	movs	r2, #128	@ 0x80
 801bb5e:	2101      	movs	r1, #1
 801bb60:	4803      	ldr	r0, [pc, #12]	@ (801bb70 <USBD_LL_Init+0x94>)
 801bb62:	f7ec fce1 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801bb66:	2300      	movs	r3, #0
}
 801bb68:	4618      	mov	r0, r3
 801bb6a:	3708      	adds	r7, #8
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	bd80      	pop	{r7, pc}
 801bb70:	2000291c 	.word	0x2000291c

0801bb74 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801bb74:	b580      	push	{r7, lr}
 801bb76:	b084      	sub	sp, #16
 801bb78:	af00      	add	r7, sp, #0
 801bb7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb80:	2300      	movs	r3, #0
 801bb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	f7eb fb46 	bl	800721c <HAL_PCD_DeInit>
 801bb90:	4603      	mov	r3, r0
 801bb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb94:	7bfb      	ldrb	r3, [r7, #15]
 801bb96:	4618      	mov	r0, r3
 801bb98:	f000 f998 	bl	801becc <USBD_Get_USB_Status>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bba0:	7bbb      	ldrb	r3, [r7, #14]
}
 801bba2:	4618      	mov	r0, r3
 801bba4:	3710      	adds	r7, #16
 801bba6:	46bd      	mov	sp, r7
 801bba8:	bd80      	pop	{r7, pc}

0801bbaa <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b084      	sub	sp, #16
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	f7eb fb4e 	bl	8007262 <HAL_PCD_Start>
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bbca:	7bfb      	ldrb	r3, [r7, #15]
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f000 f97d 	bl	801becc <USBD_Get_USB_Status>
 801bbd2:	4603      	mov	r3, r0
 801bbd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bbd6:	7bbb      	ldrb	r3, [r7, #14]
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3710      	adds	r7, #16
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}

0801bbe0 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801bbe0:	b580      	push	{r7, lr}
 801bbe2:	b084      	sub	sp, #16
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bbec:	2300      	movs	r3, #0
 801bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7eb fb66 	bl	80072c8 <HAL_PCD_Stop>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc00:	7bfb      	ldrb	r3, [r7, #15]
 801bc02:	4618      	mov	r0, r3
 801bc04:	f000 f962 	bl	801becc <USBD_Get_USB_Status>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	3710      	adds	r7, #16
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}

0801bc16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bc16:	b580      	push	{r7, lr}
 801bc18:	b084      	sub	sp, #16
 801bc1a:	af00      	add	r7, sp, #0
 801bc1c:	6078      	str	r0, [r7, #4]
 801bc1e:	4608      	mov	r0, r1
 801bc20:	4611      	mov	r1, r2
 801bc22:	461a      	mov	r2, r3
 801bc24:	4603      	mov	r3, r0
 801bc26:	70fb      	strb	r3, [r7, #3]
 801bc28:	460b      	mov	r3, r1
 801bc2a:	70bb      	strb	r3, [r7, #2]
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc30:	2300      	movs	r3, #0
 801bc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc34:	2300      	movs	r3, #0
 801bc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bc3e:	78bb      	ldrb	r3, [r7, #2]
 801bc40:	883a      	ldrh	r2, [r7, #0]
 801bc42:	78f9      	ldrb	r1, [r7, #3]
 801bc44:	f7ec f83d 	bl	8007cc2 <HAL_PCD_EP_Open>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc4c:	7bfb      	ldrb	r3, [r7, #15]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f000 f93c 	bl	801becc <USBD_Get_USB_Status>
 801bc54:	4603      	mov	r3, r0
 801bc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc58:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	3710      	adds	r7, #16
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bd80      	pop	{r7, pc}

0801bc62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b084      	sub	sp, #16
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc6e:	2300      	movs	r3, #0
 801bc70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc72:	2300      	movs	r3, #0
 801bc74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bc7c:	78fa      	ldrb	r2, [r7, #3]
 801bc7e:	4611      	mov	r1, r2
 801bc80:	4618      	mov	r0, r3
 801bc82:	f7ec f886 	bl	8007d92 <HAL_PCD_EP_Close>
 801bc86:	4603      	mov	r3, r0
 801bc88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc8a:	7bfb      	ldrb	r3, [r7, #15]
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f000 f91d 	bl	801becc <USBD_Get_USB_Status>
 801bc92:	4603      	mov	r3, r0
 801bc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc96:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc98:	4618      	mov	r0, r3
 801bc9a:	3710      	adds	r7, #16
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	bd80      	pop	{r7, pc}

0801bca0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	460b      	mov	r3, r1
 801bcaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bcac:	2300      	movs	r3, #0
 801bcae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bcba:	78fa      	ldrb	r2, [r7, #3]
 801bcbc:	4611      	mov	r1, r2
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7ec fa49 	bl	8008156 <HAL_PCD_EP_Flush>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bcc8:	7bfb      	ldrb	r3, [r7, #15]
 801bcca:	4618      	mov	r0, r3
 801bccc:	f000 f8fe 	bl	801becc <USBD_Get_USB_Status>
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	3710      	adds	r7, #16
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd80      	pop	{r7, pc}

0801bcde <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bcde:	b580      	push	{r7, lr}
 801bce0:	b084      	sub	sp, #16
 801bce2:	af00      	add	r7, sp, #0
 801bce4:	6078      	str	r0, [r7, #4]
 801bce6:	460b      	mov	r3, r1
 801bce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bcea:	2300      	movs	r3, #0
 801bcec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bcf8:	78fa      	ldrb	r2, [r7, #3]
 801bcfa:	4611      	mov	r1, r2
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	f7ec f93f 	bl	8007f80 <HAL_PCD_EP_SetStall>
 801bd02:	4603      	mov	r3, r0
 801bd04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bd06:	7bfb      	ldrb	r3, [r7, #15]
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f000 f8df 	bl	801becc <USBD_Get_USB_Status>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bd12:	7bbb      	ldrb	r3, [r7, #14]
}
 801bd14:	4618      	mov	r0, r3
 801bd16:	3710      	adds	r7, #16
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}

0801bd1c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
 801bd24:	460b      	mov	r3, r1
 801bd26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bd28:	2300      	movs	r3, #0
 801bd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bd2c:	2300      	movs	r3, #0
 801bd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bd36:	78fa      	ldrb	r2, [r7, #3]
 801bd38:	4611      	mov	r1, r2
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f7ec f984 	bl	8008048 <HAL_PCD_EP_ClrStall>
 801bd40:	4603      	mov	r3, r0
 801bd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bd44:	7bfb      	ldrb	r3, [r7, #15]
 801bd46:	4618      	mov	r0, r3
 801bd48:	f000 f8c0 	bl	801becc <USBD_Get_USB_Status>
 801bd4c:	4603      	mov	r3, r0
 801bd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bd50:	7bbb      	ldrb	r3, [r7, #14]
}
 801bd52:	4618      	mov	r0, r3
 801bd54:	3710      	adds	r7, #16
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}

0801bd5a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bd5a:	b480      	push	{r7}
 801bd5c:	b085      	sub	sp, #20
 801bd5e:	af00      	add	r7, sp, #0
 801bd60:	6078      	str	r0, [r7, #4]
 801bd62:	460b      	mov	r3, r1
 801bd64:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bd6c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bd6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	da0b      	bge.n	801bd8e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bd76:	78fb      	ldrb	r3, [r7, #3]
 801bd78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bd7c:	68f9      	ldr	r1, [r7, #12]
 801bd7e:	4613      	mov	r3, r2
 801bd80:	00db      	lsls	r3, r3, #3
 801bd82:	4413      	add	r3, r2
 801bd84:	009b      	lsls	r3, r3, #2
 801bd86:	440b      	add	r3, r1
 801bd88:	333e      	adds	r3, #62	@ 0x3e
 801bd8a:	781b      	ldrb	r3, [r3, #0]
 801bd8c:	e00b      	b.n	801bda6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bd8e:	78fb      	ldrb	r3, [r7, #3]
 801bd90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bd94:	68f9      	ldr	r1, [r7, #12]
 801bd96:	4613      	mov	r3, r2
 801bd98:	00db      	lsls	r3, r3, #3
 801bd9a:	4413      	add	r3, r2
 801bd9c:	009b      	lsls	r3, r3, #2
 801bd9e:	440b      	add	r3, r1
 801bda0:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801bda4:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3714      	adds	r7, #20
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb0:	4770      	bx	lr

0801bdb2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bdb2:	b580      	push	{r7, lr}
 801bdb4:	b084      	sub	sp, #16
 801bdb6:	af00      	add	r7, sp, #0
 801bdb8:	6078      	str	r0, [r7, #4]
 801bdba:	460b      	mov	r3, r1
 801bdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bdcc:	78fa      	ldrb	r2, [r7, #3]
 801bdce:	4611      	mov	r1, r2
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7eb ff51 	bl	8007c78 <HAL_PCD_SetAddress>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bdda:	7bfb      	ldrb	r3, [r7, #15]
 801bddc:	4618      	mov	r0, r3
 801bdde:	f000 f875 	bl	801becc <USBD_Get_USB_Status>
 801bde2:	4603      	mov	r3, r0
 801bde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bde6:	7bbb      	ldrb	r3, [r7, #14]
}
 801bde8:	4618      	mov	r0, r3
 801bdea:	3710      	adds	r7, #16
 801bdec:	46bd      	mov	sp, r7
 801bdee:	bd80      	pop	{r7, pc}

0801bdf0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b086      	sub	sp, #24
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	60f8      	str	r0, [r7, #12]
 801bdf8:	607a      	str	r2, [r7, #4]
 801bdfa:	603b      	str	r3, [r7, #0]
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be00:	2300      	movs	r3, #0
 801be02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be04:	2300      	movs	r3, #0
 801be06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801be0e:	7af9      	ldrb	r1, [r7, #11]
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	687a      	ldr	r2, [r7, #4]
 801be14:	f7ec f86a 	bl	8007eec <HAL_PCD_EP_Transmit>
 801be18:	4603      	mov	r3, r0
 801be1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be1c:	7dfb      	ldrb	r3, [r7, #23]
 801be1e:	4618      	mov	r0, r3
 801be20:	f000 f854 	bl	801becc <USBD_Get_USB_Status>
 801be24:	4603      	mov	r3, r0
 801be26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801be28:	7dbb      	ldrb	r3, [r7, #22]
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3718      	adds	r7, #24
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}

0801be32 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801be32:	b580      	push	{r7, lr}
 801be34:	b086      	sub	sp, #24
 801be36:	af00      	add	r7, sp, #0
 801be38:	60f8      	str	r0, [r7, #12]
 801be3a:	607a      	str	r2, [r7, #4]
 801be3c:	603b      	str	r3, [r7, #0]
 801be3e:	460b      	mov	r3, r1
 801be40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be42:	2300      	movs	r3, #0
 801be44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be46:	2300      	movs	r3, #0
 801be48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801be50:	7af9      	ldrb	r1, [r7, #11]
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	687a      	ldr	r2, [r7, #4]
 801be56:	f7eb ffe6 	bl	8007e26 <HAL_PCD_EP_Receive>
 801be5a:	4603      	mov	r3, r0
 801be5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801be5e:	7dfb      	ldrb	r3, [r7, #23]
 801be60:	4618      	mov	r0, r3
 801be62:	f000 f833 	bl	801becc <USBD_Get_USB_Status>
 801be66:	4603      	mov	r3, r0
 801be68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801be6a:	7dbb      	ldrb	r3, [r7, #22]
}
 801be6c:	4618      	mov	r0, r3
 801be6e:	3718      	adds	r7, #24
 801be70:	46bd      	mov	sp, r7
 801be72:	bd80      	pop	{r7, pc}

0801be74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801be74:	b580      	push	{r7, lr}
 801be76:	b082      	sub	sp, #8
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	460b      	mov	r3, r1
 801be7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801be86:	78fa      	ldrb	r2, [r7, #3]
 801be88:	4611      	mov	r1, r2
 801be8a:	4618      	mov	r0, r3
 801be8c:	f7ec f816 	bl	8007ebc <HAL_PCD_EP_GetRxCount>
 801be90:	4603      	mov	r3, r0
}
 801be92:	4618      	mov	r0, r3
 801be94:	3708      	adds	r7, #8
 801be96:	46bd      	mov	sp, r7
 801be98:	bd80      	pop	{r7, pc}
	...

0801be9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801be9c:	b480      	push	{r7}
 801be9e:	b083      	sub	sp, #12
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bea4:	4b03      	ldr	r3, [pc, #12]	@ (801beb4 <USBD_static_malloc+0x18>)
}
 801bea6:	4618      	mov	r0, r3
 801bea8:	370c      	adds	r7, #12
 801beaa:	46bd      	mov	sp, r7
 801beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb0:	4770      	bx	lr
 801beb2:	bf00      	nop
 801beb4:	20002e28 	.word	0x20002e28

0801beb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801beb8:	b480      	push	{r7}
 801beba:	b083      	sub	sp, #12
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]

}
 801bec0:	bf00      	nop
 801bec2:	370c      	adds	r7, #12
 801bec4:	46bd      	mov	sp, r7
 801bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beca:	4770      	bx	lr

0801becc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801becc:	b480      	push	{r7}
 801bece:	b085      	sub	sp, #20
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	4603      	mov	r3, r0
 801bed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bed6:	2300      	movs	r3, #0
 801bed8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801beda:	79fb      	ldrb	r3, [r7, #7]
 801bedc:	2b03      	cmp	r3, #3
 801bede:	d817      	bhi.n	801bf10 <USBD_Get_USB_Status+0x44>
 801bee0:	a201      	add	r2, pc, #4	@ (adr r2, 801bee8 <USBD_Get_USB_Status+0x1c>)
 801bee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bee6:	bf00      	nop
 801bee8:	0801bef9 	.word	0x0801bef9
 801beec:	0801beff 	.word	0x0801beff
 801bef0:	0801bf05 	.word	0x0801bf05
 801bef4:	0801bf0b 	.word	0x0801bf0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801bef8:	2300      	movs	r3, #0
 801befa:	73fb      	strb	r3, [r7, #15]
    break;
 801befc:	e00b      	b.n	801bf16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801befe:	2303      	movs	r3, #3
 801bf00:	73fb      	strb	r3, [r7, #15]
    break;
 801bf02:	e008      	b.n	801bf16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801bf04:	2301      	movs	r3, #1
 801bf06:	73fb      	strb	r3, [r7, #15]
    break;
 801bf08:	e005      	b.n	801bf16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801bf0a:	2303      	movs	r3, #3
 801bf0c:	73fb      	strb	r3, [r7, #15]
    break;
 801bf0e:	e002      	b.n	801bf16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801bf10:	2303      	movs	r3, #3
 801bf12:	73fb      	strb	r3, [r7, #15]
    break;
 801bf14:	bf00      	nop
  }
  return usb_status;
 801bf16:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf18:	4618      	mov	r0, r3
 801bf1a:	3714      	adds	r7, #20
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf22:	4770      	bx	lr

0801bf24 <atoi>:
 801bf24:	220a      	movs	r2, #10
 801bf26:	2100      	movs	r1, #0
 801bf28:	f000 b932 	b.w	801c190 <strtol>

0801bf2c <malloc>:
 801bf2c:	4b02      	ldr	r3, [pc, #8]	@ (801bf38 <malloc+0xc>)
 801bf2e:	4601      	mov	r1, r0
 801bf30:	6818      	ldr	r0, [r3, #0]
 801bf32:	f000 b825 	b.w	801bf80 <_malloc_r>
 801bf36:	bf00      	nop
 801bf38:	20000170 	.word	0x20000170

0801bf3c <sbrk_aligned>:
 801bf3c:	b570      	push	{r4, r5, r6, lr}
 801bf3e:	4e0f      	ldr	r6, [pc, #60]	@ (801bf7c <sbrk_aligned+0x40>)
 801bf40:	460c      	mov	r4, r1
 801bf42:	6831      	ldr	r1, [r6, #0]
 801bf44:	4605      	mov	r5, r0
 801bf46:	b911      	cbnz	r1, 801bf4e <sbrk_aligned+0x12>
 801bf48:	f001 fb2e 	bl	801d5a8 <_sbrk_r>
 801bf4c:	6030      	str	r0, [r6, #0]
 801bf4e:	4621      	mov	r1, r4
 801bf50:	4628      	mov	r0, r5
 801bf52:	f001 fb29 	bl	801d5a8 <_sbrk_r>
 801bf56:	1c43      	adds	r3, r0, #1
 801bf58:	d103      	bne.n	801bf62 <sbrk_aligned+0x26>
 801bf5a:	f04f 34ff 	mov.w	r4, #4294967295
 801bf5e:	4620      	mov	r0, r4
 801bf60:	bd70      	pop	{r4, r5, r6, pc}
 801bf62:	1cc4      	adds	r4, r0, #3
 801bf64:	f024 0403 	bic.w	r4, r4, #3
 801bf68:	42a0      	cmp	r0, r4
 801bf6a:	d0f8      	beq.n	801bf5e <sbrk_aligned+0x22>
 801bf6c:	1a21      	subs	r1, r4, r0
 801bf6e:	4628      	mov	r0, r5
 801bf70:	f001 fb1a 	bl	801d5a8 <_sbrk_r>
 801bf74:	3001      	adds	r0, #1
 801bf76:	d1f2      	bne.n	801bf5e <sbrk_aligned+0x22>
 801bf78:	e7ef      	b.n	801bf5a <sbrk_aligned+0x1e>
 801bf7a:	bf00      	nop
 801bf7c:	200036a0 	.word	0x200036a0

0801bf80 <_malloc_r>:
 801bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf84:	1ccd      	adds	r5, r1, #3
 801bf86:	f025 0503 	bic.w	r5, r5, #3
 801bf8a:	3508      	adds	r5, #8
 801bf8c:	2d0c      	cmp	r5, #12
 801bf8e:	bf38      	it	cc
 801bf90:	250c      	movcc	r5, #12
 801bf92:	2d00      	cmp	r5, #0
 801bf94:	4606      	mov	r6, r0
 801bf96:	db01      	blt.n	801bf9c <_malloc_r+0x1c>
 801bf98:	42a9      	cmp	r1, r5
 801bf9a:	d904      	bls.n	801bfa6 <_malloc_r+0x26>
 801bf9c:	230c      	movs	r3, #12
 801bf9e:	6033      	str	r3, [r6, #0]
 801bfa0:	2000      	movs	r0, #0
 801bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c07c <_malloc_r+0xfc>
 801bfaa:	f000 f869 	bl	801c080 <__malloc_lock>
 801bfae:	f8d8 3000 	ldr.w	r3, [r8]
 801bfb2:	461c      	mov	r4, r3
 801bfb4:	bb44      	cbnz	r4, 801c008 <_malloc_r+0x88>
 801bfb6:	4629      	mov	r1, r5
 801bfb8:	4630      	mov	r0, r6
 801bfba:	f7ff ffbf 	bl	801bf3c <sbrk_aligned>
 801bfbe:	1c43      	adds	r3, r0, #1
 801bfc0:	4604      	mov	r4, r0
 801bfc2:	d158      	bne.n	801c076 <_malloc_r+0xf6>
 801bfc4:	f8d8 4000 	ldr.w	r4, [r8]
 801bfc8:	4627      	mov	r7, r4
 801bfca:	2f00      	cmp	r7, #0
 801bfcc:	d143      	bne.n	801c056 <_malloc_r+0xd6>
 801bfce:	2c00      	cmp	r4, #0
 801bfd0:	d04b      	beq.n	801c06a <_malloc_r+0xea>
 801bfd2:	6823      	ldr	r3, [r4, #0]
 801bfd4:	4639      	mov	r1, r7
 801bfd6:	4630      	mov	r0, r6
 801bfd8:	eb04 0903 	add.w	r9, r4, r3
 801bfdc:	f001 fae4 	bl	801d5a8 <_sbrk_r>
 801bfe0:	4581      	cmp	r9, r0
 801bfe2:	d142      	bne.n	801c06a <_malloc_r+0xea>
 801bfe4:	6821      	ldr	r1, [r4, #0]
 801bfe6:	1a6d      	subs	r5, r5, r1
 801bfe8:	4629      	mov	r1, r5
 801bfea:	4630      	mov	r0, r6
 801bfec:	f7ff ffa6 	bl	801bf3c <sbrk_aligned>
 801bff0:	3001      	adds	r0, #1
 801bff2:	d03a      	beq.n	801c06a <_malloc_r+0xea>
 801bff4:	6823      	ldr	r3, [r4, #0]
 801bff6:	442b      	add	r3, r5
 801bff8:	6023      	str	r3, [r4, #0]
 801bffa:	f8d8 3000 	ldr.w	r3, [r8]
 801bffe:	685a      	ldr	r2, [r3, #4]
 801c000:	bb62      	cbnz	r2, 801c05c <_malloc_r+0xdc>
 801c002:	f8c8 7000 	str.w	r7, [r8]
 801c006:	e00f      	b.n	801c028 <_malloc_r+0xa8>
 801c008:	6822      	ldr	r2, [r4, #0]
 801c00a:	1b52      	subs	r2, r2, r5
 801c00c:	d420      	bmi.n	801c050 <_malloc_r+0xd0>
 801c00e:	2a0b      	cmp	r2, #11
 801c010:	d917      	bls.n	801c042 <_malloc_r+0xc2>
 801c012:	1961      	adds	r1, r4, r5
 801c014:	42a3      	cmp	r3, r4
 801c016:	6025      	str	r5, [r4, #0]
 801c018:	bf18      	it	ne
 801c01a:	6059      	strne	r1, [r3, #4]
 801c01c:	6863      	ldr	r3, [r4, #4]
 801c01e:	bf08      	it	eq
 801c020:	f8c8 1000 	streq.w	r1, [r8]
 801c024:	5162      	str	r2, [r4, r5]
 801c026:	604b      	str	r3, [r1, #4]
 801c028:	4630      	mov	r0, r6
 801c02a:	f000 f82f 	bl	801c08c <__malloc_unlock>
 801c02e:	f104 000b 	add.w	r0, r4, #11
 801c032:	1d23      	adds	r3, r4, #4
 801c034:	f020 0007 	bic.w	r0, r0, #7
 801c038:	1ac2      	subs	r2, r0, r3
 801c03a:	bf1c      	itt	ne
 801c03c:	1a1b      	subne	r3, r3, r0
 801c03e:	50a3      	strne	r3, [r4, r2]
 801c040:	e7af      	b.n	801bfa2 <_malloc_r+0x22>
 801c042:	6862      	ldr	r2, [r4, #4]
 801c044:	42a3      	cmp	r3, r4
 801c046:	bf0c      	ite	eq
 801c048:	f8c8 2000 	streq.w	r2, [r8]
 801c04c:	605a      	strne	r2, [r3, #4]
 801c04e:	e7eb      	b.n	801c028 <_malloc_r+0xa8>
 801c050:	4623      	mov	r3, r4
 801c052:	6864      	ldr	r4, [r4, #4]
 801c054:	e7ae      	b.n	801bfb4 <_malloc_r+0x34>
 801c056:	463c      	mov	r4, r7
 801c058:	687f      	ldr	r7, [r7, #4]
 801c05a:	e7b6      	b.n	801bfca <_malloc_r+0x4a>
 801c05c:	461a      	mov	r2, r3
 801c05e:	685b      	ldr	r3, [r3, #4]
 801c060:	42a3      	cmp	r3, r4
 801c062:	d1fb      	bne.n	801c05c <_malloc_r+0xdc>
 801c064:	2300      	movs	r3, #0
 801c066:	6053      	str	r3, [r2, #4]
 801c068:	e7de      	b.n	801c028 <_malloc_r+0xa8>
 801c06a:	230c      	movs	r3, #12
 801c06c:	6033      	str	r3, [r6, #0]
 801c06e:	4630      	mov	r0, r6
 801c070:	f000 f80c 	bl	801c08c <__malloc_unlock>
 801c074:	e794      	b.n	801bfa0 <_malloc_r+0x20>
 801c076:	6005      	str	r5, [r0, #0]
 801c078:	e7d6      	b.n	801c028 <_malloc_r+0xa8>
 801c07a:	bf00      	nop
 801c07c:	200036a4 	.word	0x200036a4

0801c080 <__malloc_lock>:
 801c080:	4801      	ldr	r0, [pc, #4]	@ (801c088 <__malloc_lock+0x8>)
 801c082:	f001 bade 	b.w	801d642 <__retarget_lock_acquire_recursive>
 801c086:	bf00      	nop
 801c088:	200037e8 	.word	0x200037e8

0801c08c <__malloc_unlock>:
 801c08c:	4801      	ldr	r0, [pc, #4]	@ (801c094 <__malloc_unlock+0x8>)
 801c08e:	f001 bad9 	b.w	801d644 <__retarget_lock_release_recursive>
 801c092:	bf00      	nop
 801c094:	200037e8 	.word	0x200037e8

0801c098 <_strtol_l.constprop.0>:
 801c098:	2b24      	cmp	r3, #36	@ 0x24
 801c09a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c09e:	4686      	mov	lr, r0
 801c0a0:	4690      	mov	r8, r2
 801c0a2:	d801      	bhi.n	801c0a8 <_strtol_l.constprop.0+0x10>
 801c0a4:	2b01      	cmp	r3, #1
 801c0a6:	d106      	bne.n	801c0b6 <_strtol_l.constprop.0+0x1e>
 801c0a8:	f001 faa0 	bl	801d5ec <__errno>
 801c0ac:	2316      	movs	r3, #22
 801c0ae:	6003      	str	r3, [r0, #0]
 801c0b0:	2000      	movs	r0, #0
 801c0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0b6:	4834      	ldr	r0, [pc, #208]	@ (801c188 <_strtol_l.constprop.0+0xf0>)
 801c0b8:	460d      	mov	r5, r1
 801c0ba:	462a      	mov	r2, r5
 801c0bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c0c0:	5d06      	ldrb	r6, [r0, r4]
 801c0c2:	f016 0608 	ands.w	r6, r6, #8
 801c0c6:	d1f8      	bne.n	801c0ba <_strtol_l.constprop.0+0x22>
 801c0c8:	2c2d      	cmp	r4, #45	@ 0x2d
 801c0ca:	d12d      	bne.n	801c128 <_strtol_l.constprop.0+0x90>
 801c0cc:	782c      	ldrb	r4, [r5, #0]
 801c0ce:	2601      	movs	r6, #1
 801c0d0:	1c95      	adds	r5, r2, #2
 801c0d2:	f033 0210 	bics.w	r2, r3, #16
 801c0d6:	d109      	bne.n	801c0ec <_strtol_l.constprop.0+0x54>
 801c0d8:	2c30      	cmp	r4, #48	@ 0x30
 801c0da:	d12a      	bne.n	801c132 <_strtol_l.constprop.0+0x9a>
 801c0dc:	782a      	ldrb	r2, [r5, #0]
 801c0de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c0e2:	2a58      	cmp	r2, #88	@ 0x58
 801c0e4:	d125      	bne.n	801c132 <_strtol_l.constprop.0+0x9a>
 801c0e6:	786c      	ldrb	r4, [r5, #1]
 801c0e8:	2310      	movs	r3, #16
 801c0ea:	3502      	adds	r5, #2
 801c0ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801c0f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c0f4:	2200      	movs	r2, #0
 801c0f6:	fbbc f9f3 	udiv	r9, ip, r3
 801c0fa:	4610      	mov	r0, r2
 801c0fc:	fb03 ca19 	mls	sl, r3, r9, ip
 801c100:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801c104:	2f09      	cmp	r7, #9
 801c106:	d81b      	bhi.n	801c140 <_strtol_l.constprop.0+0xa8>
 801c108:	463c      	mov	r4, r7
 801c10a:	42a3      	cmp	r3, r4
 801c10c:	dd27      	ble.n	801c15e <_strtol_l.constprop.0+0xc6>
 801c10e:	1c57      	adds	r7, r2, #1
 801c110:	d007      	beq.n	801c122 <_strtol_l.constprop.0+0x8a>
 801c112:	4581      	cmp	r9, r0
 801c114:	d320      	bcc.n	801c158 <_strtol_l.constprop.0+0xc0>
 801c116:	d101      	bne.n	801c11c <_strtol_l.constprop.0+0x84>
 801c118:	45a2      	cmp	sl, r4
 801c11a:	db1d      	blt.n	801c158 <_strtol_l.constprop.0+0xc0>
 801c11c:	fb00 4003 	mla	r0, r0, r3, r4
 801c120:	2201      	movs	r2, #1
 801c122:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c126:	e7eb      	b.n	801c100 <_strtol_l.constprop.0+0x68>
 801c128:	2c2b      	cmp	r4, #43	@ 0x2b
 801c12a:	bf04      	itt	eq
 801c12c:	782c      	ldrbeq	r4, [r5, #0]
 801c12e:	1c95      	addeq	r5, r2, #2
 801c130:	e7cf      	b.n	801c0d2 <_strtol_l.constprop.0+0x3a>
 801c132:	2b00      	cmp	r3, #0
 801c134:	d1da      	bne.n	801c0ec <_strtol_l.constprop.0+0x54>
 801c136:	2c30      	cmp	r4, #48	@ 0x30
 801c138:	bf0c      	ite	eq
 801c13a:	2308      	moveq	r3, #8
 801c13c:	230a      	movne	r3, #10
 801c13e:	e7d5      	b.n	801c0ec <_strtol_l.constprop.0+0x54>
 801c140:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801c144:	2f19      	cmp	r7, #25
 801c146:	d801      	bhi.n	801c14c <_strtol_l.constprop.0+0xb4>
 801c148:	3c37      	subs	r4, #55	@ 0x37
 801c14a:	e7de      	b.n	801c10a <_strtol_l.constprop.0+0x72>
 801c14c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801c150:	2f19      	cmp	r7, #25
 801c152:	d804      	bhi.n	801c15e <_strtol_l.constprop.0+0xc6>
 801c154:	3c57      	subs	r4, #87	@ 0x57
 801c156:	e7d8      	b.n	801c10a <_strtol_l.constprop.0+0x72>
 801c158:	f04f 32ff 	mov.w	r2, #4294967295
 801c15c:	e7e1      	b.n	801c122 <_strtol_l.constprop.0+0x8a>
 801c15e:	1c53      	adds	r3, r2, #1
 801c160:	d108      	bne.n	801c174 <_strtol_l.constprop.0+0xdc>
 801c162:	2322      	movs	r3, #34	@ 0x22
 801c164:	f8ce 3000 	str.w	r3, [lr]
 801c168:	4660      	mov	r0, ip
 801c16a:	f1b8 0f00 	cmp.w	r8, #0
 801c16e:	d0a0      	beq.n	801c0b2 <_strtol_l.constprop.0+0x1a>
 801c170:	1e69      	subs	r1, r5, #1
 801c172:	e006      	b.n	801c182 <_strtol_l.constprop.0+0xea>
 801c174:	b106      	cbz	r6, 801c178 <_strtol_l.constprop.0+0xe0>
 801c176:	4240      	negs	r0, r0
 801c178:	f1b8 0f00 	cmp.w	r8, #0
 801c17c:	d099      	beq.n	801c0b2 <_strtol_l.constprop.0+0x1a>
 801c17e:	2a00      	cmp	r2, #0
 801c180:	d1f6      	bne.n	801c170 <_strtol_l.constprop.0+0xd8>
 801c182:	f8c8 1000 	str.w	r1, [r8]
 801c186:	e794      	b.n	801c0b2 <_strtol_l.constprop.0+0x1a>
 801c188:	08023035 	.word	0x08023035

0801c18c <_strtol_r>:
 801c18c:	f7ff bf84 	b.w	801c098 <_strtol_l.constprop.0>

0801c190 <strtol>:
 801c190:	4613      	mov	r3, r2
 801c192:	460a      	mov	r2, r1
 801c194:	4601      	mov	r1, r0
 801c196:	4802      	ldr	r0, [pc, #8]	@ (801c1a0 <strtol+0x10>)
 801c198:	6800      	ldr	r0, [r0, #0]
 801c19a:	f7ff bf7d 	b.w	801c098 <_strtol_l.constprop.0>
 801c19e:	bf00      	nop
 801c1a0:	20000170 	.word	0x20000170

0801c1a4 <__cvt>:
 801c1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a8:	ec57 6b10 	vmov	r6, r7, d0
 801c1ac:	2f00      	cmp	r7, #0
 801c1ae:	460c      	mov	r4, r1
 801c1b0:	4619      	mov	r1, r3
 801c1b2:	463b      	mov	r3, r7
 801c1b4:	bfbb      	ittet	lt
 801c1b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801c1ba:	461f      	movlt	r7, r3
 801c1bc:	2300      	movge	r3, #0
 801c1be:	232d      	movlt	r3, #45	@ 0x2d
 801c1c0:	700b      	strb	r3, [r1, #0]
 801c1c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801c1c8:	4691      	mov	r9, r2
 801c1ca:	f023 0820 	bic.w	r8, r3, #32
 801c1ce:	bfbc      	itt	lt
 801c1d0:	4632      	movlt	r2, r6
 801c1d2:	4616      	movlt	r6, r2
 801c1d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c1d8:	d005      	beq.n	801c1e6 <__cvt+0x42>
 801c1da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c1de:	d100      	bne.n	801c1e2 <__cvt+0x3e>
 801c1e0:	3401      	adds	r4, #1
 801c1e2:	2102      	movs	r1, #2
 801c1e4:	e000      	b.n	801c1e8 <__cvt+0x44>
 801c1e6:	2103      	movs	r1, #3
 801c1e8:	ab03      	add	r3, sp, #12
 801c1ea:	9301      	str	r3, [sp, #4]
 801c1ec:	ab02      	add	r3, sp, #8
 801c1ee:	9300      	str	r3, [sp, #0]
 801c1f0:	ec47 6b10 	vmov	d0, r6, r7
 801c1f4:	4653      	mov	r3, sl
 801c1f6:	4622      	mov	r2, r4
 801c1f8:	f001 faea 	bl	801d7d0 <_dtoa_r>
 801c1fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c200:	4605      	mov	r5, r0
 801c202:	d119      	bne.n	801c238 <__cvt+0x94>
 801c204:	f019 0f01 	tst.w	r9, #1
 801c208:	d00e      	beq.n	801c228 <__cvt+0x84>
 801c20a:	eb00 0904 	add.w	r9, r0, r4
 801c20e:	2200      	movs	r2, #0
 801c210:	2300      	movs	r3, #0
 801c212:	4630      	mov	r0, r6
 801c214:	4639      	mov	r1, r7
 801c216:	f7e4 fc6f 	bl	8000af8 <__aeabi_dcmpeq>
 801c21a:	b108      	cbz	r0, 801c220 <__cvt+0x7c>
 801c21c:	f8cd 900c 	str.w	r9, [sp, #12]
 801c220:	2230      	movs	r2, #48	@ 0x30
 801c222:	9b03      	ldr	r3, [sp, #12]
 801c224:	454b      	cmp	r3, r9
 801c226:	d31e      	bcc.n	801c266 <__cvt+0xc2>
 801c228:	9b03      	ldr	r3, [sp, #12]
 801c22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c22c:	1b5b      	subs	r3, r3, r5
 801c22e:	4628      	mov	r0, r5
 801c230:	6013      	str	r3, [r2, #0]
 801c232:	b004      	add	sp, #16
 801c234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c23c:	eb00 0904 	add.w	r9, r0, r4
 801c240:	d1e5      	bne.n	801c20e <__cvt+0x6a>
 801c242:	7803      	ldrb	r3, [r0, #0]
 801c244:	2b30      	cmp	r3, #48	@ 0x30
 801c246:	d10a      	bne.n	801c25e <__cvt+0xba>
 801c248:	2200      	movs	r2, #0
 801c24a:	2300      	movs	r3, #0
 801c24c:	4630      	mov	r0, r6
 801c24e:	4639      	mov	r1, r7
 801c250:	f7e4 fc52 	bl	8000af8 <__aeabi_dcmpeq>
 801c254:	b918      	cbnz	r0, 801c25e <__cvt+0xba>
 801c256:	f1c4 0401 	rsb	r4, r4, #1
 801c25a:	f8ca 4000 	str.w	r4, [sl]
 801c25e:	f8da 3000 	ldr.w	r3, [sl]
 801c262:	4499      	add	r9, r3
 801c264:	e7d3      	b.n	801c20e <__cvt+0x6a>
 801c266:	1c59      	adds	r1, r3, #1
 801c268:	9103      	str	r1, [sp, #12]
 801c26a:	701a      	strb	r2, [r3, #0]
 801c26c:	e7d9      	b.n	801c222 <__cvt+0x7e>

0801c26e <__exponent>:
 801c26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c270:	2900      	cmp	r1, #0
 801c272:	bfba      	itte	lt
 801c274:	4249      	neglt	r1, r1
 801c276:	232d      	movlt	r3, #45	@ 0x2d
 801c278:	232b      	movge	r3, #43	@ 0x2b
 801c27a:	2909      	cmp	r1, #9
 801c27c:	7002      	strb	r2, [r0, #0]
 801c27e:	7043      	strb	r3, [r0, #1]
 801c280:	dd29      	ble.n	801c2d6 <__exponent+0x68>
 801c282:	f10d 0307 	add.w	r3, sp, #7
 801c286:	461d      	mov	r5, r3
 801c288:	270a      	movs	r7, #10
 801c28a:	461a      	mov	r2, r3
 801c28c:	fbb1 f6f7 	udiv	r6, r1, r7
 801c290:	fb07 1416 	mls	r4, r7, r6, r1
 801c294:	3430      	adds	r4, #48	@ 0x30
 801c296:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c29a:	460c      	mov	r4, r1
 801c29c:	2c63      	cmp	r4, #99	@ 0x63
 801c29e:	f103 33ff 	add.w	r3, r3, #4294967295
 801c2a2:	4631      	mov	r1, r6
 801c2a4:	dcf1      	bgt.n	801c28a <__exponent+0x1c>
 801c2a6:	3130      	adds	r1, #48	@ 0x30
 801c2a8:	1e94      	subs	r4, r2, #2
 801c2aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c2ae:	1c41      	adds	r1, r0, #1
 801c2b0:	4623      	mov	r3, r4
 801c2b2:	42ab      	cmp	r3, r5
 801c2b4:	d30a      	bcc.n	801c2cc <__exponent+0x5e>
 801c2b6:	f10d 0309 	add.w	r3, sp, #9
 801c2ba:	1a9b      	subs	r3, r3, r2
 801c2bc:	42ac      	cmp	r4, r5
 801c2be:	bf88      	it	hi
 801c2c0:	2300      	movhi	r3, #0
 801c2c2:	3302      	adds	r3, #2
 801c2c4:	4403      	add	r3, r0
 801c2c6:	1a18      	subs	r0, r3, r0
 801c2c8:	b003      	add	sp, #12
 801c2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c2d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c2d4:	e7ed      	b.n	801c2b2 <__exponent+0x44>
 801c2d6:	2330      	movs	r3, #48	@ 0x30
 801c2d8:	3130      	adds	r1, #48	@ 0x30
 801c2da:	7083      	strb	r3, [r0, #2]
 801c2dc:	70c1      	strb	r1, [r0, #3]
 801c2de:	1d03      	adds	r3, r0, #4
 801c2e0:	e7f1      	b.n	801c2c6 <__exponent+0x58>
	...

0801c2e4 <_printf_float>:
 801c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e8:	b08d      	sub	sp, #52	@ 0x34
 801c2ea:	460c      	mov	r4, r1
 801c2ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c2f0:	4616      	mov	r6, r2
 801c2f2:	461f      	mov	r7, r3
 801c2f4:	4605      	mov	r5, r0
 801c2f6:	f001 f91f 	bl	801d538 <_localeconv_r>
 801c2fa:	6803      	ldr	r3, [r0, #0]
 801c2fc:	9304      	str	r3, [sp, #16]
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7e3 ffce 	bl	80002a0 <strlen>
 801c304:	2300      	movs	r3, #0
 801c306:	930a      	str	r3, [sp, #40]	@ 0x28
 801c308:	f8d8 3000 	ldr.w	r3, [r8]
 801c30c:	9005      	str	r0, [sp, #20]
 801c30e:	3307      	adds	r3, #7
 801c310:	f023 0307 	bic.w	r3, r3, #7
 801c314:	f103 0208 	add.w	r2, r3, #8
 801c318:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c31c:	f8d4 b000 	ldr.w	fp, [r4]
 801c320:	f8c8 2000 	str.w	r2, [r8]
 801c324:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c32c:	9307      	str	r3, [sp, #28]
 801c32e:	f8cd 8018 	str.w	r8, [sp, #24]
 801c332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c33a:	4b9c      	ldr	r3, [pc, #624]	@ (801c5ac <_printf_float+0x2c8>)
 801c33c:	f04f 32ff 	mov.w	r2, #4294967295
 801c340:	f7e4 fc0c 	bl	8000b5c <__aeabi_dcmpun>
 801c344:	bb70      	cbnz	r0, 801c3a4 <_printf_float+0xc0>
 801c346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c34a:	4b98      	ldr	r3, [pc, #608]	@ (801c5ac <_printf_float+0x2c8>)
 801c34c:	f04f 32ff 	mov.w	r2, #4294967295
 801c350:	f7e4 fbe6 	bl	8000b20 <__aeabi_dcmple>
 801c354:	bb30      	cbnz	r0, 801c3a4 <_printf_float+0xc0>
 801c356:	2200      	movs	r2, #0
 801c358:	2300      	movs	r3, #0
 801c35a:	4640      	mov	r0, r8
 801c35c:	4649      	mov	r1, r9
 801c35e:	f7e4 fbd5 	bl	8000b0c <__aeabi_dcmplt>
 801c362:	b110      	cbz	r0, 801c36a <_printf_float+0x86>
 801c364:	232d      	movs	r3, #45	@ 0x2d
 801c366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c36a:	4a91      	ldr	r2, [pc, #580]	@ (801c5b0 <_printf_float+0x2cc>)
 801c36c:	4b91      	ldr	r3, [pc, #580]	@ (801c5b4 <_printf_float+0x2d0>)
 801c36e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c372:	bf94      	ite	ls
 801c374:	4690      	movls	r8, r2
 801c376:	4698      	movhi	r8, r3
 801c378:	2303      	movs	r3, #3
 801c37a:	6123      	str	r3, [r4, #16]
 801c37c:	f02b 0304 	bic.w	r3, fp, #4
 801c380:	6023      	str	r3, [r4, #0]
 801c382:	f04f 0900 	mov.w	r9, #0
 801c386:	9700      	str	r7, [sp, #0]
 801c388:	4633      	mov	r3, r6
 801c38a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801c38c:	4621      	mov	r1, r4
 801c38e:	4628      	mov	r0, r5
 801c390:	f000 f9d2 	bl	801c738 <_printf_common>
 801c394:	3001      	adds	r0, #1
 801c396:	f040 808d 	bne.w	801c4b4 <_printf_float+0x1d0>
 801c39a:	f04f 30ff 	mov.w	r0, #4294967295
 801c39e:	b00d      	add	sp, #52	@ 0x34
 801c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a4:	4642      	mov	r2, r8
 801c3a6:	464b      	mov	r3, r9
 801c3a8:	4640      	mov	r0, r8
 801c3aa:	4649      	mov	r1, r9
 801c3ac:	f7e4 fbd6 	bl	8000b5c <__aeabi_dcmpun>
 801c3b0:	b140      	cbz	r0, 801c3c4 <_printf_float+0xe0>
 801c3b2:	464b      	mov	r3, r9
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	bfbc      	itt	lt
 801c3b8:	232d      	movlt	r3, #45	@ 0x2d
 801c3ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c3be:	4a7e      	ldr	r2, [pc, #504]	@ (801c5b8 <_printf_float+0x2d4>)
 801c3c0:	4b7e      	ldr	r3, [pc, #504]	@ (801c5bc <_printf_float+0x2d8>)
 801c3c2:	e7d4      	b.n	801c36e <_printf_float+0x8a>
 801c3c4:	6863      	ldr	r3, [r4, #4]
 801c3c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801c3ca:	9206      	str	r2, [sp, #24]
 801c3cc:	1c5a      	adds	r2, r3, #1
 801c3ce:	d13b      	bne.n	801c448 <_printf_float+0x164>
 801c3d0:	2306      	movs	r3, #6
 801c3d2:	6063      	str	r3, [r4, #4]
 801c3d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801c3d8:	2300      	movs	r3, #0
 801c3da:	6022      	str	r2, [r4, #0]
 801c3dc:	9303      	str	r3, [sp, #12]
 801c3de:	ab0a      	add	r3, sp, #40	@ 0x28
 801c3e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c3e4:	ab09      	add	r3, sp, #36	@ 0x24
 801c3e6:	9300      	str	r3, [sp, #0]
 801c3e8:	6861      	ldr	r1, [r4, #4]
 801c3ea:	ec49 8b10 	vmov	d0, r8, r9
 801c3ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801c3f2:	4628      	mov	r0, r5
 801c3f4:	f7ff fed6 	bl	801c1a4 <__cvt>
 801c3f8:	9b06      	ldr	r3, [sp, #24]
 801c3fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3fc:	2b47      	cmp	r3, #71	@ 0x47
 801c3fe:	4680      	mov	r8, r0
 801c400:	d129      	bne.n	801c456 <_printf_float+0x172>
 801c402:	1cc8      	adds	r0, r1, #3
 801c404:	db02      	blt.n	801c40c <_printf_float+0x128>
 801c406:	6863      	ldr	r3, [r4, #4]
 801c408:	4299      	cmp	r1, r3
 801c40a:	dd41      	ble.n	801c490 <_printf_float+0x1ac>
 801c40c:	f1aa 0a02 	sub.w	sl, sl, #2
 801c410:	fa5f fa8a 	uxtb.w	sl, sl
 801c414:	3901      	subs	r1, #1
 801c416:	4652      	mov	r2, sl
 801c418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c41c:	9109      	str	r1, [sp, #36]	@ 0x24
 801c41e:	f7ff ff26 	bl	801c26e <__exponent>
 801c422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c424:	1813      	adds	r3, r2, r0
 801c426:	2a01      	cmp	r2, #1
 801c428:	4681      	mov	r9, r0
 801c42a:	6123      	str	r3, [r4, #16]
 801c42c:	dc02      	bgt.n	801c434 <_printf_float+0x150>
 801c42e:	6822      	ldr	r2, [r4, #0]
 801c430:	07d2      	lsls	r2, r2, #31
 801c432:	d501      	bpl.n	801c438 <_printf_float+0x154>
 801c434:	3301      	adds	r3, #1
 801c436:	6123      	str	r3, [r4, #16]
 801c438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d0a2      	beq.n	801c386 <_printf_float+0xa2>
 801c440:	232d      	movs	r3, #45	@ 0x2d
 801c442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c446:	e79e      	b.n	801c386 <_printf_float+0xa2>
 801c448:	9a06      	ldr	r2, [sp, #24]
 801c44a:	2a47      	cmp	r2, #71	@ 0x47
 801c44c:	d1c2      	bne.n	801c3d4 <_printf_float+0xf0>
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d1c0      	bne.n	801c3d4 <_printf_float+0xf0>
 801c452:	2301      	movs	r3, #1
 801c454:	e7bd      	b.n	801c3d2 <_printf_float+0xee>
 801c456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c45a:	d9db      	bls.n	801c414 <_printf_float+0x130>
 801c45c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c460:	d118      	bne.n	801c494 <_printf_float+0x1b0>
 801c462:	2900      	cmp	r1, #0
 801c464:	6863      	ldr	r3, [r4, #4]
 801c466:	dd0b      	ble.n	801c480 <_printf_float+0x19c>
 801c468:	6121      	str	r1, [r4, #16]
 801c46a:	b913      	cbnz	r3, 801c472 <_printf_float+0x18e>
 801c46c:	6822      	ldr	r2, [r4, #0]
 801c46e:	07d0      	lsls	r0, r2, #31
 801c470:	d502      	bpl.n	801c478 <_printf_float+0x194>
 801c472:	3301      	adds	r3, #1
 801c474:	440b      	add	r3, r1
 801c476:	6123      	str	r3, [r4, #16]
 801c478:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c47a:	f04f 0900 	mov.w	r9, #0
 801c47e:	e7db      	b.n	801c438 <_printf_float+0x154>
 801c480:	b913      	cbnz	r3, 801c488 <_printf_float+0x1a4>
 801c482:	6822      	ldr	r2, [r4, #0]
 801c484:	07d2      	lsls	r2, r2, #31
 801c486:	d501      	bpl.n	801c48c <_printf_float+0x1a8>
 801c488:	3302      	adds	r3, #2
 801c48a:	e7f4      	b.n	801c476 <_printf_float+0x192>
 801c48c:	2301      	movs	r3, #1
 801c48e:	e7f2      	b.n	801c476 <_printf_float+0x192>
 801c490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c496:	4299      	cmp	r1, r3
 801c498:	db05      	blt.n	801c4a6 <_printf_float+0x1c2>
 801c49a:	6823      	ldr	r3, [r4, #0]
 801c49c:	6121      	str	r1, [r4, #16]
 801c49e:	07d8      	lsls	r0, r3, #31
 801c4a0:	d5ea      	bpl.n	801c478 <_printf_float+0x194>
 801c4a2:	1c4b      	adds	r3, r1, #1
 801c4a4:	e7e7      	b.n	801c476 <_printf_float+0x192>
 801c4a6:	2900      	cmp	r1, #0
 801c4a8:	bfd4      	ite	le
 801c4aa:	f1c1 0202 	rsble	r2, r1, #2
 801c4ae:	2201      	movgt	r2, #1
 801c4b0:	4413      	add	r3, r2
 801c4b2:	e7e0      	b.n	801c476 <_printf_float+0x192>
 801c4b4:	6823      	ldr	r3, [r4, #0]
 801c4b6:	055a      	lsls	r2, r3, #21
 801c4b8:	d407      	bmi.n	801c4ca <_printf_float+0x1e6>
 801c4ba:	6923      	ldr	r3, [r4, #16]
 801c4bc:	4642      	mov	r2, r8
 801c4be:	4631      	mov	r1, r6
 801c4c0:	4628      	mov	r0, r5
 801c4c2:	47b8      	blx	r7
 801c4c4:	3001      	adds	r0, #1
 801c4c6:	d12b      	bne.n	801c520 <_printf_float+0x23c>
 801c4c8:	e767      	b.n	801c39a <_printf_float+0xb6>
 801c4ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c4ce:	f240 80dd 	bls.w	801c68c <_printf_float+0x3a8>
 801c4d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c4d6:	2200      	movs	r2, #0
 801c4d8:	2300      	movs	r3, #0
 801c4da:	f7e4 fb0d 	bl	8000af8 <__aeabi_dcmpeq>
 801c4de:	2800      	cmp	r0, #0
 801c4e0:	d033      	beq.n	801c54a <_printf_float+0x266>
 801c4e2:	4a37      	ldr	r2, [pc, #220]	@ (801c5c0 <_printf_float+0x2dc>)
 801c4e4:	2301      	movs	r3, #1
 801c4e6:	4631      	mov	r1, r6
 801c4e8:	4628      	mov	r0, r5
 801c4ea:	47b8      	blx	r7
 801c4ec:	3001      	adds	r0, #1
 801c4ee:	f43f af54 	beq.w	801c39a <_printf_float+0xb6>
 801c4f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c4f6:	4543      	cmp	r3, r8
 801c4f8:	db02      	blt.n	801c500 <_printf_float+0x21c>
 801c4fa:	6823      	ldr	r3, [r4, #0]
 801c4fc:	07d8      	lsls	r0, r3, #31
 801c4fe:	d50f      	bpl.n	801c520 <_printf_float+0x23c>
 801c500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c504:	4631      	mov	r1, r6
 801c506:	4628      	mov	r0, r5
 801c508:	47b8      	blx	r7
 801c50a:	3001      	adds	r0, #1
 801c50c:	f43f af45 	beq.w	801c39a <_printf_float+0xb6>
 801c510:	f04f 0900 	mov.w	r9, #0
 801c514:	f108 38ff 	add.w	r8, r8, #4294967295
 801c518:	f104 0a1a 	add.w	sl, r4, #26
 801c51c:	45c8      	cmp	r8, r9
 801c51e:	dc09      	bgt.n	801c534 <_printf_float+0x250>
 801c520:	6823      	ldr	r3, [r4, #0]
 801c522:	079b      	lsls	r3, r3, #30
 801c524:	f100 8103 	bmi.w	801c72e <_printf_float+0x44a>
 801c528:	68e0      	ldr	r0, [r4, #12]
 801c52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c52c:	4298      	cmp	r0, r3
 801c52e:	bfb8      	it	lt
 801c530:	4618      	movlt	r0, r3
 801c532:	e734      	b.n	801c39e <_printf_float+0xba>
 801c534:	2301      	movs	r3, #1
 801c536:	4652      	mov	r2, sl
 801c538:	4631      	mov	r1, r6
 801c53a:	4628      	mov	r0, r5
 801c53c:	47b8      	blx	r7
 801c53e:	3001      	adds	r0, #1
 801c540:	f43f af2b 	beq.w	801c39a <_printf_float+0xb6>
 801c544:	f109 0901 	add.w	r9, r9, #1
 801c548:	e7e8      	b.n	801c51c <_printf_float+0x238>
 801c54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	dc39      	bgt.n	801c5c4 <_printf_float+0x2e0>
 801c550:	4a1b      	ldr	r2, [pc, #108]	@ (801c5c0 <_printf_float+0x2dc>)
 801c552:	2301      	movs	r3, #1
 801c554:	4631      	mov	r1, r6
 801c556:	4628      	mov	r0, r5
 801c558:	47b8      	blx	r7
 801c55a:	3001      	adds	r0, #1
 801c55c:	f43f af1d 	beq.w	801c39a <_printf_float+0xb6>
 801c560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c564:	ea59 0303 	orrs.w	r3, r9, r3
 801c568:	d102      	bne.n	801c570 <_printf_float+0x28c>
 801c56a:	6823      	ldr	r3, [r4, #0]
 801c56c:	07d9      	lsls	r1, r3, #31
 801c56e:	d5d7      	bpl.n	801c520 <_printf_float+0x23c>
 801c570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c574:	4631      	mov	r1, r6
 801c576:	4628      	mov	r0, r5
 801c578:	47b8      	blx	r7
 801c57a:	3001      	adds	r0, #1
 801c57c:	f43f af0d 	beq.w	801c39a <_printf_float+0xb6>
 801c580:	f04f 0a00 	mov.w	sl, #0
 801c584:	f104 0b1a 	add.w	fp, r4, #26
 801c588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c58a:	425b      	negs	r3, r3
 801c58c:	4553      	cmp	r3, sl
 801c58e:	dc01      	bgt.n	801c594 <_printf_float+0x2b0>
 801c590:	464b      	mov	r3, r9
 801c592:	e793      	b.n	801c4bc <_printf_float+0x1d8>
 801c594:	2301      	movs	r3, #1
 801c596:	465a      	mov	r2, fp
 801c598:	4631      	mov	r1, r6
 801c59a:	4628      	mov	r0, r5
 801c59c:	47b8      	blx	r7
 801c59e:	3001      	adds	r0, #1
 801c5a0:	f43f aefb 	beq.w	801c39a <_printf_float+0xb6>
 801c5a4:	f10a 0a01 	add.w	sl, sl, #1
 801c5a8:	e7ee      	b.n	801c588 <_printf_float+0x2a4>
 801c5aa:	bf00      	nop
 801c5ac:	7fefffff 	.word	0x7fefffff
 801c5b0:	08023135 	.word	0x08023135
 801c5b4:	08023139 	.word	0x08023139
 801c5b8:	0802313d 	.word	0x0802313d
 801c5bc:	08023141 	.word	0x08023141
 801c5c0:	08023145 	.word	0x08023145
 801c5c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c5c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c5ca:	4553      	cmp	r3, sl
 801c5cc:	bfa8      	it	ge
 801c5ce:	4653      	movge	r3, sl
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	4699      	mov	r9, r3
 801c5d4:	dc36      	bgt.n	801c644 <_printf_float+0x360>
 801c5d6:	f04f 0b00 	mov.w	fp, #0
 801c5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c5de:	f104 021a 	add.w	r2, r4, #26
 801c5e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c5e4:	9306      	str	r3, [sp, #24]
 801c5e6:	eba3 0309 	sub.w	r3, r3, r9
 801c5ea:	455b      	cmp	r3, fp
 801c5ec:	dc31      	bgt.n	801c652 <_printf_float+0x36e>
 801c5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5f0:	459a      	cmp	sl, r3
 801c5f2:	dc3a      	bgt.n	801c66a <_printf_float+0x386>
 801c5f4:	6823      	ldr	r3, [r4, #0]
 801c5f6:	07da      	lsls	r2, r3, #31
 801c5f8:	d437      	bmi.n	801c66a <_printf_float+0x386>
 801c5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5fc:	ebaa 0903 	sub.w	r9, sl, r3
 801c600:	9b06      	ldr	r3, [sp, #24]
 801c602:	ebaa 0303 	sub.w	r3, sl, r3
 801c606:	4599      	cmp	r9, r3
 801c608:	bfa8      	it	ge
 801c60a:	4699      	movge	r9, r3
 801c60c:	f1b9 0f00 	cmp.w	r9, #0
 801c610:	dc33      	bgt.n	801c67a <_printf_float+0x396>
 801c612:	f04f 0800 	mov.w	r8, #0
 801c616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c61a:	f104 0b1a 	add.w	fp, r4, #26
 801c61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c620:	ebaa 0303 	sub.w	r3, sl, r3
 801c624:	eba3 0309 	sub.w	r3, r3, r9
 801c628:	4543      	cmp	r3, r8
 801c62a:	f77f af79 	ble.w	801c520 <_printf_float+0x23c>
 801c62e:	2301      	movs	r3, #1
 801c630:	465a      	mov	r2, fp
 801c632:	4631      	mov	r1, r6
 801c634:	4628      	mov	r0, r5
 801c636:	47b8      	blx	r7
 801c638:	3001      	adds	r0, #1
 801c63a:	f43f aeae 	beq.w	801c39a <_printf_float+0xb6>
 801c63e:	f108 0801 	add.w	r8, r8, #1
 801c642:	e7ec      	b.n	801c61e <_printf_float+0x33a>
 801c644:	4642      	mov	r2, r8
 801c646:	4631      	mov	r1, r6
 801c648:	4628      	mov	r0, r5
 801c64a:	47b8      	blx	r7
 801c64c:	3001      	adds	r0, #1
 801c64e:	d1c2      	bne.n	801c5d6 <_printf_float+0x2f2>
 801c650:	e6a3      	b.n	801c39a <_printf_float+0xb6>
 801c652:	2301      	movs	r3, #1
 801c654:	4631      	mov	r1, r6
 801c656:	4628      	mov	r0, r5
 801c658:	9206      	str	r2, [sp, #24]
 801c65a:	47b8      	blx	r7
 801c65c:	3001      	adds	r0, #1
 801c65e:	f43f ae9c 	beq.w	801c39a <_printf_float+0xb6>
 801c662:	9a06      	ldr	r2, [sp, #24]
 801c664:	f10b 0b01 	add.w	fp, fp, #1
 801c668:	e7bb      	b.n	801c5e2 <_printf_float+0x2fe>
 801c66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c66e:	4631      	mov	r1, r6
 801c670:	4628      	mov	r0, r5
 801c672:	47b8      	blx	r7
 801c674:	3001      	adds	r0, #1
 801c676:	d1c0      	bne.n	801c5fa <_printf_float+0x316>
 801c678:	e68f      	b.n	801c39a <_printf_float+0xb6>
 801c67a:	9a06      	ldr	r2, [sp, #24]
 801c67c:	464b      	mov	r3, r9
 801c67e:	4442      	add	r2, r8
 801c680:	4631      	mov	r1, r6
 801c682:	4628      	mov	r0, r5
 801c684:	47b8      	blx	r7
 801c686:	3001      	adds	r0, #1
 801c688:	d1c3      	bne.n	801c612 <_printf_float+0x32e>
 801c68a:	e686      	b.n	801c39a <_printf_float+0xb6>
 801c68c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c690:	f1ba 0f01 	cmp.w	sl, #1
 801c694:	dc01      	bgt.n	801c69a <_printf_float+0x3b6>
 801c696:	07db      	lsls	r3, r3, #31
 801c698:	d536      	bpl.n	801c708 <_printf_float+0x424>
 801c69a:	2301      	movs	r3, #1
 801c69c:	4642      	mov	r2, r8
 801c69e:	4631      	mov	r1, r6
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	47b8      	blx	r7
 801c6a4:	3001      	adds	r0, #1
 801c6a6:	f43f ae78 	beq.w	801c39a <_printf_float+0xb6>
 801c6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c6ae:	4631      	mov	r1, r6
 801c6b0:	4628      	mov	r0, r5
 801c6b2:	47b8      	blx	r7
 801c6b4:	3001      	adds	r0, #1
 801c6b6:	f43f ae70 	beq.w	801c39a <_printf_float+0xb6>
 801c6ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c6be:	2200      	movs	r2, #0
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c6c6:	f7e4 fa17 	bl	8000af8 <__aeabi_dcmpeq>
 801c6ca:	b9c0      	cbnz	r0, 801c6fe <_printf_float+0x41a>
 801c6cc:	4653      	mov	r3, sl
 801c6ce:	f108 0201 	add.w	r2, r8, #1
 801c6d2:	4631      	mov	r1, r6
 801c6d4:	4628      	mov	r0, r5
 801c6d6:	47b8      	blx	r7
 801c6d8:	3001      	adds	r0, #1
 801c6da:	d10c      	bne.n	801c6f6 <_printf_float+0x412>
 801c6dc:	e65d      	b.n	801c39a <_printf_float+0xb6>
 801c6de:	2301      	movs	r3, #1
 801c6e0:	465a      	mov	r2, fp
 801c6e2:	4631      	mov	r1, r6
 801c6e4:	4628      	mov	r0, r5
 801c6e6:	47b8      	blx	r7
 801c6e8:	3001      	adds	r0, #1
 801c6ea:	f43f ae56 	beq.w	801c39a <_printf_float+0xb6>
 801c6ee:	f108 0801 	add.w	r8, r8, #1
 801c6f2:	45d0      	cmp	r8, sl
 801c6f4:	dbf3      	blt.n	801c6de <_printf_float+0x3fa>
 801c6f6:	464b      	mov	r3, r9
 801c6f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c6fc:	e6df      	b.n	801c4be <_printf_float+0x1da>
 801c6fe:	f04f 0800 	mov.w	r8, #0
 801c702:	f104 0b1a 	add.w	fp, r4, #26
 801c706:	e7f4      	b.n	801c6f2 <_printf_float+0x40e>
 801c708:	2301      	movs	r3, #1
 801c70a:	4642      	mov	r2, r8
 801c70c:	e7e1      	b.n	801c6d2 <_printf_float+0x3ee>
 801c70e:	2301      	movs	r3, #1
 801c710:	464a      	mov	r2, r9
 801c712:	4631      	mov	r1, r6
 801c714:	4628      	mov	r0, r5
 801c716:	47b8      	blx	r7
 801c718:	3001      	adds	r0, #1
 801c71a:	f43f ae3e 	beq.w	801c39a <_printf_float+0xb6>
 801c71e:	f108 0801 	add.w	r8, r8, #1
 801c722:	68e3      	ldr	r3, [r4, #12]
 801c724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c726:	1a5b      	subs	r3, r3, r1
 801c728:	4543      	cmp	r3, r8
 801c72a:	dcf0      	bgt.n	801c70e <_printf_float+0x42a>
 801c72c:	e6fc      	b.n	801c528 <_printf_float+0x244>
 801c72e:	f04f 0800 	mov.w	r8, #0
 801c732:	f104 0919 	add.w	r9, r4, #25
 801c736:	e7f4      	b.n	801c722 <_printf_float+0x43e>

0801c738 <_printf_common>:
 801c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c73c:	4616      	mov	r6, r2
 801c73e:	4698      	mov	r8, r3
 801c740:	688a      	ldr	r2, [r1, #8]
 801c742:	690b      	ldr	r3, [r1, #16]
 801c744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c748:	4293      	cmp	r3, r2
 801c74a:	bfb8      	it	lt
 801c74c:	4613      	movlt	r3, r2
 801c74e:	6033      	str	r3, [r6, #0]
 801c750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c754:	4607      	mov	r7, r0
 801c756:	460c      	mov	r4, r1
 801c758:	b10a      	cbz	r2, 801c75e <_printf_common+0x26>
 801c75a:	3301      	adds	r3, #1
 801c75c:	6033      	str	r3, [r6, #0]
 801c75e:	6823      	ldr	r3, [r4, #0]
 801c760:	0699      	lsls	r1, r3, #26
 801c762:	bf42      	ittt	mi
 801c764:	6833      	ldrmi	r3, [r6, #0]
 801c766:	3302      	addmi	r3, #2
 801c768:	6033      	strmi	r3, [r6, #0]
 801c76a:	6825      	ldr	r5, [r4, #0]
 801c76c:	f015 0506 	ands.w	r5, r5, #6
 801c770:	d106      	bne.n	801c780 <_printf_common+0x48>
 801c772:	f104 0a19 	add.w	sl, r4, #25
 801c776:	68e3      	ldr	r3, [r4, #12]
 801c778:	6832      	ldr	r2, [r6, #0]
 801c77a:	1a9b      	subs	r3, r3, r2
 801c77c:	42ab      	cmp	r3, r5
 801c77e:	dc26      	bgt.n	801c7ce <_printf_common+0x96>
 801c780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c784:	6822      	ldr	r2, [r4, #0]
 801c786:	3b00      	subs	r3, #0
 801c788:	bf18      	it	ne
 801c78a:	2301      	movne	r3, #1
 801c78c:	0692      	lsls	r2, r2, #26
 801c78e:	d42b      	bmi.n	801c7e8 <_printf_common+0xb0>
 801c790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c794:	4641      	mov	r1, r8
 801c796:	4638      	mov	r0, r7
 801c798:	47c8      	blx	r9
 801c79a:	3001      	adds	r0, #1
 801c79c:	d01e      	beq.n	801c7dc <_printf_common+0xa4>
 801c79e:	6823      	ldr	r3, [r4, #0]
 801c7a0:	6922      	ldr	r2, [r4, #16]
 801c7a2:	f003 0306 	and.w	r3, r3, #6
 801c7a6:	2b04      	cmp	r3, #4
 801c7a8:	bf02      	ittt	eq
 801c7aa:	68e5      	ldreq	r5, [r4, #12]
 801c7ac:	6833      	ldreq	r3, [r6, #0]
 801c7ae:	1aed      	subeq	r5, r5, r3
 801c7b0:	68a3      	ldr	r3, [r4, #8]
 801c7b2:	bf0c      	ite	eq
 801c7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c7b8:	2500      	movne	r5, #0
 801c7ba:	4293      	cmp	r3, r2
 801c7bc:	bfc4      	itt	gt
 801c7be:	1a9b      	subgt	r3, r3, r2
 801c7c0:	18ed      	addgt	r5, r5, r3
 801c7c2:	2600      	movs	r6, #0
 801c7c4:	341a      	adds	r4, #26
 801c7c6:	42b5      	cmp	r5, r6
 801c7c8:	d11a      	bne.n	801c800 <_printf_common+0xc8>
 801c7ca:	2000      	movs	r0, #0
 801c7cc:	e008      	b.n	801c7e0 <_printf_common+0xa8>
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	4652      	mov	r2, sl
 801c7d2:	4641      	mov	r1, r8
 801c7d4:	4638      	mov	r0, r7
 801c7d6:	47c8      	blx	r9
 801c7d8:	3001      	adds	r0, #1
 801c7da:	d103      	bne.n	801c7e4 <_printf_common+0xac>
 801c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7e4:	3501      	adds	r5, #1
 801c7e6:	e7c6      	b.n	801c776 <_printf_common+0x3e>
 801c7e8:	18e1      	adds	r1, r4, r3
 801c7ea:	1c5a      	adds	r2, r3, #1
 801c7ec:	2030      	movs	r0, #48	@ 0x30
 801c7ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c7f2:	4422      	add	r2, r4
 801c7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c7f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c7fc:	3302      	adds	r3, #2
 801c7fe:	e7c7      	b.n	801c790 <_printf_common+0x58>
 801c800:	2301      	movs	r3, #1
 801c802:	4622      	mov	r2, r4
 801c804:	4641      	mov	r1, r8
 801c806:	4638      	mov	r0, r7
 801c808:	47c8      	blx	r9
 801c80a:	3001      	adds	r0, #1
 801c80c:	d0e6      	beq.n	801c7dc <_printf_common+0xa4>
 801c80e:	3601      	adds	r6, #1
 801c810:	e7d9      	b.n	801c7c6 <_printf_common+0x8e>
	...

0801c814 <_printf_i>:
 801c814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c818:	7e0f      	ldrb	r7, [r1, #24]
 801c81a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c81c:	2f78      	cmp	r7, #120	@ 0x78
 801c81e:	4691      	mov	r9, r2
 801c820:	4680      	mov	r8, r0
 801c822:	460c      	mov	r4, r1
 801c824:	469a      	mov	sl, r3
 801c826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c82a:	d807      	bhi.n	801c83c <_printf_i+0x28>
 801c82c:	2f62      	cmp	r7, #98	@ 0x62
 801c82e:	d80a      	bhi.n	801c846 <_printf_i+0x32>
 801c830:	2f00      	cmp	r7, #0
 801c832:	f000 80d2 	beq.w	801c9da <_printf_i+0x1c6>
 801c836:	2f58      	cmp	r7, #88	@ 0x58
 801c838:	f000 80b9 	beq.w	801c9ae <_printf_i+0x19a>
 801c83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c844:	e03a      	b.n	801c8bc <_printf_i+0xa8>
 801c846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c84a:	2b15      	cmp	r3, #21
 801c84c:	d8f6      	bhi.n	801c83c <_printf_i+0x28>
 801c84e:	a101      	add	r1, pc, #4	@ (adr r1, 801c854 <_printf_i+0x40>)
 801c850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c854:	0801c8ad 	.word	0x0801c8ad
 801c858:	0801c8c1 	.word	0x0801c8c1
 801c85c:	0801c83d 	.word	0x0801c83d
 801c860:	0801c83d 	.word	0x0801c83d
 801c864:	0801c83d 	.word	0x0801c83d
 801c868:	0801c83d 	.word	0x0801c83d
 801c86c:	0801c8c1 	.word	0x0801c8c1
 801c870:	0801c83d 	.word	0x0801c83d
 801c874:	0801c83d 	.word	0x0801c83d
 801c878:	0801c83d 	.word	0x0801c83d
 801c87c:	0801c83d 	.word	0x0801c83d
 801c880:	0801c9c1 	.word	0x0801c9c1
 801c884:	0801c8eb 	.word	0x0801c8eb
 801c888:	0801c97b 	.word	0x0801c97b
 801c88c:	0801c83d 	.word	0x0801c83d
 801c890:	0801c83d 	.word	0x0801c83d
 801c894:	0801c9e3 	.word	0x0801c9e3
 801c898:	0801c83d 	.word	0x0801c83d
 801c89c:	0801c8eb 	.word	0x0801c8eb
 801c8a0:	0801c83d 	.word	0x0801c83d
 801c8a4:	0801c83d 	.word	0x0801c83d
 801c8a8:	0801c983 	.word	0x0801c983
 801c8ac:	6833      	ldr	r3, [r6, #0]
 801c8ae:	1d1a      	adds	r2, r3, #4
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	6032      	str	r2, [r6, #0]
 801c8b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c8b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c8bc:	2301      	movs	r3, #1
 801c8be:	e09d      	b.n	801c9fc <_printf_i+0x1e8>
 801c8c0:	6833      	ldr	r3, [r6, #0]
 801c8c2:	6820      	ldr	r0, [r4, #0]
 801c8c4:	1d19      	adds	r1, r3, #4
 801c8c6:	6031      	str	r1, [r6, #0]
 801c8c8:	0606      	lsls	r6, r0, #24
 801c8ca:	d501      	bpl.n	801c8d0 <_printf_i+0xbc>
 801c8cc:	681d      	ldr	r5, [r3, #0]
 801c8ce:	e003      	b.n	801c8d8 <_printf_i+0xc4>
 801c8d0:	0645      	lsls	r5, r0, #25
 801c8d2:	d5fb      	bpl.n	801c8cc <_printf_i+0xb8>
 801c8d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c8d8:	2d00      	cmp	r5, #0
 801c8da:	da03      	bge.n	801c8e4 <_printf_i+0xd0>
 801c8dc:	232d      	movs	r3, #45	@ 0x2d
 801c8de:	426d      	negs	r5, r5
 801c8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c8e4:	4859      	ldr	r0, [pc, #356]	@ (801ca4c <_printf_i+0x238>)
 801c8e6:	230a      	movs	r3, #10
 801c8e8:	e011      	b.n	801c90e <_printf_i+0xfa>
 801c8ea:	6821      	ldr	r1, [r4, #0]
 801c8ec:	6833      	ldr	r3, [r6, #0]
 801c8ee:	0608      	lsls	r0, r1, #24
 801c8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 801c8f4:	d402      	bmi.n	801c8fc <_printf_i+0xe8>
 801c8f6:	0649      	lsls	r1, r1, #25
 801c8f8:	bf48      	it	mi
 801c8fa:	b2ad      	uxthmi	r5, r5
 801c8fc:	2f6f      	cmp	r7, #111	@ 0x6f
 801c8fe:	4853      	ldr	r0, [pc, #332]	@ (801ca4c <_printf_i+0x238>)
 801c900:	6033      	str	r3, [r6, #0]
 801c902:	bf14      	ite	ne
 801c904:	230a      	movne	r3, #10
 801c906:	2308      	moveq	r3, #8
 801c908:	2100      	movs	r1, #0
 801c90a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c90e:	6866      	ldr	r6, [r4, #4]
 801c910:	60a6      	str	r6, [r4, #8]
 801c912:	2e00      	cmp	r6, #0
 801c914:	bfa2      	ittt	ge
 801c916:	6821      	ldrge	r1, [r4, #0]
 801c918:	f021 0104 	bicge.w	r1, r1, #4
 801c91c:	6021      	strge	r1, [r4, #0]
 801c91e:	b90d      	cbnz	r5, 801c924 <_printf_i+0x110>
 801c920:	2e00      	cmp	r6, #0
 801c922:	d04b      	beq.n	801c9bc <_printf_i+0x1a8>
 801c924:	4616      	mov	r6, r2
 801c926:	fbb5 f1f3 	udiv	r1, r5, r3
 801c92a:	fb03 5711 	mls	r7, r3, r1, r5
 801c92e:	5dc7      	ldrb	r7, [r0, r7]
 801c930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c934:	462f      	mov	r7, r5
 801c936:	42bb      	cmp	r3, r7
 801c938:	460d      	mov	r5, r1
 801c93a:	d9f4      	bls.n	801c926 <_printf_i+0x112>
 801c93c:	2b08      	cmp	r3, #8
 801c93e:	d10b      	bne.n	801c958 <_printf_i+0x144>
 801c940:	6823      	ldr	r3, [r4, #0]
 801c942:	07df      	lsls	r7, r3, #31
 801c944:	d508      	bpl.n	801c958 <_printf_i+0x144>
 801c946:	6923      	ldr	r3, [r4, #16]
 801c948:	6861      	ldr	r1, [r4, #4]
 801c94a:	4299      	cmp	r1, r3
 801c94c:	bfde      	ittt	le
 801c94e:	2330      	movle	r3, #48	@ 0x30
 801c950:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c954:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c958:	1b92      	subs	r2, r2, r6
 801c95a:	6122      	str	r2, [r4, #16]
 801c95c:	f8cd a000 	str.w	sl, [sp]
 801c960:	464b      	mov	r3, r9
 801c962:	aa03      	add	r2, sp, #12
 801c964:	4621      	mov	r1, r4
 801c966:	4640      	mov	r0, r8
 801c968:	f7ff fee6 	bl	801c738 <_printf_common>
 801c96c:	3001      	adds	r0, #1
 801c96e:	d14a      	bne.n	801ca06 <_printf_i+0x1f2>
 801c970:	f04f 30ff 	mov.w	r0, #4294967295
 801c974:	b004      	add	sp, #16
 801c976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c97a:	6823      	ldr	r3, [r4, #0]
 801c97c:	f043 0320 	orr.w	r3, r3, #32
 801c980:	6023      	str	r3, [r4, #0]
 801c982:	4833      	ldr	r0, [pc, #204]	@ (801ca50 <_printf_i+0x23c>)
 801c984:	2778      	movs	r7, #120	@ 0x78
 801c986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c98a:	6823      	ldr	r3, [r4, #0]
 801c98c:	6831      	ldr	r1, [r6, #0]
 801c98e:	061f      	lsls	r7, r3, #24
 801c990:	f851 5b04 	ldr.w	r5, [r1], #4
 801c994:	d402      	bmi.n	801c99c <_printf_i+0x188>
 801c996:	065f      	lsls	r7, r3, #25
 801c998:	bf48      	it	mi
 801c99a:	b2ad      	uxthmi	r5, r5
 801c99c:	6031      	str	r1, [r6, #0]
 801c99e:	07d9      	lsls	r1, r3, #31
 801c9a0:	bf44      	itt	mi
 801c9a2:	f043 0320 	orrmi.w	r3, r3, #32
 801c9a6:	6023      	strmi	r3, [r4, #0]
 801c9a8:	b11d      	cbz	r5, 801c9b2 <_printf_i+0x19e>
 801c9aa:	2310      	movs	r3, #16
 801c9ac:	e7ac      	b.n	801c908 <_printf_i+0xf4>
 801c9ae:	4827      	ldr	r0, [pc, #156]	@ (801ca4c <_printf_i+0x238>)
 801c9b0:	e7e9      	b.n	801c986 <_printf_i+0x172>
 801c9b2:	6823      	ldr	r3, [r4, #0]
 801c9b4:	f023 0320 	bic.w	r3, r3, #32
 801c9b8:	6023      	str	r3, [r4, #0]
 801c9ba:	e7f6      	b.n	801c9aa <_printf_i+0x196>
 801c9bc:	4616      	mov	r6, r2
 801c9be:	e7bd      	b.n	801c93c <_printf_i+0x128>
 801c9c0:	6833      	ldr	r3, [r6, #0]
 801c9c2:	6825      	ldr	r5, [r4, #0]
 801c9c4:	6961      	ldr	r1, [r4, #20]
 801c9c6:	1d18      	adds	r0, r3, #4
 801c9c8:	6030      	str	r0, [r6, #0]
 801c9ca:	062e      	lsls	r6, r5, #24
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	d501      	bpl.n	801c9d4 <_printf_i+0x1c0>
 801c9d0:	6019      	str	r1, [r3, #0]
 801c9d2:	e002      	b.n	801c9da <_printf_i+0x1c6>
 801c9d4:	0668      	lsls	r0, r5, #25
 801c9d6:	d5fb      	bpl.n	801c9d0 <_printf_i+0x1bc>
 801c9d8:	8019      	strh	r1, [r3, #0]
 801c9da:	2300      	movs	r3, #0
 801c9dc:	6123      	str	r3, [r4, #16]
 801c9de:	4616      	mov	r6, r2
 801c9e0:	e7bc      	b.n	801c95c <_printf_i+0x148>
 801c9e2:	6833      	ldr	r3, [r6, #0]
 801c9e4:	1d1a      	adds	r2, r3, #4
 801c9e6:	6032      	str	r2, [r6, #0]
 801c9e8:	681e      	ldr	r6, [r3, #0]
 801c9ea:	6862      	ldr	r2, [r4, #4]
 801c9ec:	2100      	movs	r1, #0
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f7e3 fc06 	bl	8000200 <memchr>
 801c9f4:	b108      	cbz	r0, 801c9fa <_printf_i+0x1e6>
 801c9f6:	1b80      	subs	r0, r0, r6
 801c9f8:	6060      	str	r0, [r4, #4]
 801c9fa:	6863      	ldr	r3, [r4, #4]
 801c9fc:	6123      	str	r3, [r4, #16]
 801c9fe:	2300      	movs	r3, #0
 801ca00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ca04:	e7aa      	b.n	801c95c <_printf_i+0x148>
 801ca06:	6923      	ldr	r3, [r4, #16]
 801ca08:	4632      	mov	r2, r6
 801ca0a:	4649      	mov	r1, r9
 801ca0c:	4640      	mov	r0, r8
 801ca0e:	47d0      	blx	sl
 801ca10:	3001      	adds	r0, #1
 801ca12:	d0ad      	beq.n	801c970 <_printf_i+0x15c>
 801ca14:	6823      	ldr	r3, [r4, #0]
 801ca16:	079b      	lsls	r3, r3, #30
 801ca18:	d413      	bmi.n	801ca42 <_printf_i+0x22e>
 801ca1a:	68e0      	ldr	r0, [r4, #12]
 801ca1c:	9b03      	ldr	r3, [sp, #12]
 801ca1e:	4298      	cmp	r0, r3
 801ca20:	bfb8      	it	lt
 801ca22:	4618      	movlt	r0, r3
 801ca24:	e7a6      	b.n	801c974 <_printf_i+0x160>
 801ca26:	2301      	movs	r3, #1
 801ca28:	4632      	mov	r2, r6
 801ca2a:	4649      	mov	r1, r9
 801ca2c:	4640      	mov	r0, r8
 801ca2e:	47d0      	blx	sl
 801ca30:	3001      	adds	r0, #1
 801ca32:	d09d      	beq.n	801c970 <_printf_i+0x15c>
 801ca34:	3501      	adds	r5, #1
 801ca36:	68e3      	ldr	r3, [r4, #12]
 801ca38:	9903      	ldr	r1, [sp, #12]
 801ca3a:	1a5b      	subs	r3, r3, r1
 801ca3c:	42ab      	cmp	r3, r5
 801ca3e:	dcf2      	bgt.n	801ca26 <_printf_i+0x212>
 801ca40:	e7eb      	b.n	801ca1a <_printf_i+0x206>
 801ca42:	2500      	movs	r5, #0
 801ca44:	f104 0619 	add.w	r6, r4, #25
 801ca48:	e7f5      	b.n	801ca36 <_printf_i+0x222>
 801ca4a:	bf00      	nop
 801ca4c:	08023147 	.word	0x08023147
 801ca50:	08023158 	.word	0x08023158

0801ca54 <_scanf_float>:
 801ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca58:	b087      	sub	sp, #28
 801ca5a:	4617      	mov	r7, r2
 801ca5c:	9303      	str	r3, [sp, #12]
 801ca5e:	688b      	ldr	r3, [r1, #8]
 801ca60:	1e5a      	subs	r2, r3, #1
 801ca62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ca66:	bf81      	itttt	hi
 801ca68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ca6c:	eb03 0b05 	addhi.w	fp, r3, r5
 801ca70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ca74:	608b      	strhi	r3, [r1, #8]
 801ca76:	680b      	ldr	r3, [r1, #0]
 801ca78:	460a      	mov	r2, r1
 801ca7a:	f04f 0500 	mov.w	r5, #0
 801ca7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ca82:	f842 3b1c 	str.w	r3, [r2], #28
 801ca86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ca8a:	4680      	mov	r8, r0
 801ca8c:	460c      	mov	r4, r1
 801ca8e:	bf98      	it	ls
 801ca90:	f04f 0b00 	movls.w	fp, #0
 801ca94:	9201      	str	r2, [sp, #4]
 801ca96:	4616      	mov	r6, r2
 801ca98:	46aa      	mov	sl, r5
 801ca9a:	46a9      	mov	r9, r5
 801ca9c:	9502      	str	r5, [sp, #8]
 801ca9e:	68a2      	ldr	r2, [r4, #8]
 801caa0:	b152      	cbz	r2, 801cab8 <_scanf_float+0x64>
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	781b      	ldrb	r3, [r3, #0]
 801caa6:	2b4e      	cmp	r3, #78	@ 0x4e
 801caa8:	d864      	bhi.n	801cb74 <_scanf_float+0x120>
 801caaa:	2b40      	cmp	r3, #64	@ 0x40
 801caac:	d83c      	bhi.n	801cb28 <_scanf_float+0xd4>
 801caae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801cab2:	b2c8      	uxtb	r0, r1
 801cab4:	280e      	cmp	r0, #14
 801cab6:	d93a      	bls.n	801cb2e <_scanf_float+0xda>
 801cab8:	f1b9 0f00 	cmp.w	r9, #0
 801cabc:	d003      	beq.n	801cac6 <_scanf_float+0x72>
 801cabe:	6823      	ldr	r3, [r4, #0]
 801cac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801cac4:	6023      	str	r3, [r4, #0]
 801cac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801caca:	f1ba 0f01 	cmp.w	sl, #1
 801cace:	f200 8117 	bhi.w	801cd00 <_scanf_float+0x2ac>
 801cad2:	9b01      	ldr	r3, [sp, #4]
 801cad4:	429e      	cmp	r6, r3
 801cad6:	f200 8108 	bhi.w	801ccea <_scanf_float+0x296>
 801cada:	2001      	movs	r0, #1
 801cadc:	b007      	add	sp, #28
 801cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cae2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801cae6:	2a0d      	cmp	r2, #13
 801cae8:	d8e6      	bhi.n	801cab8 <_scanf_float+0x64>
 801caea:	a101      	add	r1, pc, #4	@ (adr r1, 801caf0 <_scanf_float+0x9c>)
 801caec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801caf0:	0801cc37 	.word	0x0801cc37
 801caf4:	0801cab9 	.word	0x0801cab9
 801caf8:	0801cab9 	.word	0x0801cab9
 801cafc:	0801cab9 	.word	0x0801cab9
 801cb00:	0801cc97 	.word	0x0801cc97
 801cb04:	0801cc6f 	.word	0x0801cc6f
 801cb08:	0801cab9 	.word	0x0801cab9
 801cb0c:	0801cab9 	.word	0x0801cab9
 801cb10:	0801cc45 	.word	0x0801cc45
 801cb14:	0801cab9 	.word	0x0801cab9
 801cb18:	0801cab9 	.word	0x0801cab9
 801cb1c:	0801cab9 	.word	0x0801cab9
 801cb20:	0801cab9 	.word	0x0801cab9
 801cb24:	0801cbfd 	.word	0x0801cbfd
 801cb28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801cb2c:	e7db      	b.n	801cae6 <_scanf_float+0x92>
 801cb2e:	290e      	cmp	r1, #14
 801cb30:	d8c2      	bhi.n	801cab8 <_scanf_float+0x64>
 801cb32:	a001      	add	r0, pc, #4	@ (adr r0, 801cb38 <_scanf_float+0xe4>)
 801cb34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801cb38:	0801cbed 	.word	0x0801cbed
 801cb3c:	0801cab9 	.word	0x0801cab9
 801cb40:	0801cbed 	.word	0x0801cbed
 801cb44:	0801cc83 	.word	0x0801cc83
 801cb48:	0801cab9 	.word	0x0801cab9
 801cb4c:	0801cb95 	.word	0x0801cb95
 801cb50:	0801cbd3 	.word	0x0801cbd3
 801cb54:	0801cbd3 	.word	0x0801cbd3
 801cb58:	0801cbd3 	.word	0x0801cbd3
 801cb5c:	0801cbd3 	.word	0x0801cbd3
 801cb60:	0801cbd3 	.word	0x0801cbd3
 801cb64:	0801cbd3 	.word	0x0801cbd3
 801cb68:	0801cbd3 	.word	0x0801cbd3
 801cb6c:	0801cbd3 	.word	0x0801cbd3
 801cb70:	0801cbd3 	.word	0x0801cbd3
 801cb74:	2b6e      	cmp	r3, #110	@ 0x6e
 801cb76:	d809      	bhi.n	801cb8c <_scanf_float+0x138>
 801cb78:	2b60      	cmp	r3, #96	@ 0x60
 801cb7a:	d8b2      	bhi.n	801cae2 <_scanf_float+0x8e>
 801cb7c:	2b54      	cmp	r3, #84	@ 0x54
 801cb7e:	d07b      	beq.n	801cc78 <_scanf_float+0x224>
 801cb80:	2b59      	cmp	r3, #89	@ 0x59
 801cb82:	d199      	bne.n	801cab8 <_scanf_float+0x64>
 801cb84:	2d07      	cmp	r5, #7
 801cb86:	d197      	bne.n	801cab8 <_scanf_float+0x64>
 801cb88:	2508      	movs	r5, #8
 801cb8a:	e02c      	b.n	801cbe6 <_scanf_float+0x192>
 801cb8c:	2b74      	cmp	r3, #116	@ 0x74
 801cb8e:	d073      	beq.n	801cc78 <_scanf_float+0x224>
 801cb90:	2b79      	cmp	r3, #121	@ 0x79
 801cb92:	e7f6      	b.n	801cb82 <_scanf_float+0x12e>
 801cb94:	6821      	ldr	r1, [r4, #0]
 801cb96:	05c8      	lsls	r0, r1, #23
 801cb98:	d51b      	bpl.n	801cbd2 <_scanf_float+0x17e>
 801cb9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801cb9e:	6021      	str	r1, [r4, #0]
 801cba0:	f109 0901 	add.w	r9, r9, #1
 801cba4:	f1bb 0f00 	cmp.w	fp, #0
 801cba8:	d003      	beq.n	801cbb2 <_scanf_float+0x15e>
 801cbaa:	3201      	adds	r2, #1
 801cbac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cbb0:	60a2      	str	r2, [r4, #8]
 801cbb2:	68a3      	ldr	r3, [r4, #8]
 801cbb4:	3b01      	subs	r3, #1
 801cbb6:	60a3      	str	r3, [r4, #8]
 801cbb8:	6923      	ldr	r3, [r4, #16]
 801cbba:	3301      	adds	r3, #1
 801cbbc:	6123      	str	r3, [r4, #16]
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	3b01      	subs	r3, #1
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	607b      	str	r3, [r7, #4]
 801cbc6:	f340 8087 	ble.w	801ccd8 <_scanf_float+0x284>
 801cbca:	683b      	ldr	r3, [r7, #0]
 801cbcc:	3301      	adds	r3, #1
 801cbce:	603b      	str	r3, [r7, #0]
 801cbd0:	e765      	b.n	801ca9e <_scanf_float+0x4a>
 801cbd2:	eb1a 0105 	adds.w	r1, sl, r5
 801cbd6:	f47f af6f 	bne.w	801cab8 <_scanf_float+0x64>
 801cbda:	6822      	ldr	r2, [r4, #0]
 801cbdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801cbe0:	6022      	str	r2, [r4, #0]
 801cbe2:	460d      	mov	r5, r1
 801cbe4:	468a      	mov	sl, r1
 801cbe6:	f806 3b01 	strb.w	r3, [r6], #1
 801cbea:	e7e2      	b.n	801cbb2 <_scanf_float+0x15e>
 801cbec:	6822      	ldr	r2, [r4, #0]
 801cbee:	0610      	lsls	r0, r2, #24
 801cbf0:	f57f af62 	bpl.w	801cab8 <_scanf_float+0x64>
 801cbf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801cbf8:	6022      	str	r2, [r4, #0]
 801cbfa:	e7f4      	b.n	801cbe6 <_scanf_float+0x192>
 801cbfc:	f1ba 0f00 	cmp.w	sl, #0
 801cc00:	d10e      	bne.n	801cc20 <_scanf_float+0x1cc>
 801cc02:	f1b9 0f00 	cmp.w	r9, #0
 801cc06:	d10e      	bne.n	801cc26 <_scanf_float+0x1d2>
 801cc08:	6822      	ldr	r2, [r4, #0]
 801cc0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801cc0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801cc12:	d108      	bne.n	801cc26 <_scanf_float+0x1d2>
 801cc14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801cc18:	6022      	str	r2, [r4, #0]
 801cc1a:	f04f 0a01 	mov.w	sl, #1
 801cc1e:	e7e2      	b.n	801cbe6 <_scanf_float+0x192>
 801cc20:	f1ba 0f02 	cmp.w	sl, #2
 801cc24:	d055      	beq.n	801ccd2 <_scanf_float+0x27e>
 801cc26:	2d01      	cmp	r5, #1
 801cc28:	d002      	beq.n	801cc30 <_scanf_float+0x1dc>
 801cc2a:	2d04      	cmp	r5, #4
 801cc2c:	f47f af44 	bne.w	801cab8 <_scanf_float+0x64>
 801cc30:	3501      	adds	r5, #1
 801cc32:	b2ed      	uxtb	r5, r5
 801cc34:	e7d7      	b.n	801cbe6 <_scanf_float+0x192>
 801cc36:	f1ba 0f01 	cmp.w	sl, #1
 801cc3a:	f47f af3d 	bne.w	801cab8 <_scanf_float+0x64>
 801cc3e:	f04f 0a02 	mov.w	sl, #2
 801cc42:	e7d0      	b.n	801cbe6 <_scanf_float+0x192>
 801cc44:	b97d      	cbnz	r5, 801cc66 <_scanf_float+0x212>
 801cc46:	f1b9 0f00 	cmp.w	r9, #0
 801cc4a:	f47f af38 	bne.w	801cabe <_scanf_float+0x6a>
 801cc4e:	6822      	ldr	r2, [r4, #0]
 801cc50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801cc54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801cc58:	f040 8108 	bne.w	801ce6c <_scanf_float+0x418>
 801cc5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801cc60:	6022      	str	r2, [r4, #0]
 801cc62:	2501      	movs	r5, #1
 801cc64:	e7bf      	b.n	801cbe6 <_scanf_float+0x192>
 801cc66:	2d03      	cmp	r5, #3
 801cc68:	d0e2      	beq.n	801cc30 <_scanf_float+0x1dc>
 801cc6a:	2d05      	cmp	r5, #5
 801cc6c:	e7de      	b.n	801cc2c <_scanf_float+0x1d8>
 801cc6e:	2d02      	cmp	r5, #2
 801cc70:	f47f af22 	bne.w	801cab8 <_scanf_float+0x64>
 801cc74:	2503      	movs	r5, #3
 801cc76:	e7b6      	b.n	801cbe6 <_scanf_float+0x192>
 801cc78:	2d06      	cmp	r5, #6
 801cc7a:	f47f af1d 	bne.w	801cab8 <_scanf_float+0x64>
 801cc7e:	2507      	movs	r5, #7
 801cc80:	e7b1      	b.n	801cbe6 <_scanf_float+0x192>
 801cc82:	6822      	ldr	r2, [r4, #0]
 801cc84:	0591      	lsls	r1, r2, #22
 801cc86:	f57f af17 	bpl.w	801cab8 <_scanf_float+0x64>
 801cc8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801cc8e:	6022      	str	r2, [r4, #0]
 801cc90:	f8cd 9008 	str.w	r9, [sp, #8]
 801cc94:	e7a7      	b.n	801cbe6 <_scanf_float+0x192>
 801cc96:	6822      	ldr	r2, [r4, #0]
 801cc98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801cc9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801cca0:	d006      	beq.n	801ccb0 <_scanf_float+0x25c>
 801cca2:	0550      	lsls	r0, r2, #21
 801cca4:	f57f af08 	bpl.w	801cab8 <_scanf_float+0x64>
 801cca8:	f1b9 0f00 	cmp.w	r9, #0
 801ccac:	f000 80de 	beq.w	801ce6c <_scanf_float+0x418>
 801ccb0:	0591      	lsls	r1, r2, #22
 801ccb2:	bf58      	it	pl
 801ccb4:	9902      	ldrpl	r1, [sp, #8]
 801ccb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ccba:	bf58      	it	pl
 801ccbc:	eba9 0101 	subpl.w	r1, r9, r1
 801ccc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801ccc4:	bf58      	it	pl
 801ccc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ccca:	6022      	str	r2, [r4, #0]
 801cccc:	f04f 0900 	mov.w	r9, #0
 801ccd0:	e789      	b.n	801cbe6 <_scanf_float+0x192>
 801ccd2:	f04f 0a03 	mov.w	sl, #3
 801ccd6:	e786      	b.n	801cbe6 <_scanf_float+0x192>
 801ccd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ccdc:	4639      	mov	r1, r7
 801ccde:	4640      	mov	r0, r8
 801cce0:	4798      	blx	r3
 801cce2:	2800      	cmp	r0, #0
 801cce4:	f43f aedb 	beq.w	801ca9e <_scanf_float+0x4a>
 801cce8:	e6e6      	b.n	801cab8 <_scanf_float+0x64>
 801ccea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ccee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ccf2:	463a      	mov	r2, r7
 801ccf4:	4640      	mov	r0, r8
 801ccf6:	4798      	blx	r3
 801ccf8:	6923      	ldr	r3, [r4, #16]
 801ccfa:	3b01      	subs	r3, #1
 801ccfc:	6123      	str	r3, [r4, #16]
 801ccfe:	e6e8      	b.n	801cad2 <_scanf_float+0x7e>
 801cd00:	1e6b      	subs	r3, r5, #1
 801cd02:	2b06      	cmp	r3, #6
 801cd04:	d824      	bhi.n	801cd50 <_scanf_float+0x2fc>
 801cd06:	2d02      	cmp	r5, #2
 801cd08:	d836      	bhi.n	801cd78 <_scanf_float+0x324>
 801cd0a:	9b01      	ldr	r3, [sp, #4]
 801cd0c:	429e      	cmp	r6, r3
 801cd0e:	f67f aee4 	bls.w	801cada <_scanf_float+0x86>
 801cd12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cd16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801cd1a:	463a      	mov	r2, r7
 801cd1c:	4640      	mov	r0, r8
 801cd1e:	4798      	blx	r3
 801cd20:	6923      	ldr	r3, [r4, #16]
 801cd22:	3b01      	subs	r3, #1
 801cd24:	6123      	str	r3, [r4, #16]
 801cd26:	e7f0      	b.n	801cd0a <_scanf_float+0x2b6>
 801cd28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cd2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801cd30:	463a      	mov	r2, r7
 801cd32:	4640      	mov	r0, r8
 801cd34:	4798      	blx	r3
 801cd36:	6923      	ldr	r3, [r4, #16]
 801cd38:	3b01      	subs	r3, #1
 801cd3a:	6123      	str	r3, [r4, #16]
 801cd3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd40:	fa5f fa8a 	uxtb.w	sl, sl
 801cd44:	f1ba 0f02 	cmp.w	sl, #2
 801cd48:	d1ee      	bne.n	801cd28 <_scanf_float+0x2d4>
 801cd4a:	3d03      	subs	r5, #3
 801cd4c:	b2ed      	uxtb	r5, r5
 801cd4e:	1b76      	subs	r6, r6, r5
 801cd50:	6823      	ldr	r3, [r4, #0]
 801cd52:	05da      	lsls	r2, r3, #23
 801cd54:	d530      	bpl.n	801cdb8 <_scanf_float+0x364>
 801cd56:	055b      	lsls	r3, r3, #21
 801cd58:	d511      	bpl.n	801cd7e <_scanf_float+0x32a>
 801cd5a:	9b01      	ldr	r3, [sp, #4]
 801cd5c:	429e      	cmp	r6, r3
 801cd5e:	f67f aebc 	bls.w	801cada <_scanf_float+0x86>
 801cd62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cd66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801cd6a:	463a      	mov	r2, r7
 801cd6c:	4640      	mov	r0, r8
 801cd6e:	4798      	blx	r3
 801cd70:	6923      	ldr	r3, [r4, #16]
 801cd72:	3b01      	subs	r3, #1
 801cd74:	6123      	str	r3, [r4, #16]
 801cd76:	e7f0      	b.n	801cd5a <_scanf_float+0x306>
 801cd78:	46aa      	mov	sl, r5
 801cd7a:	46b3      	mov	fp, r6
 801cd7c:	e7de      	b.n	801cd3c <_scanf_float+0x2e8>
 801cd7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801cd82:	6923      	ldr	r3, [r4, #16]
 801cd84:	2965      	cmp	r1, #101	@ 0x65
 801cd86:	f103 33ff 	add.w	r3, r3, #4294967295
 801cd8a:	f106 35ff 	add.w	r5, r6, #4294967295
 801cd8e:	6123      	str	r3, [r4, #16]
 801cd90:	d00c      	beq.n	801cdac <_scanf_float+0x358>
 801cd92:	2945      	cmp	r1, #69	@ 0x45
 801cd94:	d00a      	beq.n	801cdac <_scanf_float+0x358>
 801cd96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cd9a:	463a      	mov	r2, r7
 801cd9c:	4640      	mov	r0, r8
 801cd9e:	4798      	blx	r3
 801cda0:	6923      	ldr	r3, [r4, #16]
 801cda2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801cda6:	3b01      	subs	r3, #1
 801cda8:	1eb5      	subs	r5, r6, #2
 801cdaa:	6123      	str	r3, [r4, #16]
 801cdac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801cdb0:	463a      	mov	r2, r7
 801cdb2:	4640      	mov	r0, r8
 801cdb4:	4798      	blx	r3
 801cdb6:	462e      	mov	r6, r5
 801cdb8:	6822      	ldr	r2, [r4, #0]
 801cdba:	f012 0210 	ands.w	r2, r2, #16
 801cdbe:	d001      	beq.n	801cdc4 <_scanf_float+0x370>
 801cdc0:	2000      	movs	r0, #0
 801cdc2:	e68b      	b.n	801cadc <_scanf_float+0x88>
 801cdc4:	7032      	strb	r2, [r6, #0]
 801cdc6:	6823      	ldr	r3, [r4, #0]
 801cdc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801cdcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cdd0:	d11c      	bne.n	801ce0c <_scanf_float+0x3b8>
 801cdd2:	9b02      	ldr	r3, [sp, #8]
 801cdd4:	454b      	cmp	r3, r9
 801cdd6:	eba3 0209 	sub.w	r2, r3, r9
 801cdda:	d123      	bne.n	801ce24 <_scanf_float+0x3d0>
 801cddc:	9901      	ldr	r1, [sp, #4]
 801cdde:	2200      	movs	r2, #0
 801cde0:	4640      	mov	r0, r8
 801cde2:	f002 fdb9 	bl	801f958 <_strtod_r>
 801cde6:	9b03      	ldr	r3, [sp, #12]
 801cde8:	6821      	ldr	r1, [r4, #0]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	f011 0f02 	tst.w	r1, #2
 801cdf0:	ec57 6b10 	vmov	r6, r7, d0
 801cdf4:	f103 0204 	add.w	r2, r3, #4
 801cdf8:	d01f      	beq.n	801ce3a <_scanf_float+0x3e6>
 801cdfa:	9903      	ldr	r1, [sp, #12]
 801cdfc:	600a      	str	r2, [r1, #0]
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	e9c3 6700 	strd	r6, r7, [r3]
 801ce04:	68e3      	ldr	r3, [r4, #12]
 801ce06:	3301      	adds	r3, #1
 801ce08:	60e3      	str	r3, [r4, #12]
 801ce0a:	e7d9      	b.n	801cdc0 <_scanf_float+0x36c>
 801ce0c:	9b04      	ldr	r3, [sp, #16]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d0e4      	beq.n	801cddc <_scanf_float+0x388>
 801ce12:	9905      	ldr	r1, [sp, #20]
 801ce14:	230a      	movs	r3, #10
 801ce16:	3101      	adds	r1, #1
 801ce18:	4640      	mov	r0, r8
 801ce1a:	f7ff f9b7 	bl	801c18c <_strtol_r>
 801ce1e:	9b04      	ldr	r3, [sp, #16]
 801ce20:	9e05      	ldr	r6, [sp, #20]
 801ce22:	1ac2      	subs	r2, r0, r3
 801ce24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801ce28:	429e      	cmp	r6, r3
 801ce2a:	bf28      	it	cs
 801ce2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801ce30:	4910      	ldr	r1, [pc, #64]	@ (801ce74 <_scanf_float+0x420>)
 801ce32:	4630      	mov	r0, r6
 801ce34:	f000 f9ae 	bl	801d194 <siprintf>
 801ce38:	e7d0      	b.n	801cddc <_scanf_float+0x388>
 801ce3a:	f011 0f04 	tst.w	r1, #4
 801ce3e:	9903      	ldr	r1, [sp, #12]
 801ce40:	600a      	str	r2, [r1, #0]
 801ce42:	d1dc      	bne.n	801cdfe <_scanf_float+0x3aa>
 801ce44:	681d      	ldr	r5, [r3, #0]
 801ce46:	4632      	mov	r2, r6
 801ce48:	463b      	mov	r3, r7
 801ce4a:	4630      	mov	r0, r6
 801ce4c:	4639      	mov	r1, r7
 801ce4e:	f7e3 fe85 	bl	8000b5c <__aeabi_dcmpun>
 801ce52:	b128      	cbz	r0, 801ce60 <_scanf_float+0x40c>
 801ce54:	4808      	ldr	r0, [pc, #32]	@ (801ce78 <_scanf_float+0x424>)
 801ce56:	f000 fc0d 	bl	801d674 <nanf>
 801ce5a:	ed85 0a00 	vstr	s0, [r5]
 801ce5e:	e7d1      	b.n	801ce04 <_scanf_float+0x3b0>
 801ce60:	4630      	mov	r0, r6
 801ce62:	4639      	mov	r1, r7
 801ce64:	f7e3 fed8 	bl	8000c18 <__aeabi_d2f>
 801ce68:	6028      	str	r0, [r5, #0]
 801ce6a:	e7cb      	b.n	801ce04 <_scanf_float+0x3b0>
 801ce6c:	f04f 0900 	mov.w	r9, #0
 801ce70:	e629      	b.n	801cac6 <_scanf_float+0x72>
 801ce72:	bf00      	nop
 801ce74:	08023169 	.word	0x08023169
 801ce78:	0802321a 	.word	0x0802321a

0801ce7c <std>:
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	b510      	push	{r4, lr}
 801ce80:	4604      	mov	r4, r0
 801ce82:	e9c0 3300 	strd	r3, r3, [r0]
 801ce86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ce8a:	6083      	str	r3, [r0, #8]
 801ce8c:	8181      	strh	r1, [r0, #12]
 801ce8e:	6643      	str	r3, [r0, #100]	@ 0x64
 801ce90:	81c2      	strh	r2, [r0, #14]
 801ce92:	6183      	str	r3, [r0, #24]
 801ce94:	4619      	mov	r1, r3
 801ce96:	2208      	movs	r2, #8
 801ce98:	305c      	adds	r0, #92	@ 0x5c
 801ce9a:	f000 fac5 	bl	801d428 <memset>
 801ce9e:	4b0d      	ldr	r3, [pc, #52]	@ (801ced4 <std+0x58>)
 801cea0:	6263      	str	r3, [r4, #36]	@ 0x24
 801cea2:	4b0d      	ldr	r3, [pc, #52]	@ (801ced8 <std+0x5c>)
 801cea4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cea6:	4b0d      	ldr	r3, [pc, #52]	@ (801cedc <std+0x60>)
 801cea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (801cee0 <std+0x64>)
 801ceac:	6323      	str	r3, [r4, #48]	@ 0x30
 801ceae:	4b0d      	ldr	r3, [pc, #52]	@ (801cee4 <std+0x68>)
 801ceb0:	6224      	str	r4, [r4, #32]
 801ceb2:	429c      	cmp	r4, r3
 801ceb4:	d006      	beq.n	801cec4 <std+0x48>
 801ceb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ceba:	4294      	cmp	r4, r2
 801cebc:	d002      	beq.n	801cec4 <std+0x48>
 801cebe:	33d0      	adds	r3, #208	@ 0xd0
 801cec0:	429c      	cmp	r4, r3
 801cec2:	d105      	bne.n	801ced0 <std+0x54>
 801cec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cecc:	f000 bbb8 	b.w	801d640 <__retarget_lock_init_recursive>
 801ced0:	bd10      	pop	{r4, pc}
 801ced2:	bf00      	nop
 801ced4:	0801d1d5 	.word	0x0801d1d5
 801ced8:	0801d1f7 	.word	0x0801d1f7
 801cedc:	0801d22f 	.word	0x0801d22f
 801cee0:	0801d253 	.word	0x0801d253
 801cee4:	200036a8 	.word	0x200036a8

0801cee8 <stdio_exit_handler>:
 801cee8:	4a02      	ldr	r2, [pc, #8]	@ (801cef4 <stdio_exit_handler+0xc>)
 801ceea:	4903      	ldr	r1, [pc, #12]	@ (801cef8 <stdio_exit_handler+0x10>)
 801ceec:	4803      	ldr	r0, [pc, #12]	@ (801cefc <stdio_exit_handler+0x14>)
 801ceee:	f000 b869 	b.w	801cfc4 <_fwalk_sglue>
 801cef2:	bf00      	nop
 801cef4:	20000164 	.word	0x20000164
 801cef8:	0801ffa1 	.word	0x0801ffa1
 801cefc:	20000174 	.word	0x20000174

0801cf00 <cleanup_stdio>:
 801cf00:	6841      	ldr	r1, [r0, #4]
 801cf02:	4b0c      	ldr	r3, [pc, #48]	@ (801cf34 <cleanup_stdio+0x34>)
 801cf04:	4299      	cmp	r1, r3
 801cf06:	b510      	push	{r4, lr}
 801cf08:	4604      	mov	r4, r0
 801cf0a:	d001      	beq.n	801cf10 <cleanup_stdio+0x10>
 801cf0c:	f003 f848 	bl	801ffa0 <_fflush_r>
 801cf10:	68a1      	ldr	r1, [r4, #8]
 801cf12:	4b09      	ldr	r3, [pc, #36]	@ (801cf38 <cleanup_stdio+0x38>)
 801cf14:	4299      	cmp	r1, r3
 801cf16:	d002      	beq.n	801cf1e <cleanup_stdio+0x1e>
 801cf18:	4620      	mov	r0, r4
 801cf1a:	f003 f841 	bl	801ffa0 <_fflush_r>
 801cf1e:	68e1      	ldr	r1, [r4, #12]
 801cf20:	4b06      	ldr	r3, [pc, #24]	@ (801cf3c <cleanup_stdio+0x3c>)
 801cf22:	4299      	cmp	r1, r3
 801cf24:	d004      	beq.n	801cf30 <cleanup_stdio+0x30>
 801cf26:	4620      	mov	r0, r4
 801cf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf2c:	f003 b838 	b.w	801ffa0 <_fflush_r>
 801cf30:	bd10      	pop	{r4, pc}
 801cf32:	bf00      	nop
 801cf34:	200036a8 	.word	0x200036a8
 801cf38:	20003710 	.word	0x20003710
 801cf3c:	20003778 	.word	0x20003778

0801cf40 <global_stdio_init.part.0>:
 801cf40:	b510      	push	{r4, lr}
 801cf42:	4b0b      	ldr	r3, [pc, #44]	@ (801cf70 <global_stdio_init.part.0+0x30>)
 801cf44:	4c0b      	ldr	r4, [pc, #44]	@ (801cf74 <global_stdio_init.part.0+0x34>)
 801cf46:	4a0c      	ldr	r2, [pc, #48]	@ (801cf78 <global_stdio_init.part.0+0x38>)
 801cf48:	601a      	str	r2, [r3, #0]
 801cf4a:	4620      	mov	r0, r4
 801cf4c:	2200      	movs	r2, #0
 801cf4e:	2104      	movs	r1, #4
 801cf50:	f7ff ff94 	bl	801ce7c <std>
 801cf54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cf58:	2201      	movs	r2, #1
 801cf5a:	2109      	movs	r1, #9
 801cf5c:	f7ff ff8e 	bl	801ce7c <std>
 801cf60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cf64:	2202      	movs	r2, #2
 801cf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf6a:	2112      	movs	r1, #18
 801cf6c:	f7ff bf86 	b.w	801ce7c <std>
 801cf70:	200037e0 	.word	0x200037e0
 801cf74:	200036a8 	.word	0x200036a8
 801cf78:	0801cee9 	.word	0x0801cee9

0801cf7c <__sfp_lock_acquire>:
 801cf7c:	4801      	ldr	r0, [pc, #4]	@ (801cf84 <__sfp_lock_acquire+0x8>)
 801cf7e:	f000 bb60 	b.w	801d642 <__retarget_lock_acquire_recursive>
 801cf82:	bf00      	nop
 801cf84:	200037e9 	.word	0x200037e9

0801cf88 <__sfp_lock_release>:
 801cf88:	4801      	ldr	r0, [pc, #4]	@ (801cf90 <__sfp_lock_release+0x8>)
 801cf8a:	f000 bb5b 	b.w	801d644 <__retarget_lock_release_recursive>
 801cf8e:	bf00      	nop
 801cf90:	200037e9 	.word	0x200037e9

0801cf94 <__sinit>:
 801cf94:	b510      	push	{r4, lr}
 801cf96:	4604      	mov	r4, r0
 801cf98:	f7ff fff0 	bl	801cf7c <__sfp_lock_acquire>
 801cf9c:	6a23      	ldr	r3, [r4, #32]
 801cf9e:	b11b      	cbz	r3, 801cfa8 <__sinit+0x14>
 801cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfa4:	f7ff bff0 	b.w	801cf88 <__sfp_lock_release>
 801cfa8:	4b04      	ldr	r3, [pc, #16]	@ (801cfbc <__sinit+0x28>)
 801cfaa:	6223      	str	r3, [r4, #32]
 801cfac:	4b04      	ldr	r3, [pc, #16]	@ (801cfc0 <__sinit+0x2c>)
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d1f5      	bne.n	801cfa0 <__sinit+0xc>
 801cfb4:	f7ff ffc4 	bl	801cf40 <global_stdio_init.part.0>
 801cfb8:	e7f2      	b.n	801cfa0 <__sinit+0xc>
 801cfba:	bf00      	nop
 801cfbc:	0801cf01 	.word	0x0801cf01
 801cfc0:	200037e0 	.word	0x200037e0

0801cfc4 <_fwalk_sglue>:
 801cfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfc8:	4607      	mov	r7, r0
 801cfca:	4688      	mov	r8, r1
 801cfcc:	4614      	mov	r4, r2
 801cfce:	2600      	movs	r6, #0
 801cfd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cfd4:	f1b9 0901 	subs.w	r9, r9, #1
 801cfd8:	d505      	bpl.n	801cfe6 <_fwalk_sglue+0x22>
 801cfda:	6824      	ldr	r4, [r4, #0]
 801cfdc:	2c00      	cmp	r4, #0
 801cfde:	d1f7      	bne.n	801cfd0 <_fwalk_sglue+0xc>
 801cfe0:	4630      	mov	r0, r6
 801cfe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfe6:	89ab      	ldrh	r3, [r5, #12]
 801cfe8:	2b01      	cmp	r3, #1
 801cfea:	d907      	bls.n	801cffc <_fwalk_sglue+0x38>
 801cfec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cff0:	3301      	adds	r3, #1
 801cff2:	d003      	beq.n	801cffc <_fwalk_sglue+0x38>
 801cff4:	4629      	mov	r1, r5
 801cff6:	4638      	mov	r0, r7
 801cff8:	47c0      	blx	r8
 801cffa:	4306      	orrs	r6, r0
 801cffc:	3568      	adds	r5, #104	@ 0x68
 801cffe:	e7e9      	b.n	801cfd4 <_fwalk_sglue+0x10>

0801d000 <_fwrite_r>:
 801d000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d004:	9c08      	ldr	r4, [sp, #32]
 801d006:	468a      	mov	sl, r1
 801d008:	4690      	mov	r8, r2
 801d00a:	fb02 f903 	mul.w	r9, r2, r3
 801d00e:	4606      	mov	r6, r0
 801d010:	b118      	cbz	r0, 801d01a <_fwrite_r+0x1a>
 801d012:	6a03      	ldr	r3, [r0, #32]
 801d014:	b90b      	cbnz	r3, 801d01a <_fwrite_r+0x1a>
 801d016:	f7ff ffbd 	bl	801cf94 <__sinit>
 801d01a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d01c:	07dd      	lsls	r5, r3, #31
 801d01e:	d405      	bmi.n	801d02c <_fwrite_r+0x2c>
 801d020:	89a3      	ldrh	r3, [r4, #12]
 801d022:	0598      	lsls	r0, r3, #22
 801d024:	d402      	bmi.n	801d02c <_fwrite_r+0x2c>
 801d026:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d028:	f000 fb0b 	bl	801d642 <__retarget_lock_acquire_recursive>
 801d02c:	89a3      	ldrh	r3, [r4, #12]
 801d02e:	0719      	lsls	r1, r3, #28
 801d030:	d516      	bpl.n	801d060 <_fwrite_r+0x60>
 801d032:	6923      	ldr	r3, [r4, #16]
 801d034:	b1a3      	cbz	r3, 801d060 <_fwrite_r+0x60>
 801d036:	2500      	movs	r5, #0
 801d038:	454d      	cmp	r5, r9
 801d03a:	d01f      	beq.n	801d07c <_fwrite_r+0x7c>
 801d03c:	68a7      	ldr	r7, [r4, #8]
 801d03e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d042:	3f01      	subs	r7, #1
 801d044:	2f00      	cmp	r7, #0
 801d046:	60a7      	str	r7, [r4, #8]
 801d048:	da04      	bge.n	801d054 <_fwrite_r+0x54>
 801d04a:	69a3      	ldr	r3, [r4, #24]
 801d04c:	429f      	cmp	r7, r3
 801d04e:	db0f      	blt.n	801d070 <_fwrite_r+0x70>
 801d050:	290a      	cmp	r1, #10
 801d052:	d00d      	beq.n	801d070 <_fwrite_r+0x70>
 801d054:	6823      	ldr	r3, [r4, #0]
 801d056:	1c5a      	adds	r2, r3, #1
 801d058:	6022      	str	r2, [r4, #0]
 801d05a:	7019      	strb	r1, [r3, #0]
 801d05c:	3501      	adds	r5, #1
 801d05e:	e7eb      	b.n	801d038 <_fwrite_r+0x38>
 801d060:	4621      	mov	r1, r4
 801d062:	4630      	mov	r0, r6
 801d064:	f000 f970 	bl	801d348 <__swsetup_r>
 801d068:	2800      	cmp	r0, #0
 801d06a:	d0e4      	beq.n	801d036 <_fwrite_r+0x36>
 801d06c:	2500      	movs	r5, #0
 801d06e:	e005      	b.n	801d07c <_fwrite_r+0x7c>
 801d070:	4622      	mov	r2, r4
 801d072:	4630      	mov	r0, r6
 801d074:	f000 f92a 	bl	801d2cc <__swbuf_r>
 801d078:	3001      	adds	r0, #1
 801d07a:	d1ef      	bne.n	801d05c <_fwrite_r+0x5c>
 801d07c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d07e:	07da      	lsls	r2, r3, #31
 801d080:	d405      	bmi.n	801d08e <_fwrite_r+0x8e>
 801d082:	89a3      	ldrh	r3, [r4, #12]
 801d084:	059b      	lsls	r3, r3, #22
 801d086:	d402      	bmi.n	801d08e <_fwrite_r+0x8e>
 801d088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d08a:	f000 fadb 	bl	801d644 <__retarget_lock_release_recursive>
 801d08e:	fbb5 f0f8 	udiv	r0, r5, r8
 801d092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d098 <fwrite>:
 801d098:	b507      	push	{r0, r1, r2, lr}
 801d09a:	9300      	str	r3, [sp, #0]
 801d09c:	4613      	mov	r3, r2
 801d09e:	460a      	mov	r2, r1
 801d0a0:	4601      	mov	r1, r0
 801d0a2:	4803      	ldr	r0, [pc, #12]	@ (801d0b0 <fwrite+0x18>)
 801d0a4:	6800      	ldr	r0, [r0, #0]
 801d0a6:	f7ff ffab 	bl	801d000 <_fwrite_r>
 801d0aa:	b003      	add	sp, #12
 801d0ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801d0b0:	20000170 	.word	0x20000170

0801d0b4 <iprintf>:
 801d0b4:	b40f      	push	{r0, r1, r2, r3}
 801d0b6:	b507      	push	{r0, r1, r2, lr}
 801d0b8:	4906      	ldr	r1, [pc, #24]	@ (801d0d4 <iprintf+0x20>)
 801d0ba:	ab04      	add	r3, sp, #16
 801d0bc:	6808      	ldr	r0, [r1, #0]
 801d0be:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0c2:	6881      	ldr	r1, [r0, #8]
 801d0c4:	9301      	str	r3, [sp, #4]
 801d0c6:	f002 fdcf 	bl	801fc68 <_vfiprintf_r>
 801d0ca:	b003      	add	sp, #12
 801d0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0d0:	b004      	add	sp, #16
 801d0d2:	4770      	bx	lr
 801d0d4:	20000170 	.word	0x20000170

0801d0d8 <_puts_r>:
 801d0d8:	6a03      	ldr	r3, [r0, #32]
 801d0da:	b570      	push	{r4, r5, r6, lr}
 801d0dc:	6884      	ldr	r4, [r0, #8]
 801d0de:	4605      	mov	r5, r0
 801d0e0:	460e      	mov	r6, r1
 801d0e2:	b90b      	cbnz	r3, 801d0e8 <_puts_r+0x10>
 801d0e4:	f7ff ff56 	bl	801cf94 <__sinit>
 801d0e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d0ea:	07db      	lsls	r3, r3, #31
 801d0ec:	d405      	bmi.n	801d0fa <_puts_r+0x22>
 801d0ee:	89a3      	ldrh	r3, [r4, #12]
 801d0f0:	0598      	lsls	r0, r3, #22
 801d0f2:	d402      	bmi.n	801d0fa <_puts_r+0x22>
 801d0f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d0f6:	f000 faa4 	bl	801d642 <__retarget_lock_acquire_recursive>
 801d0fa:	89a3      	ldrh	r3, [r4, #12]
 801d0fc:	0719      	lsls	r1, r3, #28
 801d0fe:	d502      	bpl.n	801d106 <_puts_r+0x2e>
 801d100:	6923      	ldr	r3, [r4, #16]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d135      	bne.n	801d172 <_puts_r+0x9a>
 801d106:	4621      	mov	r1, r4
 801d108:	4628      	mov	r0, r5
 801d10a:	f000 f91d 	bl	801d348 <__swsetup_r>
 801d10e:	b380      	cbz	r0, 801d172 <_puts_r+0x9a>
 801d110:	f04f 35ff 	mov.w	r5, #4294967295
 801d114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d116:	07da      	lsls	r2, r3, #31
 801d118:	d405      	bmi.n	801d126 <_puts_r+0x4e>
 801d11a:	89a3      	ldrh	r3, [r4, #12]
 801d11c:	059b      	lsls	r3, r3, #22
 801d11e:	d402      	bmi.n	801d126 <_puts_r+0x4e>
 801d120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d122:	f000 fa8f 	bl	801d644 <__retarget_lock_release_recursive>
 801d126:	4628      	mov	r0, r5
 801d128:	bd70      	pop	{r4, r5, r6, pc}
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	da04      	bge.n	801d138 <_puts_r+0x60>
 801d12e:	69a2      	ldr	r2, [r4, #24]
 801d130:	429a      	cmp	r2, r3
 801d132:	dc17      	bgt.n	801d164 <_puts_r+0x8c>
 801d134:	290a      	cmp	r1, #10
 801d136:	d015      	beq.n	801d164 <_puts_r+0x8c>
 801d138:	6823      	ldr	r3, [r4, #0]
 801d13a:	1c5a      	adds	r2, r3, #1
 801d13c:	6022      	str	r2, [r4, #0]
 801d13e:	7019      	strb	r1, [r3, #0]
 801d140:	68a3      	ldr	r3, [r4, #8]
 801d142:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d146:	3b01      	subs	r3, #1
 801d148:	60a3      	str	r3, [r4, #8]
 801d14a:	2900      	cmp	r1, #0
 801d14c:	d1ed      	bne.n	801d12a <_puts_r+0x52>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	da11      	bge.n	801d176 <_puts_r+0x9e>
 801d152:	4622      	mov	r2, r4
 801d154:	210a      	movs	r1, #10
 801d156:	4628      	mov	r0, r5
 801d158:	f000 f8b8 	bl	801d2cc <__swbuf_r>
 801d15c:	3001      	adds	r0, #1
 801d15e:	d0d7      	beq.n	801d110 <_puts_r+0x38>
 801d160:	250a      	movs	r5, #10
 801d162:	e7d7      	b.n	801d114 <_puts_r+0x3c>
 801d164:	4622      	mov	r2, r4
 801d166:	4628      	mov	r0, r5
 801d168:	f000 f8b0 	bl	801d2cc <__swbuf_r>
 801d16c:	3001      	adds	r0, #1
 801d16e:	d1e7      	bne.n	801d140 <_puts_r+0x68>
 801d170:	e7ce      	b.n	801d110 <_puts_r+0x38>
 801d172:	3e01      	subs	r6, #1
 801d174:	e7e4      	b.n	801d140 <_puts_r+0x68>
 801d176:	6823      	ldr	r3, [r4, #0]
 801d178:	1c5a      	adds	r2, r3, #1
 801d17a:	6022      	str	r2, [r4, #0]
 801d17c:	220a      	movs	r2, #10
 801d17e:	701a      	strb	r2, [r3, #0]
 801d180:	e7ee      	b.n	801d160 <_puts_r+0x88>
	...

0801d184 <puts>:
 801d184:	4b02      	ldr	r3, [pc, #8]	@ (801d190 <puts+0xc>)
 801d186:	4601      	mov	r1, r0
 801d188:	6818      	ldr	r0, [r3, #0]
 801d18a:	f7ff bfa5 	b.w	801d0d8 <_puts_r>
 801d18e:	bf00      	nop
 801d190:	20000170 	.word	0x20000170

0801d194 <siprintf>:
 801d194:	b40e      	push	{r1, r2, r3}
 801d196:	b500      	push	{lr}
 801d198:	b09c      	sub	sp, #112	@ 0x70
 801d19a:	ab1d      	add	r3, sp, #116	@ 0x74
 801d19c:	9002      	str	r0, [sp, #8]
 801d19e:	9006      	str	r0, [sp, #24]
 801d1a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d1a4:	4809      	ldr	r0, [pc, #36]	@ (801d1cc <siprintf+0x38>)
 801d1a6:	9107      	str	r1, [sp, #28]
 801d1a8:	9104      	str	r1, [sp, #16]
 801d1aa:	4909      	ldr	r1, [pc, #36]	@ (801d1d0 <siprintf+0x3c>)
 801d1ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1b0:	9105      	str	r1, [sp, #20]
 801d1b2:	6800      	ldr	r0, [r0, #0]
 801d1b4:	9301      	str	r3, [sp, #4]
 801d1b6:	a902      	add	r1, sp, #8
 801d1b8:	f002 fc30 	bl	801fa1c <_svfiprintf_r>
 801d1bc:	9b02      	ldr	r3, [sp, #8]
 801d1be:	2200      	movs	r2, #0
 801d1c0:	701a      	strb	r2, [r3, #0]
 801d1c2:	b01c      	add	sp, #112	@ 0x70
 801d1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1c8:	b003      	add	sp, #12
 801d1ca:	4770      	bx	lr
 801d1cc:	20000170 	.word	0x20000170
 801d1d0:	ffff0208 	.word	0xffff0208

0801d1d4 <__sread>:
 801d1d4:	b510      	push	{r4, lr}
 801d1d6:	460c      	mov	r4, r1
 801d1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1dc:	f000 f9d2 	bl	801d584 <_read_r>
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	bfab      	itete	ge
 801d1e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d1e6:	89a3      	ldrhlt	r3, [r4, #12]
 801d1e8:	181b      	addge	r3, r3, r0
 801d1ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d1ee:	bfac      	ite	ge
 801d1f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d1f2:	81a3      	strhlt	r3, [r4, #12]
 801d1f4:	bd10      	pop	{r4, pc}

0801d1f6 <__swrite>:
 801d1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1fa:	461f      	mov	r7, r3
 801d1fc:	898b      	ldrh	r3, [r1, #12]
 801d1fe:	05db      	lsls	r3, r3, #23
 801d200:	4605      	mov	r5, r0
 801d202:	460c      	mov	r4, r1
 801d204:	4616      	mov	r6, r2
 801d206:	d505      	bpl.n	801d214 <__swrite+0x1e>
 801d208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d20c:	2302      	movs	r3, #2
 801d20e:	2200      	movs	r2, #0
 801d210:	f000 f9a6 	bl	801d560 <_lseek_r>
 801d214:	89a3      	ldrh	r3, [r4, #12]
 801d216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d21a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d21e:	81a3      	strh	r3, [r4, #12]
 801d220:	4632      	mov	r2, r6
 801d222:	463b      	mov	r3, r7
 801d224:	4628      	mov	r0, r5
 801d226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d22a:	f000 b9cd 	b.w	801d5c8 <_write_r>

0801d22e <__sseek>:
 801d22e:	b510      	push	{r4, lr}
 801d230:	460c      	mov	r4, r1
 801d232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d236:	f000 f993 	bl	801d560 <_lseek_r>
 801d23a:	1c43      	adds	r3, r0, #1
 801d23c:	89a3      	ldrh	r3, [r4, #12]
 801d23e:	bf15      	itete	ne
 801d240:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d24a:	81a3      	strheq	r3, [r4, #12]
 801d24c:	bf18      	it	ne
 801d24e:	81a3      	strhne	r3, [r4, #12]
 801d250:	bd10      	pop	{r4, pc}

0801d252 <__sclose>:
 801d252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d256:	f000 b973 	b.w	801d540 <_close_r>

0801d25a <_vsniprintf_r>:
 801d25a:	b530      	push	{r4, r5, lr}
 801d25c:	4614      	mov	r4, r2
 801d25e:	2c00      	cmp	r4, #0
 801d260:	b09b      	sub	sp, #108	@ 0x6c
 801d262:	4605      	mov	r5, r0
 801d264:	461a      	mov	r2, r3
 801d266:	da05      	bge.n	801d274 <_vsniprintf_r+0x1a>
 801d268:	238b      	movs	r3, #139	@ 0x8b
 801d26a:	6003      	str	r3, [r0, #0]
 801d26c:	f04f 30ff 	mov.w	r0, #4294967295
 801d270:	b01b      	add	sp, #108	@ 0x6c
 801d272:	bd30      	pop	{r4, r5, pc}
 801d274:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d278:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d27c:	bf14      	ite	ne
 801d27e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d282:	4623      	moveq	r3, r4
 801d284:	9302      	str	r3, [sp, #8]
 801d286:	9305      	str	r3, [sp, #20]
 801d288:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d28c:	9100      	str	r1, [sp, #0]
 801d28e:	9104      	str	r1, [sp, #16]
 801d290:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d294:	4669      	mov	r1, sp
 801d296:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d298:	f002 fbc0 	bl	801fa1c <_svfiprintf_r>
 801d29c:	1c43      	adds	r3, r0, #1
 801d29e:	bfbc      	itt	lt
 801d2a0:	238b      	movlt	r3, #139	@ 0x8b
 801d2a2:	602b      	strlt	r3, [r5, #0]
 801d2a4:	2c00      	cmp	r4, #0
 801d2a6:	d0e3      	beq.n	801d270 <_vsniprintf_r+0x16>
 801d2a8:	9b00      	ldr	r3, [sp, #0]
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	701a      	strb	r2, [r3, #0]
 801d2ae:	e7df      	b.n	801d270 <_vsniprintf_r+0x16>

0801d2b0 <vsniprintf>:
 801d2b0:	b507      	push	{r0, r1, r2, lr}
 801d2b2:	9300      	str	r3, [sp, #0]
 801d2b4:	4613      	mov	r3, r2
 801d2b6:	460a      	mov	r2, r1
 801d2b8:	4601      	mov	r1, r0
 801d2ba:	4803      	ldr	r0, [pc, #12]	@ (801d2c8 <vsniprintf+0x18>)
 801d2bc:	6800      	ldr	r0, [r0, #0]
 801d2be:	f7ff ffcc 	bl	801d25a <_vsniprintf_r>
 801d2c2:	b003      	add	sp, #12
 801d2c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2c8:	20000170 	.word	0x20000170

0801d2cc <__swbuf_r>:
 801d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ce:	460e      	mov	r6, r1
 801d2d0:	4614      	mov	r4, r2
 801d2d2:	4605      	mov	r5, r0
 801d2d4:	b118      	cbz	r0, 801d2de <__swbuf_r+0x12>
 801d2d6:	6a03      	ldr	r3, [r0, #32]
 801d2d8:	b90b      	cbnz	r3, 801d2de <__swbuf_r+0x12>
 801d2da:	f7ff fe5b 	bl	801cf94 <__sinit>
 801d2de:	69a3      	ldr	r3, [r4, #24]
 801d2e0:	60a3      	str	r3, [r4, #8]
 801d2e2:	89a3      	ldrh	r3, [r4, #12]
 801d2e4:	071a      	lsls	r2, r3, #28
 801d2e6:	d501      	bpl.n	801d2ec <__swbuf_r+0x20>
 801d2e8:	6923      	ldr	r3, [r4, #16]
 801d2ea:	b943      	cbnz	r3, 801d2fe <__swbuf_r+0x32>
 801d2ec:	4621      	mov	r1, r4
 801d2ee:	4628      	mov	r0, r5
 801d2f0:	f000 f82a 	bl	801d348 <__swsetup_r>
 801d2f4:	b118      	cbz	r0, 801d2fe <__swbuf_r+0x32>
 801d2f6:	f04f 37ff 	mov.w	r7, #4294967295
 801d2fa:	4638      	mov	r0, r7
 801d2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d2fe:	6823      	ldr	r3, [r4, #0]
 801d300:	6922      	ldr	r2, [r4, #16]
 801d302:	1a98      	subs	r0, r3, r2
 801d304:	6963      	ldr	r3, [r4, #20]
 801d306:	b2f6      	uxtb	r6, r6
 801d308:	4283      	cmp	r3, r0
 801d30a:	4637      	mov	r7, r6
 801d30c:	dc05      	bgt.n	801d31a <__swbuf_r+0x4e>
 801d30e:	4621      	mov	r1, r4
 801d310:	4628      	mov	r0, r5
 801d312:	f002 fe45 	bl	801ffa0 <_fflush_r>
 801d316:	2800      	cmp	r0, #0
 801d318:	d1ed      	bne.n	801d2f6 <__swbuf_r+0x2a>
 801d31a:	68a3      	ldr	r3, [r4, #8]
 801d31c:	3b01      	subs	r3, #1
 801d31e:	60a3      	str	r3, [r4, #8]
 801d320:	6823      	ldr	r3, [r4, #0]
 801d322:	1c5a      	adds	r2, r3, #1
 801d324:	6022      	str	r2, [r4, #0]
 801d326:	701e      	strb	r6, [r3, #0]
 801d328:	6962      	ldr	r2, [r4, #20]
 801d32a:	1c43      	adds	r3, r0, #1
 801d32c:	429a      	cmp	r2, r3
 801d32e:	d004      	beq.n	801d33a <__swbuf_r+0x6e>
 801d330:	89a3      	ldrh	r3, [r4, #12]
 801d332:	07db      	lsls	r3, r3, #31
 801d334:	d5e1      	bpl.n	801d2fa <__swbuf_r+0x2e>
 801d336:	2e0a      	cmp	r6, #10
 801d338:	d1df      	bne.n	801d2fa <__swbuf_r+0x2e>
 801d33a:	4621      	mov	r1, r4
 801d33c:	4628      	mov	r0, r5
 801d33e:	f002 fe2f 	bl	801ffa0 <_fflush_r>
 801d342:	2800      	cmp	r0, #0
 801d344:	d0d9      	beq.n	801d2fa <__swbuf_r+0x2e>
 801d346:	e7d6      	b.n	801d2f6 <__swbuf_r+0x2a>

0801d348 <__swsetup_r>:
 801d348:	b538      	push	{r3, r4, r5, lr}
 801d34a:	4b29      	ldr	r3, [pc, #164]	@ (801d3f0 <__swsetup_r+0xa8>)
 801d34c:	4605      	mov	r5, r0
 801d34e:	6818      	ldr	r0, [r3, #0]
 801d350:	460c      	mov	r4, r1
 801d352:	b118      	cbz	r0, 801d35c <__swsetup_r+0x14>
 801d354:	6a03      	ldr	r3, [r0, #32]
 801d356:	b90b      	cbnz	r3, 801d35c <__swsetup_r+0x14>
 801d358:	f7ff fe1c 	bl	801cf94 <__sinit>
 801d35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d360:	0719      	lsls	r1, r3, #28
 801d362:	d422      	bmi.n	801d3aa <__swsetup_r+0x62>
 801d364:	06da      	lsls	r2, r3, #27
 801d366:	d407      	bmi.n	801d378 <__swsetup_r+0x30>
 801d368:	2209      	movs	r2, #9
 801d36a:	602a      	str	r2, [r5, #0]
 801d36c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d370:	81a3      	strh	r3, [r4, #12]
 801d372:	f04f 30ff 	mov.w	r0, #4294967295
 801d376:	e033      	b.n	801d3e0 <__swsetup_r+0x98>
 801d378:	0758      	lsls	r0, r3, #29
 801d37a:	d512      	bpl.n	801d3a2 <__swsetup_r+0x5a>
 801d37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d37e:	b141      	cbz	r1, 801d392 <__swsetup_r+0x4a>
 801d380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d384:	4299      	cmp	r1, r3
 801d386:	d002      	beq.n	801d38e <__swsetup_r+0x46>
 801d388:	4628      	mov	r0, r5
 801d38a:	f000 ffe5 	bl	801e358 <_free_r>
 801d38e:	2300      	movs	r3, #0
 801d390:	6363      	str	r3, [r4, #52]	@ 0x34
 801d392:	89a3      	ldrh	r3, [r4, #12]
 801d394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d398:	81a3      	strh	r3, [r4, #12]
 801d39a:	2300      	movs	r3, #0
 801d39c:	6063      	str	r3, [r4, #4]
 801d39e:	6923      	ldr	r3, [r4, #16]
 801d3a0:	6023      	str	r3, [r4, #0]
 801d3a2:	89a3      	ldrh	r3, [r4, #12]
 801d3a4:	f043 0308 	orr.w	r3, r3, #8
 801d3a8:	81a3      	strh	r3, [r4, #12]
 801d3aa:	6923      	ldr	r3, [r4, #16]
 801d3ac:	b94b      	cbnz	r3, 801d3c2 <__swsetup_r+0x7a>
 801d3ae:	89a3      	ldrh	r3, [r4, #12]
 801d3b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d3b8:	d003      	beq.n	801d3c2 <__swsetup_r+0x7a>
 801d3ba:	4621      	mov	r1, r4
 801d3bc:	4628      	mov	r0, r5
 801d3be:	f002 fe4f 	bl	8020060 <__smakebuf_r>
 801d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3c6:	f013 0201 	ands.w	r2, r3, #1
 801d3ca:	d00a      	beq.n	801d3e2 <__swsetup_r+0x9a>
 801d3cc:	2200      	movs	r2, #0
 801d3ce:	60a2      	str	r2, [r4, #8]
 801d3d0:	6962      	ldr	r2, [r4, #20]
 801d3d2:	4252      	negs	r2, r2
 801d3d4:	61a2      	str	r2, [r4, #24]
 801d3d6:	6922      	ldr	r2, [r4, #16]
 801d3d8:	b942      	cbnz	r2, 801d3ec <__swsetup_r+0xa4>
 801d3da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d3de:	d1c5      	bne.n	801d36c <__swsetup_r+0x24>
 801d3e0:	bd38      	pop	{r3, r4, r5, pc}
 801d3e2:	0799      	lsls	r1, r3, #30
 801d3e4:	bf58      	it	pl
 801d3e6:	6962      	ldrpl	r2, [r4, #20]
 801d3e8:	60a2      	str	r2, [r4, #8]
 801d3ea:	e7f4      	b.n	801d3d6 <__swsetup_r+0x8e>
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	e7f7      	b.n	801d3e0 <__swsetup_r+0x98>
 801d3f0:	20000170 	.word	0x20000170

0801d3f4 <memmove>:
 801d3f4:	4288      	cmp	r0, r1
 801d3f6:	b510      	push	{r4, lr}
 801d3f8:	eb01 0402 	add.w	r4, r1, r2
 801d3fc:	d902      	bls.n	801d404 <memmove+0x10>
 801d3fe:	4284      	cmp	r4, r0
 801d400:	4623      	mov	r3, r4
 801d402:	d807      	bhi.n	801d414 <memmove+0x20>
 801d404:	1e43      	subs	r3, r0, #1
 801d406:	42a1      	cmp	r1, r4
 801d408:	d008      	beq.n	801d41c <memmove+0x28>
 801d40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d412:	e7f8      	b.n	801d406 <memmove+0x12>
 801d414:	4402      	add	r2, r0
 801d416:	4601      	mov	r1, r0
 801d418:	428a      	cmp	r2, r1
 801d41a:	d100      	bne.n	801d41e <memmove+0x2a>
 801d41c:	bd10      	pop	{r4, pc}
 801d41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d426:	e7f7      	b.n	801d418 <memmove+0x24>

0801d428 <memset>:
 801d428:	4402      	add	r2, r0
 801d42a:	4603      	mov	r3, r0
 801d42c:	4293      	cmp	r3, r2
 801d42e:	d100      	bne.n	801d432 <memset+0xa>
 801d430:	4770      	bx	lr
 801d432:	f803 1b01 	strb.w	r1, [r3], #1
 801d436:	e7f9      	b.n	801d42c <memset+0x4>

0801d438 <strchr>:
 801d438:	b2c9      	uxtb	r1, r1
 801d43a:	4603      	mov	r3, r0
 801d43c:	4618      	mov	r0, r3
 801d43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d442:	b112      	cbz	r2, 801d44a <strchr+0x12>
 801d444:	428a      	cmp	r2, r1
 801d446:	d1f9      	bne.n	801d43c <strchr+0x4>
 801d448:	4770      	bx	lr
 801d44a:	2900      	cmp	r1, #0
 801d44c:	bf18      	it	ne
 801d44e:	2000      	movne	r0, #0
 801d450:	4770      	bx	lr
	...

0801d454 <strtok>:
 801d454:	4b16      	ldr	r3, [pc, #88]	@ (801d4b0 <strtok+0x5c>)
 801d456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d45a:	681f      	ldr	r7, [r3, #0]
 801d45c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d45e:	4605      	mov	r5, r0
 801d460:	460e      	mov	r6, r1
 801d462:	b9ec      	cbnz	r4, 801d4a0 <strtok+0x4c>
 801d464:	2050      	movs	r0, #80	@ 0x50
 801d466:	f7fe fd61 	bl	801bf2c <malloc>
 801d46a:	4602      	mov	r2, r0
 801d46c:	6478      	str	r0, [r7, #68]	@ 0x44
 801d46e:	b920      	cbnz	r0, 801d47a <strtok+0x26>
 801d470:	4b10      	ldr	r3, [pc, #64]	@ (801d4b4 <strtok+0x60>)
 801d472:	4811      	ldr	r0, [pc, #68]	@ (801d4b8 <strtok+0x64>)
 801d474:	215b      	movs	r1, #91	@ 0x5b
 801d476:	f000 f903 	bl	801d680 <__assert_func>
 801d47a:	e9c0 4400 	strd	r4, r4, [r0]
 801d47e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d482:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d486:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801d48a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801d48e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801d492:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801d496:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801d49a:	6184      	str	r4, [r0, #24]
 801d49c:	7704      	strb	r4, [r0, #28]
 801d49e:	6244      	str	r4, [r0, #36]	@ 0x24
 801d4a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d4a2:	4631      	mov	r1, r6
 801d4a4:	4628      	mov	r0, r5
 801d4a6:	2301      	movs	r3, #1
 801d4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ac:	f000 b806 	b.w	801d4bc <__strtok_r>
 801d4b0:	20000170 	.word	0x20000170
 801d4b4:	0802316e 	.word	0x0802316e
 801d4b8:	08023185 	.word	0x08023185

0801d4bc <__strtok_r>:
 801d4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4be:	4604      	mov	r4, r0
 801d4c0:	b908      	cbnz	r0, 801d4c6 <__strtok_r+0xa>
 801d4c2:	6814      	ldr	r4, [r2, #0]
 801d4c4:	b144      	cbz	r4, 801d4d8 <__strtok_r+0x1c>
 801d4c6:	4620      	mov	r0, r4
 801d4c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d4cc:	460f      	mov	r7, r1
 801d4ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d4d2:	b91e      	cbnz	r6, 801d4dc <__strtok_r+0x20>
 801d4d4:	b965      	cbnz	r5, 801d4f0 <__strtok_r+0x34>
 801d4d6:	6015      	str	r5, [r2, #0]
 801d4d8:	2000      	movs	r0, #0
 801d4da:	e005      	b.n	801d4e8 <__strtok_r+0x2c>
 801d4dc:	42b5      	cmp	r5, r6
 801d4de:	d1f6      	bne.n	801d4ce <__strtok_r+0x12>
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d1f0      	bne.n	801d4c6 <__strtok_r+0xa>
 801d4e4:	6014      	str	r4, [r2, #0]
 801d4e6:	7003      	strb	r3, [r0, #0]
 801d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4ea:	461c      	mov	r4, r3
 801d4ec:	e00c      	b.n	801d508 <__strtok_r+0x4c>
 801d4ee:	b915      	cbnz	r5, 801d4f6 <__strtok_r+0x3a>
 801d4f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d4f4:	460e      	mov	r6, r1
 801d4f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d4fa:	42ab      	cmp	r3, r5
 801d4fc:	d1f7      	bne.n	801d4ee <__strtok_r+0x32>
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d0f3      	beq.n	801d4ea <__strtok_r+0x2e>
 801d502:	2300      	movs	r3, #0
 801d504:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d508:	6014      	str	r4, [r2, #0]
 801d50a:	e7ed      	b.n	801d4e8 <__strtok_r+0x2c>

0801d50c <strstr>:
 801d50c:	780a      	ldrb	r2, [r1, #0]
 801d50e:	b570      	push	{r4, r5, r6, lr}
 801d510:	b96a      	cbnz	r2, 801d52e <strstr+0x22>
 801d512:	bd70      	pop	{r4, r5, r6, pc}
 801d514:	429a      	cmp	r2, r3
 801d516:	d109      	bne.n	801d52c <strstr+0x20>
 801d518:	460c      	mov	r4, r1
 801d51a:	4605      	mov	r5, r0
 801d51c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d520:	2b00      	cmp	r3, #0
 801d522:	d0f6      	beq.n	801d512 <strstr+0x6>
 801d524:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d528:	429e      	cmp	r6, r3
 801d52a:	d0f7      	beq.n	801d51c <strstr+0x10>
 801d52c:	3001      	adds	r0, #1
 801d52e:	7803      	ldrb	r3, [r0, #0]
 801d530:	2b00      	cmp	r3, #0
 801d532:	d1ef      	bne.n	801d514 <strstr+0x8>
 801d534:	4618      	mov	r0, r3
 801d536:	e7ec      	b.n	801d512 <strstr+0x6>

0801d538 <_localeconv_r>:
 801d538:	4800      	ldr	r0, [pc, #0]	@ (801d53c <_localeconv_r+0x4>)
 801d53a:	4770      	bx	lr
 801d53c:	200002b0 	.word	0x200002b0

0801d540 <_close_r>:
 801d540:	b538      	push	{r3, r4, r5, lr}
 801d542:	4d06      	ldr	r5, [pc, #24]	@ (801d55c <_close_r+0x1c>)
 801d544:	2300      	movs	r3, #0
 801d546:	4604      	mov	r4, r0
 801d548:	4608      	mov	r0, r1
 801d54a:	602b      	str	r3, [r5, #0]
 801d54c:	f7e6 fae2 	bl	8003b14 <_close>
 801d550:	1c43      	adds	r3, r0, #1
 801d552:	d102      	bne.n	801d55a <_close_r+0x1a>
 801d554:	682b      	ldr	r3, [r5, #0]
 801d556:	b103      	cbz	r3, 801d55a <_close_r+0x1a>
 801d558:	6023      	str	r3, [r4, #0]
 801d55a:	bd38      	pop	{r3, r4, r5, pc}
 801d55c:	200037e4 	.word	0x200037e4

0801d560 <_lseek_r>:
 801d560:	b538      	push	{r3, r4, r5, lr}
 801d562:	4d07      	ldr	r5, [pc, #28]	@ (801d580 <_lseek_r+0x20>)
 801d564:	4604      	mov	r4, r0
 801d566:	4608      	mov	r0, r1
 801d568:	4611      	mov	r1, r2
 801d56a:	2200      	movs	r2, #0
 801d56c:	602a      	str	r2, [r5, #0]
 801d56e:	461a      	mov	r2, r3
 801d570:	f7e6 faf7 	bl	8003b62 <_lseek>
 801d574:	1c43      	adds	r3, r0, #1
 801d576:	d102      	bne.n	801d57e <_lseek_r+0x1e>
 801d578:	682b      	ldr	r3, [r5, #0]
 801d57a:	b103      	cbz	r3, 801d57e <_lseek_r+0x1e>
 801d57c:	6023      	str	r3, [r4, #0]
 801d57e:	bd38      	pop	{r3, r4, r5, pc}
 801d580:	200037e4 	.word	0x200037e4

0801d584 <_read_r>:
 801d584:	b538      	push	{r3, r4, r5, lr}
 801d586:	4d07      	ldr	r5, [pc, #28]	@ (801d5a4 <_read_r+0x20>)
 801d588:	4604      	mov	r4, r0
 801d58a:	4608      	mov	r0, r1
 801d58c:	4611      	mov	r1, r2
 801d58e:	2200      	movs	r2, #0
 801d590:	602a      	str	r2, [r5, #0]
 801d592:	461a      	mov	r2, r3
 801d594:	f7e6 fa85 	bl	8003aa2 <_read>
 801d598:	1c43      	adds	r3, r0, #1
 801d59a:	d102      	bne.n	801d5a2 <_read_r+0x1e>
 801d59c:	682b      	ldr	r3, [r5, #0]
 801d59e:	b103      	cbz	r3, 801d5a2 <_read_r+0x1e>
 801d5a0:	6023      	str	r3, [r4, #0]
 801d5a2:	bd38      	pop	{r3, r4, r5, pc}
 801d5a4:	200037e4 	.word	0x200037e4

0801d5a8 <_sbrk_r>:
 801d5a8:	b538      	push	{r3, r4, r5, lr}
 801d5aa:	4d06      	ldr	r5, [pc, #24]	@ (801d5c4 <_sbrk_r+0x1c>)
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	4604      	mov	r4, r0
 801d5b0:	4608      	mov	r0, r1
 801d5b2:	602b      	str	r3, [r5, #0]
 801d5b4:	f7e6 fae2 	bl	8003b7c <_sbrk>
 801d5b8:	1c43      	adds	r3, r0, #1
 801d5ba:	d102      	bne.n	801d5c2 <_sbrk_r+0x1a>
 801d5bc:	682b      	ldr	r3, [r5, #0]
 801d5be:	b103      	cbz	r3, 801d5c2 <_sbrk_r+0x1a>
 801d5c0:	6023      	str	r3, [r4, #0]
 801d5c2:	bd38      	pop	{r3, r4, r5, pc}
 801d5c4:	200037e4 	.word	0x200037e4

0801d5c8 <_write_r>:
 801d5c8:	b538      	push	{r3, r4, r5, lr}
 801d5ca:	4d07      	ldr	r5, [pc, #28]	@ (801d5e8 <_write_r+0x20>)
 801d5cc:	4604      	mov	r4, r0
 801d5ce:	4608      	mov	r0, r1
 801d5d0:	4611      	mov	r1, r2
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	602a      	str	r2, [r5, #0]
 801d5d6:	461a      	mov	r2, r3
 801d5d8:	f7e6 fa80 	bl	8003adc <_write>
 801d5dc:	1c43      	adds	r3, r0, #1
 801d5de:	d102      	bne.n	801d5e6 <_write_r+0x1e>
 801d5e0:	682b      	ldr	r3, [r5, #0]
 801d5e2:	b103      	cbz	r3, 801d5e6 <_write_r+0x1e>
 801d5e4:	6023      	str	r3, [r4, #0]
 801d5e6:	bd38      	pop	{r3, r4, r5, pc}
 801d5e8:	200037e4 	.word	0x200037e4

0801d5ec <__errno>:
 801d5ec:	4b01      	ldr	r3, [pc, #4]	@ (801d5f4 <__errno+0x8>)
 801d5ee:	6818      	ldr	r0, [r3, #0]
 801d5f0:	4770      	bx	lr
 801d5f2:	bf00      	nop
 801d5f4:	20000170 	.word	0x20000170

0801d5f8 <__libc_init_array>:
 801d5f8:	b570      	push	{r4, r5, r6, lr}
 801d5fa:	4d0d      	ldr	r5, [pc, #52]	@ (801d630 <__libc_init_array+0x38>)
 801d5fc:	4c0d      	ldr	r4, [pc, #52]	@ (801d634 <__libc_init_array+0x3c>)
 801d5fe:	1b64      	subs	r4, r4, r5
 801d600:	10a4      	asrs	r4, r4, #2
 801d602:	2600      	movs	r6, #0
 801d604:	42a6      	cmp	r6, r4
 801d606:	d109      	bne.n	801d61c <__libc_init_array+0x24>
 801d608:	4d0b      	ldr	r5, [pc, #44]	@ (801d638 <__libc_init_array+0x40>)
 801d60a:	4c0c      	ldr	r4, [pc, #48]	@ (801d63c <__libc_init_array+0x44>)
 801d60c:	f003 f98c 	bl	8020928 <_init>
 801d610:	1b64      	subs	r4, r4, r5
 801d612:	10a4      	asrs	r4, r4, #2
 801d614:	2600      	movs	r6, #0
 801d616:	42a6      	cmp	r6, r4
 801d618:	d105      	bne.n	801d626 <__libc_init_array+0x2e>
 801d61a:	bd70      	pop	{r4, r5, r6, pc}
 801d61c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d620:	4798      	blx	r3
 801d622:	3601      	adds	r6, #1
 801d624:	e7ee      	b.n	801d604 <__libc_init_array+0xc>
 801d626:	f855 3b04 	ldr.w	r3, [r5], #4
 801d62a:	4798      	blx	r3
 801d62c:	3601      	adds	r6, #1
 801d62e:	e7f2      	b.n	801d616 <__libc_init_array+0x1e>
 801d630:	080234c4 	.word	0x080234c4
 801d634:	080234c4 	.word	0x080234c4
 801d638:	080234c4 	.word	0x080234c4
 801d63c:	080234c8 	.word	0x080234c8

0801d640 <__retarget_lock_init_recursive>:
 801d640:	4770      	bx	lr

0801d642 <__retarget_lock_acquire_recursive>:
 801d642:	4770      	bx	lr

0801d644 <__retarget_lock_release_recursive>:
 801d644:	4770      	bx	lr

0801d646 <strcpy>:
 801d646:	4603      	mov	r3, r0
 801d648:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d64c:	f803 2b01 	strb.w	r2, [r3], #1
 801d650:	2a00      	cmp	r2, #0
 801d652:	d1f9      	bne.n	801d648 <strcpy+0x2>
 801d654:	4770      	bx	lr

0801d656 <memcpy>:
 801d656:	440a      	add	r2, r1
 801d658:	4291      	cmp	r1, r2
 801d65a:	f100 33ff 	add.w	r3, r0, #4294967295
 801d65e:	d100      	bne.n	801d662 <memcpy+0xc>
 801d660:	4770      	bx	lr
 801d662:	b510      	push	{r4, lr}
 801d664:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d668:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d66c:	4291      	cmp	r1, r2
 801d66e:	d1f9      	bne.n	801d664 <memcpy+0xe>
 801d670:	bd10      	pop	{r4, pc}
	...

0801d674 <nanf>:
 801d674:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801d67c <nanf+0x8>
 801d678:	4770      	bx	lr
 801d67a:	bf00      	nop
 801d67c:	7fc00000 	.word	0x7fc00000

0801d680 <__assert_func>:
 801d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d682:	4614      	mov	r4, r2
 801d684:	461a      	mov	r2, r3
 801d686:	4b09      	ldr	r3, [pc, #36]	@ (801d6ac <__assert_func+0x2c>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	4605      	mov	r5, r0
 801d68c:	68d8      	ldr	r0, [r3, #12]
 801d68e:	b954      	cbnz	r4, 801d6a6 <__assert_func+0x26>
 801d690:	4b07      	ldr	r3, [pc, #28]	@ (801d6b0 <__assert_func+0x30>)
 801d692:	461c      	mov	r4, r3
 801d694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d698:	9100      	str	r1, [sp, #0]
 801d69a:	462b      	mov	r3, r5
 801d69c:	4905      	ldr	r1, [pc, #20]	@ (801d6b4 <__assert_func+0x34>)
 801d69e:	f002 fca7 	bl	801fff0 <fiprintf>
 801d6a2:	f002 fd55 	bl	8020150 <abort>
 801d6a6:	4b04      	ldr	r3, [pc, #16]	@ (801d6b8 <__assert_func+0x38>)
 801d6a8:	e7f4      	b.n	801d694 <__assert_func+0x14>
 801d6aa:	bf00      	nop
 801d6ac:	20000170 	.word	0x20000170
 801d6b0:	0802321a 	.word	0x0802321a
 801d6b4:	080231ec 	.word	0x080231ec
 801d6b8:	080231df 	.word	0x080231df

0801d6bc <quorem>:
 801d6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c0:	6903      	ldr	r3, [r0, #16]
 801d6c2:	690c      	ldr	r4, [r1, #16]
 801d6c4:	42a3      	cmp	r3, r4
 801d6c6:	4607      	mov	r7, r0
 801d6c8:	db7e      	blt.n	801d7c8 <quorem+0x10c>
 801d6ca:	3c01      	subs	r4, #1
 801d6cc:	f101 0814 	add.w	r8, r1, #20
 801d6d0:	00a3      	lsls	r3, r4, #2
 801d6d2:	f100 0514 	add.w	r5, r0, #20
 801d6d6:	9300      	str	r3, [sp, #0]
 801d6d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6dc:	9301      	str	r3, [sp, #4]
 801d6de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d6e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6e6:	3301      	adds	r3, #1
 801d6e8:	429a      	cmp	r2, r3
 801d6ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d6ee:	fbb2 f6f3 	udiv	r6, r2, r3
 801d6f2:	d32e      	bcc.n	801d752 <quorem+0x96>
 801d6f4:	f04f 0a00 	mov.w	sl, #0
 801d6f8:	46c4      	mov	ip, r8
 801d6fa:	46ae      	mov	lr, r5
 801d6fc:	46d3      	mov	fp, sl
 801d6fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d702:	b298      	uxth	r0, r3
 801d704:	fb06 a000 	mla	r0, r6, r0, sl
 801d708:	0c02      	lsrs	r2, r0, #16
 801d70a:	0c1b      	lsrs	r3, r3, #16
 801d70c:	fb06 2303 	mla	r3, r6, r3, r2
 801d710:	f8de 2000 	ldr.w	r2, [lr]
 801d714:	b280      	uxth	r0, r0
 801d716:	b292      	uxth	r2, r2
 801d718:	1a12      	subs	r2, r2, r0
 801d71a:	445a      	add	r2, fp
 801d71c:	f8de 0000 	ldr.w	r0, [lr]
 801d720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d724:	b29b      	uxth	r3, r3
 801d726:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d72a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d72e:	b292      	uxth	r2, r2
 801d730:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d734:	45e1      	cmp	r9, ip
 801d736:	f84e 2b04 	str.w	r2, [lr], #4
 801d73a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d73e:	d2de      	bcs.n	801d6fe <quorem+0x42>
 801d740:	9b00      	ldr	r3, [sp, #0]
 801d742:	58eb      	ldr	r3, [r5, r3]
 801d744:	b92b      	cbnz	r3, 801d752 <quorem+0x96>
 801d746:	9b01      	ldr	r3, [sp, #4]
 801d748:	3b04      	subs	r3, #4
 801d74a:	429d      	cmp	r5, r3
 801d74c:	461a      	mov	r2, r3
 801d74e:	d32f      	bcc.n	801d7b0 <quorem+0xf4>
 801d750:	613c      	str	r4, [r7, #16]
 801d752:	4638      	mov	r0, r7
 801d754:	f001 f90e 	bl	801e974 <__mcmp>
 801d758:	2800      	cmp	r0, #0
 801d75a:	db25      	blt.n	801d7a8 <quorem+0xec>
 801d75c:	4629      	mov	r1, r5
 801d75e:	2000      	movs	r0, #0
 801d760:	f858 2b04 	ldr.w	r2, [r8], #4
 801d764:	f8d1 c000 	ldr.w	ip, [r1]
 801d768:	fa1f fe82 	uxth.w	lr, r2
 801d76c:	fa1f f38c 	uxth.w	r3, ip
 801d770:	eba3 030e 	sub.w	r3, r3, lr
 801d774:	4403      	add	r3, r0
 801d776:	0c12      	lsrs	r2, r2, #16
 801d778:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d77c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d780:	b29b      	uxth	r3, r3
 801d782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d786:	45c1      	cmp	r9, r8
 801d788:	f841 3b04 	str.w	r3, [r1], #4
 801d78c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d790:	d2e6      	bcs.n	801d760 <quorem+0xa4>
 801d792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d79a:	b922      	cbnz	r2, 801d7a6 <quorem+0xea>
 801d79c:	3b04      	subs	r3, #4
 801d79e:	429d      	cmp	r5, r3
 801d7a0:	461a      	mov	r2, r3
 801d7a2:	d30b      	bcc.n	801d7bc <quorem+0x100>
 801d7a4:	613c      	str	r4, [r7, #16]
 801d7a6:	3601      	adds	r6, #1
 801d7a8:	4630      	mov	r0, r6
 801d7aa:	b003      	add	sp, #12
 801d7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b0:	6812      	ldr	r2, [r2, #0]
 801d7b2:	3b04      	subs	r3, #4
 801d7b4:	2a00      	cmp	r2, #0
 801d7b6:	d1cb      	bne.n	801d750 <quorem+0x94>
 801d7b8:	3c01      	subs	r4, #1
 801d7ba:	e7c6      	b.n	801d74a <quorem+0x8e>
 801d7bc:	6812      	ldr	r2, [r2, #0]
 801d7be:	3b04      	subs	r3, #4
 801d7c0:	2a00      	cmp	r2, #0
 801d7c2:	d1ef      	bne.n	801d7a4 <quorem+0xe8>
 801d7c4:	3c01      	subs	r4, #1
 801d7c6:	e7ea      	b.n	801d79e <quorem+0xe2>
 801d7c8:	2000      	movs	r0, #0
 801d7ca:	e7ee      	b.n	801d7aa <quorem+0xee>
 801d7cc:	0000      	movs	r0, r0
	...

0801d7d0 <_dtoa_r>:
 801d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d4:	69c7      	ldr	r7, [r0, #28]
 801d7d6:	b099      	sub	sp, #100	@ 0x64
 801d7d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d7dc:	ec55 4b10 	vmov	r4, r5, d0
 801d7e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d7e2:	9109      	str	r1, [sp, #36]	@ 0x24
 801d7e4:	4683      	mov	fp, r0
 801d7e6:	920e      	str	r2, [sp, #56]	@ 0x38
 801d7e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d7ea:	b97f      	cbnz	r7, 801d80c <_dtoa_r+0x3c>
 801d7ec:	2010      	movs	r0, #16
 801d7ee:	f7fe fb9d 	bl	801bf2c <malloc>
 801d7f2:	4602      	mov	r2, r0
 801d7f4:	f8cb 001c 	str.w	r0, [fp, #28]
 801d7f8:	b920      	cbnz	r0, 801d804 <_dtoa_r+0x34>
 801d7fa:	4ba7      	ldr	r3, [pc, #668]	@ (801da98 <_dtoa_r+0x2c8>)
 801d7fc:	21ef      	movs	r1, #239	@ 0xef
 801d7fe:	48a7      	ldr	r0, [pc, #668]	@ (801da9c <_dtoa_r+0x2cc>)
 801d800:	f7ff ff3e 	bl	801d680 <__assert_func>
 801d804:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d808:	6007      	str	r7, [r0, #0]
 801d80a:	60c7      	str	r7, [r0, #12]
 801d80c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d810:	6819      	ldr	r1, [r3, #0]
 801d812:	b159      	cbz	r1, 801d82c <_dtoa_r+0x5c>
 801d814:	685a      	ldr	r2, [r3, #4]
 801d816:	604a      	str	r2, [r1, #4]
 801d818:	2301      	movs	r3, #1
 801d81a:	4093      	lsls	r3, r2
 801d81c:	608b      	str	r3, [r1, #8]
 801d81e:	4658      	mov	r0, fp
 801d820:	f000 fe24 	bl	801e46c <_Bfree>
 801d824:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d828:	2200      	movs	r2, #0
 801d82a:	601a      	str	r2, [r3, #0]
 801d82c:	1e2b      	subs	r3, r5, #0
 801d82e:	bfb9      	ittee	lt
 801d830:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d834:	9303      	strlt	r3, [sp, #12]
 801d836:	2300      	movge	r3, #0
 801d838:	6033      	strge	r3, [r6, #0]
 801d83a:	9f03      	ldr	r7, [sp, #12]
 801d83c:	4b98      	ldr	r3, [pc, #608]	@ (801daa0 <_dtoa_r+0x2d0>)
 801d83e:	bfbc      	itt	lt
 801d840:	2201      	movlt	r2, #1
 801d842:	6032      	strlt	r2, [r6, #0]
 801d844:	43bb      	bics	r3, r7
 801d846:	d112      	bne.n	801d86e <_dtoa_r+0x9e>
 801d848:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d84a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d84e:	6013      	str	r3, [r2, #0]
 801d850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d854:	4323      	orrs	r3, r4
 801d856:	f000 854d 	beq.w	801e2f4 <_dtoa_r+0xb24>
 801d85a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d85c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801dab4 <_dtoa_r+0x2e4>
 801d860:	2b00      	cmp	r3, #0
 801d862:	f000 854f 	beq.w	801e304 <_dtoa_r+0xb34>
 801d866:	f10a 0303 	add.w	r3, sl, #3
 801d86a:	f000 bd49 	b.w	801e300 <_dtoa_r+0xb30>
 801d86e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d872:	2200      	movs	r2, #0
 801d874:	ec51 0b17 	vmov	r0, r1, d7
 801d878:	2300      	movs	r3, #0
 801d87a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d87e:	f7e3 f93b 	bl	8000af8 <__aeabi_dcmpeq>
 801d882:	4680      	mov	r8, r0
 801d884:	b158      	cbz	r0, 801d89e <_dtoa_r+0xce>
 801d886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d888:	2301      	movs	r3, #1
 801d88a:	6013      	str	r3, [r2, #0]
 801d88c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d88e:	b113      	cbz	r3, 801d896 <_dtoa_r+0xc6>
 801d890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d892:	4b84      	ldr	r3, [pc, #528]	@ (801daa4 <_dtoa_r+0x2d4>)
 801d894:	6013      	str	r3, [r2, #0]
 801d896:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801dab8 <_dtoa_r+0x2e8>
 801d89a:	f000 bd33 	b.w	801e304 <_dtoa_r+0xb34>
 801d89e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d8a2:	aa16      	add	r2, sp, #88	@ 0x58
 801d8a4:	a917      	add	r1, sp, #92	@ 0x5c
 801d8a6:	4658      	mov	r0, fp
 801d8a8:	f001 f984 	bl	801ebb4 <__d2b>
 801d8ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d8b0:	4681      	mov	r9, r0
 801d8b2:	2e00      	cmp	r6, #0
 801d8b4:	d077      	beq.n	801d9a6 <_dtoa_r+0x1d6>
 801d8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d8b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d8bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d8c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d8c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d8c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d8cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d8d0:	4619      	mov	r1, r3
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	4b74      	ldr	r3, [pc, #464]	@ (801daa8 <_dtoa_r+0x2d8>)
 801d8d6:	f7e2 fcef 	bl	80002b8 <__aeabi_dsub>
 801d8da:	a369      	add	r3, pc, #420	@ (adr r3, 801da80 <_dtoa_r+0x2b0>)
 801d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8e0:	f7e2 fea2 	bl	8000628 <__aeabi_dmul>
 801d8e4:	a368      	add	r3, pc, #416	@ (adr r3, 801da88 <_dtoa_r+0x2b8>)
 801d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ea:	f7e2 fce7 	bl	80002bc <__adddf3>
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	4630      	mov	r0, r6
 801d8f2:	460d      	mov	r5, r1
 801d8f4:	f7e2 fe2e 	bl	8000554 <__aeabi_i2d>
 801d8f8:	a365      	add	r3, pc, #404	@ (adr r3, 801da90 <_dtoa_r+0x2c0>)
 801d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8fe:	f7e2 fe93 	bl	8000628 <__aeabi_dmul>
 801d902:	4602      	mov	r2, r0
 801d904:	460b      	mov	r3, r1
 801d906:	4620      	mov	r0, r4
 801d908:	4629      	mov	r1, r5
 801d90a:	f7e2 fcd7 	bl	80002bc <__adddf3>
 801d90e:	4604      	mov	r4, r0
 801d910:	460d      	mov	r5, r1
 801d912:	f7e3 f939 	bl	8000b88 <__aeabi_d2iz>
 801d916:	2200      	movs	r2, #0
 801d918:	4607      	mov	r7, r0
 801d91a:	2300      	movs	r3, #0
 801d91c:	4620      	mov	r0, r4
 801d91e:	4629      	mov	r1, r5
 801d920:	f7e3 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 801d924:	b140      	cbz	r0, 801d938 <_dtoa_r+0x168>
 801d926:	4638      	mov	r0, r7
 801d928:	f7e2 fe14 	bl	8000554 <__aeabi_i2d>
 801d92c:	4622      	mov	r2, r4
 801d92e:	462b      	mov	r3, r5
 801d930:	f7e3 f8e2 	bl	8000af8 <__aeabi_dcmpeq>
 801d934:	b900      	cbnz	r0, 801d938 <_dtoa_r+0x168>
 801d936:	3f01      	subs	r7, #1
 801d938:	2f16      	cmp	r7, #22
 801d93a:	d851      	bhi.n	801d9e0 <_dtoa_r+0x210>
 801d93c:	4b5b      	ldr	r3, [pc, #364]	@ (801daac <_dtoa_r+0x2dc>)
 801d93e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d94a:	f7e3 f8df 	bl	8000b0c <__aeabi_dcmplt>
 801d94e:	2800      	cmp	r0, #0
 801d950:	d048      	beq.n	801d9e4 <_dtoa_r+0x214>
 801d952:	3f01      	subs	r7, #1
 801d954:	2300      	movs	r3, #0
 801d956:	9312      	str	r3, [sp, #72]	@ 0x48
 801d958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d95a:	1b9b      	subs	r3, r3, r6
 801d95c:	1e5a      	subs	r2, r3, #1
 801d95e:	bf44      	itt	mi
 801d960:	f1c3 0801 	rsbmi	r8, r3, #1
 801d964:	2300      	movmi	r3, #0
 801d966:	9208      	str	r2, [sp, #32]
 801d968:	bf54      	ite	pl
 801d96a:	f04f 0800 	movpl.w	r8, #0
 801d96e:	9308      	strmi	r3, [sp, #32]
 801d970:	2f00      	cmp	r7, #0
 801d972:	db39      	blt.n	801d9e8 <_dtoa_r+0x218>
 801d974:	9b08      	ldr	r3, [sp, #32]
 801d976:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d978:	443b      	add	r3, r7
 801d97a:	9308      	str	r3, [sp, #32]
 801d97c:	2300      	movs	r3, #0
 801d97e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d982:	2b09      	cmp	r3, #9
 801d984:	d864      	bhi.n	801da50 <_dtoa_r+0x280>
 801d986:	2b05      	cmp	r3, #5
 801d988:	bfc4      	itt	gt
 801d98a:	3b04      	subgt	r3, #4
 801d98c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801d98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d990:	f1a3 0302 	sub.w	r3, r3, #2
 801d994:	bfcc      	ite	gt
 801d996:	2400      	movgt	r4, #0
 801d998:	2401      	movle	r4, #1
 801d99a:	2b03      	cmp	r3, #3
 801d99c:	d863      	bhi.n	801da66 <_dtoa_r+0x296>
 801d99e:	e8df f003 	tbb	[pc, r3]
 801d9a2:	372a      	.short	0x372a
 801d9a4:	5535      	.short	0x5535
 801d9a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801d9aa:	441e      	add	r6, r3
 801d9ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d9b0:	2b20      	cmp	r3, #32
 801d9b2:	bfc1      	itttt	gt
 801d9b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d9b8:	409f      	lslgt	r7, r3
 801d9ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d9be:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d9c2:	bfd6      	itet	le
 801d9c4:	f1c3 0320 	rsble	r3, r3, #32
 801d9c8:	ea47 0003 	orrgt.w	r0, r7, r3
 801d9cc:	fa04 f003 	lslle.w	r0, r4, r3
 801d9d0:	f7e2 fdb0 	bl	8000534 <__aeabi_ui2d>
 801d9d4:	2201      	movs	r2, #1
 801d9d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d9da:	3e01      	subs	r6, #1
 801d9dc:	9214      	str	r2, [sp, #80]	@ 0x50
 801d9de:	e777      	b.n	801d8d0 <_dtoa_r+0x100>
 801d9e0:	2301      	movs	r3, #1
 801d9e2:	e7b8      	b.n	801d956 <_dtoa_r+0x186>
 801d9e4:	9012      	str	r0, [sp, #72]	@ 0x48
 801d9e6:	e7b7      	b.n	801d958 <_dtoa_r+0x188>
 801d9e8:	427b      	negs	r3, r7
 801d9ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	eba8 0807 	sub.w	r8, r8, r7
 801d9f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d9f4:	e7c4      	b.n	801d980 <_dtoa_r+0x1b0>
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d9fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	dc35      	bgt.n	801da6c <_dtoa_r+0x29c>
 801da00:	2301      	movs	r3, #1
 801da02:	9300      	str	r3, [sp, #0]
 801da04:	9307      	str	r3, [sp, #28]
 801da06:	461a      	mov	r2, r3
 801da08:	920e      	str	r2, [sp, #56]	@ 0x38
 801da0a:	e00b      	b.n	801da24 <_dtoa_r+0x254>
 801da0c:	2301      	movs	r3, #1
 801da0e:	e7f3      	b.n	801d9f8 <_dtoa_r+0x228>
 801da10:	2300      	movs	r3, #0
 801da12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da16:	18fb      	adds	r3, r7, r3
 801da18:	9300      	str	r3, [sp, #0]
 801da1a:	3301      	adds	r3, #1
 801da1c:	2b01      	cmp	r3, #1
 801da1e:	9307      	str	r3, [sp, #28]
 801da20:	bfb8      	it	lt
 801da22:	2301      	movlt	r3, #1
 801da24:	f8db 001c 	ldr.w	r0, [fp, #28]
 801da28:	2100      	movs	r1, #0
 801da2a:	2204      	movs	r2, #4
 801da2c:	f102 0514 	add.w	r5, r2, #20
 801da30:	429d      	cmp	r5, r3
 801da32:	d91f      	bls.n	801da74 <_dtoa_r+0x2a4>
 801da34:	6041      	str	r1, [r0, #4]
 801da36:	4658      	mov	r0, fp
 801da38:	f000 fcd8 	bl	801e3ec <_Balloc>
 801da3c:	4682      	mov	sl, r0
 801da3e:	2800      	cmp	r0, #0
 801da40:	d13c      	bne.n	801dabc <_dtoa_r+0x2ec>
 801da42:	4b1b      	ldr	r3, [pc, #108]	@ (801dab0 <_dtoa_r+0x2e0>)
 801da44:	4602      	mov	r2, r0
 801da46:	f240 11af 	movw	r1, #431	@ 0x1af
 801da4a:	e6d8      	b.n	801d7fe <_dtoa_r+0x2e>
 801da4c:	2301      	movs	r3, #1
 801da4e:	e7e0      	b.n	801da12 <_dtoa_r+0x242>
 801da50:	2401      	movs	r4, #1
 801da52:	2300      	movs	r3, #0
 801da54:	9309      	str	r3, [sp, #36]	@ 0x24
 801da56:	940b      	str	r4, [sp, #44]	@ 0x2c
 801da58:	f04f 33ff 	mov.w	r3, #4294967295
 801da5c:	9300      	str	r3, [sp, #0]
 801da5e:	9307      	str	r3, [sp, #28]
 801da60:	2200      	movs	r2, #0
 801da62:	2312      	movs	r3, #18
 801da64:	e7d0      	b.n	801da08 <_dtoa_r+0x238>
 801da66:	2301      	movs	r3, #1
 801da68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da6a:	e7f5      	b.n	801da58 <_dtoa_r+0x288>
 801da6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	9307      	str	r3, [sp, #28]
 801da72:	e7d7      	b.n	801da24 <_dtoa_r+0x254>
 801da74:	3101      	adds	r1, #1
 801da76:	0052      	lsls	r2, r2, #1
 801da78:	e7d8      	b.n	801da2c <_dtoa_r+0x25c>
 801da7a:	bf00      	nop
 801da7c:	f3af 8000 	nop.w
 801da80:	636f4361 	.word	0x636f4361
 801da84:	3fd287a7 	.word	0x3fd287a7
 801da88:	8b60c8b3 	.word	0x8b60c8b3
 801da8c:	3fc68a28 	.word	0x3fc68a28
 801da90:	509f79fb 	.word	0x509f79fb
 801da94:	3fd34413 	.word	0x3fd34413
 801da98:	0802316e 	.word	0x0802316e
 801da9c:	08023228 	.word	0x08023228
 801daa0:	7ff00000 	.word	0x7ff00000
 801daa4:	08023146 	.word	0x08023146
 801daa8:	3ff80000 	.word	0x3ff80000
 801daac:	08023320 	.word	0x08023320
 801dab0:	08023280 	.word	0x08023280
 801dab4:	08023224 	.word	0x08023224
 801dab8:	08023145 	.word	0x08023145
 801dabc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dac0:	6018      	str	r0, [r3, #0]
 801dac2:	9b07      	ldr	r3, [sp, #28]
 801dac4:	2b0e      	cmp	r3, #14
 801dac6:	f200 80a4 	bhi.w	801dc12 <_dtoa_r+0x442>
 801daca:	2c00      	cmp	r4, #0
 801dacc:	f000 80a1 	beq.w	801dc12 <_dtoa_r+0x442>
 801dad0:	2f00      	cmp	r7, #0
 801dad2:	dd33      	ble.n	801db3c <_dtoa_r+0x36c>
 801dad4:	4bad      	ldr	r3, [pc, #692]	@ (801dd8c <_dtoa_r+0x5bc>)
 801dad6:	f007 020f 	and.w	r2, r7, #15
 801dada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dade:	ed93 7b00 	vldr	d7, [r3]
 801dae2:	05f8      	lsls	r0, r7, #23
 801dae4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801daec:	d516      	bpl.n	801db1c <_dtoa_r+0x34c>
 801daee:	4ba8      	ldr	r3, [pc, #672]	@ (801dd90 <_dtoa_r+0x5c0>)
 801daf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801daf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801daf8:	f7e2 fec0 	bl	800087c <__aeabi_ddiv>
 801dafc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db00:	f004 040f 	and.w	r4, r4, #15
 801db04:	2603      	movs	r6, #3
 801db06:	4da2      	ldr	r5, [pc, #648]	@ (801dd90 <_dtoa_r+0x5c0>)
 801db08:	b954      	cbnz	r4, 801db20 <_dtoa_r+0x350>
 801db0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801db0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db12:	f7e2 feb3 	bl	800087c <__aeabi_ddiv>
 801db16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db1a:	e028      	b.n	801db6e <_dtoa_r+0x39e>
 801db1c:	2602      	movs	r6, #2
 801db1e:	e7f2      	b.n	801db06 <_dtoa_r+0x336>
 801db20:	07e1      	lsls	r1, r4, #31
 801db22:	d508      	bpl.n	801db36 <_dtoa_r+0x366>
 801db24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801db28:	e9d5 2300 	ldrd	r2, r3, [r5]
 801db2c:	f7e2 fd7c 	bl	8000628 <__aeabi_dmul>
 801db30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db34:	3601      	adds	r6, #1
 801db36:	1064      	asrs	r4, r4, #1
 801db38:	3508      	adds	r5, #8
 801db3a:	e7e5      	b.n	801db08 <_dtoa_r+0x338>
 801db3c:	f000 80d2 	beq.w	801dce4 <_dtoa_r+0x514>
 801db40:	427c      	negs	r4, r7
 801db42:	4b92      	ldr	r3, [pc, #584]	@ (801dd8c <_dtoa_r+0x5bc>)
 801db44:	4d92      	ldr	r5, [pc, #584]	@ (801dd90 <_dtoa_r+0x5c0>)
 801db46:	f004 020f 	and.w	r2, r4, #15
 801db4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801db56:	f7e2 fd67 	bl	8000628 <__aeabi_dmul>
 801db5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db5e:	1124      	asrs	r4, r4, #4
 801db60:	2300      	movs	r3, #0
 801db62:	2602      	movs	r6, #2
 801db64:	2c00      	cmp	r4, #0
 801db66:	f040 80b2 	bne.w	801dcce <_dtoa_r+0x4fe>
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d1d3      	bne.n	801db16 <_dtoa_r+0x346>
 801db6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801db74:	2b00      	cmp	r3, #0
 801db76:	f000 80b7 	beq.w	801dce8 <_dtoa_r+0x518>
 801db7a:	4b86      	ldr	r3, [pc, #536]	@ (801dd94 <_dtoa_r+0x5c4>)
 801db7c:	2200      	movs	r2, #0
 801db7e:	4620      	mov	r0, r4
 801db80:	4629      	mov	r1, r5
 801db82:	f7e2 ffc3 	bl	8000b0c <__aeabi_dcmplt>
 801db86:	2800      	cmp	r0, #0
 801db88:	f000 80ae 	beq.w	801dce8 <_dtoa_r+0x518>
 801db8c:	9b07      	ldr	r3, [sp, #28]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	f000 80aa 	beq.w	801dce8 <_dtoa_r+0x518>
 801db94:	9b00      	ldr	r3, [sp, #0]
 801db96:	2b00      	cmp	r3, #0
 801db98:	dd37      	ble.n	801dc0a <_dtoa_r+0x43a>
 801db9a:	1e7b      	subs	r3, r7, #1
 801db9c:	9304      	str	r3, [sp, #16]
 801db9e:	4620      	mov	r0, r4
 801dba0:	4b7d      	ldr	r3, [pc, #500]	@ (801dd98 <_dtoa_r+0x5c8>)
 801dba2:	2200      	movs	r2, #0
 801dba4:	4629      	mov	r1, r5
 801dba6:	f7e2 fd3f 	bl	8000628 <__aeabi_dmul>
 801dbaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dbae:	9c00      	ldr	r4, [sp, #0]
 801dbb0:	3601      	adds	r6, #1
 801dbb2:	4630      	mov	r0, r6
 801dbb4:	f7e2 fcce 	bl	8000554 <__aeabi_i2d>
 801dbb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dbbc:	f7e2 fd34 	bl	8000628 <__aeabi_dmul>
 801dbc0:	4b76      	ldr	r3, [pc, #472]	@ (801dd9c <_dtoa_r+0x5cc>)
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	f7e2 fb7a 	bl	80002bc <__adddf3>
 801dbc8:	4605      	mov	r5, r0
 801dbca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dbce:	2c00      	cmp	r4, #0
 801dbd0:	f040 808d 	bne.w	801dcee <_dtoa_r+0x51e>
 801dbd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbd8:	4b71      	ldr	r3, [pc, #452]	@ (801dda0 <_dtoa_r+0x5d0>)
 801dbda:	2200      	movs	r2, #0
 801dbdc:	f7e2 fb6c 	bl	80002b8 <__aeabi_dsub>
 801dbe0:	4602      	mov	r2, r0
 801dbe2:	460b      	mov	r3, r1
 801dbe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dbe8:	462a      	mov	r2, r5
 801dbea:	4633      	mov	r3, r6
 801dbec:	f7e2 ffac 	bl	8000b48 <__aeabi_dcmpgt>
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	f040 828b 	bne.w	801e10c <_dtoa_r+0x93c>
 801dbf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dbfa:	462a      	mov	r2, r5
 801dbfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dc00:	f7e2 ff84 	bl	8000b0c <__aeabi_dcmplt>
 801dc04:	2800      	cmp	r0, #0
 801dc06:	f040 8128 	bne.w	801de5a <_dtoa_r+0x68a>
 801dc0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dc0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dc12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	f2c0 815a 	blt.w	801dece <_dtoa_r+0x6fe>
 801dc1a:	2f0e      	cmp	r7, #14
 801dc1c:	f300 8157 	bgt.w	801dece <_dtoa_r+0x6fe>
 801dc20:	4b5a      	ldr	r3, [pc, #360]	@ (801dd8c <_dtoa_r+0x5bc>)
 801dc22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dc26:	ed93 7b00 	vldr	d7, [r3]
 801dc2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	ed8d 7b00 	vstr	d7, [sp]
 801dc32:	da03      	bge.n	801dc3c <_dtoa_r+0x46c>
 801dc34:	9b07      	ldr	r3, [sp, #28]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	f340 8101 	ble.w	801de3e <_dtoa_r+0x66e>
 801dc3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dc40:	4656      	mov	r6, sl
 801dc42:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc46:	4620      	mov	r0, r4
 801dc48:	4629      	mov	r1, r5
 801dc4a:	f7e2 fe17 	bl	800087c <__aeabi_ddiv>
 801dc4e:	f7e2 ff9b 	bl	8000b88 <__aeabi_d2iz>
 801dc52:	4680      	mov	r8, r0
 801dc54:	f7e2 fc7e 	bl	8000554 <__aeabi_i2d>
 801dc58:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc5c:	f7e2 fce4 	bl	8000628 <__aeabi_dmul>
 801dc60:	4602      	mov	r2, r0
 801dc62:	460b      	mov	r3, r1
 801dc64:	4620      	mov	r0, r4
 801dc66:	4629      	mov	r1, r5
 801dc68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801dc6c:	f7e2 fb24 	bl	80002b8 <__aeabi_dsub>
 801dc70:	f806 4b01 	strb.w	r4, [r6], #1
 801dc74:	9d07      	ldr	r5, [sp, #28]
 801dc76:	eba6 040a 	sub.w	r4, r6, sl
 801dc7a:	42a5      	cmp	r5, r4
 801dc7c:	4602      	mov	r2, r0
 801dc7e:	460b      	mov	r3, r1
 801dc80:	f040 8117 	bne.w	801deb2 <_dtoa_r+0x6e2>
 801dc84:	f7e2 fb1a 	bl	80002bc <__adddf3>
 801dc88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc8c:	4604      	mov	r4, r0
 801dc8e:	460d      	mov	r5, r1
 801dc90:	f7e2 ff5a 	bl	8000b48 <__aeabi_dcmpgt>
 801dc94:	2800      	cmp	r0, #0
 801dc96:	f040 80f9 	bne.w	801de8c <_dtoa_r+0x6bc>
 801dc9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dc9e:	4620      	mov	r0, r4
 801dca0:	4629      	mov	r1, r5
 801dca2:	f7e2 ff29 	bl	8000af8 <__aeabi_dcmpeq>
 801dca6:	b118      	cbz	r0, 801dcb0 <_dtoa_r+0x4e0>
 801dca8:	f018 0f01 	tst.w	r8, #1
 801dcac:	f040 80ee 	bne.w	801de8c <_dtoa_r+0x6bc>
 801dcb0:	4649      	mov	r1, r9
 801dcb2:	4658      	mov	r0, fp
 801dcb4:	f000 fbda 	bl	801e46c <_Bfree>
 801dcb8:	2300      	movs	r3, #0
 801dcba:	7033      	strb	r3, [r6, #0]
 801dcbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dcbe:	3701      	adds	r7, #1
 801dcc0:	601f      	str	r7, [r3, #0]
 801dcc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	f000 831d 	beq.w	801e304 <_dtoa_r+0xb34>
 801dcca:	601e      	str	r6, [r3, #0]
 801dccc:	e31a      	b.n	801e304 <_dtoa_r+0xb34>
 801dcce:	07e2      	lsls	r2, r4, #31
 801dcd0:	d505      	bpl.n	801dcde <_dtoa_r+0x50e>
 801dcd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dcd6:	f7e2 fca7 	bl	8000628 <__aeabi_dmul>
 801dcda:	3601      	adds	r6, #1
 801dcdc:	2301      	movs	r3, #1
 801dcde:	1064      	asrs	r4, r4, #1
 801dce0:	3508      	adds	r5, #8
 801dce2:	e73f      	b.n	801db64 <_dtoa_r+0x394>
 801dce4:	2602      	movs	r6, #2
 801dce6:	e742      	b.n	801db6e <_dtoa_r+0x39e>
 801dce8:	9c07      	ldr	r4, [sp, #28]
 801dcea:	9704      	str	r7, [sp, #16]
 801dcec:	e761      	b.n	801dbb2 <_dtoa_r+0x3e2>
 801dcee:	4b27      	ldr	r3, [pc, #156]	@ (801dd8c <_dtoa_r+0x5bc>)
 801dcf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dcf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dcf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dcfa:	4454      	add	r4, sl
 801dcfc:	2900      	cmp	r1, #0
 801dcfe:	d053      	beq.n	801dda8 <_dtoa_r+0x5d8>
 801dd00:	4928      	ldr	r1, [pc, #160]	@ (801dda4 <_dtoa_r+0x5d4>)
 801dd02:	2000      	movs	r0, #0
 801dd04:	f7e2 fdba 	bl	800087c <__aeabi_ddiv>
 801dd08:	4633      	mov	r3, r6
 801dd0a:	462a      	mov	r2, r5
 801dd0c:	f7e2 fad4 	bl	80002b8 <__aeabi_dsub>
 801dd10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd14:	4656      	mov	r6, sl
 801dd16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd1a:	f7e2 ff35 	bl	8000b88 <__aeabi_d2iz>
 801dd1e:	4605      	mov	r5, r0
 801dd20:	f7e2 fc18 	bl	8000554 <__aeabi_i2d>
 801dd24:	4602      	mov	r2, r0
 801dd26:	460b      	mov	r3, r1
 801dd28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd2c:	f7e2 fac4 	bl	80002b8 <__aeabi_dsub>
 801dd30:	3530      	adds	r5, #48	@ 0x30
 801dd32:	4602      	mov	r2, r0
 801dd34:	460b      	mov	r3, r1
 801dd36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dd3a:	f806 5b01 	strb.w	r5, [r6], #1
 801dd3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd42:	f7e2 fee3 	bl	8000b0c <__aeabi_dcmplt>
 801dd46:	2800      	cmp	r0, #0
 801dd48:	d171      	bne.n	801de2e <_dtoa_r+0x65e>
 801dd4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd4e:	4911      	ldr	r1, [pc, #68]	@ (801dd94 <_dtoa_r+0x5c4>)
 801dd50:	2000      	movs	r0, #0
 801dd52:	f7e2 fab1 	bl	80002b8 <__aeabi_dsub>
 801dd56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dd5a:	f7e2 fed7 	bl	8000b0c <__aeabi_dcmplt>
 801dd5e:	2800      	cmp	r0, #0
 801dd60:	f040 8095 	bne.w	801de8e <_dtoa_r+0x6be>
 801dd64:	42a6      	cmp	r6, r4
 801dd66:	f43f af50 	beq.w	801dc0a <_dtoa_r+0x43a>
 801dd6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dd6e:	4b0a      	ldr	r3, [pc, #40]	@ (801dd98 <_dtoa_r+0x5c8>)
 801dd70:	2200      	movs	r2, #0
 801dd72:	f7e2 fc59 	bl	8000628 <__aeabi_dmul>
 801dd76:	4b08      	ldr	r3, [pc, #32]	@ (801dd98 <_dtoa_r+0x5c8>)
 801dd78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd82:	f7e2 fc51 	bl	8000628 <__aeabi_dmul>
 801dd86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd8a:	e7c4      	b.n	801dd16 <_dtoa_r+0x546>
 801dd8c:	08023320 	.word	0x08023320
 801dd90:	080232f8 	.word	0x080232f8
 801dd94:	3ff00000 	.word	0x3ff00000
 801dd98:	40240000 	.word	0x40240000
 801dd9c:	401c0000 	.word	0x401c0000
 801dda0:	40140000 	.word	0x40140000
 801dda4:	3fe00000 	.word	0x3fe00000
 801dda8:	4631      	mov	r1, r6
 801ddaa:	4628      	mov	r0, r5
 801ddac:	f7e2 fc3c 	bl	8000628 <__aeabi_dmul>
 801ddb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ddb4:	9415      	str	r4, [sp, #84]	@ 0x54
 801ddb6:	4656      	mov	r6, sl
 801ddb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddbc:	f7e2 fee4 	bl	8000b88 <__aeabi_d2iz>
 801ddc0:	4605      	mov	r5, r0
 801ddc2:	f7e2 fbc7 	bl	8000554 <__aeabi_i2d>
 801ddc6:	4602      	mov	r2, r0
 801ddc8:	460b      	mov	r3, r1
 801ddca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddce:	f7e2 fa73 	bl	80002b8 <__aeabi_dsub>
 801ddd2:	3530      	adds	r5, #48	@ 0x30
 801ddd4:	f806 5b01 	strb.w	r5, [r6], #1
 801ddd8:	4602      	mov	r2, r0
 801ddda:	460b      	mov	r3, r1
 801dddc:	42a6      	cmp	r6, r4
 801ddde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dde2:	f04f 0200 	mov.w	r2, #0
 801dde6:	d124      	bne.n	801de32 <_dtoa_r+0x662>
 801dde8:	4bac      	ldr	r3, [pc, #688]	@ (801e09c <_dtoa_r+0x8cc>)
 801ddea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ddee:	f7e2 fa65 	bl	80002bc <__adddf3>
 801ddf2:	4602      	mov	r2, r0
 801ddf4:	460b      	mov	r3, r1
 801ddf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddfa:	f7e2 fea5 	bl	8000b48 <__aeabi_dcmpgt>
 801ddfe:	2800      	cmp	r0, #0
 801de00:	d145      	bne.n	801de8e <_dtoa_r+0x6be>
 801de02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801de06:	49a5      	ldr	r1, [pc, #660]	@ (801e09c <_dtoa_r+0x8cc>)
 801de08:	2000      	movs	r0, #0
 801de0a:	f7e2 fa55 	bl	80002b8 <__aeabi_dsub>
 801de0e:	4602      	mov	r2, r0
 801de10:	460b      	mov	r3, r1
 801de12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de16:	f7e2 fe79 	bl	8000b0c <__aeabi_dcmplt>
 801de1a:	2800      	cmp	r0, #0
 801de1c:	f43f aef5 	beq.w	801dc0a <_dtoa_r+0x43a>
 801de20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801de22:	1e73      	subs	r3, r6, #1
 801de24:	9315      	str	r3, [sp, #84]	@ 0x54
 801de26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801de2a:	2b30      	cmp	r3, #48	@ 0x30
 801de2c:	d0f8      	beq.n	801de20 <_dtoa_r+0x650>
 801de2e:	9f04      	ldr	r7, [sp, #16]
 801de30:	e73e      	b.n	801dcb0 <_dtoa_r+0x4e0>
 801de32:	4b9b      	ldr	r3, [pc, #620]	@ (801e0a0 <_dtoa_r+0x8d0>)
 801de34:	f7e2 fbf8 	bl	8000628 <__aeabi_dmul>
 801de38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de3c:	e7bc      	b.n	801ddb8 <_dtoa_r+0x5e8>
 801de3e:	d10c      	bne.n	801de5a <_dtoa_r+0x68a>
 801de40:	4b98      	ldr	r3, [pc, #608]	@ (801e0a4 <_dtoa_r+0x8d4>)
 801de42:	2200      	movs	r2, #0
 801de44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de48:	f7e2 fbee 	bl	8000628 <__aeabi_dmul>
 801de4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de50:	f7e2 fe70 	bl	8000b34 <__aeabi_dcmpge>
 801de54:	2800      	cmp	r0, #0
 801de56:	f000 8157 	beq.w	801e108 <_dtoa_r+0x938>
 801de5a:	2400      	movs	r4, #0
 801de5c:	4625      	mov	r5, r4
 801de5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de60:	43db      	mvns	r3, r3
 801de62:	9304      	str	r3, [sp, #16]
 801de64:	4656      	mov	r6, sl
 801de66:	2700      	movs	r7, #0
 801de68:	4621      	mov	r1, r4
 801de6a:	4658      	mov	r0, fp
 801de6c:	f000 fafe 	bl	801e46c <_Bfree>
 801de70:	2d00      	cmp	r5, #0
 801de72:	d0dc      	beq.n	801de2e <_dtoa_r+0x65e>
 801de74:	b12f      	cbz	r7, 801de82 <_dtoa_r+0x6b2>
 801de76:	42af      	cmp	r7, r5
 801de78:	d003      	beq.n	801de82 <_dtoa_r+0x6b2>
 801de7a:	4639      	mov	r1, r7
 801de7c:	4658      	mov	r0, fp
 801de7e:	f000 faf5 	bl	801e46c <_Bfree>
 801de82:	4629      	mov	r1, r5
 801de84:	4658      	mov	r0, fp
 801de86:	f000 faf1 	bl	801e46c <_Bfree>
 801de8a:	e7d0      	b.n	801de2e <_dtoa_r+0x65e>
 801de8c:	9704      	str	r7, [sp, #16]
 801de8e:	4633      	mov	r3, r6
 801de90:	461e      	mov	r6, r3
 801de92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de96:	2a39      	cmp	r2, #57	@ 0x39
 801de98:	d107      	bne.n	801deaa <_dtoa_r+0x6da>
 801de9a:	459a      	cmp	sl, r3
 801de9c:	d1f8      	bne.n	801de90 <_dtoa_r+0x6c0>
 801de9e:	9a04      	ldr	r2, [sp, #16]
 801dea0:	3201      	adds	r2, #1
 801dea2:	9204      	str	r2, [sp, #16]
 801dea4:	2230      	movs	r2, #48	@ 0x30
 801dea6:	f88a 2000 	strb.w	r2, [sl]
 801deaa:	781a      	ldrb	r2, [r3, #0]
 801deac:	3201      	adds	r2, #1
 801deae:	701a      	strb	r2, [r3, #0]
 801deb0:	e7bd      	b.n	801de2e <_dtoa_r+0x65e>
 801deb2:	4b7b      	ldr	r3, [pc, #492]	@ (801e0a0 <_dtoa_r+0x8d0>)
 801deb4:	2200      	movs	r2, #0
 801deb6:	f7e2 fbb7 	bl	8000628 <__aeabi_dmul>
 801deba:	2200      	movs	r2, #0
 801debc:	2300      	movs	r3, #0
 801debe:	4604      	mov	r4, r0
 801dec0:	460d      	mov	r5, r1
 801dec2:	f7e2 fe19 	bl	8000af8 <__aeabi_dcmpeq>
 801dec6:	2800      	cmp	r0, #0
 801dec8:	f43f aebb 	beq.w	801dc42 <_dtoa_r+0x472>
 801decc:	e6f0      	b.n	801dcb0 <_dtoa_r+0x4e0>
 801dece:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ded0:	2a00      	cmp	r2, #0
 801ded2:	f000 80db 	beq.w	801e08c <_dtoa_r+0x8bc>
 801ded6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ded8:	2a01      	cmp	r2, #1
 801deda:	f300 80bf 	bgt.w	801e05c <_dtoa_r+0x88c>
 801dede:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dee0:	2a00      	cmp	r2, #0
 801dee2:	f000 80b7 	beq.w	801e054 <_dtoa_r+0x884>
 801dee6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801deea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801deec:	4646      	mov	r6, r8
 801deee:	9a08      	ldr	r2, [sp, #32]
 801def0:	2101      	movs	r1, #1
 801def2:	441a      	add	r2, r3
 801def4:	4658      	mov	r0, fp
 801def6:	4498      	add	r8, r3
 801def8:	9208      	str	r2, [sp, #32]
 801defa:	f000 fbb5 	bl	801e668 <__i2b>
 801defe:	4605      	mov	r5, r0
 801df00:	b15e      	cbz	r6, 801df1a <_dtoa_r+0x74a>
 801df02:	9b08      	ldr	r3, [sp, #32]
 801df04:	2b00      	cmp	r3, #0
 801df06:	dd08      	ble.n	801df1a <_dtoa_r+0x74a>
 801df08:	42b3      	cmp	r3, r6
 801df0a:	9a08      	ldr	r2, [sp, #32]
 801df0c:	bfa8      	it	ge
 801df0e:	4633      	movge	r3, r6
 801df10:	eba8 0803 	sub.w	r8, r8, r3
 801df14:	1af6      	subs	r6, r6, r3
 801df16:	1ad3      	subs	r3, r2, r3
 801df18:	9308      	str	r3, [sp, #32]
 801df1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df1c:	b1f3      	cbz	r3, 801df5c <_dtoa_r+0x78c>
 801df1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801df20:	2b00      	cmp	r3, #0
 801df22:	f000 80b7 	beq.w	801e094 <_dtoa_r+0x8c4>
 801df26:	b18c      	cbz	r4, 801df4c <_dtoa_r+0x77c>
 801df28:	4629      	mov	r1, r5
 801df2a:	4622      	mov	r2, r4
 801df2c:	4658      	mov	r0, fp
 801df2e:	f000 fc5b 	bl	801e7e8 <__pow5mult>
 801df32:	464a      	mov	r2, r9
 801df34:	4601      	mov	r1, r0
 801df36:	4605      	mov	r5, r0
 801df38:	4658      	mov	r0, fp
 801df3a:	f000 fbab 	bl	801e694 <__multiply>
 801df3e:	4649      	mov	r1, r9
 801df40:	9004      	str	r0, [sp, #16]
 801df42:	4658      	mov	r0, fp
 801df44:	f000 fa92 	bl	801e46c <_Bfree>
 801df48:	9b04      	ldr	r3, [sp, #16]
 801df4a:	4699      	mov	r9, r3
 801df4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df4e:	1b1a      	subs	r2, r3, r4
 801df50:	d004      	beq.n	801df5c <_dtoa_r+0x78c>
 801df52:	4649      	mov	r1, r9
 801df54:	4658      	mov	r0, fp
 801df56:	f000 fc47 	bl	801e7e8 <__pow5mult>
 801df5a:	4681      	mov	r9, r0
 801df5c:	2101      	movs	r1, #1
 801df5e:	4658      	mov	r0, fp
 801df60:	f000 fb82 	bl	801e668 <__i2b>
 801df64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df66:	4604      	mov	r4, r0
 801df68:	2b00      	cmp	r3, #0
 801df6a:	f000 81cf 	beq.w	801e30c <_dtoa_r+0xb3c>
 801df6e:	461a      	mov	r2, r3
 801df70:	4601      	mov	r1, r0
 801df72:	4658      	mov	r0, fp
 801df74:	f000 fc38 	bl	801e7e8 <__pow5mult>
 801df78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df7a:	2b01      	cmp	r3, #1
 801df7c:	4604      	mov	r4, r0
 801df7e:	f300 8095 	bgt.w	801e0ac <_dtoa_r+0x8dc>
 801df82:	9b02      	ldr	r3, [sp, #8]
 801df84:	2b00      	cmp	r3, #0
 801df86:	f040 8087 	bne.w	801e098 <_dtoa_r+0x8c8>
 801df8a:	9b03      	ldr	r3, [sp, #12]
 801df8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801df90:	2b00      	cmp	r3, #0
 801df92:	f040 8089 	bne.w	801e0a8 <_dtoa_r+0x8d8>
 801df96:	9b03      	ldr	r3, [sp, #12]
 801df98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801df9c:	0d1b      	lsrs	r3, r3, #20
 801df9e:	051b      	lsls	r3, r3, #20
 801dfa0:	b12b      	cbz	r3, 801dfae <_dtoa_r+0x7de>
 801dfa2:	9b08      	ldr	r3, [sp, #32]
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	9308      	str	r3, [sp, #32]
 801dfa8:	f108 0801 	add.w	r8, r8, #1
 801dfac:	2301      	movs	r3, #1
 801dfae:	930a      	str	r3, [sp, #40]	@ 0x28
 801dfb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	f000 81b0 	beq.w	801e318 <_dtoa_r+0xb48>
 801dfb8:	6923      	ldr	r3, [r4, #16]
 801dfba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dfbe:	6918      	ldr	r0, [r3, #16]
 801dfc0:	f000 fb06 	bl	801e5d0 <__hi0bits>
 801dfc4:	f1c0 0020 	rsb	r0, r0, #32
 801dfc8:	9b08      	ldr	r3, [sp, #32]
 801dfca:	4418      	add	r0, r3
 801dfcc:	f010 001f 	ands.w	r0, r0, #31
 801dfd0:	d077      	beq.n	801e0c2 <_dtoa_r+0x8f2>
 801dfd2:	f1c0 0320 	rsb	r3, r0, #32
 801dfd6:	2b04      	cmp	r3, #4
 801dfd8:	dd6b      	ble.n	801e0b2 <_dtoa_r+0x8e2>
 801dfda:	9b08      	ldr	r3, [sp, #32]
 801dfdc:	f1c0 001c 	rsb	r0, r0, #28
 801dfe0:	4403      	add	r3, r0
 801dfe2:	4480      	add	r8, r0
 801dfe4:	4406      	add	r6, r0
 801dfe6:	9308      	str	r3, [sp, #32]
 801dfe8:	f1b8 0f00 	cmp.w	r8, #0
 801dfec:	dd05      	ble.n	801dffa <_dtoa_r+0x82a>
 801dfee:	4649      	mov	r1, r9
 801dff0:	4642      	mov	r2, r8
 801dff2:	4658      	mov	r0, fp
 801dff4:	f000 fc52 	bl	801e89c <__lshift>
 801dff8:	4681      	mov	r9, r0
 801dffa:	9b08      	ldr	r3, [sp, #32]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	dd05      	ble.n	801e00c <_dtoa_r+0x83c>
 801e000:	4621      	mov	r1, r4
 801e002:	461a      	mov	r2, r3
 801e004:	4658      	mov	r0, fp
 801e006:	f000 fc49 	bl	801e89c <__lshift>
 801e00a:	4604      	mov	r4, r0
 801e00c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e00e:	2b00      	cmp	r3, #0
 801e010:	d059      	beq.n	801e0c6 <_dtoa_r+0x8f6>
 801e012:	4621      	mov	r1, r4
 801e014:	4648      	mov	r0, r9
 801e016:	f000 fcad 	bl	801e974 <__mcmp>
 801e01a:	2800      	cmp	r0, #0
 801e01c:	da53      	bge.n	801e0c6 <_dtoa_r+0x8f6>
 801e01e:	1e7b      	subs	r3, r7, #1
 801e020:	9304      	str	r3, [sp, #16]
 801e022:	4649      	mov	r1, r9
 801e024:	2300      	movs	r3, #0
 801e026:	220a      	movs	r2, #10
 801e028:	4658      	mov	r0, fp
 801e02a:	f000 fa41 	bl	801e4b0 <__multadd>
 801e02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e030:	4681      	mov	r9, r0
 801e032:	2b00      	cmp	r3, #0
 801e034:	f000 8172 	beq.w	801e31c <_dtoa_r+0xb4c>
 801e038:	2300      	movs	r3, #0
 801e03a:	4629      	mov	r1, r5
 801e03c:	220a      	movs	r2, #10
 801e03e:	4658      	mov	r0, fp
 801e040:	f000 fa36 	bl	801e4b0 <__multadd>
 801e044:	9b00      	ldr	r3, [sp, #0]
 801e046:	2b00      	cmp	r3, #0
 801e048:	4605      	mov	r5, r0
 801e04a:	dc67      	bgt.n	801e11c <_dtoa_r+0x94c>
 801e04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e04e:	2b02      	cmp	r3, #2
 801e050:	dc41      	bgt.n	801e0d6 <_dtoa_r+0x906>
 801e052:	e063      	b.n	801e11c <_dtoa_r+0x94c>
 801e054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e05a:	e746      	b.n	801deea <_dtoa_r+0x71a>
 801e05c:	9b07      	ldr	r3, [sp, #28]
 801e05e:	1e5c      	subs	r4, r3, #1
 801e060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e062:	42a3      	cmp	r3, r4
 801e064:	bfbf      	itttt	lt
 801e066:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e068:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e06a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e06c:	1ae3      	sublt	r3, r4, r3
 801e06e:	bfb4      	ite	lt
 801e070:	18d2      	addlt	r2, r2, r3
 801e072:	1b1c      	subge	r4, r3, r4
 801e074:	9b07      	ldr	r3, [sp, #28]
 801e076:	bfbc      	itt	lt
 801e078:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e07a:	2400      	movlt	r4, #0
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	bfb5      	itete	lt
 801e080:	eba8 0603 	sublt.w	r6, r8, r3
 801e084:	9b07      	ldrge	r3, [sp, #28]
 801e086:	2300      	movlt	r3, #0
 801e088:	4646      	movge	r6, r8
 801e08a:	e730      	b.n	801deee <_dtoa_r+0x71e>
 801e08c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e08e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e090:	4646      	mov	r6, r8
 801e092:	e735      	b.n	801df00 <_dtoa_r+0x730>
 801e094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e096:	e75c      	b.n	801df52 <_dtoa_r+0x782>
 801e098:	2300      	movs	r3, #0
 801e09a:	e788      	b.n	801dfae <_dtoa_r+0x7de>
 801e09c:	3fe00000 	.word	0x3fe00000
 801e0a0:	40240000 	.word	0x40240000
 801e0a4:	40140000 	.word	0x40140000
 801e0a8:	9b02      	ldr	r3, [sp, #8]
 801e0aa:	e780      	b.n	801dfae <_dtoa_r+0x7de>
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0b0:	e782      	b.n	801dfb8 <_dtoa_r+0x7e8>
 801e0b2:	d099      	beq.n	801dfe8 <_dtoa_r+0x818>
 801e0b4:	9a08      	ldr	r2, [sp, #32]
 801e0b6:	331c      	adds	r3, #28
 801e0b8:	441a      	add	r2, r3
 801e0ba:	4498      	add	r8, r3
 801e0bc:	441e      	add	r6, r3
 801e0be:	9208      	str	r2, [sp, #32]
 801e0c0:	e792      	b.n	801dfe8 <_dtoa_r+0x818>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	e7f6      	b.n	801e0b4 <_dtoa_r+0x8e4>
 801e0c6:	9b07      	ldr	r3, [sp, #28]
 801e0c8:	9704      	str	r7, [sp, #16]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	dc20      	bgt.n	801e110 <_dtoa_r+0x940>
 801e0ce:	9300      	str	r3, [sp, #0]
 801e0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0d2:	2b02      	cmp	r3, #2
 801e0d4:	dd1e      	ble.n	801e114 <_dtoa_r+0x944>
 801e0d6:	9b00      	ldr	r3, [sp, #0]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	f47f aec0 	bne.w	801de5e <_dtoa_r+0x68e>
 801e0de:	4621      	mov	r1, r4
 801e0e0:	2205      	movs	r2, #5
 801e0e2:	4658      	mov	r0, fp
 801e0e4:	f000 f9e4 	bl	801e4b0 <__multadd>
 801e0e8:	4601      	mov	r1, r0
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	4648      	mov	r0, r9
 801e0ee:	f000 fc41 	bl	801e974 <__mcmp>
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	f77f aeb3 	ble.w	801de5e <_dtoa_r+0x68e>
 801e0f8:	4656      	mov	r6, sl
 801e0fa:	2331      	movs	r3, #49	@ 0x31
 801e0fc:	f806 3b01 	strb.w	r3, [r6], #1
 801e100:	9b04      	ldr	r3, [sp, #16]
 801e102:	3301      	adds	r3, #1
 801e104:	9304      	str	r3, [sp, #16]
 801e106:	e6ae      	b.n	801de66 <_dtoa_r+0x696>
 801e108:	9c07      	ldr	r4, [sp, #28]
 801e10a:	9704      	str	r7, [sp, #16]
 801e10c:	4625      	mov	r5, r4
 801e10e:	e7f3      	b.n	801e0f8 <_dtoa_r+0x928>
 801e110:	9b07      	ldr	r3, [sp, #28]
 801e112:	9300      	str	r3, [sp, #0]
 801e114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e116:	2b00      	cmp	r3, #0
 801e118:	f000 8104 	beq.w	801e324 <_dtoa_r+0xb54>
 801e11c:	2e00      	cmp	r6, #0
 801e11e:	dd05      	ble.n	801e12c <_dtoa_r+0x95c>
 801e120:	4629      	mov	r1, r5
 801e122:	4632      	mov	r2, r6
 801e124:	4658      	mov	r0, fp
 801e126:	f000 fbb9 	bl	801e89c <__lshift>
 801e12a:	4605      	mov	r5, r0
 801e12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d05a      	beq.n	801e1e8 <_dtoa_r+0xa18>
 801e132:	6869      	ldr	r1, [r5, #4]
 801e134:	4658      	mov	r0, fp
 801e136:	f000 f959 	bl	801e3ec <_Balloc>
 801e13a:	4606      	mov	r6, r0
 801e13c:	b928      	cbnz	r0, 801e14a <_dtoa_r+0x97a>
 801e13e:	4b84      	ldr	r3, [pc, #528]	@ (801e350 <_dtoa_r+0xb80>)
 801e140:	4602      	mov	r2, r0
 801e142:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e146:	f7ff bb5a 	b.w	801d7fe <_dtoa_r+0x2e>
 801e14a:	692a      	ldr	r2, [r5, #16]
 801e14c:	3202      	adds	r2, #2
 801e14e:	0092      	lsls	r2, r2, #2
 801e150:	f105 010c 	add.w	r1, r5, #12
 801e154:	300c      	adds	r0, #12
 801e156:	f7ff fa7e 	bl	801d656 <memcpy>
 801e15a:	2201      	movs	r2, #1
 801e15c:	4631      	mov	r1, r6
 801e15e:	4658      	mov	r0, fp
 801e160:	f000 fb9c 	bl	801e89c <__lshift>
 801e164:	f10a 0301 	add.w	r3, sl, #1
 801e168:	9307      	str	r3, [sp, #28]
 801e16a:	9b00      	ldr	r3, [sp, #0]
 801e16c:	4453      	add	r3, sl
 801e16e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e170:	9b02      	ldr	r3, [sp, #8]
 801e172:	f003 0301 	and.w	r3, r3, #1
 801e176:	462f      	mov	r7, r5
 801e178:	930a      	str	r3, [sp, #40]	@ 0x28
 801e17a:	4605      	mov	r5, r0
 801e17c:	9b07      	ldr	r3, [sp, #28]
 801e17e:	4621      	mov	r1, r4
 801e180:	3b01      	subs	r3, #1
 801e182:	4648      	mov	r0, r9
 801e184:	9300      	str	r3, [sp, #0]
 801e186:	f7ff fa99 	bl	801d6bc <quorem>
 801e18a:	4639      	mov	r1, r7
 801e18c:	9002      	str	r0, [sp, #8]
 801e18e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e192:	4648      	mov	r0, r9
 801e194:	f000 fbee 	bl	801e974 <__mcmp>
 801e198:	462a      	mov	r2, r5
 801e19a:	9008      	str	r0, [sp, #32]
 801e19c:	4621      	mov	r1, r4
 801e19e:	4658      	mov	r0, fp
 801e1a0:	f000 fc04 	bl	801e9ac <__mdiff>
 801e1a4:	68c2      	ldr	r2, [r0, #12]
 801e1a6:	4606      	mov	r6, r0
 801e1a8:	bb02      	cbnz	r2, 801e1ec <_dtoa_r+0xa1c>
 801e1aa:	4601      	mov	r1, r0
 801e1ac:	4648      	mov	r0, r9
 801e1ae:	f000 fbe1 	bl	801e974 <__mcmp>
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	4631      	mov	r1, r6
 801e1b6:	4658      	mov	r0, fp
 801e1b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e1ba:	f000 f957 	bl	801e46c <_Bfree>
 801e1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1c2:	9e07      	ldr	r6, [sp, #28]
 801e1c4:	ea43 0102 	orr.w	r1, r3, r2
 801e1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1ca:	4319      	orrs	r1, r3
 801e1cc:	d110      	bne.n	801e1f0 <_dtoa_r+0xa20>
 801e1ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e1d2:	d029      	beq.n	801e228 <_dtoa_r+0xa58>
 801e1d4:	9b08      	ldr	r3, [sp, #32]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	dd02      	ble.n	801e1e0 <_dtoa_r+0xa10>
 801e1da:	9b02      	ldr	r3, [sp, #8]
 801e1dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e1e0:	9b00      	ldr	r3, [sp, #0]
 801e1e2:	f883 8000 	strb.w	r8, [r3]
 801e1e6:	e63f      	b.n	801de68 <_dtoa_r+0x698>
 801e1e8:	4628      	mov	r0, r5
 801e1ea:	e7bb      	b.n	801e164 <_dtoa_r+0x994>
 801e1ec:	2201      	movs	r2, #1
 801e1ee:	e7e1      	b.n	801e1b4 <_dtoa_r+0x9e4>
 801e1f0:	9b08      	ldr	r3, [sp, #32]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	db04      	blt.n	801e200 <_dtoa_r+0xa30>
 801e1f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e1f8:	430b      	orrs	r3, r1
 801e1fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e1fc:	430b      	orrs	r3, r1
 801e1fe:	d120      	bne.n	801e242 <_dtoa_r+0xa72>
 801e200:	2a00      	cmp	r2, #0
 801e202:	dded      	ble.n	801e1e0 <_dtoa_r+0xa10>
 801e204:	4649      	mov	r1, r9
 801e206:	2201      	movs	r2, #1
 801e208:	4658      	mov	r0, fp
 801e20a:	f000 fb47 	bl	801e89c <__lshift>
 801e20e:	4621      	mov	r1, r4
 801e210:	4681      	mov	r9, r0
 801e212:	f000 fbaf 	bl	801e974 <__mcmp>
 801e216:	2800      	cmp	r0, #0
 801e218:	dc03      	bgt.n	801e222 <_dtoa_r+0xa52>
 801e21a:	d1e1      	bne.n	801e1e0 <_dtoa_r+0xa10>
 801e21c:	f018 0f01 	tst.w	r8, #1
 801e220:	d0de      	beq.n	801e1e0 <_dtoa_r+0xa10>
 801e222:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e226:	d1d8      	bne.n	801e1da <_dtoa_r+0xa0a>
 801e228:	9a00      	ldr	r2, [sp, #0]
 801e22a:	2339      	movs	r3, #57	@ 0x39
 801e22c:	7013      	strb	r3, [r2, #0]
 801e22e:	4633      	mov	r3, r6
 801e230:	461e      	mov	r6, r3
 801e232:	3b01      	subs	r3, #1
 801e234:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e238:	2a39      	cmp	r2, #57	@ 0x39
 801e23a:	d052      	beq.n	801e2e2 <_dtoa_r+0xb12>
 801e23c:	3201      	adds	r2, #1
 801e23e:	701a      	strb	r2, [r3, #0]
 801e240:	e612      	b.n	801de68 <_dtoa_r+0x698>
 801e242:	2a00      	cmp	r2, #0
 801e244:	dd07      	ble.n	801e256 <_dtoa_r+0xa86>
 801e246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e24a:	d0ed      	beq.n	801e228 <_dtoa_r+0xa58>
 801e24c:	9a00      	ldr	r2, [sp, #0]
 801e24e:	f108 0301 	add.w	r3, r8, #1
 801e252:	7013      	strb	r3, [r2, #0]
 801e254:	e608      	b.n	801de68 <_dtoa_r+0x698>
 801e256:	9b07      	ldr	r3, [sp, #28]
 801e258:	9a07      	ldr	r2, [sp, #28]
 801e25a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e260:	4293      	cmp	r3, r2
 801e262:	d028      	beq.n	801e2b6 <_dtoa_r+0xae6>
 801e264:	4649      	mov	r1, r9
 801e266:	2300      	movs	r3, #0
 801e268:	220a      	movs	r2, #10
 801e26a:	4658      	mov	r0, fp
 801e26c:	f000 f920 	bl	801e4b0 <__multadd>
 801e270:	42af      	cmp	r7, r5
 801e272:	4681      	mov	r9, r0
 801e274:	f04f 0300 	mov.w	r3, #0
 801e278:	f04f 020a 	mov.w	r2, #10
 801e27c:	4639      	mov	r1, r7
 801e27e:	4658      	mov	r0, fp
 801e280:	d107      	bne.n	801e292 <_dtoa_r+0xac2>
 801e282:	f000 f915 	bl	801e4b0 <__multadd>
 801e286:	4607      	mov	r7, r0
 801e288:	4605      	mov	r5, r0
 801e28a:	9b07      	ldr	r3, [sp, #28]
 801e28c:	3301      	adds	r3, #1
 801e28e:	9307      	str	r3, [sp, #28]
 801e290:	e774      	b.n	801e17c <_dtoa_r+0x9ac>
 801e292:	f000 f90d 	bl	801e4b0 <__multadd>
 801e296:	4629      	mov	r1, r5
 801e298:	4607      	mov	r7, r0
 801e29a:	2300      	movs	r3, #0
 801e29c:	220a      	movs	r2, #10
 801e29e:	4658      	mov	r0, fp
 801e2a0:	f000 f906 	bl	801e4b0 <__multadd>
 801e2a4:	4605      	mov	r5, r0
 801e2a6:	e7f0      	b.n	801e28a <_dtoa_r+0xaba>
 801e2a8:	9b00      	ldr	r3, [sp, #0]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	bfcc      	ite	gt
 801e2ae:	461e      	movgt	r6, r3
 801e2b0:	2601      	movle	r6, #1
 801e2b2:	4456      	add	r6, sl
 801e2b4:	2700      	movs	r7, #0
 801e2b6:	4649      	mov	r1, r9
 801e2b8:	2201      	movs	r2, #1
 801e2ba:	4658      	mov	r0, fp
 801e2bc:	f000 faee 	bl	801e89c <__lshift>
 801e2c0:	4621      	mov	r1, r4
 801e2c2:	4681      	mov	r9, r0
 801e2c4:	f000 fb56 	bl	801e974 <__mcmp>
 801e2c8:	2800      	cmp	r0, #0
 801e2ca:	dcb0      	bgt.n	801e22e <_dtoa_r+0xa5e>
 801e2cc:	d102      	bne.n	801e2d4 <_dtoa_r+0xb04>
 801e2ce:	f018 0f01 	tst.w	r8, #1
 801e2d2:	d1ac      	bne.n	801e22e <_dtoa_r+0xa5e>
 801e2d4:	4633      	mov	r3, r6
 801e2d6:	461e      	mov	r6, r3
 801e2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2dc:	2a30      	cmp	r2, #48	@ 0x30
 801e2de:	d0fa      	beq.n	801e2d6 <_dtoa_r+0xb06>
 801e2e0:	e5c2      	b.n	801de68 <_dtoa_r+0x698>
 801e2e2:	459a      	cmp	sl, r3
 801e2e4:	d1a4      	bne.n	801e230 <_dtoa_r+0xa60>
 801e2e6:	9b04      	ldr	r3, [sp, #16]
 801e2e8:	3301      	adds	r3, #1
 801e2ea:	9304      	str	r3, [sp, #16]
 801e2ec:	2331      	movs	r3, #49	@ 0x31
 801e2ee:	f88a 3000 	strb.w	r3, [sl]
 801e2f2:	e5b9      	b.n	801de68 <_dtoa_r+0x698>
 801e2f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e354 <_dtoa_r+0xb84>
 801e2fa:	b11b      	cbz	r3, 801e304 <_dtoa_r+0xb34>
 801e2fc:	f10a 0308 	add.w	r3, sl, #8
 801e300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e302:	6013      	str	r3, [r2, #0]
 801e304:	4650      	mov	r0, sl
 801e306:	b019      	add	sp, #100	@ 0x64
 801e308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e30e:	2b01      	cmp	r3, #1
 801e310:	f77f ae37 	ble.w	801df82 <_dtoa_r+0x7b2>
 801e314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e316:	930a      	str	r3, [sp, #40]	@ 0x28
 801e318:	2001      	movs	r0, #1
 801e31a:	e655      	b.n	801dfc8 <_dtoa_r+0x7f8>
 801e31c:	9b00      	ldr	r3, [sp, #0]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	f77f aed6 	ble.w	801e0d0 <_dtoa_r+0x900>
 801e324:	4656      	mov	r6, sl
 801e326:	4621      	mov	r1, r4
 801e328:	4648      	mov	r0, r9
 801e32a:	f7ff f9c7 	bl	801d6bc <quorem>
 801e32e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e332:	f806 8b01 	strb.w	r8, [r6], #1
 801e336:	9b00      	ldr	r3, [sp, #0]
 801e338:	eba6 020a 	sub.w	r2, r6, sl
 801e33c:	4293      	cmp	r3, r2
 801e33e:	ddb3      	ble.n	801e2a8 <_dtoa_r+0xad8>
 801e340:	4649      	mov	r1, r9
 801e342:	2300      	movs	r3, #0
 801e344:	220a      	movs	r2, #10
 801e346:	4658      	mov	r0, fp
 801e348:	f000 f8b2 	bl	801e4b0 <__multadd>
 801e34c:	4681      	mov	r9, r0
 801e34e:	e7ea      	b.n	801e326 <_dtoa_r+0xb56>
 801e350:	08023280 	.word	0x08023280
 801e354:	0802321b 	.word	0x0802321b

0801e358 <_free_r>:
 801e358:	b538      	push	{r3, r4, r5, lr}
 801e35a:	4605      	mov	r5, r0
 801e35c:	2900      	cmp	r1, #0
 801e35e:	d041      	beq.n	801e3e4 <_free_r+0x8c>
 801e360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e364:	1f0c      	subs	r4, r1, #4
 801e366:	2b00      	cmp	r3, #0
 801e368:	bfb8      	it	lt
 801e36a:	18e4      	addlt	r4, r4, r3
 801e36c:	f7fd fe88 	bl	801c080 <__malloc_lock>
 801e370:	4a1d      	ldr	r2, [pc, #116]	@ (801e3e8 <_free_r+0x90>)
 801e372:	6813      	ldr	r3, [r2, #0]
 801e374:	b933      	cbnz	r3, 801e384 <_free_r+0x2c>
 801e376:	6063      	str	r3, [r4, #4]
 801e378:	6014      	str	r4, [r2, #0]
 801e37a:	4628      	mov	r0, r5
 801e37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e380:	f7fd be84 	b.w	801c08c <__malloc_unlock>
 801e384:	42a3      	cmp	r3, r4
 801e386:	d908      	bls.n	801e39a <_free_r+0x42>
 801e388:	6820      	ldr	r0, [r4, #0]
 801e38a:	1821      	adds	r1, r4, r0
 801e38c:	428b      	cmp	r3, r1
 801e38e:	bf01      	itttt	eq
 801e390:	6819      	ldreq	r1, [r3, #0]
 801e392:	685b      	ldreq	r3, [r3, #4]
 801e394:	1809      	addeq	r1, r1, r0
 801e396:	6021      	streq	r1, [r4, #0]
 801e398:	e7ed      	b.n	801e376 <_free_r+0x1e>
 801e39a:	461a      	mov	r2, r3
 801e39c:	685b      	ldr	r3, [r3, #4]
 801e39e:	b10b      	cbz	r3, 801e3a4 <_free_r+0x4c>
 801e3a0:	42a3      	cmp	r3, r4
 801e3a2:	d9fa      	bls.n	801e39a <_free_r+0x42>
 801e3a4:	6811      	ldr	r1, [r2, #0]
 801e3a6:	1850      	adds	r0, r2, r1
 801e3a8:	42a0      	cmp	r0, r4
 801e3aa:	d10b      	bne.n	801e3c4 <_free_r+0x6c>
 801e3ac:	6820      	ldr	r0, [r4, #0]
 801e3ae:	4401      	add	r1, r0
 801e3b0:	1850      	adds	r0, r2, r1
 801e3b2:	4283      	cmp	r3, r0
 801e3b4:	6011      	str	r1, [r2, #0]
 801e3b6:	d1e0      	bne.n	801e37a <_free_r+0x22>
 801e3b8:	6818      	ldr	r0, [r3, #0]
 801e3ba:	685b      	ldr	r3, [r3, #4]
 801e3bc:	6053      	str	r3, [r2, #4]
 801e3be:	4408      	add	r0, r1
 801e3c0:	6010      	str	r0, [r2, #0]
 801e3c2:	e7da      	b.n	801e37a <_free_r+0x22>
 801e3c4:	d902      	bls.n	801e3cc <_free_r+0x74>
 801e3c6:	230c      	movs	r3, #12
 801e3c8:	602b      	str	r3, [r5, #0]
 801e3ca:	e7d6      	b.n	801e37a <_free_r+0x22>
 801e3cc:	6820      	ldr	r0, [r4, #0]
 801e3ce:	1821      	adds	r1, r4, r0
 801e3d0:	428b      	cmp	r3, r1
 801e3d2:	bf04      	itt	eq
 801e3d4:	6819      	ldreq	r1, [r3, #0]
 801e3d6:	685b      	ldreq	r3, [r3, #4]
 801e3d8:	6063      	str	r3, [r4, #4]
 801e3da:	bf04      	itt	eq
 801e3dc:	1809      	addeq	r1, r1, r0
 801e3de:	6021      	streq	r1, [r4, #0]
 801e3e0:	6054      	str	r4, [r2, #4]
 801e3e2:	e7ca      	b.n	801e37a <_free_r+0x22>
 801e3e4:	bd38      	pop	{r3, r4, r5, pc}
 801e3e6:	bf00      	nop
 801e3e8:	200036a4 	.word	0x200036a4

0801e3ec <_Balloc>:
 801e3ec:	b570      	push	{r4, r5, r6, lr}
 801e3ee:	69c6      	ldr	r6, [r0, #28]
 801e3f0:	4604      	mov	r4, r0
 801e3f2:	460d      	mov	r5, r1
 801e3f4:	b976      	cbnz	r6, 801e414 <_Balloc+0x28>
 801e3f6:	2010      	movs	r0, #16
 801e3f8:	f7fd fd98 	bl	801bf2c <malloc>
 801e3fc:	4602      	mov	r2, r0
 801e3fe:	61e0      	str	r0, [r4, #28]
 801e400:	b920      	cbnz	r0, 801e40c <_Balloc+0x20>
 801e402:	4b18      	ldr	r3, [pc, #96]	@ (801e464 <_Balloc+0x78>)
 801e404:	4818      	ldr	r0, [pc, #96]	@ (801e468 <_Balloc+0x7c>)
 801e406:	216b      	movs	r1, #107	@ 0x6b
 801e408:	f7ff f93a 	bl	801d680 <__assert_func>
 801e40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e410:	6006      	str	r6, [r0, #0]
 801e412:	60c6      	str	r6, [r0, #12]
 801e414:	69e6      	ldr	r6, [r4, #28]
 801e416:	68f3      	ldr	r3, [r6, #12]
 801e418:	b183      	cbz	r3, 801e43c <_Balloc+0x50>
 801e41a:	69e3      	ldr	r3, [r4, #28]
 801e41c:	68db      	ldr	r3, [r3, #12]
 801e41e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e422:	b9b8      	cbnz	r0, 801e454 <_Balloc+0x68>
 801e424:	2101      	movs	r1, #1
 801e426:	fa01 f605 	lsl.w	r6, r1, r5
 801e42a:	1d72      	adds	r2, r6, #5
 801e42c:	0092      	lsls	r2, r2, #2
 801e42e:	4620      	mov	r0, r4
 801e430:	f001 fe95 	bl	802015e <_calloc_r>
 801e434:	b160      	cbz	r0, 801e450 <_Balloc+0x64>
 801e436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e43a:	e00e      	b.n	801e45a <_Balloc+0x6e>
 801e43c:	2221      	movs	r2, #33	@ 0x21
 801e43e:	2104      	movs	r1, #4
 801e440:	4620      	mov	r0, r4
 801e442:	f001 fe8c 	bl	802015e <_calloc_r>
 801e446:	69e3      	ldr	r3, [r4, #28]
 801e448:	60f0      	str	r0, [r6, #12]
 801e44a:	68db      	ldr	r3, [r3, #12]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d1e4      	bne.n	801e41a <_Balloc+0x2e>
 801e450:	2000      	movs	r0, #0
 801e452:	bd70      	pop	{r4, r5, r6, pc}
 801e454:	6802      	ldr	r2, [r0, #0]
 801e456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e45a:	2300      	movs	r3, #0
 801e45c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e460:	e7f7      	b.n	801e452 <_Balloc+0x66>
 801e462:	bf00      	nop
 801e464:	0802316e 	.word	0x0802316e
 801e468:	08023291 	.word	0x08023291

0801e46c <_Bfree>:
 801e46c:	b570      	push	{r4, r5, r6, lr}
 801e46e:	69c6      	ldr	r6, [r0, #28]
 801e470:	4605      	mov	r5, r0
 801e472:	460c      	mov	r4, r1
 801e474:	b976      	cbnz	r6, 801e494 <_Bfree+0x28>
 801e476:	2010      	movs	r0, #16
 801e478:	f7fd fd58 	bl	801bf2c <malloc>
 801e47c:	4602      	mov	r2, r0
 801e47e:	61e8      	str	r0, [r5, #28]
 801e480:	b920      	cbnz	r0, 801e48c <_Bfree+0x20>
 801e482:	4b09      	ldr	r3, [pc, #36]	@ (801e4a8 <_Bfree+0x3c>)
 801e484:	4809      	ldr	r0, [pc, #36]	@ (801e4ac <_Bfree+0x40>)
 801e486:	218f      	movs	r1, #143	@ 0x8f
 801e488:	f7ff f8fa 	bl	801d680 <__assert_func>
 801e48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e490:	6006      	str	r6, [r0, #0]
 801e492:	60c6      	str	r6, [r0, #12]
 801e494:	b13c      	cbz	r4, 801e4a6 <_Bfree+0x3a>
 801e496:	69eb      	ldr	r3, [r5, #28]
 801e498:	6862      	ldr	r2, [r4, #4]
 801e49a:	68db      	ldr	r3, [r3, #12]
 801e49c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e4a0:	6021      	str	r1, [r4, #0]
 801e4a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e4a6:	bd70      	pop	{r4, r5, r6, pc}
 801e4a8:	0802316e 	.word	0x0802316e
 801e4ac:	08023291 	.word	0x08023291

0801e4b0 <__multadd>:
 801e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4b4:	690d      	ldr	r5, [r1, #16]
 801e4b6:	4607      	mov	r7, r0
 801e4b8:	460c      	mov	r4, r1
 801e4ba:	461e      	mov	r6, r3
 801e4bc:	f101 0c14 	add.w	ip, r1, #20
 801e4c0:	2000      	movs	r0, #0
 801e4c2:	f8dc 3000 	ldr.w	r3, [ip]
 801e4c6:	b299      	uxth	r1, r3
 801e4c8:	fb02 6101 	mla	r1, r2, r1, r6
 801e4cc:	0c1e      	lsrs	r6, r3, #16
 801e4ce:	0c0b      	lsrs	r3, r1, #16
 801e4d0:	fb02 3306 	mla	r3, r2, r6, r3
 801e4d4:	b289      	uxth	r1, r1
 801e4d6:	3001      	adds	r0, #1
 801e4d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e4dc:	4285      	cmp	r5, r0
 801e4de:	f84c 1b04 	str.w	r1, [ip], #4
 801e4e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e4e6:	dcec      	bgt.n	801e4c2 <__multadd+0x12>
 801e4e8:	b30e      	cbz	r6, 801e52e <__multadd+0x7e>
 801e4ea:	68a3      	ldr	r3, [r4, #8]
 801e4ec:	42ab      	cmp	r3, r5
 801e4ee:	dc19      	bgt.n	801e524 <__multadd+0x74>
 801e4f0:	6861      	ldr	r1, [r4, #4]
 801e4f2:	4638      	mov	r0, r7
 801e4f4:	3101      	adds	r1, #1
 801e4f6:	f7ff ff79 	bl	801e3ec <_Balloc>
 801e4fa:	4680      	mov	r8, r0
 801e4fc:	b928      	cbnz	r0, 801e50a <__multadd+0x5a>
 801e4fe:	4602      	mov	r2, r0
 801e500:	4b0c      	ldr	r3, [pc, #48]	@ (801e534 <__multadd+0x84>)
 801e502:	480d      	ldr	r0, [pc, #52]	@ (801e538 <__multadd+0x88>)
 801e504:	21ba      	movs	r1, #186	@ 0xba
 801e506:	f7ff f8bb 	bl	801d680 <__assert_func>
 801e50a:	6922      	ldr	r2, [r4, #16]
 801e50c:	3202      	adds	r2, #2
 801e50e:	f104 010c 	add.w	r1, r4, #12
 801e512:	0092      	lsls	r2, r2, #2
 801e514:	300c      	adds	r0, #12
 801e516:	f7ff f89e 	bl	801d656 <memcpy>
 801e51a:	4621      	mov	r1, r4
 801e51c:	4638      	mov	r0, r7
 801e51e:	f7ff ffa5 	bl	801e46c <_Bfree>
 801e522:	4644      	mov	r4, r8
 801e524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e528:	3501      	adds	r5, #1
 801e52a:	615e      	str	r6, [r3, #20]
 801e52c:	6125      	str	r5, [r4, #16]
 801e52e:	4620      	mov	r0, r4
 801e530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e534:	08023280 	.word	0x08023280
 801e538:	08023291 	.word	0x08023291

0801e53c <__s2b>:
 801e53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e540:	460c      	mov	r4, r1
 801e542:	4615      	mov	r5, r2
 801e544:	461f      	mov	r7, r3
 801e546:	2209      	movs	r2, #9
 801e548:	3308      	adds	r3, #8
 801e54a:	4606      	mov	r6, r0
 801e54c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e550:	2100      	movs	r1, #0
 801e552:	2201      	movs	r2, #1
 801e554:	429a      	cmp	r2, r3
 801e556:	db09      	blt.n	801e56c <__s2b+0x30>
 801e558:	4630      	mov	r0, r6
 801e55a:	f7ff ff47 	bl	801e3ec <_Balloc>
 801e55e:	b940      	cbnz	r0, 801e572 <__s2b+0x36>
 801e560:	4602      	mov	r2, r0
 801e562:	4b19      	ldr	r3, [pc, #100]	@ (801e5c8 <__s2b+0x8c>)
 801e564:	4819      	ldr	r0, [pc, #100]	@ (801e5cc <__s2b+0x90>)
 801e566:	21d3      	movs	r1, #211	@ 0xd3
 801e568:	f7ff f88a 	bl	801d680 <__assert_func>
 801e56c:	0052      	lsls	r2, r2, #1
 801e56e:	3101      	adds	r1, #1
 801e570:	e7f0      	b.n	801e554 <__s2b+0x18>
 801e572:	9b08      	ldr	r3, [sp, #32]
 801e574:	6143      	str	r3, [r0, #20]
 801e576:	2d09      	cmp	r5, #9
 801e578:	f04f 0301 	mov.w	r3, #1
 801e57c:	6103      	str	r3, [r0, #16]
 801e57e:	dd16      	ble.n	801e5ae <__s2b+0x72>
 801e580:	f104 0909 	add.w	r9, r4, #9
 801e584:	46c8      	mov	r8, r9
 801e586:	442c      	add	r4, r5
 801e588:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e58c:	4601      	mov	r1, r0
 801e58e:	3b30      	subs	r3, #48	@ 0x30
 801e590:	220a      	movs	r2, #10
 801e592:	4630      	mov	r0, r6
 801e594:	f7ff ff8c 	bl	801e4b0 <__multadd>
 801e598:	45a0      	cmp	r8, r4
 801e59a:	d1f5      	bne.n	801e588 <__s2b+0x4c>
 801e59c:	f1a5 0408 	sub.w	r4, r5, #8
 801e5a0:	444c      	add	r4, r9
 801e5a2:	1b2d      	subs	r5, r5, r4
 801e5a4:	1963      	adds	r3, r4, r5
 801e5a6:	42bb      	cmp	r3, r7
 801e5a8:	db04      	blt.n	801e5b4 <__s2b+0x78>
 801e5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5ae:	340a      	adds	r4, #10
 801e5b0:	2509      	movs	r5, #9
 801e5b2:	e7f6      	b.n	801e5a2 <__s2b+0x66>
 801e5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e5b8:	4601      	mov	r1, r0
 801e5ba:	3b30      	subs	r3, #48	@ 0x30
 801e5bc:	220a      	movs	r2, #10
 801e5be:	4630      	mov	r0, r6
 801e5c0:	f7ff ff76 	bl	801e4b0 <__multadd>
 801e5c4:	e7ee      	b.n	801e5a4 <__s2b+0x68>
 801e5c6:	bf00      	nop
 801e5c8:	08023280 	.word	0x08023280
 801e5cc:	08023291 	.word	0x08023291

0801e5d0 <__hi0bits>:
 801e5d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e5d4:	4603      	mov	r3, r0
 801e5d6:	bf36      	itet	cc
 801e5d8:	0403      	lslcc	r3, r0, #16
 801e5da:	2000      	movcs	r0, #0
 801e5dc:	2010      	movcc	r0, #16
 801e5de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e5e2:	bf3c      	itt	cc
 801e5e4:	021b      	lslcc	r3, r3, #8
 801e5e6:	3008      	addcc	r0, #8
 801e5e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e5ec:	bf3c      	itt	cc
 801e5ee:	011b      	lslcc	r3, r3, #4
 801e5f0:	3004      	addcc	r0, #4
 801e5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e5f6:	bf3c      	itt	cc
 801e5f8:	009b      	lslcc	r3, r3, #2
 801e5fa:	3002      	addcc	r0, #2
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	db05      	blt.n	801e60c <__hi0bits+0x3c>
 801e600:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e604:	f100 0001 	add.w	r0, r0, #1
 801e608:	bf08      	it	eq
 801e60a:	2020      	moveq	r0, #32
 801e60c:	4770      	bx	lr

0801e60e <__lo0bits>:
 801e60e:	6803      	ldr	r3, [r0, #0]
 801e610:	4602      	mov	r2, r0
 801e612:	f013 0007 	ands.w	r0, r3, #7
 801e616:	d00b      	beq.n	801e630 <__lo0bits+0x22>
 801e618:	07d9      	lsls	r1, r3, #31
 801e61a:	d421      	bmi.n	801e660 <__lo0bits+0x52>
 801e61c:	0798      	lsls	r0, r3, #30
 801e61e:	bf49      	itett	mi
 801e620:	085b      	lsrmi	r3, r3, #1
 801e622:	089b      	lsrpl	r3, r3, #2
 801e624:	2001      	movmi	r0, #1
 801e626:	6013      	strmi	r3, [r2, #0]
 801e628:	bf5c      	itt	pl
 801e62a:	6013      	strpl	r3, [r2, #0]
 801e62c:	2002      	movpl	r0, #2
 801e62e:	4770      	bx	lr
 801e630:	b299      	uxth	r1, r3
 801e632:	b909      	cbnz	r1, 801e638 <__lo0bits+0x2a>
 801e634:	0c1b      	lsrs	r3, r3, #16
 801e636:	2010      	movs	r0, #16
 801e638:	b2d9      	uxtb	r1, r3
 801e63a:	b909      	cbnz	r1, 801e640 <__lo0bits+0x32>
 801e63c:	3008      	adds	r0, #8
 801e63e:	0a1b      	lsrs	r3, r3, #8
 801e640:	0719      	lsls	r1, r3, #28
 801e642:	bf04      	itt	eq
 801e644:	091b      	lsreq	r3, r3, #4
 801e646:	3004      	addeq	r0, #4
 801e648:	0799      	lsls	r1, r3, #30
 801e64a:	bf04      	itt	eq
 801e64c:	089b      	lsreq	r3, r3, #2
 801e64e:	3002      	addeq	r0, #2
 801e650:	07d9      	lsls	r1, r3, #31
 801e652:	d403      	bmi.n	801e65c <__lo0bits+0x4e>
 801e654:	085b      	lsrs	r3, r3, #1
 801e656:	f100 0001 	add.w	r0, r0, #1
 801e65a:	d003      	beq.n	801e664 <__lo0bits+0x56>
 801e65c:	6013      	str	r3, [r2, #0]
 801e65e:	4770      	bx	lr
 801e660:	2000      	movs	r0, #0
 801e662:	4770      	bx	lr
 801e664:	2020      	movs	r0, #32
 801e666:	4770      	bx	lr

0801e668 <__i2b>:
 801e668:	b510      	push	{r4, lr}
 801e66a:	460c      	mov	r4, r1
 801e66c:	2101      	movs	r1, #1
 801e66e:	f7ff febd 	bl	801e3ec <_Balloc>
 801e672:	4602      	mov	r2, r0
 801e674:	b928      	cbnz	r0, 801e682 <__i2b+0x1a>
 801e676:	4b05      	ldr	r3, [pc, #20]	@ (801e68c <__i2b+0x24>)
 801e678:	4805      	ldr	r0, [pc, #20]	@ (801e690 <__i2b+0x28>)
 801e67a:	f240 1145 	movw	r1, #325	@ 0x145
 801e67e:	f7fe ffff 	bl	801d680 <__assert_func>
 801e682:	2301      	movs	r3, #1
 801e684:	6144      	str	r4, [r0, #20]
 801e686:	6103      	str	r3, [r0, #16]
 801e688:	bd10      	pop	{r4, pc}
 801e68a:	bf00      	nop
 801e68c:	08023280 	.word	0x08023280
 801e690:	08023291 	.word	0x08023291

0801e694 <__multiply>:
 801e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e698:	4614      	mov	r4, r2
 801e69a:	690a      	ldr	r2, [r1, #16]
 801e69c:	6923      	ldr	r3, [r4, #16]
 801e69e:	429a      	cmp	r2, r3
 801e6a0:	bfa8      	it	ge
 801e6a2:	4623      	movge	r3, r4
 801e6a4:	460f      	mov	r7, r1
 801e6a6:	bfa4      	itt	ge
 801e6a8:	460c      	movge	r4, r1
 801e6aa:	461f      	movge	r7, r3
 801e6ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e6b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e6b4:	68a3      	ldr	r3, [r4, #8]
 801e6b6:	6861      	ldr	r1, [r4, #4]
 801e6b8:	eb0a 0609 	add.w	r6, sl, r9
 801e6bc:	42b3      	cmp	r3, r6
 801e6be:	b085      	sub	sp, #20
 801e6c0:	bfb8      	it	lt
 801e6c2:	3101      	addlt	r1, #1
 801e6c4:	f7ff fe92 	bl	801e3ec <_Balloc>
 801e6c8:	b930      	cbnz	r0, 801e6d8 <__multiply+0x44>
 801e6ca:	4602      	mov	r2, r0
 801e6cc:	4b44      	ldr	r3, [pc, #272]	@ (801e7e0 <__multiply+0x14c>)
 801e6ce:	4845      	ldr	r0, [pc, #276]	@ (801e7e4 <__multiply+0x150>)
 801e6d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e6d4:	f7fe ffd4 	bl	801d680 <__assert_func>
 801e6d8:	f100 0514 	add.w	r5, r0, #20
 801e6dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e6e0:	462b      	mov	r3, r5
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	4543      	cmp	r3, r8
 801e6e6:	d321      	bcc.n	801e72c <__multiply+0x98>
 801e6e8:	f107 0114 	add.w	r1, r7, #20
 801e6ec:	f104 0214 	add.w	r2, r4, #20
 801e6f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e6f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e6f8:	9302      	str	r3, [sp, #8]
 801e6fa:	1b13      	subs	r3, r2, r4
 801e6fc:	3b15      	subs	r3, #21
 801e6fe:	f023 0303 	bic.w	r3, r3, #3
 801e702:	3304      	adds	r3, #4
 801e704:	f104 0715 	add.w	r7, r4, #21
 801e708:	42ba      	cmp	r2, r7
 801e70a:	bf38      	it	cc
 801e70c:	2304      	movcc	r3, #4
 801e70e:	9301      	str	r3, [sp, #4]
 801e710:	9b02      	ldr	r3, [sp, #8]
 801e712:	9103      	str	r1, [sp, #12]
 801e714:	428b      	cmp	r3, r1
 801e716:	d80c      	bhi.n	801e732 <__multiply+0x9e>
 801e718:	2e00      	cmp	r6, #0
 801e71a:	dd03      	ble.n	801e724 <__multiply+0x90>
 801e71c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e720:	2b00      	cmp	r3, #0
 801e722:	d05b      	beq.n	801e7dc <__multiply+0x148>
 801e724:	6106      	str	r6, [r0, #16]
 801e726:	b005      	add	sp, #20
 801e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e72c:	f843 2b04 	str.w	r2, [r3], #4
 801e730:	e7d8      	b.n	801e6e4 <__multiply+0x50>
 801e732:	f8b1 a000 	ldrh.w	sl, [r1]
 801e736:	f1ba 0f00 	cmp.w	sl, #0
 801e73a:	d024      	beq.n	801e786 <__multiply+0xf2>
 801e73c:	f104 0e14 	add.w	lr, r4, #20
 801e740:	46a9      	mov	r9, r5
 801e742:	f04f 0c00 	mov.w	ip, #0
 801e746:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e74a:	f8d9 3000 	ldr.w	r3, [r9]
 801e74e:	fa1f fb87 	uxth.w	fp, r7
 801e752:	b29b      	uxth	r3, r3
 801e754:	fb0a 330b 	mla	r3, sl, fp, r3
 801e758:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e75c:	f8d9 7000 	ldr.w	r7, [r9]
 801e760:	4463      	add	r3, ip
 801e762:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e766:	fb0a c70b 	mla	r7, sl, fp, ip
 801e76a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e76e:	b29b      	uxth	r3, r3
 801e770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e774:	4572      	cmp	r2, lr
 801e776:	f849 3b04 	str.w	r3, [r9], #4
 801e77a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e77e:	d8e2      	bhi.n	801e746 <__multiply+0xb2>
 801e780:	9b01      	ldr	r3, [sp, #4]
 801e782:	f845 c003 	str.w	ip, [r5, r3]
 801e786:	9b03      	ldr	r3, [sp, #12]
 801e788:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e78c:	3104      	adds	r1, #4
 801e78e:	f1b9 0f00 	cmp.w	r9, #0
 801e792:	d021      	beq.n	801e7d8 <__multiply+0x144>
 801e794:	682b      	ldr	r3, [r5, #0]
 801e796:	f104 0c14 	add.w	ip, r4, #20
 801e79a:	46ae      	mov	lr, r5
 801e79c:	f04f 0a00 	mov.w	sl, #0
 801e7a0:	f8bc b000 	ldrh.w	fp, [ip]
 801e7a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e7a8:	fb09 770b 	mla	r7, r9, fp, r7
 801e7ac:	4457      	add	r7, sl
 801e7ae:	b29b      	uxth	r3, r3
 801e7b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e7b4:	f84e 3b04 	str.w	r3, [lr], #4
 801e7b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e7bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e7c0:	f8be 3000 	ldrh.w	r3, [lr]
 801e7c4:	fb09 330a 	mla	r3, r9, sl, r3
 801e7c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e7cc:	4562      	cmp	r2, ip
 801e7ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e7d2:	d8e5      	bhi.n	801e7a0 <__multiply+0x10c>
 801e7d4:	9f01      	ldr	r7, [sp, #4]
 801e7d6:	51eb      	str	r3, [r5, r7]
 801e7d8:	3504      	adds	r5, #4
 801e7da:	e799      	b.n	801e710 <__multiply+0x7c>
 801e7dc:	3e01      	subs	r6, #1
 801e7de:	e79b      	b.n	801e718 <__multiply+0x84>
 801e7e0:	08023280 	.word	0x08023280
 801e7e4:	08023291 	.word	0x08023291

0801e7e8 <__pow5mult>:
 801e7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7ec:	4615      	mov	r5, r2
 801e7ee:	f012 0203 	ands.w	r2, r2, #3
 801e7f2:	4607      	mov	r7, r0
 801e7f4:	460e      	mov	r6, r1
 801e7f6:	d007      	beq.n	801e808 <__pow5mult+0x20>
 801e7f8:	4c25      	ldr	r4, [pc, #148]	@ (801e890 <__pow5mult+0xa8>)
 801e7fa:	3a01      	subs	r2, #1
 801e7fc:	2300      	movs	r3, #0
 801e7fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e802:	f7ff fe55 	bl	801e4b0 <__multadd>
 801e806:	4606      	mov	r6, r0
 801e808:	10ad      	asrs	r5, r5, #2
 801e80a:	d03d      	beq.n	801e888 <__pow5mult+0xa0>
 801e80c:	69fc      	ldr	r4, [r7, #28]
 801e80e:	b97c      	cbnz	r4, 801e830 <__pow5mult+0x48>
 801e810:	2010      	movs	r0, #16
 801e812:	f7fd fb8b 	bl	801bf2c <malloc>
 801e816:	4602      	mov	r2, r0
 801e818:	61f8      	str	r0, [r7, #28]
 801e81a:	b928      	cbnz	r0, 801e828 <__pow5mult+0x40>
 801e81c:	4b1d      	ldr	r3, [pc, #116]	@ (801e894 <__pow5mult+0xac>)
 801e81e:	481e      	ldr	r0, [pc, #120]	@ (801e898 <__pow5mult+0xb0>)
 801e820:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e824:	f7fe ff2c 	bl	801d680 <__assert_func>
 801e828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e82c:	6004      	str	r4, [r0, #0]
 801e82e:	60c4      	str	r4, [r0, #12]
 801e830:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e838:	b94c      	cbnz	r4, 801e84e <__pow5mult+0x66>
 801e83a:	f240 2171 	movw	r1, #625	@ 0x271
 801e83e:	4638      	mov	r0, r7
 801e840:	f7ff ff12 	bl	801e668 <__i2b>
 801e844:	2300      	movs	r3, #0
 801e846:	f8c8 0008 	str.w	r0, [r8, #8]
 801e84a:	4604      	mov	r4, r0
 801e84c:	6003      	str	r3, [r0, #0]
 801e84e:	f04f 0900 	mov.w	r9, #0
 801e852:	07eb      	lsls	r3, r5, #31
 801e854:	d50a      	bpl.n	801e86c <__pow5mult+0x84>
 801e856:	4631      	mov	r1, r6
 801e858:	4622      	mov	r2, r4
 801e85a:	4638      	mov	r0, r7
 801e85c:	f7ff ff1a 	bl	801e694 <__multiply>
 801e860:	4631      	mov	r1, r6
 801e862:	4680      	mov	r8, r0
 801e864:	4638      	mov	r0, r7
 801e866:	f7ff fe01 	bl	801e46c <_Bfree>
 801e86a:	4646      	mov	r6, r8
 801e86c:	106d      	asrs	r5, r5, #1
 801e86e:	d00b      	beq.n	801e888 <__pow5mult+0xa0>
 801e870:	6820      	ldr	r0, [r4, #0]
 801e872:	b938      	cbnz	r0, 801e884 <__pow5mult+0x9c>
 801e874:	4622      	mov	r2, r4
 801e876:	4621      	mov	r1, r4
 801e878:	4638      	mov	r0, r7
 801e87a:	f7ff ff0b 	bl	801e694 <__multiply>
 801e87e:	6020      	str	r0, [r4, #0]
 801e880:	f8c0 9000 	str.w	r9, [r0]
 801e884:	4604      	mov	r4, r0
 801e886:	e7e4      	b.n	801e852 <__pow5mult+0x6a>
 801e888:	4630      	mov	r0, r6
 801e88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e88e:	bf00      	nop
 801e890:	080232ec 	.word	0x080232ec
 801e894:	0802316e 	.word	0x0802316e
 801e898:	08023291 	.word	0x08023291

0801e89c <__lshift>:
 801e89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8a0:	460c      	mov	r4, r1
 801e8a2:	6849      	ldr	r1, [r1, #4]
 801e8a4:	6923      	ldr	r3, [r4, #16]
 801e8a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e8aa:	68a3      	ldr	r3, [r4, #8]
 801e8ac:	4607      	mov	r7, r0
 801e8ae:	4691      	mov	r9, r2
 801e8b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e8b4:	f108 0601 	add.w	r6, r8, #1
 801e8b8:	42b3      	cmp	r3, r6
 801e8ba:	db0b      	blt.n	801e8d4 <__lshift+0x38>
 801e8bc:	4638      	mov	r0, r7
 801e8be:	f7ff fd95 	bl	801e3ec <_Balloc>
 801e8c2:	4605      	mov	r5, r0
 801e8c4:	b948      	cbnz	r0, 801e8da <__lshift+0x3e>
 801e8c6:	4602      	mov	r2, r0
 801e8c8:	4b28      	ldr	r3, [pc, #160]	@ (801e96c <__lshift+0xd0>)
 801e8ca:	4829      	ldr	r0, [pc, #164]	@ (801e970 <__lshift+0xd4>)
 801e8cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e8d0:	f7fe fed6 	bl	801d680 <__assert_func>
 801e8d4:	3101      	adds	r1, #1
 801e8d6:	005b      	lsls	r3, r3, #1
 801e8d8:	e7ee      	b.n	801e8b8 <__lshift+0x1c>
 801e8da:	2300      	movs	r3, #0
 801e8dc:	f100 0114 	add.w	r1, r0, #20
 801e8e0:	f100 0210 	add.w	r2, r0, #16
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	4553      	cmp	r3, sl
 801e8e8:	db33      	blt.n	801e952 <__lshift+0xb6>
 801e8ea:	6920      	ldr	r0, [r4, #16]
 801e8ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e8f0:	f104 0314 	add.w	r3, r4, #20
 801e8f4:	f019 091f 	ands.w	r9, r9, #31
 801e8f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e8fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e900:	d02b      	beq.n	801e95a <__lshift+0xbe>
 801e902:	f1c9 0e20 	rsb	lr, r9, #32
 801e906:	468a      	mov	sl, r1
 801e908:	2200      	movs	r2, #0
 801e90a:	6818      	ldr	r0, [r3, #0]
 801e90c:	fa00 f009 	lsl.w	r0, r0, r9
 801e910:	4310      	orrs	r0, r2
 801e912:	f84a 0b04 	str.w	r0, [sl], #4
 801e916:	f853 2b04 	ldr.w	r2, [r3], #4
 801e91a:	459c      	cmp	ip, r3
 801e91c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e920:	d8f3      	bhi.n	801e90a <__lshift+0x6e>
 801e922:	ebac 0304 	sub.w	r3, ip, r4
 801e926:	3b15      	subs	r3, #21
 801e928:	f023 0303 	bic.w	r3, r3, #3
 801e92c:	3304      	adds	r3, #4
 801e92e:	f104 0015 	add.w	r0, r4, #21
 801e932:	4584      	cmp	ip, r0
 801e934:	bf38      	it	cc
 801e936:	2304      	movcc	r3, #4
 801e938:	50ca      	str	r2, [r1, r3]
 801e93a:	b10a      	cbz	r2, 801e940 <__lshift+0xa4>
 801e93c:	f108 0602 	add.w	r6, r8, #2
 801e940:	3e01      	subs	r6, #1
 801e942:	4638      	mov	r0, r7
 801e944:	612e      	str	r6, [r5, #16]
 801e946:	4621      	mov	r1, r4
 801e948:	f7ff fd90 	bl	801e46c <_Bfree>
 801e94c:	4628      	mov	r0, r5
 801e94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e952:	f842 0f04 	str.w	r0, [r2, #4]!
 801e956:	3301      	adds	r3, #1
 801e958:	e7c5      	b.n	801e8e6 <__lshift+0x4a>
 801e95a:	3904      	subs	r1, #4
 801e95c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e960:	f841 2f04 	str.w	r2, [r1, #4]!
 801e964:	459c      	cmp	ip, r3
 801e966:	d8f9      	bhi.n	801e95c <__lshift+0xc0>
 801e968:	e7ea      	b.n	801e940 <__lshift+0xa4>
 801e96a:	bf00      	nop
 801e96c:	08023280 	.word	0x08023280
 801e970:	08023291 	.word	0x08023291

0801e974 <__mcmp>:
 801e974:	690a      	ldr	r2, [r1, #16]
 801e976:	4603      	mov	r3, r0
 801e978:	6900      	ldr	r0, [r0, #16]
 801e97a:	1a80      	subs	r0, r0, r2
 801e97c:	b530      	push	{r4, r5, lr}
 801e97e:	d10e      	bne.n	801e99e <__mcmp+0x2a>
 801e980:	3314      	adds	r3, #20
 801e982:	3114      	adds	r1, #20
 801e984:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e988:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e98c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e994:	4295      	cmp	r5, r2
 801e996:	d003      	beq.n	801e9a0 <__mcmp+0x2c>
 801e998:	d205      	bcs.n	801e9a6 <__mcmp+0x32>
 801e99a:	f04f 30ff 	mov.w	r0, #4294967295
 801e99e:	bd30      	pop	{r4, r5, pc}
 801e9a0:	42a3      	cmp	r3, r4
 801e9a2:	d3f3      	bcc.n	801e98c <__mcmp+0x18>
 801e9a4:	e7fb      	b.n	801e99e <__mcmp+0x2a>
 801e9a6:	2001      	movs	r0, #1
 801e9a8:	e7f9      	b.n	801e99e <__mcmp+0x2a>
	...

0801e9ac <__mdiff>:
 801e9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9b0:	4689      	mov	r9, r1
 801e9b2:	4606      	mov	r6, r0
 801e9b4:	4611      	mov	r1, r2
 801e9b6:	4648      	mov	r0, r9
 801e9b8:	4614      	mov	r4, r2
 801e9ba:	f7ff ffdb 	bl	801e974 <__mcmp>
 801e9be:	1e05      	subs	r5, r0, #0
 801e9c0:	d112      	bne.n	801e9e8 <__mdiff+0x3c>
 801e9c2:	4629      	mov	r1, r5
 801e9c4:	4630      	mov	r0, r6
 801e9c6:	f7ff fd11 	bl	801e3ec <_Balloc>
 801e9ca:	4602      	mov	r2, r0
 801e9cc:	b928      	cbnz	r0, 801e9da <__mdiff+0x2e>
 801e9ce:	4b3f      	ldr	r3, [pc, #252]	@ (801eacc <__mdiff+0x120>)
 801e9d0:	f240 2137 	movw	r1, #567	@ 0x237
 801e9d4:	483e      	ldr	r0, [pc, #248]	@ (801ead0 <__mdiff+0x124>)
 801e9d6:	f7fe fe53 	bl	801d680 <__assert_func>
 801e9da:	2301      	movs	r3, #1
 801e9dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e9e0:	4610      	mov	r0, r2
 801e9e2:	b003      	add	sp, #12
 801e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9e8:	bfbc      	itt	lt
 801e9ea:	464b      	movlt	r3, r9
 801e9ec:	46a1      	movlt	r9, r4
 801e9ee:	4630      	mov	r0, r6
 801e9f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e9f4:	bfba      	itte	lt
 801e9f6:	461c      	movlt	r4, r3
 801e9f8:	2501      	movlt	r5, #1
 801e9fa:	2500      	movge	r5, #0
 801e9fc:	f7ff fcf6 	bl	801e3ec <_Balloc>
 801ea00:	4602      	mov	r2, r0
 801ea02:	b918      	cbnz	r0, 801ea0c <__mdiff+0x60>
 801ea04:	4b31      	ldr	r3, [pc, #196]	@ (801eacc <__mdiff+0x120>)
 801ea06:	f240 2145 	movw	r1, #581	@ 0x245
 801ea0a:	e7e3      	b.n	801e9d4 <__mdiff+0x28>
 801ea0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ea10:	6926      	ldr	r6, [r4, #16]
 801ea12:	60c5      	str	r5, [r0, #12]
 801ea14:	f109 0310 	add.w	r3, r9, #16
 801ea18:	f109 0514 	add.w	r5, r9, #20
 801ea1c:	f104 0e14 	add.w	lr, r4, #20
 801ea20:	f100 0b14 	add.w	fp, r0, #20
 801ea24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ea28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ea2c:	9301      	str	r3, [sp, #4]
 801ea2e:	46d9      	mov	r9, fp
 801ea30:	f04f 0c00 	mov.w	ip, #0
 801ea34:	9b01      	ldr	r3, [sp, #4]
 801ea36:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ea3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ea3e:	9301      	str	r3, [sp, #4]
 801ea40:	fa1f f38a 	uxth.w	r3, sl
 801ea44:	4619      	mov	r1, r3
 801ea46:	b283      	uxth	r3, r0
 801ea48:	1acb      	subs	r3, r1, r3
 801ea4a:	0c00      	lsrs	r0, r0, #16
 801ea4c:	4463      	add	r3, ip
 801ea4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ea52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ea5c:	4576      	cmp	r6, lr
 801ea5e:	f849 3b04 	str.w	r3, [r9], #4
 801ea62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ea66:	d8e5      	bhi.n	801ea34 <__mdiff+0x88>
 801ea68:	1b33      	subs	r3, r6, r4
 801ea6a:	3b15      	subs	r3, #21
 801ea6c:	f023 0303 	bic.w	r3, r3, #3
 801ea70:	3415      	adds	r4, #21
 801ea72:	3304      	adds	r3, #4
 801ea74:	42a6      	cmp	r6, r4
 801ea76:	bf38      	it	cc
 801ea78:	2304      	movcc	r3, #4
 801ea7a:	441d      	add	r5, r3
 801ea7c:	445b      	add	r3, fp
 801ea7e:	461e      	mov	r6, r3
 801ea80:	462c      	mov	r4, r5
 801ea82:	4544      	cmp	r4, r8
 801ea84:	d30e      	bcc.n	801eaa4 <__mdiff+0xf8>
 801ea86:	f108 0103 	add.w	r1, r8, #3
 801ea8a:	1b49      	subs	r1, r1, r5
 801ea8c:	f021 0103 	bic.w	r1, r1, #3
 801ea90:	3d03      	subs	r5, #3
 801ea92:	45a8      	cmp	r8, r5
 801ea94:	bf38      	it	cc
 801ea96:	2100      	movcc	r1, #0
 801ea98:	440b      	add	r3, r1
 801ea9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ea9e:	b191      	cbz	r1, 801eac6 <__mdiff+0x11a>
 801eaa0:	6117      	str	r7, [r2, #16]
 801eaa2:	e79d      	b.n	801e9e0 <__mdiff+0x34>
 801eaa4:	f854 1b04 	ldr.w	r1, [r4], #4
 801eaa8:	46e6      	mov	lr, ip
 801eaaa:	0c08      	lsrs	r0, r1, #16
 801eaac:	fa1c fc81 	uxtah	ip, ip, r1
 801eab0:	4471      	add	r1, lr
 801eab2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801eab6:	b289      	uxth	r1, r1
 801eab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801eabc:	f846 1b04 	str.w	r1, [r6], #4
 801eac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801eac4:	e7dd      	b.n	801ea82 <__mdiff+0xd6>
 801eac6:	3f01      	subs	r7, #1
 801eac8:	e7e7      	b.n	801ea9a <__mdiff+0xee>
 801eaca:	bf00      	nop
 801eacc:	08023280 	.word	0x08023280
 801ead0:	08023291 	.word	0x08023291

0801ead4 <__ulp>:
 801ead4:	b082      	sub	sp, #8
 801ead6:	ed8d 0b00 	vstr	d0, [sp]
 801eada:	9a01      	ldr	r2, [sp, #4]
 801eadc:	4b0f      	ldr	r3, [pc, #60]	@ (801eb1c <__ulp+0x48>)
 801eade:	4013      	ands	r3, r2
 801eae0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	dc08      	bgt.n	801eafa <__ulp+0x26>
 801eae8:	425b      	negs	r3, r3
 801eaea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801eaee:	ea4f 5223 	mov.w	r2, r3, asr #20
 801eaf2:	da04      	bge.n	801eafe <__ulp+0x2a>
 801eaf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801eaf8:	4113      	asrs	r3, r2
 801eafa:	2200      	movs	r2, #0
 801eafc:	e008      	b.n	801eb10 <__ulp+0x3c>
 801eafe:	f1a2 0314 	sub.w	r3, r2, #20
 801eb02:	2b1e      	cmp	r3, #30
 801eb04:	bfda      	itte	le
 801eb06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801eb0a:	40da      	lsrle	r2, r3
 801eb0c:	2201      	movgt	r2, #1
 801eb0e:	2300      	movs	r3, #0
 801eb10:	4619      	mov	r1, r3
 801eb12:	4610      	mov	r0, r2
 801eb14:	ec41 0b10 	vmov	d0, r0, r1
 801eb18:	b002      	add	sp, #8
 801eb1a:	4770      	bx	lr
 801eb1c:	7ff00000 	.word	0x7ff00000

0801eb20 <__b2d>:
 801eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb24:	6906      	ldr	r6, [r0, #16]
 801eb26:	f100 0814 	add.w	r8, r0, #20
 801eb2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801eb2e:	1f37      	subs	r7, r6, #4
 801eb30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801eb34:	4610      	mov	r0, r2
 801eb36:	f7ff fd4b 	bl	801e5d0 <__hi0bits>
 801eb3a:	f1c0 0320 	rsb	r3, r0, #32
 801eb3e:	280a      	cmp	r0, #10
 801eb40:	600b      	str	r3, [r1, #0]
 801eb42:	491b      	ldr	r1, [pc, #108]	@ (801ebb0 <__b2d+0x90>)
 801eb44:	dc15      	bgt.n	801eb72 <__b2d+0x52>
 801eb46:	f1c0 0c0b 	rsb	ip, r0, #11
 801eb4a:	fa22 f30c 	lsr.w	r3, r2, ip
 801eb4e:	45b8      	cmp	r8, r7
 801eb50:	ea43 0501 	orr.w	r5, r3, r1
 801eb54:	bf34      	ite	cc
 801eb56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801eb5a:	2300      	movcs	r3, #0
 801eb5c:	3015      	adds	r0, #21
 801eb5e:	fa02 f000 	lsl.w	r0, r2, r0
 801eb62:	fa23 f30c 	lsr.w	r3, r3, ip
 801eb66:	4303      	orrs	r3, r0
 801eb68:	461c      	mov	r4, r3
 801eb6a:	ec45 4b10 	vmov	d0, r4, r5
 801eb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb72:	45b8      	cmp	r8, r7
 801eb74:	bf3a      	itte	cc
 801eb76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801eb7a:	f1a6 0708 	subcc.w	r7, r6, #8
 801eb7e:	2300      	movcs	r3, #0
 801eb80:	380b      	subs	r0, #11
 801eb82:	d012      	beq.n	801ebaa <__b2d+0x8a>
 801eb84:	f1c0 0120 	rsb	r1, r0, #32
 801eb88:	fa23 f401 	lsr.w	r4, r3, r1
 801eb8c:	4082      	lsls	r2, r0
 801eb8e:	4322      	orrs	r2, r4
 801eb90:	4547      	cmp	r7, r8
 801eb92:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801eb96:	bf8c      	ite	hi
 801eb98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801eb9c:	2200      	movls	r2, #0
 801eb9e:	4083      	lsls	r3, r0
 801eba0:	40ca      	lsrs	r2, r1
 801eba2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801eba6:	4313      	orrs	r3, r2
 801eba8:	e7de      	b.n	801eb68 <__b2d+0x48>
 801ebaa:	ea42 0501 	orr.w	r5, r2, r1
 801ebae:	e7db      	b.n	801eb68 <__b2d+0x48>
 801ebb0:	3ff00000 	.word	0x3ff00000

0801ebb4 <__d2b>:
 801ebb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ebb8:	460f      	mov	r7, r1
 801ebba:	2101      	movs	r1, #1
 801ebbc:	ec59 8b10 	vmov	r8, r9, d0
 801ebc0:	4616      	mov	r6, r2
 801ebc2:	f7ff fc13 	bl	801e3ec <_Balloc>
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	b930      	cbnz	r0, 801ebd8 <__d2b+0x24>
 801ebca:	4602      	mov	r2, r0
 801ebcc:	4b23      	ldr	r3, [pc, #140]	@ (801ec5c <__d2b+0xa8>)
 801ebce:	4824      	ldr	r0, [pc, #144]	@ (801ec60 <__d2b+0xac>)
 801ebd0:	f240 310f 	movw	r1, #783	@ 0x30f
 801ebd4:	f7fe fd54 	bl	801d680 <__assert_func>
 801ebd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ebdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ebe0:	b10d      	cbz	r5, 801ebe6 <__d2b+0x32>
 801ebe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ebe6:	9301      	str	r3, [sp, #4]
 801ebe8:	f1b8 0300 	subs.w	r3, r8, #0
 801ebec:	d023      	beq.n	801ec36 <__d2b+0x82>
 801ebee:	4668      	mov	r0, sp
 801ebf0:	9300      	str	r3, [sp, #0]
 801ebf2:	f7ff fd0c 	bl	801e60e <__lo0bits>
 801ebf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ebfa:	b1d0      	cbz	r0, 801ec32 <__d2b+0x7e>
 801ebfc:	f1c0 0320 	rsb	r3, r0, #32
 801ec00:	fa02 f303 	lsl.w	r3, r2, r3
 801ec04:	430b      	orrs	r3, r1
 801ec06:	40c2      	lsrs	r2, r0
 801ec08:	6163      	str	r3, [r4, #20]
 801ec0a:	9201      	str	r2, [sp, #4]
 801ec0c:	9b01      	ldr	r3, [sp, #4]
 801ec0e:	61a3      	str	r3, [r4, #24]
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	bf0c      	ite	eq
 801ec14:	2201      	moveq	r2, #1
 801ec16:	2202      	movne	r2, #2
 801ec18:	6122      	str	r2, [r4, #16]
 801ec1a:	b1a5      	cbz	r5, 801ec46 <__d2b+0x92>
 801ec1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ec20:	4405      	add	r5, r0
 801ec22:	603d      	str	r5, [r7, #0]
 801ec24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ec28:	6030      	str	r0, [r6, #0]
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	b003      	add	sp, #12
 801ec2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec32:	6161      	str	r1, [r4, #20]
 801ec34:	e7ea      	b.n	801ec0c <__d2b+0x58>
 801ec36:	a801      	add	r0, sp, #4
 801ec38:	f7ff fce9 	bl	801e60e <__lo0bits>
 801ec3c:	9b01      	ldr	r3, [sp, #4]
 801ec3e:	6163      	str	r3, [r4, #20]
 801ec40:	3020      	adds	r0, #32
 801ec42:	2201      	movs	r2, #1
 801ec44:	e7e8      	b.n	801ec18 <__d2b+0x64>
 801ec46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ec4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ec4e:	6038      	str	r0, [r7, #0]
 801ec50:	6918      	ldr	r0, [r3, #16]
 801ec52:	f7ff fcbd 	bl	801e5d0 <__hi0bits>
 801ec56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ec5a:	e7e5      	b.n	801ec28 <__d2b+0x74>
 801ec5c:	08023280 	.word	0x08023280
 801ec60:	08023291 	.word	0x08023291

0801ec64 <__ratio>:
 801ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec68:	b085      	sub	sp, #20
 801ec6a:	e9cd 1000 	strd	r1, r0, [sp]
 801ec6e:	a902      	add	r1, sp, #8
 801ec70:	f7ff ff56 	bl	801eb20 <__b2d>
 801ec74:	9800      	ldr	r0, [sp, #0]
 801ec76:	a903      	add	r1, sp, #12
 801ec78:	ec55 4b10 	vmov	r4, r5, d0
 801ec7c:	f7ff ff50 	bl	801eb20 <__b2d>
 801ec80:	9b01      	ldr	r3, [sp, #4]
 801ec82:	6919      	ldr	r1, [r3, #16]
 801ec84:	9b00      	ldr	r3, [sp, #0]
 801ec86:	691b      	ldr	r3, [r3, #16]
 801ec88:	1ac9      	subs	r1, r1, r3
 801ec8a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801ec8e:	1a9b      	subs	r3, r3, r2
 801ec90:	ec5b ab10 	vmov	sl, fp, d0
 801ec94:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	bfce      	itee	gt
 801ec9c:	462a      	movgt	r2, r5
 801ec9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801eca2:	465a      	movle	r2, fp
 801eca4:	462f      	mov	r7, r5
 801eca6:	46d9      	mov	r9, fp
 801eca8:	bfcc      	ite	gt
 801ecaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ecae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801ecb2:	464b      	mov	r3, r9
 801ecb4:	4652      	mov	r2, sl
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	4639      	mov	r1, r7
 801ecba:	f7e1 fddf 	bl	800087c <__aeabi_ddiv>
 801ecbe:	ec41 0b10 	vmov	d0, r0, r1
 801ecc2:	b005      	add	sp, #20
 801ecc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecc8 <__copybits>:
 801ecc8:	3901      	subs	r1, #1
 801ecca:	b570      	push	{r4, r5, r6, lr}
 801eccc:	1149      	asrs	r1, r1, #5
 801ecce:	6914      	ldr	r4, [r2, #16]
 801ecd0:	3101      	adds	r1, #1
 801ecd2:	f102 0314 	add.w	r3, r2, #20
 801ecd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ecda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ecde:	1f05      	subs	r5, r0, #4
 801ece0:	42a3      	cmp	r3, r4
 801ece2:	d30c      	bcc.n	801ecfe <__copybits+0x36>
 801ece4:	1aa3      	subs	r3, r4, r2
 801ece6:	3b11      	subs	r3, #17
 801ece8:	f023 0303 	bic.w	r3, r3, #3
 801ecec:	3211      	adds	r2, #17
 801ecee:	42a2      	cmp	r2, r4
 801ecf0:	bf88      	it	hi
 801ecf2:	2300      	movhi	r3, #0
 801ecf4:	4418      	add	r0, r3
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	4288      	cmp	r0, r1
 801ecfa:	d305      	bcc.n	801ed08 <__copybits+0x40>
 801ecfc:	bd70      	pop	{r4, r5, r6, pc}
 801ecfe:	f853 6b04 	ldr.w	r6, [r3], #4
 801ed02:	f845 6f04 	str.w	r6, [r5, #4]!
 801ed06:	e7eb      	b.n	801ece0 <__copybits+0x18>
 801ed08:	f840 3b04 	str.w	r3, [r0], #4
 801ed0c:	e7f4      	b.n	801ecf8 <__copybits+0x30>

0801ed0e <__any_on>:
 801ed0e:	f100 0214 	add.w	r2, r0, #20
 801ed12:	6900      	ldr	r0, [r0, #16]
 801ed14:	114b      	asrs	r3, r1, #5
 801ed16:	4298      	cmp	r0, r3
 801ed18:	b510      	push	{r4, lr}
 801ed1a:	db11      	blt.n	801ed40 <__any_on+0x32>
 801ed1c:	dd0a      	ble.n	801ed34 <__any_on+0x26>
 801ed1e:	f011 011f 	ands.w	r1, r1, #31
 801ed22:	d007      	beq.n	801ed34 <__any_on+0x26>
 801ed24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ed28:	fa24 f001 	lsr.w	r0, r4, r1
 801ed2c:	fa00 f101 	lsl.w	r1, r0, r1
 801ed30:	428c      	cmp	r4, r1
 801ed32:	d10b      	bne.n	801ed4c <__any_on+0x3e>
 801ed34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ed38:	4293      	cmp	r3, r2
 801ed3a:	d803      	bhi.n	801ed44 <__any_on+0x36>
 801ed3c:	2000      	movs	r0, #0
 801ed3e:	bd10      	pop	{r4, pc}
 801ed40:	4603      	mov	r3, r0
 801ed42:	e7f7      	b.n	801ed34 <__any_on+0x26>
 801ed44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ed48:	2900      	cmp	r1, #0
 801ed4a:	d0f5      	beq.n	801ed38 <__any_on+0x2a>
 801ed4c:	2001      	movs	r0, #1
 801ed4e:	e7f6      	b.n	801ed3e <__any_on+0x30>

0801ed50 <sulp>:
 801ed50:	b570      	push	{r4, r5, r6, lr}
 801ed52:	4604      	mov	r4, r0
 801ed54:	460d      	mov	r5, r1
 801ed56:	ec45 4b10 	vmov	d0, r4, r5
 801ed5a:	4616      	mov	r6, r2
 801ed5c:	f7ff feba 	bl	801ead4 <__ulp>
 801ed60:	ec51 0b10 	vmov	r0, r1, d0
 801ed64:	b17e      	cbz	r6, 801ed86 <sulp+0x36>
 801ed66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ed6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	dd09      	ble.n	801ed86 <sulp+0x36>
 801ed72:	051b      	lsls	r3, r3, #20
 801ed74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801ed78:	2400      	movs	r4, #0
 801ed7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801ed7e:	4622      	mov	r2, r4
 801ed80:	462b      	mov	r3, r5
 801ed82:	f7e1 fc51 	bl	8000628 <__aeabi_dmul>
 801ed86:	ec41 0b10 	vmov	d0, r0, r1
 801ed8a:	bd70      	pop	{r4, r5, r6, pc}
 801ed8c:	0000      	movs	r0, r0
	...

0801ed90 <_strtod_l>:
 801ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed94:	b09f      	sub	sp, #124	@ 0x7c
 801ed96:	460c      	mov	r4, r1
 801ed98:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ed9a:	2200      	movs	r2, #0
 801ed9c:	921a      	str	r2, [sp, #104]	@ 0x68
 801ed9e:	9005      	str	r0, [sp, #20]
 801eda0:	f04f 0a00 	mov.w	sl, #0
 801eda4:	f04f 0b00 	mov.w	fp, #0
 801eda8:	460a      	mov	r2, r1
 801edaa:	9219      	str	r2, [sp, #100]	@ 0x64
 801edac:	7811      	ldrb	r1, [r2, #0]
 801edae:	292b      	cmp	r1, #43	@ 0x2b
 801edb0:	d04a      	beq.n	801ee48 <_strtod_l+0xb8>
 801edb2:	d838      	bhi.n	801ee26 <_strtod_l+0x96>
 801edb4:	290d      	cmp	r1, #13
 801edb6:	d832      	bhi.n	801ee1e <_strtod_l+0x8e>
 801edb8:	2908      	cmp	r1, #8
 801edba:	d832      	bhi.n	801ee22 <_strtod_l+0x92>
 801edbc:	2900      	cmp	r1, #0
 801edbe:	d03b      	beq.n	801ee38 <_strtod_l+0xa8>
 801edc0:	2200      	movs	r2, #0
 801edc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801edc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801edc6:	782a      	ldrb	r2, [r5, #0]
 801edc8:	2a30      	cmp	r2, #48	@ 0x30
 801edca:	f040 80b3 	bne.w	801ef34 <_strtod_l+0x1a4>
 801edce:	786a      	ldrb	r2, [r5, #1]
 801edd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801edd4:	2a58      	cmp	r2, #88	@ 0x58
 801edd6:	d16e      	bne.n	801eeb6 <_strtod_l+0x126>
 801edd8:	9302      	str	r3, [sp, #8]
 801edda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eddc:	9301      	str	r3, [sp, #4]
 801edde:	ab1a      	add	r3, sp, #104	@ 0x68
 801ede0:	9300      	str	r3, [sp, #0]
 801ede2:	4a8e      	ldr	r2, [pc, #568]	@ (801f01c <_strtod_l+0x28c>)
 801ede4:	9805      	ldr	r0, [sp, #20]
 801ede6:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ede8:	a919      	add	r1, sp, #100	@ 0x64
 801edea:	f001 fa33 	bl	8020254 <__gethex>
 801edee:	f010 060f 	ands.w	r6, r0, #15
 801edf2:	4604      	mov	r4, r0
 801edf4:	d005      	beq.n	801ee02 <_strtod_l+0x72>
 801edf6:	2e06      	cmp	r6, #6
 801edf8:	d128      	bne.n	801ee4c <_strtod_l+0xbc>
 801edfa:	3501      	adds	r5, #1
 801edfc:	2300      	movs	r3, #0
 801edfe:	9519      	str	r5, [sp, #100]	@ 0x64
 801ee00:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	f040 858e 	bne.w	801f926 <_strtod_l+0xb96>
 801ee0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ee0c:	b1cb      	cbz	r3, 801ee42 <_strtod_l+0xb2>
 801ee0e:	4652      	mov	r2, sl
 801ee10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801ee14:	ec43 2b10 	vmov	d0, r2, r3
 801ee18:	b01f      	add	sp, #124	@ 0x7c
 801ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee1e:	2920      	cmp	r1, #32
 801ee20:	d1ce      	bne.n	801edc0 <_strtod_l+0x30>
 801ee22:	3201      	adds	r2, #1
 801ee24:	e7c1      	b.n	801edaa <_strtod_l+0x1a>
 801ee26:	292d      	cmp	r1, #45	@ 0x2d
 801ee28:	d1ca      	bne.n	801edc0 <_strtod_l+0x30>
 801ee2a:	2101      	movs	r1, #1
 801ee2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ee2e:	1c51      	adds	r1, r2, #1
 801ee30:	9119      	str	r1, [sp, #100]	@ 0x64
 801ee32:	7852      	ldrb	r2, [r2, #1]
 801ee34:	2a00      	cmp	r2, #0
 801ee36:	d1c5      	bne.n	801edc4 <_strtod_l+0x34>
 801ee38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee3a:	9419      	str	r4, [sp, #100]	@ 0x64
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	f040 8570 	bne.w	801f922 <_strtod_l+0xb92>
 801ee42:	4652      	mov	r2, sl
 801ee44:	465b      	mov	r3, fp
 801ee46:	e7e5      	b.n	801ee14 <_strtod_l+0x84>
 801ee48:	2100      	movs	r1, #0
 801ee4a:	e7ef      	b.n	801ee2c <_strtod_l+0x9c>
 801ee4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ee4e:	b13a      	cbz	r2, 801ee60 <_strtod_l+0xd0>
 801ee50:	2135      	movs	r1, #53	@ 0x35
 801ee52:	a81c      	add	r0, sp, #112	@ 0x70
 801ee54:	f7ff ff38 	bl	801ecc8 <__copybits>
 801ee58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ee5a:	9805      	ldr	r0, [sp, #20]
 801ee5c:	f7ff fb06 	bl	801e46c <_Bfree>
 801ee60:	3e01      	subs	r6, #1
 801ee62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ee64:	2e04      	cmp	r6, #4
 801ee66:	d806      	bhi.n	801ee76 <_strtod_l+0xe6>
 801ee68:	e8df f006 	tbb	[pc, r6]
 801ee6c:	201d0314 	.word	0x201d0314
 801ee70:	14          	.byte	0x14
 801ee71:	00          	.byte	0x00
 801ee72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801ee76:	05e1      	lsls	r1, r4, #23
 801ee78:	bf48      	it	mi
 801ee7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801ee7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ee82:	0d1b      	lsrs	r3, r3, #20
 801ee84:	051b      	lsls	r3, r3, #20
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d1bb      	bne.n	801ee02 <_strtod_l+0x72>
 801ee8a:	f7fe fbaf 	bl	801d5ec <__errno>
 801ee8e:	2322      	movs	r3, #34	@ 0x22
 801ee90:	6003      	str	r3, [r0, #0]
 801ee92:	e7b6      	b.n	801ee02 <_strtod_l+0x72>
 801ee94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801ee98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801ee9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801eea0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801eea4:	e7e7      	b.n	801ee76 <_strtod_l+0xe6>
 801eea6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801f024 <_strtod_l+0x294>
 801eeaa:	e7e4      	b.n	801ee76 <_strtod_l+0xe6>
 801eeac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801eeb0:	f04f 3aff 	mov.w	sl, #4294967295
 801eeb4:	e7df      	b.n	801ee76 <_strtod_l+0xe6>
 801eeb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801eeb8:	1c5a      	adds	r2, r3, #1
 801eeba:	9219      	str	r2, [sp, #100]	@ 0x64
 801eebc:	785b      	ldrb	r3, [r3, #1]
 801eebe:	2b30      	cmp	r3, #48	@ 0x30
 801eec0:	d0f9      	beq.n	801eeb6 <_strtod_l+0x126>
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d09d      	beq.n	801ee02 <_strtod_l+0x72>
 801eec6:	2301      	movs	r3, #1
 801eec8:	9309      	str	r3, [sp, #36]	@ 0x24
 801eeca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801eecc:	930c      	str	r3, [sp, #48]	@ 0x30
 801eece:	2300      	movs	r3, #0
 801eed0:	9308      	str	r3, [sp, #32]
 801eed2:	930a      	str	r3, [sp, #40]	@ 0x28
 801eed4:	461f      	mov	r7, r3
 801eed6:	220a      	movs	r2, #10
 801eed8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801eeda:	7805      	ldrb	r5, [r0, #0]
 801eedc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801eee0:	b2d9      	uxtb	r1, r3
 801eee2:	2909      	cmp	r1, #9
 801eee4:	d928      	bls.n	801ef38 <_strtod_l+0x1a8>
 801eee6:	494e      	ldr	r1, [pc, #312]	@ (801f020 <_strtod_l+0x290>)
 801eee8:	2201      	movs	r2, #1
 801eeea:	f001 f8f5 	bl	80200d8 <strncmp>
 801eeee:	2800      	cmp	r0, #0
 801eef0:	d032      	beq.n	801ef58 <_strtod_l+0x1c8>
 801eef2:	2000      	movs	r0, #0
 801eef4:	462a      	mov	r2, r5
 801eef6:	4681      	mov	r9, r0
 801eef8:	463d      	mov	r5, r7
 801eefa:	4603      	mov	r3, r0
 801eefc:	2a65      	cmp	r2, #101	@ 0x65
 801eefe:	d001      	beq.n	801ef04 <_strtod_l+0x174>
 801ef00:	2a45      	cmp	r2, #69	@ 0x45
 801ef02:	d114      	bne.n	801ef2e <_strtod_l+0x19e>
 801ef04:	b91d      	cbnz	r5, 801ef0e <_strtod_l+0x17e>
 801ef06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef08:	4302      	orrs	r2, r0
 801ef0a:	d095      	beq.n	801ee38 <_strtod_l+0xa8>
 801ef0c:	2500      	movs	r5, #0
 801ef0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801ef10:	1c62      	adds	r2, r4, #1
 801ef12:	9219      	str	r2, [sp, #100]	@ 0x64
 801ef14:	7862      	ldrb	r2, [r4, #1]
 801ef16:	2a2b      	cmp	r2, #43	@ 0x2b
 801ef18:	d077      	beq.n	801f00a <_strtod_l+0x27a>
 801ef1a:	2a2d      	cmp	r2, #45	@ 0x2d
 801ef1c:	d07b      	beq.n	801f016 <_strtod_l+0x286>
 801ef1e:	f04f 0c00 	mov.w	ip, #0
 801ef22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801ef26:	2909      	cmp	r1, #9
 801ef28:	f240 8082 	bls.w	801f030 <_strtod_l+0x2a0>
 801ef2c:	9419      	str	r4, [sp, #100]	@ 0x64
 801ef2e:	f04f 0800 	mov.w	r8, #0
 801ef32:	e0a2      	b.n	801f07a <_strtod_l+0x2ea>
 801ef34:	2300      	movs	r3, #0
 801ef36:	e7c7      	b.n	801eec8 <_strtod_l+0x138>
 801ef38:	2f08      	cmp	r7, #8
 801ef3a:	bfd5      	itete	le
 801ef3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801ef3e:	9908      	ldrgt	r1, [sp, #32]
 801ef40:	fb02 3301 	mlale	r3, r2, r1, r3
 801ef44:	fb02 3301 	mlagt	r3, r2, r1, r3
 801ef48:	f100 0001 	add.w	r0, r0, #1
 801ef4c:	bfd4      	ite	le
 801ef4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 801ef50:	9308      	strgt	r3, [sp, #32]
 801ef52:	3701      	adds	r7, #1
 801ef54:	9019      	str	r0, [sp, #100]	@ 0x64
 801ef56:	e7bf      	b.n	801eed8 <_strtod_l+0x148>
 801ef58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ef5a:	1c5a      	adds	r2, r3, #1
 801ef5c:	9219      	str	r2, [sp, #100]	@ 0x64
 801ef5e:	785a      	ldrb	r2, [r3, #1]
 801ef60:	b37f      	cbz	r7, 801efc2 <_strtod_l+0x232>
 801ef62:	4681      	mov	r9, r0
 801ef64:	463d      	mov	r5, r7
 801ef66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801ef6a:	2b09      	cmp	r3, #9
 801ef6c:	d912      	bls.n	801ef94 <_strtod_l+0x204>
 801ef6e:	2301      	movs	r3, #1
 801ef70:	e7c4      	b.n	801eefc <_strtod_l+0x16c>
 801ef72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ef74:	1c5a      	adds	r2, r3, #1
 801ef76:	9219      	str	r2, [sp, #100]	@ 0x64
 801ef78:	785a      	ldrb	r2, [r3, #1]
 801ef7a:	3001      	adds	r0, #1
 801ef7c:	2a30      	cmp	r2, #48	@ 0x30
 801ef7e:	d0f8      	beq.n	801ef72 <_strtod_l+0x1e2>
 801ef80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801ef84:	2b08      	cmp	r3, #8
 801ef86:	f200 84d3 	bhi.w	801f930 <_strtod_l+0xba0>
 801ef8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ef8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef8e:	4681      	mov	r9, r0
 801ef90:	2000      	movs	r0, #0
 801ef92:	4605      	mov	r5, r0
 801ef94:	3a30      	subs	r2, #48	@ 0x30
 801ef96:	f100 0301 	add.w	r3, r0, #1
 801ef9a:	d02a      	beq.n	801eff2 <_strtod_l+0x262>
 801ef9c:	4499      	add	r9, r3
 801ef9e:	eb00 0c05 	add.w	ip, r0, r5
 801efa2:	462b      	mov	r3, r5
 801efa4:	210a      	movs	r1, #10
 801efa6:	4563      	cmp	r3, ip
 801efa8:	d10d      	bne.n	801efc6 <_strtod_l+0x236>
 801efaa:	1c69      	adds	r1, r5, #1
 801efac:	4401      	add	r1, r0
 801efae:	4428      	add	r0, r5
 801efb0:	2808      	cmp	r0, #8
 801efb2:	dc16      	bgt.n	801efe2 <_strtod_l+0x252>
 801efb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801efb6:	230a      	movs	r3, #10
 801efb8:	fb03 2300 	mla	r3, r3, r0, r2
 801efbc:	930a      	str	r3, [sp, #40]	@ 0x28
 801efbe:	2300      	movs	r3, #0
 801efc0:	e018      	b.n	801eff4 <_strtod_l+0x264>
 801efc2:	4638      	mov	r0, r7
 801efc4:	e7da      	b.n	801ef7c <_strtod_l+0x1ec>
 801efc6:	2b08      	cmp	r3, #8
 801efc8:	f103 0301 	add.w	r3, r3, #1
 801efcc:	dc03      	bgt.n	801efd6 <_strtod_l+0x246>
 801efce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801efd0:	434e      	muls	r6, r1
 801efd2:	960a      	str	r6, [sp, #40]	@ 0x28
 801efd4:	e7e7      	b.n	801efa6 <_strtod_l+0x216>
 801efd6:	2b10      	cmp	r3, #16
 801efd8:	bfde      	ittt	le
 801efda:	9e08      	ldrle	r6, [sp, #32]
 801efdc:	434e      	mulle	r6, r1
 801efde:	9608      	strle	r6, [sp, #32]
 801efe0:	e7e1      	b.n	801efa6 <_strtod_l+0x216>
 801efe2:	280f      	cmp	r0, #15
 801efe4:	dceb      	bgt.n	801efbe <_strtod_l+0x22e>
 801efe6:	9808      	ldr	r0, [sp, #32]
 801efe8:	230a      	movs	r3, #10
 801efea:	fb03 2300 	mla	r3, r3, r0, r2
 801efee:	9308      	str	r3, [sp, #32]
 801eff0:	e7e5      	b.n	801efbe <_strtod_l+0x22e>
 801eff2:	4629      	mov	r1, r5
 801eff4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801eff6:	1c50      	adds	r0, r2, #1
 801eff8:	9019      	str	r0, [sp, #100]	@ 0x64
 801effa:	7852      	ldrb	r2, [r2, #1]
 801effc:	4618      	mov	r0, r3
 801effe:	460d      	mov	r5, r1
 801f000:	e7b1      	b.n	801ef66 <_strtod_l+0x1d6>
 801f002:	f04f 0900 	mov.w	r9, #0
 801f006:	2301      	movs	r3, #1
 801f008:	e77d      	b.n	801ef06 <_strtod_l+0x176>
 801f00a:	f04f 0c00 	mov.w	ip, #0
 801f00e:	1ca2      	adds	r2, r4, #2
 801f010:	9219      	str	r2, [sp, #100]	@ 0x64
 801f012:	78a2      	ldrb	r2, [r4, #2]
 801f014:	e785      	b.n	801ef22 <_strtod_l+0x192>
 801f016:	f04f 0c01 	mov.w	ip, #1
 801f01a:	e7f8      	b.n	801f00e <_strtod_l+0x27e>
 801f01c:	08023400 	.word	0x08023400
 801f020:	080233e8 	.word	0x080233e8
 801f024:	7ff00000 	.word	0x7ff00000
 801f028:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f02a:	1c51      	adds	r1, r2, #1
 801f02c:	9119      	str	r1, [sp, #100]	@ 0x64
 801f02e:	7852      	ldrb	r2, [r2, #1]
 801f030:	2a30      	cmp	r2, #48	@ 0x30
 801f032:	d0f9      	beq.n	801f028 <_strtod_l+0x298>
 801f034:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801f038:	2908      	cmp	r1, #8
 801f03a:	f63f af78 	bhi.w	801ef2e <_strtod_l+0x19e>
 801f03e:	3a30      	subs	r2, #48	@ 0x30
 801f040:	920e      	str	r2, [sp, #56]	@ 0x38
 801f042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f044:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f046:	f04f 080a 	mov.w	r8, #10
 801f04a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f04c:	1c56      	adds	r6, r2, #1
 801f04e:	9619      	str	r6, [sp, #100]	@ 0x64
 801f050:	7852      	ldrb	r2, [r2, #1]
 801f052:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801f056:	f1be 0f09 	cmp.w	lr, #9
 801f05a:	d939      	bls.n	801f0d0 <_strtod_l+0x340>
 801f05c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f05e:	1a76      	subs	r6, r6, r1
 801f060:	2e08      	cmp	r6, #8
 801f062:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801f066:	dc03      	bgt.n	801f070 <_strtod_l+0x2e0>
 801f068:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f06a:	4588      	cmp	r8, r1
 801f06c:	bfa8      	it	ge
 801f06e:	4688      	movge	r8, r1
 801f070:	f1bc 0f00 	cmp.w	ip, #0
 801f074:	d001      	beq.n	801f07a <_strtod_l+0x2ea>
 801f076:	f1c8 0800 	rsb	r8, r8, #0
 801f07a:	2d00      	cmp	r5, #0
 801f07c:	d14e      	bne.n	801f11c <_strtod_l+0x38c>
 801f07e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f080:	4308      	orrs	r0, r1
 801f082:	f47f aebe 	bne.w	801ee02 <_strtod_l+0x72>
 801f086:	2b00      	cmp	r3, #0
 801f088:	f47f aed6 	bne.w	801ee38 <_strtod_l+0xa8>
 801f08c:	2a69      	cmp	r2, #105	@ 0x69
 801f08e:	d028      	beq.n	801f0e2 <_strtod_l+0x352>
 801f090:	dc25      	bgt.n	801f0de <_strtod_l+0x34e>
 801f092:	2a49      	cmp	r2, #73	@ 0x49
 801f094:	d025      	beq.n	801f0e2 <_strtod_l+0x352>
 801f096:	2a4e      	cmp	r2, #78	@ 0x4e
 801f098:	f47f aece 	bne.w	801ee38 <_strtod_l+0xa8>
 801f09c:	499b      	ldr	r1, [pc, #620]	@ (801f30c <_strtod_l+0x57c>)
 801f09e:	a819      	add	r0, sp, #100	@ 0x64
 801f0a0:	f001 fafa 	bl	8020698 <__match>
 801f0a4:	2800      	cmp	r0, #0
 801f0a6:	f43f aec7 	beq.w	801ee38 <_strtod_l+0xa8>
 801f0aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f0ac:	781b      	ldrb	r3, [r3, #0]
 801f0ae:	2b28      	cmp	r3, #40	@ 0x28
 801f0b0:	d12e      	bne.n	801f110 <_strtod_l+0x380>
 801f0b2:	4997      	ldr	r1, [pc, #604]	@ (801f310 <_strtod_l+0x580>)
 801f0b4:	aa1c      	add	r2, sp, #112	@ 0x70
 801f0b6:	a819      	add	r0, sp, #100	@ 0x64
 801f0b8:	f001 fb02 	bl	80206c0 <__hexnan>
 801f0bc:	2805      	cmp	r0, #5
 801f0be:	d127      	bne.n	801f110 <_strtod_l+0x380>
 801f0c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f0c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801f0c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801f0ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801f0ce:	e698      	b.n	801ee02 <_strtod_l+0x72>
 801f0d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f0d2:	fb08 2101 	mla	r1, r8, r1, r2
 801f0d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801f0da:	920e      	str	r2, [sp, #56]	@ 0x38
 801f0dc:	e7b5      	b.n	801f04a <_strtod_l+0x2ba>
 801f0de:	2a6e      	cmp	r2, #110	@ 0x6e
 801f0e0:	e7da      	b.n	801f098 <_strtod_l+0x308>
 801f0e2:	498c      	ldr	r1, [pc, #560]	@ (801f314 <_strtod_l+0x584>)
 801f0e4:	a819      	add	r0, sp, #100	@ 0x64
 801f0e6:	f001 fad7 	bl	8020698 <__match>
 801f0ea:	2800      	cmp	r0, #0
 801f0ec:	f43f aea4 	beq.w	801ee38 <_strtod_l+0xa8>
 801f0f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f0f2:	4989      	ldr	r1, [pc, #548]	@ (801f318 <_strtod_l+0x588>)
 801f0f4:	3b01      	subs	r3, #1
 801f0f6:	a819      	add	r0, sp, #100	@ 0x64
 801f0f8:	9319      	str	r3, [sp, #100]	@ 0x64
 801f0fa:	f001 facd 	bl	8020698 <__match>
 801f0fe:	b910      	cbnz	r0, 801f106 <_strtod_l+0x376>
 801f100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f102:	3301      	adds	r3, #1
 801f104:	9319      	str	r3, [sp, #100]	@ 0x64
 801f106:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801f328 <_strtod_l+0x598>
 801f10a:	f04f 0a00 	mov.w	sl, #0
 801f10e:	e678      	b.n	801ee02 <_strtod_l+0x72>
 801f110:	4882      	ldr	r0, [pc, #520]	@ (801f31c <_strtod_l+0x58c>)
 801f112:	f001 f815 	bl	8020140 <nan>
 801f116:	ec5b ab10 	vmov	sl, fp, d0
 801f11a:	e672      	b.n	801ee02 <_strtod_l+0x72>
 801f11c:	eba8 0309 	sub.w	r3, r8, r9
 801f120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f122:	9309      	str	r3, [sp, #36]	@ 0x24
 801f124:	2f00      	cmp	r7, #0
 801f126:	bf08      	it	eq
 801f128:	462f      	moveq	r7, r5
 801f12a:	2d10      	cmp	r5, #16
 801f12c:	462c      	mov	r4, r5
 801f12e:	bfa8      	it	ge
 801f130:	2410      	movge	r4, #16
 801f132:	f7e1 f9ff 	bl	8000534 <__aeabi_ui2d>
 801f136:	2d09      	cmp	r5, #9
 801f138:	4682      	mov	sl, r0
 801f13a:	468b      	mov	fp, r1
 801f13c:	dc13      	bgt.n	801f166 <_strtod_l+0x3d6>
 801f13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f140:	2b00      	cmp	r3, #0
 801f142:	f43f ae5e 	beq.w	801ee02 <_strtod_l+0x72>
 801f146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f148:	dd78      	ble.n	801f23c <_strtod_l+0x4ac>
 801f14a:	2b16      	cmp	r3, #22
 801f14c:	dc5f      	bgt.n	801f20e <_strtod_l+0x47e>
 801f14e:	4974      	ldr	r1, [pc, #464]	@ (801f320 <_strtod_l+0x590>)
 801f150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f154:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f158:	4652      	mov	r2, sl
 801f15a:	465b      	mov	r3, fp
 801f15c:	f7e1 fa64 	bl	8000628 <__aeabi_dmul>
 801f160:	4682      	mov	sl, r0
 801f162:	468b      	mov	fp, r1
 801f164:	e64d      	b.n	801ee02 <_strtod_l+0x72>
 801f166:	4b6e      	ldr	r3, [pc, #440]	@ (801f320 <_strtod_l+0x590>)
 801f168:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f16c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801f170:	f7e1 fa5a 	bl	8000628 <__aeabi_dmul>
 801f174:	4682      	mov	sl, r0
 801f176:	9808      	ldr	r0, [sp, #32]
 801f178:	468b      	mov	fp, r1
 801f17a:	f7e1 f9db 	bl	8000534 <__aeabi_ui2d>
 801f17e:	4602      	mov	r2, r0
 801f180:	460b      	mov	r3, r1
 801f182:	4650      	mov	r0, sl
 801f184:	4659      	mov	r1, fp
 801f186:	f7e1 f899 	bl	80002bc <__adddf3>
 801f18a:	2d0f      	cmp	r5, #15
 801f18c:	4682      	mov	sl, r0
 801f18e:	468b      	mov	fp, r1
 801f190:	ddd5      	ble.n	801f13e <_strtod_l+0x3ae>
 801f192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f194:	1b2c      	subs	r4, r5, r4
 801f196:	441c      	add	r4, r3
 801f198:	2c00      	cmp	r4, #0
 801f19a:	f340 8096 	ble.w	801f2ca <_strtod_l+0x53a>
 801f19e:	f014 030f 	ands.w	r3, r4, #15
 801f1a2:	d00a      	beq.n	801f1ba <_strtod_l+0x42a>
 801f1a4:	495e      	ldr	r1, [pc, #376]	@ (801f320 <_strtod_l+0x590>)
 801f1a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f1aa:	4652      	mov	r2, sl
 801f1ac:	465b      	mov	r3, fp
 801f1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f1b2:	f7e1 fa39 	bl	8000628 <__aeabi_dmul>
 801f1b6:	4682      	mov	sl, r0
 801f1b8:	468b      	mov	fp, r1
 801f1ba:	f034 040f 	bics.w	r4, r4, #15
 801f1be:	d073      	beq.n	801f2a8 <_strtod_l+0x518>
 801f1c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801f1c4:	dd48      	ble.n	801f258 <_strtod_l+0x4c8>
 801f1c6:	2400      	movs	r4, #0
 801f1c8:	46a0      	mov	r8, r4
 801f1ca:	940a      	str	r4, [sp, #40]	@ 0x28
 801f1cc:	46a1      	mov	r9, r4
 801f1ce:	9a05      	ldr	r2, [sp, #20]
 801f1d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801f328 <_strtod_l+0x598>
 801f1d4:	2322      	movs	r3, #34	@ 0x22
 801f1d6:	6013      	str	r3, [r2, #0]
 801f1d8:	f04f 0a00 	mov.w	sl, #0
 801f1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	f43f ae0f 	beq.w	801ee02 <_strtod_l+0x72>
 801f1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f1e6:	9805      	ldr	r0, [sp, #20]
 801f1e8:	f7ff f940 	bl	801e46c <_Bfree>
 801f1ec:	9805      	ldr	r0, [sp, #20]
 801f1ee:	4649      	mov	r1, r9
 801f1f0:	f7ff f93c 	bl	801e46c <_Bfree>
 801f1f4:	9805      	ldr	r0, [sp, #20]
 801f1f6:	4641      	mov	r1, r8
 801f1f8:	f7ff f938 	bl	801e46c <_Bfree>
 801f1fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f1fe:	9805      	ldr	r0, [sp, #20]
 801f200:	f7ff f934 	bl	801e46c <_Bfree>
 801f204:	9805      	ldr	r0, [sp, #20]
 801f206:	4621      	mov	r1, r4
 801f208:	f7ff f930 	bl	801e46c <_Bfree>
 801f20c:	e5f9      	b.n	801ee02 <_strtod_l+0x72>
 801f20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f210:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801f214:	4293      	cmp	r3, r2
 801f216:	dbbc      	blt.n	801f192 <_strtod_l+0x402>
 801f218:	4c41      	ldr	r4, [pc, #260]	@ (801f320 <_strtod_l+0x590>)
 801f21a:	f1c5 050f 	rsb	r5, r5, #15
 801f21e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f222:	4652      	mov	r2, sl
 801f224:	465b      	mov	r3, fp
 801f226:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f22a:	f7e1 f9fd 	bl	8000628 <__aeabi_dmul>
 801f22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f230:	1b5d      	subs	r5, r3, r5
 801f232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f236:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f23a:	e78f      	b.n	801f15c <_strtod_l+0x3cc>
 801f23c:	3316      	adds	r3, #22
 801f23e:	dba8      	blt.n	801f192 <_strtod_l+0x402>
 801f240:	4b37      	ldr	r3, [pc, #220]	@ (801f320 <_strtod_l+0x590>)
 801f242:	eba9 0808 	sub.w	r8, r9, r8
 801f246:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801f24a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801f24e:	4650      	mov	r0, sl
 801f250:	4659      	mov	r1, fp
 801f252:	f7e1 fb13 	bl	800087c <__aeabi_ddiv>
 801f256:	e783      	b.n	801f160 <_strtod_l+0x3d0>
 801f258:	4b32      	ldr	r3, [pc, #200]	@ (801f324 <_strtod_l+0x594>)
 801f25a:	9308      	str	r3, [sp, #32]
 801f25c:	2300      	movs	r3, #0
 801f25e:	1124      	asrs	r4, r4, #4
 801f260:	4650      	mov	r0, sl
 801f262:	4659      	mov	r1, fp
 801f264:	461e      	mov	r6, r3
 801f266:	2c01      	cmp	r4, #1
 801f268:	dc21      	bgt.n	801f2ae <_strtod_l+0x51e>
 801f26a:	b10b      	cbz	r3, 801f270 <_strtod_l+0x4e0>
 801f26c:	4682      	mov	sl, r0
 801f26e:	468b      	mov	fp, r1
 801f270:	492c      	ldr	r1, [pc, #176]	@ (801f324 <_strtod_l+0x594>)
 801f272:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801f276:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801f27a:	4652      	mov	r2, sl
 801f27c:	465b      	mov	r3, fp
 801f27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f282:	f7e1 f9d1 	bl	8000628 <__aeabi_dmul>
 801f286:	4b28      	ldr	r3, [pc, #160]	@ (801f328 <_strtod_l+0x598>)
 801f288:	460a      	mov	r2, r1
 801f28a:	400b      	ands	r3, r1
 801f28c:	4927      	ldr	r1, [pc, #156]	@ (801f32c <_strtod_l+0x59c>)
 801f28e:	428b      	cmp	r3, r1
 801f290:	4682      	mov	sl, r0
 801f292:	d898      	bhi.n	801f1c6 <_strtod_l+0x436>
 801f294:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801f298:	428b      	cmp	r3, r1
 801f29a:	bf86      	itte	hi
 801f29c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801f330 <_strtod_l+0x5a0>
 801f2a0:	f04f 3aff 	movhi.w	sl, #4294967295
 801f2a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801f2a8:	2300      	movs	r3, #0
 801f2aa:	9308      	str	r3, [sp, #32]
 801f2ac:	e07a      	b.n	801f3a4 <_strtod_l+0x614>
 801f2ae:	07e2      	lsls	r2, r4, #31
 801f2b0:	d505      	bpl.n	801f2be <_strtod_l+0x52e>
 801f2b2:	9b08      	ldr	r3, [sp, #32]
 801f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2b8:	f7e1 f9b6 	bl	8000628 <__aeabi_dmul>
 801f2bc:	2301      	movs	r3, #1
 801f2be:	9a08      	ldr	r2, [sp, #32]
 801f2c0:	3208      	adds	r2, #8
 801f2c2:	3601      	adds	r6, #1
 801f2c4:	1064      	asrs	r4, r4, #1
 801f2c6:	9208      	str	r2, [sp, #32]
 801f2c8:	e7cd      	b.n	801f266 <_strtod_l+0x4d6>
 801f2ca:	d0ed      	beq.n	801f2a8 <_strtod_l+0x518>
 801f2cc:	4264      	negs	r4, r4
 801f2ce:	f014 020f 	ands.w	r2, r4, #15
 801f2d2:	d00a      	beq.n	801f2ea <_strtod_l+0x55a>
 801f2d4:	4b12      	ldr	r3, [pc, #72]	@ (801f320 <_strtod_l+0x590>)
 801f2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f2da:	4650      	mov	r0, sl
 801f2dc:	4659      	mov	r1, fp
 801f2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2e2:	f7e1 facb 	bl	800087c <__aeabi_ddiv>
 801f2e6:	4682      	mov	sl, r0
 801f2e8:	468b      	mov	fp, r1
 801f2ea:	1124      	asrs	r4, r4, #4
 801f2ec:	d0dc      	beq.n	801f2a8 <_strtod_l+0x518>
 801f2ee:	2c1f      	cmp	r4, #31
 801f2f0:	dd20      	ble.n	801f334 <_strtod_l+0x5a4>
 801f2f2:	2400      	movs	r4, #0
 801f2f4:	46a0      	mov	r8, r4
 801f2f6:	940a      	str	r4, [sp, #40]	@ 0x28
 801f2f8:	46a1      	mov	r9, r4
 801f2fa:	9a05      	ldr	r2, [sp, #20]
 801f2fc:	2322      	movs	r3, #34	@ 0x22
 801f2fe:	f04f 0a00 	mov.w	sl, #0
 801f302:	f04f 0b00 	mov.w	fp, #0
 801f306:	6013      	str	r3, [r2, #0]
 801f308:	e768      	b.n	801f1dc <_strtod_l+0x44c>
 801f30a:	bf00      	nop
 801f30c:	08023142 	.word	0x08023142
 801f310:	080233ec 	.word	0x080233ec
 801f314:	0802313a 	.word	0x0802313a
 801f318:	0802321e 	.word	0x0802321e
 801f31c:	0802321a 	.word	0x0802321a
 801f320:	08023320 	.word	0x08023320
 801f324:	080232f8 	.word	0x080232f8
 801f328:	7ff00000 	.word	0x7ff00000
 801f32c:	7ca00000 	.word	0x7ca00000
 801f330:	7fefffff 	.word	0x7fefffff
 801f334:	f014 0310 	ands.w	r3, r4, #16
 801f338:	bf18      	it	ne
 801f33a:	236a      	movne	r3, #106	@ 0x6a
 801f33c:	4ea9      	ldr	r6, [pc, #676]	@ (801f5e4 <_strtod_l+0x854>)
 801f33e:	9308      	str	r3, [sp, #32]
 801f340:	4650      	mov	r0, sl
 801f342:	4659      	mov	r1, fp
 801f344:	2300      	movs	r3, #0
 801f346:	07e2      	lsls	r2, r4, #31
 801f348:	d504      	bpl.n	801f354 <_strtod_l+0x5c4>
 801f34a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f34e:	f7e1 f96b 	bl	8000628 <__aeabi_dmul>
 801f352:	2301      	movs	r3, #1
 801f354:	1064      	asrs	r4, r4, #1
 801f356:	f106 0608 	add.w	r6, r6, #8
 801f35a:	d1f4      	bne.n	801f346 <_strtod_l+0x5b6>
 801f35c:	b10b      	cbz	r3, 801f362 <_strtod_l+0x5d2>
 801f35e:	4682      	mov	sl, r0
 801f360:	468b      	mov	fp, r1
 801f362:	9b08      	ldr	r3, [sp, #32]
 801f364:	b1b3      	cbz	r3, 801f394 <_strtod_l+0x604>
 801f366:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801f36a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801f36e:	2b00      	cmp	r3, #0
 801f370:	4659      	mov	r1, fp
 801f372:	dd0f      	ble.n	801f394 <_strtod_l+0x604>
 801f374:	2b1f      	cmp	r3, #31
 801f376:	dd55      	ble.n	801f424 <_strtod_l+0x694>
 801f378:	2b34      	cmp	r3, #52	@ 0x34
 801f37a:	bfde      	ittt	le
 801f37c:	f04f 33ff 	movle.w	r3, #4294967295
 801f380:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801f384:	4093      	lslle	r3, r2
 801f386:	f04f 0a00 	mov.w	sl, #0
 801f38a:	bfcc      	ite	gt
 801f38c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801f390:	ea03 0b01 	andle.w	fp, r3, r1
 801f394:	2200      	movs	r2, #0
 801f396:	2300      	movs	r3, #0
 801f398:	4650      	mov	r0, sl
 801f39a:	4659      	mov	r1, fp
 801f39c:	f7e1 fbac 	bl	8000af8 <__aeabi_dcmpeq>
 801f3a0:	2800      	cmp	r0, #0
 801f3a2:	d1a6      	bne.n	801f2f2 <_strtod_l+0x562>
 801f3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3a6:	9300      	str	r3, [sp, #0]
 801f3a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f3aa:	9805      	ldr	r0, [sp, #20]
 801f3ac:	462b      	mov	r3, r5
 801f3ae:	463a      	mov	r2, r7
 801f3b0:	f7ff f8c4 	bl	801e53c <__s2b>
 801f3b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801f3b6:	2800      	cmp	r0, #0
 801f3b8:	f43f af05 	beq.w	801f1c6 <_strtod_l+0x436>
 801f3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3be:	2a00      	cmp	r2, #0
 801f3c0:	eba9 0308 	sub.w	r3, r9, r8
 801f3c4:	bfa8      	it	ge
 801f3c6:	2300      	movge	r3, #0
 801f3c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801f3ca:	2400      	movs	r4, #0
 801f3cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801f3d0:	9316      	str	r3, [sp, #88]	@ 0x58
 801f3d2:	46a0      	mov	r8, r4
 801f3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3d6:	9805      	ldr	r0, [sp, #20]
 801f3d8:	6859      	ldr	r1, [r3, #4]
 801f3da:	f7ff f807 	bl	801e3ec <_Balloc>
 801f3de:	4681      	mov	r9, r0
 801f3e0:	2800      	cmp	r0, #0
 801f3e2:	f43f aef4 	beq.w	801f1ce <_strtod_l+0x43e>
 801f3e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3e8:	691a      	ldr	r2, [r3, #16]
 801f3ea:	3202      	adds	r2, #2
 801f3ec:	f103 010c 	add.w	r1, r3, #12
 801f3f0:	0092      	lsls	r2, r2, #2
 801f3f2:	300c      	adds	r0, #12
 801f3f4:	f7fe f92f 	bl	801d656 <memcpy>
 801f3f8:	ec4b ab10 	vmov	d0, sl, fp
 801f3fc:	9805      	ldr	r0, [sp, #20]
 801f3fe:	aa1c      	add	r2, sp, #112	@ 0x70
 801f400:	a91b      	add	r1, sp, #108	@ 0x6c
 801f402:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801f406:	f7ff fbd5 	bl	801ebb4 <__d2b>
 801f40a:	901a      	str	r0, [sp, #104]	@ 0x68
 801f40c:	2800      	cmp	r0, #0
 801f40e:	f43f aede 	beq.w	801f1ce <_strtod_l+0x43e>
 801f412:	9805      	ldr	r0, [sp, #20]
 801f414:	2101      	movs	r1, #1
 801f416:	f7ff f927 	bl	801e668 <__i2b>
 801f41a:	4680      	mov	r8, r0
 801f41c:	b948      	cbnz	r0, 801f432 <_strtod_l+0x6a2>
 801f41e:	f04f 0800 	mov.w	r8, #0
 801f422:	e6d4      	b.n	801f1ce <_strtod_l+0x43e>
 801f424:	f04f 32ff 	mov.w	r2, #4294967295
 801f428:	fa02 f303 	lsl.w	r3, r2, r3
 801f42c:	ea03 0a0a 	and.w	sl, r3, sl
 801f430:	e7b0      	b.n	801f394 <_strtod_l+0x604>
 801f432:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801f434:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f436:	2d00      	cmp	r5, #0
 801f438:	bfab      	itete	ge
 801f43a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801f43c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801f43e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801f440:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801f442:	bfac      	ite	ge
 801f444:	18ef      	addge	r7, r5, r3
 801f446:	1b5e      	sublt	r6, r3, r5
 801f448:	9b08      	ldr	r3, [sp, #32]
 801f44a:	1aed      	subs	r5, r5, r3
 801f44c:	4415      	add	r5, r2
 801f44e:	4b66      	ldr	r3, [pc, #408]	@ (801f5e8 <_strtod_l+0x858>)
 801f450:	3d01      	subs	r5, #1
 801f452:	429d      	cmp	r5, r3
 801f454:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801f458:	da50      	bge.n	801f4fc <_strtod_l+0x76c>
 801f45a:	1b5b      	subs	r3, r3, r5
 801f45c:	2b1f      	cmp	r3, #31
 801f45e:	eba2 0203 	sub.w	r2, r2, r3
 801f462:	f04f 0101 	mov.w	r1, #1
 801f466:	dc3d      	bgt.n	801f4e4 <_strtod_l+0x754>
 801f468:	fa01 f303 	lsl.w	r3, r1, r3
 801f46c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f46e:	2300      	movs	r3, #0
 801f470:	9310      	str	r3, [sp, #64]	@ 0x40
 801f472:	18bd      	adds	r5, r7, r2
 801f474:	9b08      	ldr	r3, [sp, #32]
 801f476:	42af      	cmp	r7, r5
 801f478:	4416      	add	r6, r2
 801f47a:	441e      	add	r6, r3
 801f47c:	463b      	mov	r3, r7
 801f47e:	bfa8      	it	ge
 801f480:	462b      	movge	r3, r5
 801f482:	42b3      	cmp	r3, r6
 801f484:	bfa8      	it	ge
 801f486:	4633      	movge	r3, r6
 801f488:	2b00      	cmp	r3, #0
 801f48a:	bfc2      	ittt	gt
 801f48c:	1aed      	subgt	r5, r5, r3
 801f48e:	1af6      	subgt	r6, r6, r3
 801f490:	1aff      	subgt	r7, r7, r3
 801f492:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f494:	2b00      	cmp	r3, #0
 801f496:	dd16      	ble.n	801f4c6 <_strtod_l+0x736>
 801f498:	4641      	mov	r1, r8
 801f49a:	9805      	ldr	r0, [sp, #20]
 801f49c:	461a      	mov	r2, r3
 801f49e:	f7ff f9a3 	bl	801e7e8 <__pow5mult>
 801f4a2:	4680      	mov	r8, r0
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	d0ba      	beq.n	801f41e <_strtod_l+0x68e>
 801f4a8:	4601      	mov	r1, r0
 801f4aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f4ac:	9805      	ldr	r0, [sp, #20]
 801f4ae:	f7ff f8f1 	bl	801e694 <__multiply>
 801f4b2:	900e      	str	r0, [sp, #56]	@ 0x38
 801f4b4:	2800      	cmp	r0, #0
 801f4b6:	f43f ae8a 	beq.w	801f1ce <_strtod_l+0x43e>
 801f4ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f4bc:	9805      	ldr	r0, [sp, #20]
 801f4be:	f7fe ffd5 	bl	801e46c <_Bfree>
 801f4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801f4c6:	2d00      	cmp	r5, #0
 801f4c8:	dc1d      	bgt.n	801f506 <_strtod_l+0x776>
 801f4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	dd23      	ble.n	801f518 <_strtod_l+0x788>
 801f4d0:	4649      	mov	r1, r9
 801f4d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f4d4:	9805      	ldr	r0, [sp, #20]
 801f4d6:	f7ff f987 	bl	801e7e8 <__pow5mult>
 801f4da:	4681      	mov	r9, r0
 801f4dc:	b9e0      	cbnz	r0, 801f518 <_strtod_l+0x788>
 801f4de:	f04f 0900 	mov.w	r9, #0
 801f4e2:	e674      	b.n	801f1ce <_strtod_l+0x43e>
 801f4e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801f4e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801f4ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801f4f0:	35e2      	adds	r5, #226	@ 0xe2
 801f4f2:	fa01 f305 	lsl.w	r3, r1, r5
 801f4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f4f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f4fa:	e7ba      	b.n	801f472 <_strtod_l+0x6e2>
 801f4fc:	2300      	movs	r3, #0
 801f4fe:	9310      	str	r3, [sp, #64]	@ 0x40
 801f500:	2301      	movs	r3, #1
 801f502:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f504:	e7b5      	b.n	801f472 <_strtod_l+0x6e2>
 801f506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f508:	9805      	ldr	r0, [sp, #20]
 801f50a:	462a      	mov	r2, r5
 801f50c:	f7ff f9c6 	bl	801e89c <__lshift>
 801f510:	901a      	str	r0, [sp, #104]	@ 0x68
 801f512:	2800      	cmp	r0, #0
 801f514:	d1d9      	bne.n	801f4ca <_strtod_l+0x73a>
 801f516:	e65a      	b.n	801f1ce <_strtod_l+0x43e>
 801f518:	2e00      	cmp	r6, #0
 801f51a:	dd07      	ble.n	801f52c <_strtod_l+0x79c>
 801f51c:	4649      	mov	r1, r9
 801f51e:	9805      	ldr	r0, [sp, #20]
 801f520:	4632      	mov	r2, r6
 801f522:	f7ff f9bb 	bl	801e89c <__lshift>
 801f526:	4681      	mov	r9, r0
 801f528:	2800      	cmp	r0, #0
 801f52a:	d0d8      	beq.n	801f4de <_strtod_l+0x74e>
 801f52c:	2f00      	cmp	r7, #0
 801f52e:	dd08      	ble.n	801f542 <_strtod_l+0x7b2>
 801f530:	4641      	mov	r1, r8
 801f532:	9805      	ldr	r0, [sp, #20]
 801f534:	463a      	mov	r2, r7
 801f536:	f7ff f9b1 	bl	801e89c <__lshift>
 801f53a:	4680      	mov	r8, r0
 801f53c:	2800      	cmp	r0, #0
 801f53e:	f43f ae46 	beq.w	801f1ce <_strtod_l+0x43e>
 801f542:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f544:	9805      	ldr	r0, [sp, #20]
 801f546:	464a      	mov	r2, r9
 801f548:	f7ff fa30 	bl	801e9ac <__mdiff>
 801f54c:	4604      	mov	r4, r0
 801f54e:	2800      	cmp	r0, #0
 801f550:	f43f ae3d 	beq.w	801f1ce <_strtod_l+0x43e>
 801f554:	68c3      	ldr	r3, [r0, #12]
 801f556:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f558:	2300      	movs	r3, #0
 801f55a:	60c3      	str	r3, [r0, #12]
 801f55c:	4641      	mov	r1, r8
 801f55e:	f7ff fa09 	bl	801e974 <__mcmp>
 801f562:	2800      	cmp	r0, #0
 801f564:	da46      	bge.n	801f5f4 <_strtod_l+0x864>
 801f566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f568:	ea53 030a 	orrs.w	r3, r3, sl
 801f56c:	d16c      	bne.n	801f648 <_strtod_l+0x8b8>
 801f56e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f572:	2b00      	cmp	r3, #0
 801f574:	d168      	bne.n	801f648 <_strtod_l+0x8b8>
 801f576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f57a:	0d1b      	lsrs	r3, r3, #20
 801f57c:	051b      	lsls	r3, r3, #20
 801f57e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f582:	d961      	bls.n	801f648 <_strtod_l+0x8b8>
 801f584:	6963      	ldr	r3, [r4, #20]
 801f586:	b913      	cbnz	r3, 801f58e <_strtod_l+0x7fe>
 801f588:	6923      	ldr	r3, [r4, #16]
 801f58a:	2b01      	cmp	r3, #1
 801f58c:	dd5c      	ble.n	801f648 <_strtod_l+0x8b8>
 801f58e:	4621      	mov	r1, r4
 801f590:	2201      	movs	r2, #1
 801f592:	9805      	ldr	r0, [sp, #20]
 801f594:	f7ff f982 	bl	801e89c <__lshift>
 801f598:	4641      	mov	r1, r8
 801f59a:	4604      	mov	r4, r0
 801f59c:	f7ff f9ea 	bl	801e974 <__mcmp>
 801f5a0:	2800      	cmp	r0, #0
 801f5a2:	dd51      	ble.n	801f648 <_strtod_l+0x8b8>
 801f5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f5a8:	9a08      	ldr	r2, [sp, #32]
 801f5aa:	0d1b      	lsrs	r3, r3, #20
 801f5ac:	051b      	lsls	r3, r3, #20
 801f5ae:	2a00      	cmp	r2, #0
 801f5b0:	d06b      	beq.n	801f68a <_strtod_l+0x8fa>
 801f5b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801f5b6:	d868      	bhi.n	801f68a <_strtod_l+0x8fa>
 801f5b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801f5bc:	f67f ae9d 	bls.w	801f2fa <_strtod_l+0x56a>
 801f5c0:	4b0a      	ldr	r3, [pc, #40]	@ (801f5ec <_strtod_l+0x85c>)
 801f5c2:	4650      	mov	r0, sl
 801f5c4:	4659      	mov	r1, fp
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	f7e1 f82e 	bl	8000628 <__aeabi_dmul>
 801f5cc:	4b08      	ldr	r3, [pc, #32]	@ (801f5f0 <_strtod_l+0x860>)
 801f5ce:	400b      	ands	r3, r1
 801f5d0:	4682      	mov	sl, r0
 801f5d2:	468b      	mov	fp, r1
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	f47f ae05 	bne.w	801f1e4 <_strtod_l+0x454>
 801f5da:	9a05      	ldr	r2, [sp, #20]
 801f5dc:	2322      	movs	r3, #34	@ 0x22
 801f5de:	6013      	str	r3, [r2, #0]
 801f5e0:	e600      	b.n	801f1e4 <_strtod_l+0x454>
 801f5e2:	bf00      	nop
 801f5e4:	08023418 	.word	0x08023418
 801f5e8:	fffffc02 	.word	0xfffffc02
 801f5ec:	39500000 	.word	0x39500000
 801f5f0:	7ff00000 	.word	0x7ff00000
 801f5f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f5f8:	d165      	bne.n	801f6c6 <_strtod_l+0x936>
 801f5fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f600:	b35a      	cbz	r2, 801f65a <_strtod_l+0x8ca>
 801f602:	4a9f      	ldr	r2, [pc, #636]	@ (801f880 <_strtod_l+0xaf0>)
 801f604:	4293      	cmp	r3, r2
 801f606:	d12b      	bne.n	801f660 <_strtod_l+0x8d0>
 801f608:	9b08      	ldr	r3, [sp, #32]
 801f60a:	4651      	mov	r1, sl
 801f60c:	b303      	cbz	r3, 801f650 <_strtod_l+0x8c0>
 801f60e:	4b9d      	ldr	r3, [pc, #628]	@ (801f884 <_strtod_l+0xaf4>)
 801f610:	465a      	mov	r2, fp
 801f612:	4013      	ands	r3, r2
 801f614:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801f618:	f04f 32ff 	mov.w	r2, #4294967295
 801f61c:	d81b      	bhi.n	801f656 <_strtod_l+0x8c6>
 801f61e:	0d1b      	lsrs	r3, r3, #20
 801f620:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f624:	fa02 f303 	lsl.w	r3, r2, r3
 801f628:	4299      	cmp	r1, r3
 801f62a:	d119      	bne.n	801f660 <_strtod_l+0x8d0>
 801f62c:	4b96      	ldr	r3, [pc, #600]	@ (801f888 <_strtod_l+0xaf8>)
 801f62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f630:	429a      	cmp	r2, r3
 801f632:	d102      	bne.n	801f63a <_strtod_l+0x8aa>
 801f634:	3101      	adds	r1, #1
 801f636:	f43f adca 	beq.w	801f1ce <_strtod_l+0x43e>
 801f63a:	4b92      	ldr	r3, [pc, #584]	@ (801f884 <_strtod_l+0xaf4>)
 801f63c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f63e:	401a      	ands	r2, r3
 801f640:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801f644:	f04f 0a00 	mov.w	sl, #0
 801f648:	9b08      	ldr	r3, [sp, #32]
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d1b8      	bne.n	801f5c0 <_strtod_l+0x830>
 801f64e:	e5c9      	b.n	801f1e4 <_strtod_l+0x454>
 801f650:	f04f 33ff 	mov.w	r3, #4294967295
 801f654:	e7e8      	b.n	801f628 <_strtod_l+0x898>
 801f656:	4613      	mov	r3, r2
 801f658:	e7e6      	b.n	801f628 <_strtod_l+0x898>
 801f65a:	ea53 030a 	orrs.w	r3, r3, sl
 801f65e:	d0a1      	beq.n	801f5a4 <_strtod_l+0x814>
 801f660:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f662:	b1db      	cbz	r3, 801f69c <_strtod_l+0x90c>
 801f664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f666:	4213      	tst	r3, r2
 801f668:	d0ee      	beq.n	801f648 <_strtod_l+0x8b8>
 801f66a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f66c:	9a08      	ldr	r2, [sp, #32]
 801f66e:	4650      	mov	r0, sl
 801f670:	4659      	mov	r1, fp
 801f672:	b1bb      	cbz	r3, 801f6a4 <_strtod_l+0x914>
 801f674:	f7ff fb6c 	bl	801ed50 <sulp>
 801f678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f67c:	ec53 2b10 	vmov	r2, r3, d0
 801f680:	f7e0 fe1c 	bl	80002bc <__adddf3>
 801f684:	4682      	mov	sl, r0
 801f686:	468b      	mov	fp, r1
 801f688:	e7de      	b.n	801f648 <_strtod_l+0x8b8>
 801f68a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801f68e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f692:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f696:	f04f 3aff 	mov.w	sl, #4294967295
 801f69a:	e7d5      	b.n	801f648 <_strtod_l+0x8b8>
 801f69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f69e:	ea13 0f0a 	tst.w	r3, sl
 801f6a2:	e7e1      	b.n	801f668 <_strtod_l+0x8d8>
 801f6a4:	f7ff fb54 	bl	801ed50 <sulp>
 801f6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f6ac:	ec53 2b10 	vmov	r2, r3, d0
 801f6b0:	f7e0 fe02 	bl	80002b8 <__aeabi_dsub>
 801f6b4:	2200      	movs	r2, #0
 801f6b6:	2300      	movs	r3, #0
 801f6b8:	4682      	mov	sl, r0
 801f6ba:	468b      	mov	fp, r1
 801f6bc:	f7e1 fa1c 	bl	8000af8 <__aeabi_dcmpeq>
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	d0c1      	beq.n	801f648 <_strtod_l+0x8b8>
 801f6c4:	e619      	b.n	801f2fa <_strtod_l+0x56a>
 801f6c6:	4641      	mov	r1, r8
 801f6c8:	4620      	mov	r0, r4
 801f6ca:	f7ff facb 	bl	801ec64 <__ratio>
 801f6ce:	ec57 6b10 	vmov	r6, r7, d0
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f6d8:	4630      	mov	r0, r6
 801f6da:	4639      	mov	r1, r7
 801f6dc:	f7e1 fa20 	bl	8000b20 <__aeabi_dcmple>
 801f6e0:	2800      	cmp	r0, #0
 801f6e2:	d06f      	beq.n	801f7c4 <_strtod_l+0xa34>
 801f6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d17a      	bne.n	801f7e0 <_strtod_l+0xa50>
 801f6ea:	f1ba 0f00 	cmp.w	sl, #0
 801f6ee:	d158      	bne.n	801f7a2 <_strtod_l+0xa12>
 801f6f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d15a      	bne.n	801f7b0 <_strtod_l+0xa20>
 801f6fa:	4b64      	ldr	r3, [pc, #400]	@ (801f88c <_strtod_l+0xafc>)
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	4630      	mov	r0, r6
 801f700:	4639      	mov	r1, r7
 801f702:	f7e1 fa03 	bl	8000b0c <__aeabi_dcmplt>
 801f706:	2800      	cmp	r0, #0
 801f708:	d159      	bne.n	801f7be <_strtod_l+0xa2e>
 801f70a:	4630      	mov	r0, r6
 801f70c:	4639      	mov	r1, r7
 801f70e:	4b60      	ldr	r3, [pc, #384]	@ (801f890 <_strtod_l+0xb00>)
 801f710:	2200      	movs	r2, #0
 801f712:	f7e0 ff89 	bl	8000628 <__aeabi_dmul>
 801f716:	4606      	mov	r6, r0
 801f718:	460f      	mov	r7, r1
 801f71a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801f71e:	9606      	str	r6, [sp, #24]
 801f720:	9307      	str	r3, [sp, #28]
 801f722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f726:	4d57      	ldr	r5, [pc, #348]	@ (801f884 <_strtod_l+0xaf4>)
 801f728:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f72c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f72e:	401d      	ands	r5, r3
 801f730:	4b58      	ldr	r3, [pc, #352]	@ (801f894 <_strtod_l+0xb04>)
 801f732:	429d      	cmp	r5, r3
 801f734:	f040 80b2 	bne.w	801f89c <_strtod_l+0xb0c>
 801f738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f73a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801f73e:	ec4b ab10 	vmov	d0, sl, fp
 801f742:	f7ff f9c7 	bl	801ead4 <__ulp>
 801f746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f74a:	ec51 0b10 	vmov	r0, r1, d0
 801f74e:	f7e0 ff6b 	bl	8000628 <__aeabi_dmul>
 801f752:	4652      	mov	r2, sl
 801f754:	465b      	mov	r3, fp
 801f756:	f7e0 fdb1 	bl	80002bc <__adddf3>
 801f75a:	460b      	mov	r3, r1
 801f75c:	4949      	ldr	r1, [pc, #292]	@ (801f884 <_strtod_l+0xaf4>)
 801f75e:	4a4e      	ldr	r2, [pc, #312]	@ (801f898 <_strtod_l+0xb08>)
 801f760:	4019      	ands	r1, r3
 801f762:	4291      	cmp	r1, r2
 801f764:	4682      	mov	sl, r0
 801f766:	d942      	bls.n	801f7ee <_strtod_l+0xa5e>
 801f768:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f76a:	4b47      	ldr	r3, [pc, #284]	@ (801f888 <_strtod_l+0xaf8>)
 801f76c:	429a      	cmp	r2, r3
 801f76e:	d103      	bne.n	801f778 <_strtod_l+0x9e8>
 801f770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f772:	3301      	adds	r3, #1
 801f774:	f43f ad2b 	beq.w	801f1ce <_strtod_l+0x43e>
 801f778:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801f888 <_strtod_l+0xaf8>
 801f77c:	f04f 3aff 	mov.w	sl, #4294967295
 801f780:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f782:	9805      	ldr	r0, [sp, #20]
 801f784:	f7fe fe72 	bl	801e46c <_Bfree>
 801f788:	9805      	ldr	r0, [sp, #20]
 801f78a:	4649      	mov	r1, r9
 801f78c:	f7fe fe6e 	bl	801e46c <_Bfree>
 801f790:	9805      	ldr	r0, [sp, #20]
 801f792:	4641      	mov	r1, r8
 801f794:	f7fe fe6a 	bl	801e46c <_Bfree>
 801f798:	9805      	ldr	r0, [sp, #20]
 801f79a:	4621      	mov	r1, r4
 801f79c:	f7fe fe66 	bl	801e46c <_Bfree>
 801f7a0:	e618      	b.n	801f3d4 <_strtod_l+0x644>
 801f7a2:	f1ba 0f01 	cmp.w	sl, #1
 801f7a6:	d103      	bne.n	801f7b0 <_strtod_l+0xa20>
 801f7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	f43f ada5 	beq.w	801f2fa <_strtod_l+0x56a>
 801f7b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801f860 <_strtod_l+0xad0>
 801f7b4:	4f35      	ldr	r7, [pc, #212]	@ (801f88c <_strtod_l+0xafc>)
 801f7b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f7ba:	2600      	movs	r6, #0
 801f7bc:	e7b1      	b.n	801f722 <_strtod_l+0x992>
 801f7be:	4f34      	ldr	r7, [pc, #208]	@ (801f890 <_strtod_l+0xb00>)
 801f7c0:	2600      	movs	r6, #0
 801f7c2:	e7aa      	b.n	801f71a <_strtod_l+0x98a>
 801f7c4:	4b32      	ldr	r3, [pc, #200]	@ (801f890 <_strtod_l+0xb00>)
 801f7c6:	4630      	mov	r0, r6
 801f7c8:	4639      	mov	r1, r7
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	f7e0 ff2c 	bl	8000628 <__aeabi_dmul>
 801f7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7d2:	4606      	mov	r6, r0
 801f7d4:	460f      	mov	r7, r1
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d09f      	beq.n	801f71a <_strtod_l+0x98a>
 801f7da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801f7de:	e7a0      	b.n	801f722 <_strtod_l+0x992>
 801f7e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801f868 <_strtod_l+0xad8>
 801f7e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f7e8:	ec57 6b17 	vmov	r6, r7, d7
 801f7ec:	e799      	b.n	801f722 <_strtod_l+0x992>
 801f7ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801f7f2:	9b08      	ldr	r3, [sp, #32]
 801f7f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d1c1      	bne.n	801f780 <_strtod_l+0x9f0>
 801f7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801f800:	0d1b      	lsrs	r3, r3, #20
 801f802:	051b      	lsls	r3, r3, #20
 801f804:	429d      	cmp	r5, r3
 801f806:	d1bb      	bne.n	801f780 <_strtod_l+0x9f0>
 801f808:	4630      	mov	r0, r6
 801f80a:	4639      	mov	r1, r7
 801f80c:	f7e1 fa6c 	bl	8000ce8 <__aeabi_d2lz>
 801f810:	f7e0 fedc 	bl	80005cc <__aeabi_l2d>
 801f814:	4602      	mov	r2, r0
 801f816:	460b      	mov	r3, r1
 801f818:	4630      	mov	r0, r6
 801f81a:	4639      	mov	r1, r7
 801f81c:	f7e0 fd4c 	bl	80002b8 <__aeabi_dsub>
 801f820:	460b      	mov	r3, r1
 801f822:	4602      	mov	r2, r0
 801f824:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801f828:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801f82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f82e:	ea46 060a 	orr.w	r6, r6, sl
 801f832:	431e      	orrs	r6, r3
 801f834:	d06f      	beq.n	801f916 <_strtod_l+0xb86>
 801f836:	a30e      	add	r3, pc, #56	@ (adr r3, 801f870 <_strtod_l+0xae0>)
 801f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f83c:	f7e1 f966 	bl	8000b0c <__aeabi_dcmplt>
 801f840:	2800      	cmp	r0, #0
 801f842:	f47f accf 	bne.w	801f1e4 <_strtod_l+0x454>
 801f846:	a30c      	add	r3, pc, #48	@ (adr r3, 801f878 <_strtod_l+0xae8>)
 801f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f84c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f850:	f7e1 f97a 	bl	8000b48 <__aeabi_dcmpgt>
 801f854:	2800      	cmp	r0, #0
 801f856:	d093      	beq.n	801f780 <_strtod_l+0x9f0>
 801f858:	e4c4      	b.n	801f1e4 <_strtod_l+0x454>
 801f85a:	bf00      	nop
 801f85c:	f3af 8000 	nop.w
 801f860:	00000000 	.word	0x00000000
 801f864:	bff00000 	.word	0xbff00000
 801f868:	00000000 	.word	0x00000000
 801f86c:	3ff00000 	.word	0x3ff00000
 801f870:	94a03595 	.word	0x94a03595
 801f874:	3fdfffff 	.word	0x3fdfffff
 801f878:	35afe535 	.word	0x35afe535
 801f87c:	3fe00000 	.word	0x3fe00000
 801f880:	000fffff 	.word	0x000fffff
 801f884:	7ff00000 	.word	0x7ff00000
 801f888:	7fefffff 	.word	0x7fefffff
 801f88c:	3ff00000 	.word	0x3ff00000
 801f890:	3fe00000 	.word	0x3fe00000
 801f894:	7fe00000 	.word	0x7fe00000
 801f898:	7c9fffff 	.word	0x7c9fffff
 801f89c:	9b08      	ldr	r3, [sp, #32]
 801f89e:	b323      	cbz	r3, 801f8ea <_strtod_l+0xb5a>
 801f8a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801f8a4:	d821      	bhi.n	801f8ea <_strtod_l+0xb5a>
 801f8a6:	a328      	add	r3, pc, #160	@ (adr r3, 801f948 <_strtod_l+0xbb8>)
 801f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8ac:	4630      	mov	r0, r6
 801f8ae:	4639      	mov	r1, r7
 801f8b0:	f7e1 f936 	bl	8000b20 <__aeabi_dcmple>
 801f8b4:	b1a0      	cbz	r0, 801f8e0 <_strtod_l+0xb50>
 801f8b6:	4639      	mov	r1, r7
 801f8b8:	4630      	mov	r0, r6
 801f8ba:	f7e1 f98d 	bl	8000bd8 <__aeabi_d2uiz>
 801f8be:	2801      	cmp	r0, #1
 801f8c0:	bf38      	it	cc
 801f8c2:	2001      	movcc	r0, #1
 801f8c4:	f7e0 fe36 	bl	8000534 <__aeabi_ui2d>
 801f8c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8ca:	4606      	mov	r6, r0
 801f8cc:	460f      	mov	r7, r1
 801f8ce:	b9fb      	cbnz	r3, 801f910 <_strtod_l+0xb80>
 801f8d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f8d4:	9014      	str	r0, [sp, #80]	@ 0x50
 801f8d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801f8d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801f8dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801f8e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f8e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801f8e6:	1b5b      	subs	r3, r3, r5
 801f8e8:	9311      	str	r3, [sp, #68]	@ 0x44
 801f8ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f8ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801f8f2:	f7ff f8ef 	bl	801ead4 <__ulp>
 801f8f6:	4650      	mov	r0, sl
 801f8f8:	ec53 2b10 	vmov	r2, r3, d0
 801f8fc:	4659      	mov	r1, fp
 801f8fe:	f7e0 fe93 	bl	8000628 <__aeabi_dmul>
 801f902:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f906:	f7e0 fcd9 	bl	80002bc <__adddf3>
 801f90a:	4682      	mov	sl, r0
 801f90c:	468b      	mov	fp, r1
 801f90e:	e770      	b.n	801f7f2 <_strtod_l+0xa62>
 801f910:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801f914:	e7e0      	b.n	801f8d8 <_strtod_l+0xb48>
 801f916:	a30e      	add	r3, pc, #56	@ (adr r3, 801f950 <_strtod_l+0xbc0>)
 801f918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f91c:	f7e1 f8f6 	bl	8000b0c <__aeabi_dcmplt>
 801f920:	e798      	b.n	801f854 <_strtod_l+0xac4>
 801f922:	2300      	movs	r3, #0
 801f924:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f926:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801f928:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f92a:	6013      	str	r3, [r2, #0]
 801f92c:	f7ff ba6d 	b.w	801ee0a <_strtod_l+0x7a>
 801f930:	2a65      	cmp	r2, #101	@ 0x65
 801f932:	f43f ab66 	beq.w	801f002 <_strtod_l+0x272>
 801f936:	2a45      	cmp	r2, #69	@ 0x45
 801f938:	f43f ab63 	beq.w	801f002 <_strtod_l+0x272>
 801f93c:	2301      	movs	r3, #1
 801f93e:	f7ff bb9e 	b.w	801f07e <_strtod_l+0x2ee>
 801f942:	bf00      	nop
 801f944:	f3af 8000 	nop.w
 801f948:	ffc00000 	.word	0xffc00000
 801f94c:	41dfffff 	.word	0x41dfffff
 801f950:	94a03595 	.word	0x94a03595
 801f954:	3fcfffff 	.word	0x3fcfffff

0801f958 <_strtod_r>:
 801f958:	4b01      	ldr	r3, [pc, #4]	@ (801f960 <_strtod_r+0x8>)
 801f95a:	f7ff ba19 	b.w	801ed90 <_strtod_l>
 801f95e:	bf00      	nop
 801f960:	200001c0 	.word	0x200001c0

0801f964 <__ssputs_r>:
 801f964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f968:	688e      	ldr	r6, [r1, #8]
 801f96a:	461f      	mov	r7, r3
 801f96c:	42be      	cmp	r6, r7
 801f96e:	680b      	ldr	r3, [r1, #0]
 801f970:	4682      	mov	sl, r0
 801f972:	460c      	mov	r4, r1
 801f974:	4690      	mov	r8, r2
 801f976:	d82d      	bhi.n	801f9d4 <__ssputs_r+0x70>
 801f978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f97c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f980:	d026      	beq.n	801f9d0 <__ssputs_r+0x6c>
 801f982:	6965      	ldr	r5, [r4, #20]
 801f984:	6909      	ldr	r1, [r1, #16]
 801f986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f98a:	eba3 0901 	sub.w	r9, r3, r1
 801f98e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f992:	1c7b      	adds	r3, r7, #1
 801f994:	444b      	add	r3, r9
 801f996:	106d      	asrs	r5, r5, #1
 801f998:	429d      	cmp	r5, r3
 801f99a:	bf38      	it	cc
 801f99c:	461d      	movcc	r5, r3
 801f99e:	0553      	lsls	r3, r2, #21
 801f9a0:	d527      	bpl.n	801f9f2 <__ssputs_r+0x8e>
 801f9a2:	4629      	mov	r1, r5
 801f9a4:	f7fc faec 	bl	801bf80 <_malloc_r>
 801f9a8:	4606      	mov	r6, r0
 801f9aa:	b360      	cbz	r0, 801fa06 <__ssputs_r+0xa2>
 801f9ac:	6921      	ldr	r1, [r4, #16]
 801f9ae:	464a      	mov	r2, r9
 801f9b0:	f7fd fe51 	bl	801d656 <memcpy>
 801f9b4:	89a3      	ldrh	r3, [r4, #12]
 801f9b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f9be:	81a3      	strh	r3, [r4, #12]
 801f9c0:	6126      	str	r6, [r4, #16]
 801f9c2:	6165      	str	r5, [r4, #20]
 801f9c4:	444e      	add	r6, r9
 801f9c6:	eba5 0509 	sub.w	r5, r5, r9
 801f9ca:	6026      	str	r6, [r4, #0]
 801f9cc:	60a5      	str	r5, [r4, #8]
 801f9ce:	463e      	mov	r6, r7
 801f9d0:	42be      	cmp	r6, r7
 801f9d2:	d900      	bls.n	801f9d6 <__ssputs_r+0x72>
 801f9d4:	463e      	mov	r6, r7
 801f9d6:	6820      	ldr	r0, [r4, #0]
 801f9d8:	4632      	mov	r2, r6
 801f9da:	4641      	mov	r1, r8
 801f9dc:	f7fd fd0a 	bl	801d3f4 <memmove>
 801f9e0:	68a3      	ldr	r3, [r4, #8]
 801f9e2:	1b9b      	subs	r3, r3, r6
 801f9e4:	60a3      	str	r3, [r4, #8]
 801f9e6:	6823      	ldr	r3, [r4, #0]
 801f9e8:	4433      	add	r3, r6
 801f9ea:	6023      	str	r3, [r4, #0]
 801f9ec:	2000      	movs	r0, #0
 801f9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f9f2:	462a      	mov	r2, r5
 801f9f4:	f000 ff11 	bl	802081a <_realloc_r>
 801f9f8:	4606      	mov	r6, r0
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	d1e0      	bne.n	801f9c0 <__ssputs_r+0x5c>
 801f9fe:	6921      	ldr	r1, [r4, #16]
 801fa00:	4650      	mov	r0, sl
 801fa02:	f7fe fca9 	bl	801e358 <_free_r>
 801fa06:	230c      	movs	r3, #12
 801fa08:	f8ca 3000 	str.w	r3, [sl]
 801fa0c:	89a3      	ldrh	r3, [r4, #12]
 801fa0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fa12:	81a3      	strh	r3, [r4, #12]
 801fa14:	f04f 30ff 	mov.w	r0, #4294967295
 801fa18:	e7e9      	b.n	801f9ee <__ssputs_r+0x8a>
	...

0801fa1c <_svfiprintf_r>:
 801fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa20:	4698      	mov	r8, r3
 801fa22:	898b      	ldrh	r3, [r1, #12]
 801fa24:	061b      	lsls	r3, r3, #24
 801fa26:	b09d      	sub	sp, #116	@ 0x74
 801fa28:	4607      	mov	r7, r0
 801fa2a:	460d      	mov	r5, r1
 801fa2c:	4614      	mov	r4, r2
 801fa2e:	d510      	bpl.n	801fa52 <_svfiprintf_r+0x36>
 801fa30:	690b      	ldr	r3, [r1, #16]
 801fa32:	b973      	cbnz	r3, 801fa52 <_svfiprintf_r+0x36>
 801fa34:	2140      	movs	r1, #64	@ 0x40
 801fa36:	f7fc faa3 	bl	801bf80 <_malloc_r>
 801fa3a:	6028      	str	r0, [r5, #0]
 801fa3c:	6128      	str	r0, [r5, #16]
 801fa3e:	b930      	cbnz	r0, 801fa4e <_svfiprintf_r+0x32>
 801fa40:	230c      	movs	r3, #12
 801fa42:	603b      	str	r3, [r7, #0]
 801fa44:	f04f 30ff 	mov.w	r0, #4294967295
 801fa48:	b01d      	add	sp, #116	@ 0x74
 801fa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa4e:	2340      	movs	r3, #64	@ 0x40
 801fa50:	616b      	str	r3, [r5, #20]
 801fa52:	2300      	movs	r3, #0
 801fa54:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa56:	2320      	movs	r3, #32
 801fa58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fa5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801fa60:	2330      	movs	r3, #48	@ 0x30
 801fa62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801fc00 <_svfiprintf_r+0x1e4>
 801fa66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fa6a:	f04f 0901 	mov.w	r9, #1
 801fa6e:	4623      	mov	r3, r4
 801fa70:	469a      	mov	sl, r3
 801fa72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa76:	b10a      	cbz	r2, 801fa7c <_svfiprintf_r+0x60>
 801fa78:	2a25      	cmp	r2, #37	@ 0x25
 801fa7a:	d1f9      	bne.n	801fa70 <_svfiprintf_r+0x54>
 801fa7c:	ebba 0b04 	subs.w	fp, sl, r4
 801fa80:	d00b      	beq.n	801fa9a <_svfiprintf_r+0x7e>
 801fa82:	465b      	mov	r3, fp
 801fa84:	4622      	mov	r2, r4
 801fa86:	4629      	mov	r1, r5
 801fa88:	4638      	mov	r0, r7
 801fa8a:	f7ff ff6b 	bl	801f964 <__ssputs_r>
 801fa8e:	3001      	adds	r0, #1
 801fa90:	f000 80a7 	beq.w	801fbe2 <_svfiprintf_r+0x1c6>
 801fa94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fa96:	445a      	add	r2, fp
 801fa98:	9209      	str	r2, [sp, #36]	@ 0x24
 801fa9a:	f89a 3000 	ldrb.w	r3, [sl]
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	f000 809f 	beq.w	801fbe2 <_svfiprintf_r+0x1c6>
 801faa4:	2300      	movs	r3, #0
 801faa6:	f04f 32ff 	mov.w	r2, #4294967295
 801faaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801faae:	f10a 0a01 	add.w	sl, sl, #1
 801fab2:	9304      	str	r3, [sp, #16]
 801fab4:	9307      	str	r3, [sp, #28]
 801fab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801faba:	931a      	str	r3, [sp, #104]	@ 0x68
 801fabc:	4654      	mov	r4, sl
 801fabe:	2205      	movs	r2, #5
 801fac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fac4:	484e      	ldr	r0, [pc, #312]	@ (801fc00 <_svfiprintf_r+0x1e4>)
 801fac6:	f7e0 fb9b 	bl	8000200 <memchr>
 801faca:	9a04      	ldr	r2, [sp, #16]
 801facc:	b9d8      	cbnz	r0, 801fb06 <_svfiprintf_r+0xea>
 801face:	06d0      	lsls	r0, r2, #27
 801fad0:	bf44      	itt	mi
 801fad2:	2320      	movmi	r3, #32
 801fad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fad8:	0711      	lsls	r1, r2, #28
 801fada:	bf44      	itt	mi
 801fadc:	232b      	movmi	r3, #43	@ 0x2b
 801fade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fae2:	f89a 3000 	ldrb.w	r3, [sl]
 801fae6:	2b2a      	cmp	r3, #42	@ 0x2a
 801fae8:	d015      	beq.n	801fb16 <_svfiprintf_r+0xfa>
 801faea:	9a07      	ldr	r2, [sp, #28]
 801faec:	4654      	mov	r4, sl
 801faee:	2000      	movs	r0, #0
 801faf0:	f04f 0c0a 	mov.w	ip, #10
 801faf4:	4621      	mov	r1, r4
 801faf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fafa:	3b30      	subs	r3, #48	@ 0x30
 801fafc:	2b09      	cmp	r3, #9
 801fafe:	d94b      	bls.n	801fb98 <_svfiprintf_r+0x17c>
 801fb00:	b1b0      	cbz	r0, 801fb30 <_svfiprintf_r+0x114>
 801fb02:	9207      	str	r2, [sp, #28]
 801fb04:	e014      	b.n	801fb30 <_svfiprintf_r+0x114>
 801fb06:	eba0 0308 	sub.w	r3, r0, r8
 801fb0a:	fa09 f303 	lsl.w	r3, r9, r3
 801fb0e:	4313      	orrs	r3, r2
 801fb10:	9304      	str	r3, [sp, #16]
 801fb12:	46a2      	mov	sl, r4
 801fb14:	e7d2      	b.n	801fabc <_svfiprintf_r+0xa0>
 801fb16:	9b03      	ldr	r3, [sp, #12]
 801fb18:	1d19      	adds	r1, r3, #4
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	9103      	str	r1, [sp, #12]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	bfbb      	ittet	lt
 801fb22:	425b      	neglt	r3, r3
 801fb24:	f042 0202 	orrlt.w	r2, r2, #2
 801fb28:	9307      	strge	r3, [sp, #28]
 801fb2a:	9307      	strlt	r3, [sp, #28]
 801fb2c:	bfb8      	it	lt
 801fb2e:	9204      	strlt	r2, [sp, #16]
 801fb30:	7823      	ldrb	r3, [r4, #0]
 801fb32:	2b2e      	cmp	r3, #46	@ 0x2e
 801fb34:	d10a      	bne.n	801fb4c <_svfiprintf_r+0x130>
 801fb36:	7863      	ldrb	r3, [r4, #1]
 801fb38:	2b2a      	cmp	r3, #42	@ 0x2a
 801fb3a:	d132      	bne.n	801fba2 <_svfiprintf_r+0x186>
 801fb3c:	9b03      	ldr	r3, [sp, #12]
 801fb3e:	1d1a      	adds	r2, r3, #4
 801fb40:	681b      	ldr	r3, [r3, #0]
 801fb42:	9203      	str	r2, [sp, #12]
 801fb44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fb48:	3402      	adds	r4, #2
 801fb4a:	9305      	str	r3, [sp, #20]
 801fb4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801fc10 <_svfiprintf_r+0x1f4>
 801fb50:	7821      	ldrb	r1, [r4, #0]
 801fb52:	2203      	movs	r2, #3
 801fb54:	4650      	mov	r0, sl
 801fb56:	f7e0 fb53 	bl	8000200 <memchr>
 801fb5a:	b138      	cbz	r0, 801fb6c <_svfiprintf_r+0x150>
 801fb5c:	9b04      	ldr	r3, [sp, #16]
 801fb5e:	eba0 000a 	sub.w	r0, r0, sl
 801fb62:	2240      	movs	r2, #64	@ 0x40
 801fb64:	4082      	lsls	r2, r0
 801fb66:	4313      	orrs	r3, r2
 801fb68:	3401      	adds	r4, #1
 801fb6a:	9304      	str	r3, [sp, #16]
 801fb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb70:	4824      	ldr	r0, [pc, #144]	@ (801fc04 <_svfiprintf_r+0x1e8>)
 801fb72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fb76:	2206      	movs	r2, #6
 801fb78:	f7e0 fb42 	bl	8000200 <memchr>
 801fb7c:	2800      	cmp	r0, #0
 801fb7e:	d036      	beq.n	801fbee <_svfiprintf_r+0x1d2>
 801fb80:	4b21      	ldr	r3, [pc, #132]	@ (801fc08 <_svfiprintf_r+0x1ec>)
 801fb82:	bb1b      	cbnz	r3, 801fbcc <_svfiprintf_r+0x1b0>
 801fb84:	9b03      	ldr	r3, [sp, #12]
 801fb86:	3307      	adds	r3, #7
 801fb88:	f023 0307 	bic.w	r3, r3, #7
 801fb8c:	3308      	adds	r3, #8
 801fb8e:	9303      	str	r3, [sp, #12]
 801fb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb92:	4433      	add	r3, r6
 801fb94:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb96:	e76a      	b.n	801fa6e <_svfiprintf_r+0x52>
 801fb98:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb9c:	460c      	mov	r4, r1
 801fb9e:	2001      	movs	r0, #1
 801fba0:	e7a8      	b.n	801faf4 <_svfiprintf_r+0xd8>
 801fba2:	2300      	movs	r3, #0
 801fba4:	3401      	adds	r4, #1
 801fba6:	9305      	str	r3, [sp, #20]
 801fba8:	4619      	mov	r1, r3
 801fbaa:	f04f 0c0a 	mov.w	ip, #10
 801fbae:	4620      	mov	r0, r4
 801fbb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fbb4:	3a30      	subs	r2, #48	@ 0x30
 801fbb6:	2a09      	cmp	r2, #9
 801fbb8:	d903      	bls.n	801fbc2 <_svfiprintf_r+0x1a6>
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d0c6      	beq.n	801fb4c <_svfiprintf_r+0x130>
 801fbbe:	9105      	str	r1, [sp, #20]
 801fbc0:	e7c4      	b.n	801fb4c <_svfiprintf_r+0x130>
 801fbc2:	fb0c 2101 	mla	r1, ip, r1, r2
 801fbc6:	4604      	mov	r4, r0
 801fbc8:	2301      	movs	r3, #1
 801fbca:	e7f0      	b.n	801fbae <_svfiprintf_r+0x192>
 801fbcc:	ab03      	add	r3, sp, #12
 801fbce:	9300      	str	r3, [sp, #0]
 801fbd0:	462a      	mov	r2, r5
 801fbd2:	4b0e      	ldr	r3, [pc, #56]	@ (801fc0c <_svfiprintf_r+0x1f0>)
 801fbd4:	a904      	add	r1, sp, #16
 801fbd6:	4638      	mov	r0, r7
 801fbd8:	f7fc fb84 	bl	801c2e4 <_printf_float>
 801fbdc:	1c42      	adds	r2, r0, #1
 801fbde:	4606      	mov	r6, r0
 801fbe0:	d1d6      	bne.n	801fb90 <_svfiprintf_r+0x174>
 801fbe2:	89ab      	ldrh	r3, [r5, #12]
 801fbe4:	065b      	lsls	r3, r3, #25
 801fbe6:	f53f af2d 	bmi.w	801fa44 <_svfiprintf_r+0x28>
 801fbea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbec:	e72c      	b.n	801fa48 <_svfiprintf_r+0x2c>
 801fbee:	ab03      	add	r3, sp, #12
 801fbf0:	9300      	str	r3, [sp, #0]
 801fbf2:	462a      	mov	r2, r5
 801fbf4:	4b05      	ldr	r3, [pc, #20]	@ (801fc0c <_svfiprintf_r+0x1f0>)
 801fbf6:	a904      	add	r1, sp, #16
 801fbf8:	4638      	mov	r0, r7
 801fbfa:	f7fc fe0b 	bl	801c814 <_printf_i>
 801fbfe:	e7ed      	b.n	801fbdc <_svfiprintf_r+0x1c0>
 801fc00:	08023440 	.word	0x08023440
 801fc04:	0802344a 	.word	0x0802344a
 801fc08:	0801c2e5 	.word	0x0801c2e5
 801fc0c:	0801f965 	.word	0x0801f965
 801fc10:	08023446 	.word	0x08023446

0801fc14 <__sfputc_r>:
 801fc14:	6893      	ldr	r3, [r2, #8]
 801fc16:	3b01      	subs	r3, #1
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	b410      	push	{r4}
 801fc1c:	6093      	str	r3, [r2, #8]
 801fc1e:	da08      	bge.n	801fc32 <__sfputc_r+0x1e>
 801fc20:	6994      	ldr	r4, [r2, #24]
 801fc22:	42a3      	cmp	r3, r4
 801fc24:	db01      	blt.n	801fc2a <__sfputc_r+0x16>
 801fc26:	290a      	cmp	r1, #10
 801fc28:	d103      	bne.n	801fc32 <__sfputc_r+0x1e>
 801fc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc2e:	f7fd bb4d 	b.w	801d2cc <__swbuf_r>
 801fc32:	6813      	ldr	r3, [r2, #0]
 801fc34:	1c58      	adds	r0, r3, #1
 801fc36:	6010      	str	r0, [r2, #0]
 801fc38:	7019      	strb	r1, [r3, #0]
 801fc3a:	4608      	mov	r0, r1
 801fc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc40:	4770      	bx	lr

0801fc42 <__sfputs_r>:
 801fc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc44:	4606      	mov	r6, r0
 801fc46:	460f      	mov	r7, r1
 801fc48:	4614      	mov	r4, r2
 801fc4a:	18d5      	adds	r5, r2, r3
 801fc4c:	42ac      	cmp	r4, r5
 801fc4e:	d101      	bne.n	801fc54 <__sfputs_r+0x12>
 801fc50:	2000      	movs	r0, #0
 801fc52:	e007      	b.n	801fc64 <__sfputs_r+0x22>
 801fc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc58:	463a      	mov	r2, r7
 801fc5a:	4630      	mov	r0, r6
 801fc5c:	f7ff ffda 	bl	801fc14 <__sfputc_r>
 801fc60:	1c43      	adds	r3, r0, #1
 801fc62:	d1f3      	bne.n	801fc4c <__sfputs_r+0xa>
 801fc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fc68 <_vfiprintf_r>:
 801fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc6c:	460d      	mov	r5, r1
 801fc6e:	b09d      	sub	sp, #116	@ 0x74
 801fc70:	4614      	mov	r4, r2
 801fc72:	4698      	mov	r8, r3
 801fc74:	4606      	mov	r6, r0
 801fc76:	b118      	cbz	r0, 801fc80 <_vfiprintf_r+0x18>
 801fc78:	6a03      	ldr	r3, [r0, #32]
 801fc7a:	b90b      	cbnz	r3, 801fc80 <_vfiprintf_r+0x18>
 801fc7c:	f7fd f98a 	bl	801cf94 <__sinit>
 801fc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fc82:	07d9      	lsls	r1, r3, #31
 801fc84:	d405      	bmi.n	801fc92 <_vfiprintf_r+0x2a>
 801fc86:	89ab      	ldrh	r3, [r5, #12]
 801fc88:	059a      	lsls	r2, r3, #22
 801fc8a:	d402      	bmi.n	801fc92 <_vfiprintf_r+0x2a>
 801fc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fc8e:	f7fd fcd8 	bl	801d642 <__retarget_lock_acquire_recursive>
 801fc92:	89ab      	ldrh	r3, [r5, #12]
 801fc94:	071b      	lsls	r3, r3, #28
 801fc96:	d501      	bpl.n	801fc9c <_vfiprintf_r+0x34>
 801fc98:	692b      	ldr	r3, [r5, #16]
 801fc9a:	b99b      	cbnz	r3, 801fcc4 <_vfiprintf_r+0x5c>
 801fc9c:	4629      	mov	r1, r5
 801fc9e:	4630      	mov	r0, r6
 801fca0:	f7fd fb52 	bl	801d348 <__swsetup_r>
 801fca4:	b170      	cbz	r0, 801fcc4 <_vfiprintf_r+0x5c>
 801fca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fca8:	07dc      	lsls	r4, r3, #31
 801fcaa:	d504      	bpl.n	801fcb6 <_vfiprintf_r+0x4e>
 801fcac:	f04f 30ff 	mov.w	r0, #4294967295
 801fcb0:	b01d      	add	sp, #116	@ 0x74
 801fcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcb6:	89ab      	ldrh	r3, [r5, #12]
 801fcb8:	0598      	lsls	r0, r3, #22
 801fcba:	d4f7      	bmi.n	801fcac <_vfiprintf_r+0x44>
 801fcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fcbe:	f7fd fcc1 	bl	801d644 <__retarget_lock_release_recursive>
 801fcc2:	e7f3      	b.n	801fcac <_vfiprintf_r+0x44>
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcc8:	2320      	movs	r3, #32
 801fcca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fcce:	f8cd 800c 	str.w	r8, [sp, #12]
 801fcd2:	2330      	movs	r3, #48	@ 0x30
 801fcd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fe84 <_vfiprintf_r+0x21c>
 801fcd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fcdc:	f04f 0901 	mov.w	r9, #1
 801fce0:	4623      	mov	r3, r4
 801fce2:	469a      	mov	sl, r3
 801fce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fce8:	b10a      	cbz	r2, 801fcee <_vfiprintf_r+0x86>
 801fcea:	2a25      	cmp	r2, #37	@ 0x25
 801fcec:	d1f9      	bne.n	801fce2 <_vfiprintf_r+0x7a>
 801fcee:	ebba 0b04 	subs.w	fp, sl, r4
 801fcf2:	d00b      	beq.n	801fd0c <_vfiprintf_r+0xa4>
 801fcf4:	465b      	mov	r3, fp
 801fcf6:	4622      	mov	r2, r4
 801fcf8:	4629      	mov	r1, r5
 801fcfa:	4630      	mov	r0, r6
 801fcfc:	f7ff ffa1 	bl	801fc42 <__sfputs_r>
 801fd00:	3001      	adds	r0, #1
 801fd02:	f000 80a7 	beq.w	801fe54 <_vfiprintf_r+0x1ec>
 801fd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fd08:	445a      	add	r2, fp
 801fd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801fd0c:	f89a 3000 	ldrb.w	r3, [sl]
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	f000 809f 	beq.w	801fe54 <_vfiprintf_r+0x1ec>
 801fd16:	2300      	movs	r3, #0
 801fd18:	f04f 32ff 	mov.w	r2, #4294967295
 801fd1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd20:	f10a 0a01 	add.w	sl, sl, #1
 801fd24:	9304      	str	r3, [sp, #16]
 801fd26:	9307      	str	r3, [sp, #28]
 801fd28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801fd2e:	4654      	mov	r4, sl
 801fd30:	2205      	movs	r2, #5
 801fd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd36:	4853      	ldr	r0, [pc, #332]	@ (801fe84 <_vfiprintf_r+0x21c>)
 801fd38:	f7e0 fa62 	bl	8000200 <memchr>
 801fd3c:	9a04      	ldr	r2, [sp, #16]
 801fd3e:	b9d8      	cbnz	r0, 801fd78 <_vfiprintf_r+0x110>
 801fd40:	06d1      	lsls	r1, r2, #27
 801fd42:	bf44      	itt	mi
 801fd44:	2320      	movmi	r3, #32
 801fd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fd4a:	0713      	lsls	r3, r2, #28
 801fd4c:	bf44      	itt	mi
 801fd4e:	232b      	movmi	r3, #43	@ 0x2b
 801fd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fd54:	f89a 3000 	ldrb.w	r3, [sl]
 801fd58:	2b2a      	cmp	r3, #42	@ 0x2a
 801fd5a:	d015      	beq.n	801fd88 <_vfiprintf_r+0x120>
 801fd5c:	9a07      	ldr	r2, [sp, #28]
 801fd5e:	4654      	mov	r4, sl
 801fd60:	2000      	movs	r0, #0
 801fd62:	f04f 0c0a 	mov.w	ip, #10
 801fd66:	4621      	mov	r1, r4
 801fd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd6c:	3b30      	subs	r3, #48	@ 0x30
 801fd6e:	2b09      	cmp	r3, #9
 801fd70:	d94b      	bls.n	801fe0a <_vfiprintf_r+0x1a2>
 801fd72:	b1b0      	cbz	r0, 801fda2 <_vfiprintf_r+0x13a>
 801fd74:	9207      	str	r2, [sp, #28]
 801fd76:	e014      	b.n	801fda2 <_vfiprintf_r+0x13a>
 801fd78:	eba0 0308 	sub.w	r3, r0, r8
 801fd7c:	fa09 f303 	lsl.w	r3, r9, r3
 801fd80:	4313      	orrs	r3, r2
 801fd82:	9304      	str	r3, [sp, #16]
 801fd84:	46a2      	mov	sl, r4
 801fd86:	e7d2      	b.n	801fd2e <_vfiprintf_r+0xc6>
 801fd88:	9b03      	ldr	r3, [sp, #12]
 801fd8a:	1d19      	adds	r1, r3, #4
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	9103      	str	r1, [sp, #12]
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	bfbb      	ittet	lt
 801fd94:	425b      	neglt	r3, r3
 801fd96:	f042 0202 	orrlt.w	r2, r2, #2
 801fd9a:	9307      	strge	r3, [sp, #28]
 801fd9c:	9307      	strlt	r3, [sp, #28]
 801fd9e:	bfb8      	it	lt
 801fda0:	9204      	strlt	r2, [sp, #16]
 801fda2:	7823      	ldrb	r3, [r4, #0]
 801fda4:	2b2e      	cmp	r3, #46	@ 0x2e
 801fda6:	d10a      	bne.n	801fdbe <_vfiprintf_r+0x156>
 801fda8:	7863      	ldrb	r3, [r4, #1]
 801fdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801fdac:	d132      	bne.n	801fe14 <_vfiprintf_r+0x1ac>
 801fdae:	9b03      	ldr	r3, [sp, #12]
 801fdb0:	1d1a      	adds	r2, r3, #4
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	9203      	str	r2, [sp, #12]
 801fdb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fdba:	3402      	adds	r4, #2
 801fdbc:	9305      	str	r3, [sp, #20]
 801fdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801fe94 <_vfiprintf_r+0x22c>
 801fdc2:	7821      	ldrb	r1, [r4, #0]
 801fdc4:	2203      	movs	r2, #3
 801fdc6:	4650      	mov	r0, sl
 801fdc8:	f7e0 fa1a 	bl	8000200 <memchr>
 801fdcc:	b138      	cbz	r0, 801fdde <_vfiprintf_r+0x176>
 801fdce:	9b04      	ldr	r3, [sp, #16]
 801fdd0:	eba0 000a 	sub.w	r0, r0, sl
 801fdd4:	2240      	movs	r2, #64	@ 0x40
 801fdd6:	4082      	lsls	r2, r0
 801fdd8:	4313      	orrs	r3, r2
 801fdda:	3401      	adds	r4, #1
 801fddc:	9304      	str	r3, [sp, #16]
 801fdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fde2:	4829      	ldr	r0, [pc, #164]	@ (801fe88 <_vfiprintf_r+0x220>)
 801fde4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fde8:	2206      	movs	r2, #6
 801fdea:	f7e0 fa09 	bl	8000200 <memchr>
 801fdee:	2800      	cmp	r0, #0
 801fdf0:	d03f      	beq.n	801fe72 <_vfiprintf_r+0x20a>
 801fdf2:	4b26      	ldr	r3, [pc, #152]	@ (801fe8c <_vfiprintf_r+0x224>)
 801fdf4:	bb1b      	cbnz	r3, 801fe3e <_vfiprintf_r+0x1d6>
 801fdf6:	9b03      	ldr	r3, [sp, #12]
 801fdf8:	3307      	adds	r3, #7
 801fdfa:	f023 0307 	bic.w	r3, r3, #7
 801fdfe:	3308      	adds	r3, #8
 801fe00:	9303      	str	r3, [sp, #12]
 801fe02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe04:	443b      	add	r3, r7
 801fe06:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe08:	e76a      	b.n	801fce0 <_vfiprintf_r+0x78>
 801fe0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe0e:	460c      	mov	r4, r1
 801fe10:	2001      	movs	r0, #1
 801fe12:	e7a8      	b.n	801fd66 <_vfiprintf_r+0xfe>
 801fe14:	2300      	movs	r3, #0
 801fe16:	3401      	adds	r4, #1
 801fe18:	9305      	str	r3, [sp, #20]
 801fe1a:	4619      	mov	r1, r3
 801fe1c:	f04f 0c0a 	mov.w	ip, #10
 801fe20:	4620      	mov	r0, r4
 801fe22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe26:	3a30      	subs	r2, #48	@ 0x30
 801fe28:	2a09      	cmp	r2, #9
 801fe2a:	d903      	bls.n	801fe34 <_vfiprintf_r+0x1cc>
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	d0c6      	beq.n	801fdbe <_vfiprintf_r+0x156>
 801fe30:	9105      	str	r1, [sp, #20]
 801fe32:	e7c4      	b.n	801fdbe <_vfiprintf_r+0x156>
 801fe34:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe38:	4604      	mov	r4, r0
 801fe3a:	2301      	movs	r3, #1
 801fe3c:	e7f0      	b.n	801fe20 <_vfiprintf_r+0x1b8>
 801fe3e:	ab03      	add	r3, sp, #12
 801fe40:	9300      	str	r3, [sp, #0]
 801fe42:	462a      	mov	r2, r5
 801fe44:	4b12      	ldr	r3, [pc, #72]	@ (801fe90 <_vfiprintf_r+0x228>)
 801fe46:	a904      	add	r1, sp, #16
 801fe48:	4630      	mov	r0, r6
 801fe4a:	f7fc fa4b 	bl	801c2e4 <_printf_float>
 801fe4e:	4607      	mov	r7, r0
 801fe50:	1c78      	adds	r0, r7, #1
 801fe52:	d1d6      	bne.n	801fe02 <_vfiprintf_r+0x19a>
 801fe54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fe56:	07d9      	lsls	r1, r3, #31
 801fe58:	d405      	bmi.n	801fe66 <_vfiprintf_r+0x1fe>
 801fe5a:	89ab      	ldrh	r3, [r5, #12]
 801fe5c:	059a      	lsls	r2, r3, #22
 801fe5e:	d402      	bmi.n	801fe66 <_vfiprintf_r+0x1fe>
 801fe60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fe62:	f7fd fbef 	bl	801d644 <__retarget_lock_release_recursive>
 801fe66:	89ab      	ldrh	r3, [r5, #12]
 801fe68:	065b      	lsls	r3, r3, #25
 801fe6a:	f53f af1f 	bmi.w	801fcac <_vfiprintf_r+0x44>
 801fe6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe70:	e71e      	b.n	801fcb0 <_vfiprintf_r+0x48>
 801fe72:	ab03      	add	r3, sp, #12
 801fe74:	9300      	str	r3, [sp, #0]
 801fe76:	462a      	mov	r2, r5
 801fe78:	4b05      	ldr	r3, [pc, #20]	@ (801fe90 <_vfiprintf_r+0x228>)
 801fe7a:	a904      	add	r1, sp, #16
 801fe7c:	4630      	mov	r0, r6
 801fe7e:	f7fc fcc9 	bl	801c814 <_printf_i>
 801fe82:	e7e4      	b.n	801fe4e <_vfiprintf_r+0x1e6>
 801fe84:	08023440 	.word	0x08023440
 801fe88:	0802344a 	.word	0x0802344a
 801fe8c:	0801c2e5 	.word	0x0801c2e5
 801fe90:	0801fc43 	.word	0x0801fc43
 801fe94:	08023446 	.word	0x08023446

0801fe98 <__sflush_r>:
 801fe98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fea0:	0716      	lsls	r6, r2, #28
 801fea2:	4605      	mov	r5, r0
 801fea4:	460c      	mov	r4, r1
 801fea6:	d454      	bmi.n	801ff52 <__sflush_r+0xba>
 801fea8:	684b      	ldr	r3, [r1, #4]
 801feaa:	2b00      	cmp	r3, #0
 801feac:	dc02      	bgt.n	801feb4 <__sflush_r+0x1c>
 801feae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	dd48      	ble.n	801ff46 <__sflush_r+0xae>
 801feb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801feb6:	2e00      	cmp	r6, #0
 801feb8:	d045      	beq.n	801ff46 <__sflush_r+0xae>
 801feba:	2300      	movs	r3, #0
 801febc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801fec0:	682f      	ldr	r7, [r5, #0]
 801fec2:	6a21      	ldr	r1, [r4, #32]
 801fec4:	602b      	str	r3, [r5, #0]
 801fec6:	d030      	beq.n	801ff2a <__sflush_r+0x92>
 801fec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801feca:	89a3      	ldrh	r3, [r4, #12]
 801fecc:	0759      	lsls	r1, r3, #29
 801fece:	d505      	bpl.n	801fedc <__sflush_r+0x44>
 801fed0:	6863      	ldr	r3, [r4, #4]
 801fed2:	1ad2      	subs	r2, r2, r3
 801fed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fed6:	b10b      	cbz	r3, 801fedc <__sflush_r+0x44>
 801fed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801feda:	1ad2      	subs	r2, r2, r3
 801fedc:	2300      	movs	r3, #0
 801fede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fee0:	6a21      	ldr	r1, [r4, #32]
 801fee2:	4628      	mov	r0, r5
 801fee4:	47b0      	blx	r6
 801fee6:	1c43      	adds	r3, r0, #1
 801fee8:	89a3      	ldrh	r3, [r4, #12]
 801feea:	d106      	bne.n	801fefa <__sflush_r+0x62>
 801feec:	6829      	ldr	r1, [r5, #0]
 801feee:	291d      	cmp	r1, #29
 801fef0:	d82b      	bhi.n	801ff4a <__sflush_r+0xb2>
 801fef2:	4a2a      	ldr	r2, [pc, #168]	@ (801ff9c <__sflush_r+0x104>)
 801fef4:	410a      	asrs	r2, r1
 801fef6:	07d6      	lsls	r6, r2, #31
 801fef8:	d427      	bmi.n	801ff4a <__sflush_r+0xb2>
 801fefa:	2200      	movs	r2, #0
 801fefc:	6062      	str	r2, [r4, #4]
 801fefe:	04d9      	lsls	r1, r3, #19
 801ff00:	6922      	ldr	r2, [r4, #16]
 801ff02:	6022      	str	r2, [r4, #0]
 801ff04:	d504      	bpl.n	801ff10 <__sflush_r+0x78>
 801ff06:	1c42      	adds	r2, r0, #1
 801ff08:	d101      	bne.n	801ff0e <__sflush_r+0x76>
 801ff0a:	682b      	ldr	r3, [r5, #0]
 801ff0c:	b903      	cbnz	r3, 801ff10 <__sflush_r+0x78>
 801ff0e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ff10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ff12:	602f      	str	r7, [r5, #0]
 801ff14:	b1b9      	cbz	r1, 801ff46 <__sflush_r+0xae>
 801ff16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ff1a:	4299      	cmp	r1, r3
 801ff1c:	d002      	beq.n	801ff24 <__sflush_r+0x8c>
 801ff1e:	4628      	mov	r0, r5
 801ff20:	f7fe fa1a 	bl	801e358 <_free_r>
 801ff24:	2300      	movs	r3, #0
 801ff26:	6363      	str	r3, [r4, #52]	@ 0x34
 801ff28:	e00d      	b.n	801ff46 <__sflush_r+0xae>
 801ff2a:	2301      	movs	r3, #1
 801ff2c:	4628      	mov	r0, r5
 801ff2e:	47b0      	blx	r6
 801ff30:	4602      	mov	r2, r0
 801ff32:	1c50      	adds	r0, r2, #1
 801ff34:	d1c9      	bne.n	801feca <__sflush_r+0x32>
 801ff36:	682b      	ldr	r3, [r5, #0]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d0c6      	beq.n	801feca <__sflush_r+0x32>
 801ff3c:	2b1d      	cmp	r3, #29
 801ff3e:	d001      	beq.n	801ff44 <__sflush_r+0xac>
 801ff40:	2b16      	cmp	r3, #22
 801ff42:	d11e      	bne.n	801ff82 <__sflush_r+0xea>
 801ff44:	602f      	str	r7, [r5, #0]
 801ff46:	2000      	movs	r0, #0
 801ff48:	e022      	b.n	801ff90 <__sflush_r+0xf8>
 801ff4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ff4e:	b21b      	sxth	r3, r3
 801ff50:	e01b      	b.n	801ff8a <__sflush_r+0xf2>
 801ff52:	690f      	ldr	r7, [r1, #16]
 801ff54:	2f00      	cmp	r7, #0
 801ff56:	d0f6      	beq.n	801ff46 <__sflush_r+0xae>
 801ff58:	0793      	lsls	r3, r2, #30
 801ff5a:	680e      	ldr	r6, [r1, #0]
 801ff5c:	bf08      	it	eq
 801ff5e:	694b      	ldreq	r3, [r1, #20]
 801ff60:	600f      	str	r7, [r1, #0]
 801ff62:	bf18      	it	ne
 801ff64:	2300      	movne	r3, #0
 801ff66:	eba6 0807 	sub.w	r8, r6, r7
 801ff6a:	608b      	str	r3, [r1, #8]
 801ff6c:	f1b8 0f00 	cmp.w	r8, #0
 801ff70:	dde9      	ble.n	801ff46 <__sflush_r+0xae>
 801ff72:	6a21      	ldr	r1, [r4, #32]
 801ff74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ff76:	4643      	mov	r3, r8
 801ff78:	463a      	mov	r2, r7
 801ff7a:	4628      	mov	r0, r5
 801ff7c:	47b0      	blx	r6
 801ff7e:	2800      	cmp	r0, #0
 801ff80:	dc08      	bgt.n	801ff94 <__sflush_r+0xfc>
 801ff82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ff8a:	81a3      	strh	r3, [r4, #12]
 801ff8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff94:	4407      	add	r7, r0
 801ff96:	eba8 0800 	sub.w	r8, r8, r0
 801ff9a:	e7e7      	b.n	801ff6c <__sflush_r+0xd4>
 801ff9c:	dfbffffe 	.word	0xdfbffffe

0801ffa0 <_fflush_r>:
 801ffa0:	b538      	push	{r3, r4, r5, lr}
 801ffa2:	690b      	ldr	r3, [r1, #16]
 801ffa4:	4605      	mov	r5, r0
 801ffa6:	460c      	mov	r4, r1
 801ffa8:	b913      	cbnz	r3, 801ffb0 <_fflush_r+0x10>
 801ffaa:	2500      	movs	r5, #0
 801ffac:	4628      	mov	r0, r5
 801ffae:	bd38      	pop	{r3, r4, r5, pc}
 801ffb0:	b118      	cbz	r0, 801ffba <_fflush_r+0x1a>
 801ffb2:	6a03      	ldr	r3, [r0, #32]
 801ffb4:	b90b      	cbnz	r3, 801ffba <_fflush_r+0x1a>
 801ffb6:	f7fc ffed 	bl	801cf94 <__sinit>
 801ffba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d0f3      	beq.n	801ffaa <_fflush_r+0xa>
 801ffc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ffc4:	07d0      	lsls	r0, r2, #31
 801ffc6:	d404      	bmi.n	801ffd2 <_fflush_r+0x32>
 801ffc8:	0599      	lsls	r1, r3, #22
 801ffca:	d402      	bmi.n	801ffd2 <_fflush_r+0x32>
 801ffcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ffce:	f7fd fb38 	bl	801d642 <__retarget_lock_acquire_recursive>
 801ffd2:	4628      	mov	r0, r5
 801ffd4:	4621      	mov	r1, r4
 801ffd6:	f7ff ff5f 	bl	801fe98 <__sflush_r>
 801ffda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ffdc:	07da      	lsls	r2, r3, #31
 801ffde:	4605      	mov	r5, r0
 801ffe0:	d4e4      	bmi.n	801ffac <_fflush_r+0xc>
 801ffe2:	89a3      	ldrh	r3, [r4, #12]
 801ffe4:	059b      	lsls	r3, r3, #22
 801ffe6:	d4e1      	bmi.n	801ffac <_fflush_r+0xc>
 801ffe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ffea:	f7fd fb2b 	bl	801d644 <__retarget_lock_release_recursive>
 801ffee:	e7dd      	b.n	801ffac <_fflush_r+0xc>

0801fff0 <fiprintf>:
 801fff0:	b40e      	push	{r1, r2, r3}
 801fff2:	b503      	push	{r0, r1, lr}
 801fff4:	4601      	mov	r1, r0
 801fff6:	ab03      	add	r3, sp, #12
 801fff8:	4805      	ldr	r0, [pc, #20]	@ (8020010 <fiprintf+0x20>)
 801fffa:	f853 2b04 	ldr.w	r2, [r3], #4
 801fffe:	6800      	ldr	r0, [r0, #0]
 8020000:	9301      	str	r3, [sp, #4]
 8020002:	f7ff fe31 	bl	801fc68 <_vfiprintf_r>
 8020006:	b002      	add	sp, #8
 8020008:	f85d eb04 	ldr.w	lr, [sp], #4
 802000c:	b003      	add	sp, #12
 802000e:	4770      	bx	lr
 8020010:	20000170 	.word	0x20000170

08020014 <__swhatbuf_r>:
 8020014:	b570      	push	{r4, r5, r6, lr}
 8020016:	460c      	mov	r4, r1
 8020018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802001c:	2900      	cmp	r1, #0
 802001e:	b096      	sub	sp, #88	@ 0x58
 8020020:	4615      	mov	r5, r2
 8020022:	461e      	mov	r6, r3
 8020024:	da0d      	bge.n	8020042 <__swhatbuf_r+0x2e>
 8020026:	89a3      	ldrh	r3, [r4, #12]
 8020028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802002c:	f04f 0100 	mov.w	r1, #0
 8020030:	bf14      	ite	ne
 8020032:	2340      	movne	r3, #64	@ 0x40
 8020034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020038:	2000      	movs	r0, #0
 802003a:	6031      	str	r1, [r6, #0]
 802003c:	602b      	str	r3, [r5, #0]
 802003e:	b016      	add	sp, #88	@ 0x58
 8020040:	bd70      	pop	{r4, r5, r6, pc}
 8020042:	466a      	mov	r2, sp
 8020044:	f000 f85a 	bl	80200fc <_fstat_r>
 8020048:	2800      	cmp	r0, #0
 802004a:	dbec      	blt.n	8020026 <__swhatbuf_r+0x12>
 802004c:	9901      	ldr	r1, [sp, #4]
 802004e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020056:	4259      	negs	r1, r3
 8020058:	4159      	adcs	r1, r3
 802005a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802005e:	e7eb      	b.n	8020038 <__swhatbuf_r+0x24>

08020060 <__smakebuf_r>:
 8020060:	898b      	ldrh	r3, [r1, #12]
 8020062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020064:	079d      	lsls	r5, r3, #30
 8020066:	4606      	mov	r6, r0
 8020068:	460c      	mov	r4, r1
 802006a:	d507      	bpl.n	802007c <__smakebuf_r+0x1c>
 802006c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020070:	6023      	str	r3, [r4, #0]
 8020072:	6123      	str	r3, [r4, #16]
 8020074:	2301      	movs	r3, #1
 8020076:	6163      	str	r3, [r4, #20]
 8020078:	b003      	add	sp, #12
 802007a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802007c:	ab01      	add	r3, sp, #4
 802007e:	466a      	mov	r2, sp
 8020080:	f7ff ffc8 	bl	8020014 <__swhatbuf_r>
 8020084:	9f00      	ldr	r7, [sp, #0]
 8020086:	4605      	mov	r5, r0
 8020088:	4639      	mov	r1, r7
 802008a:	4630      	mov	r0, r6
 802008c:	f7fb ff78 	bl	801bf80 <_malloc_r>
 8020090:	b948      	cbnz	r0, 80200a6 <__smakebuf_r+0x46>
 8020092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020096:	059a      	lsls	r2, r3, #22
 8020098:	d4ee      	bmi.n	8020078 <__smakebuf_r+0x18>
 802009a:	f023 0303 	bic.w	r3, r3, #3
 802009e:	f043 0302 	orr.w	r3, r3, #2
 80200a2:	81a3      	strh	r3, [r4, #12]
 80200a4:	e7e2      	b.n	802006c <__smakebuf_r+0xc>
 80200a6:	89a3      	ldrh	r3, [r4, #12]
 80200a8:	6020      	str	r0, [r4, #0]
 80200aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80200ae:	81a3      	strh	r3, [r4, #12]
 80200b0:	9b01      	ldr	r3, [sp, #4]
 80200b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80200b6:	b15b      	cbz	r3, 80200d0 <__smakebuf_r+0x70>
 80200b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80200bc:	4630      	mov	r0, r6
 80200be:	f000 f82f 	bl	8020120 <_isatty_r>
 80200c2:	b128      	cbz	r0, 80200d0 <__smakebuf_r+0x70>
 80200c4:	89a3      	ldrh	r3, [r4, #12]
 80200c6:	f023 0303 	bic.w	r3, r3, #3
 80200ca:	f043 0301 	orr.w	r3, r3, #1
 80200ce:	81a3      	strh	r3, [r4, #12]
 80200d0:	89a3      	ldrh	r3, [r4, #12]
 80200d2:	431d      	orrs	r5, r3
 80200d4:	81a5      	strh	r5, [r4, #12]
 80200d6:	e7cf      	b.n	8020078 <__smakebuf_r+0x18>

080200d8 <strncmp>:
 80200d8:	b510      	push	{r4, lr}
 80200da:	b16a      	cbz	r2, 80200f8 <strncmp+0x20>
 80200dc:	3901      	subs	r1, #1
 80200de:	1884      	adds	r4, r0, r2
 80200e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80200e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80200e8:	429a      	cmp	r2, r3
 80200ea:	d103      	bne.n	80200f4 <strncmp+0x1c>
 80200ec:	42a0      	cmp	r0, r4
 80200ee:	d001      	beq.n	80200f4 <strncmp+0x1c>
 80200f0:	2a00      	cmp	r2, #0
 80200f2:	d1f5      	bne.n	80200e0 <strncmp+0x8>
 80200f4:	1ad0      	subs	r0, r2, r3
 80200f6:	bd10      	pop	{r4, pc}
 80200f8:	4610      	mov	r0, r2
 80200fa:	e7fc      	b.n	80200f6 <strncmp+0x1e>

080200fc <_fstat_r>:
 80200fc:	b538      	push	{r3, r4, r5, lr}
 80200fe:	4d07      	ldr	r5, [pc, #28]	@ (802011c <_fstat_r+0x20>)
 8020100:	2300      	movs	r3, #0
 8020102:	4604      	mov	r4, r0
 8020104:	4608      	mov	r0, r1
 8020106:	4611      	mov	r1, r2
 8020108:	602b      	str	r3, [r5, #0]
 802010a:	f7e3 fd0f 	bl	8003b2c <_fstat>
 802010e:	1c43      	adds	r3, r0, #1
 8020110:	d102      	bne.n	8020118 <_fstat_r+0x1c>
 8020112:	682b      	ldr	r3, [r5, #0]
 8020114:	b103      	cbz	r3, 8020118 <_fstat_r+0x1c>
 8020116:	6023      	str	r3, [r4, #0]
 8020118:	bd38      	pop	{r3, r4, r5, pc}
 802011a:	bf00      	nop
 802011c:	200037e4 	.word	0x200037e4

08020120 <_isatty_r>:
 8020120:	b538      	push	{r3, r4, r5, lr}
 8020122:	4d06      	ldr	r5, [pc, #24]	@ (802013c <_isatty_r+0x1c>)
 8020124:	2300      	movs	r3, #0
 8020126:	4604      	mov	r4, r0
 8020128:	4608      	mov	r0, r1
 802012a:	602b      	str	r3, [r5, #0]
 802012c:	f7e3 fd0e 	bl	8003b4c <_isatty>
 8020130:	1c43      	adds	r3, r0, #1
 8020132:	d102      	bne.n	802013a <_isatty_r+0x1a>
 8020134:	682b      	ldr	r3, [r5, #0]
 8020136:	b103      	cbz	r3, 802013a <_isatty_r+0x1a>
 8020138:	6023      	str	r3, [r4, #0]
 802013a:	bd38      	pop	{r3, r4, r5, pc}
 802013c:	200037e4 	.word	0x200037e4

08020140 <nan>:
 8020140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020148 <nan+0x8>
 8020144:	4770      	bx	lr
 8020146:	bf00      	nop
 8020148:	00000000 	.word	0x00000000
 802014c:	7ff80000 	.word	0x7ff80000

08020150 <abort>:
 8020150:	b508      	push	{r3, lr}
 8020152:	2006      	movs	r0, #6
 8020154:	f000 fbc4 	bl	80208e0 <raise>
 8020158:	2001      	movs	r0, #1
 802015a:	f7e3 fc97 	bl	8003a8c <_exit>

0802015e <_calloc_r>:
 802015e:	b570      	push	{r4, r5, r6, lr}
 8020160:	fba1 5402 	umull	r5, r4, r1, r2
 8020164:	b93c      	cbnz	r4, 8020176 <_calloc_r+0x18>
 8020166:	4629      	mov	r1, r5
 8020168:	f7fb ff0a 	bl	801bf80 <_malloc_r>
 802016c:	4606      	mov	r6, r0
 802016e:	b928      	cbnz	r0, 802017c <_calloc_r+0x1e>
 8020170:	2600      	movs	r6, #0
 8020172:	4630      	mov	r0, r6
 8020174:	bd70      	pop	{r4, r5, r6, pc}
 8020176:	220c      	movs	r2, #12
 8020178:	6002      	str	r2, [r0, #0]
 802017a:	e7f9      	b.n	8020170 <_calloc_r+0x12>
 802017c:	462a      	mov	r2, r5
 802017e:	4621      	mov	r1, r4
 8020180:	f7fd f952 	bl	801d428 <memset>
 8020184:	e7f5      	b.n	8020172 <_calloc_r+0x14>

08020186 <rshift>:
 8020186:	6903      	ldr	r3, [r0, #16]
 8020188:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802018c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020190:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020194:	f100 0414 	add.w	r4, r0, #20
 8020198:	dd45      	ble.n	8020226 <rshift+0xa0>
 802019a:	f011 011f 	ands.w	r1, r1, #31
 802019e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80201a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80201a6:	d10c      	bne.n	80201c2 <rshift+0x3c>
 80201a8:	f100 0710 	add.w	r7, r0, #16
 80201ac:	4629      	mov	r1, r5
 80201ae:	42b1      	cmp	r1, r6
 80201b0:	d334      	bcc.n	802021c <rshift+0x96>
 80201b2:	1a9b      	subs	r3, r3, r2
 80201b4:	009b      	lsls	r3, r3, #2
 80201b6:	1eea      	subs	r2, r5, #3
 80201b8:	4296      	cmp	r6, r2
 80201ba:	bf38      	it	cc
 80201bc:	2300      	movcc	r3, #0
 80201be:	4423      	add	r3, r4
 80201c0:	e015      	b.n	80201ee <rshift+0x68>
 80201c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80201c6:	f1c1 0820 	rsb	r8, r1, #32
 80201ca:	40cf      	lsrs	r7, r1
 80201cc:	f105 0e04 	add.w	lr, r5, #4
 80201d0:	46a1      	mov	r9, r4
 80201d2:	4576      	cmp	r6, lr
 80201d4:	46f4      	mov	ip, lr
 80201d6:	d815      	bhi.n	8020204 <rshift+0x7e>
 80201d8:	1a9a      	subs	r2, r3, r2
 80201da:	0092      	lsls	r2, r2, #2
 80201dc:	3a04      	subs	r2, #4
 80201de:	3501      	adds	r5, #1
 80201e0:	42ae      	cmp	r6, r5
 80201e2:	bf38      	it	cc
 80201e4:	2200      	movcc	r2, #0
 80201e6:	18a3      	adds	r3, r4, r2
 80201e8:	50a7      	str	r7, [r4, r2]
 80201ea:	b107      	cbz	r7, 80201ee <rshift+0x68>
 80201ec:	3304      	adds	r3, #4
 80201ee:	1b1a      	subs	r2, r3, r4
 80201f0:	42a3      	cmp	r3, r4
 80201f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80201f6:	bf08      	it	eq
 80201f8:	2300      	moveq	r3, #0
 80201fa:	6102      	str	r2, [r0, #16]
 80201fc:	bf08      	it	eq
 80201fe:	6143      	streq	r3, [r0, #20]
 8020200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020204:	f8dc c000 	ldr.w	ip, [ip]
 8020208:	fa0c fc08 	lsl.w	ip, ip, r8
 802020c:	ea4c 0707 	orr.w	r7, ip, r7
 8020210:	f849 7b04 	str.w	r7, [r9], #4
 8020214:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020218:	40cf      	lsrs	r7, r1
 802021a:	e7da      	b.n	80201d2 <rshift+0x4c>
 802021c:	f851 cb04 	ldr.w	ip, [r1], #4
 8020220:	f847 cf04 	str.w	ip, [r7, #4]!
 8020224:	e7c3      	b.n	80201ae <rshift+0x28>
 8020226:	4623      	mov	r3, r4
 8020228:	e7e1      	b.n	80201ee <rshift+0x68>

0802022a <__hexdig_fun>:
 802022a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802022e:	2b09      	cmp	r3, #9
 8020230:	d802      	bhi.n	8020238 <__hexdig_fun+0xe>
 8020232:	3820      	subs	r0, #32
 8020234:	b2c0      	uxtb	r0, r0
 8020236:	4770      	bx	lr
 8020238:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802023c:	2b05      	cmp	r3, #5
 802023e:	d801      	bhi.n	8020244 <__hexdig_fun+0x1a>
 8020240:	3847      	subs	r0, #71	@ 0x47
 8020242:	e7f7      	b.n	8020234 <__hexdig_fun+0xa>
 8020244:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020248:	2b05      	cmp	r3, #5
 802024a:	d801      	bhi.n	8020250 <__hexdig_fun+0x26>
 802024c:	3827      	subs	r0, #39	@ 0x27
 802024e:	e7f1      	b.n	8020234 <__hexdig_fun+0xa>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr

08020254 <__gethex>:
 8020254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020258:	b085      	sub	sp, #20
 802025a:	468a      	mov	sl, r1
 802025c:	9302      	str	r3, [sp, #8]
 802025e:	680b      	ldr	r3, [r1, #0]
 8020260:	9001      	str	r0, [sp, #4]
 8020262:	4690      	mov	r8, r2
 8020264:	1c9c      	adds	r4, r3, #2
 8020266:	46a1      	mov	r9, r4
 8020268:	f814 0b01 	ldrb.w	r0, [r4], #1
 802026c:	2830      	cmp	r0, #48	@ 0x30
 802026e:	d0fa      	beq.n	8020266 <__gethex+0x12>
 8020270:	eba9 0303 	sub.w	r3, r9, r3
 8020274:	f1a3 0b02 	sub.w	fp, r3, #2
 8020278:	f7ff ffd7 	bl	802022a <__hexdig_fun>
 802027c:	4605      	mov	r5, r0
 802027e:	2800      	cmp	r0, #0
 8020280:	d168      	bne.n	8020354 <__gethex+0x100>
 8020282:	49a0      	ldr	r1, [pc, #640]	@ (8020504 <__gethex+0x2b0>)
 8020284:	2201      	movs	r2, #1
 8020286:	4648      	mov	r0, r9
 8020288:	f7ff ff26 	bl	80200d8 <strncmp>
 802028c:	4607      	mov	r7, r0
 802028e:	2800      	cmp	r0, #0
 8020290:	d167      	bne.n	8020362 <__gethex+0x10e>
 8020292:	f899 0001 	ldrb.w	r0, [r9, #1]
 8020296:	4626      	mov	r6, r4
 8020298:	f7ff ffc7 	bl	802022a <__hexdig_fun>
 802029c:	2800      	cmp	r0, #0
 802029e:	d062      	beq.n	8020366 <__gethex+0x112>
 80202a0:	4623      	mov	r3, r4
 80202a2:	7818      	ldrb	r0, [r3, #0]
 80202a4:	2830      	cmp	r0, #48	@ 0x30
 80202a6:	4699      	mov	r9, r3
 80202a8:	f103 0301 	add.w	r3, r3, #1
 80202ac:	d0f9      	beq.n	80202a2 <__gethex+0x4e>
 80202ae:	f7ff ffbc 	bl	802022a <__hexdig_fun>
 80202b2:	fab0 f580 	clz	r5, r0
 80202b6:	096d      	lsrs	r5, r5, #5
 80202b8:	f04f 0b01 	mov.w	fp, #1
 80202bc:	464a      	mov	r2, r9
 80202be:	4616      	mov	r6, r2
 80202c0:	3201      	adds	r2, #1
 80202c2:	7830      	ldrb	r0, [r6, #0]
 80202c4:	f7ff ffb1 	bl	802022a <__hexdig_fun>
 80202c8:	2800      	cmp	r0, #0
 80202ca:	d1f8      	bne.n	80202be <__gethex+0x6a>
 80202cc:	498d      	ldr	r1, [pc, #564]	@ (8020504 <__gethex+0x2b0>)
 80202ce:	2201      	movs	r2, #1
 80202d0:	4630      	mov	r0, r6
 80202d2:	f7ff ff01 	bl	80200d8 <strncmp>
 80202d6:	2800      	cmp	r0, #0
 80202d8:	d13f      	bne.n	802035a <__gethex+0x106>
 80202da:	b944      	cbnz	r4, 80202ee <__gethex+0x9a>
 80202dc:	1c74      	adds	r4, r6, #1
 80202de:	4622      	mov	r2, r4
 80202e0:	4616      	mov	r6, r2
 80202e2:	3201      	adds	r2, #1
 80202e4:	7830      	ldrb	r0, [r6, #0]
 80202e6:	f7ff ffa0 	bl	802022a <__hexdig_fun>
 80202ea:	2800      	cmp	r0, #0
 80202ec:	d1f8      	bne.n	80202e0 <__gethex+0x8c>
 80202ee:	1ba4      	subs	r4, r4, r6
 80202f0:	00a7      	lsls	r7, r4, #2
 80202f2:	7833      	ldrb	r3, [r6, #0]
 80202f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80202f8:	2b50      	cmp	r3, #80	@ 0x50
 80202fa:	d13e      	bne.n	802037a <__gethex+0x126>
 80202fc:	7873      	ldrb	r3, [r6, #1]
 80202fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8020300:	d033      	beq.n	802036a <__gethex+0x116>
 8020302:	2b2d      	cmp	r3, #45	@ 0x2d
 8020304:	d034      	beq.n	8020370 <__gethex+0x11c>
 8020306:	1c71      	adds	r1, r6, #1
 8020308:	2400      	movs	r4, #0
 802030a:	7808      	ldrb	r0, [r1, #0]
 802030c:	f7ff ff8d 	bl	802022a <__hexdig_fun>
 8020310:	1e43      	subs	r3, r0, #1
 8020312:	b2db      	uxtb	r3, r3
 8020314:	2b18      	cmp	r3, #24
 8020316:	d830      	bhi.n	802037a <__gethex+0x126>
 8020318:	f1a0 0210 	sub.w	r2, r0, #16
 802031c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020320:	f7ff ff83 	bl	802022a <__hexdig_fun>
 8020324:	f100 3cff 	add.w	ip, r0, #4294967295
 8020328:	fa5f fc8c 	uxtb.w	ip, ip
 802032c:	f1bc 0f18 	cmp.w	ip, #24
 8020330:	f04f 030a 	mov.w	r3, #10
 8020334:	d91e      	bls.n	8020374 <__gethex+0x120>
 8020336:	b104      	cbz	r4, 802033a <__gethex+0xe6>
 8020338:	4252      	negs	r2, r2
 802033a:	4417      	add	r7, r2
 802033c:	f8ca 1000 	str.w	r1, [sl]
 8020340:	b1ed      	cbz	r5, 802037e <__gethex+0x12a>
 8020342:	f1bb 0f00 	cmp.w	fp, #0
 8020346:	bf0c      	ite	eq
 8020348:	2506      	moveq	r5, #6
 802034a:	2500      	movne	r5, #0
 802034c:	4628      	mov	r0, r5
 802034e:	b005      	add	sp, #20
 8020350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020354:	2500      	movs	r5, #0
 8020356:	462c      	mov	r4, r5
 8020358:	e7b0      	b.n	80202bc <__gethex+0x68>
 802035a:	2c00      	cmp	r4, #0
 802035c:	d1c7      	bne.n	80202ee <__gethex+0x9a>
 802035e:	4627      	mov	r7, r4
 8020360:	e7c7      	b.n	80202f2 <__gethex+0x9e>
 8020362:	464e      	mov	r6, r9
 8020364:	462f      	mov	r7, r5
 8020366:	2501      	movs	r5, #1
 8020368:	e7c3      	b.n	80202f2 <__gethex+0x9e>
 802036a:	2400      	movs	r4, #0
 802036c:	1cb1      	adds	r1, r6, #2
 802036e:	e7cc      	b.n	802030a <__gethex+0xb6>
 8020370:	2401      	movs	r4, #1
 8020372:	e7fb      	b.n	802036c <__gethex+0x118>
 8020374:	fb03 0002 	mla	r0, r3, r2, r0
 8020378:	e7ce      	b.n	8020318 <__gethex+0xc4>
 802037a:	4631      	mov	r1, r6
 802037c:	e7de      	b.n	802033c <__gethex+0xe8>
 802037e:	eba6 0309 	sub.w	r3, r6, r9
 8020382:	3b01      	subs	r3, #1
 8020384:	4629      	mov	r1, r5
 8020386:	2b07      	cmp	r3, #7
 8020388:	dc0a      	bgt.n	80203a0 <__gethex+0x14c>
 802038a:	9801      	ldr	r0, [sp, #4]
 802038c:	f7fe f82e 	bl	801e3ec <_Balloc>
 8020390:	4604      	mov	r4, r0
 8020392:	b940      	cbnz	r0, 80203a6 <__gethex+0x152>
 8020394:	4b5c      	ldr	r3, [pc, #368]	@ (8020508 <__gethex+0x2b4>)
 8020396:	4602      	mov	r2, r0
 8020398:	21e4      	movs	r1, #228	@ 0xe4
 802039a:	485c      	ldr	r0, [pc, #368]	@ (802050c <__gethex+0x2b8>)
 802039c:	f7fd f970 	bl	801d680 <__assert_func>
 80203a0:	3101      	adds	r1, #1
 80203a2:	105b      	asrs	r3, r3, #1
 80203a4:	e7ef      	b.n	8020386 <__gethex+0x132>
 80203a6:	f100 0a14 	add.w	sl, r0, #20
 80203aa:	2300      	movs	r3, #0
 80203ac:	4655      	mov	r5, sl
 80203ae:	469b      	mov	fp, r3
 80203b0:	45b1      	cmp	r9, r6
 80203b2:	d337      	bcc.n	8020424 <__gethex+0x1d0>
 80203b4:	f845 bb04 	str.w	fp, [r5], #4
 80203b8:	eba5 050a 	sub.w	r5, r5, sl
 80203bc:	10ad      	asrs	r5, r5, #2
 80203be:	6125      	str	r5, [r4, #16]
 80203c0:	4658      	mov	r0, fp
 80203c2:	f7fe f905 	bl	801e5d0 <__hi0bits>
 80203c6:	016d      	lsls	r5, r5, #5
 80203c8:	f8d8 6000 	ldr.w	r6, [r8]
 80203cc:	1a2d      	subs	r5, r5, r0
 80203ce:	42b5      	cmp	r5, r6
 80203d0:	dd54      	ble.n	802047c <__gethex+0x228>
 80203d2:	1bad      	subs	r5, r5, r6
 80203d4:	4629      	mov	r1, r5
 80203d6:	4620      	mov	r0, r4
 80203d8:	f7fe fc99 	bl	801ed0e <__any_on>
 80203dc:	4681      	mov	r9, r0
 80203de:	b178      	cbz	r0, 8020400 <__gethex+0x1ac>
 80203e0:	1e6b      	subs	r3, r5, #1
 80203e2:	1159      	asrs	r1, r3, #5
 80203e4:	f003 021f 	and.w	r2, r3, #31
 80203e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80203ec:	f04f 0901 	mov.w	r9, #1
 80203f0:	fa09 f202 	lsl.w	r2, r9, r2
 80203f4:	420a      	tst	r2, r1
 80203f6:	d003      	beq.n	8020400 <__gethex+0x1ac>
 80203f8:	454b      	cmp	r3, r9
 80203fa:	dc36      	bgt.n	802046a <__gethex+0x216>
 80203fc:	f04f 0902 	mov.w	r9, #2
 8020400:	4629      	mov	r1, r5
 8020402:	4620      	mov	r0, r4
 8020404:	f7ff febf 	bl	8020186 <rshift>
 8020408:	442f      	add	r7, r5
 802040a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802040e:	42bb      	cmp	r3, r7
 8020410:	da42      	bge.n	8020498 <__gethex+0x244>
 8020412:	9801      	ldr	r0, [sp, #4]
 8020414:	4621      	mov	r1, r4
 8020416:	f7fe f829 	bl	801e46c <_Bfree>
 802041a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802041c:	2300      	movs	r3, #0
 802041e:	6013      	str	r3, [r2, #0]
 8020420:	25a3      	movs	r5, #163	@ 0xa3
 8020422:	e793      	b.n	802034c <__gethex+0xf8>
 8020424:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020428:	2a2e      	cmp	r2, #46	@ 0x2e
 802042a:	d012      	beq.n	8020452 <__gethex+0x1fe>
 802042c:	2b20      	cmp	r3, #32
 802042e:	d104      	bne.n	802043a <__gethex+0x1e6>
 8020430:	f845 bb04 	str.w	fp, [r5], #4
 8020434:	f04f 0b00 	mov.w	fp, #0
 8020438:	465b      	mov	r3, fp
 802043a:	7830      	ldrb	r0, [r6, #0]
 802043c:	9303      	str	r3, [sp, #12]
 802043e:	f7ff fef4 	bl	802022a <__hexdig_fun>
 8020442:	9b03      	ldr	r3, [sp, #12]
 8020444:	f000 000f 	and.w	r0, r0, #15
 8020448:	4098      	lsls	r0, r3
 802044a:	ea4b 0b00 	orr.w	fp, fp, r0
 802044e:	3304      	adds	r3, #4
 8020450:	e7ae      	b.n	80203b0 <__gethex+0x15c>
 8020452:	45b1      	cmp	r9, r6
 8020454:	d8ea      	bhi.n	802042c <__gethex+0x1d8>
 8020456:	492b      	ldr	r1, [pc, #172]	@ (8020504 <__gethex+0x2b0>)
 8020458:	9303      	str	r3, [sp, #12]
 802045a:	2201      	movs	r2, #1
 802045c:	4630      	mov	r0, r6
 802045e:	f7ff fe3b 	bl	80200d8 <strncmp>
 8020462:	9b03      	ldr	r3, [sp, #12]
 8020464:	2800      	cmp	r0, #0
 8020466:	d1e1      	bne.n	802042c <__gethex+0x1d8>
 8020468:	e7a2      	b.n	80203b0 <__gethex+0x15c>
 802046a:	1ea9      	subs	r1, r5, #2
 802046c:	4620      	mov	r0, r4
 802046e:	f7fe fc4e 	bl	801ed0e <__any_on>
 8020472:	2800      	cmp	r0, #0
 8020474:	d0c2      	beq.n	80203fc <__gethex+0x1a8>
 8020476:	f04f 0903 	mov.w	r9, #3
 802047a:	e7c1      	b.n	8020400 <__gethex+0x1ac>
 802047c:	da09      	bge.n	8020492 <__gethex+0x23e>
 802047e:	1b75      	subs	r5, r6, r5
 8020480:	4621      	mov	r1, r4
 8020482:	9801      	ldr	r0, [sp, #4]
 8020484:	462a      	mov	r2, r5
 8020486:	f7fe fa09 	bl	801e89c <__lshift>
 802048a:	1b7f      	subs	r7, r7, r5
 802048c:	4604      	mov	r4, r0
 802048e:	f100 0a14 	add.w	sl, r0, #20
 8020492:	f04f 0900 	mov.w	r9, #0
 8020496:	e7b8      	b.n	802040a <__gethex+0x1b6>
 8020498:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802049c:	42bd      	cmp	r5, r7
 802049e:	dd6f      	ble.n	8020580 <__gethex+0x32c>
 80204a0:	1bed      	subs	r5, r5, r7
 80204a2:	42ae      	cmp	r6, r5
 80204a4:	dc34      	bgt.n	8020510 <__gethex+0x2bc>
 80204a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80204aa:	2b02      	cmp	r3, #2
 80204ac:	d022      	beq.n	80204f4 <__gethex+0x2a0>
 80204ae:	2b03      	cmp	r3, #3
 80204b0:	d024      	beq.n	80204fc <__gethex+0x2a8>
 80204b2:	2b01      	cmp	r3, #1
 80204b4:	d115      	bne.n	80204e2 <__gethex+0x28e>
 80204b6:	42ae      	cmp	r6, r5
 80204b8:	d113      	bne.n	80204e2 <__gethex+0x28e>
 80204ba:	2e01      	cmp	r6, #1
 80204bc:	d10b      	bne.n	80204d6 <__gethex+0x282>
 80204be:	9a02      	ldr	r2, [sp, #8]
 80204c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80204c4:	6013      	str	r3, [r2, #0]
 80204c6:	2301      	movs	r3, #1
 80204c8:	6123      	str	r3, [r4, #16]
 80204ca:	f8ca 3000 	str.w	r3, [sl]
 80204ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80204d0:	2562      	movs	r5, #98	@ 0x62
 80204d2:	601c      	str	r4, [r3, #0]
 80204d4:	e73a      	b.n	802034c <__gethex+0xf8>
 80204d6:	1e71      	subs	r1, r6, #1
 80204d8:	4620      	mov	r0, r4
 80204da:	f7fe fc18 	bl	801ed0e <__any_on>
 80204de:	2800      	cmp	r0, #0
 80204e0:	d1ed      	bne.n	80204be <__gethex+0x26a>
 80204e2:	9801      	ldr	r0, [sp, #4]
 80204e4:	4621      	mov	r1, r4
 80204e6:	f7fd ffc1 	bl	801e46c <_Bfree>
 80204ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80204ec:	2300      	movs	r3, #0
 80204ee:	6013      	str	r3, [r2, #0]
 80204f0:	2550      	movs	r5, #80	@ 0x50
 80204f2:	e72b      	b.n	802034c <__gethex+0xf8>
 80204f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d1f3      	bne.n	80204e2 <__gethex+0x28e>
 80204fa:	e7e0      	b.n	80204be <__gethex+0x26a>
 80204fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d1dd      	bne.n	80204be <__gethex+0x26a>
 8020502:	e7ee      	b.n	80204e2 <__gethex+0x28e>
 8020504:	080233e8 	.word	0x080233e8
 8020508:	08023280 	.word	0x08023280
 802050c:	08023459 	.word	0x08023459
 8020510:	1e6f      	subs	r7, r5, #1
 8020512:	f1b9 0f00 	cmp.w	r9, #0
 8020516:	d130      	bne.n	802057a <__gethex+0x326>
 8020518:	b127      	cbz	r7, 8020524 <__gethex+0x2d0>
 802051a:	4639      	mov	r1, r7
 802051c:	4620      	mov	r0, r4
 802051e:	f7fe fbf6 	bl	801ed0e <__any_on>
 8020522:	4681      	mov	r9, r0
 8020524:	117a      	asrs	r2, r7, #5
 8020526:	2301      	movs	r3, #1
 8020528:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802052c:	f007 071f 	and.w	r7, r7, #31
 8020530:	40bb      	lsls	r3, r7
 8020532:	4213      	tst	r3, r2
 8020534:	4629      	mov	r1, r5
 8020536:	4620      	mov	r0, r4
 8020538:	bf18      	it	ne
 802053a:	f049 0902 	orrne.w	r9, r9, #2
 802053e:	f7ff fe22 	bl	8020186 <rshift>
 8020542:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8020546:	1b76      	subs	r6, r6, r5
 8020548:	2502      	movs	r5, #2
 802054a:	f1b9 0f00 	cmp.w	r9, #0
 802054e:	d047      	beq.n	80205e0 <__gethex+0x38c>
 8020550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020554:	2b02      	cmp	r3, #2
 8020556:	d015      	beq.n	8020584 <__gethex+0x330>
 8020558:	2b03      	cmp	r3, #3
 802055a:	d017      	beq.n	802058c <__gethex+0x338>
 802055c:	2b01      	cmp	r3, #1
 802055e:	d109      	bne.n	8020574 <__gethex+0x320>
 8020560:	f019 0f02 	tst.w	r9, #2
 8020564:	d006      	beq.n	8020574 <__gethex+0x320>
 8020566:	f8da 3000 	ldr.w	r3, [sl]
 802056a:	ea49 0903 	orr.w	r9, r9, r3
 802056e:	f019 0f01 	tst.w	r9, #1
 8020572:	d10e      	bne.n	8020592 <__gethex+0x33e>
 8020574:	f045 0510 	orr.w	r5, r5, #16
 8020578:	e032      	b.n	80205e0 <__gethex+0x38c>
 802057a:	f04f 0901 	mov.w	r9, #1
 802057e:	e7d1      	b.n	8020524 <__gethex+0x2d0>
 8020580:	2501      	movs	r5, #1
 8020582:	e7e2      	b.n	802054a <__gethex+0x2f6>
 8020584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020586:	f1c3 0301 	rsb	r3, r3, #1
 802058a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802058c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802058e:	2b00      	cmp	r3, #0
 8020590:	d0f0      	beq.n	8020574 <__gethex+0x320>
 8020592:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020596:	f104 0314 	add.w	r3, r4, #20
 802059a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802059e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80205a2:	f04f 0c00 	mov.w	ip, #0
 80205a6:	4618      	mov	r0, r3
 80205a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80205ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80205b0:	d01b      	beq.n	80205ea <__gethex+0x396>
 80205b2:	3201      	adds	r2, #1
 80205b4:	6002      	str	r2, [r0, #0]
 80205b6:	2d02      	cmp	r5, #2
 80205b8:	f104 0314 	add.w	r3, r4, #20
 80205bc:	d13c      	bne.n	8020638 <__gethex+0x3e4>
 80205be:	f8d8 2000 	ldr.w	r2, [r8]
 80205c2:	3a01      	subs	r2, #1
 80205c4:	42b2      	cmp	r2, r6
 80205c6:	d109      	bne.n	80205dc <__gethex+0x388>
 80205c8:	1171      	asrs	r1, r6, #5
 80205ca:	2201      	movs	r2, #1
 80205cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80205d0:	f006 061f 	and.w	r6, r6, #31
 80205d4:	fa02 f606 	lsl.w	r6, r2, r6
 80205d8:	421e      	tst	r6, r3
 80205da:	d13a      	bne.n	8020652 <__gethex+0x3fe>
 80205dc:	f045 0520 	orr.w	r5, r5, #32
 80205e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205e2:	601c      	str	r4, [r3, #0]
 80205e4:	9b02      	ldr	r3, [sp, #8]
 80205e6:	601f      	str	r7, [r3, #0]
 80205e8:	e6b0      	b.n	802034c <__gethex+0xf8>
 80205ea:	4299      	cmp	r1, r3
 80205ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80205f0:	d8d9      	bhi.n	80205a6 <__gethex+0x352>
 80205f2:	68a3      	ldr	r3, [r4, #8]
 80205f4:	459b      	cmp	fp, r3
 80205f6:	db17      	blt.n	8020628 <__gethex+0x3d4>
 80205f8:	6861      	ldr	r1, [r4, #4]
 80205fa:	9801      	ldr	r0, [sp, #4]
 80205fc:	3101      	adds	r1, #1
 80205fe:	f7fd fef5 	bl	801e3ec <_Balloc>
 8020602:	4681      	mov	r9, r0
 8020604:	b918      	cbnz	r0, 802060e <__gethex+0x3ba>
 8020606:	4b1a      	ldr	r3, [pc, #104]	@ (8020670 <__gethex+0x41c>)
 8020608:	4602      	mov	r2, r0
 802060a:	2184      	movs	r1, #132	@ 0x84
 802060c:	e6c5      	b.n	802039a <__gethex+0x146>
 802060e:	6922      	ldr	r2, [r4, #16]
 8020610:	3202      	adds	r2, #2
 8020612:	f104 010c 	add.w	r1, r4, #12
 8020616:	0092      	lsls	r2, r2, #2
 8020618:	300c      	adds	r0, #12
 802061a:	f7fd f81c 	bl	801d656 <memcpy>
 802061e:	4621      	mov	r1, r4
 8020620:	9801      	ldr	r0, [sp, #4]
 8020622:	f7fd ff23 	bl	801e46c <_Bfree>
 8020626:	464c      	mov	r4, r9
 8020628:	6923      	ldr	r3, [r4, #16]
 802062a:	1c5a      	adds	r2, r3, #1
 802062c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020630:	6122      	str	r2, [r4, #16]
 8020632:	2201      	movs	r2, #1
 8020634:	615a      	str	r2, [r3, #20]
 8020636:	e7be      	b.n	80205b6 <__gethex+0x362>
 8020638:	6922      	ldr	r2, [r4, #16]
 802063a:	455a      	cmp	r2, fp
 802063c:	dd0b      	ble.n	8020656 <__gethex+0x402>
 802063e:	2101      	movs	r1, #1
 8020640:	4620      	mov	r0, r4
 8020642:	f7ff fda0 	bl	8020186 <rshift>
 8020646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802064a:	3701      	adds	r7, #1
 802064c:	42bb      	cmp	r3, r7
 802064e:	f6ff aee0 	blt.w	8020412 <__gethex+0x1be>
 8020652:	2501      	movs	r5, #1
 8020654:	e7c2      	b.n	80205dc <__gethex+0x388>
 8020656:	f016 061f 	ands.w	r6, r6, #31
 802065a:	d0fa      	beq.n	8020652 <__gethex+0x3fe>
 802065c:	4453      	add	r3, sl
 802065e:	f1c6 0620 	rsb	r6, r6, #32
 8020662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020666:	f7fd ffb3 	bl	801e5d0 <__hi0bits>
 802066a:	42b0      	cmp	r0, r6
 802066c:	dbe7      	blt.n	802063e <__gethex+0x3ea>
 802066e:	e7f0      	b.n	8020652 <__gethex+0x3fe>
 8020670:	08023280 	.word	0x08023280

08020674 <L_shift>:
 8020674:	f1c2 0208 	rsb	r2, r2, #8
 8020678:	0092      	lsls	r2, r2, #2
 802067a:	b570      	push	{r4, r5, r6, lr}
 802067c:	f1c2 0620 	rsb	r6, r2, #32
 8020680:	6843      	ldr	r3, [r0, #4]
 8020682:	6804      	ldr	r4, [r0, #0]
 8020684:	fa03 f506 	lsl.w	r5, r3, r6
 8020688:	432c      	orrs	r4, r5
 802068a:	40d3      	lsrs	r3, r2
 802068c:	6004      	str	r4, [r0, #0]
 802068e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020692:	4288      	cmp	r0, r1
 8020694:	d3f4      	bcc.n	8020680 <L_shift+0xc>
 8020696:	bd70      	pop	{r4, r5, r6, pc}

08020698 <__match>:
 8020698:	b530      	push	{r4, r5, lr}
 802069a:	6803      	ldr	r3, [r0, #0]
 802069c:	3301      	adds	r3, #1
 802069e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80206a2:	b914      	cbnz	r4, 80206aa <__match+0x12>
 80206a4:	6003      	str	r3, [r0, #0]
 80206a6:	2001      	movs	r0, #1
 80206a8:	bd30      	pop	{r4, r5, pc}
 80206aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80206b2:	2d19      	cmp	r5, #25
 80206b4:	bf98      	it	ls
 80206b6:	3220      	addls	r2, #32
 80206b8:	42a2      	cmp	r2, r4
 80206ba:	d0f0      	beq.n	802069e <__match+0x6>
 80206bc:	2000      	movs	r0, #0
 80206be:	e7f3      	b.n	80206a8 <__match+0x10>

080206c0 <__hexnan>:
 80206c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206c4:	680b      	ldr	r3, [r1, #0]
 80206c6:	6801      	ldr	r1, [r0, #0]
 80206c8:	115e      	asrs	r6, r3, #5
 80206ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80206ce:	f013 031f 	ands.w	r3, r3, #31
 80206d2:	b087      	sub	sp, #28
 80206d4:	bf18      	it	ne
 80206d6:	3604      	addne	r6, #4
 80206d8:	2500      	movs	r5, #0
 80206da:	1f37      	subs	r7, r6, #4
 80206dc:	4682      	mov	sl, r0
 80206de:	4690      	mov	r8, r2
 80206e0:	9301      	str	r3, [sp, #4]
 80206e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80206e6:	46b9      	mov	r9, r7
 80206e8:	463c      	mov	r4, r7
 80206ea:	9502      	str	r5, [sp, #8]
 80206ec:	46ab      	mov	fp, r5
 80206ee:	784a      	ldrb	r2, [r1, #1]
 80206f0:	1c4b      	adds	r3, r1, #1
 80206f2:	9303      	str	r3, [sp, #12]
 80206f4:	b342      	cbz	r2, 8020748 <__hexnan+0x88>
 80206f6:	4610      	mov	r0, r2
 80206f8:	9105      	str	r1, [sp, #20]
 80206fa:	9204      	str	r2, [sp, #16]
 80206fc:	f7ff fd95 	bl	802022a <__hexdig_fun>
 8020700:	2800      	cmp	r0, #0
 8020702:	d151      	bne.n	80207a8 <__hexnan+0xe8>
 8020704:	9a04      	ldr	r2, [sp, #16]
 8020706:	9905      	ldr	r1, [sp, #20]
 8020708:	2a20      	cmp	r2, #32
 802070a:	d818      	bhi.n	802073e <__hexnan+0x7e>
 802070c:	9b02      	ldr	r3, [sp, #8]
 802070e:	459b      	cmp	fp, r3
 8020710:	dd13      	ble.n	802073a <__hexnan+0x7a>
 8020712:	454c      	cmp	r4, r9
 8020714:	d206      	bcs.n	8020724 <__hexnan+0x64>
 8020716:	2d07      	cmp	r5, #7
 8020718:	dc04      	bgt.n	8020724 <__hexnan+0x64>
 802071a:	462a      	mov	r2, r5
 802071c:	4649      	mov	r1, r9
 802071e:	4620      	mov	r0, r4
 8020720:	f7ff ffa8 	bl	8020674 <L_shift>
 8020724:	4544      	cmp	r4, r8
 8020726:	d952      	bls.n	80207ce <__hexnan+0x10e>
 8020728:	2300      	movs	r3, #0
 802072a:	f1a4 0904 	sub.w	r9, r4, #4
 802072e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020732:	f8cd b008 	str.w	fp, [sp, #8]
 8020736:	464c      	mov	r4, r9
 8020738:	461d      	mov	r5, r3
 802073a:	9903      	ldr	r1, [sp, #12]
 802073c:	e7d7      	b.n	80206ee <__hexnan+0x2e>
 802073e:	2a29      	cmp	r2, #41	@ 0x29
 8020740:	d157      	bne.n	80207f2 <__hexnan+0x132>
 8020742:	3102      	adds	r1, #2
 8020744:	f8ca 1000 	str.w	r1, [sl]
 8020748:	f1bb 0f00 	cmp.w	fp, #0
 802074c:	d051      	beq.n	80207f2 <__hexnan+0x132>
 802074e:	454c      	cmp	r4, r9
 8020750:	d206      	bcs.n	8020760 <__hexnan+0xa0>
 8020752:	2d07      	cmp	r5, #7
 8020754:	dc04      	bgt.n	8020760 <__hexnan+0xa0>
 8020756:	462a      	mov	r2, r5
 8020758:	4649      	mov	r1, r9
 802075a:	4620      	mov	r0, r4
 802075c:	f7ff ff8a 	bl	8020674 <L_shift>
 8020760:	4544      	cmp	r4, r8
 8020762:	d936      	bls.n	80207d2 <__hexnan+0x112>
 8020764:	f1a8 0204 	sub.w	r2, r8, #4
 8020768:	4623      	mov	r3, r4
 802076a:	f853 1b04 	ldr.w	r1, [r3], #4
 802076e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020772:	429f      	cmp	r7, r3
 8020774:	d2f9      	bcs.n	802076a <__hexnan+0xaa>
 8020776:	1b3b      	subs	r3, r7, r4
 8020778:	f023 0303 	bic.w	r3, r3, #3
 802077c:	3304      	adds	r3, #4
 802077e:	3401      	adds	r4, #1
 8020780:	3e03      	subs	r6, #3
 8020782:	42b4      	cmp	r4, r6
 8020784:	bf88      	it	hi
 8020786:	2304      	movhi	r3, #4
 8020788:	4443      	add	r3, r8
 802078a:	2200      	movs	r2, #0
 802078c:	f843 2b04 	str.w	r2, [r3], #4
 8020790:	429f      	cmp	r7, r3
 8020792:	d2fb      	bcs.n	802078c <__hexnan+0xcc>
 8020794:	683b      	ldr	r3, [r7, #0]
 8020796:	b91b      	cbnz	r3, 80207a0 <__hexnan+0xe0>
 8020798:	4547      	cmp	r7, r8
 802079a:	d128      	bne.n	80207ee <__hexnan+0x12e>
 802079c:	2301      	movs	r3, #1
 802079e:	603b      	str	r3, [r7, #0]
 80207a0:	2005      	movs	r0, #5
 80207a2:	b007      	add	sp, #28
 80207a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207a8:	3501      	adds	r5, #1
 80207aa:	2d08      	cmp	r5, #8
 80207ac:	f10b 0b01 	add.w	fp, fp, #1
 80207b0:	dd06      	ble.n	80207c0 <__hexnan+0x100>
 80207b2:	4544      	cmp	r4, r8
 80207b4:	d9c1      	bls.n	802073a <__hexnan+0x7a>
 80207b6:	2300      	movs	r3, #0
 80207b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80207bc:	2501      	movs	r5, #1
 80207be:	3c04      	subs	r4, #4
 80207c0:	6822      	ldr	r2, [r4, #0]
 80207c2:	f000 000f 	and.w	r0, r0, #15
 80207c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80207ca:	6020      	str	r0, [r4, #0]
 80207cc:	e7b5      	b.n	802073a <__hexnan+0x7a>
 80207ce:	2508      	movs	r5, #8
 80207d0:	e7b3      	b.n	802073a <__hexnan+0x7a>
 80207d2:	9b01      	ldr	r3, [sp, #4]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d0dd      	beq.n	8020794 <__hexnan+0xd4>
 80207d8:	f1c3 0320 	rsb	r3, r3, #32
 80207dc:	f04f 32ff 	mov.w	r2, #4294967295
 80207e0:	40da      	lsrs	r2, r3
 80207e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80207e6:	4013      	ands	r3, r2
 80207e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80207ec:	e7d2      	b.n	8020794 <__hexnan+0xd4>
 80207ee:	3f04      	subs	r7, #4
 80207f0:	e7d0      	b.n	8020794 <__hexnan+0xd4>
 80207f2:	2004      	movs	r0, #4
 80207f4:	e7d5      	b.n	80207a2 <__hexnan+0xe2>

080207f6 <__ascii_mbtowc>:
 80207f6:	b082      	sub	sp, #8
 80207f8:	b901      	cbnz	r1, 80207fc <__ascii_mbtowc+0x6>
 80207fa:	a901      	add	r1, sp, #4
 80207fc:	b142      	cbz	r2, 8020810 <__ascii_mbtowc+0x1a>
 80207fe:	b14b      	cbz	r3, 8020814 <__ascii_mbtowc+0x1e>
 8020800:	7813      	ldrb	r3, [r2, #0]
 8020802:	600b      	str	r3, [r1, #0]
 8020804:	7812      	ldrb	r2, [r2, #0]
 8020806:	1e10      	subs	r0, r2, #0
 8020808:	bf18      	it	ne
 802080a:	2001      	movne	r0, #1
 802080c:	b002      	add	sp, #8
 802080e:	4770      	bx	lr
 8020810:	4610      	mov	r0, r2
 8020812:	e7fb      	b.n	802080c <__ascii_mbtowc+0x16>
 8020814:	f06f 0001 	mvn.w	r0, #1
 8020818:	e7f8      	b.n	802080c <__ascii_mbtowc+0x16>

0802081a <_realloc_r>:
 802081a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802081e:	4680      	mov	r8, r0
 8020820:	4615      	mov	r5, r2
 8020822:	460c      	mov	r4, r1
 8020824:	b921      	cbnz	r1, 8020830 <_realloc_r+0x16>
 8020826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802082a:	4611      	mov	r1, r2
 802082c:	f7fb bba8 	b.w	801bf80 <_malloc_r>
 8020830:	b92a      	cbnz	r2, 802083e <_realloc_r+0x24>
 8020832:	f7fd fd91 	bl	801e358 <_free_r>
 8020836:	2400      	movs	r4, #0
 8020838:	4620      	mov	r0, r4
 802083a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802083e:	f000 f86b 	bl	8020918 <_malloc_usable_size_r>
 8020842:	4285      	cmp	r5, r0
 8020844:	4606      	mov	r6, r0
 8020846:	d802      	bhi.n	802084e <_realloc_r+0x34>
 8020848:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802084c:	d8f4      	bhi.n	8020838 <_realloc_r+0x1e>
 802084e:	4629      	mov	r1, r5
 8020850:	4640      	mov	r0, r8
 8020852:	f7fb fb95 	bl	801bf80 <_malloc_r>
 8020856:	4607      	mov	r7, r0
 8020858:	2800      	cmp	r0, #0
 802085a:	d0ec      	beq.n	8020836 <_realloc_r+0x1c>
 802085c:	42b5      	cmp	r5, r6
 802085e:	462a      	mov	r2, r5
 8020860:	4621      	mov	r1, r4
 8020862:	bf28      	it	cs
 8020864:	4632      	movcs	r2, r6
 8020866:	f7fc fef6 	bl	801d656 <memcpy>
 802086a:	4621      	mov	r1, r4
 802086c:	4640      	mov	r0, r8
 802086e:	f7fd fd73 	bl	801e358 <_free_r>
 8020872:	463c      	mov	r4, r7
 8020874:	e7e0      	b.n	8020838 <_realloc_r+0x1e>

08020876 <__ascii_wctomb>:
 8020876:	4603      	mov	r3, r0
 8020878:	4608      	mov	r0, r1
 802087a:	b141      	cbz	r1, 802088e <__ascii_wctomb+0x18>
 802087c:	2aff      	cmp	r2, #255	@ 0xff
 802087e:	d904      	bls.n	802088a <__ascii_wctomb+0x14>
 8020880:	228a      	movs	r2, #138	@ 0x8a
 8020882:	601a      	str	r2, [r3, #0]
 8020884:	f04f 30ff 	mov.w	r0, #4294967295
 8020888:	4770      	bx	lr
 802088a:	700a      	strb	r2, [r1, #0]
 802088c:	2001      	movs	r0, #1
 802088e:	4770      	bx	lr

08020890 <_raise_r>:
 8020890:	291f      	cmp	r1, #31
 8020892:	b538      	push	{r3, r4, r5, lr}
 8020894:	4605      	mov	r5, r0
 8020896:	460c      	mov	r4, r1
 8020898:	d904      	bls.n	80208a4 <_raise_r+0x14>
 802089a:	2316      	movs	r3, #22
 802089c:	6003      	str	r3, [r0, #0]
 802089e:	f04f 30ff 	mov.w	r0, #4294967295
 80208a2:	bd38      	pop	{r3, r4, r5, pc}
 80208a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80208a6:	b112      	cbz	r2, 80208ae <_raise_r+0x1e>
 80208a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80208ac:	b94b      	cbnz	r3, 80208c2 <_raise_r+0x32>
 80208ae:	4628      	mov	r0, r5
 80208b0:	f000 f830 	bl	8020914 <_getpid_r>
 80208b4:	4622      	mov	r2, r4
 80208b6:	4601      	mov	r1, r0
 80208b8:	4628      	mov	r0, r5
 80208ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80208be:	f000 b817 	b.w	80208f0 <_kill_r>
 80208c2:	2b01      	cmp	r3, #1
 80208c4:	d00a      	beq.n	80208dc <_raise_r+0x4c>
 80208c6:	1c59      	adds	r1, r3, #1
 80208c8:	d103      	bne.n	80208d2 <_raise_r+0x42>
 80208ca:	2316      	movs	r3, #22
 80208cc:	6003      	str	r3, [r0, #0]
 80208ce:	2001      	movs	r0, #1
 80208d0:	e7e7      	b.n	80208a2 <_raise_r+0x12>
 80208d2:	2100      	movs	r1, #0
 80208d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80208d8:	4620      	mov	r0, r4
 80208da:	4798      	blx	r3
 80208dc:	2000      	movs	r0, #0
 80208de:	e7e0      	b.n	80208a2 <_raise_r+0x12>

080208e0 <raise>:
 80208e0:	4b02      	ldr	r3, [pc, #8]	@ (80208ec <raise+0xc>)
 80208e2:	4601      	mov	r1, r0
 80208e4:	6818      	ldr	r0, [r3, #0]
 80208e6:	f7ff bfd3 	b.w	8020890 <_raise_r>
 80208ea:	bf00      	nop
 80208ec:	20000170 	.word	0x20000170

080208f0 <_kill_r>:
 80208f0:	b538      	push	{r3, r4, r5, lr}
 80208f2:	4d07      	ldr	r5, [pc, #28]	@ (8020910 <_kill_r+0x20>)
 80208f4:	2300      	movs	r3, #0
 80208f6:	4604      	mov	r4, r0
 80208f8:	4608      	mov	r0, r1
 80208fa:	4611      	mov	r1, r2
 80208fc:	602b      	str	r3, [r5, #0]
 80208fe:	f7e3 f8b5 	bl	8003a6c <_kill>
 8020902:	1c43      	adds	r3, r0, #1
 8020904:	d102      	bne.n	802090c <_kill_r+0x1c>
 8020906:	682b      	ldr	r3, [r5, #0]
 8020908:	b103      	cbz	r3, 802090c <_kill_r+0x1c>
 802090a:	6023      	str	r3, [r4, #0]
 802090c:	bd38      	pop	{r3, r4, r5, pc}
 802090e:	bf00      	nop
 8020910:	200037e4 	.word	0x200037e4

08020914 <_getpid_r>:
 8020914:	f7e3 b8a2 	b.w	8003a5c <_getpid>

08020918 <_malloc_usable_size_r>:
 8020918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802091c:	1f18      	subs	r0, r3, #4
 802091e:	2b00      	cmp	r3, #0
 8020920:	bfbc      	itt	lt
 8020922:	580b      	ldrlt	r3, [r1, r0]
 8020924:	18c0      	addlt	r0, r0, r3
 8020926:	4770      	bx	lr

08020928 <_init>:
 8020928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802092a:	bf00      	nop
 802092c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802092e:	bc08      	pop	{r3}
 8020930:	469e      	mov	lr, r3
 8020932:	4770      	bx	lr

08020934 <_fini>:
 8020934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020936:	bf00      	nop
 8020938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802093a:	bc08      	pop	{r3}
 802093c:	469e      	mov	lr, r3
 802093e:	4770      	bx	lr
