
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  08025a34  00000000  2**0
                  ALLOC
  2 .text         00022150  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003734  080222f0  080222f0  000232f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08025a24  08025a24  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  08025a24  08025a24  00026a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08025a2c  08025a2c  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08025a2c  08025a2c  00026a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08025a30  08025a30  00026a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  08025a34  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034ac  20000304  08025d38  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037b0  08025d38  000277b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000378b0  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a09  00000000  00000000  0005ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003020  00000000  00000000  000675f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000250a  00000000  00000000  0006a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006cb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044e68  00000000  00000000  00093063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f87  00000000  00000000  000d7ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018ce52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dea8  00000000  00000000  0018ce98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0019ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080222d8 	.word	0x080222d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	080222d8 	.word	0x080222d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 ffeb 	bl	80060e0 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 fffb 	bl	8004148 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 ffb7 	bl	80060e0 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 ffc3 	bl	8006110 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fda3 	bl	8004d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fdbc 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ffa6 	bl	8004160 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fdd2 	bl	801eddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc54 	bl	8008b60 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 f9f9 	bl	80036b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 feb6 	bl	8009050 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 f9e3 	bl	80036b4 <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fe6f 	bl	801f00a <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fdc6 	bl	801eec0 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f8b7 	bl	80024ac <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fbff 	bl	801eb48 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fe56 	bl	801f00a <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f8a5 	bl	80024ac <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fbed 	bl	801eb48 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fda5 	bl	801eec0 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fd99 	bl	801eec0 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	080222f0 	.word	0x080222f0
 80013b0:	080222f8 	.word	0x080222f8
 80013b4:	08024e8c 	.word	0x08024e8c
 80013b8:	080222fc 	.word	0x080222fc
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	08022304 	.word	0x08022304

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f97b 	bl	80056d0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 fad2 	bl	80059cc <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f981 	bl	8005734 <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f8ed 	bl	8005628 <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f957 	bl	8005714 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f965 	bl	8005734 <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f94d 	bl	8005714 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff33 	bl	800b31c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 fece 	bl	800b258 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 ff22 	bl	800b31c <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fd57 	bl	8014fc0 <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fbdd 	bl	8014cd0 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 fb67 	bl	8014be8 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb8d 	bl	8014c38 <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fbb1 	bl	8014c84 <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 fee8 	bl	80142f8 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff80 	bl	801442c <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ffab 	bl	8014488 <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 fad3 	bl	8014aec <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 ff2a 	bl	80143bc <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e087      	b.n	8001686 <get_scd30_measurement+0x132>
		run_console_co2 = 1;
 8001576:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <get_scd30_measurement+0x158>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	484b      	ldr	r0, [pc, #300]	@ (80016b0 <get_scd30_measurement+0x15c>)
 8001582:	f004 fdad 	bl	80060e0 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <get_scd30_measurement+0x40>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4849      	ldr	r0, [pc, #292]	@ (80016b4 <get_scd30_measurement+0x160>)
 800158e:	f013 fd8d 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
 8001592:	e002      	b.n	800159a <get_scd30_measurement+0x46>
		}
	  else
	  {
		  sensirion_i2c_hal_sleep_usec(700000);
 8001594:	4848      	ldr	r0, [pc, #288]	@ (80016b8 <get_scd30_measurement+0x164>)
 8001596:	f013 fd89 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
	  }
		console_process();
 800159a:	f010 fe9f 	bl	80122dc <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 800159e:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <get_scd30_measurement+0x168>)
 80015a0:	4947      	ldr	r1, [pc, #284]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015a2:	4848      	ldr	r0, [pc, #288]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015a4:	f012 feea 	bl	801437c <scd30_blocking_read_measurement_data>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <get_scd30_measurement+0x174>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d05c      	beq.n	8001670 <get_scd30_measurement+0x11c>
			char buf[100];
			if (error) {
 80015b6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d013      	beq.n	80015e6 <get_scd30_measurement+0x92>
				sprintf(buf,
 80015be:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015c2:	463b      	mov	r3, r7
 80015c4:	4941      	ldr	r1, [pc, #260]	@ (80016cc <get_scd30_measurement+0x178>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f01d fabe 	bl	801eb48 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015cc:	463b      	mov	r3, r7
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe66 	bl	80002a0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4639      	mov	r1, r7
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	483c      	ldr	r0, [pc, #240]	@ (80016d0 <get_scd30_measurement+0x17c>)
 80015e0:	f00a fe52 	bl	800c288 <HAL_UART_Transmit>
 80015e4:	e044      	b.n	8001670 <get_scd30_measurement+0x11c>
			} else if (_RunTime_Packet.co2 == 0) {
 80015e6:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d111      	bne.n	800161a <get_scd30_measurement+0xc6>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015f6:	463b      	mov	r3, r7
 80015f8:	4936      	ldr	r1, [pc, #216]	@ (80016d4 <get_scd30_measurement+0x180>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f01d faa4 	bl	801eb48 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001600:	463b      	mov	r3, r7
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe4c 	bl	80002a0 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4639      	mov	r1, r7
 800160e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001612:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <get_scd30_measurement+0x17c>)
 8001614:	f00a fe38 	bl	800c288 <HAL_UART_Transmit>
 8001618:	e02a      	b.n	8001670 <get_scd30_measurement+0x11c>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <get_scd30_measurement+0x170>)
 800161c:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffaa 	bl	8000578 <__aeabi_f2d>
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <get_scd30_measurement+0x170>)
 800162a:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffa3 	bl	8000578 <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <get_scd30_measurement+0x170>)
 8001638:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff9c 	bl	8000578 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4638      	mov	r0, r7
 8001646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800164a:	e9cd 4500 	strd	r4, r5, [sp]
 800164e:	4642      	mov	r2, r8
 8001650:	464b      	mov	r3, r9
 8001652:	4921      	ldr	r1, [pc, #132]	@ (80016d8 <get_scd30_measurement+0x184>)
 8001654:	f01d fa78 	bl	801eb48 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001658:	463b      	mov	r3, r7
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe20 	bl	80002a0 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	4639      	mov	r1, r7
 8001666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166a:	4819      	ldr	r0, [pc, #100]	@ (80016d0 <get_scd30_measurement+0x17c>)
 800166c:	f00a fe0c 	bl	800c288 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001670:	f000 fd52 	bl	8002118 <led_awake_routine1>
		console_process();
 8001674:	f010 fe32 	bl	80122dc <console_process>
		get_sps30_measurement();
 8001678:	f000 f8f4 	bl	8001864 <get_sps30_measurement>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800167c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001680:	3301      	adds	r3, #1
 8001682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001686:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <get_scd30_measurement+0x188>)
 800168e:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001692:	b29b      	uxth	r3, r3
 8001694:	429a      	cmp	r2, r3
 8001696:	f4ff af6e 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <get_scd30_measurement+0x158>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

}
 80016a0:	bf00      	nop
 80016a2:	3768      	adds	r7, #104	@ 0x68
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016aa:	bf00      	nop
 80016ac:	20000320 	.word	0x20000320
 80016b0:	40020000 	.word	0x40020000
 80016b4:	0016e360 	.word	0x0016e360
 80016b8:	000aae60 	.word	0x000aae60
 80016bc:	20001538 	.word	0x20001538
 80016c0:	20001534 	.word	0x20001534
 80016c4:	20001530 	.word	0x20001530
 80016c8:	20001578 	.word	0x20001578
 80016cc:	0802230c 	.word	0x0802230c
 80016d0:	20001a74 	.word	0x20001a74
 80016d4:	08022344 	.word	0x08022344
 80016d8:	08022368 	.word	0x08022368
 80016dc:	200012cc 	.word	0x200012cc

080016e0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	b09e      	sub	sp, #120	@ 0x78
 80016e6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f012 fe64 	bl	80143bc <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001700:	e070      	b.n	80017e4 <get_scd30_measurement_+0x104>
		sensirion_i2c_hal_sleep_usec(1500000);
 8001702:	4840      	ldr	r0, [pc, #256]	@ (8001804 <get_scd30_measurement_+0x124>)
 8001704:	f013 fcd2 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001708:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <get_scd30_measurement_+0x128>)
 800170a:	4940      	ldr	r1, [pc, #256]	@ (800180c <get_scd30_measurement_+0x12c>)
 800170c:	4840      	ldr	r0, [pc, #256]	@ (8001810 <get_scd30_measurement_+0x130>)
 800170e:	f012 fe35 	bl	801437c <scd30_blocking_read_measurement_data>
 8001712:	4603      	mov	r3, r0
 8001714:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <get_scd30_measurement_+0x134>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05c      	beq.n	80017da <get_scd30_measurement_+0xfa>
			char buf[100];
			if (error) {
 8001720:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <get_scd30_measurement_+0x70>
				sprintf(buf,
 8001728:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800172c:	463b      	mov	r3, r7
 800172e:	493a      	ldr	r1, [pc, #232]	@ (8001818 <get_scd30_measurement_+0x138>)
 8001730:	4618      	mov	r0, r3
 8001732:	f01d fa09 	bl	801eb48 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdb1 	bl	80002a0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	4639      	mov	r1, r7
 8001744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001748:	4834      	ldr	r0, [pc, #208]	@ (800181c <get_scd30_measurement_+0x13c>)
 800174a:	f00a fd9d 	bl	800c288 <HAL_UART_Transmit>
 800174e:	e044      	b.n	80017da <get_scd30_measurement_+0xfa>
			} else if (_RunTime_Packet.co2 == 0) {
 8001750:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d111      	bne.n	8001784 <get_scd30_measurement_+0xa4>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 8001760:	463b      	mov	r3, r7
 8001762:	492f      	ldr	r1, [pc, #188]	@ (8001820 <get_scd30_measurement_+0x140>)
 8001764:	4618      	mov	r0, r3
 8001766:	f01d f9ef 	bl	801eb48 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800176a:	463b      	mov	r3, r7
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd97 	bl	80002a0 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	4639      	mov	r1, r7
 8001778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177c:	4827      	ldr	r0, [pc, #156]	@ (800181c <get_scd30_measurement_+0x13c>)
 800177e:	f00a fd83 	bl	800c288 <HAL_UART_Transmit>
 8001782:	e02a      	b.n	80017da <get_scd30_measurement_+0xfa>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001786:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fef5 	bl	8000578 <__aeabi_f2d>
 800178e:	4680      	mov	r8, r0
 8001790:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001794:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe feee 	bl	8000578 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <get_scd30_measurement_+0x130>)
 80017a2:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fee7 	bl	8000578 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4638      	mov	r0, r7
 80017b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017b4:	e9cd 4500 	strd	r4, r5, [sp]
 80017b8:	4642      	mov	r2, r8
 80017ba:	464b      	mov	r3, r9
 80017bc:	4919      	ldr	r1, [pc, #100]	@ (8001824 <get_scd30_measurement_+0x144>)
 80017be:	f01d f9c3 	bl	801eb48 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017c2:	463b      	mov	r3, r7
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fd6b 	bl	80002a0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4639      	mov	r1, r7
 80017d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d4:	4811      	ldr	r0, [pc, #68]	@ (800181c <get_scd30_measurement_+0x13c>)
 80017d6:	f00a fd57 	bl	800c288 <HAL_UART_Transmit>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017de:	3301      	adds	r3, #1
 80017e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <get_scd30_measurement_+0x148>)
 80017ec:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d385      	bcc.n	8001702 <get_scd30_measurement_+0x22>
		}

		//led_awake_routine1();

	}
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3768      	adds	r7, #104	@ 0x68
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001802:	bf00      	nop
 8001804:	0016e360 	.word	0x0016e360
 8001808:	20001538 	.word	0x20001538
 800180c:	20001534 	.word	0x20001534
 8001810:	20001530 	.word	0x20001530
 8001814:	20001578 	.word	0x20001578
 8001818:	0802230c 	.word	0x0802230c
 800181c:	20001a74 	.word	0x20001a74
 8001820:	08022344 	.word	0x08022344
 8001824:	08022368 	.word	0x08022368
 8001828:	200012cc 	.word	0x200012cc

0800182c <init_sps30>:

#endif

static void init_sps30() {
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	@ 0x30
 8001830:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <init_sps30+0x34>)
 8001834:	f014 f83e 	bl	80158b4 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001838:	f013 ff86 	bl	8015748 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f014 f943 	bl	8015aca <sps30_read_version>
 8001844:	4603      	mov	r3, r0
 8001846:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4618      	mov	r0, r3
 800184e:	f014 f845 	bl	80158dc <sps30_get_serial>
 8001852:	4603      	mov	r3, r0
 8001854:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	000f4240 	.word	0x000f4240

08001864 <get_sps30_measurement>:
void get_sps30_measurement() {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b0a0      	sub	sp, #128	@ 0x80
 800186a:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 800186c:	f014 f862 	bl	8015934 <sps30_start_measurement>
 8001870:	4603      	mov	r3, r0
 8001872:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 8001876:	483a      	ldr	r0, [pc, #232]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001878:	f014 f874 	bl	8015964 <sps30_read_measurement>
 800187c:	4603      	mov	r3, r0
 800187e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a37      	ldr	r2, [pc, #220]	@ (8001964 <get_sps30_measurement+0x100>)
 8001888:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <get_sps30_measurement+0xfc>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a35      	ldr	r2, [pc, #212]	@ (8001964 <get_sps30_measurement+0x100>)
 8001890:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <get_sps30_measurement+0x100>)
 8001898:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <get_sps30_measurement+0xfc>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <get_sps30_measurement+0x100>)
 80018a0:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80018a2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db54      	blt.n	8001954 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <get_sps30_measurement+0x104>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d050      	beq.n	8001954 <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 80018b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b6:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d113      	bne.n	80018ec <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	463b      	mov	r3, r7
 80018cc:	4927      	ldr	r1, [pc, #156]	@ (800196c <get_sps30_measurement+0x108>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f01d f93a 	bl	801eb48 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018d4:	463b      	mov	r3, r7
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fce2 	bl	80002a0 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4639      	mov	r1, r7
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	4822      	ldr	r0, [pc, #136]	@ (8001970 <get_sps30_measurement+0x10c>)
 80018e8:	f00a fcce 	bl	800c288 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <get_sps30_measurement+0xfc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe41 	bl	8000578 <__aeabi_f2d>
 80018f6:	4682      	mov	sl, r0
 80018f8:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <get_sps30_measurement+0xfc>)
 80018fc:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe3a 	bl	8000578 <__aeabi_f2d>
 8001904:	4604      	mov	r4, r0
 8001906:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <get_sps30_measurement+0xfc>)
 800190a:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe33 	bl	8000578 <__aeabi_f2d>
 8001912:	4680      	mov	r8, r0
 8001914:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001918:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe2c 	bl	8000578 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4638      	mov	r0, r7
 8001926:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800192a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800192e:	e9cd 4500 	strd	r4, r5, [sp]
 8001932:	4652      	mov	r2, sl
 8001934:	465b      	mov	r3, fp
 8001936:	490f      	ldr	r1, [pc, #60]	@ (8001974 <get_sps30_measurement+0x110>)
 8001938:	f01d f906 	bl	801eb48 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800193c:	463b      	mov	r3, r7
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcae 	bl	80002a0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	4639      	mov	r1, r7
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	4808      	ldr	r0, [pc, #32]	@ (8001970 <get_sps30_measurement+0x10c>)
 8001950:	f00a fc9a 	bl	800c288 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 8001954:	bf00      	nop
 8001956:	3768      	adds	r7, #104	@ 0x68
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	20001798 	.word	0x20001798
 8001964:	20001530 	.word	0x20001530
 8001968:	20001578 	.word	0x20001578
 800196c:	0802239c 	.word	0x0802239c
 8001970:	20001a74 	.word	0x20001a74
 8001974:	080223d0 	.word	0x080223d0

08001978 <check_peripheral_error>:
static void check_peripheral_error() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	@ 0x38
 800197c:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <check_peripheral_error+0xac>)
 8001980:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001988:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <check_peripheral_error+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001990:	f010 fcbc 	bl	801230c <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <check_peripheral_error+0xac>)
 8001996:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <check_peripheral_error+0xac>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ac:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <check_peripheral_error+0xb0>)
 80019ae:	f004 fbaf 	bl	8006110 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80019b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019b6:	f002 fbd3 	bl	8004160 <HAL_Delay>
		enable_5v();
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <check_peripheral_error+0xb0>)
 80019c2:	f004 fba5 	bl	8006110 <HAL_GPIO_WritePin>
		init_sps30();
 80019c6:	f7ff ff31 	bl	800182c <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	2205      	movs	r2, #5
 80019d0:	21c2      	movs	r1, #194	@ 0xc2
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <check_peripheral_error+0xb4>)
 80019d4:	f005 f872 	bl	8006abc <HAL_I2C_IsDeviceReady>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d019      	beq.n	8001a12 <check_peripheral_error+0x9a>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <check_peripheral_error+0xb8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4912      	ldr	r1, [pc, #72]	@ (8001a34 <check_peripheral_error+0xbc>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f01d f8ac 	bl	801eb48 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc54 	bl	80002a0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <check_peripheral_error+0xc0>)
 8001a04:	f00a fc40 	bl	800c288 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <check_peripheral_error+0xac>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
	}
#endif

}
 8001a10:	e003      	b.n	8001a1a <check_peripheral_error+0xa2>
		_RunTime_Packet.scd4x_i2c_error = 0;
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <check_peripheral_error+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001a1a:	bf00      	nop
 8001a1c:	3738      	adds	r7, #56	@ 0x38
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20001530 	.word	0x20001530
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	20001838 	.word	0x20001838
 8001a30:	20001578 	.word	0x20001578
 8001a34:	08022408 	.word	0x08022408
 8001a38:	20001a74 	.word	0x20001a74

08001a3c <sensor_calibration>:
static void sensor_calibration() {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <sensor_calibration+0x28>)
 8001a42:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <sensor_calibration+0x24>
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <sensor_calibration+0x28>)
 8001a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <sensor_calibration+0x28>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a5c:	f014 f821 	bl	8015aa2 <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20001530 	.word	0x20001530

08001a68 <sleep>:
static void sleep() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep

	check_peripheral_error();
 8001a6c:	f7ff ff84 	bl	8001978 <check_peripheral_error>
	GREEN_LED_PWM(disable_led);
 8001a70:	4b32      	ldr	r3, [pc, #200]	@ (8001b3c <sleep+0xd4>)
 8001a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <sleep+0xd4>)
 8001a7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a80:	4a2f      	ldr	r2, [pc, #188]	@ (8001b40 <sleep+0xd8>)
 8001a82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a86:	2008      	movs	r0, #8
 8001a88:	f7ff fac4 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a8c:	482d      	ldr	r0, [pc, #180]	@ (8001b44 <sleep+0xdc>)
 8001a8e:	f002 fc12 	bl	80042b6 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	220b      	movs	r2, #11
 8001a98:	492b      	ldr	r1, [pc, #172]	@ (8001b48 <sleep+0xe0>)
 8001a9a:	482c      	ldr	r0, [pc, #176]	@ (8001b4c <sleep+0xe4>)
 8001a9c:	f00a fbf4 	bl	800c288 <HAL_UART_Transmit>
	disable_5v();
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa6:	482a      	ldr	r0, [pc, #168]	@ (8001b50 <sleep+0xe8>)
 8001aa8:	f004 fb32 	bl	8006110 <HAL_GPIO_WritePin>
	disable_motion();
 8001aac:	2201      	movs	r2, #1
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4828      	ldr	r0, [pc, #160]	@ (8001b54 <sleep+0xec>)
 8001ab2:	f004 fb2d 	bl	8006110 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <sleep+0xf0>)
 8001ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <sleep+0x66>
	scd30_stop_periodic_measurement();
 8001ac0:	f012 fcb4 	bl	801442c <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f012 fdd9 	bl	801467c <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001aca:	f013 f85d 	bl	8014b88 <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001ace:	f010 fc11 	bl	80122f4 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001ad2:	f013 faa7 	bl	8015024 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001ad6:	f013 fe77 	bl	80157c8 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001ada:	f01b f98d 	bl	801cdf8 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ade:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <sleep+0xf4>)
 8001ae0:	f009 fb0b 	bl	800b0fa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001ae4:	481e      	ldr	r0, [pc, #120]	@ (8001b60 <sleep+0xf8>)
 8001ae6:	f009 fb08 	bl	800b0fa <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001aea:	481e      	ldr	r0, [pc, #120]	@ (8001b64 <sleep+0xfc>)
 8001aec:	f009 fb05 	bl	800b0fa <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001af0:	481d      	ldr	r0, [pc, #116]	@ (8001b68 <sleep+0x100>)
 8001af2:	f003 fa03 	bl	8004efc <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001af6:	f002 fb57 	bl	80041a8 <HAL_SuspendTick>
	gpio_disable();
 8001afa:	f001 fcf9 	bl	80034f0 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001afe:	f007 f817 	bl	8008b30 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001b02:	f012 f8b5 	bl	8013c70 <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001b06:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <sleep+0x104>)
 8001b08:	f005 fcce 	bl	80074a8 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f006 ffde 	bl	8008ad0 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001b14:	f012 f8ac 	bl	8013c70 <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <sleep+0x108>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <sleep+0xcc>
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <sleep+0xf0>)
 8001b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d104      	bne.n	8001b34 <sleep+0xcc>
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <sleep+0xf0>)
 8001b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0e8      	beq.n	8001b06 <sleep+0x9e>

	Rtc_Alarm_watchdog_disable();
 8001b34:	f012 f88a 	bl	8013c4c <Rtc_Alarm_watchdog_disable>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	20000324 	.word	0x20000324
 8001b44:	200017f0 	.word	0x200017f0
 8001b48:	08022430 	.word	0x08022430
 8001b4c:	20001a74 	.word	0x20001a74
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020000 	.word	0x40020000
 8001b58:	20001530 	.word	0x20001530
 8001b5c:	2000193c 	.word	0x2000193c
 8001b60:	20001984 	.word	0x20001984
 8001b64:	200019cc 	.word	0x200019cc
 8001b68:	20001a14 	.word	0x20001a14
 8001b6c:	2000188c 	.word	0x2000188c
 8001b70:	20000029 	.word	0x20000029

08001b74 <wakeup>:
static void wakeup() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b78:	f007 fd38 	bl	80095ec <HAL_RCC_DeInit>
	clock_speed_high();
 8001b7c:	f7ff fb52 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b80:	f006 ffe2 	bl	8008b48 <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b84:	f002 fb20 	bl	80041c8 <HAL_ResumeTick>
	gpio_enable();
 8001b88:	f001 fce8 	bl	800355c <gpio_enable>

	enable_5v();
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b92:	483f      	ldr	r0, [pc, #252]	@ (8001c90 <wakeup+0x11c>)
 8001b94:	f004 fabc 	bl	8006110 <HAL_GPIO_WritePin>
	enable_motion();
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	483d      	ldr	r0, [pc, #244]	@ (8001c94 <wakeup+0x120>)
 8001b9e:	f004 fab7 	bl	8006110 <HAL_GPIO_WritePin>
	console_uart_init();
 8001ba2:	f010 fbb3 	bl	801230c <console_uart_init>

	MX_DMA_Init();
 8001ba6:	f7ff faf9 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001baa:	f001 f909 	bl	8002dc0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001bae:	f001 f957 	bl	8002e60 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bb2:	f001 f9a3 	bl	8002efc <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001bb6:	f7ff fca5 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001bba:	4837      	ldr	r0, [pc, #220]	@ (8001c98 <wakeup+0x124>)
 8001bbc:	f01a fa44 	bl	801c048 <Mount_SD>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <wakeup+0x5e>
		Unmount_SD("/");
 8001bc6:	4834      	ldr	r0, [pc, #208]	@ (8001c98 <wakeup+0x124>)
 8001bc8:	f01a fa6a 	bl	801c0a0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001bcc:	f01b f926 	bl	801ce1c <MX_USB_DEVICE_Init>
 8001bd0:	e002      	b.n	8001bd8 <wakeup+0x64>
	} else {
		datawritten = 2;
 8001bd2:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <wakeup+0x128>)
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001bd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bdc:	482d      	ldr	r0, [pc, #180]	@ (8001c94 <wakeup+0x120>)
 8001bde:	f004 fa7f 	bl	80060e0 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <wakeup+0x7a>
		init_sps30();
 8001be8:	f7ff fe20 	bl	800182c <init_sps30>
 8001bec:	e00f      	b.n	8001c0e <wakeup+0x9a>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <wakeup+0x12c>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <wakeup+0x12c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <wakeup+0x130>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001c04:	f002 faa0 	bl	8004148 <HAL_GetTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <wakeup+0x134>)
 8001c0c:	6013      	str	r3, [r2, #0]
	}
	BLUE_LED_PWM(disable_led);
 8001c0e:	4a27      	ldr	r2, [pc, #156]	@ (8001cac <wakeup+0x138>)
 8001c10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c14:	2008      	movs	r0, #8
 8001c16:	f7ff f9fd 	bl	8001014 <setSoftPWM>
	GREEN_LED_PWM(disable_led);
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <wakeup+0x13c>)
 8001c1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <wakeup+0x13c>)
 8001c24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c28:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_Base_Start(&htim1);
 8001c2a:	4822      	ldr	r0, [pc, #136]	@ (8001cb4 <wakeup+0x140>)
 8001c2c:	f009 faba 	bl	800b1a4 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001c30:	491e      	ldr	r1, [pc, #120]	@ (8001cac <wakeup+0x138>)
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	4a20      	ldr	r2, [pc, #128]	@ (8001cb8 <wakeup+0x144>)
 8001c38:	4820      	ldr	r0, [pc, #128]	@ (8001cbc <wakeup+0x148>)
 8001c3a:	f003 f9bd 	bl	8004fb8 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <wakeup+0x140>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <wakeup+0x140>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c4c:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <wakeup+0x138>)
 8001c50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c54:	2008      	movs	r0, #8
 8001c56:	f7ff f9dd 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <wakeup+0x14c>)
 8001c5e:	f009 fbe5 	bl	800b42c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <wakeup+0x13c>)
 8001c64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4814      	ldr	r0, [pc, #80]	@ (8001cc0 <wakeup+0x14c>)
 8001c6e:	f009 fbdd 	bl	800b42c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <wakeup+0x13c>)
 8001c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c78:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001c7a:	f7ff faaf 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c82:	220a      	movs	r2, #10
 8001c84:	490f      	ldr	r1, [pc, #60]	@ (8001cc4 <wakeup+0x150>)
 8001c86:	4810      	ldr	r0, [pc, #64]	@ (8001cc8 <wakeup+0x154>)
 8001c88:	f00a fafe 	bl	800c288 <HAL_UART_Transmit>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020000 	.word	0x40020000
 8001c98:	0802243c 	.word	0x0802243c
 8001c9c:	20002328 	.word	0x20002328
 8001ca0:	20001530 	.word	0x20001530
 8001ca4:	20001584 	.word	0x20001584
 8001ca8:	200017c8 	.word	0x200017c8
 8001cac:	20000324 	.word	0x20000324
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	2000193c 	.word	0x2000193c
 8001cb8:	40020418 	.word	0x40020418
 8001cbc:	20001a14 	.word	0x20001a14
 8001cc0:	200019cc 	.word	0x200019cc
 8001cc4:	08022440 	.word	0x08022440
 8001cc8:	20001a74 	.word	0x20001a74

08001ccc <green_led_blink>:

static void green_led_blink() {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <green_led_blink+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cd6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cda:	f002 fa41 	bl	8004160 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <green_led_blink+0x4c>)
 8001ce0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ce4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ce6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cea:	f002 fa39 	bl	8004160 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <green_led_blink+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cf4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cf8:	f002 fa32 	bl	8004160 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <green_led_blink+0x4c>)
 8001cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d02:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001d04:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d08:	f002 fa2a 	bl	8004160 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001d0c:	4b02      	ldr	r3, [pc, #8]	@ (8001d18 <green_led_blink+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40000400 	.word	0x40000400

08001d1c <led_awake_routine>:

 void led_awake_routine() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001d20:	4ba6      	ldr	r3, [pc, #664]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001d22:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8195 	bne.w	8002056 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d30:	48a3      	ldr	r0, [pc, #652]	@ (8001fc0 <led_awake_routine+0x2a4>)
 8001d32:	f004 f9d5 	bl	80060e0 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d025      	beq.n	8001d88 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d3c:	4b9f      	ldr	r3, [pc, #636]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001d3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d42:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001fc4 <led_awake_routine+0x2a8>
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	db0d      	blt.n	8001d6c <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d50:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d56:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001d58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d5e:	4a9b      	ldr	r2, [pc, #620]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001d60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d64:	2008      	movs	r0, #8
 8001d66:	f7ff f955 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d6a:	e196      	b.n	800209a <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d6c:	4b96      	ldr	r3, [pc, #600]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001d6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d72:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d74:	4b94      	ldr	r3, [pc, #592]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001d76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d7c:	4a93      	ldr	r2, [pc, #588]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff f947 	bl	8001014 <setSoftPWM>
}
 8001d86:	e188      	b.n	800209a <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001d88:	4a90      	ldr	r2, [pc, #576]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001d8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d8e:	2008      	movs	r0, #8
 8001d90:	f7ff f940 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d94:	4b89      	ldr	r3, [pc, #548]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001d96:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d9a:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001fc4 <led_awake_routine+0x2a8>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	db38      	blt.n	8001e1a <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001da8:	4b87      	ldr	r3, [pc, #540]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001db0:	4a86      	ldr	r2, [pc, #536]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001db2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001db6:	2008      	movs	r0, #8
 8001db8:	f7ff f92c 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001dbc:	4b84      	ldr	r3, [pc, #528]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001dc4:	4b83      	ldr	r3, [pc, #524]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3305      	adds	r3, #5
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	4b80      	ldr	r3, [pc, #512]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	e008      	b.n	8001dea <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b05      	subs	r3, #5
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001de8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001dea:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df4:	dd03      	ble.n	8001dfe <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001df6:	4b76      	ldr	r3, [pc, #472]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	e007      	b.n	8001e0e <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001dfe:	4b75      	ldr	r3, [pc, #468]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	dc02      	bgt.n	8001e0e <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001e08:	4b71      	ldr	r3, [pc, #452]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e0e:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e14:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001e16:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e18:	e13f      	b.n	800209a <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001e1a:	4b68      	ldr	r3, [pc, #416]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001e1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e20:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	dd42      	ble.n	8001eb4 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001e2e:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001e30:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e34:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001fc4 <led_awake_routine+0x2a8>
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d838      	bhi.n	8001eb4 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001e42:	4b61      	ldr	r3, [pc, #388]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001e44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e4a:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001e4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e50:	2008      	movs	r0, #8
 8001e52:	f7ff f8df 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e56:	4b5e      	ldr	r3, [pc, #376]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3305      	adds	r3, #5
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e6e:	801a      	strh	r2, [r3, #0]
 8001e70:	e008      	b.n	8001e84 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e72:	4b58      	ldr	r3, [pc, #352]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b54      	ldr	r3, [pc, #336]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e82:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e84:	4b53      	ldr	r3, [pc, #332]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e8e:	dd03      	ble.n	8001e98 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e007      	b.n	8001ea8 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001e98:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	dc02      	bgt.n	8001ea8 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001eaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eae:	4b46      	ldr	r3, [pc, #280]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb2:	e0f2      	b.n	800209a <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001eb4:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001eb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eba:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fd8 <led_awake_routine+0x2bc>
 8001ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	f340 808d 	ble.w	8001fe4 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001eca:	4b3c      	ldr	r3, [pc, #240]	@ (8001fbc <led_awake_routine+0x2a0>)
 8001ecc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ed0:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	f200 8082 	bhi.w	8001fe4 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <led_awake_routine+0x2c0>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d003      	beq.n	8001ef4 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001eec:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <led_awake_routine+0x2c0>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001ef2:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001ef4:	4a35      	ldr	r2, [pc, #212]	@ (8001fcc <led_awake_routine+0x2b0>)
 8001ef6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001efa:	2008      	movs	r0, #8
 8001efc:	f7ff f88a 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001f00:	4b33      	ldr	r3, [pc, #204]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001f08:	4b32      	ldr	r3, [pc, #200]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3305      	adds	r3, #5
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	e008      	b.n	8001f2e <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b05      	subs	r3, #5
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f2c:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001f2e:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f38:	dd03      	ble.n	8001f42 <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e007      	b.n	8001f52 <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001f42:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	dc02      	bgt.n	8001f52 <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f4c:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <led_awake_routine+0x2b4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <led_awake_routine+0x2c0>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3305      	adds	r3, #5
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	e008      	b.n	8001f80 <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b05      	subs	r3, #5
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f7e:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f8a:	dd03      	ble.n	8001f94 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <led_awake_routine+0x2c0>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e007      	b.n	8001fa4 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	dc02      	bgt.n	8001fa4 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <led_awake_routine+0x2c0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <led_awake_routine+0x2b8>)
 8001fa6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001fac:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <led_awake_routine+0x2c4>)
 8001fb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fb4:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <led_awake_routine+0x2ac>)
 8001fb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fb8:	e06f      	b.n	800209a <led_awake_routine+0x37e>
 8001fba:	bf00      	nop
 8001fbc:	20001530 	.word	0x20001530
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40833333 	.word	0x40833333
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	20000324 	.word	0x20000324
 8001fd0:	200012c4 	.word	0x200012c4
 8001fd4:	200012c6 	.word	0x200012c6
 8001fd8:	40533333 	.word	0x40533333
 8001fdc:	200012c5 	.word	0x200012c5
 8001fe0:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <led_awake_routine+0x384>)
 8001fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001fec:	4a2d      	ldr	r2, [pc, #180]	@ (80020a4 <led_awake_routine+0x388>)
 8001fee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ff2:	2008      	movs	r0, #8
 8001ff4:	f7ff f80e 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <led_awake_routine+0x38c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <led_awake_routine+0x390>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	b29b      	uxth	r3, r3
 8002008:	3305      	adds	r3, #5
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21a      	sxth	r2, r3
 800200e:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <led_awake_routine+0x390>)
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	e008      	b.n	8002026 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <led_awake_routine+0x390>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b05      	subs	r3, #5
 800201e:	b29b      	uxth	r3, r3
 8002020:	b21a      	sxth	r2, r3
 8002022:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <led_awake_routine+0x390>)
 8002024:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <led_awake_routine+0x390>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002030:	dd03      	ble.n	800203a <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <led_awake_routine+0x38c>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e007      	b.n	800204a <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <led_awake_routine+0x390>)
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	dc02      	bgt.n	800204a <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <led_awake_routine+0x38c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <led_awake_routine+0x390>)
 800204c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <led_awake_routine+0x384>)
 8002052:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002054:	e021      	b.n	800209a <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8002056:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <led_awake_routine+0x384>)
 8002058:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800205e:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <led_awake_routine+0x388>)
 8002060:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002064:	2008      	movs	r0, #8
 8002066:	f7fe ffd5 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <led_awake_routine+0x390>)
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002074:	d004      	beq.n	8002080 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <led_awake_routine+0x390>)
 8002078:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	e002      	b.n	8002086 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <led_awake_routine+0x390>)
 8002082:	2200      	movs	r2, #0
 8002084:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <led_awake_routine+0x390>)
 8002088:	f9b3 2000 	ldrsh.w	r2, [r3]
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <led_awake_routine+0x384>)
 800208e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002090:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002094:	f002 f864 	bl	8004160 <HAL_Delay>
}
 8002098:	e7ff      	b.n	800209a <led_awake_routine+0x37e>
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40000400 	.word	0x40000400
 80020a4:	20000324 	.word	0x20000324
 80020a8:	200012c5 	.word	0x200012c5
 80020ac:	200012c8 	.word	0x200012c8

080020b0 <blink_red>:

void blink_red() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <blink_red+0x60>)
 80020b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 80020bc:	4a15      	ldr	r2, [pc, #84]	@ (8002114 <blink_red+0x64>)
 80020be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c2:	2008      	movs	r0, #8
 80020c4:	f7fe ffa6 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <blink_red+0x60>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d2:	f002 f845 	bl	8004160 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <blink_red+0x60>)
 80020d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e2:	f002 f83d 	bl	8004160 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <blink_red+0x60>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f0:	f002 f836 	bl	8004160 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <blink_red+0x60>)
 80020f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020fa:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002100:	f002 f82e 	bl	8004160 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8002104:	4b02      	ldr	r3, [pc, #8]	@ (8002110 <blink_red+0x60>)
 8002106:	2200      	movs	r2, #0
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40000400 	.word	0x40000400
 8002114:	20000324 	.word	0x20000324

08002118 <led_awake_routine1>:

static void led_awake_routine1() {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0


	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 800211c:	4ba6      	ldr	r3, [pc, #664]	@ (80023b8 <led_awake_routine1+0x2a0>)
 800211e:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8195 	bne.w	8002452 <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8002128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800212c:	48a3      	ldr	r0, [pc, #652]	@ (80023bc <led_awake_routine1+0x2a4>)
 800212e:	f003 ffd7 	bl	80060e0 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d025      	beq.n	8002184 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002138:	4b9f      	ldr	r3, [pc, #636]	@ (80023b8 <led_awake_routine1+0x2a0>)
 800213a:	edd3 7a08 	vldr	s15, [r3, #32]
 800213e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80023c0 <led_awake_routine1+0x2a8>
 8002142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	db0d      	blt.n	8002168 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 800214c:	4b9d      	ldr	r3, [pc, #628]	@ (80023c4 <led_awake_routine1+0x2ac>)
 800214e:	2200      	movs	r2, #0
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002152:	4b9c      	ldr	r3, [pc, #624]	@ (80023c4 <led_awake_routine1+0x2ac>)
 8002154:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800215a:	4a9b      	ldr	r2, [pc, #620]	@ (80023c8 <led_awake_routine1+0x2b0>)
 800215c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002160:	2008      	movs	r0, #8
 8002162:	f7fe ff57 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002166:	e196      	b.n	8002496 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002168:	4b96      	ldr	r3, [pc, #600]	@ (80023c4 <led_awake_routine1+0x2ac>)
 800216a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002170:	4b94      	ldr	r3, [pc, #592]	@ (80023c4 <led_awake_routine1+0x2ac>)
 8002172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002176:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002178:	4a93      	ldr	r2, [pc, #588]	@ (80023c8 <led_awake_routine1+0x2b0>)
 800217a:	2100      	movs	r1, #0
 800217c:	2008      	movs	r0, #8
 800217e:	f7fe ff49 	bl	8001014 <setSoftPWM>
}
 8002182:	e188      	b.n	8002496 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002184:	4a90      	ldr	r2, [pc, #576]	@ (80023c8 <led_awake_routine1+0x2b0>)
 8002186:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800218a:	2008      	movs	r0, #8
 800218c:	f7fe ff42 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002190:	4b89      	ldr	r3, [pc, #548]	@ (80023b8 <led_awake_routine1+0x2a0>)
 8002192:	edd3 7a08 	vldr	s15, [r3, #32]
 8002196:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80023c0 <led_awake_routine1+0x2a8>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	db38      	blt.n	8002216 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 80021a4:	4b87      	ldr	r3, [pc, #540]	@ (80023c4 <led_awake_routine1+0x2ac>)
 80021a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 80021ac:	4a86      	ldr	r2, [pc, #536]	@ (80023c8 <led_awake_routine1+0x2b0>)
 80021ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021b2:	2008      	movs	r0, #8
 80021b4:	f7fe ff2e 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80021b8:	4b84      	ldr	r3, [pc, #528]	@ (80023cc <led_awake_routine1+0x2b4>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <led_awake_routine1+0xbc>
					green_led_pwm_val += 60;
 80021c0:	4b83      	ldr	r3, [pc, #524]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	333c      	adds	r3, #60	@ 0x3c
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	4b80      	ldr	r3, [pc, #512]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e008      	b.n	80021e6 <led_awake_routine1+0xce>
					green_led_pwm_val -= 60;
 80021d4:	4b7e      	ldr	r3, [pc, #504]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b3c      	subs	r3, #60	@ 0x3c
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	4b7b      	ldr	r3, [pc, #492]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021e4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021e6:	4b7a      	ldr	r3, [pc, #488]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f0:	dd03      	ble.n	80021fa <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80021f2:	4b76      	ldr	r3, [pc, #472]	@ (80023cc <led_awake_routine1+0x2b4>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e007      	b.n	800220a <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80021fa:	4b75      	ldr	r3, [pc, #468]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dc02      	bgt.n	800220a <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 8002204:	4b71      	ldr	r3, [pc, #452]	@ (80023cc <led_awake_routine1+0x2b4>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800220a:	4b71      	ldr	r3, [pc, #452]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800220c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002210:	4b6c      	ldr	r3, [pc, #432]	@ (80023c4 <led_awake_routine1+0x2ac>)
 8002212:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002214:	e13f      	b.n	8002496 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8002216:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <led_awake_routine1+0x2a0>)
 8002218:	edd3 7a08 	vldr	s15, [r3, #32]
 800221c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	dd42      	ble.n	80022b0 <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 800222a:	4b63      	ldr	r3, [pc, #396]	@ (80023b8 <led_awake_routine1+0x2a0>)
 800222c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002230:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80023c0 <led_awake_routine1+0x2a8>
 8002234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d838      	bhi.n	80022b0 <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800223e:	4b61      	ldr	r3, [pc, #388]	@ (80023c4 <led_awake_routine1+0x2ac>)
 8002240:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002246:	4a60      	ldr	r2, [pc, #384]	@ (80023c8 <led_awake_routine1+0x2b0>)
 8002248:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800224c:	2008      	movs	r0, #8
 800224e:	f7fe fee1 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002252:	4b5e      	ldr	r3, [pc, #376]	@ (80023cc <led_awake_routine1+0x2b4>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <led_awake_routine1+0x156>
					green_led_pwm_val += 60;
 800225a:	4b5d      	ldr	r3, [pc, #372]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002260:	b29b      	uxth	r3, r3
 8002262:	333c      	adds	r3, #60	@ 0x3c
 8002264:	b29b      	uxth	r3, r3
 8002266:	b21a      	sxth	r2, r3
 8002268:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	e008      	b.n	8002280 <led_awake_routine1+0x168>
					green_led_pwm_val -= 60;
 800226e:	4b58      	ldr	r3, [pc, #352]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b3c      	subs	r3, #60	@ 0x3c
 8002278:	b29b      	uxth	r3, r3
 800227a:	b21a      	sxth	r2, r3
 800227c:	4b54      	ldr	r3, [pc, #336]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800227e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002280:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800228a:	dd03      	ble.n	8002294 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 800228c:	4b4f      	ldr	r3, [pc, #316]	@ (80023cc <led_awake_routine1+0x2b4>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e007      	b.n	80022a4 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002294:	4b4e      	ldr	r3, [pc, #312]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	dc02      	bgt.n	80022a4 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800229e:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <led_awake_routine1+0x2b4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80022a4:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80022a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022aa:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <led_awake_routine1+0x2ac>)
 80022ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ae:	e0f2      	b.n	8002496 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 80022b0:	4b41      	ldr	r3, [pc, #260]	@ (80023b8 <led_awake_routine1+0x2a0>)
 80022b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80022b6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80023d4 <led_awake_routine1+0x2bc>
 80022ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	f340 808d 	ble.w	80023e0 <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 80022c6:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <led_awake_routine1+0x2a0>)
 80022c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80022cc:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	f200 8082 	bhi.w	80023e0 <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80022dc:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <led_awake_routine1+0x2b4>)
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <led_awake_routine1+0x2c0>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d003      	beq.n	80022f0 <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80022e8:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <led_awake_routine1+0x2c0>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <led_awake_routine1+0x2b4>)
 80022ee:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <led_awake_routine1+0x2b0>)
 80022f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022f6:	2008      	movs	r0, #8
 80022f8:	f7fe fe8c 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80022fc:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <led_awake_routine1+0x2b4>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <led_awake_routine1+0x200>
					green_led_pwm_val += 60;
 8002304:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	b29b      	uxth	r3, r3
 800230c:	333c      	adds	r3, #60	@ 0x3c
 800230e:	b29b      	uxth	r3, r3
 8002310:	b21a      	sxth	r2, r3
 8002312:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002314:	801a      	strh	r2, [r3, #0]
 8002316:	e008      	b.n	800232a <led_awake_routine1+0x212>
					green_led_pwm_val -= 60;
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800231a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b3c      	subs	r3, #60	@ 0x3c
 8002322:	b29b      	uxth	r3, r3
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002328:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800232a:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <led_awake_routine1+0x2b8>)
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002334:	dd03      	ble.n	800233e <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002336:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <led_awake_routine1+0x2b4>)
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	e007      	b.n	800234e <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <led_awake_routine1+0x2b8>)
 8002340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002344:	2b00      	cmp	r3, #0
 8002346:	dc02      	bgt.n	800234e <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002348:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <led_awake_routine1+0x2b4>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800234e:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <led_awake_routine1+0x2c0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <led_awake_routine1+0x252>
					red_led_pwm_val += 60;
 8002356:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <led_awake_routine1+0x2c4>)
 8002358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235c:	b29b      	uxth	r3, r3
 800235e:	333c      	adds	r3, #60	@ 0x3c
 8002360:	b29b      	uxth	r3, r3
 8002362:	b21a      	sxth	r2, r3
 8002364:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <led_awake_routine1+0x2c4>)
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	e008      	b.n	800237c <led_awake_routine1+0x264>
					red_led_pwm_val -= 60;
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <led_awake_routine1+0x2c4>)
 800236c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b3c      	subs	r3, #60	@ 0x3c
 8002374:	b29b      	uxth	r3, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <led_awake_routine1+0x2c4>)
 800237a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <led_awake_routine1+0x2c4>)
 800237e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002382:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002386:	dd03      	ble.n	8002390 <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <led_awake_routine1+0x2c0>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e007      	b.n	80023a0 <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <led_awake_routine1+0x2c4>)
 8002392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	dc02      	bgt.n	80023a0 <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <led_awake_routine1+0x2c0>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <led_awake_routine1+0x2b8>)
 80023a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <led_awake_routine1+0x2ac>)
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <led_awake_routine1+0x2c4>)
 80023ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <led_awake_routine1+0x2ac>)
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80023b4:	e06f      	b.n	8002496 <led_awake_routine1+0x37e>
 80023b6:	bf00      	nop
 80023b8:	20001530 	.word	0x20001530
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40833333 	.word	0x40833333
 80023c4:	40000400 	.word	0x40000400
 80023c8:	20000324 	.word	0x20000324
 80023cc:	200012c4 	.word	0x200012c4
 80023d0:	200012c6 	.word	0x200012c6
 80023d4:	40533333 	.word	0x40533333
 80023d8:	200012c5 	.word	0x200012c5
 80023dc:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 80023e0:	4b2e      	ldr	r3, [pc, #184]	@ (800249c <led_awake_routine1+0x384>)
 80023e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <led_awake_routine1+0x388>)
 80023ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023ee:	2008      	movs	r0, #8
 80023f0:	f7fe fe10 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <led_awake_routine1+0x38c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <led_awake_routine1+0x2f8>
					red_led_pwm_val += 60;
 80023fc:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <led_awake_routine1+0x390>)
 80023fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002402:	b29b      	uxth	r3, r3
 8002404:	333c      	adds	r3, #60	@ 0x3c
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21a      	sxth	r2, r3
 800240a:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <led_awake_routine1+0x390>)
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	e008      	b.n	8002422 <led_awake_routine1+0x30a>
					red_led_pwm_val -= 60;
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <led_awake_routine1+0x390>)
 8002412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b3c      	subs	r3, #60	@ 0x3c
 800241a:	b29b      	uxth	r3, r3
 800241c:	b21a      	sxth	r2, r3
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <led_awake_routine1+0x390>)
 8002420:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <led_awake_routine1+0x390>)
 8002424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800242c:	dd03      	ble.n	8002436 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 800242e:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <led_awake_routine1+0x38c>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <led_awake_routine1+0x390>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	dc02      	bgt.n	8002446 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <led_awake_routine1+0x38c>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <led_awake_routine1+0x390>)
 8002448:	f9b3 2000 	ldrsh.w	r2, [r3]
 800244c:	4b13      	ldr	r3, [pc, #76]	@ (800249c <led_awake_routine1+0x384>)
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002450:	e021      	b.n	8002496 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <led_awake_routine1+0x384>)
 8002454:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800245a:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <led_awake_routine1+0x388>)
 800245c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002460:	2008      	movs	r0, #8
 8002462:	f7fe fdd7 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <led_awake_routine1+0x390>)
 8002468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002470:	d004      	beq.n	800247c <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <led_awake_routine1+0x390>)
 8002474:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e002      	b.n	8002482 <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 800247c:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <led_awake_routine1+0x390>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <led_awake_routine1+0x390>)
 8002484:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002488:	4b04      	ldr	r3, [pc, #16]	@ (800249c <led_awake_routine1+0x384>)
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 800248c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002490:	f001 fe66 	bl	8004160 <HAL_Delay>
}
 8002494:	e7ff      	b.n	8002496 <led_awake_routine1+0x37e>
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40000400 	.word	0x40000400
 80024a0:	20000324 	.word	0x20000324
 80024a4:	200012c5 	.word	0x200012c5
 80024a8:	200012c8 	.word	0x200012c8

080024ac <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80024b2:	f001 fea5 	bl	8004200 <HAL_GetUIDw1>
 80024b6:	4603      	mov	r3, r0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80024bc:	f001 fea0 	bl	8004200 <HAL_GetUIDw1>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <ver_GetUid+0x8c>)
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 80024c8:	4c1c      	ldr	r4, [pc, #112]	@ (800253c <ver_GetUid+0x90>)
 80024ca:	f001 fea5 	bl	8004218 <HAL_GetUIDw2>
 80024ce:	4603      	mov	r3, r0
 80024d0:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b23      	cmp	r3, #35	@ 0x23
 80024d6:	d909      	bls.n	80024ec <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b3d      	cmp	r3, #61	@ 0x3d
 80024dc:	bf28      	it	cs
 80024de:	233d      	movcs	r3, #61	@ 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	333d      	adds	r3, #61	@ 0x3d
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <ver_GetUid+0x8c>)
 80024e8:	71da      	strb	r2, [r3, #7]
 80024ea:	e00b      	b.n	8002504 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d901      	bls.n	80024f6 <ver_GetUid+0x4a>
 80024f2:	2241      	movs	r2, #65	@ 0x41
 80024f4:	e000      	b.n	80024f8 <ver_GetUid+0x4c>
 80024f6:	2230      	movs	r2, #48	@ 0x30
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <ver_GetUid+0x8c>)
 8002502:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002504:	f001 fe70 	bl	80041e8 <HAL_GetUIDw0>
 8002508:	4603      	mov	r3, r0
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	480b      	ldr	r0, [pc, #44]	@ (8002540 <ver_GetUid+0x94>)
 8002512:	f011 fdc1 	bl	8014098 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002516:	f001 fe67 	bl	80041e8 <HAL_GetUIDw0>
 800251a:	4603      	mov	r3, r0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	4808      	ldr	r0, [pc, #32]	@ (8002544 <ver_GetUid+0x98>)
 8002522:	f011 fdb9 	bl	8014098 <CharToHexasc>
	sUid[12] = 0;
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <ver_GetUid+0x8c>)
 8002528:	2200      	movs	r2, #0
 800252a:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <ver_GetUid+0x8c>)
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}
 8002536:	bf00      	nop
 8002538:	200017cc 	.word	0x200017cc
 800253c:	200017cf 	.word	0x200017cf
 8002540:	200017d4 	.word	0x200017d4
 8002544:	200017d6 	.word	0x200017d6

08002548 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0


	if(run_console_co2)
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <run_console_from_scd30+0x18>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <run_console_from_scd30+0x10>
	{
		console_process();
 8002554:	f00f fec2 	bl	80122dc <console_process>
	}
	led_awake_routine1();
 8002558:	f7ff fdde 	bl	8002118 <led_awake_routine1>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000320 	.word	0x20000320

08002564 <app_main>:

void app_main() {
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800256a:	2248      	movs	r2, #72	@ 0x48
 800256c:	2100      	movs	r1, #0
 800256e:	489e      	ldr	r0, [pc, #632]	@ (80027e8 <app_main+0x284>)
 8002570:	f01c fc34 	bl	801eddc <memset>

	load_param();
 8002574:	f7fe fec4 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002578:	489c      	ldr	r0, [pc, #624]	@ (80027ec <app_main+0x288>)
 800257a:	f008 fe13 	bl	800b1a4 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800257e:	499c      	ldr	r1, [pc, #624]	@ (80027f0 <app_main+0x28c>)
 8002580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002584:	4a9b      	ldr	r2, [pc, #620]	@ (80027f4 <app_main+0x290>)
 8002586:	489c      	ldr	r0, [pc, #624]	@ (80027f8 <app_main+0x294>)
 8002588:	f002 fd16 	bl	8004fb8 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800258c:	4b97      	ldr	r3, [pc, #604]	@ (80027ec <app_main+0x288>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b96      	ldr	r3, [pc, #600]	@ (80027ec <app_main+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259a:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 800259c:	4a94      	ldr	r2, [pc, #592]	@ (80027f0 <app_main+0x28c>)
 800259e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025a2:	2008      	movs	r0, #8
 80025a4:	f7fe fd36 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 80025a8:	2100      	movs	r1, #0
 80025aa:	4894      	ldr	r0, [pc, #592]	@ (80027fc <app_main+0x298>)
 80025ac:	f008 ff3e 	bl	800b42c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 80025b0:	4b93      	ldr	r3, [pc, #588]	@ (8002800 <app_main+0x29c>)
 80025b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 80025b8:	2104      	movs	r1, #4
 80025ba:	4890      	ldr	r0, [pc, #576]	@ (80027fc <app_main+0x298>)
 80025bc:	f008 ff36 	bl	800b42c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 80025c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002800 <app_main+0x29c>)
 80025c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 80025c8:	488e      	ldr	r0, [pc, #568]	@ (8002804 <app_main+0x2a0>)
 80025ca:	f019 fd3d 	bl	801c048 <Mount_SD>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <app_main+0x7c>

		Unmount_SD("/");
 80025d4:	488b      	ldr	r0, [pc, #556]	@ (8002804 <app_main+0x2a0>)
 80025d6:	f019 fd63 	bl	801c0a0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80025da:	f01a fc1f 	bl	801ce1c <MX_USB_DEVICE_Init>
 80025de:	e002      	b.n	80025e6 <app_main+0x82>

	} else {
		datawritten = 2;
 80025e0:	4b89      	ldr	r3, [pc, #548]	@ (8002808 <app_main+0x2a4>)
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80025e6:	f001 fdaf 	bl	8004148 <HAL_GetTick>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a87      	ldr	r2, [pc, #540]	@ (800280c <app_main+0x2a8>)
 80025ee:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80025f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f4:	4886      	ldr	r0, [pc, #536]	@ (8002810 <app_main+0x2ac>)
 80025f6:	f003 fd73 	bl	80060e0 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <app_main+0xa2>
		init_sps30();
 8002600:	f7ff f914 	bl	800182c <init_sps30>
 8002604:	e016      	b.n	8002634 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8002606:	4b78      	ldr	r3, [pc, #480]	@ (80027e8 <app_main+0x284>)
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 800260e:	4b76      	ldr	r3, [pc, #472]	@ (80027e8 <app_main+0x284>)
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 8002616:	4b74      	ldr	r3, [pc, #464]	@ (80027e8 <app_main+0x284>)
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 800261e:	4b72      	ldr	r3, [pc, #456]	@ (80027e8 <app_main+0x284>)
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8002626:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <app_main+0x2b0>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 800262c:	4b6e      	ldr	r3, [pc, #440]	@ (80027e8 <app_main+0x284>)
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8002634:	f7fe ff66 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 8002638:	f00f fe9c 	bl	8012374 <console_init>
	Rtc_set_alarm();
 800263c:	f011 fb9a 	bl	8013d74 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	2200      	movs	r2, #0
 8002646:	4619      	mov	r1, r3
 8002648:	4873      	ldr	r0, [pc, #460]	@ (8002818 <app_main+0x2b4>)
 800264a:	f007 fa9c 	bl	8009b86 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	461a      	mov	r2, r3
 8002652:	4b65      	ldr	r3, [pc, #404]	@ (80027e8 <app_main+0x284>)
 8002654:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 8002656:	2101      	movs	r1, #1
 8002658:	486f      	ldr	r0, [pc, #444]	@ (8002818 <app_main+0x2b4>)
 800265a:	f007 fd45 	bl	800a0e8 <HAL_RTCEx_BKUPRead>
 800265e:	4603      	mov	r3, r0
 8002660:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002664:	4293      	cmp	r3, r2
 8002666:	d106      	bne.n	8002676 <app_main+0x112>
 8002668:	496c      	ldr	r1, [pc, #432]	@ (800281c <app_main+0x2b8>)
 800266a:	486d      	ldr	r0, [pc, #436]	@ (8002820 <app_main+0x2bc>)
 800266c:	f7fd fdb8 	bl	80001e0 <strcmp>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d112      	bne.n	800269c <app_main+0x138>
	    {




		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002676:	496b      	ldr	r1, [pc, #428]	@ (8002824 <app_main+0x2c0>)
 8002678:	486b      	ldr	r0, [pc, #428]	@ (8002828 <app_main+0x2c4>)
 800267a:	f01a fb11 	bl	801cca0 <createfile>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <app_main+0x284>)
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				_Flash_Packet.File_Format);


		   HAL_PWR_EnableBkUpAccess();
 8002688:	f006 f9fa 	bl	8008a80 <HAL_PWR_EnableBkUpAccess>
			   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 800268c:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002690:	2101      	movs	r1, #1
 8002692:	4861      	ldr	r0, [pc, #388]	@ (8002818 <app_main+0x2b4>)
 8002694:	f007 fd0e 	bl	800a0b4 <HAL_RTCEx_BKUPWrite>
			   HAL_PWR_DisableBkUpAccess();
 8002698:	f006 fa06 	bl	8008aa8 <HAL_PWR_DisableBkUpAccess>
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 800269c:	f7ff fb16 	bl	8001ccc <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 80026a0:	23c8      	movs	r3, #200	@ 0xc8
 80026a2:	2215      	movs	r2, #21
 80026a4:	4961      	ldr	r1, [pc, #388]	@ (800282c <app_main+0x2c8>)
 80026a6:	4862      	ldr	r0, [pc, #392]	@ (8002830 <app_main+0x2cc>)
 80026a8:	f009 fdee 	bl	800c288 <HAL_UART_Transmit>



	while (1) {

		prev_sleep_time = HAL_GetTick();
 80026ac:	f001 fd4c 	bl	8004148 <HAL_GetTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a60      	ldr	r2, [pc, #384]	@ (8002834 <app_main+0x2d0>)
 80026b4:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 80026b6:	f001 fd47 	bl	8004148 <HAL_GetTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002838 <app_main+0x2d4>)
 80026be:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 80026c0:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <app_main+0x2d8>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 80026c6:	f7fe fd89 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80026ca:	e177      	b.n	80029bc <app_main+0x458>
		{
			pwr_off_detected();
 80026cc:	f7fe fd86 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 80026d0:	485b      	ldr	r0, [pc, #364]	@ (8002840 <app_main+0x2dc>)
 80026d2:	f011 fd75 	bl	80141c0 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 80026d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026da:	484d      	ldr	r0, [pc, #308]	@ (8002810 <app_main+0x2ac>)
 80026dc:	f003 fd00 	bl	80060e0 <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 80026e6:	f001 fd2f 	bl	8004148 <HAL_GetTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a51      	ldr	r2, [pc, #324]	@ (8002834 <app_main+0x2d0>)
 80026ee:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4847      	ldr	r0, [pc, #284]	@ (8002818 <app_main+0x2b4>)
 80026fa:	f007 f962 	bl	80099c2 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	4844      	ldr	r0, [pc, #272]	@ (8002818 <app_main+0x2b4>)
 8002706:	f007 fa3e 	bl	8009b86 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 800270a:	79ba      	ldrb	r2, [r7, #6]
 800270c:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <app_main+0x284>)
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 8002712:	797a      	ldrb	r2, [r7, #5]
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <app_main+0x284>)
 8002716:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	4b32      	ldr	r3, [pc, #200]	@ (80027e8 <app_main+0x284>)
 800271e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <app_main+0x284>)
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <app_main+0x1d8>
				_RunTime_Packet.year_changed = 1; //this for year now
 800272c:	4b2e      	ldr	r3, [pc, #184]	@ (80027e8 <app_main+0x284>)
 800272e:	2201      	movs	r2, #1
 8002730:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	461a      	mov	r2, r3
 8002738:	4b2b      	ldr	r3, [pc, #172]	@ (80027e8 <app_main+0x284>)
 800273a:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 800273c:	f7ff f91c 	bl	8001978 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002740:	4b29      	ldr	r3, [pc, #164]	@ (80027e8 <app_main+0x284>)
 8002742:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <app_main+0x1f0>
					|| _RunTime_Packet.usb_first_start) {
 800274a:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <app_main+0x284>)
 800274c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002750:	2b00      	cmp	r3, #0
 8002752:	d045      	beq.n	80027e0 <app_main+0x27c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <app_main+0x284>)
 8002756:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <app_main+0x202>
				{

					start_usb_timer = 1;
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <app_main+0x2e0>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e003      	b.n	800276e <app_main+0x20a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <app_main+0x284>)
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800276e:	f001 fceb 	bl	8004148 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <app_main+0x2a8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <app_main+0x2e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d329      	bcc.n	80027d6 <app_main+0x272>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <app_main+0x284>)
 8002784:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d10d      	bne.n	80027aa <app_main+0x246>
							&& _RunTime_Packet.usb_first_start) {
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <app_main+0x284>)
 8002790:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <app_main+0x246>
						_RunTime_Packet.sd_file_creation = createfile(
 8002798:	4922      	ldr	r1, [pc, #136]	@ (8002824 <app_main+0x2c0>)
 800279a:	4823      	ldr	r0, [pc, #140]	@ (8002828 <app_main+0x2c4>)
 800279c:	f01a fa80 	bl	801cca0 <createfile>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <app_main+0x284>)
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <app_main+0x284>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <app_main+0x284>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <app_main+0x284>)
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <app_main+0x2e0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]

					init_sps30();
 80027c8:	f7ff f830 	bl	800182c <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 80027cc:	f001 fcbc 	bl	8004148 <HAL_GetTick>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <app_main+0x2d4>)
 80027d4:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 80027d6:	f001 fcb7 	bl	8004148 <HAL_GetTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <app_main+0x2d0>)
 80027de:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80027e0:	f00f fd7c 	bl	80122dc <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80027e4:	e046      	b.n	8002874 <app_main+0x310>
 80027e6:	bf00      	nop
 80027e8:	20001530 	.word	0x20001530
 80027ec:	2000193c 	.word	0x2000193c
 80027f0:	20000324 	.word	0x20000324
 80027f4:	40020418 	.word	0x40020418
 80027f8:	20001a14 	.word	0x20001a14
 80027fc:	200019cc 	.word	0x200019cc
 8002800:	40000400 	.word	0x40000400
 8002804:	0802243c 	.word	0x0802243c
 8002808:	20002328 	.word	0x20002328
 800280c:	200017c8 	.word	0x200017c8
 8002810:	40020000 	.word	0x40020000
 8002814:	20001584 	.word	0x20001584
 8002818:	20001898 	.word	0x20001898
 800281c:	0802244c 	.word	0x0802244c
 8002820:	20001461 	.word	0x20001461
 8002824:	20001330 	.word	0x20001330
 8002828:	200012cc 	.word	0x200012cc
 800282c:	08022454 	.word	0x08022454
 8002830:	20001a74 	.word	0x20001a74
 8002834:	200017c0 	.word	0x200017c0
 8002838:	200017c4 	.word	0x200017c4
 800283c:	2000000c 	.word	0x2000000c
 8002840:	20001550 	.word	0x20001550
 8002844:	20001580 	.word	0x20001580
 8002848:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 800284c:	f00f fd46 	bl	80122dc <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002850:	4b92      	ldr	r3, [pc, #584]	@ (8002a9c <app_main+0x538>)
 8002852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <app_main+0x2fa>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 800285a:	f7fe fe7b 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800285e:	f7ff f801 	bl	8001864 <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002862:	488f      	ldr	r0, [pc, #572]	@ (8002aa0 <app_main+0x53c>)
 8002864:	f011 fcac 	bl	80141c0 <adc_Measure>
				led_awake_routine1();
 8002868:	f7ff fc56 	bl	8002118 <led_awake_routine1>
				pwr_off_detected();
 800286c:	f7fe fcb6 	bl	80011dc <pwr_off_detected>
				check_peripheral_error();
 8002870:	f7ff f882 	bl	8001978 <check_peripheral_error>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002874:	f001 fc68 	bl	8004148 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <app_main+0x540>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	4b89      	ldr	r3, [pc, #548]	@ (8002aa8 <app_main+0x544>)
 8002882:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 8002884:	429a      	cmp	r2, r3
 8002886:	d809      	bhi.n	800289c <app_main+0x338>
					&& !_RunTime_Packet.usb_detection
 8002888:	4b84      	ldr	r3, [pc, #528]	@ (8002a9c <app_main+0x538>)
 800288a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <app_main+0x338>
					&& !_RunTime_Packet.usb_first_start)
 8002892:	4b82      	ldr	r3, [pc, #520]	@ (8002a9c <app_main+0x538>)
 8002894:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0d7      	beq.n	800284c <app_main+0x2e8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 800289c:	f7ff f8ce 	bl	8001a3c <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 80028a0:	4b82      	ldr	r3, [pc, #520]	@ (8002aac <app_main+0x548>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d014      	beq.n	80028d2 <app_main+0x36e>
 80028a8:	4b7c      	ldr	r3, [pc, #496]	@ (8002a9c <app_main+0x538>)
 80028aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <app_main+0x36e>
					&& !_RunTime_Packet.usb_first_start
 80028b2:	4b7a      	ldr	r3, [pc, #488]	@ (8002a9c <app_main+0x538>)
 80028b4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <app_main+0x36e>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 80028bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028c0:	487b      	ldr	r0, [pc, #492]	@ (8002ab0 <app_main+0x54c>)
 80028c2:	f003 fc0d 	bl	80060e0 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <app_main+0x36e>
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				//sps30_stop_measurement();
				stop_measurement = 0;
 80028cc:	4b77      	ldr	r3, [pc, #476]	@ (8002aac <app_main+0x548>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 80028d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028d6:	4876      	ldr	r0, [pc, #472]	@ (8002ab0 <app_main+0x54c>)
 80028d8:	f003 fc02 	bl	80060e0 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d050      	beq.n	8002984 <app_main+0x420>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80028e2:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <app_main+0x550>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d04c      	beq.n	8002984 <app_main+0x420>
 80028ea:	4b6c      	ldr	r3, [pc, #432]	@ (8002a9c <app_main+0x538>)
 80028ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d147      	bne.n	8002984 <app_main+0x420>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80028f4:	4b69      	ldr	r3, [pc, #420]	@ (8002a9c <app_main+0x538>)
 80028f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <app_main+0x3ba>
						|| _RunTime_Packet.filename_changed
 80028fe:	4b67      	ldr	r3, [pc, #412]	@ (8002a9c <app_main+0x538>)
 8002900:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <app_main+0x3ba>
						|| _RunTime_Packet.fileformat_changed
 8002908:	4b64      	ldr	r3, [pc, #400]	@ (8002a9c <app_main+0x538>)
 800290a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <app_main+0x3ba>
						|| _RunTime_Packet.sd_file_creation == -1) {
 8002912:	4b62      	ldr	r3, [pc, #392]	@ (8002a9c <app_main+0x538>)
 8002914:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d114      	bne.n	8002948 <app_main+0x3e4>
					_RunTime_Packet.sd_file_creation = createfile(
 800291e:	4966      	ldr	r1, [pc, #408]	@ (8002ab8 <app_main+0x554>)
 8002920:	4866      	ldr	r0, [pc, #408]	@ (8002abc <app_main+0x558>)
 8002922:	f01a f9bd 	bl	801cca0 <createfile>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a9c <app_main+0x538>)
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);

					_RunTime_Packet.year_changed = 0;
 8002930:	4b5a      	ldr	r3, [pc, #360]	@ (8002a9c <app_main+0x538>)
 8002932:	2200      	movs	r2, #0
 8002934:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 8002938:	4b58      	ldr	r3, [pc, #352]	@ (8002a9c <app_main+0x538>)
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 8002940:	4b56      	ldr	r3, [pc, #344]	@ (8002a9c <app_main+0x538>)
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				}
				if (filesaving_process()) {
 8002948:	f01a f960 	bl	801cc0c <filesaving_process>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <app_main+0x416>
					HAL_Delay(1500);
 8002952:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002956:	f001 fc03 	bl	8004160 <HAL_Delay>
					if (filesaving_process()) {
 800295a:	f01a f957 	bl	801cc0c <filesaving_process>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <app_main+0x416>
						HAL_Delay(1500);
 8002964:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002968:	f001 fbfa 	bl	8004160 <HAL_Delay>
						if (filesaving_process()) {
 800296c:	f01a f94e 	bl	801cc0c <filesaving_process>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <app_main+0x416>
							HAL_NVIC_SystemReset();
 8002976:	f002 fa02 	bl	8004d7e <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800297a:	f001 fbe5 	bl	8004148 <HAL_GetTick>
 800297e:	4603      	mov	r3, r0
 8002980:	4a48      	ldr	r2, [pc, #288]	@ (8002aa4 <app_main+0x540>)
 8002982:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002984:	f011 f9f6 	bl	8013d74 <Rtc_set_alarm>

		//	adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 8002988:	f7ff f9c8 	bl	8001d1c <led_awake_routine>
			save_data();
 800298c:	f7fe fd86 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8002990:	2101      	movs	r1, #1
 8002992:	4847      	ldr	r0, [pc, #284]	@ (8002ab0 <app_main+0x54c>)
 8002994:	f003 fba4 	bl	80060e0 <HAL_GPIO_ReadPin>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <app_main+0x448>
				_RunTime_Packet.motion_detection = 1;
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <app_main+0x538>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80029a4:	4b46      	ldr	r3, [pc, #280]	@ (8002ac0 <app_main+0x55c>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e005      	b.n	80029b8 <app_main+0x454>
			} else {
				_RunTime_Packet.motion_detection = 0;
 80029ac:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <app_main+0x538>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80029b2:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <app_main+0x55c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 80029b8:	f7fe fc10 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80029bc:	f001 fbc4 	bl	8004148 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <app_main+0x560>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <app_main+0x564>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f67f ae7d 	bls.w	80026cc <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 80029d2:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <app_main+0x538>)
 80029d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <app_main+0x498>
 80029dc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a9c <app_main+0x538>)
 80029de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <app_main+0x498>
				|| _RunTime_Packet.fileformat_changed
 80029e6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <app_main+0x538>)
 80029e8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <app_main+0x498>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80029f0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <app_main+0x538>)
 80029f2:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d11b      	bne.n	8002a34 <app_main+0x4d0>


			_RunTime_Packet.sd_file_creation = createfile(
 80029fc:	492e      	ldr	r1, [pc, #184]	@ (8002ab8 <app_main+0x554>)
 80029fe:	482f      	ldr	r0, [pc, #188]	@ (8002abc <app_main+0x558>)
 8002a00:	f01a f94e 	bl	801cca0 <createfile>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <app_main+0x538>)
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);

			_RunTime_Packet.year_changed = 0;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <app_main+0x538>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <app_main+0x538>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <app_main+0x538>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			/*be sure to save data before going to sleep*/
			while(save_param)
 8002a26:	e001      	b.n	8002a2c <app_main+0x4c8>
			{
				save_data();
 8002a28:	f7fe fd38 	bl	800149c <save_data>
			while(save_param)
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <app_main+0x568>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <app_main+0x4c4>
			}
		}



		if (filesaving_process()) {
 8002a34:	f01a f8ea 	bl	801cc0c <filesaving_process>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <app_main+0x502>
			HAL_Delay(1500);
 8002a3e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a42:	f001 fb8d 	bl	8004160 <HAL_Delay>
			if (filesaving_process()) {
 8002a46:	f01a f8e1 	bl	801cc0c <filesaving_process>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <app_main+0x502>
				HAL_Delay(1500);
 8002a50:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a54:	f001 fb84 	bl	8004160 <HAL_Delay>
				if (filesaving_process()) {
 8002a58:	f01a f8d8 	bl	801cc0c <filesaving_process>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <app_main+0x502>
					HAL_NVIC_SystemReset();
 8002a62:	f002 f98c 	bl	8004d7e <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a66:	f001 fb6f 	bl	8004148 <HAL_GetTick>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <app_main+0x560>)
 8002a6e:	6013      	str	r3, [r2, #0]

		while(save_param)
 8002a70:	e001      	b.n	8002a76 <app_main+0x512>
		{
			save_data();
 8002a72:	f7fe fd13 	bl	800149c <save_data>
		while(save_param)
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <app_main+0x568>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <app_main+0x50e>
		}

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a82:	480b      	ldr	r0, [pc, #44]	@ (8002ab0 <app_main+0x54c>)
 8002a84:	f003 fb2c 	bl	80060e0 <HAL_GPIO_ReadPin>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <app_main+0x532>

			sleep();
 8002a8e:	f7fe ffeb 	bl	8001a68 <sleep>
			wakeup();
 8002a92:	f7ff f86f 	bl	8001b74 <wakeup>

		}
		pwr_off_detected();
 8002a96:	f7fe fba1 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002a9a:	e607      	b.n	80026ac <app_main+0x148>
 8002a9c:	20001530 	.word	0x20001530
 8002aa0:	20001550 	.word	0x20001550
 8002aa4:	200017c4 	.word	0x200017c4
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	20000029 	.word	0x20000029
 8002ab8:	20001330 	.word	0x20001330
 8002abc:	200012cc 	.word	0x200012cc
 8002ac0:	20001589 	.word	0x20001589
 8002ac4:	200017c0 	.word	0x200017c0
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20001579 	.word	0x20001579

08002ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ad4:	f001 fad2 	bl	800407c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad8:	f000 f822 	bl	8002b20 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002adc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae0:	f001 fb3e 	bl	8004160 <HAL_Delay>
  MX_GPIO_Init();
 8002ae4:	f000 fb00 	bl	80030e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ae8:	f000 fade 	bl	80030a8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002aec:	f000 f948 	bl	8002d80 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002af0:	f000 fa86 	bl	8003000 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002af4:	f000 f91e 	bl	8002d34 <MX_RTC_Init>
  MX_I2C1_Init();
 8002af8:	f000 f8d4 	bl	8002ca4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002afc:	f000 f9b0 	bl	8002e60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002b00:	f000 faa8 	bl	8003054 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002b04:	f000 f87c 	bl	8002c00 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002b08:	f010 ff16 	bl	8013938 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002b0c:	f000 f958 	bl	8002dc0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b10:	f000 f9f4 	bl	8002efc <MX_TIM3_Init>
  MX_IWDG_Init();
 8002b14:	f000 f8f4 	bl	8002d00 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002b18:	f7ff fd24 	bl	8002564 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <main+0x4c>

08002b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b094      	sub	sp, #80	@ 0x50
 8002b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b26:	f107 0320 	add.w	r3, r7, #32
 8002b2a:	2230      	movs	r2, #48	@ 0x30
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f01c f954 	bl	801eddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <SystemClock_Config+0xd8>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <SystemClock_Config+0xd8>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <SystemClock_Config+0xd8>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b60:	2300      	movs	r3, #0
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	4b25      	ldr	r3, [pc, #148]	@ (8002bfc <SystemClock_Config+0xdc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b6c:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <SystemClock_Config+0xdc>)
 8002b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <SystemClock_Config+0xdc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002b80:	230d      	movs	r3, #13
 8002b82:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b92:	2302      	movs	r3, #2
 8002b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ba0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002baa:	2307      	movs	r3, #7
 8002bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bae:	f107 0320 	add.w	r3, r7, #32
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f005 ffd4 	bl	8008b60 <HAL_RCC_OscConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002bbe:	f000 fd79 	bl	80036b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 fa36 	bl	8009050 <HAL_RCC_ClockConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002bea:	f000 fd63 	bl	80036b4 <Error_Handler>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3750      	adds	r7, #80	@ 0x50
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40007000 	.word	0x40007000

08002c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c06:	463b      	mov	r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c14:	4a21      	ldr	r2, [pc, #132]	@ (8002c9c <MX_ADC1_Init+0x9c>)
 8002c16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c42:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <MX_ADC1_Init+0xa0>)
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c46:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c60:	480d      	ldr	r0, [pc, #52]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c62:	f001 fae5 	bl	8004230 <HAL_ADC_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c6c:	f000 fd22 	bl	80036b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c70:	230a      	movs	r3, #10
 8002c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <MX_ADC1_Init+0x98>)
 8002c82:	f001 fccb 	bl	800461c <HAL_ADC_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c8c:	f000 fd12 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200017f0 	.word	0x200017f0
 8002c9c:	40012000 	.word	0x40012000
 8002ca0:	0f000001 	.word	0x0f000001

08002ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002caa:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <MX_I2C1_Init+0x54>)
 8002cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cb0:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <MX_I2C1_Init+0x58>)
 8002cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ce0:	4804      	ldr	r0, [pc, #16]	@ (8002cf4 <MX_I2C1_Init+0x50>)
 8002ce2:	f003 fa47 	bl	8006174 <HAL_I2C_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cec:	f000 fce2 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20001838 	.word	0x20001838
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	000186a0 	.word	0x000186a0

08002d00 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_IWDG_Init+0x2c>)
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <MX_IWDG_Init+0x30>)
 8002d08:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <MX_IWDG_Init+0x2c>)
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_IWDG_Init+0x2c>)
 8002d12:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002d16:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002d18:	4804      	ldr	r0, [pc, #16]	@ (8002d2c <MX_IWDG_Init+0x2c>)
 8002d1a:	f004 fb83 	bl	8007424 <HAL_IWDG_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002d24:	f000 fcc6 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000188c 	.word	0x2000188c
 8002d30:	40003000 	.word	0x40003000

08002d34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d3a:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <MX_RTC_Init+0x48>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d46:	227f      	movs	r2, #127	@ 0x7f
 8002d48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d4c:	22ff      	movs	r2, #255	@ 0xff
 8002d4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_RTC_Init+0x44>)
 8002d64:	f006 fd10 	bl	8009788 <HAL_RTC_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d6e:	f000 fca1 	bl	80036b4 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20001898 	.word	0x20001898
 8002d7c:	40002800 	.word	0x40002800

08002d80 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002d86:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <MX_SDIO_SD_Init+0x3c>)
 8002d88:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002da8:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <MX_SDIO_SD_Init+0x38>)
 8002daa:	2205      	movs	r2, #5
 8002dac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	200018b8 	.word	0x200018b8
 8002dbc:	40012c00 	.word	0x40012c00

08002dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002dde:	4a1f      	ldr	r2, [pc, #124]	@ (8002e5c <MX_TIM1_Init+0x9c>)
 8002de0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002de2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002de8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002dea:	2210      	movs	r2, #16
 8002dec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1002-1;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002df0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002df4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df6:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e08:	4813      	ldr	r0, [pc, #76]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002e0a:	f008 f927 	bl	800b05c <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002e14:	f000 fc4e 	bl	80036b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4619      	mov	r1, r3
 8002e24:	480c      	ldr	r0, [pc, #48]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002e26:	f008 fd63 	bl	800b8f0 <HAL_TIM_ConfigClockSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e30:	f000 fc40 	bl	80036b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e34:	2320      	movs	r3, #32
 8002e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <MX_TIM1_Init+0x98>)
 8002e42:	f009 f91d 	bl	800c080 <HAL_TIMEx_MasterConfigSynchronization>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e4c:	f000 fc32 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	2000193c 	.word	0x2000193c
 8002e5c:	40010000 	.word	0x40010000

08002e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	463b      	mov	r3, r7
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002e7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002e86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002e92:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002e94:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ea0:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea6:	4814      	ldr	r0, [pc, #80]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002ea8:	f008 f8d8 	bl	800b05c <HAL_TIM_Base_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002eb2:	f000 fbff 	bl	80036b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480d      	ldr	r0, [pc, #52]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002ec4:	f008 fd14 	bl	800b8f0 <HAL_TIM_ConfigClockSource>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ece:	f000 fbf1 	bl	80036b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eda:	463b      	mov	r3, r7
 8002edc:	4619      	mov	r1, r3
 8002ede:	4806      	ldr	r0, [pc, #24]	@ (8002ef8 <MX_TIM2_Init+0x98>)
 8002ee0:	f009 f8ce 	bl	800c080 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eea:	f000 fbe3 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20001984 	.word	0x20001984

08002efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	@ 0x38
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	f107 0320 	add.w	r3, r7, #32
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f2e:	4a33      	ldr	r2, [pc, #204]	@ (8002ffc <MX_TIM3_Init+0x100>)
 8002f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f32:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002f38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1002-1;
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f40:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f52:	4829      	ldr	r0, [pc, #164]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f54:	f008 f882 	bl	800b05c <HAL_TIM_Base_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f5e:	f000 fba9 	bl	80036b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4822      	ldr	r0, [pc, #136]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f70:	f008 fcbe 	bl	800b8f0 <HAL_TIM_ConfigClockSource>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f7a:	f000 fb9b 	bl	80036b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f7e:	481e      	ldr	r0, [pc, #120]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f80:	f008 f9fb 	bl	800b37a <HAL_TIM_PWM_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f8a:	f000 fb93 	bl	80036b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f96:	f107 0320 	add.w	r3, r7, #32
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4816      	ldr	r0, [pc, #88]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002f9e:	f009 f86f 	bl	800c080 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002fa8:	f000 fb84 	bl	80036b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fac:	2360      	movs	r3, #96	@ 0x60
 8002fae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480d      	ldr	r0, [pc, #52]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002fc4:	f008 fbd2 	bl	800b76c <HAL_TIM_PWM_ConfigChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002fce:	f000 fb71 	bl	80036b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4807      	ldr	r0, [pc, #28]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002fda:	f008 fbc7 	bl	800b76c <HAL_TIM_PWM_ConfigChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002fe4:	f000 fb66 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fe8:	4803      	ldr	r0, [pc, #12]	@ (8002ff8 <MX_TIM3_Init+0xfc>)
 8002fea:	f000 fd83 	bl	8003af4 <HAL_TIM_MspPostInit>

}
 8002fee:	bf00      	nop
 8002ff0:	3738      	adds	r7, #56	@ 0x38
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200019cc 	.word	0x200019cc
 8002ffc:	40000400 	.word	0x40000400

08003000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <MX_USART1_UART_Init+0x50>)
 8003008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 800300c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003012:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003018:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003024:	4b09      	ldr	r3, [pc, #36]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003026:	220c      	movs	r2, #12
 8003028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003036:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_USART1_UART_Init+0x4c>)
 8003038:	f009 f8a4 	bl	800c184 <HAL_UART_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003042:	f000 fb37 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001a74 	.word	0x20001a74
 8003050:	40011000 	.word	0x40011000

08003054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 800305a:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <MX_USART2_UART_Init+0x50>)
 800305c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 8003060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003072:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 800307a:	220c      	movs	r2, #12
 800307c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800308a:	4805      	ldr	r0, [pc, #20]	@ (80030a0 <MX_USART2_UART_Init+0x4c>)
 800308c:	f009 f87a 	bl	800c184 <HAL_UART_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003096:	f000 fb0d 	bl	80036b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20001abc 	.word	0x20001abc
 80030a4:	40004400 	.word	0x40004400

080030a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <MX_DMA_Init+0x3c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a0b      	ldr	r2, [pc, #44]	@ (80030e4 <MX_DMA_Init+0x3c>)
 80030b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <MX_DMA_Init+0x3c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2044      	movs	r0, #68	@ 0x44
 80030d0:	f001 fe1d 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80030d4:	2044      	movs	r0, #68	@ 0x44
 80030d6:	f001 fe36 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b71      	ldr	r3, [pc, #452]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a70      	ldr	r2, [pc, #448]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b6e      	ldr	r3, [pc, #440]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a69      	ldr	r2, [pc, #420]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b67      	ldr	r3, [pc, #412]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	4a62      	ldr	r2, [pc, #392]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	@ 0x30
 8003146:	4b60      	ldr	r3, [pc, #384]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	4b5c      	ldr	r3, [pc, #368]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	4a5b      	ldr	r2, [pc, #364]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	6313      	str	r3, [r2, #48]	@ 0x30
 8003162:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	4a54      	ldr	r2, [pc, #336]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	6313      	str	r3, [r2, #48]	@ 0x30
 800317e:	4b52      	ldr	r3, [pc, #328]	@ (80032c8 <MX_GPIO_Init+0x1e0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800318a:	2200      	movs	r2, #0
 800318c:	2102      	movs	r1, #2
 800318e:	484f      	ldr	r0, [pc, #316]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 8003190:	f002 ffbe 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003194:	2201      	movs	r2, #1
 8003196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800319a:	484d      	ldr	r0, [pc, #308]	@ (80032d0 <MX_GPIO_Init+0x1e8>)
 800319c:	f002 ffb8 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2108      	movs	r1, #8
 80031a4:	484a      	ldr	r0, [pc, #296]	@ (80032d0 <MX_GPIO_Init+0x1e8>)
 80031a6:	f002 ffb3 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80031aa:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 80031ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b0:	2303      	movs	r3, #3
 80031b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4845      	ldr	r0, [pc, #276]	@ (80032d4 <MX_GPIO_Init+0x1ec>)
 80031c0:	f002 fd26 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80031c4:	2301      	movs	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	483d      	ldr	r0, [pc, #244]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 80031d8:	f002 fd1a 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80031dc:	2302      	movs	r3, #2
 80031de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e0:	2301      	movs	r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031e8:	2302      	movs	r3, #2
 80031ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4836      	ldr	r0, [pc, #216]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 80031f4:	f002 fd0c 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031f8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80031fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fe:	2303      	movs	r3, #3
 8003200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	4619      	mov	r1, r3
 800320c:	482f      	ldr	r0, [pc, #188]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 800320e:	f002 fcff 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003212:	f247 4307 	movw	r3, #29703	@ 0x7407
 8003216:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003218:	2303      	movs	r3, #3
 800321a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	482a      	ldr	r0, [pc, #168]	@ (80032d0 <MX_GPIO_Init+0x1e8>)
 8003228:	f002 fcf2 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 800322c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323a:	2302      	movs	r3, #2
 800323c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	4822      	ldr	r0, [pc, #136]	@ (80032d0 <MX_GPIO_Init+0x1e8>)
 8003246:	f002 fce3 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800324a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800324e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003250:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003256:	2302      	movs	r3, #2
 8003258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	481a      	ldr	r0, [pc, #104]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 8003262:	f002 fcd5 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800326c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	4813      	ldr	r0, [pc, #76]	@ (80032cc <MX_GPIO_Init+0x1e4>)
 800327e:	f002 fcc7 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003282:	2308      	movs	r3, #8
 8003284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003286:	2301      	movs	r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	4619      	mov	r1, r3
 8003298:	480d      	ldr	r0, [pc, #52]	@ (80032d0 <MX_GPIO_Init+0x1e8>)
 800329a:	f002 fcb9 	bl	8005c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	2017      	movs	r0, #23
 80032a4:	f001 fd33 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032a8:	2017      	movs	r0, #23
 80032aa:	f001 fd4c 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2028      	movs	r0, #40	@ 0x28
 80032b4:	f001 fd2b 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032b8:	2028      	movs	r0, #40	@ 0x28
 80032ba:	f001 fd44 	bl	8004d46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032be:	bf00      	nop
 80032c0:	3728      	adds	r7, #40	@ 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800

080032d8 <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	@ 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b48      	ldr	r3, [pc, #288]	@ (8003414 <gpio_analog+0x13c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a47      	ldr	r2, [pc, #284]	@ (8003414 <gpio_analog+0x13c>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b45      	ldr	r3, [pc, #276]	@ (8003414 <gpio_analog+0x13c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <gpio_analog+0x13c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <gpio_analog+0x13c>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b3e      	ldr	r3, [pc, #248]	@ (8003414 <gpio_analog+0x13c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b3a      	ldr	r3, [pc, #232]	@ (8003414 <gpio_analog+0x13c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a39      	ldr	r2, [pc, #228]	@ (8003414 <gpio_analog+0x13c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b37      	ldr	r3, [pc, #220]	@ (8003414 <gpio_analog+0x13c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <gpio_analog+0x13c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a32      	ldr	r2, [pc, #200]	@ (8003414 <gpio_analog+0x13c>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b30      	ldr	r3, [pc, #192]	@ (8003414 <gpio_analog+0x13c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <gpio_analog+0x13c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a2b      	ldr	r2, [pc, #172]	@ (8003414 <gpio_analog+0x13c>)
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <gpio_analog+0x13c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800337a:	2308      	movs	r3, #8
 800337c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800337e:	2303      	movs	r3, #3
 8003380:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4821      	ldr	r0, [pc, #132]	@ (8003418 <gpio_analog+0x140>)
 8003392:	f002 fc3d 	bl	8005c10 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 8003396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800339a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339c:	2303      	movs	r3, #3
 800339e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	481a      	ldr	r0, [pc, #104]	@ (8003418 <gpio_analog+0x140>)
 80033b0:	f002 fc2e 	bl	8005c10 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80033b4:	2301      	movs	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033b8:	2303      	movs	r3, #3
 80033ba:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	4814      	ldr	r0, [pc, #80]	@ (800341c <gpio_analog+0x144>)
 80033cc:	f002 fc20 	bl	8005c10 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80033d0:	2302      	movs	r3, #2
 80033d2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d4:	2303      	movs	r3, #3
 80033d6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	480d      	ldr	r0, [pc, #52]	@ (800341c <gpio_analog+0x144>)
 80033e8:	f002 fc12 	bl	8005c10 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80033ec:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033f0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f2:	2303      	movs	r3, #3
 80033f4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	4805      	ldr	r0, [pc, #20]	@ (800341c <gpio_analog+0x144>)
 8003406:	f002 fc03 	bl	8005c10 <HAL_GPIO_Init>

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40020400 	.word	0x40020400
 800341c:	40020000 	.word	0x40020000

08003420 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8003434:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003438:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343a:	2303      	movs	r3, #3
 800343c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4803      	ldr	r0, [pc, #12]	@ (8003458 <i2c1_gpio_analog+0x38>)
 800344c:	f002 fbe0 	bl	8005c10 <HAL_GPIO_Init>


}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40020400 	.word	0x40020400

0800345c <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003470:	23c0      	movs	r3, #192	@ 0xc0
 8003472:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003474:	2303      	movs	r3, #3
 8003476:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	4619      	mov	r1, r3
 8003484:	4809      	ldr	r0, [pc, #36]	@ (80034ac <uart_gpio_analog+0x50>)
 8003486:	f002 fbc3 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800348a:	230c      	movs	r3, #12
 800348c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800348e:	2303      	movs	r3, #3
 8003490:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4804      	ldr	r0, [pc, #16]	@ (80034b0 <uart_gpio_analog+0x54>)
 80034a0:	f002 fbb6 	bl	8005c10 <HAL_GPIO_Init>
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40020400 	.word	0x40020400
 80034b0:	40020000 	.word	0x40020000

080034b4 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80034c8:	2330      	movs	r3, #48	@ 0x30
 80034ca:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034cc:	2303      	movs	r3, #3
 80034ce:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4803      	ldr	r0, [pc, #12]	@ (80034ec <timer_gpio_analog+0x38>)
 80034de:	f002 fb97 	bl	8005c10 <HAL_GPIO_Init>

}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40020400 	.word	0x40020400

080034f0 <gpio_disable>:



void gpio_disable()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034f6:	f7ff ff93 	bl	8003420 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034fa:	f7ff ffaf 	bl	800345c <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 80034fe:	f7ff ffd9 	bl	80034b4 <timer_gpio_analog>
	 gpio_analog();
 8003502:	f7ff fee9 	bl	80032d8 <gpio_analog>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003514:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003518:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351a:	2303      	movs	r3, #3
 800351c:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	4619      	mov	r1, r3
 800352a:	480a      	ldr	r0, [pc, #40]	@ (8003554 <gpio_disable+0x64>)
 800352c:	f002 fb70 	bl	8005c10 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003530:	2304      	movs	r3, #4
 8003532:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003534:	2303      	movs	r3, #3
 8003536:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	4619      	mov	r1, r3
 8003544:	4804      	ldr	r0, [pc, #16]	@ (8003558 <gpio_disable+0x68>)
 8003546:	f002 fb63 	bl	8005c10 <HAL_GPIO_Init>

}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40020800 	.word	0x40020800
 8003558:	40020c00 	.word	0x40020c00

0800355c <gpio_enable>:
void gpio_enable()
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8003562:	f7ff fdc1 	bl	80030e8 <MX_GPIO_Init>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003574:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003578:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003586:	230c      	movs	r3, #12
 8003588:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	4619      	mov	r1, r3
 800358e:	480b      	ldr	r0, [pc, #44]	@ (80035bc <gpio_enable+0x60>)
 8003590:	f002 fb3e 	bl	8005c10 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003594:	2304      	movs	r3, #4
 8003596:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80035a4:	230c      	movs	r3, #12
 80035a6:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4804      	ldr	r0, [pc, #16]	@ (80035c0 <gpio_enable+0x64>)
 80035ae:	f002 fb2f 	bl	8005c10 <HAL_GPIO_Init>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00

080035c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d101      	bne.n	80035da <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 80035d6:	f7fd fdab 	bl	8001130 <timer_interrupt>
}

}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80035f4:	f7fd fd80 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fe:	d118      	bne.n	8003632 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x64>)
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 8003608:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x64>)
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 8003610:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x64>)
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_GPIO_EXTI_Callback+0x68>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 800361e:	f000 fd93 	bl	8004148 <HAL_GetTick>
 8003622:	4603      	mov	r3, r0
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003626:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8003628:	f000 fd8e 	bl	8004148 <HAL_GetTick>
 800362c:	4603      	mov	r3, r0
 800362e:	4a09      	ldr	r2, [pc, #36]	@ (8003654 <HAL_GPIO_EXTI_Callback+0x70>)
 8003630:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003638:	d101      	bne.n	800363e <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 800363a:	f7fd fd93 	bl	8001164 <power_off_detect>
    }
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20001530 	.word	0x20001530
 800364c:	20001584 	.word	0x20001584
 8003650:	200017c8 	.word	0x200017c8
 8003654:	200017c0 	.word	0x200017c0

08003658 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003660:	f010 fae8 	bl	8013c34 <RtcInt>
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <HAL_UART_ErrorCallback+0x40>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d106      	bne.n	800368a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	43d2      	mvns	r2, r2
 8003686:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003688:	e009      	b.n	800369e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a08      	ldr	r2, [pc, #32]	@ (80036b0 <HAL_UART_ErrorCallback+0x44>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d105      	bne.n	800369e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	43d2      	mvns	r2, r2
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20001a74 	.word	0x20001a74
 80036b0:	20001abc 	.word	0x20001abc

080036b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036b8:	b672      	cpsid	i
}
 80036ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 80036bc:	f001 fb5f 	bl	8004d7e <HAL_NVIC_SystemReset>
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <Error_Handler+0xc>

080036c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003710 <HAL_MspInit+0x4c>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HAL_MspInit+0x4c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <HAL_MspInit+0x4c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <HAL_MspInit+0x4c>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_MspInit+0x4c>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	@ 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_ADC_MspInit+0x7c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d127      	bne.n	8003786 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003744:	6453      	str	r3, [r2, #68]	@ 0x44
 8003746:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	4b0f      	ldr	r3, [pc, #60]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	6313      	str	r3, [r2, #48]	@ 0x30
 8003762:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <HAL_ADC_MspInit+0x80>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003772:	2303      	movs	r3, #3
 8003774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4805      	ldr	r0, [pc, #20]	@ (8003798 <HAL_ADC_MspInit+0x84>)
 8003782:	f002 fa45 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	@ 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40012000 	.word	0x40012000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020800 	.word	0x40020800

0800379c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a08      	ldr	r2, [pc, #32]	@ (80037cc <HAL_ADC_MspDeInit+0x30>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d109      	bne.n	80037c2 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <HAL_ADC_MspDeInit+0x34>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <HAL_ADC_MspDeInit+0x34>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 80037ba:	2101      	movs	r1, #1
 80037bc:	4805      	ldr	r0, [pc, #20]	@ (80037d4 <HAL_ADC_MspDeInit+0x38>)
 80037be:	f002 fbab 	bl	8005f18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40012000 	.word	0x40012000
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40020800 	.word	0x40020800

080037d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_I2C_MspInit+0x84>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d12c      	bne.n	8003854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	4a17      	ldr	r2, [pc, #92]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	@ 0x30
 800380a:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8003816:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800381c:	2312      	movs	r3, #18
 800381e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003824:	2303      	movs	r3, #3
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003828:	2304      	movs	r3, #4
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4619      	mov	r1, r3
 8003832:	480c      	ldr	r0, [pc, #48]	@ (8003864 <HAL_I2C_MspInit+0x8c>)
 8003834:	f002 f9ec 	bl	8005c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	4a07      	ldr	r2, [pc, #28]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 8003842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003846:	6413      	str	r3, [r2, #64]	@ 0x40
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_I2C_MspInit+0x88>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003854:	bf00      	nop
 8003856:	3728      	adds	r7, #40	@ 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40005400 	.word	0x40005400
 8003860:	40023800 	.word	0x40023800
 8003864:	40020400 	.word	0x40020400

08003868 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0b      	ldr	r2, [pc, #44]	@ (80038a4 <HAL_I2C_MspDeInit+0x3c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10f      	bne.n	800389a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_I2C_MspDeInit+0x40>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <HAL_I2C_MspDeInit+0x40>)
 8003880:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003884:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800388a:	4808      	ldr	r0, [pc, #32]	@ (80038ac <HAL_I2C_MspDeInit+0x44>)
 800388c:	f002 fb44 	bl	8005f18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003894:	4805      	ldr	r0, [pc, #20]	@ (80038ac <HAL_I2C_MspDeInit+0x44>)
 8003896:	f002 fb3f 	bl	8005f18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40005400 	.word	0x40005400
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40020400 	.word	0x40020400

080038b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a10      	ldr	r2, [pc, #64]	@ (8003910 <HAL_RTC_MspInit+0x60>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d119      	bne.n	8003906 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038d2:	2302      	movs	r3, #2
 80038d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038da:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	4618      	mov	r0, r3
 80038e2:	f005 fd95 	bl	8009410 <HAL_RCCEx_PeriphCLKConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80038ec:	f7ff fee2 	bl	80036b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_RTC_MspInit+0x64>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2029      	movs	r0, #41	@ 0x29
 80038fc:	f001 fa07 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003900:	2029      	movs	r0, #41	@ 0x29
 8003902:	f001 fa20 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40002800 	.word	0x40002800
 8003914:	42470e3c 	.word	0x42470e3c

08003918 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	@ 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	@ (80039d8 <HAL_SD_MspInit+0xc0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d14a      	bne.n	80039d0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	4a26      	ldr	r2, [pc, #152]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003948:	6453      	str	r3, [r2, #68]	@ 0x44
 800394a:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b16      	ldr	r3, [pc, #88]	@ (80039dc <HAL_SD_MspInit+0xc4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800398e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80039a0:	230c      	movs	r3, #12
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	480d      	ldr	r0, [pc, #52]	@ (80039e0 <HAL_SD_MspInit+0xc8>)
 80039ac:	f002 f930 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039b0:	2304      	movs	r3, #4
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039bc:	2303      	movs	r3, #3
 80039be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80039c0:	230c      	movs	r3, #12
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	4806      	ldr	r0, [pc, #24]	@ (80039e4 <HAL_SD_MspInit+0xcc>)
 80039cc:	f002 f920 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80039d0:	bf00      	nop
 80039d2:	3728      	adds	r7, #40	@ 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40020800 	.word	0x40020800
 80039e4:	40020c00 	.word	0x40020c00

080039e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae0 <HAL_TIM_Base_MspInit+0xf8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d13f      	bne.n	8003a7a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	4a38      	ldr	r2, [pc, #224]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8003a16:	4b34      	ldr	r3, [pc, #208]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a18:	4a34      	ldr	r2, [pc, #208]	@ (8003aec <HAL_TIM_Base_MspInit+0x104>)
 8003a1a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003a1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a1e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003a22:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a24:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a26:	2240      	movs	r2, #64	@ 0x40
 8003a28:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003a30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a36:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a3e:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a40:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a46:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003a48:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a4e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a50:	4b25      	ldr	r3, [pc, #148]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a56:	4b24      	ldr	r3, [pc, #144]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003a5c:	4822      	ldr	r0, [pc, #136]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a5e:	f001 f99f 	bl	8004da0 <HAL_DMA_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a68:	f7ff fe24 	bl	80036b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a70:	621a      	str	r2, [r3, #32]
 8003a72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x100>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a78:	e02e      	b.n	8003ad8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d116      	bne.n	8003ab2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	4b16      	ldr	r3, [pc, #88]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a94:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	201c      	movs	r0, #28
 8003aa6:	f001 f932 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003aaa:	201c      	movs	r0, #28
 8003aac:	f001 f94b 	bl	8004d46 <HAL_NVIC_EnableIRQ>
}
 8003ab0:	e012      	b.n	8003ad8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <HAL_TIM_Base_MspInit+0x108>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10d      	bne.n	8003ad8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	4a07      	ldr	r2, [pc, #28]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xfc>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	20001a14 	.word	0x20001a14
 8003aec:	40026488 	.word	0x40026488
 8003af0:	40000400 	.word	0x40000400

08003af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <HAL_TIM_MspPostInit+0x68>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d11d      	bne.n	8003b52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	4a10      	ldr	r2, [pc, #64]	@ (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003b32:	2330      	movs	r3, #48	@ 0x30
 8003b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b42:	2302      	movs	r3, #2
 8003b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	f107 030c 	add.w	r3, r7, #12
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <HAL_TIM_MspPostInit+0x70>)
 8003b4e:	f002 f85f 	bl	8005c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b52:	bf00      	nop
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40020400 	.word	0x40020400

08003b68 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a16      	ldr	r2, [pc, #88]	@ (8003bd0 <HAL_TIM_Base_MspDeInit+0x68>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10b      	bne.n	8003b92 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f9b6 	bl	8004efc <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003b90:	e019      	b.n	8003bc6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9a:	d109      	bne.n	8003bb0 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003ba8:	201c      	movs	r0, #28
 8003baa:	f001 f8da 	bl	8004d62 <HAL_NVIC_DisableIRQ>
}
 8003bae:	e00a      	b.n	8003bc6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a08      	ldr	r2, [pc, #32]	@ (8003bd8 <HAL_TIM_Base_MspDeInit+0x70>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d105      	bne.n	8003bc6 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	4a05      	ldr	r2, [pc, #20]	@ (8003bd4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003bc0:	f023 0302 	bic.w	r3, r3, #2
 8003bc4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40000400 	.word	0x40000400

08003bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	@ 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <HAL_UART_MspInit+0x108>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d134      	bne.n	8003c68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c08:	f043 0310 	orr.w	r3, r3, #16
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a31      	ldr	r2, [pc, #196]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003c36:	23c0      	movs	r3, #192	@ 0xc0
 8003c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c42:	2303      	movs	r3, #3
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c46:	2307      	movs	r3, #7
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4826      	ldr	r0, [pc, #152]	@ (8003cec <HAL_UART_MspInit+0x110>)
 8003c52:	f001 ffdd 	bl	8005c10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2025      	movs	r0, #37	@ 0x25
 8003c5c:	f001 f857 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c60:	2025      	movs	r0, #37	@ 0x25
 8003c62:	f001 f870 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c66:	e038      	b.n	8003cda <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a20      	ldr	r2, [pc, #128]	@ (8003cf0 <HAL_UART_MspInit+0x114>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d133      	bne.n	8003cda <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c82:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ce8 <HAL_UART_MspInit+0x10c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003caa:	230c      	movs	r3, #12
 8003cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cba:	2307      	movs	r3, #7
 8003cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	480b      	ldr	r0, [pc, #44]	@ (8003cf4 <HAL_UART_MspInit+0x118>)
 8003cc6:	f001 ffa3 	bl	8005c10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2026      	movs	r0, #38	@ 0x26
 8003cd0:	f001 f81d 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cd4:	2026      	movs	r0, #38	@ 0x26
 8003cd6:	f001 f836 	bl	8004d46 <HAL_NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3730      	adds	r7, #48	@ 0x30
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a13      	ldr	r2, [pc, #76]	@ (8003d54 <HAL_UART_MspDeInit+0x5c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10d      	bne.n	8003d26 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003d0a:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <HAL_UART_MspDeInit+0x60>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	4a12      	ldr	r2, [pc, #72]	@ (8003d58 <HAL_UART_MspDeInit+0x60>)
 8003d10:	f023 0310 	bic.w	r3, r3, #16
 8003d14:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003d16:	21c0      	movs	r1, #192	@ 0xc0
 8003d18:	4810      	ldr	r0, [pc, #64]	@ (8003d5c <HAL_UART_MspDeInit+0x64>)
 8003d1a:	f002 f8fd 	bl	8005f18 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003d1e:	2025      	movs	r0, #37	@ 0x25
 8003d20:	f001 f81f 	bl	8004d62 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003d24:	e011      	b.n	8003d4a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_UART_MspDeInit+0x68>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_UART_MspDeInit+0x60>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <HAL_UART_MspDeInit+0x60>)
 8003d36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003d3c:	210c      	movs	r1, #12
 8003d3e:	4809      	ldr	r0, [pc, #36]	@ (8003d64 <HAL_UART_MspDeInit+0x6c>)
 8003d40:	f002 f8ea 	bl	8005f18 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003d44:	2026      	movs	r0, #38	@ 0x26
 8003d46:	f001 f80c 	bl	8004d62 <HAL_NVIC_DisableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40020000 	.word	0x40020000

08003d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d6c:	f001 f807 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <NMI_Handler+0x8>

08003d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d78:	f001 f801 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <HardFault_Handler+0x8>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d84:	f000 fffb 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <MemManage_Handler+0x8>

08003d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d90:	f000 fff5 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <BusFault_Handler+0x8>

08003d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d9c:	f000 ffef 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <UsageFault_Handler+0x8>

08003da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003da8:	f000 ffe9 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003db4:	f000 ffe3 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003dc0:	f000 ffdd 	bl	8004d7e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003dcc:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <SysTick_Handler+0x14>)
 8003dce:	f003 fb6b 	bl	80074a8 <HAL_IWDG_Refresh>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd2:	f000 f9a5 	bl	8004120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000188c 	.word	0x2000188c

08003de0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003de4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003de8:	f002 f9ac 	bl	8006144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <TIM2_IRQHandler+0x10>)
 8003df6:	f007 fbc9 	bl	800b58c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20001984 	.word	0x20001984

08003e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e08:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <USART1_IRQHandler+0x10>)
 8003e0a:	f008 fb4b 	bl	800c4a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20001a74 	.word	0x20001a74

08003e18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e1c:	4802      	ldr	r0, [pc, #8]	@ (8003e28 <USART2_IRQHandler+0x10>)
 8003e1e:	f008 fb41 	bl	800c4a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20001abc 	.word	0x20001abc

08003e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003e30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003e34:	f002 f986 	bl	8006144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003e40:	4802      	ldr	r0, [pc, #8]	@ (8003e4c <RTC_Alarm_IRQHandler+0x10>)
 8003e42:	f006 f833 	bl	8009eac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20001898 	.word	0x20001898

08003e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e54:	4802      	ldr	r0, [pc, #8]	@ (8003e60 <OTG_FS_IRQHandler+0x10>)
 8003e56:	f003 fcd9 	bl	800780c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20002908 	.word	0x20002908

08003e64 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e68:	4802      	ldr	r0, [pc, #8]	@ (8003e74 <DMA2_Stream5_IRQHandler+0x10>)
 8003e6a:	f001 f973 	bl	8005154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20001a14 	.word	0x20001a14

08003e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_kill>:

int _kill(int pid, int sig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e92:	f01b f885 	bl	801efa0 <__errno>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2216      	movs	r2, #22
 8003e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_exit>:

void _exit (int status)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ffe7 	bl	8003e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <_exit+0x12>

08003ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e00a      	b.n	8003ee6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ed0:	f3af 8000 	nop.w
 8003ed4:	4601      	mov	r1, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	60ba      	str	r2, [r7, #8]
 8003edc:	b2ca      	uxtb	r2, r1
 8003ede:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	dbf0      	blt.n	8003ed0 <_read+0x12>
  }

  return len;
 8003eee:	687b      	ldr	r3, [r7, #4]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e009      	b.n	8003f1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	60ba      	str	r2, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	dbf1      	blt.n	8003f0a <_write+0x12>
  }
  return len;
 8003f26:	687b      	ldr	r3, [r7, #4]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_close>:

int _close(int file)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f58:	605a      	str	r2, [r3, #4]
  return 0;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_isatty>:

int _isatty(int file)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f70:	2301      	movs	r3, #1
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	@ (8003ff4 <_sbrk+0x5c>)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <_sbrk+0x60>)
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fac:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <_sbrk+0x64>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	@ (8004000 <_sbrk+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fba:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <_sbrk+0x64>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc8:	f01a ffea 	bl	801efa0 <__errno>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	220c      	movs	r2, #12
 8003fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	e009      	b.n	8003fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fde:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a05      	ldr	r2, [pc, #20]	@ (8003ffc <_sbrk+0x64>)
 8003fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20018000 	.word	0x20018000
 8003ff8:	00000400 	.word	0x00000400
 8003ffc:	20001b04 	.word	0x20001b04
 8004000:	200037b0 	.word	0x200037b0

08004004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <SystemInit+0x20>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400e:	4a05      	ldr	r2, [pc, #20]	@ (8004024 <SystemInit+0x20>)
 8004010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800402c:	480d      	ldr	r0, [pc, #52]	@ (8004064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800402e:	490e      	ldr	r1, [pc, #56]	@ (8004068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004030:	4a0e      	ldr	r2, [pc, #56]	@ (800406c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a0b      	ldr	r2, [pc, #44]	@ (8004070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004044:	4c0b      	ldr	r4, [pc, #44]	@ (8004074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004052:	f7ff ffd7 	bl	8004004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004056:	f01a ffa9 	bl	801efac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800405a:	f7fe fd39 	bl	8002ad0 <main>
  bx  lr    
 800405e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004060:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800406c:	08025a34 	.word	0x08025a34
  ldr r2, =_sbss
 8004070:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004074:	200037b0 	.word	0x200037b0

08004078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC_IRQHandler>
	...

0800407c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <HAL_Init+0x40>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <HAL_Init+0x40>)
 8004086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_Init+0x40>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <HAL_Init+0x40>)
 8004092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004098:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_Init+0x40>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a07      	ldr	r2, [pc, #28]	@ (80040bc <HAL_Init+0x40>)
 800409e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a4:	2003      	movs	r0, #3
 80040a6:	f000 fe27 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040aa:	200f      	movs	r0, #15
 80040ac:	f000 f808 	bl	80040c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040b0:	f7ff fb08 	bl	80036c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00

080040c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_InitTick+0x54>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_InitTick+0x58>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fe51 	bl	8004d86 <HAL_SYSTICK_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e00e      	b.n	800410c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b0f      	cmp	r3, #15
 80040f2:	d80a      	bhi.n	800410a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f4:	2200      	movs	r2, #0
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	f000 fe07 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004100:	4a06      	ldr	r2, [pc, #24]	@ (800411c <HAL_InitTick+0x5c>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000010 	.word	0x20000010
 8004118:	20000018 	.word	0x20000018
 800411c:	20000014 	.word	0x20000014

08004120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_IncTick+0x20>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_IncTick+0x24>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4413      	add	r3, r2
 8004130:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <HAL_IncTick+0x24>)
 8004132:	6013      	str	r3, [r2, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000018 	.word	0x20000018
 8004144:	20001b08 	.word	0x20001b08

08004148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return uwTick;
 800414c:	4b03      	ldr	r3, [pc, #12]	@ (800415c <HAL_GetTick+0x14>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20001b08 	.word	0x20001b08

08004160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004168:	f7ff ffee 	bl	8004148 <HAL_GetTick>
 800416c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d005      	beq.n	8004186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800417a:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <HAL_Delay+0x44>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004186:	bf00      	nop
 8004188:	f7ff ffde 	bl	8004148 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d8f7      	bhi.n	8004188 <HAL_Delay+0x28>
  {
  }
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000018 	.word	0x20000018

080041a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_SuspendTick+0x1c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <HAL_SuspendTick+0x1c>)
 80041b2:	f023 0302 	bic.w	r3, r3, #2
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_ResumeTick+0x1c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_ResumeTick+0x1c>)
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_GetUIDw0+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	1fff7a10 	.word	0x1fff7a10

08004200 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_GetUIDw1+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	1fff7a14 	.word	0x1fff7a14

08004218 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800421c:	4b03      	ldr	r3, [pc, #12]	@ (800422c <HAL_GetUIDw2+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	1fff7a18 	.word	0x1fff7a18

08004230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e033      	b.n	80042ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fa60 	bl	8003714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004276:	f023 0302 	bic.w	r3, r3, #2
 800427a:	f043 0202 	orr.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 faec 	bl	8004860 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	f043 0201 	orr.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
 800429e:	e001      	b.n	80042a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e022      	b.n	8004312 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fa50 	bl	800379c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_ADC_Start+0x1a>
 8004332:	2302      	movs	r3, #2
 8004334:	e097      	b.n	8004466 <HAL_ADC_Start+0x14a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d018      	beq.n	800437e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800435c:	4b45      	ldr	r3, [pc, #276]	@ (8004474 <HAL_ADC_Start+0x158>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a45      	ldr	r2, [pc, #276]	@ (8004478 <HAL_ADC_Start+0x15c>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0c9a      	lsrs	r2, r3, #18
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004370:	e002      	b.n	8004378 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3b01      	subs	r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f9      	bne.n	8004372 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d15f      	bne.n	800444c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ca:	d106      	bne.n	80043da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d0:	f023 0206 	bic.w	r2, r3, #6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80043d8:	e002      	b.n	80043e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043e8:	4b24      	ldr	r3, [pc, #144]	@ (800447c <HAL_ADC_Start+0x160>)
 80043ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d129      	bne.n	8004464 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	e020      	b.n	8004464 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a16      	ldr	r2, [pc, #88]	@ (8004480 <HAL_ADC_Start+0x164>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d11b      	bne.n	8004464 <HAL_ADC_Start+0x148>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d114      	bne.n	8004464 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	e00b      	b.n	8004464 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	f043 0210 	orr.w	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000010 	.word	0x20000010
 8004478:	431bde83 	.word	0x431bde83
 800447c:	40012300 	.word	0x40012300
 8004480:	40012000 	.word	0x40012000

08004484 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_ADC_Stop+0x16>
 8004496:	2302      	movs	r3, #2
 8004498:	e021      	b.n	80044de <HAL_ADC_Stop+0x5a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004506:	d113      	bne.n	8004530 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004516:	d10b      	bne.n	8004530 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e063      	b.n	80045f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004530:	f7ff fe0a 	bl	8004148 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004536:	e021      	b.n	800457c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d01d      	beq.n	800457c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_ADC_PollForConversion+0x6c>
 8004546:	f7ff fdff 	bl	8004148 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d212      	bcs.n	800457c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b02      	cmp	r3, #2
 8004562:	d00b      	beq.n	800457c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f043 0204 	orr.w	r2, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e03d      	b.n	80045f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d1d6      	bne.n	8004538 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0212 	mvn.w	r2, #18
 8004592:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d123      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d11f      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d111      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x1c>
 8004634:	2302      	movs	r3, #2
 8004636:	e105      	b.n	8004844 <HAL_ADC_ConfigChannel+0x228>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b09      	cmp	r3, #9
 8004646:	d925      	bls.n	8004694 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68d9      	ldr	r1, [r3, #12]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	3b1e      	subs	r3, #30
 800465e:	2207      	movs	r2, #7
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43da      	mvns	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	400a      	ands	r2, r1
 800466c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68d9      	ldr	r1, [r3, #12]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	4618      	mov	r0, r3
 8004680:	4603      	mov	r3, r0
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4403      	add	r3, r0
 8004686:	3b1e      	subs	r3, #30
 8004688:	409a      	lsls	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e022      	b.n	80046da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6919      	ldr	r1, [r3, #16]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	2207      	movs	r2, #7
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	400a      	ands	r2, r1
 80046b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6919      	ldr	r1, [r3, #16]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4403      	add	r3, r0
 80046d0:	409a      	lsls	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d824      	bhi.n	800472c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	3b05      	subs	r3, #5
 80046f4:	221f      	movs	r2, #31
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	400a      	ands	r2, r1
 8004702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4618      	mov	r0, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	3b05      	subs	r3, #5
 800471e:	fa00 f203 	lsl.w	r2, r0, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34
 800472a:	e04c      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d824      	bhi.n	800477e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	3b23      	subs	r3, #35	@ 0x23
 8004746:	221f      	movs	r2, #31
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43da      	mvns	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	400a      	ands	r2, r1
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	4618      	mov	r0, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	3b23      	subs	r3, #35	@ 0x23
 8004770:	fa00 f203 	lsl.w	r2, r0, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
 800477c:	e023      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	3b41      	subs	r3, #65	@ 0x41
 8004790:	221f      	movs	r2, #31
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43da      	mvns	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	400a      	ands	r2, r1
 800479e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4618      	mov	r0, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	3b41      	subs	r3, #65	@ 0x41
 80047ba:	fa00 f203 	lsl.w	r2, r0, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047c6:	4b22      	ldr	r3, [pc, #136]	@ (8004850 <HAL_ADC_ConfigChannel+0x234>)
 80047c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a21      	ldr	r2, [pc, #132]	@ (8004854 <HAL_ADC_ConfigChannel+0x238>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d109      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x1cc>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b12      	cmp	r3, #18
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a19      	ldr	r2, [pc, #100]	@ (8004854 <HAL_ADC_ConfigChannel+0x238>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d123      	bne.n	800483a <HAL_ADC_ConfigChannel+0x21e>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d003      	beq.n	8004802 <HAL_ADC_ConfigChannel+0x1e6>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b11      	cmp	r3, #17
 8004800:	d11b      	bne.n	800483a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b10      	cmp	r3, #16
 8004814:	d111      	bne.n	800483a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <HAL_ADC_ConfigChannel+0x23c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a10      	ldr	r2, [pc, #64]	@ (800485c <HAL_ADC_ConfigChannel+0x240>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	0c9a      	lsrs	r2, r3, #18
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800482c:	e002      	b.n	8004834 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3b01      	subs	r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f9      	bne.n	800482e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40012300 	.word	0x40012300
 8004854:	40012000 	.word	0x40012000
 8004858:	20000010 	.word	0x20000010
 800485c:	431bde83 	.word	0x431bde83

08004860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004868:	4b79      	ldr	r3, [pc, #484]	@ (8004a50 <ADC_Init+0x1f0>)
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80048b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <ADC_Init+0x1f4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e00f      	b.n	800495e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800494c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0202 	bic.w	r2, r2, #2
 800496c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7e1b      	ldrb	r3, [r3, #24]
 8004978:	005a      	lsls	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	3b01      	subs	r3, #1
 80049b8:	035a      	lsls	r2, r3, #13
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e007      	b.n	80049d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	051a      	lsls	r2, r3, #20
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6899      	ldr	r1, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a16:	025a      	lsls	r2, r3, #9
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6899      	ldr	r1, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	029a      	lsls	r2, r3, #10
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012300 	.word	0x40012300
 8004a54:	0f000001 	.word	0x0f000001

08004a58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e031      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a78:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f023 021f 	bic.w	r2, r3, #31
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40012300 	.word	0x40012300

08004ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b00:	4013      	ands	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b16:	4a04      	ldr	r2, [pc, #16]	@ (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	60d3      	str	r3, [r2, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b30:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <__NVIC_GetPriorityGrouping+0x18>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	f003 0307 	and.w	r3, r3, #7
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	db0b      	blt.n	8004b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 021f 	and.w	r2, r3, #31
 8004b60:	4907      	ldr	r1, [pc, #28]	@ (8004b80 <__NVIC_EnableIRQ+0x38>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db12      	blt.n	8004bbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	490a      	ldr	r1, [pc, #40]	@ (8004bc8 <__NVIC_DisableIRQ+0x44>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8004baa:	3320      	adds	r3, #32
 8004bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bb0:	f3bf 8f4f 	dsb	sy
}
 8004bb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bb6:	f3bf 8f6f 	isb	sy
}
 8004bba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000e100 	.word	0xe000e100

08004bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db0a      	blt.n	8004bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	490c      	ldr	r1, [pc, #48]	@ (8004c18 <__NVIC_SetPriority+0x4c>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf4:	e00a      	b.n	8004c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4908      	ldr	r1, [pc, #32]	@ (8004c1c <__NVIC_SetPriority+0x50>)
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	3b04      	subs	r3, #4
 8004c04:	0112      	lsls	r2, r2, #4
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	440b      	add	r3, r1
 8004c0a:	761a      	strb	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000e100 	.word	0xe000e100
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f1c3 0307 	rsb	r3, r3, #7
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	bf28      	it	cs
 8004c3e:	2304      	movcs	r3, #4
 8004c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3304      	adds	r3, #4
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d902      	bls.n	8004c50 <NVIC_EncodePriority+0x30>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3b03      	subs	r3, #3
 8004c4e:	e000      	b.n	8004c52 <NVIC_EncodePriority+0x32>
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	401a      	ands	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c68:	f04f 31ff 	mov.w	r1, #4294967295
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	43d9      	mvns	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	4313      	orrs	r3, r2
         );
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	@ 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c8c:	f3bf 8f4f 	dsb	sy
}
 8004c90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <__NVIC_SystemReset+0x24>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c9a:	4904      	ldr	r1, [pc, #16]	@ (8004cac <__NVIC_SystemReset+0x24>)
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <__NVIC_SystemReset+0x28>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca2:	f3bf 8f4f 	dsb	sy
}
 8004ca6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <__NVIC_SystemReset+0x20>
 8004cac:	e000ed00 	.word	0xe000ed00
 8004cb0:	05fa0004 	.word	0x05fa0004

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff78 	bl	8004bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff feef 	bl	8004ae4 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d20:	f7ff ff04 	bl	8004b2c <__NVIC_GetPriorityGrouping>
 8004d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7ff ff78 	bl	8004c20 <NVIC_EncodePriority>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff47 	bl	8004bcc <__NVIC_SetPriority>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fef7 	bl	8004b48 <__NVIC_EnableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4603      	mov	r3, r0
 8004d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff07 	bl	8004b84 <__NVIC_DisableIRQ>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d82:	f7ff ff81 	bl	8004c88 <__NVIC_SystemReset>

08004d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff90 	bl	8004cb4 <SysTick_Config>
 8004d94:	4603      	mov	r3, r0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004dac:	f7ff f9cc 	bl	8004148 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e099      	b.n	8004ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ddc:	e00f      	b.n	8004dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dde:	f7ff f9b3 	bl	8004148 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d908      	bls.n	8004dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2203      	movs	r2, #3
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e078      	b.n	8004ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e8      	bne.n	8004dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4b38      	ldr	r3, [pc, #224]	@ (8004ef8 <HAL_DMA_Init+0x158>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d107      	bne.n	8004e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	4313      	orrs	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d117      	bne.n	8004ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb43 	bl	8005530 <DMA_CheckFifoParam>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2240      	movs	r2, #64	@ 0x40
 8004eb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e016      	b.n	8004ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fafa 	bl	80054c4 <DMA_CalcBaseAndBitshift>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed8:	223f      	movs	r2, #63	@ 0x3f
 8004eda:	409a      	lsls	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	f010803f 	.word	0xf010803f

08004efc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e050      	b.n	8004fb0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e048      	b.n	8004fb0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2221      	movs	r2, #33	@ 0x21
 8004f5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fab0 	bl	80054c4 <DMA_CalcBaseAndBitshift>
 8004f64:	4603      	mov	r3, r0
 8004f66:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f90:	223f      	movs	r2, #63	@ 0x3f
 8004f92:	409a      	lsls	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_DMA_Start+0x20>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e026      	b.n	8005026 <HAL_DMA_Start+0x6e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d115      	bne.n	8005018 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fa31 	bl	8005468 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e005      	b.n	8005024 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005020:	2302      	movs	r3, #2
 8005022:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800503c:	f7ff f884 	bl	8004148 <HAL_GetTick>
 8005040:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d008      	beq.n	8005060 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	@ 0x80
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e052      	b.n	8005106 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0216 	bic.w	r2, r2, #22
 800506e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800507e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <HAL_DMA_Abort+0x62>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0208 	bic.w	r2, r2, #8
 800509e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050b0:	e013      	b.n	80050da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050b2:	f7ff f849 	bl	8004148 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d90c      	bls.n	80050da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2203      	movs	r2, #3
 80050ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e015      	b.n	8005106 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e4      	bne.n	80050b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ec:	223f      	movs	r2, #63	@ 0x3f
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d004      	beq.n	800512c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2280      	movs	r2, #128	@ 0x80
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e00c      	b.n	8005146 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2205      	movs	r2, #5
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005160:	4b8e      	ldr	r3, [pc, #568]	@ (800539c <HAL_DMA_IRQHandler+0x248>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a8e      	ldr	r2, [pc, #568]	@ (80053a0 <HAL_DMA_IRQHandler+0x24c>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0a9b      	lsrs	r3, r3, #10
 800516c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517e:	2208      	movs	r2, #8
 8005180:	409a      	lsls	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01a      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	2208      	movs	r2, #8
 80051ae:	409a      	lsls	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b8:	f043 0201 	orr.w	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	2201      	movs	r2, #1
 80051c6:	409a      	lsls	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e2:	2201      	movs	r2, #1
 80051e4:	409a      	lsls	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	f043 0202 	orr.w	r2, r3, #2
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	2204      	movs	r2, #4
 80051fc:	409a      	lsls	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d012      	beq.n	800522c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005218:	2204      	movs	r2, #4
 800521a:	409a      	lsls	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	2210      	movs	r2, #16
 8005232:	409a      	lsls	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d043      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d03c      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524e:	2210      	movs	r2, #16
 8005250:	409a      	lsls	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d018      	beq.n	8005296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d024      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
 8005282:	e01f      	b.n	80052c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	e016      	b.n	80052c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0208 	bic.w	r2, r2, #8
 80052b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	2220      	movs	r2, #32
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 808f 	beq.w	80053f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8087 	beq.w	80053f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ea:	2220      	movs	r2, #32
 80052ec:	409a      	lsls	r2, r3
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d136      	bne.n	800536c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0216 	bic.w	r2, r2, #22
 800530c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800531c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <HAL_DMA_IRQHandler+0x1da>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0208 	bic.w	r2, r2, #8
 800533c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	223f      	movs	r2, #63	@ 0x3f
 8005344:	409a      	lsls	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535e:	2b00      	cmp	r3, #0
 8005360:	d07e      	beq.n	8005460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
        }
        return;
 800536a:	e079      	b.n	8005460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538c:	2b00      	cmp	r3, #0
 800538e:	d031      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
 8005398:	e02c      	b.n	80053f4 <HAL_DMA_IRQHandler+0x2a0>
 800539a:	bf00      	nop
 800539c:	20000010 	.word	0x20000010
 80053a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d023      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
 80053b4:	e01e      	b.n	80053f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0210 	bic.w	r2, r2, #16
 80053d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d032      	beq.n	8005462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d022      	beq.n	800544e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2205      	movs	r2, #5
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	3301      	adds	r3, #1
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d307      	bcc.n	800543c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f2      	bne.n	8005420 <HAL_DMA_IRQHandler+0x2cc>
 800543a:	e000      	b.n	800543e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800543c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
 800545e:	e000      	b.n	8005462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005460:	bf00      	nop
    }
  }
}
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	d108      	bne.n	80054a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054a6:	e007      	b.n	80054b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b10      	subs	r3, #16
 80054d4:	4a14      	ldr	r2, [pc, #80]	@ (8005528 <DMA_CalcBaseAndBitshift+0x64>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054de:	4a13      	ldr	r2, [pc, #76]	@ (800552c <DMA_CalcBaseAndBitshift+0x68>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d909      	bls.n	8005506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	659a      	str	r2, [r3, #88]	@ 0x58
 8005504:	e007      	b.n	8005516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	aaaaaaab 	.word	0xaaaaaaab
 800552c:	08025108 	.word	0x08025108

08005530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11f      	bne.n	800558a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d856      	bhi.n	80055fe <DMA_CheckFifoParam+0xce>
 8005550:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <DMA_CheckFifoParam+0x28>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	08005569 	.word	0x08005569
 8005564:	080055ff 	.word	0x080055ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d046      	beq.n	8005602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005578:	e043      	b.n	8005602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005582:	d140      	bne.n	8005606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e03d      	b.n	8005606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005592:	d121      	bne.n	80055d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d837      	bhi.n	800560a <DMA_CheckFifoParam+0xda>
 800559a:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <DMA_CheckFifoParam+0x70>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055b7 	.word	0x080055b7
 80055a8:	080055b1 	.word	0x080055b1
 80055ac:	080055c9 	.word	0x080055c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      break;
 80055b4:	e030      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d025      	beq.n	800560e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e022      	b.n	800560e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055d6:	e01c      	b.n	8005612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d903      	bls.n	80055e6 <DMA_CheckFifoParam+0xb6>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d003      	beq.n	80055ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055e4:	e018      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ea:	e015      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e00b      	b.n	8005616 <DMA_CheckFifoParam+0xe6>
      break;
 80055fe:	bf00      	nop
 8005600:	e00a      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005602:	bf00      	nop
 8005604:	e008      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005606:	bf00      	nop
 8005608:	e006      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560a:	bf00      	nop
 800560c:	e004      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;   
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
    }
  } 
  
  return status; 
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800563a:	4b23      	ldr	r3, [pc, #140]	@ (80056c8 <HAL_FLASH_Program+0xa0>)
 800563c:	7e1b      	ldrb	r3, [r3, #24]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_FLASH_Program+0x1e>
 8005642:	2302      	movs	r3, #2
 8005644:	e03b      	b.n	80056be <HAL_FLASH_Program+0x96>
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <HAL_FLASH_Program+0xa0>)
 8005648:	2201      	movs	r2, #1
 800564a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800564c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005650:	f000 f87c 	bl	800574c <FLASH_WaitForLastOperation>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d12b      	bne.n	80056b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005664:	783b      	ldrb	r3, [r7, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	68b8      	ldr	r0, [r7, #8]
 800566a:	f000 f927 	bl	80058bc <FLASH_Program_Byte>
 800566e:	e016      	b.n	800569e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005676:	883b      	ldrh	r3, [r7, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	68b8      	ldr	r0, [r7, #8]
 800567c:	f000 f8fa 	bl	8005874 <FLASH_Program_HalfWord>
 8005680:	e00d      	b.n	800569e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d105      	bne.n	8005694 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4619      	mov	r1, r3
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f000 f8cf 	bl	8005830 <FLASH_Program_Word>
 8005692:	e004      	b.n	800569e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005698:	68b8      	ldr	r0, [r7, #8]
 800569a:	f000 f897 	bl	80057cc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800569e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80056a2:	f000 f853 	bl	800574c <FLASH_WaitForLastOperation>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80056aa:	4b08      	ldr	r3, [pc, #32]	@ (80056cc <HAL_FLASH_Program+0xa4>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4a07      	ldr	r2, [pc, #28]	@ (80056cc <HAL_FLASH_Program+0xa4>)
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80056b6:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <HAL_FLASH_Program+0xa0>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20001b0c 	.word	0x20001b0c
 80056cc:	40023c00 	.word	0x40023c00

080056d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056da:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <HAL_FLASH_Unlock+0x38>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da0b      	bge.n	80056fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_FLASH_Unlock+0x38>)
 80056e4:	4a09      	ldr	r2, [pc, #36]	@ (800570c <HAL_FLASH_Unlock+0x3c>)
 80056e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056e8:	4b07      	ldr	r3, [pc, #28]	@ (8005708 <HAL_FLASH_Unlock+0x38>)
 80056ea:	4a09      	ldr	r2, [pc, #36]	@ (8005710 <HAL_FLASH_Unlock+0x40>)
 80056ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_FLASH_Unlock+0x38>)
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	da01      	bge.n	80056fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056fa:	79fb      	ldrb	r3, [r7, #7]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40023c00 	.word	0x40023c00
 800570c:	45670123 	.word	0x45670123
 8005710:	cdef89ab 	.word	0xcdef89ab

08005714 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_FLASH_Lock+0x1c>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	4a04      	ldr	r2, [pc, #16]	@ (8005730 <HAL_FLASH_Lock+0x1c>)
 800571e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005722:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40023c00 	.word	0x40023c00

08005734 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_FLASH_GetError+0x14>)
 800573a:	69db      	ldr	r3, [r3, #28]
}  
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20001b0c 	.word	0x20001b0c

0800574c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005758:	4b1a      	ldr	r3, [pc, #104]	@ (80057c4 <FLASH_WaitForLastOperation+0x78>)
 800575a:	2200      	movs	r2, #0
 800575c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800575e:	f7fe fcf3 	bl	8004148 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005764:	e010      	b.n	8005788 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d00c      	beq.n	8005788 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <FLASH_WaitForLastOperation+0x38>
 8005774:	f7fe fce8 	bl	8004148 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d201      	bcs.n	8005788 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e019      	b.n	80057bc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <FLASH_WaitForLastOperation+0x7c>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e8      	bne.n	8005766 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005794:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <FLASH_WaitForLastOperation+0x7c>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057a0:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <FLASH_WaitForLastOperation+0x7c>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80057a6:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <FLASH_WaitForLastOperation+0x7c>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80057b2:	f000 f8a5 	bl	8005900 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
  
}  
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20001b0c 	.word	0x20001b0c
 80057c8:	40023c00 	.word	0x40023c00

080057cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057d8:	4b14      	ldr	r3, [pc, #80]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	4a13      	ldr	r2, [pc, #76]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057e4:	4b11      	ldr	r3, [pc, #68]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4a10      	ldr	r2, [pc, #64]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80057ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057f0:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	4a0d      	ldr	r2, [pc, #52]	@ (800582c <FLASH_Program_DoubleWord+0x60>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005802:	f3bf 8f6f 	isb	sy
}
 8005806:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	000a      	movs	r2, r1
 8005816:	2300      	movs	r3, #0
 8005818:	68f9      	ldr	r1, [r7, #12]
 800581a:	3104      	adds	r1, #4
 800581c:	4613      	mov	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40023c00 	.word	0x40023c00

08005830 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <FLASH_Program_Word+0x40>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4a0c      	ldr	r2, [pc, #48]	@ (8005870 <FLASH_Program_Word+0x40>)
 8005840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005844:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <FLASH_Program_Word+0x40>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	4a09      	ldr	r2, [pc, #36]	@ (8005870 <FLASH_Program_Word+0x40>)
 800584c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005850:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <FLASH_Program_Word+0x40>)
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	4a06      	ldr	r2, [pc, #24]	@ (8005870 <FLASH_Program_Word+0x40>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	601a      	str	r2, [r3, #0]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40023c00 	.word	0x40023c00

08005874 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	4a0c      	ldr	r2, [pc, #48]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 8005886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800588c:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4a09      	ldr	r2, [pc, #36]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 8005892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005898:	4b07      	ldr	r3, [pc, #28]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	4a06      	ldr	r2, [pc, #24]	@ (80058b8 <FLASH_Program_HalfWord+0x44>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	801a      	strh	r2, [r3, #0]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40023c00 	.word	0x40023c00

080058bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	4a0b      	ldr	r2, [pc, #44]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058d6:	4a09      	ldr	r2, [pc, #36]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058dc:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	4a06      	ldr	r2, [pc, #24]	@ (80058fc <FLASH_Program_Byte+0x40>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	701a      	strb	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40023c00 	.word	0x40023c00

08005900 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005904:	4b2f      	ldr	r3, [pc, #188]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005910:	4b2d      	ldr	r3, [pc, #180]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f043 0310 	orr.w	r3, r3, #16
 8005918:	4a2b      	ldr	r2, [pc, #172]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 800591a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800591c:	4b29      	ldr	r3, [pc, #164]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 800591e:	2210      	movs	r2, #16
 8005920:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005922:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800592e:	4b26      	ldr	r3, [pc, #152]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f043 0308 	orr.w	r3, r3, #8
 8005936:	4a24      	ldr	r2, [pc, #144]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005938:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800593a:	4b22      	ldr	r3, [pc, #136]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 800593c:	2220      	movs	r2, #32
 800593e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005940:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800594c:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	4a1c      	ldr	r2, [pc, #112]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005956:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005958:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800595e:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800596a:	4b17      	ldr	r3, [pc, #92]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f043 0302 	orr.w	r3, r3, #2
 8005972:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005974:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005978:	2280      	movs	r2, #128	@ 0x80
 800597a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005988:	4b0f      	ldr	r3, [pc, #60]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	4a0d      	ldr	r2, [pc, #52]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 8005992:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005994:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 8005996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800599a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800599c:	4b09      	ldr	r3, [pc, #36]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f043 0320 	orr.w	r3, r3, #32
 80059b0:	4a05      	ldr	r2, [pc, #20]	@ (80059c8 <FLASH_SetErrorCode+0xc8>)
 80059b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <FLASH_SetErrorCode+0xc4>)
 80059b6:	2202      	movs	r2, #2
 80059b8:	60da      	str	r2, [r3, #12]
  }
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40023c00 	.word	0x40023c00
 80059c8:	20001b0c 	.word	0x20001b0c

080059cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059de:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_FLASHEx_Erase+0xd8>)
 80059e0:	7e1b      	ldrb	r3, [r3, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_FLASHEx_Erase+0x1e>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e058      	b.n	8005a9c <HAL_FLASHEx_Erase+0xd0>
 80059ea:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa4 <HAL_FLASHEx_Erase+0xd8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059f4:	f7ff feaa 	bl	800574c <FLASH_WaitForLastOperation>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d148      	bne.n	8005a94 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d115      	bne.n	8005a3e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 f844 	bl	8005aac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a28:	f7ff fe90 	bl	800574c <FLASH_WaitForLastOperation>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005a30:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <HAL_FLASHEx_Erase+0xdc>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa8 <HAL_FLASHEx_Erase+0xdc>)
 8005a36:	f023 0304 	bic.w	r3, r3, #4
 8005a3a:	6113      	str	r3, [r2, #16]
 8005a3c:	e028      	b.n	8005a90 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	e01c      	b.n	8005a80 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f000 f850 	bl	8005af4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a58:	f7ff fe78 	bl	800574c <FLASH_WaitForLastOperation>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a60:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <HAL_FLASHEx_Erase+0xdc>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	4a10      	ldr	r2, [pc, #64]	@ (8005aa8 <HAL_FLASHEx_Erase+0xdc>)
 8005a66:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005a6a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	601a      	str	r2, [r3, #0]
          break;
 8005a78:	e00a      	b.n	8005a90 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3da      	bcc.n	8005a46 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a90:	f000 f878 	bl	8005b84 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a94:	4b03      	ldr	r3, [pc, #12]	@ (8005aa4 <HAL_FLASHEx_Erase+0xd8>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	761a      	strb	r2, [r3, #24]

  return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20001b0c 	.word	0x20001b0c
 8005aa8:	40023c00 	.word	0x40023c00

08005aac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6039      	str	r1, [r7, #0]
 8005ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4a0c      	ldr	r2, [pc, #48]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	4a09      	ldr	r2, [pc, #36]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	4a05      	ldr	r2, [pc, #20]	@ (8005af0 <FLASH_MassErase+0x44>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6113      	str	r3, [r2, #16]
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40023c00 	.word	0x40023c00

08005af4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e010      	b.n	8005b32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d103      	bne.n	8005b1e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e009      	b.n	8005b32 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d103      	bne.n	8005b2c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e002      	b.n	8005b32 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005b2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	490f      	ldr	r1, [pc, #60]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b56:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	4a07      	ldr	r2, [pc, #28]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4a04      	ldr	r2, [pc, #16]	@ (8005b80 <FLASH_Erase_Sector+0x8c>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	6113      	str	r3, [r2, #16]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40023c00 	.word	0x40023c00

08005b84 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b88:	4b20      	ldr	r3, [pc, #128]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d017      	beq.n	8005bc4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b94:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005b9a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005ba6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b17      	ldr	r3, [pc, #92]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bb6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bb8:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a13      	ldr	r2, [pc, #76]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bc2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005bc4:	4b11      	ldr	r3, [pc, #68]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d017      	beq.n	8005c00 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005be2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a07      	ldr	r2, [pc, #28]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bf4:	4b05      	ldr	r3, [pc, #20]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a04      	ldr	r2, [pc, #16]	@ (8005c0c <FLASH_FlushCaches+0x88>)
 8005bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bfe:	6013      	str	r3, [r2, #0]
  }
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023c00 	.word	0x40023c00

08005c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	@ 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e159      	b.n	8005ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f040 8148 	bne.w	8005eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d005      	beq.n	8005c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d130      	bne.n	8005cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 0201 	and.w	r2, r3, #1
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d017      	beq.n	8005d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a2 	beq.w	8005eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	4a56      	ldr	r2, [pc, #344]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005da6:	4b54      	ldr	r3, [pc, #336]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db2:	4a52      	ldr	r2, [pc, #328]	@ (8005efc <HAL_GPIO_Init+0x2ec>)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3302      	adds	r3, #2
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	220f      	movs	r2, #15
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a49      	ldr	r2, [pc, #292]	@ (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d019      	beq.n	8005e12 <HAL_GPIO_Init+0x202>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a48      	ldr	r2, [pc, #288]	@ (8005f04 <HAL_GPIO_Init+0x2f4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_GPIO_Init+0x1fe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <HAL_GPIO_Init+0x2f8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00d      	beq.n	8005e0a <HAL_GPIO_Init+0x1fa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a46      	ldr	r2, [pc, #280]	@ (8005f0c <HAL_GPIO_Init+0x2fc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <HAL_GPIO_Init+0x1f6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a45      	ldr	r2, [pc, #276]	@ (8005f10 <HAL_GPIO_Init+0x300>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_GPIO_Init+0x1f2>
 8005dfe:	2304      	movs	r3, #4
 8005e00:	e008      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e02:	2307      	movs	r3, #7
 8005e04:	e006      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e06:	2303      	movs	r3, #3
 8005e08:	e004      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e002      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e12:	2300      	movs	r3, #0
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	f002 0203 	and.w	r2, r2, #3
 8005e1a:	0092      	lsls	r2, r2, #2
 8005e1c:	4093      	lsls	r3, r2
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e24:	4935      	ldr	r1, [pc, #212]	@ (8005efc <HAL_GPIO_Init+0x2ec>)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e56:	4a2f      	ldr	r2, [pc, #188]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e80:	4a24      	ldr	r2, [pc, #144]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e86:	4b23      	ldr	r3, [pc, #140]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eb0:	4b18      	ldr	r3, [pc, #96]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	3301      	adds	r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	f67f aea2 	bls.w	8005c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	3724      	adds	r7, #36	@ 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40013800 	.word	0x40013800
 8005f00:	40020000 	.word	0x40020000
 8005f04:	40020400 	.word	0x40020400
 8005f08:	40020800 	.word	0x40020800
 8005f0c:	40020c00 	.word	0x40020c00
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40013c00 	.word	0x40013c00

08005f18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e0bb      	b.n	80060ac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f34:	2201      	movs	r2, #1
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f040 80ab 	bne.w	80060a6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f50:	4a5c      	ldr	r2, [pc, #368]	@ (80060c4 <HAL_GPIO_DeInit+0x1ac>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	3302      	adds	r3, #2
 8005f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a54      	ldr	r2, [pc, #336]	@ (80060c8 <HAL_GPIO_DeInit+0x1b0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_DeInit+0x96>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a53      	ldr	r2, [pc, #332]	@ (80060cc <HAL_GPIO_DeInit+0x1b4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_DeInit+0x92>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a52      	ldr	r2, [pc, #328]	@ (80060d0 <HAL_GPIO_DeInit+0x1b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_DeInit+0x8e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a51      	ldr	r2, [pc, #324]	@ (80060d4 <HAL_GPIO_DeInit+0x1bc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_DeInit+0x8a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a50      	ldr	r2, [pc, #320]	@ (80060d8 <HAL_GPIO_DeInit+0x1c0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_DeInit+0x86>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d132      	bne.n	8006026 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fc0:	4b46      	ldr	r3, [pc, #280]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	4944      	ldr	r1, [pc, #272]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fce:	4b43      	ldr	r3, [pc, #268]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	4941      	ldr	r1, [pc, #260]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	493d      	ldr	r1, [pc, #244]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fea:	4b3c      	ldr	r3, [pc, #240]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	493a      	ldr	r1, [pc, #232]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006008:	4a2e      	ldr	r2, [pc, #184]	@ (80060c4 <HAL_GPIO_DeInit+0x1ac>)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	089b      	lsrs	r3, r3, #2
 800600e:	3302      	adds	r3, #2
 8006010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	43da      	mvns	r2, r3
 8006018:	482a      	ldr	r0, [pc, #168]	@ (80060c4 <HAL_GPIO_DeInit+0x1ac>)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	400a      	ands	r2, r1
 8006020:	3302      	adds	r3, #2
 8006022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2103      	movs	r1, #3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	08d2      	lsrs	r2, r2, #3
 800605c:	4019      	ands	r1, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3208      	adds	r2, #8
 8006062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2103      	movs	r1, #3
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	2101      	movs	r1, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2103      	movs	r1, #3
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	f67f af40 	bls.w	8005f34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40013c00 	.word	0x40013c00

080060e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e001      	b.n	8006102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
 800611c:	4613      	mov	r3, r2
 800611e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006120:	787b      	ldrb	r3, [r7, #1]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800612c:	e003      	b.n	8006136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	041a      	lsls	r2, r3, #16
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	619a      	str	r2, [r3, #24]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800614e:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800615a:	4a05      	ldr	r2, [pc, #20]	@ (8006170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fa3e 	bl	80035e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40013c00 	.word	0x40013c00

08006174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e12b      	b.n	80063de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fd fb1c 	bl	80037d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	@ 0x24
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061d8:	f003 f8f2 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 80061dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4a81      	ldr	r2, [pc, #516]	@ (80063e8 <HAL_I2C_Init+0x274>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d807      	bhi.n	80061f8 <HAL_I2C_Init+0x84>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4a80      	ldr	r2, [pc, #512]	@ (80063ec <HAL_I2C_Init+0x278>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bf94      	ite	ls
 80061f0:	2301      	movls	r3, #1
 80061f2:	2300      	movhi	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e006      	b.n	8006206 <HAL_I2C_Init+0x92>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4a7d      	ldr	r2, [pc, #500]	@ (80063f0 <HAL_I2C_Init+0x27c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	bf94      	ite	ls
 8006200:	2301      	movls	r3, #1
 8006202:	2300      	movhi	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e0e7      	b.n	80063de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a78      	ldr	r2, [pc, #480]	@ (80063f4 <HAL_I2C_Init+0x280>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0c9b      	lsrs	r3, r3, #18
 8006218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a6a      	ldr	r2, [pc, #424]	@ (80063e8 <HAL_I2C_Init+0x274>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d802      	bhi.n	8006248 <HAL_I2C_Init+0xd4>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	3301      	adds	r3, #1
 8006246:	e009      	b.n	800625c <HAL_I2C_Init+0xe8>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	4a69      	ldr	r2, [pc, #420]	@ (80063f8 <HAL_I2C_Init+0x284>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	099b      	lsrs	r3, r3, #6
 800625a:	3301      	adds	r3, #1
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	430b      	orrs	r3, r1
 8006262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800626e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	495c      	ldr	r1, [pc, #368]	@ (80063e8 <HAL_I2C_Init+0x274>)
 8006278:	428b      	cmp	r3, r1
 800627a:	d819      	bhi.n	80062b0 <HAL_I2C_Init+0x13c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1e59      	subs	r1, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	fbb1 f3f3 	udiv	r3, r1, r3
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006290:	400b      	ands	r3, r1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_I2C_Init+0x138>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1e59      	subs	r1, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062a4:	3301      	adds	r3, #1
 80062a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062aa:	e051      	b.n	8006350 <HAL_I2C_Init+0x1dc>
 80062ac:	2304      	movs	r3, #4
 80062ae:	e04f      	b.n	8006350 <HAL_I2C_Init+0x1dc>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d111      	bne.n	80062dc <HAL_I2C_Init+0x168>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1e58      	subs	r0, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	440b      	add	r3, r1
 80062c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e012      	b.n	8006302 <HAL_I2C_Init+0x18e>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1e58      	subs	r0, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6859      	ldr	r1, [r3, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	0099      	lsls	r1, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f2:	3301      	adds	r3, #1
 80062f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_Init+0x196>
 8006306:	2301      	movs	r3, #1
 8006308:	e022      	b.n	8006350 <HAL_I2C_Init+0x1dc>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10e      	bne.n	8006330 <HAL_I2C_Init+0x1bc>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1e58      	subs	r0, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6859      	ldr	r1, [r3, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	440b      	add	r3, r1
 8006320:	fbb0 f3f3 	udiv	r3, r0, r3
 8006324:	3301      	adds	r3, #1
 8006326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632e:	e00f      	b.n	8006350 <HAL_I2C_Init+0x1dc>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1e58      	subs	r0, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	0099      	lsls	r1, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	fbb0 f3f3 	udiv	r3, r0, r3
 8006346:	3301      	adds	r3, #1
 8006348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	6809      	ldr	r1, [r1, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69da      	ldr	r2, [r3, #28]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800637e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6911      	ldr	r1, [r2, #16]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	4311      	orrs	r1, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	430b      	orrs	r3, r1
 8006392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	000186a0 	.word	0x000186a0
 80063ec:	001e847f 	.word	0x001e847f
 80063f0:	003d08ff 	.word	0x003d08ff
 80063f4:	431bde83 	.word	0x431bde83
 80063f8:	10624dd3 	.word	0x10624dd3

080063fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e021      	b.n	8006452 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	@ 0x24
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fd fa1e 	bl	8003868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	461a      	mov	r2, r3
 8006468:	460b      	mov	r3, r1
 800646a:	817b      	strh	r3, [r7, #10]
 800646c:	4613      	mov	r3, r2
 800646e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006470:	f7fd fe6a 	bl	8004148 <HAL_GetTick>
 8006474:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b20      	cmp	r3, #32
 8006480:	f040 80e0 	bne.w	8006644 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	2319      	movs	r3, #25
 800648a:	2201      	movs	r2, #1
 800648c:	4970      	ldr	r1, [pc, #448]	@ (8006650 <HAL_I2C_Master_Transmit+0x1f4>)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fd92 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
 800649c:	e0d3      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_I2C_Master_Transmit+0x50>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e0cc      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d007      	beq.n	80064d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2221      	movs	r2, #33	@ 0x21
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2210      	movs	r2, #16
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	893a      	ldrh	r2, [r7, #8]
 8006502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a50      	ldr	r2, [pc, #320]	@ (8006654 <HAL_I2C_Master_Transmit+0x1f8>)
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006514:	8979      	ldrh	r1, [r7, #10]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fbfc 	bl	8006d18 <I2C_MasterRequestWrite>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e08d      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006540:	e066      	b.n	8006610 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	6a39      	ldr	r1, [r7, #32]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fe50 	bl	80071ec <I2C_WaitOnTXEFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	2b04      	cmp	r3, #4
 8006558:	d107      	bne.n	800656a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e06b      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d11b      	bne.n	80065e4 <HAL_I2C_Master_Transmit+0x188>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d017      	beq.n	80065e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	6a39      	ldr	r1, [r7, #32]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fe47 	bl	800727c <I2C_WaitOnBTFFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00d      	beq.n	8006610 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d107      	bne.n	800660c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e01a      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d194      	bne.n	8006542 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	00100002 	.word	0x00100002
 8006654:	ffff0000 	.word	0xffff0000

08006658 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	@ 0x30
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	461a      	mov	r2, r3
 8006664:	460b      	mov	r3, r1
 8006666:	817b      	strh	r3, [r7, #10]
 8006668:	4613      	mov	r3, r2
 800666a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800666c:	f7fd fd6c 	bl	8004148 <HAL_GetTick>
 8006670:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b20      	cmp	r3, #32
 800667c:	f040 8217 	bne.w	8006aae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2319      	movs	r3, #25
 8006686:	2201      	movs	r2, #1
 8006688:	497c      	ldr	r1, [pc, #496]	@ (800687c <HAL_I2C_Master_Receive+0x224>)
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fc94 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
 8006698:	e20a      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_I2C_Master_Receive+0x50>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e203      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d007      	beq.n	80066ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0201 	orr.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2222      	movs	r2, #34	@ 0x22
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2210      	movs	r2, #16
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	893a      	ldrh	r2, [r7, #8]
 80066fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4a5c      	ldr	r2, [pc, #368]	@ (8006880 <HAL_I2C_Master_Receive+0x228>)
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006710:	8979      	ldrh	r1, [r7, #10]
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fb80 	bl	8006e1c <I2C_MasterRequestRead>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e1c4      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672a:	2b00      	cmp	r3, #0
 800672c:	d113      	bne.n	8006756 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e198      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675a:	2b01      	cmp	r3, #1
 800675c:	d11b      	bne.n	8006796 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800676c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e178      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679a:	2b02      	cmp	r3, #2
 800679c:	d11b      	bne.n	80067d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067be:	2300      	movs	r3, #0
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	e158      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067fc:	e144      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006802:	2b03      	cmp	r3, #3
 8006804:	f200 80f1 	bhi.w	80069ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680c:	2b01      	cmp	r3, #1
 800680e:	d123      	bne.n	8006858 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fd79 	bl	800730c <I2C_WaitOnRXNEFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e145      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006856:	e117      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685c:	2b02      	cmp	r3, #2
 800685e:	d14e      	bne.n	80068fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	4906      	ldr	r1, [pc, #24]	@ (8006884 <HAL_I2C_Master_Receive+0x22c>)
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fba4 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e11a      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
 800687a:	bf00      	nop
 800687c:	00100002 	.word	0x00100002
 8006880:	ffff0000 	.word	0xffff0000
 8006884:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068fc:	e0c4      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2200      	movs	r2, #0
 8006906:	496c      	ldr	r1, [pc, #432]	@ (8006ab8 <HAL_I2C_Master_Receive+0x460>)
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fb55 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0cb      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	2200      	movs	r2, #0
 8006962:	4955      	ldr	r1, [pc, #340]	@ (8006ab8 <HAL_I2C_Master_Receive+0x460>)
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fb27 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e09d      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069e8:	e04e      	b.n	8006a88 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fc8c 	bl	800730c <I2C_WaitOnRXNEFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e058      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d124      	bne.n	8006a88 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d107      	bne.n	8006a56 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a54:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f aeb6 	bne.w	80067fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	@ 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	00010004 	.word	0x00010004

08006abc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	@ 0x28
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006acc:	f7fd fb3c 	bl	8004148 <HAL_GetTick>
 8006ad0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	f040 8111 	bne.w	8006d06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2319      	movs	r3, #25
 8006aea:	2201      	movs	r2, #1
 8006aec:	4988      	ldr	r1, [pc, #544]	@ (8006d10 <HAL_I2C_IsDeviceReady+0x254>)
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa62 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
 8006afc:	e104      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_I2C_IsDeviceReady+0x50>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e0fd      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d007      	beq.n	8006b32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2224      	movs	r2, #36	@ 0x24
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a70      	ldr	r2, [pc, #448]	@ (8006d14 <HAL_I2C_IsDeviceReady+0x258>)
 8006b54:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa20 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8c:	d103      	bne.n	8006b96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b94:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e0b6      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ba8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006baa:	f7fd facd 	bl	8004148 <HAL_GetTick>
 8006bae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006bde:	e025      	b.n	8006c2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006be0:	f7fd fab2 	bl	8004148 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <HAL_I2C_IsDeviceReady+0x13a>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	22a0      	movs	r2, #160	@ 0xa0
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c36:	d005      	beq.n	8006c44 <HAL_I2C_IsDeviceReady+0x188>
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <HAL_I2C_IsDeviceReady+0x188>
 8006c3e:	7dbb      	ldrb	r3, [r7, #22]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0cd      	beq.n	8006be0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d129      	bne.n	8006cae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2319      	movs	r3, #25
 8006c86:	2201      	movs	r2, #1
 8006c88:	4921      	ldr	r1, [pc, #132]	@ (8006d10 <HAL_I2C_IsDeviceReady+0x254>)
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f994 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e036      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e02c      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cbc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cc6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2319      	movs	r3, #25
 8006cce:	2201      	movs	r2, #1
 8006cd0:	490f      	ldr	r1, [pc, #60]	@ (8006d10 <HAL_I2C_IsDeviceReady+0x254>)
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f970 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e012      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	f4ff af32 	bcc.w	8006b56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	00100002 	.word	0x00100002
 8006d14:	ffff0000 	.word	0xffff0000

08006d18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	460b      	mov	r3, r1
 8006d26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d006      	beq.n	8006d42 <I2C_MasterRequestWrite+0x2a>
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d003      	beq.n	8006d42 <I2C_MasterRequestWrite+0x2a>
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d40:	d108      	bne.n	8006d54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e00b      	b.n	8006d6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d58:	2b12      	cmp	r3, #18
 8006d5a:	d107      	bne.n	8006d6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f91d 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00d      	beq.n	8006da0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d92:	d103      	bne.n	8006d9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e035      	b.n	8006e0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da8:	d108      	bne.n	8006dbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006daa:	897b      	ldrh	r3, [r7, #10]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006db8:	611a      	str	r2, [r3, #16]
 8006dba:	e01b      	b.n	8006df4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006dbc:	897b      	ldrh	r3, [r7, #10]
 8006dbe:	11db      	asrs	r3, r3, #7
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0306 	and.w	r3, r3, #6
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f063 030f 	orn	r3, r3, #15
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	490e      	ldr	r1, [pc, #56]	@ (8006e14 <I2C_MasterRequestWrite+0xfc>)
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f966 	bl	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e010      	b.n	8006e0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dea:	897b      	ldrh	r3, [r7, #10]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4907      	ldr	r1, [pc, #28]	@ (8006e18 <I2C_MasterRequestWrite+0x100>)
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f956 	bl	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	00010008 	.word	0x00010008
 8006e18:	00010002 	.word	0x00010002

08006e1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d006      	beq.n	8006e56 <I2C_MasterRequestRead+0x3a>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d003      	beq.n	8006e56 <I2C_MasterRequestRead+0x3a>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e54:	d108      	bne.n	8006e68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e00b      	b.n	8006e80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6c:	2b11      	cmp	r3, #17
 8006e6e:	d107      	bne.n	8006e80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f893 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea6:	d103      	bne.n	8006eb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e079      	b.n	8006fa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebc:	d108      	bne.n	8006ed0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ebe:	897b      	ldrh	r3, [r7, #10]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f043 0301 	orr.w	r3, r3, #1
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	611a      	str	r2, [r3, #16]
 8006ece:	e05f      	b.n	8006f90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ed0:	897b      	ldrh	r3, [r7, #10]
 8006ed2:	11db      	asrs	r3, r3, #7
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f003 0306 	and.w	r3, r3, #6
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f063 030f 	orn	r3, r3, #15
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4930      	ldr	r1, [pc, #192]	@ (8006fb0 <I2C_MasterRequestRead+0x194>)
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f8dc 	bl	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e054      	b.n	8006fa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006efe:	897b      	ldrh	r3, [r7, #10]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	4929      	ldr	r1, [pc, #164]	@ (8006fb4 <I2C_MasterRequestRead+0x198>)
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f8cc 	bl	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e044      	b.n	8006fa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f831 	bl	8006fb8 <I2C_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00d      	beq.n	8006f78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6a:	d103      	bne.n	8006f74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f72:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e017      	b.n	8006fa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	11db      	asrs	r3, r3, #7
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0306 	and.w	r3, r3, #6
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f063 030e 	orn	r3, r3, #14
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4907      	ldr	r1, [pc, #28]	@ (8006fb4 <I2C_MasterRequestRead+0x198>)
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f888 	bl	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	00010008 	.word	0x00010008
 8006fb4:	00010002 	.word	0x00010002

08006fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fc8:	e048      	b.n	800705c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d044      	beq.n	800705c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fd f8b9 	bl	8004148 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d139      	bne.n	800705c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10d      	bne.n	800700e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	43da      	mvns	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	e00c      	b.n	8007028 <I2C_WaitOnFlagUntilTimeout+0x70>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	43da      	mvns	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4013      	ands	r3, r2
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	429a      	cmp	r2, r3
 800702c:	d116      	bne.n	800705c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e023      	b.n	80070a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10d      	bne.n	8007082 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	43da      	mvns	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4013      	ands	r3, r2
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	e00c      	b.n	800709c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	43da      	mvns	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4013      	ands	r3, r2
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf0c      	ite	eq
 8007094:	2301      	moveq	r3, #1
 8007096:	2300      	movne	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d093      	beq.n	8006fca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070ba:	e071      	b.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ca:	d123      	bne.n	8007114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e067      	b.n	80071e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d041      	beq.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711c:	f7fd f814 	bl	8004148 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d136      	bne.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d10c      	bne.n	8007156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	43da      	mvns	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e00b      	b.n	800716e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	43da      	mvns	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d016      	beq.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e021      	b.n	80071e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10c      	bne.n	80071c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	43da      	mvns	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4013      	ands	r3, r2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bf14      	ite	ne
 80071bc:	2301      	movne	r3, #1
 80071be:	2300      	moveq	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e00b      	b.n	80071dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f47f af6d 	bne.w	80070bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071f8:	e034      	b.n	8007264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f8e3 	bl	80073c6 <I2C_IsAcknowledgeFailed>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e034      	b.n	8007274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d028      	beq.n	8007264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007212:	f7fc ff99 	bl	8004148 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11d      	bne.n	8007264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007232:	2b80      	cmp	r3, #128	@ 0x80
 8007234:	d016      	beq.n	8007264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	f043 0220 	orr.w	r2, r3, #32
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e007      	b.n	8007274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726e:	2b80      	cmp	r3, #128	@ 0x80
 8007270:	d1c3      	bne.n	80071fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007288:	e034      	b.n	80072f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f89b 	bl	80073c6 <I2C_IsAcknowledgeFailed>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e034      	b.n	8007304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d028      	beq.n	80072f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a2:	f7fc ff51 	bl	8004148 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d11d      	bne.n	80072f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d016      	beq.n	80072f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e0:	f043 0220 	orr.w	r2, r3, #32
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e007      	b.n	8007304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d1c3      	bne.n	800728a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007318:	e049      	b.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b10      	cmp	r3, #16
 8007326:	d119      	bne.n	800735c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0210 	mvn.w	r2, #16
 8007330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e030      	b.n	80073be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735c:	f7fc fef4 	bl	8004148 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	429a      	cmp	r2, r3
 800736a:	d302      	bcc.n	8007372 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11d      	bne.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737c:	2b40      	cmp	r3, #64	@ 0x40
 800737e:	d016      	beq.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	f043 0220 	orr.w	r2, r3, #32
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e007      	b.n	80073be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b40      	cmp	r3, #64	@ 0x40
 80073ba:	d1ae      	bne.n	800731a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073dc:	d11b      	bne.n	8007416 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	f043 0204 	orr.w	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e034      	b.n	80074a0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800743e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007448:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6852      	ldr	r2, [r2, #4]
 8007452:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6892      	ldr	r2, [r2, #8]
 800745c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800745e:	f7fc fe73 	bl	8004148 <HAL_GetTick>
 8007462:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007464:	e00f      	b.n	8007486 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007466:	f7fc fe6f 	bl	8004148 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b31      	cmp	r3, #49	@ 0x31
 8007472:	d908      	bls.n	8007486 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e00c      	b.n	80074a0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e8      	bne.n	8007466 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800749c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80074b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e101      	b.n	80076de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f015 fe65 	bl	801d1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2203      	movs	r2, #3
 80074fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007508:	d102      	bne.n	8007510 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f006 fd4e 	bl	800dfb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7c1a      	ldrb	r2, [r3, #16]
 8007522:	f88d 2000 	strb.w	r2, [sp]
 8007526:	3304      	adds	r3, #4
 8007528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800752a:	f006 fc2d 	bl	800dd88 <USB_CoreInit>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0ce      	b.n	80076de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f006 fd46 	bl	800dfd8 <USB_SetCurrentMode>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e0bf      	b.n	80076de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	e04a      	b.n	80075fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3315      	adds	r3, #21
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007578:	7bfa      	ldrb	r2, [r7, #15]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	3314      	adds	r3, #20
 8007588:	7bfa      	ldrb	r2, [r7, #15]
 800758a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800758c:	7bfa      	ldrb	r2, [r7, #15]
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	b298      	uxth	r0, r3
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	332e      	adds	r3, #46	@ 0x2e
 80075a0:	4602      	mov	r2, r0
 80075a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	3318      	adds	r3, #24
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	331c      	adds	r3, #28
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075cc:	7bfa      	ldrb	r2, [r7, #15]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	3320      	adds	r3, #32
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075e0:	7bfa      	ldrb	r2, [r7, #15]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	3324      	adds	r3, #36	@ 0x24
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	3301      	adds	r3, #1
 80075f8:	73fb      	strb	r3, [r7, #15]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	7bfa      	ldrb	r2, [r7, #15]
 8007600:	429a      	cmp	r2, r3
 8007602:	d3af      	bcc.n	8007564 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e044      	b.n	8007694 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800760a:	7bfa      	ldrb	r2, [r7, #15]
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007620:	7bfa      	ldrb	r2, [r7, #15]
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007632:	7bfa      	ldrb	r2, [r7, #15]
 8007634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007636:	7bfa      	ldrb	r2, [r7, #15]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	440b      	add	r3, r1
 8007644:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007662:	7bfa      	ldrb	r2, [r7, #15]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007678:	7bfa      	ldrb	r2, [r7, #15]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3b5      	bcc.n	800760a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7c1a      	ldrb	r2, [r3, #16]
 80076a6:	f88d 2000 	strb.w	r2, [sp]
 80076aa:	3304      	adds	r3, #4
 80076ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ae:	f006 fcdf 	bl	800e070 <USB_DevInit>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e00c      	b.n	80076de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f007 fd72 	bl	800f1c0 <USB_DevDisconnect>

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e015      	b.n	8007724 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2203      	movs	r2, #3
 80076fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f007 fcc5 	bl	800f094 <USB_StopDevice>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e007      	b.n	8007724 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f015 fda9 	bl	801d26c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_PCD_Start+0x1c>
 8007744:	2302      	movs	r3, #2
 8007746:	e022      	b.n	800778e <HAL_PCD_Start+0x62>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007760:	2b01      	cmp	r3, #1
 8007762:	d105      	bne.n	8007770 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f006 fc0d 	bl	800df94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f007 fcfd 	bl	800f17e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_PCD_Stop+0x1c>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e028      	b.n	8007804 <HAL_PCD_Stop+0x6e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f006 fbf9 	bl	800dfb6 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f007 fcf9 	bl	800f1c0 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2110      	movs	r1, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	f006 fdaf 	bl	800e338 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d105      	bne.n	80077fa <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b08d      	sub	sp, #52	@ 0x34
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f007 fd80 	bl	800f328 <USB_GetMode>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	f040 848c 	bne.w	8008148 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f007 fce4 	bl	800f202 <USB_ReadInterrupts>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8482 	beq.w	8008146 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f007 fcd1 	bl	800f202 <USB_ReadInterrupts>
 8007860:	4603      	mov	r3, r0
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b02      	cmp	r3, #2
 8007868:	d107      	bne.n	800787a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695a      	ldr	r2, [r3, #20]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f002 0202 	and.w	r2, r2, #2
 8007878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f007 fcbf 	bl	800f202 <USB_ReadInterrupts>
 8007884:	4603      	mov	r3, r0
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d161      	bne.n	8007952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0210 	bic.w	r2, r2, #16
 800789c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f003 020f 	and.w	r2, r3, #15
 80078aa:	4613      	mov	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4413      	add	r3, r2
 80078ba:	3304      	adds	r3, #4
 80078bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	0c5b      	lsrs	r3, r3, #17
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d124      	bne.n	8007914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d035      	beq.n	8007942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	6a38      	ldr	r0, [r7, #32]
 80078ea:	f007 faa7 	bl	800ee3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	091b      	lsrs	r3, r3, #4
 80078f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078fa:	441a      	add	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800790c:	441a      	add	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	615a      	str	r2, [r3, #20]
 8007912:	e016      	b.n	8007942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	0c5b      	lsrs	r3, r3, #17
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	2b06      	cmp	r3, #6
 800791e:	d110      	bne.n	8007942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007926:	2208      	movs	r2, #8
 8007928:	4619      	mov	r1, r3
 800792a:	6a38      	ldr	r0, [r7, #32]
 800792c:	f007 fa86 	bl	800ee3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	091b      	lsrs	r3, r3, #4
 8007938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800793c:	441a      	add	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0210 	orr.w	r2, r2, #16
 8007950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f007 fc53 	bl	800f202 <USB_ReadInterrupts>
 800795c:	4603      	mov	r3, r0
 800795e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007962:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007966:	f040 80a7 	bne.w	8007ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f007 fc58 	bl	800f228 <USB_ReadDevAllOutEpInterrupt>
 8007978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800797a:	e099      	b.n	8007ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 808e 	beq.w	8007aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f007 fc7c 	bl	800f290 <USB_ReadDevOutEPInterrupt>
 8007998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b0:	461a      	mov	r2, r3
 80079b2:	2301      	movs	r3, #1
 80079b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80079b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fecf 	bl	800875c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00c      	beq.n	80079e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d4:	461a      	mov	r2, r3
 80079d6:	2308      	movs	r3, #8
 80079d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80079da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 ffa5 	bl	800892c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2310      	movs	r3, #16
 80079fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d030      	beq.n	8007a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a10:	2b80      	cmp	r3, #128	@ 0x80
 8007a12:	d109      	bne.n	8007a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	4413      	add	r3, r2
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	78db      	ldrb	r3, [r3, #3]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d108      	bne.n	8007a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f015 fcdc 	bl	801d410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a64:	461a      	mov	r2, r3
 8007a66:	2302      	movs	r3, #2
 8007a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	461a      	mov	r2, r3
 8007a82:	2320      	movs	r3, #32
 8007a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d009      	beq.n	8007aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f47f af62 	bne.w	800797c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f007 fba0 	bl	800f202 <USB_ReadInterrupts>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007acc:	f040 80db 	bne.w	8007c86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f007 fbc1 	bl	800f25c <USB_ReadDevAllInEpInterrupt>
 8007ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007ae0:	e0cd      	b.n	8007c7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80c2 	beq.w	8007c72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f007 fbe7 	bl	800f2cc <USB_ReadDevInEPInterrupt>
 8007afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d057      	beq.n	8007bba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	2201      	movs	r2, #1
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	43db      	mvns	r3, r3
 8007b24:	69f9      	ldr	r1, [r7, #28]
 8007b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	799b      	ldrb	r3, [r3, #6]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d132      	bne.n	8007bae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	3320      	adds	r3, #32
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5e:	4613      	mov	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4403      	add	r3, r0
 8007b68:	331c      	adds	r3, #28
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4419      	add	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4403      	add	r3, r0
 8007b7c:	3320      	adds	r3, #32
 8007b7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d113      	bne.n	8007bae <HAL_PCD_IRQHandler+0x3a2>
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3324      	adds	r3, #36	@ 0x24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d108      	bne.n	8007bae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2101      	movs	r1, #1
 8007baa:	f007 fbef 	bl	800f38c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f015 fba6 	bl	801d306 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d008      	beq.n	8007bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bec:	461a      	mov	r2, r3
 8007bee:	2310      	movs	r3, #16
 8007bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2340      	movs	r3, #64	@ 0x40
 8007c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d023      	beq.n	8007c60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c1a:	6a38      	ldr	r0, [r7, #32]
 8007c1c:	f006 fb8c 	bl	800e338 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c22:	4613      	mov	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	3310      	adds	r3, #16
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d108      	bne.n	8007c4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f015 fbf3 	bl	801d434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fce8 	bl	8008642 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	3301      	adds	r3, #1
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f47f af2e 	bne.w	8007ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f007 fab9 	bl	800f202 <USB_ReadInterrupts>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c9a:	d122      	bne.n	8007ce2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d108      	bne.n	8007ccc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fecf 	bl	8008a68 <HAL_PCDEx_LPM_Callback>
 8007cca:	e002      	b.n	8007cd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f015 fb91 	bl	801d3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695a      	ldr	r2, [r3, #20]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f007 fa8b 	bl	800f202 <USB_ReadInterrupts>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf6:	d112      	bne.n	8007d1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d102      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f015 fb4d 	bl	801d3a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007d1c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f007 fa6d 	bl	800f202 <USB_ReadInterrupts>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d32:	f040 80b7 	bne.w	8007ea4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2110      	movs	r1, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	f006 faf1 	bl	800e338 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d56:	2300      	movs	r3, #0
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d5a:	e046      	b.n	8007dea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007da2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007dc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	3301      	adds	r3, #1
 8007de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	791b      	ldrb	r3, [r3, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d3b2      	bcc.n	8007d5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7bdb      	ldrb	r3, [r3, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d016      	beq.n	8007e40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e22:	f043 030b 	orr.w	r3, r3, #11
 8007e26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e38:	f043 030b 	orr.w	r3, r3, #11
 8007e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e3e:	e015      	b.n	8007e6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e52:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e66:	f043 030b 	orr.w	r3, r3, #11
 8007e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f007 fa7c 	bl	800f38c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f007 f9aa 	bl	800f202 <USB_ReadInterrupts>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb8:	d123      	bne.n	8007f02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f007 fa40 	bl	800f344 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f006 faae 	bl	800e42a <USB_GetDevSpeed>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681c      	ldr	r4, [r3, #0]
 8007eda:	f001 fa65 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 8007ede:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f005 ffb2 	bl	800de50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f015 fa32 	bl	801d356 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f007 f97b 	bl	800f202 <USB_ReadInterrupts>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d10a      	bne.n	8007f2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f015 fa0f 	bl	801d33a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695a      	ldr	r2, [r3, #20]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f002 0208 	and.w	r2, r2, #8
 8007f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f007 f966 	bl	800f202 <USB_ReadInterrupts>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3c:	2b80      	cmp	r3, #128	@ 0x80
 8007f3e:	d123      	bne.n	8007f88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f50:	e014      	b.n	8007f7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f56:	4613      	mov	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	440b      	add	r3, r1
 8007f60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d105      	bne.n	8007f76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb08 	bl	8008586 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	3301      	adds	r3, #1
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	791b      	ldrb	r3, [r3, #4]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d3e4      	bcc.n	8007f52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f007 f938 	bl	800f202 <USB_ReadInterrupts>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f9c:	d13c      	bne.n	8008018 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa2:	e02b      	b.n	8007ffc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb8:	4613      	mov	r3, r2
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	3318      	adds	r3, #24
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d115      	bne.n	8007ff6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007fca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da12      	bge.n	8007ff6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	3317      	adds	r3, #23
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fac8 	bl	8008586 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	461a      	mov	r2, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	4293      	cmp	r3, r2
 8008006:	d3cd      	bcc.n	8007fa4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f007 f8f0 	bl	800f202 <USB_ReadInterrupts>
 8008022:	4603      	mov	r3, r0
 8008024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800802c:	d156      	bne.n	80080dc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800802e:	2301      	movs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
 8008032:	e045      	b.n	80080c0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008048:	4613      	mov	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d12e      	bne.n	80080ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800805c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800805e:	2b00      	cmp	r3, #0
 8008060:	da2b      	bge.n	80080ba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800806e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008072:	429a      	cmp	r2, r3
 8008074:	d121      	bne.n	80080ba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800807a:	4613      	mov	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080b6:	6053      	str	r3, [r2, #4]
            break;
 80080b8:	e008      	b.n	80080cc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	3301      	adds	r3, #1
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d3b3      	bcc.n	8008034 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695a      	ldr	r2, [r3, #20]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80080da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f007 f88e 	bl	800f202 <USB_ReadInterrupts>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f0:	d10a      	bne.n	8008108 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f015 f9b0 	bl	801d458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	f007 f878 	bl	800f202 <USB_ReadInterrupts>
 8008112:	4603      	mov	r3, r0
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b04      	cmp	r3, #4
 800811a:	d115      	bne.n	8008148 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f015 f9a0 	bl	801d474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
 8008144:	e000      	b.n	8008148 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008146:	bf00      	nop
    }
  }
}
 8008148:	3734      	adds	r7, #52	@ 0x34
 800814a:	46bd      	mov	sp, r7
 800814c:	bd90      	pop	{r4, r7, pc}

0800814e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_PCD_SetAddress+0x1a>
 8008164:	2302      	movs	r3, #2
 8008166:	e012      	b.n	800818e <HAL_PCD_SetAddress+0x40>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f006 ffd7 	bl	800f132 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	460b      	mov	r3, r1
 80081aa:	803b      	strh	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da0f      	bge.n	80081dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	3310      	adds	r3, #16
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	4413      	add	r3, r2
 80081d0:	3304      	adds	r3, #4
 80081d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	705a      	strb	r2, [r3, #1]
 80081da:	e00f      	b.n	80081fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	3304      	adds	r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	b2da      	uxtb	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008208:	883a      	ldrh	r2, [r7, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	78ba      	ldrb	r2, [r7, #2]
 8008212:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d004      	beq.n	8008226 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008226:	78bb      	ldrb	r3, [r7, #2]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d102      	bne.n	8008232 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_PCD_EP_Open+0xaa>
 800823c:	2302      	movs	r3, #2
 800823e:	e00e      	b.n	800825e <HAL_PCD_EP_Open+0xc8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68f9      	ldr	r1, [r7, #12]
 800824e:	4618      	mov	r0, r3
 8008250:	f006 f910 	bl	800e474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800825c:	7afb      	ldrb	r3, [r7, #11]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008276:	2b00      	cmp	r3, #0
 8008278:	da0f      	bge.n	800829a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	3310      	adds	r3, #16
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	3304      	adds	r3, #4
 8008290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	705a      	strb	r2, [r3, #1]
 8008298:	e00f      	b.n	80082ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	f003 020f 	and.w	r2, r3, #15
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	3304      	adds	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_PCD_EP_Close+0x6e>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e00e      	b.n	80082f2 <HAL_PCD_EP_Close+0x8c>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68f9      	ldr	r1, [r7, #12]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f006 f94e 	bl	800e584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	460b      	mov	r3, r1
 8008308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	f003 020f 	and.w	r2, r3, #15
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	3304      	adds	r3, #4
 8008322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2200      	movs	r2, #0
 8008334:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	b2da      	uxtb	r2, r3
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	799b      	ldrb	r3, [r3, #6]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d102      	bne.n	8008356 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	799b      	ldrb	r3, [r3, #6]
 800835e:	461a      	mov	r2, r3
 8008360:	6979      	ldr	r1, [r7, #20]
 8008362:	f006 f9eb 	bl	800e73c <USB_EPStartXfer>

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	460b      	mov	r3, r1
 80083ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	f003 020f 	and.w	r2, r3, #15
 80083b6:	4613      	mov	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	3310      	adds	r3, #16
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	3304      	adds	r3, #4
 80083c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2200      	movs	r2, #0
 80083d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2201      	movs	r2, #1
 80083de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083e0:	7afb      	ldrb	r3, [r7, #11]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	799b      	ldrb	r3, [r3, #6]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d102      	bne.n	80083fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	799b      	ldrb	r3, [r3, #6]
 8008402:	461a      	mov	r2, r3
 8008404:	6979      	ldr	r1, [r7, #20]
 8008406:	f006 f999 	bl	800e73c <USB_EPStartXfer>

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	7912      	ldrb	r2, [r2, #4]
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e04f      	b.n	80084d2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008436:	2b00      	cmp	r3, #0
 8008438:	da0f      	bge.n	800845a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	4613      	mov	r3, r2
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	3310      	adds	r3, #16
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	3304      	adds	r3, #4
 8008450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	705a      	strb	r2, [r3, #1]
 8008458:	e00d      	b.n	8008476 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800845a:	78fa      	ldrb	r2, [r7, #3]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	4413      	add	r3, r2
 800846c:	3304      	adds	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_PCD_EP_SetStall+0x82>
 8008492:	2302      	movs	r3, #2
 8008494:	e01d      	b.n	80084d2 <HAL_PCD_EP_SetStall+0xbe>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f006 fd21 	bl	800eeec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	7999      	ldrb	r1, [r3, #6]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084c2:	461a      	mov	r2, r3
 80084c4:	f006 ff62 	bl	800f38c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	7912      	ldrb	r2, [r2, #4]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d901      	bls.n	80084f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e042      	b.n	800857e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da0f      	bge.n	8008520 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	f003 020f 	and.w	r2, r3, #15
 8008506:	4613      	mov	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	3310      	adds	r3, #16
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	3304      	adds	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	705a      	strb	r2, [r3, #1]
 800851e:	e00f      	b.n	8008540 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008520:	78fb      	ldrb	r3, [r7, #3]
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	3304      	adds	r3, #4
 8008538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	b2da      	uxtb	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_PCD_EP_ClrStall+0x86>
 800855c:	2302      	movs	r3, #2
 800855e:	e00e      	b.n	800857e <HAL_PCD_EP_ClrStall+0xa4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68f9      	ldr	r1, [r7, #12]
 800856e:	4618      	mov	r0, r3
 8008570:	f006 fd2a 	bl	800efc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da0c      	bge.n	80085b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	f003 020f 	and.w	r2, r3, #15
 80085a0:	4613      	mov	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	3310      	adds	r3, #16
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e00c      	b.n	80085ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	f003 020f 	and.w	r2, r3, #15
 80085ba:	4613      	mov	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	3304      	adds	r3, #4
 80085cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f006 fb49 	bl	800ec6c <USB_EPStopXfer>
 80085da:	4603      	mov	r3, r0
 80085dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80085de:	7afb      	ldrb	r3, [r7, #11]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_PCD_EP_Flush+0x1a>
 80085fe:	2302      	movs	r3, #2
 8008600:	e01b      	b.n	800863a <HAL_PCD_EP_Flush+0x52>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800860a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800860e:	2b00      	cmp	r3, #0
 8008610:	da09      	bge.n	8008626 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f005 fe8a 	bl	800e338 <USB_FlushTxFifo>
 8008624:	e004      	b.n	8008630 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4618      	mov	r0, r3
 800862c:	f005 feb6 	bl	800e39c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b08a      	sub	sp, #40	@ 0x28
 8008646:	af02      	add	r7, sp, #8
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	3310      	adds	r3, #16
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	3304      	adds	r3, #4
 8008668:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	429a      	cmp	r2, r3
 8008674:	d901      	bls.n	800867a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e06b      	b.n	8008752 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	429a      	cmp	r2, r3
 800868e:	d902      	bls.n	8008696 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	3303      	adds	r3, #3
 800869a:	089b      	lsrs	r3, r3, #2
 800869c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800869e:	e02a      	b.n	80086f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d902      	bls.n	80086bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	3303      	adds	r3, #3
 80086c0:	089b      	lsrs	r3, r3, #2
 80086c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68d9      	ldr	r1, [r3, #12]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	4603      	mov	r3, r0
 80086d8:	6978      	ldr	r0, [r7, #20]
 80086da:	f006 fb71 	bl	800edc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	441a      	add	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	d809      	bhi.n	8008720 <PCD_WriteEmptyTxFifo+0xde>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008714:	429a      	cmp	r2, r3
 8008716:	d203      	bcs.n	8008720 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1bf      	bne.n	80086a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	429a      	cmp	r2, r3
 800872a:	d811      	bhi.n	8008750 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	2201      	movs	r2, #1
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	43db      	mvns	r3, r3
 8008746:	6939      	ldr	r1, [r7, #16]
 8008748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800874c:	4013      	ands	r3, r2
 800874e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	333c      	adds	r3, #60	@ 0x3c
 8008774:	3304      	adds	r3, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	799b      	ldrb	r3, [r3, #6]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d17b      	bne.n	800888a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d015      	beq.n	80087c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4a61      	ldr	r2, [pc, #388]	@ (8008924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	f240 80b9 	bls.w	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80b3 	beq.w	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087be:	461a      	mov	r2, r3
 80087c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c4:	6093      	str	r3, [r2, #8]
 80087c6:	e0a7      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087de:	461a      	mov	r2, r3
 80087e0:	2320      	movs	r3, #32
 80087e2:	6093      	str	r3, [r2, #8]
 80087e4:	e098      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8093 	bne.w	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	4a4b      	ldr	r2, [pc, #300]	@ (8008924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d90f      	bls.n	800881a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008810:	461a      	mov	r2, r3
 8008812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008816:	6093      	str	r3, [r2, #8]
 8008818:	e07e      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	3304      	adds	r3, #4
 800882e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	0159      	lsls	r1, r3, #5
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	440b      	add	r3, r1
 800883c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008846:	1ad2      	subs	r2, r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d114      	bne.n	800887c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008864:	461a      	mov	r2, r3
 8008866:	2101      	movs	r1, #1
 8008868:	f006 fd90 	bl	800f38c <USB_EP0_OutStart>
 800886c:	e006      	b.n	800887c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	441a      	add	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f014 fd24 	bl	801d2d0 <HAL_PCD_DataOutStageCallback>
 8008888:	e046      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	4a26      	ldr	r2, [pc, #152]	@ (8008928 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d124      	bne.n	80088dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088a8:	461a      	mov	r2, r3
 80088aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ae:	6093      	str	r3, [r2, #8]
 80088b0:	e032      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c8:	461a      	mov	r2, r3
 80088ca:	2320      	movs	r3, #32
 80088cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f014 fcfb 	bl	801d2d0 <HAL_PCD_DataOutStageCallback>
 80088da:	e01d      	b.n	8008918 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d114      	bne.n	800890c <PCD_EP_OutXfrComplete_int+0x1b0>
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008904:	461a      	mov	r2, r3
 8008906:	2100      	movs	r1, #0
 8008908:	f006 fd40 	bl	800f38c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f014 fcdc 	bl	801d2d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	4f54300a 	.word	0x4f54300a
 8008928:	4f54310a 	.word	0x4f54310a

0800892c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	333c      	adds	r3, #60	@ 0x3c
 8008944:	3304      	adds	r3, #4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4a15      	ldr	r2, [pc, #84]	@ (80089b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d90e      	bls.n	8008980 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008978:	461a      	mov	r2, r3
 800897a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800897e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f014 fc93 	bl	801d2ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a0a      	ldr	r2, [pc, #40]	@ (80089b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d90c      	bls.n	80089a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	799b      	ldrb	r3, [r3, #6]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d108      	bne.n	80089a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80089a0:	461a      	mov	r2, r3
 80089a2:	2101      	movs	r1, #1
 80089a4:	f006 fcf2 	bl	800f38c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	4f54300a 	.word	0x4f54300a

080089b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
 80089c4:	4613      	mov	r3, r2
 80089c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089d6:	883b      	ldrh	r3, [r7, #0]
 80089d8:	0419      	lsls	r1, r3, #16
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80089e4:	e028      	b.n	8008a38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	0c1b      	lsrs	r3, r3, #16
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
 80089f8:	e00d      	b.n	8008a16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	3340      	adds	r3, #64	@ 0x40
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	0c1b      	lsrs	r3, r3, #16
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	3301      	adds	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	7bfa      	ldrb	r2, [r7, #15]
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d3ec      	bcc.n	80089fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a20:	883b      	ldrh	r3, [r7, #0]
 8008a22:	0418      	lsls	r0, r3, #16
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6819      	ldr	r1, [r3, #0]
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4302      	orrs	r2, r0
 8008a30:	3340      	adds	r3, #64	@ 0x40
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	887a      	ldrh	r2, [r7, #2]
 8008a58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a86:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a92:	687b      	ldr	r3, [r7, #4]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	420e0020 	.word	0x420e0020
 8008aa4:	40007000 	.word	0x40007000

08008aa8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008aae:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <HAL_PWR_DisableBkUpAccess+0x24>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008aba:	687b      	ldr	r3, [r7, #4]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	420e0020 	.word	0x420e0020
 8008acc:	40007000 	.word	0x40007000

08008ad0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008adc:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <HAL_PWR_EnterSTOPMode+0x58>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f023 0203 	bic.w	r2, r3, #3
 8008ae4:	4910      	ldr	r1, [pc, #64]	@ (8008b28 <HAL_PWR_EnterSTOPMode+0x58>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008aec:	4b0f      	ldr	r3, [pc, #60]	@ (8008b2c <HAL_PWR_EnterSTOPMode+0x5c>)
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	4a0e      	ldr	r2, [pc, #56]	@ (8008b2c <HAL_PWR_EnterSTOPMode+0x5c>)
 8008af2:	f043 0304 	orr.w	r3, r3, #4
 8008af6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008afe:	bf30      	wfi
 8008b00:	e005      	b.n	8008b0e <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d001      	beq.n	8008b0c <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008b08:	bf40      	sev
      __WFE();
 8008b0a:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008b0c:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008b0e:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	4a06      	ldr	r2, [pc, #24]	@ (8008b2c <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b14:	f023 0304 	bic.w	r3, r3, #4
 8008b18:	6113      	str	r3, [r2, #16]
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40007000 	.word	0x40007000
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008b34:	4b03      	ldr	r3, [pc, #12]	@ (8008b44 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
}
 8008b3a:	bf00      	nop
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	420e0024 	.word	0x420e0024

08008b48 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008b4c:	4b03      	ldr	r3, [pc, #12]	@ (8008b5c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	420e0024 	.word	0x420e0024

08008b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e267      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d075      	beq.n	8008c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b7e:	4b88      	ldr	r3, [pc, #544]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d00c      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b8a:	4b85      	ldr	r3, [pc, #532]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d112      	bne.n	8008bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b96:	4b82      	ldr	r3, [pc, #520]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ba2:	d10b      	bne.n	8008bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d05b      	beq.n	8008c68 <HAL_RCC_OscConfig+0x108>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d157      	bne.n	8008c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e242      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc4:	d106      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x74>
 8008bc6:	4b76      	ldr	r3, [pc, #472]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a75      	ldr	r2, [pc, #468]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e01d      	b.n	8008c10 <HAL_RCC_OscConfig+0xb0>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x98>
 8008bde:	4b70      	ldr	r3, [pc, #448]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a6f      	ldr	r2, [pc, #444]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	4b6d      	ldr	r3, [pc, #436]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a6c      	ldr	r2, [pc, #432]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCC_OscConfig+0xb0>
 8008bf8:	4b69      	ldr	r3, [pc, #420]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a68      	ldr	r2, [pc, #416]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4b66      	ldr	r3, [pc, #408]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a65      	ldr	r2, [pc, #404]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d013      	beq.n	8008c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c18:	f7fb fa96 	bl	8004148 <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1e:	e008      	b.n	8008c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c20:	f7fb fa92 	bl	8004148 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b64      	cmp	r3, #100	@ 0x64
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e207      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c32:	4b5b      	ldr	r3, [pc, #364]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0f0      	beq.n	8008c20 <HAL_RCC_OscConfig+0xc0>
 8008c3e:	e014      	b.n	8008c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fb fa82 	bl	8004148 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fb fa7e 	bl	8004148 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	@ 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e1f3      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c5a:	4b51      	ldr	r3, [pc, #324]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0xe8>
 8008c66:	e000      	b.n	8008c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d063      	beq.n	8008d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c76:	4b4a      	ldr	r3, [pc, #296]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c82:	4b47      	ldr	r3, [pc, #284]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d11c      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c8e:	4b44      	ldr	r3, [pc, #272]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d116      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c9a:	4b41      	ldr	r3, [pc, #260]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x152>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d001      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e1c7      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4937      	ldr	r1, [pc, #220]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc6:	e03a      	b.n	8008d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d020      	beq.n	8008d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cd0:	4b34      	ldr	r3, [pc, #208]	@ (8008da4 <HAL_RCC_OscConfig+0x244>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd6:	f7fb fa37 	bl	8004148 <HAL_GetTick>
 8008cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cdc:	e008      	b.n	8008cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cde:	f7fb fa33 	bl	8004148 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d901      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e1a8      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0f0      	beq.n	8008cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cfc:	4b28      	ldr	r3, [pc, #160]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	4925      	ldr	r1, [pc, #148]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	600b      	str	r3, [r1, #0]
 8008d10:	e015      	b.n	8008d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d12:	4b24      	ldr	r3, [pc, #144]	@ (8008da4 <HAL_RCC_OscConfig+0x244>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fb fa16 	bl	8004148 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d20:	f7fb fa12 	bl	8004148 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e187      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d32:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1f0      	bne.n	8008d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0308 	and.w	r3, r3, #8
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d036      	beq.n	8008db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d016      	beq.n	8008d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d52:	4b15      	ldr	r3, [pc, #84]	@ (8008da8 <HAL_RCC_OscConfig+0x248>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d58:	f7fb f9f6 	bl	8004148 <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d60:	f7fb f9f2 	bl	8004148 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e167      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <HAL_RCC_OscConfig+0x240>)
 8008d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0f0      	beq.n	8008d60 <HAL_RCC_OscConfig+0x200>
 8008d7e:	e01b      	b.n	8008db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d80:	4b09      	ldr	r3, [pc, #36]	@ (8008da8 <HAL_RCC_OscConfig+0x248>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d86:	f7fb f9df 	bl	8004148 <HAL_GetTick>
 8008d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d8c:	e00e      	b.n	8008dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d8e:	f7fb f9db 	bl	8004148 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d907      	bls.n	8008dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e150      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
 8008da0:	40023800 	.word	0x40023800
 8008da4:	42470000 	.word	0x42470000
 8008da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dac:	4b88      	ldr	r3, [pc, #544]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1ea      	bne.n	8008d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8097 	beq.w	8008ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dca:	4b81      	ldr	r3, [pc, #516]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10f      	bne.n	8008df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	4b7d      	ldr	r3, [pc, #500]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dde:	4a7c      	ldr	r2, [pc, #496]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008de6:	4b7a      	ldr	r3, [pc, #488]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dee:	60bb      	str	r3, [r7, #8]
 8008df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df6:	4b77      	ldr	r3, [pc, #476]	@ (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d118      	bne.n	8008e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e02:	4b74      	ldr	r3, [pc, #464]	@ (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a73      	ldr	r2, [pc, #460]	@ (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e0e:	f7fb f99b 	bl	8004148 <HAL_GetTick>
 8008e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e16:	f7fb f997 	bl	8004148 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e10c      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e28:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd4 <HAL_RCC_OscConfig+0x474>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0f0      	beq.n	8008e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d106      	bne.n	8008e4a <HAL_RCC_OscConfig+0x2ea>
 8008e3c:	4b64      	ldr	r3, [pc, #400]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e40:	4a63      	ldr	r2, [pc, #396]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e48:	e01c      	b.n	8008e84 <HAL_RCC_OscConfig+0x324>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d10c      	bne.n	8008e6c <HAL_RCC_OscConfig+0x30c>
 8008e52:	4b5f      	ldr	r3, [pc, #380]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e56:	4a5e      	ldr	r2, [pc, #376]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e58:	f043 0304 	orr.w	r3, r3, #4
 8008e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e62:	4a5b      	ldr	r2, [pc, #364]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e6a:	e00b      	b.n	8008e84 <HAL_RCC_OscConfig+0x324>
 8008e6c:	4b58      	ldr	r3, [pc, #352]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e70:	4a57      	ldr	r2, [pc, #348]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e78:	4b55      	ldr	r3, [pc, #340]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e7c:	4a54      	ldr	r2, [pc, #336]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008e7e:	f023 0304 	bic.w	r3, r3, #4
 8008e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e8c:	f7fb f95c 	bl	8004148 <HAL_GetTick>
 8008e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e92:	e00a      	b.n	8008eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e94:	f7fb f958 	bl	8004148 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e0cb      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eaa:	4b49      	ldr	r3, [pc, #292]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0ee      	beq.n	8008e94 <HAL_RCC_OscConfig+0x334>
 8008eb6:	e014      	b.n	8008ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eb8:	f7fb f946 	bl	8004148 <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ebe:	e00a      	b.n	8008ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ec0:	f7fb f942 	bl	8004148 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e0b5      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1ee      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d105      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee8:	4b39      	ldr	r3, [pc, #228]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	4a38      	ldr	r2, [pc, #224]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ef2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 80a1 	beq.w	8009040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008efe:	4b34      	ldr	r3, [pc, #208]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 030c 	and.w	r3, r3, #12
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d05c      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d141      	bne.n	8008f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f12:	4b31      	ldr	r3, [pc, #196]	@ (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f18:	f7fb f916 	bl	8004148 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f20:	f7fb f912 	bl	8004148 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e087      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f32:	4b27      	ldr	r3, [pc, #156]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4c:	019b      	lsls	r3, r3, #6
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	3b01      	subs	r3, #1
 8008f58:	041b      	lsls	r3, r3, #16
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f60:	061b      	lsls	r3, r3, #24
 8008f62:	491b      	ldr	r1, [pc, #108]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f68:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f6e:	f7fb f8eb 	bl	8004148 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f76:	f7fb f8e7 	bl	8004148 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e05c      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f88:	4b11      	ldr	r3, [pc, #68]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <HAL_RCC_OscConfig+0x416>
 8008f94:	e054      	b.n	8009040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f96:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <HAL_RCC_OscConfig+0x478>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f9c:	f7fb f8d4 	bl	8004148 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7fb f8d0 	bl	8004148 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e045      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	4b06      	ldr	r3, [pc, #24]	@ (8008fd0 <HAL_RCC_OscConfig+0x470>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f0      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x444>
 8008fc2:	e03d      	b.n	8009040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d107      	bne.n	8008fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e038      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	40007000 	.word	0x40007000
 8008fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800904c <HAL_RCC_OscConfig+0x4ec>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d028      	beq.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d121      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009002:	429a      	cmp	r2, r3
 8009004:	d11a      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800900c:	4013      	ands	r3, r2
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009014:	4293      	cmp	r3, r2
 8009016:	d111      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	085b      	lsrs	r3, r3, #1
 8009024:	3b01      	subs	r3, #1
 8009026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009028:	429a      	cmp	r2, r3
 800902a:	d107      	bne.n	800903c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009038:	429a      	cmp	r2, r3
 800903a:	d001      	beq.n	8009040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e000      	b.n	8009042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40023800 	.word	0x40023800

08009050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e0cc      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009064:	4b68      	ldr	r3, [pc, #416]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d90c      	bls.n	800908c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009072:	4b65      	ldr	r3, [pc, #404]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800907a:	4b63      	ldr	r3, [pc, #396]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d001      	beq.n	800908c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0b8      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090a4:	4b59      	ldr	r3, [pc, #356]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	4a58      	ldr	r2, [pc, #352]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80090ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090bc:	4b53      	ldr	r3, [pc, #332]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4a52      	ldr	r2, [pc, #328]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090c8:	4b50      	ldr	r3, [pc, #320]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	494d      	ldr	r1, [pc, #308]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d044      	beq.n	8009170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	4b47      	ldr	r3, [pc, #284]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d119      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e07f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d003      	beq.n	800910e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800910a:	2b03      	cmp	r3, #3
 800910c:	d107      	bne.n	800911e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800910e:	4b3f      	ldr	r3, [pc, #252]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e06f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800911e:	4b3b      	ldr	r3, [pc, #236]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e067      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800912e:	4b37      	ldr	r3, [pc, #220]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f023 0203 	bic.w	r2, r3, #3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4934      	ldr	r1, [pc, #208]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	4313      	orrs	r3, r2
 800913e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009140:	f7fb f802 	bl	8004148 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009146:	e00a      	b.n	800915e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009148:	f7fa fffe 	bl	8004148 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e04f      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	4b2b      	ldr	r3, [pc, #172]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 020c 	and.w	r2, r3, #12
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	429a      	cmp	r2, r3
 800916e:	d1eb      	bne.n	8009148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009170:	4b25      	ldr	r3, [pc, #148]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d20c      	bcs.n	8009198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800917e:	4b22      	ldr	r3, [pc, #136]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009186:	4b20      	ldr	r3, [pc, #128]	@ (8009208 <HAL_RCC_ClockConfig+0x1b8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d001      	beq.n	8009198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e032      	b.n	80091fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091a4:	4b19      	ldr	r3, [pc, #100]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	4916      	ldr	r1, [pc, #88]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091c2:	4b12      	ldr	r3, [pc, #72]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	490e      	ldr	r1, [pc, #56]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091d6:	f000 f821 	bl	800921c <HAL_RCC_GetSysClockFreq>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	490a      	ldr	r1, [pc, #40]	@ (8009210 <HAL_RCC_ClockConfig+0x1c0>)
 80091e8:	5ccb      	ldrb	r3, [r1, r3]
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	4a09      	ldr	r2, [pc, #36]	@ (8009214 <HAL_RCC_ClockConfig+0x1c4>)
 80091f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091f2:	4b09      	ldr	r3, [pc, #36]	@ (8009218 <HAL_RCC_ClockConfig+0x1c8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fa ff62 	bl	80040c0 <HAL_InitTick>

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40023c00 	.word	0x40023c00
 800920c:	40023800 	.word	0x40023800
 8009210:	080250f0 	.word	0x080250f0
 8009214:	20000010 	.word	0x20000010
 8009218:	20000014 	.word	0x20000014

0800921c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800921c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009220:	b090      	sub	sp, #64	@ 0x40
 8009222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	@ 0x34
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922c:	2300      	movs	r3, #0
 800922e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009234:	4b59      	ldr	r3, [pc, #356]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 030c 	and.w	r3, r3, #12
 800923c:	2b08      	cmp	r3, #8
 800923e:	d00d      	beq.n	800925c <HAL_RCC_GetSysClockFreq+0x40>
 8009240:	2b08      	cmp	r3, #8
 8009242:	f200 80a1 	bhi.w	8009388 <HAL_RCC_GetSysClockFreq+0x16c>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0x34>
 800924a:	2b04      	cmp	r3, #4
 800924c:	d003      	beq.n	8009256 <HAL_RCC_GetSysClockFreq+0x3a>
 800924e:	e09b      	b.n	8009388 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009250:	4b53      	ldr	r3, [pc, #332]	@ (80093a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009254:	e09b      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009256:	4b53      	ldr	r3, [pc, #332]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009258:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800925a:	e098      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800925c:	4b4f      	ldr	r3, [pc, #316]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009266:	4b4d      	ldr	r3, [pc, #308]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d028      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009272:	4b4a      	ldr	r3, [pc, #296]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	099b      	lsrs	r3, r3, #6
 8009278:	2200      	movs	r2, #0
 800927a:	623b      	str	r3, [r7, #32]
 800927c:	627a      	str	r2, [r7, #36]	@ 0x24
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009284:	2100      	movs	r1, #0
 8009286:	4b47      	ldr	r3, [pc, #284]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009288:	fb03 f201 	mul.w	r2, r3, r1
 800928c:	2300      	movs	r3, #0
 800928e:	fb00 f303 	mul.w	r3, r0, r3
 8009292:	4413      	add	r3, r2
 8009294:	4a43      	ldr	r2, [pc, #268]	@ (80093a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009296:	fba0 1202 	umull	r1, r2, r0, r2
 800929a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800929c:	460a      	mov	r2, r1
 800929e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80092a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092a2:	4413      	add	r3, r2
 80092a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a8:	2200      	movs	r2, #0
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	61fa      	str	r2, [r7, #28]
 80092ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80092b6:	f7f7 fcff 	bl	8000cb8 <__aeabi_uldivmod>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4613      	mov	r3, r2
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c2:	e053      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092c4:	4b35      	ldr	r3, [pc, #212]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	099b      	lsrs	r3, r3, #6
 80092ca:	2200      	movs	r2, #0
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	617a      	str	r2, [r7, #20]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	f04f 0000 	mov.w	r0, #0
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	0159      	lsls	r1, r3, #5
 80092e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ec:	0150      	lsls	r0, r2, #5
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	ebb2 080a 	subs.w	r8, r2, sl
 80092f6:	eb63 090b 	sbc.w	r9, r3, fp
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009306:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800930a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800930e:	ebb2 0408 	subs.w	r4, r2, r8
 8009312:	eb63 0509 	sbc.w	r5, r3, r9
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	00eb      	lsls	r3, r5, #3
 8009320:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009324:	00e2      	lsls	r2, r4, #3
 8009326:	4614      	mov	r4, r2
 8009328:	461d      	mov	r5, r3
 800932a:	eb14 030a 	adds.w	r3, r4, sl
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	eb45 030b 	adc.w	r3, r5, fp
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009342:	4629      	mov	r1, r5
 8009344:	028b      	lsls	r3, r1, #10
 8009346:	4621      	mov	r1, r4
 8009348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800934c:	4621      	mov	r1, r4
 800934e:	028a      	lsls	r2, r1, #10
 8009350:	4610      	mov	r0, r2
 8009352:	4619      	mov	r1, r3
 8009354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009356:	2200      	movs	r2, #0
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	60fa      	str	r2, [r7, #12]
 800935c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009360:	f7f7 fcaa 	bl	8000cb8 <__aeabi_uldivmod>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4613      	mov	r3, r2
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <HAL_RCC_GetSysClockFreq+0x180>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	0c1b      	lsrs	r3, r3, #16
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	3301      	adds	r3, #1
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800937c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	fbb2 f3f3 	udiv	r3, r2, r3
 8009384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009386:	e002      	b.n	800938e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009388:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800938a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800938c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009390:	4618      	mov	r0, r3
 8009392:	3740      	adds	r7, #64	@ 0x40
 8009394:	46bd      	mov	sp, r7
 8009396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800939a:	bf00      	nop
 800939c:	40023800 	.word	0x40023800
 80093a0:	00f42400 	.word	0x00f42400
 80093a4:	017d7840 	.word	0x017d7840

080093a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093ac:	4b03      	ldr	r3, [pc, #12]	@ (80093bc <HAL_RCC_GetHCLKFreq+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000010 	.word	0x20000010

080093c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093c4:	f7ff fff0 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093c8:	4602      	mov	r2, r0
 80093ca:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	0a9b      	lsrs	r3, r3, #10
 80093d0:	f003 0307 	and.w	r3, r3, #7
 80093d4:	4903      	ldr	r1, [pc, #12]	@ (80093e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093d6:	5ccb      	ldrb	r3, [r1, r3]
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093dc:	4618      	mov	r0, r3
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	08025100 	.word	0x08025100

080093e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093ec:	f7ff ffdc 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093f0:	4602      	mov	r2, r0
 80093f2:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	0b5b      	lsrs	r3, r3, #13
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	4903      	ldr	r1, [pc, #12]	@ (800940c <HAL_RCC_GetPCLK2Freq+0x24>)
 80093fe:	5ccb      	ldrb	r3, [r1, r3]
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40023800 	.word	0x40023800
 800940c:	08025100 	.word	0x08025100

08009410 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009434:	2b00      	cmp	r3, #0
 8009436:	d035      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009438:	4b67      	ldr	r3, [pc, #412]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800943e:	f7fa fe83 	bl	8004148 <HAL_GetTick>
 8009442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009444:	e008      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009446:	f7fa fe7f 	bl	8004148 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e0ba      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009458:	4b60      	ldr	r3, [pc, #384]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1f0      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	019a      	lsls	r2, r3, #6
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	071b      	lsls	r3, r3, #28
 8009470:	495a      	ldr	r1, [pc, #360]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009478:	4b57      	ldr	r3, [pc, #348]	@ (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800947a:	2201      	movs	r2, #1
 800947c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800947e:	f7fa fe63 	bl	8004148 <HAL_GetTick>
 8009482:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009484:	e008      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009486:	f7fa fe5f 	bl	8004148 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b02      	cmp	r3, #2
 8009492:	d901      	bls.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e09a      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009498:	4b50      	ldr	r3, [pc, #320]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0f0      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8083 	beq.w	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	4b49      	ldr	r3, [pc, #292]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ba:	4a48      	ldr	r2, [pc, #288]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80094c2:	4b46      	ldr	r3, [pc, #280]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094ce:	4b44      	ldr	r3, [pc, #272]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a43      	ldr	r2, [pc, #268]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094da:	f7fa fe35 	bl	8004148 <HAL_GetTick>
 80094de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094e0:	e008      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094e2:	f7fa fe31 	bl	8004148 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d901      	bls.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e06c      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094f4:	4b3a      	ldr	r3, [pc, #232]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0f0      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009500:	4b36      	ldr	r3, [pc, #216]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009508:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d02f      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	d028      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800951e:	4b2f      	ldr	r3, [pc, #188]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009526:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009528:	4b2e      	ldr	r3, [pc, #184]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800952a:	2201      	movs	r2, #1
 800952c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800952e:	4b2d      	ldr	r3, [pc, #180]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009534:	4a29      	ldr	r2, [pc, #164]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800953a:	4b28      	ldr	r3, [pc, #160]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b01      	cmp	r3, #1
 8009544:	d114      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009546:	f7fa fdff 	bl	8004148 <HAL_GetTick>
 800954a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800954c:	e00a      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800954e:	f7fa fdfb 	bl	8004148 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800955c:	4293      	cmp	r3, r2
 800955e:	d901      	bls.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e034      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009564:	4b1d      	ldr	r3, [pc, #116]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0ee      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800957c:	d10d      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800957e:	4b17      	ldr	r3, [pc, #92]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800958e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009592:	4912      	ldr	r1, [pc, #72]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009594:	4313      	orrs	r3, r2
 8009596:	608b      	str	r3, [r1, #8]
 8009598:	e005      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800959a:	4b10      	ldr	r3, [pc, #64]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4a0f      	ldr	r2, [pc, #60]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80095a4:	6093      	str	r3, [r2, #8]
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095b2:	490a      	ldr	r1, [pc, #40]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7c1a      	ldrb	r2, [r3, #16]
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095ca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	42470068 	.word	0x42470068
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40007000 	.word	0x40007000
 80095e4:	42470e40 	.word	0x42470e40
 80095e8:	424711e0 	.word	0x424711e0

080095ec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095f2:	f7fa fda9 	bl	8004148 <HAL_GetTick>
 80095f6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a5c      	ldr	r2, [pc, #368]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009604:	e008      	b.n	8009618 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009606:	f7fa fd9f 	bl	8004148 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e0a7      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009618:	4b55      	ldr	r3, [pc, #340]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0f0      	beq.n	8009606 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009624:	4b52      	ldr	r3, [pc, #328]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a51      	ldr	r2, [pc, #324]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800962a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009630:	f7fa fd8a 	bl	8004148 <HAL_GetTick>
 8009634:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8009636:	4b4e      	ldr	r3, [pc, #312]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009638:	2200      	movs	r2, #0
 800963a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800963c:	e00a      	b.n	8009654 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800963e:	f7fa fd83 	bl	8004148 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800964c:	4293      	cmp	r3, r2
 800964e:	d901      	bls.n	8009654 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e089      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009654:	4b46      	ldr	r3, [pc, #280]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 030c 	and.w	r3, r3, #12
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1ee      	bne.n	800963e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009660:	f7fa fd72 	bl	8004148 <HAL_GetTick>
 8009664:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009666:	4b42      	ldr	r3, [pc, #264]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a41      	ldr	r2, [pc, #260]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800966c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009670:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009672:	e008      	b.n	8009686 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009674:	f7fa fd68 	bl	8004148 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b64      	cmp	r3, #100	@ 0x64
 8009680:	d901      	bls.n	8009686 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e070      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009686:	4b3a      	ldr	r3, [pc, #232]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1f0      	bne.n	8009674 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009692:	f7fa fd59 	bl	8004148 <HAL_GetTick>
 8009696:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009698:	4b35      	ldr	r3, [pc, #212]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a34      	ldr	r2, [pc, #208]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800969e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096a2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096a6:	f7fa fd4f 	bl	8004148 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e057      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80096b8:	4b2d      	ldr	r3, [pc, #180]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f0      	bne.n	80096a6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80096c4:	f7fa fd40 	bl	8004148 <HAL_GetTick>
 80096c8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80096ca:	4b29      	ldr	r3, [pc, #164]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a28      	ldr	r2, [pc, #160]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096d4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80096d6:	e008      	b.n	80096ea <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096d8:	f7fa fd36 	bl	8004148 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d901      	bls.n	80096ea <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e03e      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80096ea:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1f0      	bne.n	80096d8 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80096f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009774 <HAL_RCC_DeInit+0x188>)
 80096fa:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80096fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 80096fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009778 <HAL_RCC_DeInit+0x18c>)
 8009700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009704:	4b1a      	ldr	r3, [pc, #104]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4a19      	ldr	r2, [pc, #100]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800970a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800970e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009710:	4b17      	ldr	r3, [pc, #92]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	4a16      	ldr	r2, [pc, #88]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800971a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800971c:	4b14      	ldr	r3, [pc, #80]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a13      	ldr	r2, [pc, #76]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009722:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8009726:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009728:	4b11      	ldr	r3, [pc, #68]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4a10      	ldr	r2, [pc, #64]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800972e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009732:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009734:	4b0e      	ldr	r3, [pc, #56]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009738:	4a0d      	ldr	r2, [pc, #52]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009740:	4b0b      	ldr	r3, [pc, #44]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009744:	4a0a      	ldr	r2, [pc, #40]	@ (8009770 <HAL_RCC_DeInit+0x184>)
 8009746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800974a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800974c:	4b0b      	ldr	r3, [pc, #44]	@ (800977c <HAL_RCC_DeInit+0x190>)
 800974e:	4a0c      	ldr	r2, [pc, #48]	@ (8009780 <HAL_RCC_DeInit+0x194>)
 8009750:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009752:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <HAL_RCC_DeInit+0x198>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f7fa fcb2 	bl	80040c0 <HAL_InitTick>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8009766:	2300      	movs	r3, #0
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	40023800 	.word	0x40023800
 8009774:	04003010 	.word	0x04003010
 8009778:	20003000 	.word	0x20003000
 800977c:	20000010 	.word	0x20000010
 8009780:	00f42400 	.word	0x00f42400
 8009784:	20000014 	.word	0x20000014

08009788 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e073      	b.n	8009886 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	7f5b      	ldrb	r3, [r3, #29]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fa f87e 	bl	80038b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d055      	beq.n	8009874 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	22ca      	movs	r2, #202	@ 0xca
 80097ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2253      	movs	r2, #83	@ 0x53
 80097d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fbd3 	bl	8009f84 <RTC_EnterInitMode>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d12c      	bne.n	8009842 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6812      	ldr	r2, [r2, #0]
 80097f2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097fa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6899      	ldr	r1, [r3, #8]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68d2      	ldr	r2, [r2, #12]
 8009822:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6919      	ldr	r1, [r3, #16]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	041a      	lsls	r2, r3, #16
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fbda 	bl	8009ff2 <RTC_ExitInitMode>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d110      	bne.n	800986a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009856:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	22ff      	movs	r2, #255	@ 0xff
 8009870:	625a      	str	r2, [r3, #36]	@ 0x24
 8009872:	e001      	b.n	8009878 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800988e:	b590      	push	{r4, r7, lr}
 8009890:	b087      	sub	sp, #28
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	7f1b      	ldrb	r3, [r3, #28]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_RTC_SetTime+0x1c>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e087      	b.n	80099ba <HAL_RTC_SetTime+0x12c>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2202      	movs	r2, #2
 80098b4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d126      	bne.n	800990a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2200      	movs	r2, #0
 80098ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fbb1 	bl	800a03c <RTC_ByteToBcd2>
 80098da:	4603      	mov	r3, r0
 80098dc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	785b      	ldrb	r3, [r3, #1]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fbaa 	bl	800a03c <RTC_ByteToBcd2>
 80098e8:	4603      	mov	r3, r0
 80098ea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ec:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	789b      	ldrb	r3, [r3, #2]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fba2 	bl	800a03c <RTC_ByteToBcd2>
 80098f8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098fa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	78db      	ldrb	r3, [r3, #3]
 8009902:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	e018      	b.n	800993c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2200      	movs	r2, #0
 800991c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800992a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009930:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	78db      	ldrb	r3, [r3, #3]
 8009936:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	22ca      	movs	r2, #202	@ 0xca
 8009942:	625a      	str	r2, [r3, #36]	@ 0x24
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2253      	movs	r2, #83	@ 0x53
 800994a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fb19 	bl	8009f84 <RTC_EnterInitMode>
 8009952:	4603      	mov	r3, r0
 8009954:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009956:	7cfb      	ldrb	r3, [r7, #19]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d120      	bne.n	800999e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009966:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800996a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800997a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6899      	ldr	r1, [r3, #8]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	431a      	orrs	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fb2c 	bl	8009ff2 <RTC_ExitInitMode>
 800999a:	4603      	mov	r3, r0
 800999c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800999e:	7cfb      	ldrb	r3, [r7, #19]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2201      	movs	r2, #1
 80099a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	771a      	strb	r2, [r3, #28]

  return status;
 80099b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}

080099c2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b086      	sub	sp, #24
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099f4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	0a1b      	lsrs	r3, r3, #8
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	0d9b      	lsrs	r3, r3, #22
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d11a      	bne.n	8009a74 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 fb18 	bl	800a078 <RTC_Bcd2ToByte>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fb0f 	bl	800a078 <RTC_Bcd2ToByte>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	789b      	ldrb	r3, [r3, #2]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fb06 	bl	800a078 <RTC_Bcd2ToByte>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a7e:	b590      	push	{r4, r7, lr}
 8009a80:	b087      	sub	sp, #28
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	7f1b      	ldrb	r3, [r3, #28]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_RTC_SetDate+0x1c>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e071      	b.n	8009b7e <HAL_RTC_SetDate+0x100>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10e      	bne.n	8009aca <HAL_RTC_SetDate+0x4c>
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	785b      	ldrb	r3, [r3, #1]
 8009ab0:	f003 0310 	and.w	r3, r3, #16
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d008      	beq.n	8009aca <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	f023 0310 	bic.w	r3, r3, #16
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	330a      	adds	r3, #10
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11c      	bne.n	8009b0a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	78db      	ldrb	r3, [r3, #3]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fab1 	bl	800a03c <RTC_ByteToBcd2>
 8009ada:	4603      	mov	r3, r0
 8009adc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 faaa 	bl	800a03c <RTC_ByteToBcd2>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	789b      	ldrb	r3, [r3, #2]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 faa2 	bl	800a03c <RTC_ByteToBcd2>
 8009af8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009afa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	e00e      	b.n	8009b28 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	78db      	ldrb	r3, [r3, #3]
 8009b0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b16:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b24:	4313      	orrs	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	22ca      	movs	r2, #202	@ 0xca
 8009b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2253      	movs	r2, #83	@ 0x53
 8009b36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fa23 	bl	8009f84 <RTC_EnterInitMode>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b42:	7cfb      	ldrb	r3, [r7, #19]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fa4a 	bl	8009ff2 <RTC_ExitInitMode>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b62:	7cfb      	ldrb	r3, [r7, #19]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d102      	bne.n	8009b6e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	22ff      	movs	r2, #255	@ 0xff
 8009b74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	771a      	strb	r2, [r3, #28]

  return status;
 8009b7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd90      	pop	{r4, r7, pc}

08009b86 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009ba0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ba4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	0c1b      	lsrs	r3, r3, #16
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	0b5b      	lsrs	r3, r3, #13
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0307 	and.w	r3, r3, #7
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d11a      	bne.n	8009c1a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	78db      	ldrb	r3, [r3, #3]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fa45 	bl	800a078 <RTC_Bcd2ToByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fa3c 	bl	800a078 <RTC_Bcd2ToByte>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461a      	mov	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	789b      	ldrb	r3, [r3, #2]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fa33 	bl	800a078 <RTC_Bcd2ToByte>
 8009c12:	4603      	mov	r3, r0
 8009c14:	461a      	mov	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b089      	sub	sp, #36	@ 0x24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009c30:	4b9b      	ldr	r3, [pc, #620]	@ (8009ea0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a9b      	ldr	r2, [pc, #620]	@ (8009ea4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009c36:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3a:	0adb      	lsrs	r3, r3, #11
 8009c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	7f1b      	ldrb	r3, [r3, #28]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_RTC_SetAlarm_IT+0x36>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e11e      	b.n	8009e98 <HAL_RTC_SetAlarm_IT+0x274>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2202      	movs	r2, #2
 8009c64:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d137      	bne.n	8009cdc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f9d9 	bl	800a03c <RTC_ByteToBcd2>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f9d2 	bl	800a03c <RTC_ByteToBcd2>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c9c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	789b      	ldrb	r3, [r3, #2]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f9ca 	bl	800a03c <RTC_ByteToBcd2>
 8009ca8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009caa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	78db      	ldrb	r3, [r3, #3]
 8009cb2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009cb4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 f9bc 	bl	800a03c <RTC_ByteToBcd2>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009cc8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009cd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	e023      	b.n	8009d24 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d102      	bne.n	8009cf0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cfc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009d02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	78db      	ldrb	r3, [r3, #3]
 8009d08:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009d0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d12:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d14:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009d1a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	22ca      	movs	r2, #202	@ 0xca
 8009d36:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2253      	movs	r2, #83	@ 0x53
 8009d3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d48:	d142      	bne.n	8009dd0 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d58:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009d6a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	22ff      	movs	r2, #255	@ 0xff
 8009d7e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2203      	movs	r2, #3
 8009d84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e083      	b.n	8009e98 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0e6      	beq.n	8009d6c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009dbc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009dcc:	609a      	str	r2, [r3, #8]
 8009dce:	e04c      	b.n	8009e6a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009dde:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009df0:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009df2:	4b2b      	ldr	r3, [pc, #172]	@ (8009ea0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a2b      	ldr	r2, [pc, #172]	@ (8009ea4 <HAL_RTC_SetAlarm_IT+0x280>)
 8009df8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfc:	0adb      	lsrs	r3, r3, #11
 8009dfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
 8009e06:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	22ff      	movs	r2, #255	@ 0xff
 8009e1a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e035      	b.n	8009e98 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0e6      	beq.n	8009e08 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e58:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e68:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ea8 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e74:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009e76:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea8 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8009ea8 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e80:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	22ff      	movs	r2, #255	@ 0xff
 8009e88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3724      	adds	r7, #36	@ 0x24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd90      	pop	{r4, r7, pc}
 8009ea0:	20000010 	.word	0x20000010
 8009ea4:	10624dd3 	.word	0x10624dd3
 8009ea8:	40013c00 	.word	0x40013c00

08009eac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8009f34 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009eb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009eba:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d012      	beq.n	8009ef0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009ee8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f9 fbb4 	bl	8003658 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d012      	beq.n	8009f24 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009f1c:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f8fa 	bl	800a118 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	775a      	strb	r2, [r3, #29]
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40013c00 	.word	0x40013c00

08009f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a0d      	ldr	r2, [pc, #52]	@ (8009f80 <HAL_RTC_WaitForSynchro+0x48>)
 8009f4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f4c:	f7fa f8fc 	bl	8004148 <HAL_GetTick>
 8009f50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f52:	e009      	b.n	8009f68 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f54:	f7fa f8f8 	bl	8004148 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f62:	d901      	bls.n	8009f68 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e007      	b.n	8009f78 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0ee      	beq.n	8009f54 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	00013f5f 	.word	0x00013f5f

08009f84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d122      	bne.n	8009fe8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009fb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fb2:	f7fa f8c9 	bl	8004148 <HAL_GetTick>
 8009fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fb8:	e00c      	b.n	8009fd4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fba:	f7fa f8c5 	bl	8004148 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009fc8:	d904      	bls.n	8009fd4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <RTC_EnterInitMode+0x64>
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d1e8      	bne.n	8009fba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a00c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f003 0320 	and.w	r3, r3, #32
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff8b 	bl	8009f38 <HAL_RTC_WaitForSynchro>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a04a:	e005      	b.n	800a058 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	3b0a      	subs	r3, #10
 800a056:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	2b09      	cmp	r3, #9
 800a05c:	d8f6      	bhi.n	800a04c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	b2da      	uxtb	r2, r3
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	4313      	orrs	r3, r2
 800a06a:	b2db      	uxtb	r3, r3
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	091b      	lsrs	r3, r3, #4
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b2db      	uxtb	r3, r3
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3350      	adds	r3, #80	@ 0x50
 800a0ca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]
}
 800a0dc:	bf00      	nop
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3350      	adds	r3, #80	@ 0x50
 800a0fc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4413      	add	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e022      	b.n	800a184 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d105      	bne.n	800a156 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7f9 fbe1 	bl	8003918 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2203      	movs	r2, #3
 800a15a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f814 	bl	800a18c <HAL_SD_InitCard>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e00a      	b.n	800a184 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a18c:	b5b0      	push	{r4, r5, r7, lr}
 800a18e:	b08e      	sub	sp, #56	@ 0x38
 800a190:	af04      	add	r7, sp, #16
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a1a8:	2376      	movs	r3, #118	@ 0x76
 800a1aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681d      	ldr	r5, [r3, #0]
 800a1b0:	466c      	mov	r4, sp
 800a1b2:	f107 0314 	add.w	r3, r7, #20
 800a1b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f003 f8ad 	bl	800d324 <SDIO_Init>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e04f      	b.n	800a27c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a1dc:	4b29      	ldr	r3, [pc, #164]	@ (800a284 <HAL_SD_InitCard+0xf8>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f003 f8e5 	bl	800d3b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a1ec:	4b25      	ldr	r3, [pc, #148]	@ (800a284 <HAL_SD_InitCard+0xf8>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a1f2:	2002      	movs	r0, #2
 800a1f4:	f7f9 ffb4 	bl	8004160 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fe79 	bl	800aef0 <SD_PowerON>
 800a1fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e02e      	b.n	800a27c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fd98 	bl	800ad54 <SD_InitCard>
 800a224:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e01b      	b.n	800a27c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a24c:	4618      	mov	r0, r3
 800a24e:	f003 f944 	bl	800d4da <SDMMC_CmdBlockLength>
 800a252:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00f      	beq.n	800a27a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a0a      	ldr	r2, [pc, #40]	@ (800a288 <HAL_SD_InitCard+0xfc>)
 800a260:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3728      	adds	r7, #40	@ 0x28
 800a280:	46bd      	mov	sp, r7
 800a282:	bdb0      	pop	{r4, r5, r7, pc}
 800a284:	422580a0 	.word	0x422580a0
 800a288:	004005ff 	.word	0x004005ff

0800a28c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b092      	sub	sp, #72	@ 0x48
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a29a:	f7f9 ff55 	bl	8004148 <HAL_GetTick>
 800a29e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d107      	bne.n	800a2be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e1c5      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	f040 81b8 	bne.w	800a63c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d907      	bls.n	800a2f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e1ac      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a304:	2b01      	cmp	r3, #1
 800a306:	d002      	beq.n	800a30e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30a:	025b      	lsls	r3, r3, #9
 800a30c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295
 800a312:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	025b      	lsls	r3, r3, #9
 800a318:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a31a:	2390      	movs	r3, #144	@ 0x90
 800a31c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a31e:	2302      	movs	r3, #2
 800a320:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a322:	2300      	movs	r3, #0
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a326:	2301      	movs	r3, #1
 800a328:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f107 0214 	add.w	r2, r7, #20
 800a332:	4611      	mov	r1, r2
 800a334:	4618      	mov	r0, r3
 800a336:	f003 f8a4 	bl	800d482 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d90a      	bls.n	800a356 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2202      	movs	r2, #2
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a34c:	4618      	mov	r0, r3
 800a34e:	f003 f908 	bl	800d562 <SDMMC_CmdReadMultiBlock>
 800a352:	6478      	str	r0, [r7, #68]	@ 0x44
 800a354:	e009      	b.n	800a36a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a362:	4618      	mov	r0, r3
 800a364:	f003 f8db 	bl	800d51e <SDMMC_CmdReadSingleBlock>
 800a368:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a36a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d012      	beq.n	800a396 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a7e      	ldr	r2, [pc, #504]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a376:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a37e:	431a      	orrs	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e159      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a39a:	e061      	b.n	800a460 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d03c      	beq.n	800a424 <HAL_SD_ReadBlocks+0x198>
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d039      	beq.n	800a424 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3b4:	e033      	b.n	800a41e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f002 ffdd 	bl	800d37a <SDIO_ReadFIFO>
 800a3c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d8:	0a1b      	lsrs	r3, r3, #8
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ee:	0c1b      	lsrs	r3, r3, #16
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fe:	3b01      	subs	r3, #1
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a404:	0e1b      	lsrs	r3, r3, #24
 800a406:	b2da      	uxtb	r2, r3
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40e:	3301      	adds	r3, #1
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a414:	3b01      	subs	r3, #1
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41a:	3301      	adds	r3, #1
 800a41c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a41e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a420:	2b07      	cmp	r3, #7
 800a422:	d9c8      	bls.n	800a3b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a424:	f7f9 fe90 	bl	8004148 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a430:	429a      	cmp	r2, r3
 800a432:	d902      	bls.n	800a43a <HAL_SD_ReadBlocks+0x1ae>
 800a434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a436:	2b00      	cmp	r3, #0
 800a438:	d112      	bne.n	800a460 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a4c      	ldr	r2, [pc, #304]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a440:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a446:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e0f4      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a466:	f240 332a 	movw	r3, #810	@ 0x32a
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d095      	beq.n	800a39c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d022      	beq.n	800a4c4 <HAL_SD_ReadBlocks+0x238>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d91f      	bls.n	800a4c4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d01b      	beq.n	800a4c4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4618      	mov	r0, r3
 800a492:	f003 f8cd 	bl	800d630 <SDMMC_CmdStopTransfer>
 800a496:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d012      	beq.n	800a4c4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a33      	ldr	r2, [pc, #204]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a4a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e0c2      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	f003 0308 	and.w	r3, r3, #8
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_SD_ReadBlocks+0x254>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d012      	beq.n	800a506 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a22      	ldr	r2, [pc, #136]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ec:	f043 0208 	orr.w	r2, r3, #8
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e0a1      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d012      	beq.n	800a53a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a15      	ldr	r2, [pc, #84]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a51a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a520:	f043 0202 	orr.w	r2, r3, #2
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e087      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d064      	beq.n	800a612 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a08      	ldr	r2, [pc, #32]	@ (800a570 <HAL_SD_ReadBlocks+0x2e4>)
 800a54e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e06d      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
 800a56e:	bf00      	nop
 800a570:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f002 fefe 	bl	800d37a <SDIO_ReadFIFO>
 800a57e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	b2da      	uxtb	r2, r3
 800a584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a586:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58a:	3301      	adds	r3, #1
 800a58c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a590:	3b01      	subs	r3, #1
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	0a1b      	lsrs	r3, r3, #8
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ac:	0c1b      	lsrs	r3, r3, #16
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c2:	0e1b      	lsrs	r3, r3, #24
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5d6:	f7f9 fdb7 	bl	8004148 <HAL_GetTick>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d902      	bls.n	800a5ec <HAL_SD_ReadBlocks+0x360>
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d112      	bne.n	800a612 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a18      	ldr	r2, [pc, #96]	@ (800a654 <HAL_SD_ReadBlocks+0x3c8>)
 800a5f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e01b      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <HAL_SD_ReadBlocks+0x39a>
 800a620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1a6      	bne.n	800a574 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a62e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	e006      	b.n	800a64a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a640:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
  }
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3748      	adds	r7, #72	@ 0x48
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	004005ff 	.word	0x004005ff

0800a658 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b092      	sub	sp, #72	@ 0x48
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a666:	f7f9 fd6f 	bl	8004148 <HAL_GetTick>
 800a66a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d107      	bne.n	800a68a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e16d      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b01      	cmp	r3, #1
 800a694:	f040 8160 	bne.w	800a958 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a69e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	441a      	add	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d907      	bls.n	800a6bc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e154      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2203      	movs	r2, #3
 800a6c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d002      	beq.n	800a6da <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	025b      	lsls	r3, r3, #9
 800a6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295
 800a6de:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	025b      	lsls	r3, r3, #9
 800a6e4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a6e6:	2390      	movs	r3, #144	@ 0x90
 800a6e8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f107 0218 	add.w	r2, r7, #24
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f002 febe 	bl	800d482 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d90a      	bls.n	800a722 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a718:	4618      	mov	r0, r3
 800a71a:	f002 ff66 	bl	800d5ea <SDMMC_CmdWriteMultiBlock>
 800a71e:	6478      	str	r0, [r7, #68]	@ 0x44
 800a720:	e009      	b.n	800a736 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2210      	movs	r2, #16
 800a726:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a72e:	4618      	mov	r0, r3
 800a730:	f002 ff39 	bl	800d5a6 <SDMMC_CmdWriteSingleBlock>
 800a734:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d012      	beq.n	800a762 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a8b      	ldr	r2, [pc, #556]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a742:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74a:	431a      	orrs	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e101      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a766:	e065      	b.n	800a834 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a76e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d040      	beq.n	800a7f8 <HAL_SD_WriteBlocks+0x1a0>
 800a776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d03d      	beq.n	800a7f8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a780:	e037      	b.n	800a7f2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	3301      	adds	r3, #1
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a790:	3b01      	subs	r3, #1
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	021a      	lsls	r2, r3, #8
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	041a      	lsls	r2, r3, #16
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	061a      	lsls	r2, r3, #24
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f107 0214 	add.w	r2, r7, #20
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f002 fdd4 	bl	800d394 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f4:	2b07      	cmp	r3, #7
 800a7f6:	d9c4      	bls.n	800a782 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7f8:	f7f9 fca6 	bl	8004148 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a804:	429a      	cmp	r2, r3
 800a806:	d902      	bls.n	800a80e <HAL_SD_WriteBlocks+0x1b6>
 800a808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d112      	bne.n	800a834 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a57      	ldr	r2, [pc, #348]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a814:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81c:	431a      	orrs	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e098      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a83a:	f240 331a 	movw	r3, #794	@ 0x31a
 800a83e:	4013      	ands	r3, r2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d091      	beq.n	800a768 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d022      	beq.n	800a898 <HAL_SD_WriteBlocks+0x240>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d91f      	bls.n	800a898 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d01b      	beq.n	800a898 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f002 fee3 	bl	800d630 <SDMMC_CmdStopTransfer>
 800a86a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a86c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d012      	beq.n	800a898 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a3e      	ldr	r2, [pc, #248]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a878:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a880:	431a      	orrs	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e066      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <HAL_SD_WriteBlocks+0x25c>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a2d      	ldr	r2, [pc, #180]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	f043 0208 	orr.w	r2, r3, #8
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e045      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a20      	ldr	r2, [pc, #128]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a8ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f4:	f043 0202 	orr.w	r2, r3, #2
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e02b      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a914:	f003 0310 	and.w	r3, r3, #16
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d012      	beq.n	800a942 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a13      	ldr	r2, [pc, #76]	@ (800a970 <HAL_SD_WriteBlocks+0x318>)
 800a922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a928:	f043 0210 	orr.w	r2, r3, #16
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e011      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a94a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	e006      	b.n	800a966 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
  }
}
 800a966:	4618      	mov	r0, r3
 800a968:	3748      	adds	r7, #72	@ 0x48
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	004005ff 	.word	0x004005ff

0800a974 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a982:	0f9b      	lsrs	r3, r3, #30
 800a984:	b2da      	uxtb	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a98e:	0e9b      	lsrs	r3, r3, #26
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	b2da      	uxtb	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a0:	0e1b      	lsrs	r3, r3, #24
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0303 	and.w	r3, r3, #3
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9be:	0a1b      	lsrs	r3, r3, #8
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d4:	0d1b      	lsrs	r3, r3, #20
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9e0:	0c1b      	lsrs	r3, r3, #16
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9f2:	0bdb      	lsrs	r3, r3, #15
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa04:	0b9b      	lsrs	r3, r3, #14
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa16:	0b5b      	lsrs	r3, r3, #13
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa28:	0b1b      	lsrs	r3, r3, #12
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d163      	bne.n	800ab0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa48:	009a      	lsls	r2, r3, #2
 800aa4a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa4e:	4013      	ands	r3, r2
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aa54:	0f92      	lsrs	r2, r2, #30
 800aa56:	431a      	orrs	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa60:	0edb      	lsrs	r3, r3, #27
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0307 	and.w	r3, r3, #7
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa72:	0e1b      	lsrs	r3, r3, #24
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa84:	0d5b      	lsrs	r3, r3, #21
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa96:	0c9b      	lsrs	r3, r3, #18
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 0307 	and.w	r3, r3, #7
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa8:	0bdb      	lsrs	r3, r3, #15
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0307 	and.w	r3, r3, #7
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	7e1b      	ldrb	r3, [r3, #24]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	3302      	adds	r3, #2
 800aacc:	2201      	movs	r2, #1
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800aad6:	fb03 f202 	mul.w	r2, r3, r2
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	7a1b      	ldrb	r3, [r3, #8]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 030f 	and.w	r3, r3, #15
 800aae8:	2201      	movs	r2, #1
 800aaea:	409a      	lsls	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800aaf8:	0a52      	lsrs	r2, r2, #9
 800aafa:	fb03 f202 	mul.w	r2, r3, r2
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab08:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab0a:	e031      	b.n	800ab70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d11d      	bne.n	800ab50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab18:	041b      	lsls	r3, r3, #16
 800ab1a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab22:	0c1b      	lsrs	r3, r3, #16
 800ab24:	431a      	orrs	r2, r3
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	029a      	lsls	r2, r3, #10
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab44:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab4e:	e00f      	b.n	800ab70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a58      	ldr	r2, [pc, #352]	@ (800acb8 <HAL_SD_GetCardCSD+0x344>)
 800ab56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e09d      	b.n	800acac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab74:	0b9b      	lsrs	r3, r3, #14
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab86:	09db      	lsrs	r3, r3, #7
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba8:	0fdb      	lsrs	r3, r3, #31
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb4:	0f5b      	lsrs	r3, r3, #29
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc6:	0e9b      	lsrs	r3, r3, #26
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd8:	0d9b      	lsrs	r3, r3, #22
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abea:	0d5b      	lsrs	r3, r3, #21
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac06:	0c1b      	lsrs	r3, r3, #16
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1a:	0bdb      	lsrs	r3, r3, #15
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2e:	0b9b      	lsrs	r3, r3, #14
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac42:	0b5b      	lsrs	r3, r3, #13
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac56:	0b1b      	lsrs	r3, r3, #12
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac6a:	0a9b      	lsrs	r3, r3, #10
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0303 	and.w	r3, r3, #3
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac92:	085b      	lsrs	r3, r3, #1
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	004005ff 	.word	0x004005ff

0800acbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ad20:	f107 030c 	add.w	r3, r7, #12
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f970 	bl	800b00c <SD_SendStatus>
 800ad2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d005      	beq.n	800ad40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	0a5b      	lsrs	r3, r3, #9
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad4a:	693b      	ldr	r3, [r7, #16]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad54:	b5b0      	push	{r4, r5, r7, lr}
 800ad56:	b094      	sub	sp, #80	@ 0x50
 800ad58:	af04      	add	r7, sp, #16
 800ad5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f002 fb34 	bl	800d3d2 <SDIO_GetPowerState>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad74:	e0b8      	b.n	800aee8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d02f      	beq.n	800adde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f002 fd1b 	bl	800d7be <SDMMC_CmdSendCID>
 800ad88:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad92:	e0a9      	b.n	800aee8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f002 fb5e 	bl	800d45c <SDIO_GetResponse>
 800ada0:	4602      	mov	r2, r0
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2104      	movs	r1, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f002 fb55 	bl	800d45c <SDIO_GetResponse>
 800adb2:	4602      	mov	r2, r0
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2108      	movs	r1, #8
 800adbe:	4618      	mov	r0, r3
 800adc0:	f002 fb4c 	bl	800d45c <SDIO_GetResponse>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	210c      	movs	r1, #12
 800add0:	4618      	mov	r0, r3
 800add2:	f002 fb43 	bl	800d45c <SDIO_GetResponse>
 800add6:	4602      	mov	r2, r0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d00d      	beq.n	800ae02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f107 020e 	add.w	r2, r7, #14
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f002 fd21 	bl	800d838 <SDMMC_CmdSetRelAdd>
 800adf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <SD_InitCard+0xae>
    {
      return errorstate;
 800adfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae00:	e072      	b.n	800aee8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d036      	beq.n	800ae78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae0a:	89fb      	ldrh	r3, [r7, #14]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae1a:	041b      	lsls	r3, r3, #16
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4610      	mov	r0, r2
 800ae20:	f002 fceb 	bl	800d7fa <SDMMC_CmdSendCSD>
 800ae24:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae2e:	e05b      	b.n	800aee8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 fb10 	bl	800d45c <SDIO_GetResponse>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2104      	movs	r1, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f002 fb07 	bl	800d45c <SDIO_GetResponse>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2108      	movs	r1, #8
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 fafe 	bl	800d45c <SDIO_GetResponse>
 800ae60:	4602      	mov	r2, r0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	210c      	movs	r1, #12
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f002 faf5 	bl	800d45c <SDIO_GetResponse>
 800ae72:	4602      	mov	r2, r0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f002 faec 	bl	800d45c <SDIO_GetResponse>
 800ae84:	4603      	mov	r3, r0
 800ae86:	0d1a      	lsrs	r2, r3, #20
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae8c:	f107 0310 	add.w	r3, r7, #16
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fd6e 	bl	800a974 <HAL_SD_GetCardCSD>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aea2:	e021      	b.n	800aee8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6819      	ldr	r1, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeac:	041b      	lsls	r3, r3, #16
 800aeae:	2200      	movs	r2, #0
 800aeb0:	461c      	mov	r4, r3
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	4608      	mov	r0, r1
 800aeba:	f002 fbdb 	bl	800d674 <SDMMC_CmdSelDesel>
 800aebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <SD_InitCard+0x176>
  {
    return errorstate;
 800aec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec8:	e00e      	b.n	800aee8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681d      	ldr	r5, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	466c      	mov	r4, sp
 800aed2:	f103 0210 	add.w	r2, r3, #16
 800aed6:	ca07      	ldmia	r2, {r0, r1, r2}
 800aed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aedc:	3304      	adds	r3, #4
 800aede:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aee0:	4628      	mov	r0, r5
 800aee2:	f002 fa1f 	bl	800d324 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3740      	adds	r7, #64	@ 0x40
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bdb0      	pop	{r4, r5, r7, pc}

0800aef0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	2300      	movs	r3, #0
 800af02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4618      	mov	r0, r3
 800af0a:	f002 fbd6 	bl	800d6ba <SDMMC_CmdGoIdleState>
 800af0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <SD_PowerON+0x2a>
  {
    return errorstate;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	e072      	b.n	800b000 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4618      	mov	r0, r3
 800af20:	f002 fbe9 	bl	800d6f6 <SDMMC_CmdOperCond>
 800af24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f002 fbbf 	bl	800d6ba <SDMMC_CmdGoIdleState>
 800af3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <SD_PowerON+0x5e>
    {
      return errorstate;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	e05b      	b.n	800b000 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af52:	2b01      	cmp	r3, #1
 800af54:	d137      	bne.n	800afc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2100      	movs	r1, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fbe9 	bl	800d734 <SDMMC_CmdAppCommand>
 800af62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d02d      	beq.n	800afc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af6e:	e047      	b.n	800b000 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f002 fbdc 	bl	800d734 <SDMMC_CmdAppCommand>
 800af7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <SD_PowerON+0x98>
    {
      return errorstate;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	e03b      	b.n	800b000 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	491e      	ldr	r1, [pc, #120]	@ (800b008 <SD_PowerON+0x118>)
 800af8e:	4618      	mov	r0, r3
 800af90:	f002 fbf2 	bl	800d778 <SDMMC_CmdAppOperCommand>
 800af94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800afa0:	e02e      	b.n	800b000 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2100      	movs	r1, #0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 fa57 	bl	800d45c <SDIO_GetResponse>
 800afae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	0fdb      	lsrs	r3, r3, #31
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <SD_PowerON+0xcc>
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <SD_PowerON+0xce>
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]

    count++;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3301      	adds	r3, #1
 800afc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afcc:	4293      	cmp	r3, r2
 800afce:	d802      	bhi.n	800afd6 <SD_PowerON+0xe6>
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0cc      	beq.n	800af70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afdc:	4293      	cmp	r3, r2
 800afde:	d902      	bls.n	800afe6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afe4:	e00c      	b.n	800b000 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	645a      	str	r2, [r3, #68]	@ 0x44
 800aff6:	e002      	b.n	800affe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	c1100000 	.word	0xc1100000

0800b00c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b01c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b020:	e018      	b.n	800b054 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f002 fc23 	bl	800d87a <SDMMC_CmdSendStatus>
 800b034:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	e009      	b.n	800b054 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2100      	movs	r1, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f002 fa08 	bl	800d45c <SDIO_GetResponse>
 800b04c:	4602      	mov	r2, r0
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d101      	bne.n	800b06e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e041      	b.n	800b0f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7f8 fcb0 	bl	80039e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3304      	adds	r3, #4
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f000 fd18 	bl	800bad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2202      	movs	r2, #2
 800b106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6a1a      	ldr	r2, [r3, #32]
 800b110:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b114:	4013      	ands	r3, r2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10f      	bne.n	800b13a <HAL_TIM_Base_DeInit+0x40>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6a1a      	ldr	r2, [r3, #32]
 800b120:	f240 4344 	movw	r3, #1092	@ 0x444
 800b124:	4013      	ands	r3, r2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d107      	bne.n	800b13a <HAL_TIM_Base_DeInit+0x40>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0201 	bic.w	r2, r2, #1
 800b138:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7f8 fd14 	bl	8003b68 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d001      	beq.n	800b1bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e03c      	b.n	800b236 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b244 <HAL_TIM_Base_Start+0xa0>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d018      	beq.n	800b200 <HAL_TIM_Base_Start+0x5c>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d6:	d013      	beq.n	800b200 <HAL_TIM_Base_Start+0x5c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1a      	ldr	r2, [pc, #104]	@ (800b248 <HAL_TIM_Base_Start+0xa4>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00e      	beq.n	800b200 <HAL_TIM_Base_Start+0x5c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a19      	ldr	r2, [pc, #100]	@ (800b24c <HAL_TIM_Base_Start+0xa8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d009      	beq.n	800b200 <HAL_TIM_Base_Start+0x5c>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <HAL_TIM_Base_Start+0xac>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d004      	beq.n	800b200 <HAL_TIM_Base_Start+0x5c>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <HAL_TIM_Base_Start+0xb0>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d111      	bne.n	800b224 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 0307 	and.w	r3, r3, #7
 800b20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d010      	beq.n	800b234 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f042 0201 	orr.w	r2, r2, #1
 800b220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b222:	e007      	b.n	800b234 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0201 	orr.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40010000 	.word	0x40010000
 800b248:	40000400 	.word	0x40000400
 800b24c:	40000800 	.word	0x40000800
 800b250:	40000c00 	.word	0x40000c00
 800b254:	40014000 	.word	0x40014000

0800b258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d001      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e044      	b.n	800b2fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2202      	movs	r2, #2
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a1e      	ldr	r2, [pc, #120]	@ (800b308 <HAL_TIM_Base_Start_IT+0xb0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d018      	beq.n	800b2c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29a:	d013      	beq.n	800b2c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b30c <HAL_TIM_Base_Start_IT+0xb4>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d00e      	beq.n	800b2c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a19      	ldr	r2, [pc, #100]	@ (800b310 <HAL_TIM_Base_Start_IT+0xb8>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d009      	beq.n	800b2c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a17      	ldr	r2, [pc, #92]	@ (800b314 <HAL_TIM_Base_Start_IT+0xbc>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d004      	beq.n	800b2c4 <HAL_TIM_Base_Start_IT+0x6c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a16      	ldr	r2, [pc, #88]	@ (800b318 <HAL_TIM_Base_Start_IT+0xc0>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d111      	bne.n	800b2e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b06      	cmp	r3, #6
 800b2d4:	d010      	beq.n	800b2f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f042 0201 	orr.w	r2, r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e6:	e007      	b.n	800b2f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0201 	orr.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	40010000 	.word	0x40010000
 800b30c:	40000400 	.word	0x40000400
 800b310:	40000800 	.word	0x40000800
 800b314:	40000c00 	.word	0x40000c00
 800b318:	40014000 	.word	0x40014000

0800b31c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0201 	bic.w	r2, r2, #1
 800b332:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6a1a      	ldr	r2, [r3, #32]
 800b33a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b33e:	4013      	ands	r3, r2
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10f      	bne.n	800b364 <HAL_TIM_Base_Stop_IT+0x48>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6a1a      	ldr	r2, [r3, #32]
 800b34a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b34e:	4013      	ands	r3, r2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d107      	bne.n	800b364 <HAL_TIM_Base_Stop_IT+0x48>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f022 0201 	bic.w	r2, r2, #1
 800b362:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e041      	b.n	800b410 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f839 	bl	800b418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f000 fb89 	bl	800bad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <HAL_TIM_PWM_Start+0x24>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b01      	cmp	r3, #1
 800b446:	bf14      	ite	ne
 800b448:	2301      	movne	r3, #1
 800b44a:	2300      	moveq	r3, #0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	e022      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b04      	cmp	r3, #4
 800b454:	d109      	bne.n	800b46a <HAL_TIM_PWM_Start+0x3e>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b01      	cmp	r3, #1
 800b460:	bf14      	ite	ne
 800b462:	2301      	movne	r3, #1
 800b464:	2300      	moveq	r3, #0
 800b466:	b2db      	uxtb	r3, r3
 800b468:	e015      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d109      	bne.n	800b484 <HAL_TIM_PWM_Start+0x58>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b01      	cmp	r3, #1
 800b47a:	bf14      	ite	ne
 800b47c:	2301      	movne	r3, #1
 800b47e:	2300      	moveq	r3, #0
 800b480:	b2db      	uxtb	r3, r3
 800b482:	e008      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	bf14      	ite	ne
 800b490:	2301      	movne	r3, #1
 800b492:	2300      	moveq	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e068      	b.n	800b570 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <HAL_TIM_PWM_Start+0x82>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4ac:	e013      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d104      	bne.n	800b4be <HAL_TIM_PWM_Start+0x92>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4bc:	e00b      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b08      	cmp	r3, #8
 800b4c2:	d104      	bne.n	800b4ce <HAL_TIM_PWM_Start+0xa2>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4cc:	e003      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fda8 	bl	800c034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a23      	ldr	r2, [pc, #140]	@ (800b578 <HAL_TIM_PWM_Start+0x14c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d107      	bne.n	800b4fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a1d      	ldr	r2, [pc, #116]	@ (800b578 <HAL_TIM_PWM_Start+0x14c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d018      	beq.n	800b53a <HAL_TIM_PWM_Start+0x10e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b510:	d013      	beq.n	800b53a <HAL_TIM_PWM_Start+0x10e>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a19      	ldr	r2, [pc, #100]	@ (800b57c <HAL_TIM_PWM_Start+0x150>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00e      	beq.n	800b53a <HAL_TIM_PWM_Start+0x10e>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a17      	ldr	r2, [pc, #92]	@ (800b580 <HAL_TIM_PWM_Start+0x154>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d009      	beq.n	800b53a <HAL_TIM_PWM_Start+0x10e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a16      	ldr	r2, [pc, #88]	@ (800b584 <HAL_TIM_PWM_Start+0x158>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d004      	beq.n	800b53a <HAL_TIM_PWM_Start+0x10e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a14      	ldr	r2, [pc, #80]	@ (800b588 <HAL_TIM_PWM_Start+0x15c>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d111      	bne.n	800b55e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b06      	cmp	r3, #6
 800b54a:	d010      	beq.n	800b56e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f042 0201 	orr.w	r2, r2, #1
 800b55a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55c:	e007      	b.n	800b56e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f042 0201 	orr.w	r2, r2, #1
 800b56c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	40010000 	.word	0x40010000
 800b57c:	40000400 	.word	0x40000400
 800b580:	40000800 	.word	0x40000800
 800b584:	40000c00 	.word	0x40000c00
 800b588:	40014000 	.word	0x40014000

0800b58c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d020      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01b      	beq.n	800b5f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f06f 0202 	mvn.w	r2, #2
 800b5c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fa5b 	bl	800ba92 <HAL_TIM_IC_CaptureCallback>
 800b5dc:	e005      	b.n	800b5ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa4d 	bl	800ba7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fa5e 	bl	800baa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d020      	beq.n	800b63c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01b      	beq.n	800b63c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f06f 0204 	mvn.w	r2, #4
 800b60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2202      	movs	r2, #2
 800b612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa35 	bl	800ba92 <HAL_TIM_IC_CaptureCallback>
 800b628:	e005      	b.n	800b636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fa27 	bl	800ba7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fa38 	bl	800baa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 0308 	and.w	r3, r3, #8
 800b642:	2b00      	cmp	r3, #0
 800b644:	d020      	beq.n	800b688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f003 0308 	and.w	r3, r3, #8
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01b      	beq.n	800b688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f06f 0208 	mvn.w	r2, #8
 800b658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2204      	movs	r2, #4
 800b65e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fa0f 	bl	800ba92 <HAL_TIM_IC_CaptureCallback>
 800b674:	e005      	b.n	800b682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa01 	bl	800ba7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fa12 	bl	800baa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f003 0310 	and.w	r3, r3, #16
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d020      	beq.n	800b6d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f003 0310 	and.w	r3, r3, #16
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d01b      	beq.n	800b6d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0210 	mvn.w	r2, #16
 800b6a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f9e9 	bl	800ba92 <HAL_TIM_IC_CaptureCallback>
 800b6c0:	e005      	b.n	800b6ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f9db 	bl	800ba7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9ec 	bl	800baa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00c      	beq.n	800b6f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f06f 0201 	mvn.w	r2, #1
 800b6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7f7 ff66 	bl	80035c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00c      	beq.n	800b71c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d007      	beq.n	800b71c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fd2a 	bl	800c170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00c      	beq.n	800b740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d007      	beq.n	800b740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f9bd 	bl	800baba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f003 0320 	and.w	r3, r3, #32
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00c      	beq.n	800b764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f003 0320 	and.w	r3, r3, #32
 800b750:	2b00      	cmp	r3, #0
 800b752:	d007      	beq.n	800b764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f06f 0220 	mvn.w	r2, #32
 800b75c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fcfc 	bl	800c15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b786:	2302      	movs	r3, #2
 800b788:	e0ae      	b.n	800b8e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b0c      	cmp	r3, #12
 800b796:	f200 809f 	bhi.w	800b8d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b79a:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7d5 	.word	0x0800b7d5
 800b7a4:	0800b8d9 	.word	0x0800b8d9
 800b7a8:	0800b8d9 	.word	0x0800b8d9
 800b7ac:	0800b8d9 	.word	0x0800b8d9
 800b7b0:	0800b815 	.word	0x0800b815
 800b7b4:	0800b8d9 	.word	0x0800b8d9
 800b7b8:	0800b8d9 	.word	0x0800b8d9
 800b7bc:	0800b8d9 	.word	0x0800b8d9
 800b7c0:	0800b857 	.word	0x0800b857
 800b7c4:	0800b8d9 	.word	0x0800b8d9
 800b7c8:	0800b8d9 	.word	0x0800b8d9
 800b7cc:	0800b8d9 	.word	0x0800b8d9
 800b7d0:	0800b897 	.word	0x0800b897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 fa04 	bl	800bbe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699a      	ldr	r2, [r3, #24]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f042 0208 	orr.w	r2, r2, #8
 800b7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f022 0204 	bic.w	r2, r2, #4
 800b7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6999      	ldr	r1, [r3, #24]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	691a      	ldr	r2, [r3, #16]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	619a      	str	r2, [r3, #24]
      break;
 800b812:	e064      	b.n	800b8de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fa4a 	bl	800bcb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	699a      	ldr	r2, [r3, #24]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b82e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	699a      	ldr	r2, [r3, #24]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b83e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6999      	ldr	r1, [r3, #24]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	021a      	lsls	r2, r3, #8
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	619a      	str	r2, [r3, #24]
      break;
 800b854:	e043      	b.n	800b8de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 fa95 	bl	800bd8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69da      	ldr	r2, [r3, #28]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f042 0208 	orr.w	r2, r2, #8
 800b870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f022 0204 	bic.w	r2, r2, #4
 800b880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69d9      	ldr	r1, [r3, #28]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	61da      	str	r2, [r3, #28]
      break;
 800b894:	e023      	b.n	800b8de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fadf 	bl	800be60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69da      	ldr	r2, [r3, #28]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69da      	ldr	r2, [r3, #28]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69d9      	ldr	r1, [r3, #28]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	021a      	lsls	r2, r3, #8
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	61da      	str	r2, [r3, #28]
      break;
 800b8d6:	e002      	b.n	800b8de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	75fb      	strb	r3, [r7, #23]
      break;
 800b8dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <HAL_TIM_ConfigClockSource+0x1c>
 800b908:	2302      	movs	r3, #2
 800b90a:	e0b4      	b.n	800ba76 <HAL_TIM_ConfigClockSource+0x186>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2202      	movs	r2, #2
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b92a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b944:	d03e      	beq.n	800b9c4 <HAL_TIM_ConfigClockSource+0xd4>
 800b946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b94a:	f200 8087 	bhi.w	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b94e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b952:	f000 8086 	beq.w	800ba62 <HAL_TIM_ConfigClockSource+0x172>
 800b956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b95a:	d87f      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b95c:	2b70      	cmp	r3, #112	@ 0x70
 800b95e:	d01a      	beq.n	800b996 <HAL_TIM_ConfigClockSource+0xa6>
 800b960:	2b70      	cmp	r3, #112	@ 0x70
 800b962:	d87b      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b964:	2b60      	cmp	r3, #96	@ 0x60
 800b966:	d050      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0x11a>
 800b968:	2b60      	cmp	r3, #96	@ 0x60
 800b96a:	d877      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b96c:	2b50      	cmp	r3, #80	@ 0x50
 800b96e:	d03c      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0xfa>
 800b970:	2b50      	cmp	r3, #80	@ 0x50
 800b972:	d873      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b974:	2b40      	cmp	r3, #64	@ 0x40
 800b976:	d058      	beq.n	800ba2a <HAL_TIM_ConfigClockSource+0x13a>
 800b978:	2b40      	cmp	r3, #64	@ 0x40
 800b97a:	d86f      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b97c:	2b30      	cmp	r3, #48	@ 0x30
 800b97e:	d064      	beq.n	800ba4a <HAL_TIM_ConfigClockSource+0x15a>
 800b980:	2b30      	cmp	r3, #48	@ 0x30
 800b982:	d86b      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b984:	2b20      	cmp	r3, #32
 800b986:	d060      	beq.n	800ba4a <HAL_TIM_ConfigClockSource+0x15a>
 800b988:	2b20      	cmp	r3, #32
 800b98a:	d867      	bhi.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d05c      	beq.n	800ba4a <HAL_TIM_ConfigClockSource+0x15a>
 800b990:	2b10      	cmp	r3, #16
 800b992:	d05a      	beq.n	800ba4a <HAL_TIM_ConfigClockSource+0x15a>
 800b994:	e062      	b.n	800ba5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9a6:	f000 fb25 	bl	800bff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b9b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	609a      	str	r2, [r3, #8]
      break;
 800b9c2:	e04f      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9d4:	f000 fb0e 	bl	800bff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9e6:	609a      	str	r2, [r3, #8]
      break;
 800b9e8:	e03c      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f000 fa82 	bl	800bf00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2150      	movs	r1, #80	@ 0x50
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 fadb 	bl	800bfbe <TIM_ITRx_SetConfig>
      break;
 800ba08:	e02c      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba16:	461a      	mov	r2, r3
 800ba18:	f000 faa1 	bl	800bf5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2160      	movs	r1, #96	@ 0x60
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 facb 	bl	800bfbe <TIM_ITRx_SetConfig>
      break;
 800ba28:	e01c      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba36:	461a      	mov	r2, r3
 800ba38:	f000 fa62 	bl	800bf00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2140      	movs	r1, #64	@ 0x40
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 fabb 	bl	800bfbe <TIM_ITRx_SetConfig>
      break;
 800ba48:	e00c      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f000 fab2 	bl	800bfbe <TIM_ITRx_SetConfig>
      break;
 800ba5a:	e003      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba60:	e000      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800baae:	bf00      	nop
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a3a      	ldr	r2, [pc, #232]	@ (800bbcc <TIM_Base_SetConfig+0xfc>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d00f      	beq.n	800bb08 <TIM_Base_SetConfig+0x38>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baee:	d00b      	beq.n	800bb08 <TIM_Base_SetConfig+0x38>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a37      	ldr	r2, [pc, #220]	@ (800bbd0 <TIM_Base_SetConfig+0x100>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d007      	beq.n	800bb08 <TIM_Base_SetConfig+0x38>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a36      	ldr	r2, [pc, #216]	@ (800bbd4 <TIM_Base_SetConfig+0x104>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d003      	beq.n	800bb08 <TIM_Base_SetConfig+0x38>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a35      	ldr	r2, [pc, #212]	@ (800bbd8 <TIM_Base_SetConfig+0x108>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d108      	bne.n	800bb1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a2b      	ldr	r2, [pc, #172]	@ (800bbcc <TIM_Base_SetConfig+0xfc>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d01b      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb28:	d017      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a28      	ldr	r2, [pc, #160]	@ (800bbd0 <TIM_Base_SetConfig+0x100>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d013      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a27      	ldr	r2, [pc, #156]	@ (800bbd4 <TIM_Base_SetConfig+0x104>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00f      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a26      	ldr	r2, [pc, #152]	@ (800bbd8 <TIM_Base_SetConfig+0x108>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00b      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a25      	ldr	r2, [pc, #148]	@ (800bbdc <TIM_Base_SetConfig+0x10c>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d007      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a24      	ldr	r2, [pc, #144]	@ (800bbe0 <TIM_Base_SetConfig+0x110>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d003      	beq.n	800bb5a <TIM_Base_SetConfig+0x8a>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a23      	ldr	r2, [pc, #140]	@ (800bbe4 <TIM_Base_SetConfig+0x114>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d108      	bne.n	800bb6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a0e      	ldr	r2, [pc, #56]	@ (800bbcc <TIM_Base_SetConfig+0xfc>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d103      	bne.n	800bba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d105      	bne.n	800bbbe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f023 0201 	bic.w	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	611a      	str	r2, [r3, #16]
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	40010000 	.word	0x40010000
 800bbd0:	40000400 	.word	0x40000400
 800bbd4:	40000800 	.word	0x40000800
 800bbd8:	40000c00 	.word	0x40000c00
 800bbdc:	40014000 	.word	0x40014000
 800bbe0:	40014400 	.word	0x40014400
 800bbe4:	40014800 	.word	0x40014800

0800bbe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	f023 0201 	bic.w	r2, r3, #1
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 0303 	bic.w	r3, r3, #3
 800bc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f023 0302 	bic.w	r3, r3, #2
 800bc30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb0 <TIM_OC1_SetConfig+0xc8>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d10c      	bne.n	800bc5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f023 0308 	bic.w	r3, r3, #8
 800bc4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f023 0304 	bic.w	r3, r3, #4
 800bc5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a13      	ldr	r2, [pc, #76]	@ (800bcb0 <TIM_OC1_SetConfig+0xc8>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d111      	bne.n	800bc8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	621a      	str	r2, [r3, #32]
}
 800bca4:	bf00      	nop
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	40010000 	.word	0x40010000

0800bcb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	f023 0210 	bic.w	r2, r3, #16
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f023 0320 	bic.w	r3, r3, #32
 800bcfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bd88 <TIM_OC2_SetConfig+0xd4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d10d      	bne.n	800bd30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	011b      	lsls	r3, r3, #4
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a15      	ldr	r2, [pc, #84]	@ (800bd88 <TIM_OC2_SetConfig+0xd4>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d113      	bne.n	800bd60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	621a      	str	r2, [r3, #32]
}
 800bd7a:	bf00      	nop
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	40010000 	.word	0x40010000

0800bd8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b087      	sub	sp, #28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0303 	bic.w	r3, r3, #3
 800bdc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bdd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a1d      	ldr	r2, [pc, #116]	@ (800be5c <TIM_OC3_SetConfig+0xd0>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d10d      	bne.n	800be06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a14      	ldr	r2, [pc, #80]	@ (800be5c <TIM_OC3_SetConfig+0xd0>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d113      	bne.n	800be36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	011b      	lsls	r3, r3, #4
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4313      	orrs	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	4313      	orrs	r3, r2
 800be34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	621a      	str	r2, [r3, #32]
}
 800be50:	bf00      	nop
 800be52:	371c      	adds	r7, #28
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	40010000 	.word	0x40010000

0800be60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800beaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	031b      	lsls	r3, r3, #12
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a10      	ldr	r2, [pc, #64]	@ (800befc <TIM_OC4_SetConfig+0x9c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d109      	bne.n	800bed4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	019b      	lsls	r3, r3, #6
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	621a      	str	r2, [r3, #32]
}
 800beee:	bf00      	nop
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	40010000 	.word	0x40010000

0800bf00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	f023 0201 	bic.w	r2, r3, #1
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f023 030a 	bic.w	r3, r3, #10
 800bf3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	621a      	str	r2, [r3, #32]
}
 800bf52:	bf00      	nop
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	f023 0210 	bic.w	r2, r3, #16
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	031b      	lsls	r3, r3, #12
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	621a      	str	r2, [r3, #32]
}
 800bfb2:	bf00      	nop
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	f043 0307 	orr.w	r3, r3, #7
 800bfe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	609a      	str	r2, [r3, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c00e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	021a      	lsls	r2, r3, #8
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	431a      	orrs	r2, r3
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	4313      	orrs	r3, r2
 800c020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	609a      	str	r2, [r3, #8]
}
 800c028:	bf00      	nop
 800c02a:	371c      	adds	r7, #28
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f003 031f 	and.w	r3, r3, #31
 800c046:	2201      	movs	r2, #1
 800c048:	fa02 f303 	lsl.w	r3, r2, r3
 800c04c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a1a      	ldr	r2, [r3, #32]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	43db      	mvns	r3, r3
 800c056:	401a      	ands	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6a1a      	ldr	r2, [r3, #32]
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f003 031f 	and.w	r3, r3, #31
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	fa01 f303 	lsl.w	r3, r1, r3
 800c06c:	431a      	orrs	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	621a      	str	r2, [r3, #32]
}
 800c072:	bf00      	nop
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
	...

0800c080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c090:	2b01      	cmp	r3, #1
 800c092:	d101      	bne.n	800c098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c094:	2302      	movs	r3, #2
 800c096:	e050      	b.n	800c13a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d018      	beq.n	800c10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0e4:	d013      	beq.n	800c10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a18      	ldr	r2, [pc, #96]	@ (800c14c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00e      	beq.n	800c10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a16      	ldr	r2, [pc, #88]	@ (800c150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d009      	beq.n	800c10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a15      	ldr	r2, [pc, #84]	@ (800c154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d004      	beq.n	800c10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a13      	ldr	r2, [pc, #76]	@ (800c158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d10c      	bne.n	800c128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	40010000 	.word	0x40010000
 800c14c:	40000400 	.word	0x40000400
 800c150:	40000800 	.word	0x40000800
 800c154:	40000c00 	.word	0x40000c00
 800c158:	40014000 	.word	0x40014000

0800c15c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e042      	b.n	800c21c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7f7 fd16 	bl	8003bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2224      	movs	r2, #36	@ 0x24
 800c1b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fe37 	bl	800ce3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	695a      	ldr	r2, [r3, #20]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2220      	movs	r2, #32
 800c208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2220      	movs	r2, #32
 800c210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e024      	b.n	800c280 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2224      	movs	r2, #36	@ 0x24
 800c23a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c24c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7f7 fd52 	bl	8003cf8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	@ 0x28
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b20      	cmp	r3, #32
 800c2a6:	d175      	bne.n	800c394 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <HAL_UART_Transmit+0x2c>
 800c2ae:	88fb      	ldrh	r3, [r7, #6]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e06e      	b.n	800c396 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2221      	movs	r2, #33	@ 0x21
 800c2c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2c6:	f7f7 ff3f 	bl	8004148 <HAL_GetTick>
 800c2ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	88fa      	ldrh	r2, [r7, #6]
 800c2d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	88fa      	ldrh	r2, [r7, #6]
 800c2d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2e0:	d108      	bne.n	800c2f4 <HAL_UART_Transmit+0x6c>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d104      	bne.n	800c2f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	61bb      	str	r3, [r7, #24]
 800c2f2:	e003      	b.n	800c2fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2fc:	e02e      	b.n	800c35c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2200      	movs	r2, #0
 800c306:	2180      	movs	r1, #128	@ 0x80
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 fb67 	bl	800c9dc <UART_WaitOnFlagUntilTimeout>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e03a      	b.n	800c396 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	3302      	adds	r3, #2
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	e007      	b.n	800c34e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	781a      	ldrb	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	3301      	adds	r3, #1
 800c34c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c352:	b29b      	uxth	r3, r3
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c360:	b29b      	uxth	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1cb      	bne.n	800c2fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2200      	movs	r2, #0
 800c36e:	2140      	movs	r1, #64	@ 0x40
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 fb33 	bl	800c9dc <UART_WaitOnFlagUntilTimeout>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d005      	beq.n	800c388 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c384:	2303      	movs	r3, #3
 800c386:	e006      	b.n	800c396 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2220      	movs	r2, #32
 800c38c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	e000      	b.n	800c396 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c394:	2302      	movs	r3, #2
  }
}
 800c396:	4618      	mov	r0, r3
 800c398:	3720      	adds	r7, #32
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	60b9      	str	r1, [r7, #8]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b20      	cmp	r3, #32
 800c3b6:	d112      	bne.n	800c3de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <HAL_UART_Receive_IT+0x26>
 800c3be:	88fb      	ldrh	r3, [r7, #6]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e00b      	b.n	800c3e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fb5a 	bl	800ca8e <UART_Start_Receive_IT>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	e000      	b.n	800c3e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c3de:	2302      	movs	r3, #2
  }
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08c      	sub	sp, #48	@ 0x30
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b20      	cmp	r3, #32
 800c400:	d14a      	bne.n	800c498 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d101      	bne.n	800c412 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e043      	b.n	800c49a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c41e:	88fb      	ldrh	r3, [r7, #6]
 800c420:	461a      	mov	r2, r3
 800c422:	68b9      	ldr	r1, [r7, #8]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 fb32 	bl	800ca8e <UART_Start_Receive_IT>
 800c42a:	4603      	mov	r3, r0
 800c42c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d12c      	bne.n	800c492 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d125      	bne.n	800c48c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c440:	2300      	movs	r3, #0
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	613b      	str	r3, [r7, #16]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	330c      	adds	r3, #12
 800c45c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	617b      	str	r3, [r7, #20]
   return(result);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f043 0310 	orr.w	r3, r3, #16
 800c46c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	330c      	adds	r3, #12
 800c474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c476:	627a      	str	r2, [r7, #36]	@ 0x24
 800c478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	6a39      	ldr	r1, [r7, #32]
 800c47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	61fb      	str	r3, [r7, #28]
   return(result);
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e5      	bne.n	800c456 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c48a:	e002      	b.n	800c492 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c496:	e000      	b.n	800c49a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c498:	2302      	movs	r3, #2
  }
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3730      	adds	r7, #48	@ 0x30
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b0ba      	sub	sp, #232	@ 0xe8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4da:	f003 030f 	and.w	r3, r3, #15
 800c4de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c4e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10f      	bne.n	800c50a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ee:	f003 0320 	and.w	r3, r3, #32
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d009      	beq.n	800c50a <HAL_UART_IRQHandler+0x66>
 800c4f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fbdc 	bl	800ccc0 <UART_Receive_IT>
      return;
 800c508:	e25b      	b.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c50a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 80de 	beq.w	800c6d0 <HAL_UART_IRQHandler+0x22c>
 800c514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d106      	bne.n	800c52e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c524:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 80d1 	beq.w	800c6d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00b      	beq.n	800c552 <HAL_UART_IRQHandler+0xae>
 800c53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c53e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c54a:	f043 0201 	orr.w	r2, r3, #1
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c556:	f003 0304 	and.w	r3, r3, #4
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00b      	beq.n	800c576 <HAL_UART_IRQHandler+0xd2>
 800c55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56e:	f043 0202 	orr.w	r2, r3, #2
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00b      	beq.n	800c59a <HAL_UART_IRQHandler+0xf6>
 800c582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d005      	beq.n	800c59a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c592:	f043 0204 	orr.w	r2, r3, #4
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c59e:	f003 0308 	and.w	r3, r3, #8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d011      	beq.n	800c5ca <HAL_UART_IRQHandler+0x126>
 800c5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5aa:	f003 0320 	and.w	r3, r3, #32
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d105      	bne.n	800c5be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d005      	beq.n	800c5ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c2:	f043 0208 	orr.w	r2, r3, #8
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 81f2 	beq.w	800c9b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d8:	f003 0320 	and.w	r3, r3, #32
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d008      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x14e>
 800c5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5e4:	f003 0320 	and.w	r3, r3, #32
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fb67 	bl	800ccc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fc:	2b40      	cmp	r3, #64	@ 0x40
 800c5fe:	bf0c      	ite	eq
 800c600:	2301      	moveq	r3, #1
 800c602:	2300      	movne	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c60e:	f003 0308 	and.w	r3, r3, #8
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <HAL_UART_IRQHandler+0x17a>
 800c616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d04f      	beq.n	800c6be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa6f 	bl	800cb02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62e:	2b40      	cmp	r3, #64	@ 0x40
 800c630:	d141      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3314      	adds	r3, #20
 800c638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c64c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3314      	adds	r3, #20
 800c65a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c65e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c66a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1d9      	bne.n	800c632 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d013      	beq.n	800c6ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c68a:	4a7e      	ldr	r2, [pc, #504]	@ (800c884 <HAL_UART_IRQHandler+0x3e0>)
 800c68c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c692:	4618      	mov	r0, r3
 800c694:	f7f8 fd3b 	bl	800510e <HAL_DMA_Abort_IT>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d016      	beq.n	800c6cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ac:	e00e      	b.n	800c6cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7f6 ffdc 	bl	800366c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b4:	e00a      	b.n	800c6cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7f6 ffd8 	bl	800366c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6bc:	e006      	b.n	800c6cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7f6 ffd4 	bl	800366c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c6ca:	e175      	b.n	800c9b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6cc:	bf00      	nop
    return;
 800c6ce:	e173      	b.n	800c9b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	f040 814f 	bne.w	800c978 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6de:	f003 0310 	and.w	r3, r3, #16
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 8148 	beq.w	800c978 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6ec:	f003 0310 	and.w	r3, r3, #16
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 8141 	beq.w	800c978 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60bb      	str	r3, [r7, #8]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	60bb      	str	r3, [r7, #8]
 800c70a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c716:	2b40      	cmp	r3, #64	@ 0x40
 800c718:	f040 80b6 	bne.w	800c888 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 8145 	beq.w	800c9bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c73a:	429a      	cmp	r2, r3
 800c73c:	f080 813e 	bcs.w	800c9bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c746:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c752:	f000 8088 	beq.w	800c866 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	330c      	adds	r3, #12
 800c75c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c764:	e853 3f00 	ldrex	r3, [r3]
 800c768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c76c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	330c      	adds	r3, #12
 800c77e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c782:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c78e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c792:	e841 2300 	strex	r3, r2, [r1]
 800c796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1d9      	bne.n	800c756 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3314      	adds	r3, #20
 800c7a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7ac:	e853 3f00 	ldrex	r3, [r3]
 800c7b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7b4:	f023 0301 	bic.w	r3, r3, #1
 800c7b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3314      	adds	r3, #20
 800c7c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e1      	bne.n	800c7a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	3314      	adds	r3, #20
 800c7e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7e8:	e853 3f00 	ldrex	r3, [r3]
 800c7ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3314      	adds	r3, #20
 800c7fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c804:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c806:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c808:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c80a:	e841 2300 	strex	r3, r2, [r1]
 800c80e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e3      	bne.n	800c7de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2220      	movs	r2, #32
 800c81a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	330c      	adds	r3, #12
 800c82a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c836:	f023 0310 	bic.w	r3, r3, #16
 800c83a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	330c      	adds	r3, #12
 800c844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c848:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c84a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c84e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e3      	bne.n	800c824 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c860:	4618      	mov	r0, r3
 800c862:	f7f8 fbe4 	bl	800502e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2202      	movs	r2, #2
 800c86a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c874:	b29b      	uxth	r3, r3
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	b29b      	uxth	r3, r3
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f008 ffcd 	bl	801581c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c882:	e09b      	b.n	800c9bc <HAL_UART_IRQHandler+0x518>
 800c884:	0800cbc9 	.word	0x0800cbc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c890:	b29b      	uxth	r3, r3
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 808e 	beq.w	800c9c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c8a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 8089 	beq.w	800c9c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	330c      	adds	r3, #12
 800c8ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c8d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e3      	bne.n	800c8ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3314      	adds	r3, #20
 800c8ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f0:	e853 3f00 	ldrex	r3, [r3]
 800c8f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	f023 0301 	bic.w	r3, r3, #1
 800c8fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3314      	adds	r3, #20
 800c906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c90a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e3      	bne.n	800c8e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2220      	movs	r2, #32
 800c922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	330c      	adds	r3, #12
 800c932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	e853 3f00 	ldrex	r3, [r3]
 800c93a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f023 0310 	bic.w	r3, r3, #16
 800c942:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	330c      	adds	r3, #12
 800c94c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c950:	61fa      	str	r2, [r7, #28]
 800c952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	69b9      	ldr	r1, [r7, #24]
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	e841 2300 	strex	r3, r2, [r1]
 800c95c:	617b      	str	r3, [r7, #20]
   return(result);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e3      	bne.n	800c92c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2202      	movs	r2, #2
 800c968:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c96a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f008 ff53 	bl	801581c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c976:	e023      	b.n	800c9c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c97c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c980:	2b00      	cmp	r3, #0
 800c982:	d009      	beq.n	800c998 <HAL_UART_IRQHandler+0x4f4>
 800c984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f92d 	bl	800cbf0 <UART_Transmit_IT>
    return;
 800c996:	e014      	b.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c99c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00e      	beq.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
 800c9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d008      	beq.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f96d 	bl	800cc90 <UART_EndTransmit_IT>
    return;
 800c9b6:	e004      	b.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c9b8:	bf00      	nop
 800c9ba:	e002      	b.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9bc:	bf00      	nop
 800c9be:	e000      	b.n	800c9c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9c0:	bf00      	nop
  }
}
 800c9c2:	37e8      	adds	r7, #232	@ 0xe8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9ec:	e03b      	b.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f4:	d037      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9f6:	f7f7 fba7 	bl	8004148 <HAL_GetTick>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	6a3a      	ldr	r2, [r7, #32]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d302      	bcc.n	800ca0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e03a      	b.n	800ca86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	f003 0304 	and.w	r3, r3, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d023      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2b80      	cmp	r3, #128	@ 0x80
 800ca22:	d020      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b40      	cmp	r3, #64	@ 0x40
 800ca28:	d01d      	beq.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0308 	and.w	r3, r3, #8
 800ca34:	2b08      	cmp	r3, #8
 800ca36:	d116      	bne.n	800ca66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 f857 	bl	800cb02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2208      	movs	r2, #8
 800ca58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e00f      	b.n	800ca86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4013      	ands	r3, r2
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	bf0c      	ite	eq
 800ca76:	2301      	moveq	r3, #1
 800ca78:	2300      	movne	r3, #0
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d0b4      	beq.n	800c9ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b085      	sub	sp, #20
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	60f8      	str	r0, [r7, #12]
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	4613      	mov	r3, r2
 800ca9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	88fa      	ldrh	r2, [r7, #6]
 800caa6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	88fa      	ldrh	r2, [r7, #6]
 800caac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2222      	movs	r2, #34	@ 0x22
 800cab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d007      	beq.n	800cad4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cad2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	695a      	ldr	r2, [r3, #20]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0201 	orr.w	r2, r2, #1
 800cae2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f042 0220 	orr.w	r2, r2, #32
 800caf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b095      	sub	sp, #84	@ 0x54
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	330c      	adds	r3, #12
 800cb10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	330c      	adds	r3, #12
 800cb28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb2a:	643a      	str	r2, [r7, #64]	@ 0x40
 800cb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e5      	bne.n	800cb0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3314      	adds	r3, #20
 800cb44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	f023 0301 	bic.w	r3, r3, #1
 800cb54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3314      	adds	r3, #20
 800cb5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e5      	bne.n	800cb3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d119      	bne.n	800cbae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	330c      	adds	r3, #12
 800cb80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	e853 3f00 	ldrex	r3, [r3]
 800cb88:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	f023 0310 	bic.w	r3, r3, #16
 800cb90:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	330c      	adds	r3, #12
 800cb98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb9a:	61ba      	str	r2, [r7, #24]
 800cb9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9e:	6979      	ldr	r1, [r7, #20]
 800cba0:	69ba      	ldr	r2, [r7, #24]
 800cba2:	e841 2300 	strex	r3, r2, [r1]
 800cba6:	613b      	str	r3, [r7, #16]
   return(result);
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1e5      	bne.n	800cb7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cbbc:	bf00      	nop
 800cbbe:	3754      	adds	r7, #84	@ 0x54
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7f6 fd42 	bl	800366c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbe8:	bf00      	nop
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b21      	cmp	r3, #33	@ 0x21
 800cc02:	d13e      	bne.n	800cc82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc0c:	d114      	bne.n	800cc38 <UART_Transmit_IT+0x48>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d110      	bne.n	800cc38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	461a      	mov	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	1c9a      	adds	r2, r3, #2
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	621a      	str	r2, [r3, #32]
 800cc36:	e008      	b.n	800cc4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	1c59      	adds	r1, r3, #1
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	6211      	str	r1, [r2, #32]
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	4619      	mov	r1, r3
 800cc58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10f      	bne.n	800cc7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68da      	ldr	r2, [r3, #12]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68da      	ldr	r2, [r3, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e000      	b.n	800cc84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc82:	2302      	movs	r3, #2
  }
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cca6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff fe89 	bl	800c9c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08c      	sub	sp, #48	@ 0x30
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b22      	cmp	r3, #34	@ 0x22
 800ccd2:	f040 80ae 	bne.w	800ce32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccde:	d117      	bne.n	800cd10 <UART_Receive_IT+0x50>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d113      	bne.n	800cd10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cce8:	2300      	movs	r3, #0
 800ccea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	1c9a      	adds	r2, r3, #2
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd0e:	e026      	b.n	800cd5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cd16:	2300      	movs	r3, #0
 800cd18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd22:	d007      	beq.n	800cd34 <UART_Receive_IT+0x74>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <UART_Receive_IT+0x82>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d106      	bne.n	800cd42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	e008      	b.n	800cd54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	3b01      	subs	r3, #1
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d15d      	bne.n	800ce2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 0220 	bic.w	r2, r2, #32
 800cd80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	695a      	ldr	r2, [r3, #20]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f022 0201 	bic.w	r2, r2, #1
 800cda0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d135      	bne.n	800ce24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	330c      	adds	r3, #12
 800cdc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	e853 3f00 	ldrex	r3, [r3]
 800cdcc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f023 0310 	bic.w	r3, r3, #16
 800cdd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	330c      	adds	r3, #12
 800cddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdde:	623a      	str	r2, [r7, #32]
 800cde0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	69f9      	ldr	r1, [r7, #28]
 800cde4:	6a3a      	ldr	r2, [r7, #32]
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e5      	bne.n	800cdbe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 0310 	and.w	r3, r3, #16
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	d10a      	bne.n	800ce16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce00:	2300      	movs	r3, #0
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f008 fcfd 	bl	801581c <HAL_UARTEx_RxEventCallback>
 800ce22:	e002      	b.n	800ce2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f002 fb41 	bl	800f4ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e002      	b.n	800ce34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e000      	b.n	800ce34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ce32:	2302      	movs	r3, #2
  }
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3730      	adds	r7, #48	@ 0x30
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce40:	b0c0      	sub	sp, #256	@ 0x100
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce58:	68d9      	ldr	r1, [r3, #12]
 800ce5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	ea40 0301 	orr.w	r3, r0, r1
 800ce64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce6a:	689a      	ldr	r2, [r3, #8]
 800ce6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce94:	f021 010c 	bic.w	r1, r1, #12
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cea2:	430b      	orrs	r3, r1
 800cea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	695b      	ldr	r3, [r3, #20]
 800ceae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ceb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceb6:	6999      	ldr	r1, [r3, #24]
 800ceb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	ea40 0301 	orr.w	r3, r0, r1
 800cec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	4b8f      	ldr	r3, [pc, #572]	@ (800d108 <UART_SetConfig+0x2cc>)
 800cecc:	429a      	cmp	r2, r3
 800cece:	d005      	beq.n	800cedc <UART_SetConfig+0xa0>
 800ced0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	4b8d      	ldr	r3, [pc, #564]	@ (800d10c <UART_SetConfig+0x2d0>)
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d104      	bne.n	800cee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cedc:	f7fc fa84 	bl	80093e8 <HAL_RCC_GetPCLK2Freq>
 800cee0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cee4:	e003      	b.n	800ceee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cee6:	f7fc fa6b 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 800ceea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef2:	69db      	ldr	r3, [r3, #28]
 800cef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cef8:	f040 810c 	bne.w	800d114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cefc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf00:	2200      	movs	r2, #0
 800cf02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cf06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cf0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cf0e:	4622      	mov	r2, r4
 800cf10:	462b      	mov	r3, r5
 800cf12:	1891      	adds	r1, r2, r2
 800cf14:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cf16:	415b      	adcs	r3, r3
 800cf18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cf1e:	4621      	mov	r1, r4
 800cf20:	eb12 0801 	adds.w	r8, r2, r1
 800cf24:	4629      	mov	r1, r5
 800cf26:	eb43 0901 	adc.w	r9, r3, r1
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf3e:	4690      	mov	r8, r2
 800cf40:	4699      	mov	r9, r3
 800cf42:	4623      	mov	r3, r4
 800cf44:	eb18 0303 	adds.w	r3, r8, r3
 800cf48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	eb49 0303 	adc.w	r3, r9, r3
 800cf52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	18db      	adds	r3, r3, r3
 800cf6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf70:	4613      	mov	r3, r2
 800cf72:	eb42 0303 	adc.w	r3, r2, r3
 800cf76:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf80:	f7f3 fe9a 	bl	8000cb8 <__aeabi_uldivmod>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4b61      	ldr	r3, [pc, #388]	@ (800d110 <UART_SetConfig+0x2d4>)
 800cf8a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf8e:	095b      	lsrs	r3, r3, #5
 800cf90:	011c      	lsls	r4, r3, #4
 800cf92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cfa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cfa4:	4642      	mov	r2, r8
 800cfa6:	464b      	mov	r3, r9
 800cfa8:	1891      	adds	r1, r2, r2
 800cfaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cfac:	415b      	adcs	r3, r3
 800cfae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cfb4:	4641      	mov	r1, r8
 800cfb6:	eb12 0a01 	adds.w	sl, r2, r1
 800cfba:	4649      	mov	r1, r9
 800cfbc:	eb43 0b01 	adc.w	fp, r3, r1
 800cfc0:	f04f 0200 	mov.w	r2, #0
 800cfc4:	f04f 0300 	mov.w	r3, #0
 800cfc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cfd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfd4:	4692      	mov	sl, r2
 800cfd6:	469b      	mov	fp, r3
 800cfd8:	4643      	mov	r3, r8
 800cfda:	eb1a 0303 	adds.w	r3, sl, r3
 800cfde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cff8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d000:	460b      	mov	r3, r1
 800d002:	18db      	adds	r3, r3, r3
 800d004:	643b      	str	r3, [r7, #64]	@ 0x40
 800d006:	4613      	mov	r3, r2
 800d008:	eb42 0303 	adc.w	r3, r2, r3
 800d00c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d00e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d016:	f7f3 fe4f 	bl	8000cb8 <__aeabi_uldivmod>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4611      	mov	r1, r2
 800d020:	4b3b      	ldr	r3, [pc, #236]	@ (800d110 <UART_SetConfig+0x2d4>)
 800d022:	fba3 2301 	umull	r2, r3, r3, r1
 800d026:	095b      	lsrs	r3, r3, #5
 800d028:	2264      	movs	r2, #100	@ 0x64
 800d02a:	fb02 f303 	mul.w	r3, r2, r3
 800d02e:	1acb      	subs	r3, r1, r3
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d036:	4b36      	ldr	r3, [pc, #216]	@ (800d110 <UART_SetConfig+0x2d4>)
 800d038:	fba3 2302 	umull	r2, r3, r3, r2
 800d03c:	095b      	lsrs	r3, r3, #5
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d044:	441c      	add	r4, r3
 800d046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d04a:	2200      	movs	r2, #0
 800d04c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d050:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d058:	4642      	mov	r2, r8
 800d05a:	464b      	mov	r3, r9
 800d05c:	1891      	adds	r1, r2, r2
 800d05e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d060:	415b      	adcs	r3, r3
 800d062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d068:	4641      	mov	r1, r8
 800d06a:	1851      	adds	r1, r2, r1
 800d06c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d06e:	4649      	mov	r1, r9
 800d070:	414b      	adcs	r3, r1
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
 800d074:	f04f 0200 	mov.w	r2, #0
 800d078:	f04f 0300 	mov.w	r3, #0
 800d07c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d080:	4659      	mov	r1, fp
 800d082:	00cb      	lsls	r3, r1, #3
 800d084:	4651      	mov	r1, sl
 800d086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d08a:	4651      	mov	r1, sl
 800d08c:	00ca      	lsls	r2, r1, #3
 800d08e:	4610      	mov	r0, r2
 800d090:	4619      	mov	r1, r3
 800d092:	4603      	mov	r3, r0
 800d094:	4642      	mov	r2, r8
 800d096:	189b      	adds	r3, r3, r2
 800d098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d09c:	464b      	mov	r3, r9
 800d09e:	460a      	mov	r2, r1
 800d0a0:	eb42 0303 	adc.w	r3, r2, r3
 800d0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d0b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d0b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d0bc:	460b      	mov	r3, r1
 800d0be:	18db      	adds	r3, r3, r3
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	eb42 0303 	adc.w	r3, r2, r3
 800d0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d0ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d0d2:	f7f3 fdf1 	bl	8000cb8 <__aeabi_uldivmod>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	4b0d      	ldr	r3, [pc, #52]	@ (800d110 <UART_SetConfig+0x2d4>)
 800d0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d0e0:	095b      	lsrs	r3, r3, #5
 800d0e2:	2164      	movs	r1, #100	@ 0x64
 800d0e4:	fb01 f303 	mul.w	r3, r1, r3
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	3332      	adds	r3, #50	@ 0x32
 800d0ee:	4a08      	ldr	r2, [pc, #32]	@ (800d110 <UART_SetConfig+0x2d4>)
 800d0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	f003 0207 	and.w	r2, r3, #7
 800d0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4422      	add	r2, r4
 800d102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d104:	e106      	b.n	800d314 <UART_SetConfig+0x4d8>
 800d106:	bf00      	nop
 800d108:	40011000 	.word	0x40011000
 800d10c:	40011400 	.word	0x40011400
 800d110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d118:	2200      	movs	r2, #0
 800d11a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d11e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d126:	4642      	mov	r2, r8
 800d128:	464b      	mov	r3, r9
 800d12a:	1891      	adds	r1, r2, r2
 800d12c:	6239      	str	r1, [r7, #32]
 800d12e:	415b      	adcs	r3, r3
 800d130:	627b      	str	r3, [r7, #36]	@ 0x24
 800d132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d136:	4641      	mov	r1, r8
 800d138:	1854      	adds	r4, r2, r1
 800d13a:	4649      	mov	r1, r9
 800d13c:	eb43 0501 	adc.w	r5, r3, r1
 800d140:	f04f 0200 	mov.w	r2, #0
 800d144:	f04f 0300 	mov.w	r3, #0
 800d148:	00eb      	lsls	r3, r5, #3
 800d14a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d14e:	00e2      	lsls	r2, r4, #3
 800d150:	4614      	mov	r4, r2
 800d152:	461d      	mov	r5, r3
 800d154:	4643      	mov	r3, r8
 800d156:	18e3      	adds	r3, r4, r3
 800d158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d15c:	464b      	mov	r3, r9
 800d15e:	eb45 0303 	adc.w	r3, r5, r3
 800d162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d176:	f04f 0200 	mov.w	r2, #0
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d182:	4629      	mov	r1, r5
 800d184:	008b      	lsls	r3, r1, #2
 800d186:	4621      	mov	r1, r4
 800d188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d18c:	4621      	mov	r1, r4
 800d18e:	008a      	lsls	r2, r1, #2
 800d190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d194:	f7f3 fd90 	bl	8000cb8 <__aeabi_uldivmod>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4b60      	ldr	r3, [pc, #384]	@ (800d320 <UART_SetConfig+0x4e4>)
 800d19e:	fba3 2302 	umull	r2, r3, r3, r2
 800d1a2:	095b      	lsrs	r3, r3, #5
 800d1a4:	011c      	lsls	r4, r3, #4
 800d1a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d1b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d1b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	1891      	adds	r1, r2, r2
 800d1be:	61b9      	str	r1, [r7, #24]
 800d1c0:	415b      	adcs	r3, r3
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1c8:	4641      	mov	r1, r8
 800d1ca:	1851      	adds	r1, r2, r1
 800d1cc:	6139      	str	r1, [r7, #16]
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	414b      	adcs	r3, r1
 800d1d2:	617b      	str	r3, [r7, #20]
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	f04f 0300 	mov.w	r3, #0
 800d1dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1e0:	4659      	mov	r1, fp
 800d1e2:	00cb      	lsls	r3, r1, #3
 800d1e4:	4651      	mov	r1, sl
 800d1e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1ea:	4651      	mov	r1, sl
 800d1ec:	00ca      	lsls	r2, r1, #3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	189b      	adds	r3, r3, r2
 800d1f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1fc:	464b      	mov	r3, r9
 800d1fe:	460a      	mov	r2, r1
 800d200:	eb42 0303 	adc.w	r3, r2, r3
 800d204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d212:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d214:	f04f 0200 	mov.w	r2, #0
 800d218:	f04f 0300 	mov.w	r3, #0
 800d21c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d220:	4649      	mov	r1, r9
 800d222:	008b      	lsls	r3, r1, #2
 800d224:	4641      	mov	r1, r8
 800d226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d22a:	4641      	mov	r1, r8
 800d22c:	008a      	lsls	r2, r1, #2
 800d22e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d232:	f7f3 fd41 	bl	8000cb8 <__aeabi_uldivmod>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4611      	mov	r1, r2
 800d23c:	4b38      	ldr	r3, [pc, #224]	@ (800d320 <UART_SetConfig+0x4e4>)
 800d23e:	fba3 2301 	umull	r2, r3, r3, r1
 800d242:	095b      	lsrs	r3, r3, #5
 800d244:	2264      	movs	r2, #100	@ 0x64
 800d246:	fb02 f303 	mul.w	r3, r2, r3
 800d24a:	1acb      	subs	r3, r1, r3
 800d24c:	011b      	lsls	r3, r3, #4
 800d24e:	3332      	adds	r3, #50	@ 0x32
 800d250:	4a33      	ldr	r2, [pc, #204]	@ (800d320 <UART_SetConfig+0x4e4>)
 800d252:	fba2 2303 	umull	r2, r3, r2, r3
 800d256:	095b      	lsrs	r3, r3, #5
 800d258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d25c:	441c      	add	r4, r3
 800d25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d262:	2200      	movs	r2, #0
 800d264:	673b      	str	r3, [r7, #112]	@ 0x70
 800d266:	677a      	str	r2, [r7, #116]	@ 0x74
 800d268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d26c:	4642      	mov	r2, r8
 800d26e:	464b      	mov	r3, r9
 800d270:	1891      	adds	r1, r2, r2
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	415b      	adcs	r3, r3
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d27c:	4641      	mov	r1, r8
 800d27e:	1851      	adds	r1, r2, r1
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	4649      	mov	r1, r9
 800d284:	414b      	adcs	r3, r1
 800d286:	607b      	str	r3, [r7, #4]
 800d288:	f04f 0200 	mov.w	r2, #0
 800d28c:	f04f 0300 	mov.w	r3, #0
 800d290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d294:	4659      	mov	r1, fp
 800d296:	00cb      	lsls	r3, r1, #3
 800d298:	4651      	mov	r1, sl
 800d29a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d29e:	4651      	mov	r1, sl
 800d2a0:	00ca      	lsls	r2, r1, #3
 800d2a2:	4610      	mov	r0, r2
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4642      	mov	r2, r8
 800d2aa:	189b      	adds	r3, r3, r2
 800d2ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2ae:	464b      	mov	r3, r9
 800d2b0:	460a      	mov	r2, r1
 800d2b2:	eb42 0303 	adc.w	r3, r2, r3
 800d2b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2c2:	667a      	str	r2, [r7, #100]	@ 0x64
 800d2c4:	f04f 0200 	mov.w	r2, #0
 800d2c8:	f04f 0300 	mov.w	r3, #0
 800d2cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	008b      	lsls	r3, r1, #2
 800d2d4:	4641      	mov	r1, r8
 800d2d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2da:	4641      	mov	r1, r8
 800d2dc:	008a      	lsls	r2, r1, #2
 800d2de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d2e2:	f7f3 fce9 	bl	8000cb8 <__aeabi_uldivmod>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d320 <UART_SetConfig+0x4e4>)
 800d2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800d2f0:	095b      	lsrs	r3, r3, #5
 800d2f2:	2164      	movs	r1, #100	@ 0x64
 800d2f4:	fb01 f303 	mul.w	r3, r1, r3
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	3332      	adds	r3, #50	@ 0x32
 800d2fe:	4a08      	ldr	r2, [pc, #32]	@ (800d320 <UART_SetConfig+0x4e4>)
 800d300:	fba2 2303 	umull	r2, r3, r2, r3
 800d304:	095b      	lsrs	r3, r3, #5
 800d306:	f003 020f 	and.w	r2, r3, #15
 800d30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4422      	add	r2, r4
 800d312:	609a      	str	r2, [r3, #8]
}
 800d314:	bf00      	nop
 800d316:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d31a:	46bd      	mov	sp, r7
 800d31c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d320:	51eb851f 	.word	0x51eb851f

0800d324 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d324:	b084      	sub	sp, #16
 800d326:	b480      	push	{r7}
 800d328:	b085      	sub	sp, #20
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	f107 001c 	add.w	r0, r7, #28
 800d332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d33a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d33c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d33e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d342:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d346:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d34a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d34e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d35e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	431a      	orrs	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	b004      	add	sp, #16
 800d378:	4770      	bx	lr

0800d37a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d3b6:	b480      	push	{r7}
 800d3b8:	b083      	sub	sp, #12
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d3d2:	b480      	push	{r7}
 800d3d4:	b083      	sub	sp, #12
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0303 	and.w	r3, r3, #3
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d40c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d412:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d418:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	4313      	orrs	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d428:	f023 030f 	bic.w	r3, r3, #15
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	431a      	orrs	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d442:	b480      	push	{r7}
 800d444:	b083      	sub	sp, #12
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	b2db      	uxtb	r3, r3
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3314      	adds	r3, #20
 800d46a:	461a      	mov	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	4413      	add	r3, r2
 800d470:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
}  
 800d476:	4618      	mov	r0, r3
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d482:	b480      	push	{r7}
 800d484:	b085      	sub	sp, #20
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4a8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d4ae:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d4b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d4cc:	2300      	movs	r3, #0

}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b088      	sub	sp, #32
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4e8:	2310      	movs	r3, #16
 800d4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4ec:	2340      	movs	r3, #64	@ 0x40
 800d4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff ff74 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d50a:	2110      	movs	r1, #16
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f9d7 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d514:	69fb      	ldr	r3, [r7, #28]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b088      	sub	sp, #32
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d52c:	2311      	movs	r3, #17
 800d52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d530:	2340      	movs	r3, #64	@ 0x40
 800d532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d53c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff ff52 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d54e:	2111      	movs	r1, #17
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f9b5 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d558:	69fb      	ldr	r3, [r7, #28]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d570:	2312      	movs	r3, #18
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d574:	2340      	movs	r3, #64	@ 0x40
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d57c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff ff30 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d592:	2112      	movs	r1, #18
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f993 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d59a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59c:	69fb      	ldr	r3, [r7, #28]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3720      	adds	r7, #32
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b088      	sub	sp, #32
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d5b4:	2318      	movs	r3, #24
 800d5b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5b8:	2340      	movs	r3, #64	@ 0x40
 800d5ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5c6:	f107 0308 	add.w	r3, r7, #8
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ff0e 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d5d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5d6:	2118      	movs	r1, #24
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f971 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d5de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3720      	adds	r7, #32
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b088      	sub	sp, #32
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5f8:	2319      	movs	r3, #25
 800d5fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5fc:	2340      	movs	r3, #64	@ 0x40
 800d5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d600:	2300      	movs	r3, #0
 800d602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d608:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d60a:	f107 0308 	add.w	r3, r7, #8
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff feec 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d61a:	2119      	movs	r1, #25
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f94f 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d624:	69fb      	ldr	r3, [r7, #28]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3720      	adds	r7, #32
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d63c:	230c      	movs	r3, #12
 800d63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d640:	2340      	movs	r3, #64	@ 0x40
 800d642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff feca 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d65a:	4a05      	ldr	r2, [pc, #20]	@ (800d670 <SDMMC_CmdStopTransfer+0x40>)
 800d65c:	210c      	movs	r1, #12
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f92e 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	05f5e100 	.word	0x05f5e100

0800d674 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b08a      	sub	sp, #40	@ 0x28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d684:	2307      	movs	r3, #7
 800d686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d688:	2340      	movs	r3, #64	@ 0x40
 800d68a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d694:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d696:	f107 0310 	add.w	r3, r7, #16
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7ff fea6 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d6a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a6:	2107      	movs	r1, #7
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 f909 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d6ae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3728      	adds	r7, #40	@ 0x28
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b088      	sub	sp, #32
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6d8:	f107 0308 	add.w	r3, r7, #8
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fe85 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fb23 	bl	800dd30 <SDMMC_GetCmdError>
 800d6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3720      	adds	r7, #32
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6fe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d704:	2308      	movs	r3, #8
 800d706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d708:	2340      	movs	r3, #64	@ 0x40
 800d70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d714:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d716:	f107 0308 	add.w	r3, r7, #8
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fe66 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fab6 	bl	800dc94 <SDMMC_GetCmdResp7>
 800d728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d72a:	69fb      	ldr	r3, [r7, #28]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3720      	adds	r7, #32
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d742:	2337      	movs	r3, #55	@ 0x37
 800d744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d746:	2340      	movs	r3, #64	@ 0x40
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d752:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fe47 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d760:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d764:	2137      	movs	r1, #55	@ 0x37
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f8aa 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d76e:	69fb      	ldr	r3, [r7, #28]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d788:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d78e:	2329      	movs	r3, #41	@ 0x29
 800d790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d792:	2340      	movs	r3, #64	@ 0x40
 800d794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d796:	2300      	movs	r3, #0
 800d798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d79e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7a0:	f107 0308 	add.w	r3, r7, #8
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fe21 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f9bd 	bl	800db2c <SDMMC_GetCmdResp3>
 800d7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b4:	69fb      	ldr	r3, [r7, #28]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3720      	adds	r7, #32
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b088      	sub	sp, #32
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7ce:	23c0      	movs	r3, #192	@ 0xc0
 800d7d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7dc:	f107 0308 	add.w	r3, r7, #8
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff fe03 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f957 	bl	800da9c <SDMMC_GetCmdResp2>
 800d7ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b088      	sub	sp, #32
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d808:	2309      	movs	r3, #9
 800d80a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d80c:	23c0      	movs	r3, #192	@ 0xc0
 800d80e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d810:	2300      	movs	r3, #0
 800d812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d81a:	f107 0308 	add.w	r3, r7, #8
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7ff fde4 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f938 	bl	800da9c <SDMMC_GetCmdResp2>
 800d82c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d82e:	69fb      	ldr	r3, [r7, #28]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3720      	adds	r7, #32
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b088      	sub	sp, #32
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d842:	2300      	movs	r3, #0
 800d844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d846:	2303      	movs	r3, #3
 800d848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d84a:	2340      	movs	r3, #64	@ 0x40
 800d84c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff fdc5 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	2103      	movs	r1, #3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f99d 	bl	800dba8 <SDMMC_GetCmdResp6>
 800d86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d870:	69fb      	ldr	r3, [r7, #28]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3720      	adds	r7, #32
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b088      	sub	sp, #32
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d888:	230d      	movs	r3, #13
 800d88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d88c:	2340      	movs	r3, #64	@ 0x40
 800d88e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d890:	2300      	movs	r3, #0
 800d892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d89a:	f107 0308 	add.w	r3, r7, #8
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff fda4 	bl	800d3ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d8a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8aa:	210d      	movs	r1, #13
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f807 	bl	800d8c0 <SDMMC_GetCmdResp1>
 800d8b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b4:	69fb      	ldr	r3, [r7, #28]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b088      	sub	sp, #32
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d8ce:	4b70      	ldr	r3, [pc, #448]	@ (800da90 <SDMMC_GetCmdResp1+0x1d0>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a70      	ldr	r2, [pc, #448]	@ (800da94 <SDMMC_GetCmdResp1+0x1d4>)
 800d8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d8:	0a5a      	lsrs	r2, r3, #9
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	fb02 f303 	mul.w	r3, r2, r3
 800d8e0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	1e5a      	subs	r2, r3, #1
 800d8e6:	61fa      	str	r2, [r7, #28]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d102      	bne.n	800d8f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8f0:	e0c9      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0ef      	beq.n	800d8e2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1ea      	bne.n	800d8e2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	2b00      	cmp	r3, #0
 800d916:	d004      	beq.n	800d922 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2204      	movs	r2, #4
 800d91c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d91e:	2304      	movs	r3, #4
 800d920:	e0b1      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d004      	beq.n	800d938 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2201      	movs	r2, #1
 800d932:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d934:	2301      	movs	r3, #1
 800d936:	e0a6      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	22c5      	movs	r2, #197	@ 0xc5
 800d93c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7ff fd7f 	bl	800d442 <SDIO_GetCommandResponse>
 800d944:	4603      	mov	r3, r0
 800d946:	461a      	mov	r2, r3
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d001      	beq.n	800d952 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d94e:	2301      	movs	r3, #1
 800d950:	e099      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d952:	2100      	movs	r1, #0
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff fd81 	bl	800d45c <SDIO_GetResponse>
 800d95a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	4b4e      	ldr	r3, [pc, #312]	@ (800da98 <SDMMC_GetCmdResp1+0x1d8>)
 800d960:	4013      	ands	r3, r2
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d966:	2300      	movs	r3, #0
 800d968:	e08d      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	da02      	bge.n	800d976 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d970:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d974:	e087      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d980:	2340      	movs	r3, #64	@ 0x40
 800d982:	e080      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d001      	beq.n	800d992 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d98e:	2380      	movs	r3, #128	@ 0x80
 800d990:	e079      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d99c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d9a0:	e071      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d9ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9b0:	e069      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d9bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9c0:	e061      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d9cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9d0:	e059      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d9dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9e0:	e051      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9f0:	e049      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da00:	e041      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da10:	e039      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800da20:	e031      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800da30:	e029      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da40:	e021      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da50:	e019      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da60:	e011      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da70:	e009      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f003 0308 	and.w	r3, r3, #8
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da80:	e001      	b.n	800da86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da86:	4618      	mov	r0, r3
 800da88:	3720      	adds	r7, #32
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20000010 	.word	0x20000010
 800da94:	10624dd3 	.word	0x10624dd3
 800da98:	fdffe008 	.word	0xfdffe008

0800da9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daa4:	4b1f      	ldr	r3, [pc, #124]	@ (800db24 <SDMMC_GetCmdResp2+0x88>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a1f      	ldr	r2, [pc, #124]	@ (800db28 <SDMMC_GetCmdResp2+0x8c>)
 800daaa:	fba2 2303 	umull	r2, r3, r2, r3
 800daae:	0a5b      	lsrs	r3, r3, #9
 800dab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dab4:	fb02 f303 	mul.w	r3, r2, r3
 800dab8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	1e5a      	subs	r2, r3, #1
 800dabe:	60fa      	str	r2, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dac4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dac8:	e026      	b.n	800db18 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dace:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0ef      	beq.n	800daba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1ea      	bne.n	800daba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	d004      	beq.n	800dafa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2204      	movs	r2, #4
 800daf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daf6:	2304      	movs	r3, #4
 800daf8:	e00e      	b.n	800db18 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e003      	b.n	800db18 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	22c5      	movs	r2, #197	@ 0xc5
 800db14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	20000010 	.word	0x20000010
 800db28:	10624dd3 	.word	0x10624dd3

0800db2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db34:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <SDMMC_GetCmdResp3+0x74>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a1a      	ldr	r2, [pc, #104]	@ (800dba4 <SDMMC_GetCmdResp3+0x78>)
 800db3a:	fba2 2303 	umull	r2, r3, r2, r3
 800db3e:	0a5b      	lsrs	r3, r3, #9
 800db40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db44:	fb02 f303 	mul.w	r3, r2, r3
 800db48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	1e5a      	subs	r2, r3, #1
 800db4e:	60fa      	str	r2, [r7, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db58:	e01b      	b.n	800db92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db66:	2b00      	cmp	r3, #0
 800db68:	d0ef      	beq.n	800db4a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1ea      	bne.n	800db4a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db78:	f003 0304 	and.w	r3, r3, #4
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2204      	movs	r2, #4
 800db84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db86:	2304      	movs	r3, #4
 800db88:	e003      	b.n	800db92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	22c5      	movs	r2, #197	@ 0xc5
 800db8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	20000010 	.word	0x20000010
 800dba4:	10624dd3 	.word	0x10624dd3

0800dba8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbb6:	4b35      	ldr	r3, [pc, #212]	@ (800dc8c <SDMMC_GetCmdResp6+0xe4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a35      	ldr	r2, [pc, #212]	@ (800dc90 <SDMMC_GetCmdResp6+0xe8>)
 800dbbc:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc0:	0a5b      	lsrs	r3, r3, #9
 800dbc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbc6:	fb02 f303 	mul.w	r3, r2, r3
 800dbca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	1e5a      	subs	r2, r3, #1
 800dbd0:	61fa      	str	r2, [r7, #28]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d102      	bne.n	800dbdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbd6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbda:	e052      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d0ef      	beq.n	800dbcc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1ea      	bne.n	800dbcc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbfa:	f003 0304 	and.w	r3, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d004      	beq.n	800dc0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2204      	movs	r2, #4
 800dc06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc08:	2304      	movs	r3, #4
 800dc0a:	e03a      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e02f      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff fc0d 	bl	800d442 <SDIO_GetCommandResponse>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d001      	beq.n	800dc36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e025      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	22c5      	movs	r2, #197	@ 0xc5
 800dc3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff fc0c 	bl	800d45c <SDIO_GetResponse>
 800dc44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d106      	bne.n	800dc5e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	0c1b      	lsrs	r3, r3, #16
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	e011      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc6c:	e009      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc7c:	e001      	b.n	800dc82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20000010 	.word	0x20000010
 800dc90:	10624dd3 	.word	0x10624dd3

0800dc94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc9c:	4b22      	ldr	r3, [pc, #136]	@ (800dd28 <SDMMC_GetCmdResp7+0x94>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a22      	ldr	r2, [pc, #136]	@ (800dd2c <SDMMC_GetCmdResp7+0x98>)
 800dca2:	fba2 2303 	umull	r2, r3, r2, r3
 800dca6:	0a5b      	lsrs	r3, r3, #9
 800dca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcac:	fb02 f303 	mul.w	r3, r2, r3
 800dcb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	1e5a      	subs	r2, r3, #1
 800dcb6:	60fa      	str	r2, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dcc0:	e02c      	b.n	800dd1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0ef      	beq.n	800dcb2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1ea      	bne.n	800dcb2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce0:	f003 0304 	and.w	r3, r3, #4
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2204      	movs	r2, #4
 800dcec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcee:	2304      	movs	r3, #4
 800dcf0:	e014      	b.n	800dd1c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e009      	b.n	800dd1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d002      	beq.n	800dd1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2240      	movs	r2, #64	@ 0x40
 800dd18:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd1a:	2300      	movs	r3, #0
  
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr
 800dd28:	20000010 	.word	0x20000010
 800dd2c:	10624dd3 	.word	0x10624dd3

0800dd30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd38:	4b11      	ldr	r3, [pc, #68]	@ (800dd80 <SDMMC_GetCmdError+0x50>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a11      	ldr	r2, [pc, #68]	@ (800dd84 <SDMMC_GetCmdError+0x54>)
 800dd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd42:	0a5b      	lsrs	r3, r3, #9
 800dd44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd48:	fb02 f303 	mul.w	r3, r2, r3
 800dd4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	1e5a      	subs	r2, r3, #1
 800dd52:	60fa      	str	r2, [r7, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d102      	bne.n	800dd5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd5c:	e009      	b.n	800dd72 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d0f1      	beq.n	800dd4e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	22c5      	movs	r2, #197	@ 0xc5
 800dd6e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	20000010 	.word	0x20000010
 800dd84:	10624dd3 	.word	0x10624dd3

0800dd88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd88:	b084      	sub	sp, #16
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	f107 001c 	add.w	r0, r7, #28
 800dd96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d123      	bne.n	800ddea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dda6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ddb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ddca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d105      	bne.n	800ddde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f001 fb32 	bl	800f448 <USB_CoreReset>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
 800dde8:	e01b      	b.n	800de22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f001 fb26 	bl	800f448 <USB_CoreReset>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800de00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800de04:	2b00      	cmp	r3, #0
 800de06:	d106      	bne.n	800de16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	639a      	str	r2, [r3, #56]	@ 0x38
 800de14:	e005      	b.n	800de22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800de22:	7fbb      	ldrb	r3, [r7, #30]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d10b      	bne.n	800de40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	f043 0206 	orr.w	r2, r3, #6
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f043 0220 	orr.w	r2, r3, #32
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de40:	7bfb      	ldrb	r3, [r7, #15]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de4c:	b004      	add	sp, #16
 800de4e:	4770      	bx	lr

0800de50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de50:	b480      	push	{r7}
 800de52:	b087      	sub	sp, #28
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	4613      	mov	r3, r2
 800de5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	2b02      	cmp	r3, #2
 800de62:	d165      	bne.n	800df30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4a41      	ldr	r2, [pc, #260]	@ (800df6c <USB_SetTurnaroundTime+0x11c>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d906      	bls.n	800de7a <USB_SetTurnaroundTime+0x2a>
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	4a40      	ldr	r2, [pc, #256]	@ (800df70 <USB_SetTurnaroundTime+0x120>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d202      	bcs.n	800de7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de74:	230f      	movs	r3, #15
 800de76:	617b      	str	r3, [r7, #20]
 800de78:	e062      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	4a3c      	ldr	r2, [pc, #240]	@ (800df70 <USB_SetTurnaroundTime+0x120>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d306      	bcc.n	800de90 <USB_SetTurnaroundTime+0x40>
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	4a3b      	ldr	r2, [pc, #236]	@ (800df74 <USB_SetTurnaroundTime+0x124>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d202      	bcs.n	800de90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de8a:	230e      	movs	r3, #14
 800de8c:	617b      	str	r3, [r7, #20]
 800de8e:	e057      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4a38      	ldr	r2, [pc, #224]	@ (800df74 <USB_SetTurnaroundTime+0x124>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d306      	bcc.n	800dea6 <USB_SetTurnaroundTime+0x56>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	4a37      	ldr	r2, [pc, #220]	@ (800df78 <USB_SetTurnaroundTime+0x128>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d202      	bcs.n	800dea6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dea0:	230d      	movs	r3, #13
 800dea2:	617b      	str	r3, [r7, #20]
 800dea4:	e04c      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	4a33      	ldr	r2, [pc, #204]	@ (800df78 <USB_SetTurnaroundTime+0x128>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d306      	bcc.n	800debc <USB_SetTurnaroundTime+0x6c>
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	4a32      	ldr	r2, [pc, #200]	@ (800df7c <USB_SetTurnaroundTime+0x12c>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d802      	bhi.n	800debc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800deb6:	230c      	movs	r3, #12
 800deb8:	617b      	str	r3, [r7, #20]
 800deba:	e041      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4a2f      	ldr	r2, [pc, #188]	@ (800df7c <USB_SetTurnaroundTime+0x12c>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d906      	bls.n	800ded2 <USB_SetTurnaroundTime+0x82>
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4a2e      	ldr	r2, [pc, #184]	@ (800df80 <USB_SetTurnaroundTime+0x130>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d802      	bhi.n	800ded2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800decc:	230b      	movs	r3, #11
 800dece:	617b      	str	r3, [r7, #20]
 800ded0:	e036      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	4a2a      	ldr	r2, [pc, #168]	@ (800df80 <USB_SetTurnaroundTime+0x130>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d906      	bls.n	800dee8 <USB_SetTurnaroundTime+0x98>
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	4a29      	ldr	r2, [pc, #164]	@ (800df84 <USB_SetTurnaroundTime+0x134>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d802      	bhi.n	800dee8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dee2:	230a      	movs	r3, #10
 800dee4:	617b      	str	r3, [r7, #20]
 800dee6:	e02b      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4a26      	ldr	r2, [pc, #152]	@ (800df84 <USB_SetTurnaroundTime+0x134>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d906      	bls.n	800defe <USB_SetTurnaroundTime+0xae>
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	4a25      	ldr	r2, [pc, #148]	@ (800df88 <USB_SetTurnaroundTime+0x138>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d202      	bcs.n	800defe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800def8:	2309      	movs	r3, #9
 800defa:	617b      	str	r3, [r7, #20]
 800defc:	e020      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	4a21      	ldr	r2, [pc, #132]	@ (800df88 <USB_SetTurnaroundTime+0x138>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d306      	bcc.n	800df14 <USB_SetTurnaroundTime+0xc4>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4a20      	ldr	r2, [pc, #128]	@ (800df8c <USB_SetTurnaroundTime+0x13c>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d802      	bhi.n	800df14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800df0e:	2308      	movs	r3, #8
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	e015      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	4a1d      	ldr	r2, [pc, #116]	@ (800df8c <USB_SetTurnaroundTime+0x13c>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d906      	bls.n	800df2a <USB_SetTurnaroundTime+0xda>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	4a1c      	ldr	r2, [pc, #112]	@ (800df90 <USB_SetTurnaroundTime+0x140>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d202      	bcs.n	800df2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800df24:	2307      	movs	r3, #7
 800df26:	617b      	str	r3, [r7, #20]
 800df28:	e00a      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800df2a:	2306      	movs	r3, #6
 800df2c:	617b      	str	r3, [r7, #20]
 800df2e:	e007      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d102      	bne.n	800df3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800df36:	2309      	movs	r3, #9
 800df38:	617b      	str	r3, [r7, #20]
 800df3a:	e001      	b.n	800df40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800df3c:	2309      	movs	r3, #9
 800df3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	68da      	ldr	r2, [r3, #12]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	029b      	lsls	r3, r3, #10
 800df54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800df58:	431a      	orrs	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	00d8acbf 	.word	0x00d8acbf
 800df70:	00e4e1c0 	.word	0x00e4e1c0
 800df74:	00f42400 	.word	0x00f42400
 800df78:	01067380 	.word	0x01067380
 800df7c:	011a499f 	.word	0x011a499f
 800df80:	01312cff 	.word	0x01312cff
 800df84:	014ca43f 	.word	0x014ca43f
 800df88:	016e3600 	.word	0x016e3600
 800df8c:	01a6ab1f 	.word	0x01a6ab1f
 800df90:	01e84800 	.word	0x01e84800

0800df94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	f043 0201 	orr.w	r2, r3, #1
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b083      	sub	sp, #12
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f023 0201 	bic.w	r2, r3, #1
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dff4:	78fb      	ldrb	r3, [r7, #3]
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d115      	bne.n	800e026 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e006:	200a      	movs	r0, #10
 800e008:	f7f6 f8aa 	bl	8004160 <HAL_Delay>
      ms += 10U;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	330a      	adds	r3, #10
 800e010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 f988 	bl	800f328 <USB_GetMode>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d01e      	beq.n	800e05c <USB_SetCurrentMode+0x84>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2bc7      	cmp	r3, #199	@ 0xc7
 800e022:	d9f0      	bls.n	800e006 <USB_SetCurrentMode+0x2e>
 800e024:	e01a      	b.n	800e05c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e026:	78fb      	ldrb	r3, [r7, #3]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d115      	bne.n	800e058 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e038:	200a      	movs	r0, #10
 800e03a:	f7f6 f891 	bl	8004160 <HAL_Delay>
      ms += 10U;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	330a      	adds	r3, #10
 800e042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f001 f96f 	bl	800f328 <USB_GetMode>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d005      	beq.n	800e05c <USB_SetCurrentMode+0x84>
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2bc7      	cmp	r3, #199	@ 0xc7
 800e054:	d9f0      	bls.n	800e038 <USB_SetCurrentMode+0x60>
 800e056:	e001      	b.n	800e05c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	e005      	b.n	800e068 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e060:	d101      	bne.n	800e066 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e000      	b.n	800e068 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e070:	b084      	sub	sp, #16
 800e072:	b580      	push	{r7, lr}
 800e074:	b086      	sub	sp, #24
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e07e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	613b      	str	r3, [r7, #16]
 800e08e:	e009      	b.n	800e0a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	3340      	adds	r3, #64	@ 0x40
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	2200      	movs	r2, #0
 800e09c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	2b0e      	cmp	r3, #14
 800e0a8:	d9f2      	bls.n	800e090 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e0aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d11c      	bne.n	800e0ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0c0:	f043 0302 	orr.w	r3, r3, #2
 800e0c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800e0ea:	e00b      	b.n	800e104 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e10a:	461a      	mov	r2, r3
 800e10c:	2300      	movs	r3, #0
 800e10e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e110:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e114:	2b01      	cmp	r3, #1
 800e116:	d10d      	bne.n	800e134 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d104      	bne.n	800e12a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e120:	2100      	movs	r1, #0
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f968 	bl	800e3f8 <USB_SetDevSpeed>
 800e128:	e008      	b.n	800e13c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e12a:	2101      	movs	r1, #1
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f963 	bl	800e3f8 <USB_SetDevSpeed>
 800e132:	e003      	b.n	800e13c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e134:	2103      	movs	r1, #3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f95e 	bl	800e3f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e13c:	2110      	movs	r1, #16
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f8fa 	bl	800e338 <USB_FlushTxFifo>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f924 	bl	800e39c <USB_FlushRxFifo>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e164:	461a      	mov	r2, r3
 800e166:	2300      	movs	r3, #0
 800e168:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e170:	461a      	mov	r2, r3
 800e172:	2300      	movs	r3, #0
 800e174:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e17c:	461a      	mov	r2, r3
 800e17e:	2300      	movs	r3, #0
 800e180:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e182:	2300      	movs	r3, #0
 800e184:	613b      	str	r3, [r7, #16]
 800e186:	e043      	b.n	800e210 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	015a      	lsls	r2, r3, #5
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e19a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e19e:	d118      	bne.n	800e1d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	015a      	lsls	r2, r3, #5
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	e013      	b.n	800e1e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	e008      	b.n	800e1e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1de:	461a      	mov	r2, r3
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	015a      	lsls	r2, r3, #5
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	015a      	lsls	r2, r3, #5
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e202:	461a      	mov	r2, r3
 800e204:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	3301      	adds	r3, #1
 800e20e:	613b      	str	r3, [r7, #16]
 800e210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e214:	461a      	mov	r2, r3
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	4293      	cmp	r3, r2
 800e21a:	d3b5      	bcc.n	800e188 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e21c:	2300      	movs	r3, #0
 800e21e:	613b      	str	r3, [r7, #16]
 800e220:	e043      	b.n	800e2aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e238:	d118      	bne.n	800e26c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e24c:	461a      	mov	r2, r3
 800e24e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	e013      	b.n	800e27e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	015a      	lsls	r2, r3, #5
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	4413      	add	r3, r2
 800e25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e262:	461a      	mov	r2, r3
 800e264:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e268:	6013      	str	r3, [r2, #0]
 800e26a:	e008      	b.n	800e27e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	015a      	lsls	r2, r3, #5
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e278:	461a      	mov	r2, r3
 800e27a:	2300      	movs	r3, #0
 800e27c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	015a      	lsls	r2, r3, #5
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4413      	add	r3, r2
 800e286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e28a:	461a      	mov	r2, r3
 800e28c:	2300      	movs	r3, #0
 800e28e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	015a      	lsls	r2, r3, #5
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4413      	add	r3, r2
 800e298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e29c:	461a      	mov	r2, r3
 800e29e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e2a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	613b      	str	r3, [r7, #16]
 800e2aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d3b5      	bcc.n	800e222 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e2c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e2d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e2d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d105      	bne.n	800e2ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	f043 0210 	orr.w	r2, r3, #16
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	699a      	ldr	r2, [r3, #24]
 800e2f0:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <USB_DevInit+0x2c4>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	f043 0208 	orr.w	r2, r3, #8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e30c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e310:	2b01      	cmp	r3, #1
 800e312:	d107      	bne.n	800e324 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e31c:	f043 0304 	orr.w	r3, r3, #4
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e324:	7dfb      	ldrb	r3, [r7, #23]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e330:	b004      	add	sp, #16
 800e332:	4770      	bx	lr
 800e334:	803c3800 	.word	0x803c3800

0800e338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e342:	2300      	movs	r3, #0
 800e344:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3301      	adds	r3, #1
 800e34a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e352:	d901      	bls.n	800e358 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e01b      	b.n	800e390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	daf2      	bge.n	800e346 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e360:	2300      	movs	r3, #0
 800e362:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	019b      	lsls	r3, r3, #6
 800e368:	f043 0220 	orr.w	r2, r3, #32
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3301      	adds	r3, #1
 800e374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e37c:	d901      	bls.n	800e382 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e37e:	2303      	movs	r3, #3
 800e380:	e006      	b.n	800e390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	f003 0320 	and.w	r3, r3, #32
 800e38a:	2b20      	cmp	r3, #32
 800e38c:	d0f0      	beq.n	800e370 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3b4:	d901      	bls.n	800e3ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e018      	b.n	800e3ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	daf2      	bge.n	800e3a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2210      	movs	r2, #16
 800e3ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3d8:	d901      	bls.n	800e3de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	e006      	b.n	800e3ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	f003 0310 	and.w	r3, r3, #16
 800e3e6:	2b10      	cmp	r3, #16
 800e3e8:	d0f0      	beq.n	800e3cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	68f9      	ldr	r1, [r7, #12]
 800e414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e418:	4313      	orrs	r3, r2
 800e41a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b087      	sub	sp, #28
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f003 0306 	and.w	r3, r3, #6
 800e442:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e44a:	2300      	movs	r3, #0
 800e44c:	75fb      	strb	r3, [r7, #23]
 800e44e:	e00a      	b.n	800e466 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b02      	cmp	r3, #2
 800e454:	d002      	beq.n	800e45c <USB_GetDevSpeed+0x32>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b06      	cmp	r3, #6
 800e45a:	d102      	bne.n	800e462 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e45c:	2302      	movs	r3, #2
 800e45e:	75fb      	strb	r3, [r7, #23]
 800e460:	e001      	b.n	800e466 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e462:	230f      	movs	r3, #15
 800e464:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e466:	7dfb      	ldrb	r3, [r7, #23]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	371c      	adds	r7, #28
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	785b      	ldrb	r3, [r3, #1]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d13a      	bne.n	800e506 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e496:	69da      	ldr	r2, [r3, #28]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	f003 030f 	and.w	r3, r3, #15
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	68f9      	ldr	r1, [r7, #12]
 800e4aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	015a      	lsls	r2, r3, #5
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d155      	bne.n	800e574 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	015a      	lsls	r2, r3, #5
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	791b      	ldrb	r3, [r3, #4]
 800e4e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	059b      	lsls	r3, r3, #22
 800e4ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	0151      	lsls	r1, r2, #5
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	440a      	add	r2, r1
 800e4f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	e036      	b.n	800e574 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e50c:	69da      	ldr	r2, [r3, #28]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f003 030f 	and.w	r3, r3, #15
 800e516:	2101      	movs	r1, #1
 800e518:	fa01 f303 	lsl.w	r3, r1, r3
 800e51c:	041b      	lsls	r3, r3, #16
 800e51e:	68f9      	ldr	r1, [r7, #12]
 800e520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e524:	4313      	orrs	r3, r2
 800e526:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d11a      	bne.n	800e574 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	4413      	add	r3, r2
 800e546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	791b      	ldrb	r3, [r3, #4]
 800e558:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e55a:	430b      	orrs	r3, r1
 800e55c:	4313      	orrs	r3, r2
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	440a      	add	r2, r1
 800e566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e56a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e56e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e572:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	785b      	ldrb	r3, [r3, #1]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d161      	bne.n	800e664 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5b6:	d11f      	bne.n	800e5f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	0151      	lsls	r1, r2, #5
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	440a      	add	r2, r1
 800e5ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e5d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	0151      	lsls	r1, r2, #5
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	440a      	add	r2, r1
 800e5ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	2101      	movs	r1, #1
 800e60a:	fa01 f303 	lsl.w	r3, r1, r3
 800e60e:	b29b      	uxth	r3, r3
 800e610:	43db      	mvns	r3, r3
 800e612:	68f9      	ldr	r1, [r7, #12]
 800e614:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e618:	4013      	ands	r3, r2
 800e61a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e622:	69da      	ldr	r2, [r3, #28]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	f003 030f 	and.w	r3, r3, #15
 800e62c:	2101      	movs	r1, #1
 800e62e:	fa01 f303 	lsl.w	r3, r1, r3
 800e632:	b29b      	uxth	r3, r3
 800e634:	43db      	mvns	r3, r3
 800e636:	68f9      	ldr	r1, [r7, #12]
 800e638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e63c:	4013      	ands	r3, r2
 800e63e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	0159      	lsls	r1, r3, #5
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	440b      	add	r3, r1
 800e656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e65a:	4619      	mov	r1, r3
 800e65c:	4b35      	ldr	r3, [pc, #212]	@ (800e734 <USB_DeactivateEndpoint+0x1b0>)
 800e65e:	4013      	ands	r3, r2
 800e660:	600b      	str	r3, [r1, #0]
 800e662:	e060      	b.n	800e726 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e67a:	d11f      	bne.n	800e6bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	0151      	lsls	r1, r2, #5
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	440a      	add	r2, r1
 800e692:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e69a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	0151      	lsls	r1, r2, #5
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	440a      	add	r2, r1
 800e6b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 030f 	and.w	r3, r3, #15
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d2:	041b      	lsls	r3, r3, #16
 800e6d4:	43db      	mvns	r3, r3
 800e6d6:	68f9      	ldr	r1, [r7, #12]
 800e6d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6dc:	4013      	ands	r3, r2
 800e6de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6e6:	69da      	ldr	r2, [r3, #28]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6f6:	041b      	lsls	r3, r3, #16
 800e6f8:	43db      	mvns	r3, r3
 800e6fa:	68f9      	ldr	r1, [r7, #12]
 800e6fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e700:	4013      	ands	r3, r2
 800e702:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	0159      	lsls	r1, r3, #5
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	440b      	add	r3, r1
 800e71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e71e:	4619      	mov	r1, r3
 800e720:	4b05      	ldr	r3, [pc, #20]	@ (800e738 <USB_DeactivateEndpoint+0x1b4>)
 800e722:	4013      	ands	r3, r2
 800e724:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	ec337800 	.word	0xec337800
 800e738:	eff37800 	.word	0xeff37800

0800e73c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08a      	sub	sp, #40	@ 0x28
 800e740:	af02      	add	r7, sp, #8
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	785b      	ldrb	r3, [r3, #1]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	f040 817a 	bne.w	800ea52 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d132      	bne.n	800e7cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	015a      	lsls	r2, r3, #5
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	4413      	add	r3, r2
 800e76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	69ba      	ldr	r2, [r7, #24]
 800e776:	0151      	lsls	r1, r2, #5
 800e778:	69fa      	ldr	r2, [r7, #28]
 800e77a:	440a      	add	r2, r1
 800e77c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e780:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e784:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	015a      	lsls	r2, r3, #5
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	4413      	add	r3, r2
 800e792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	015a      	lsls	r2, r3, #5
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	69ba      	ldr	r2, [r7, #24]
 800e7ba:	0151      	lsls	r1, r2, #5
 800e7bc:	69fa      	ldr	r2, [r7, #28]
 800e7be:	440a      	add	r2, r1
 800e7c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c4:	0cdb      	lsrs	r3, r3, #19
 800e7c6:	04db      	lsls	r3, r3, #19
 800e7c8:	6113      	str	r3, [r2, #16]
 800e7ca:	e092      	b.n	800e8f2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	015a      	lsls	r2, r3, #5
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	0151      	lsls	r1, r2, #5
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	440a      	add	r2, r1
 800e7e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7e6:	0cdb      	lsrs	r3, r3, #19
 800e7e8:	04db      	lsls	r3, r3, #19
 800e7ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	015a      	lsls	r2, r3, #5
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	69ba      	ldr	r2, [r7, #24]
 800e7fc:	0151      	lsls	r1, r2, #5
 800e7fe:	69fa      	ldr	r2, [r7, #28]
 800e800:	440a      	add	r2, r1
 800e802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e806:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e80a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e80e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d11a      	bne.n	800e84c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	691a      	ldr	r2, [r3, #16]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d903      	bls.n	800e82a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	689a      	ldr	r2, [r3, #8]
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	015a      	lsls	r2, r3, #5
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	4413      	add	r3, r2
 800e832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	69ba      	ldr	r2, [r7, #24]
 800e83a:	0151      	lsls	r1, r2, #5
 800e83c:	69fa      	ldr	r2, [r7, #28]
 800e83e:	440a      	add	r2, r1
 800e840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e844:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e848:	6113      	str	r3, [r2, #16]
 800e84a:	e01b      	b.n	800e884 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	015a      	lsls	r2, r3, #5
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	4413      	add	r3, r2
 800e854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e858:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	6919      	ldr	r1, [r3, #16]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	440b      	add	r3, r1
 800e864:	1e59      	subs	r1, r3, #1
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e86e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e870:	4ba2      	ldr	r3, [pc, #648]	@ (800eafc <USB_EPStartXfer+0x3c0>)
 800e872:	400b      	ands	r3, r1
 800e874:	69b9      	ldr	r1, [r7, #24]
 800e876:	0148      	lsls	r0, r1, #5
 800e878:	69f9      	ldr	r1, [r7, #28]
 800e87a:	4401      	add	r1, r0
 800e87c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e880:	4313      	orrs	r3, r2
 800e882:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	015a      	lsls	r2, r3, #5
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	4413      	add	r3, r2
 800e88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e890:	691a      	ldr	r2, [r3, #16]
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e89a:	69b9      	ldr	r1, [r7, #24]
 800e89c:	0148      	lsls	r0, r1, #5
 800e89e:	69f9      	ldr	r1, [r7, #28]
 800e8a0:	4401      	add	r1, r0
 800e8a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	791b      	ldrb	r3, [r3, #4]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d11f      	bne.n	800e8f2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	0151      	lsls	r1, r2, #5
 800e8c4:	69fa      	ldr	r2, [r7, #28]
 800e8c6:	440a      	add	r2, r1
 800e8c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e8d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	015a      	lsls	r2, r3, #5
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	4413      	add	r3, r2
 800e8da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	0151      	lsls	r1, r2, #5
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	440a      	add	r2, r1
 800e8e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8f2:	79fb      	ldrb	r3, [r7, #7]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d14b      	bne.n	800e990 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d009      	beq.n	800e914 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	4413      	add	r3, r2
 800e908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e90c:	461a      	mov	r2, r3
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	69db      	ldr	r3, [r3, #28]
 800e912:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	791b      	ldrb	r3, [r3, #4]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d128      	bne.n	800e96e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d110      	bne.n	800e94e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	69ba      	ldr	r2, [r7, #24]
 800e93c:	0151      	lsls	r1, r2, #5
 800e93e:	69fa      	ldr	r2, [r7, #28]
 800e940:	440a      	add	r2, r1
 800e942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e946:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	e00f      	b.n	800e96e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	015a      	lsls	r2, r3, #5
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	4413      	add	r3, r2
 800e956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	69ba      	ldr	r2, [r7, #24]
 800e95e:	0151      	lsls	r1, r2, #5
 800e960:	69fa      	ldr	r2, [r7, #28]
 800e962:	440a      	add	r2, r1
 800e964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e96c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	69ba      	ldr	r2, [r7, #24]
 800e97e:	0151      	lsls	r1, r2, #5
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	440a      	add	r2, r1
 800e984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e988:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	e165      	b.n	800ec5c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	69ba      	ldr	r2, [r7, #24]
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e9ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	791b      	ldrb	r3, [r3, #4]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d015      	beq.n	800e9e4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 814d 	beq.w	800ec5c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	2101      	movs	r1, #1
 800e9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e9d8:	69f9      	ldr	r1, [r7, #28]
 800e9da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	634b      	str	r3, [r1, #52]	@ 0x34
 800e9e2:	e13b      	b.n	800ec5c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d110      	bne.n	800ea16 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	0151      	lsls	r1, r2, #5
 800ea06:	69fa      	ldr	r2, [r7, #28]
 800ea08:	440a      	add	r2, r1
 800ea0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	e00f      	b.n	800ea36 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	0151      	lsls	r1, r2, #5
 800ea28:	69fa      	ldr	r2, [r7, #28]
 800ea2a:	440a      	add	r2, r1
 800ea2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	68d9      	ldr	r1, [r3, #12]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	781a      	ldrb	r2, [r3, #0]
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	b298      	uxth	r0, r3
 800ea44:	79fb      	ldrb	r3, [r7, #7]
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4603      	mov	r3, r0
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f000 f9b8 	bl	800edc0 <USB_WritePacket>
 800ea50:	e104      	b.n	800ec5c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	015a      	lsls	r2, r3, #5
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	4413      	add	r3, r2
 800ea5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	69ba      	ldr	r2, [r7, #24]
 800ea62:	0151      	lsls	r1, r2, #5
 800ea64:	69fa      	ldr	r2, [r7, #28]
 800ea66:	440a      	add	r2, r1
 800ea68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea6c:	0cdb      	lsrs	r3, r3, #19
 800ea6e:	04db      	lsls	r3, r3, #19
 800ea70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7e:	691b      	ldr	r3, [r3, #16]
 800ea80:	69ba      	ldr	r2, [r7, #24]
 800ea82:	0151      	lsls	r1, r2, #5
 800ea84:	69fa      	ldr	r2, [r7, #28]
 800ea86:	440a      	add	r2, r1
 800ea88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea94:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d131      	bne.n	800eb00 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d003      	beq.n	800eaac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	689a      	ldr	r2, [r3, #8]
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	689a      	ldr	r2, [r3, #8]
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eac0:	691a      	ldr	r2, [r3, #16]
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaca:	69b9      	ldr	r1, [r7, #24]
 800eacc:	0148      	lsls	r0, r1, #5
 800eace:	69f9      	ldr	r1, [r7, #28]
 800ead0:	4401      	add	r1, r0
 800ead2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ead6:	4313      	orrs	r3, r2
 800ead8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	69ba      	ldr	r2, [r7, #24]
 800eaea:	0151      	lsls	r1, r2, #5
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	440a      	add	r2, r1
 800eaf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eaf8:	6113      	str	r3, [r2, #16]
 800eafa:	e061      	b.n	800ebc0 <USB_EPStartXfer+0x484>
 800eafc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d123      	bne.n	800eb50 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	015a      	lsls	r2, r3, #5
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	4413      	add	r3, r2
 800eb10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb1e:	69b9      	ldr	r1, [r7, #24]
 800eb20:	0148      	lsls	r0, r1, #5
 800eb22:	69f9      	ldr	r1, [r7, #28]
 800eb24:	4401      	add	r1, r0
 800eb26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	015a      	lsls	r2, r3, #5
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	4413      	add	r3, r2
 800eb36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	69ba      	ldr	r2, [r7, #24]
 800eb3e:	0151      	lsls	r1, r2, #5
 800eb40:	69fa      	ldr	r2, [r7, #28]
 800eb42:	440a      	add	r2, r1
 800eb44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb4c:	6113      	str	r3, [r2, #16]
 800eb4e:	e037      	b.n	800ebc0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	691a      	ldr	r2, [r3, #16]
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	4413      	add	r3, r2
 800eb5a:	1e5a      	subs	r2, r3, #1
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	8afa      	ldrh	r2, [r7, #22]
 800eb6c:	fb03 f202 	mul.w	r2, r3, r2
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	015a      	lsls	r2, r3, #5
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb80:	691a      	ldr	r2, [r3, #16]
 800eb82:	8afb      	ldrh	r3, [r7, #22]
 800eb84:	04d9      	lsls	r1, r3, #19
 800eb86:	4b38      	ldr	r3, [pc, #224]	@ (800ec68 <USB_EPStartXfer+0x52c>)
 800eb88:	400b      	ands	r3, r1
 800eb8a:	69b9      	ldr	r1, [r7, #24]
 800eb8c:	0148      	lsls	r0, r1, #5
 800eb8e:	69f9      	ldr	r1, [r7, #28]
 800eb90:	4401      	add	r1, r0
 800eb92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb96:	4313      	orrs	r3, r2
 800eb98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	015a      	lsls	r2, r3, #5
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	4413      	add	r3, r2
 800eba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba6:	691a      	ldr	r2, [r3, #16]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	6a1b      	ldr	r3, [r3, #32]
 800ebac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebb0:	69b9      	ldr	r1, [r7, #24]
 800ebb2:	0148      	lsls	r0, r1, #5
 800ebb4:	69f9      	ldr	r1, [r7, #28]
 800ebb6:	4401      	add	r1, r0
 800ebb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d10d      	bne.n	800ebe2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d009      	beq.n	800ebe2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	68d9      	ldr	r1, [r3, #12]
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	015a      	lsls	r2, r3, #5
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	4413      	add	r3, r2
 800ebda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebde:	460a      	mov	r2, r1
 800ebe0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	791b      	ldrb	r3, [r3, #4]
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d128      	bne.n	800ec3c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d110      	bne.n	800ec1c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	69ba      	ldr	r2, [r7, #24]
 800ec0a:	0151      	lsls	r1, r2, #5
 800ec0c:	69fa      	ldr	r2, [r7, #28]
 800ec0e:	440a      	add	r2, r1
 800ec10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	e00f      	b.n	800ec3c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	69ba      	ldr	r2, [r7, #24]
 800ec2c:	0151      	lsls	r1, r2, #5
 800ec2e:	69fa      	ldr	r2, [r7, #28]
 800ec30:	440a      	add	r2, r1
 800ec32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	69ba      	ldr	r2, [r7, #24]
 800ec4c:	0151      	lsls	r1, r2, #5
 800ec4e:	69fa      	ldr	r2, [r7, #28]
 800ec50:	440a      	add	r2, r1
 800ec52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3720      	adds	r7, #32
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	1ff80000 	.word	0x1ff80000

0800ec6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec76:	2300      	movs	r3, #0
 800ec78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	785b      	ldrb	r3, [r3, #1]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d14a      	bne.n	800ed20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	015a      	lsls	r2, r3, #5
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	4413      	add	r3, r2
 800ec94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca2:	f040 8086 	bne.w	800edb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	7812      	ldrb	r2, [r2, #0]
 800ecba:	0151      	lsls	r1, r2, #5
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	440a      	add	r2, r1
 800ecc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	015a      	lsls	r2, r3, #5
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	7812      	ldrb	r2, [r2, #0]
 800ecde:	0151      	lsls	r1, r2, #5
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	440a      	add	r2, r1
 800ece4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ece8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d902      	bls.n	800ed04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	75fb      	strb	r3, [r7, #23]
          break;
 800ed02:	e056      	b.n	800edb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	015a      	lsls	r2, r3, #5
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed1c:	d0e7      	beq.n	800ecee <USB_EPStopXfer+0x82>
 800ed1e:	e048      	b.n	800edb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	015a      	lsls	r2, r3, #5
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	4413      	add	r3, r2
 800ed2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed38:	d13b      	bne.n	800edb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	0151      	lsls	r1, r2, #5
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	440a      	add	r2, r1
 800ed54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	015a      	lsls	r2, r3, #5
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	4413      	add	r3, r2
 800ed68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	7812      	ldrb	r2, [r2, #0]
 800ed72:	0151      	lsls	r1, r2, #5
 800ed74:	693a      	ldr	r2, [r7, #16]
 800ed76:	440a      	add	r2, r1
 800ed78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3301      	adds	r3, #1
 800ed86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d902      	bls.n	800ed98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	75fb      	strb	r3, [r7, #23]
          break;
 800ed96:	e00c      	b.n	800edb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	015a      	lsls	r2, r3, #5
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	4413      	add	r3, r2
 800eda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edb0:	d0e7      	beq.n	800ed82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	371c      	adds	r7, #28
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b089      	sub	sp, #36	@ 0x24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	4611      	mov	r1, r2
 800edcc:	461a      	mov	r2, r3
 800edce:	460b      	mov	r3, r1
 800edd0:	71fb      	strb	r3, [r7, #7]
 800edd2:	4613      	mov	r3, r2
 800edd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800edde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d123      	bne.n	800ee2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ede6:	88bb      	ldrh	r3, [r7, #4]
 800ede8:	3303      	adds	r3, #3
 800edea:	089b      	lsrs	r3, r3, #2
 800edec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800edee:	2300      	movs	r3, #0
 800edf0:	61bb      	str	r3, [r7, #24]
 800edf2:	e018      	b.n	800ee26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800edf4:	79fb      	ldrb	r3, [r7, #7]
 800edf6:	031a      	lsls	r2, r3, #12
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee00:	461a      	mov	r2, r3
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	3301      	adds	r3, #1
 800ee12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	3301      	adds	r3, #1
 800ee18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	3301      	adds	r3, #1
 800ee24:	61bb      	str	r3, [r7, #24]
 800ee26:	69ba      	ldr	r2, [r7, #24]
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d3e2      	bcc.n	800edf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3724      	adds	r7, #36	@ 0x24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b08b      	sub	sp, #44	@ 0x2c
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	4613      	mov	r3, r2
 800ee48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee52:	88fb      	ldrh	r3, [r7, #6]
 800ee54:	089b      	lsrs	r3, r3, #2
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee5a:	88fb      	ldrh	r3, [r7, #6]
 800ee5c:	f003 0303 	and.w	r3, r3, #3
 800ee60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee62:	2300      	movs	r3, #0
 800ee64:	623b      	str	r3, [r7, #32]
 800ee66:	e014      	b.n	800ee92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee72:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee76:	3301      	adds	r3, #1
 800ee78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee82:	3301      	adds	r3, #1
 800ee84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	3301      	adds	r3, #1
 800ee8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	623b      	str	r3, [r7, #32]
 800ee92:	6a3a      	ldr	r2, [r7, #32]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d3e6      	bcc.n	800ee68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee9a:	8bfb      	ldrh	r3, [r7, #30]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d01e      	beq.n	800eede <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eea0:	2300      	movs	r3, #0
 800eea2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f107 0310 	add.w	r3, r7, #16
 800eeb0:	6812      	ldr	r2, [r2, #0]
 800eeb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eeb4:	693a      	ldr	r2, [r7, #16]
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	00db      	lsls	r3, r3, #3
 800eebc:	fa22 f303 	lsr.w	r3, r2, r3
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec4:	701a      	strb	r2, [r3, #0]
      i++;
 800eec6:	6a3b      	ldr	r3, [r7, #32]
 800eec8:	3301      	adds	r3, #1
 800eeca:	623b      	str	r3, [r7, #32]
      pDest++;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eece:	3301      	adds	r3, #1
 800eed0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eed2:	8bfb      	ldrh	r3, [r7, #30]
 800eed4:	3b01      	subs	r3, #1
 800eed6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eed8:	8bfb      	ldrh	r3, [r7, #30]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1ea      	bne.n	800eeb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	372c      	adds	r7, #44	@ 0x2c
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	785b      	ldrb	r3, [r3, #1]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d12c      	bne.n	800ef62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	015a      	lsls	r2, r3, #5
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	4413      	add	r3, r2
 800ef10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	db12      	blt.n	800ef40 <USB_EPSetStall+0x54>
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00f      	beq.n	800ef40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	0151      	lsls	r1, r2, #5
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	440a      	add	r2, r1
 800ef36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	0151      	lsls	r1, r2, #5
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	440a      	add	r2, r1
 800ef56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	e02b      	b.n	800efba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	015a      	lsls	r2, r3, #5
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	4413      	add	r3, r2
 800ef6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	db12      	blt.n	800ef9a <USB_EPSetStall+0xae>
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00f      	beq.n	800ef9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	0151      	lsls	r1, r2, #5
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	440a      	add	r2, r1
 800ef90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	015a      	lsls	r2, r3, #5
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4413      	add	r3, r2
 800efa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	0151      	lsls	r1, r2, #5
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	440a      	add	r2, r1
 800efb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800efb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3714      	adds	r7, #20
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	785b      	ldrb	r3, [r3, #1]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d128      	bne.n	800f036 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4413      	add	r3, r2
 800efec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	0151      	lsls	r1, r2, #5
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	440a      	add	r2, r1
 800effa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800effe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f002:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	791b      	ldrb	r3, [r3, #4]
 800f008:	2b03      	cmp	r3, #3
 800f00a:	d003      	beq.n	800f014 <USB_EPClearStall+0x4c>
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	791b      	ldrb	r3, [r3, #4]
 800f010:	2b02      	cmp	r3, #2
 800f012:	d138      	bne.n	800f086 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	0151      	lsls	r1, r2, #5
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	440a      	add	r2, r1
 800f02a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f02e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	e027      	b.n	800f086 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	0151      	lsls	r1, r2, #5
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	440a      	add	r2, r1
 800f04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f050:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f054:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	791b      	ldrb	r3, [r3, #4]
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d003      	beq.n	800f066 <USB_EPClearStall+0x9e>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	791b      	ldrb	r3, [r3, #4]
 800f062:	2b02      	cmp	r3, #2
 800f064:	d10f      	bne.n	800f086 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	015a      	lsls	r2, r3, #5
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	4413      	add	r3, r2
 800f06e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	0151      	lsls	r1, r2, #5
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	440a      	add	r2, r1
 800f07c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f084:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	e016      	b.n	800f0d4 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	015a      	lsls	r2, r3, #5
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f0b8:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	015a      	lsls	r2, r3, #5
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f0cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	617b      	str	r3, [r7, #20]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2b0e      	cmp	r3, #14
 800f0d8:	d9e5      	bls.n	800f0a6 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff f94c 	bl	800e39c <USB_FlushRxFifo>
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <USB_StopDevice+0x7e>
  {
    return ret;
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	e00b      	b.n	800f12a <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f112:	2110      	movs	r1, #16
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7ff f90f 	bl	800e338 <USB_FlushTxFifo>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <USB_StopDevice+0x94>
  {
    return ret;
 800f124:	7bfb      	ldrb	r3, [r7, #15]
 800f126:	e000      	b.n	800f12a <USB_StopDevice+0x96>
  }

  return ret;
 800f128:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3718      	adds	r7, #24
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f132:	b480      	push	{r7}
 800f134:	b085      	sub	sp, #20
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f150:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f154:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	78fb      	ldrb	r3, [r7, #3]
 800f160:	011b      	lsls	r3, r3, #4
 800f162:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f166:	68f9      	ldr	r1, [r7, #12]
 800f168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f16c:	4313      	orrs	r3, r2
 800f16e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f17e:	b480      	push	{r7}
 800f180:	b085      	sub	sp, #20
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f198:	f023 0303 	bic.w	r3, r3, #3
 800f19c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1ac:	f023 0302 	bic.w	r3, r3, #2
 800f1b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1b2:	2300      	movs	r3, #0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f1da:	f023 0303 	bic.w	r3, r3, #3
 800f1de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1ee:	f043 0302 	orr.w	r3, r3, #2
 800f1f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3714      	adds	r7, #20
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f202:	b480      	push	{r7}
 800f204:	b085      	sub	sp, #20
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	695b      	ldr	r3, [r3, #20]
 800f20e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	4013      	ands	r3, r2
 800f218:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f21a:	68fb      	ldr	r3, [r7, #12]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f244:	69db      	ldr	r3, [r3, #28]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	4013      	ands	r3, r2
 800f24a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	0c1b      	lsrs	r3, r3, #16
}
 800f250:	4618      	mov	r0, r3
 800f252:	3714      	adds	r7, #20
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f278:	69db      	ldr	r3, [r3, #28]
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	4013      	ands	r3, r2
 800f27e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	b29b      	uxth	r3, r3
}
 800f284:	4618      	mov	r0, r3
 800f286:	3714      	adds	r7, #20
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	015a      	lsls	r2, r3, #5
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2be:	68bb      	ldr	r3, [r7, #8]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3714      	adds	r7, #20
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b087      	sub	sp, #28
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	f003 030f 	and.w	r3, r3, #15
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2fc:	01db      	lsls	r3, r3, #7
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f306:	78fb      	ldrb	r3, [r7, #3]
 800f308:	015a      	lsls	r2, r3, #5
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	4413      	add	r3, r2
 800f30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	4013      	ands	r3, r2
 800f318:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f31a:	68bb      	ldr	r3, [r7, #8]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	371c      	adds	r7, #28
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	695b      	ldr	r3, [r3, #20]
 800f334:	f003 0301 	and.w	r3, r3, #1
}
 800f338:	4618      	mov	r0, r3
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f35e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f362:	f023 0307 	bic.w	r3, r3, #7
 800f366:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f37a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
	...

0800f38c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	460b      	mov	r3, r1
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	333c      	adds	r3, #60	@ 0x3c
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	4a26      	ldr	r2, [pc, #152]	@ (800f444 <USB_EP0_OutStart+0xb8>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d90a      	bls.n	800f3c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f3c0:	d101      	bne.n	800f3c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	e037      	b.n	800f436 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3f4:	f043 0318 	orr.w	r3, r3, #24
 800f3f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f400:	691b      	ldr	r3, [r3, #16]
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f408:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f40c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f40e:	7afb      	ldrb	r3, [r7, #11]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d10f      	bne.n	800f434 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f42e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	4f54300a 	.word	0x4f54300a

0800f448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f450:	2300      	movs	r3, #0
 800f452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3301      	adds	r3, #1
 800f458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f460:	d901      	bls.n	800f466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f462:	2303      	movs	r3, #3
 800f464:	e01b      	b.n	800f49e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	daf2      	bge.n	800f454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	f043 0201 	orr.w	r2, r3, #1
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	3301      	adds	r3, #1
 800f482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f48a:	d901      	bls.n	800f490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f48c:	2303      	movs	r3, #3
 800f48e:	e006      	b.n	800f49e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	f003 0301 	and.w	r3, r3, #1
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d0f0      	beq.n	800f47e <USB_CoreReset+0x36>

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
	...

0800f4ac <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a13      	ldr	r2, [pc, #76]	@ (800f504 <HAL_UART_RxCpltCallback+0x58>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d11f      	bne.n	800f4fc <HAL_UART_RxCpltCallback+0x50>
 800f4bc:	4b12      	ldr	r3, [pc, #72]	@ (800f508 <HAL_UART_RxCpltCallback+0x5c>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d01b      	beq.n	800f4fc <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	4911      	ldr	r1, [pc, #68]	@ (800f50c <HAL_UART_RxCpltCallback+0x60>)
 800f4c8:	480e      	ldr	r0, [pc, #56]	@ (800f504 <HAL_UART_RxCpltCallback+0x58>)
 800f4ca:	f7fc ff68 	bl	800c39e <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f4ce:	4b10      	ldr	r3, [pc, #64]	@ (800f510 <HAL_UART_RxCpltCallback+0x64>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10a      	bne.n	800f4ec <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f50c <HAL_UART_RxCpltCallback+0x60>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f514 <HAL_UART_RxCpltCallback+0x68>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	7bfa      	ldrb	r2, [r7, #15]
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f003 f86d 	bl	80125c4 <embeddedCliReceiveChar>
 800f4ea:	e002      	b.n	800f4f2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f518 <HAL_UART_RxCpltCallback+0x6c>)
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f4f2:	f7f4 fe29 	bl	8004148 <HAL_GetTick>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	4a08      	ldr	r2, [pc, #32]	@ (800f51c <HAL_UART_RxCpltCallback+0x70>)
 800f4fa:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f4fc:	bf00      	nop
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	20001a74 	.word	0x20001a74
 800f508:	20001b39 	.word	0x20001b39
 800f50c:	20001b38 	.word	0x20001b38
 800f510:	20001b3a 	.word	0x20001b3a
 800f514:	20001b2c 	.word	0x20001b2c
 800f518:	20001b3b 	.word	0x20001b3b
 800f51c:	200017c0 	.word	0x200017c0

0800f520 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f52c:	78fb      	ldrb	r3, [r7, #3]
 800f52e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f530:	f107 010f 	add.w	r1, r7, #15
 800f534:	2364      	movs	r3, #100	@ 0x64
 800f536:	2201      	movs	r2, #1
 800f538:	4803      	ldr	r0, [pc, #12]	@ (800f548 <writeCharToCli+0x28>)
 800f53a:	f7fc fea5 	bl	800c288 <HAL_UART_Transmit>
}
 800f53e:	bf00      	nop
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20001a74 	.word	0x20001a74

0800f54c <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f54c:	b40e      	push	{r1, r2, r3}
 800f54e:	b580      	push	{r7, lr}
 800f550:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f554:	af00      	add	r7, sp, #0
 800f556:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f55a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f55e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f560:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f564:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f568:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f56c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f56e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f572:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f576:	f107 000c 	add.w	r0, r7, #12
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f584:	f00f fb6e 	bl	801ec64 <vsniprintf>
 800f588:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f58c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f590:	2b00      	cmp	r3, #0
 800f592:	da08      	bge.n	800f5a6 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f594:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c8 <cli_printf+0x7c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	221d      	movs	r2, #29
 800f59c:	2101      	movs	r1, #1
 800f59e:	480b      	ldr	r0, [pc, #44]	@ (800f5cc <cli_printf+0x80>)
 800f5a0:	f00f fa54 	bl	801ea4c <fwrite>
 800f5a4:	e009      	b.n	800f5ba <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f5a6:	f107 020c 	add.w	r2, r7, #12
 800f5aa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f5ae:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	6818      	ldr	r0, [r3, #0]
 800f5b6:	f003 f8eb 	bl	8012790 <embeddedCliPrint>
}
 800f5ba:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5c4:	b003      	add	sp, #12
 800f5c6:	4770      	bx	lr
 800f5c8:	20000148 	.word	0x20000148
 800f5cc:	0802246c 	.word	0x0802246c

0800f5d0 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f5e0:	f7f4 fdb2 	bl	8004148 <HAL_GetTick>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4a5f      	ldr	r2, [pc, #380]	@ (800f764 <receiveString+0x194>)
 800f5e8:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f5ea:	4b5f      	ldr	r3, [pc, #380]	@ (800f768 <receiveString+0x198>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f000 80a0 	beq.w	800f734 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f5f4:	4b5d      	ldr	r3, [pc, #372]	@ (800f76c <receiveString+0x19c>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	2b0d      	cmp	r3, #13
 800f5fa:	d004      	beq.n	800f606 <receiveString+0x36>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	69fa      	ldr	r2, [r7, #28]
 800f602:	429a      	cmp	r2, r3
 800f604:	d164      	bne.n	800f6d0 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	4413      	add	r3, r2
 800f60c:	2200      	movs	r2, #0
 800f60e:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f610:	4b55      	ldr	r3, [pc, #340]	@ (800f768 <receiveString+0x198>)
 800f612:	2200      	movs	r2, #0
 800f614:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f616:	2300      	movs	r3, #0
 800f618:	61bb      	str	r3, [r7, #24]
 800f61a:	e052      	b.n	800f6c2 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	617b      	str	r3, [r7, #20]
 800f620:	e00b      	b.n	800f63a <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	3301      	adds	r3, #1
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	441a      	add	r2, r3
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	68b9      	ldr	r1, [r7, #8]
 800f62e:	440b      	add	r3, r1
 800f630:	7812      	ldrb	r2, [r2, #0]
 800f632:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	3301      	adds	r3, #1
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	4413      	add	r3, r2
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1ed      	bne.n	800f622 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	4413      	add	r3, r2
 800f64c:	2200      	movs	r2, #0
 800f64e:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	4413      	add	r3, r2
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b60      	cmp	r3, #96	@ 0x60
 800f65a:	d905      	bls.n	800f668 <receiveString+0x98>
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4413      	add	r3, r2
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	2b7a      	cmp	r3, #122	@ 0x7a
 800f666:	d929      	bls.n	800f6bc <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	4413      	add	r3, r2
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b40      	cmp	r3, #64	@ 0x40
 800f672:	d905      	bls.n	800f680 <receiveString+0xb0>
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	4413      	add	r3, r2
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b5a      	cmp	r3, #90	@ 0x5a
 800f67e:	d91d      	bls.n	800f6bc <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4413      	add	r3, r2
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2b5f      	cmp	r3, #95	@ 0x5f
 800f68a:	d017      	beq.n	800f6bc <receiveString+0xec>
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	4413      	add	r3, r2
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b3a      	cmp	r3, #58	@ 0x3a
 800f696:	d011      	beq.n	800f6bc <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	4413      	add	r3, r2
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f6a2:	d905      	bls.n	800f6b0 <receiveString+0xe0>
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b39      	cmp	r3, #57	@ 0x39
 800f6ae:	d905      	bls.n	800f6bc <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1af      	bne.n	800f61c <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1c0      	bne.n	800f650 <receiveString+0x80>
					}
				}
				break;
 800f6ce:	e044      	b.n	800f75a <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f6d0:	4b26      	ldr	r3, [pc, #152]	@ (800f76c <receiveString+0x19c>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	2b08      	cmp	r3, #8
 800f6d6:	d003      	beq.n	800f6e0 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f6d8:	4b24      	ldr	r3, [pc, #144]	@ (800f76c <receiveString+0x19c>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6de:	d117      	bne.n	800f710 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2108      	movs	r1, #8
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2120      	movs	r1, #32
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2108      	movs	r1, #8
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	4798      	blx	r3
					--index;
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	3b01      	subs	r3, #1
 800f702:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	4413      	add	r3, r2
 800f70a:	2200      	movs	r2, #0
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	e00e      	b.n	800f72e <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	61fa      	str	r2, [r7, #28]
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	4413      	add	r3, r2
 800f71a:	4a14      	ldr	r2, [pc, #80]	@ (800f76c <receiveString+0x19c>)
 800f71c:	7812      	ldrb	r2, [r2, #0]
 800f71e:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a11      	ldr	r2, [pc, #68]	@ (800f76c <receiveString+0x19c>)
 800f726:	7812      	ldrb	r2, [r2, #0]
 800f728:	4611      	mov	r1, r2
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f72e:	4b0e      	ldr	r3, [pc, #56]	@ (800f768 <receiveString+0x198>)
 800f730:	2200      	movs	r2, #0
 800f732:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f734:	f7f4 fd08 	bl	8004148 <HAL_GetTick>
 800f738:	4602      	mov	r2, r0
 800f73a:	4b0a      	ldr	r3, [pc, #40]	@ (800f764 <receiveString+0x194>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	1ad2      	subs	r2, r2, r3
 800f740:	4b0b      	ldr	r3, [pc, #44]	@ (800f770 <receiveString+0x1a0>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d808      	bhi.n	800f75a <receiveString+0x18a>
 800f748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f74c:	4809      	ldr	r0, [pc, #36]	@ (800f774 <receiveString+0x1a4>)
 800f74e:	f7f6 fcc7 	bl	80060e0 <HAL_GPIO_ReadPin>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d000      	beq.n	800f75a <receiveString+0x18a>
		if (flag_cli) {
 800f758:	e747      	b.n	800f5ea <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f75a:	bf00      	nop
 800f75c:	3720      	adds	r7, #32
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	20001b30 	.word	0x20001b30
 800f768:	20001b3b 	.word	0x20001b3b
 800f76c:	20001b38 	.word	0x20001b38
 800f770:	2000001c 	.word	0x2000001c
 800f774:	40020000 	.word	0x40020000

0800f778 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f784:	4903      	ldr	r1, [pc, #12]	@ (800f794 <onClearCLI+0x1c>)
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f7ff fee0 	bl	800f54c <cli_printf>
}
 800f78c:	bf00      	nop
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	0802248c 	.word	0x0802248c

0800f798 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f798:	b580      	push	{r7, lr}
 800f79a:	b092      	sub	sp, #72	@ 0x48
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f7a4:	4b24      	ldr	r3, [pc, #144]	@ (800f838 <debug_scd4x_PM25+0xa0>)
 800f7a6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f7a8:	4924      	ldr	r1, [pc, #144]	@ (800f83c <debug_scd4x_PM25+0xa4>)
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f7ff fece 	bl	800f54c <cli_printf>

	cli_other = 1;
 800f7b0:	4b23      	ldr	r3, [pc, #140]	@ (800f840 <debug_scd4x_PM25+0xa8>)
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f7b6:	4b23      	ldr	r3, [pc, #140]	@ (800f844 <debug_scd4x_PM25+0xac>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f7bc:	f107 0310 	add.w	r3, r7, #16
 800f7c0:	2232      	movs	r2, #50	@ 0x32
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f7ff ff03 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f7ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f7cc:	f7f0 fd68 	bl	80002a0 <strlen>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7da:	481b      	ldr	r0, [pc, #108]	@ (800f848 <debug_scd4x_PM25+0xb0>)
 800f7dc:	f7fc fd54 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f7e0:	f107 0310 	add.w	r3, r7, #16
 800f7e4:	2179      	movs	r1, #121	@ 0x79
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f00f fb00 	bl	801edec <strchr>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d007      	beq.n	800f802 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f7f2:	4b16      	ldr	r3, [pc, #88]	@ (800f84c <debug_scd4x_PM25+0xb4>)
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f7f8:	4915      	ldr	r1, [pc, #84]	@ (800f850 <debug_scd4x_PM25+0xb8>)
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f7ff fea6 	bl	800f54c <cli_printf>
 800f800:	e00f      	b.n	800f822 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f802:	f107 0310 	add.w	r3, r7, #16
 800f806:	216e      	movs	r1, #110	@ 0x6e
 800f808:	4618      	mov	r0, r3
 800f80a:	f00f faef 	bl	801edec <strchr>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f814:	4b0d      	ldr	r3, [pc, #52]	@ (800f84c <debug_scd4x_PM25+0xb4>)
 800f816:	2200      	movs	r2, #0
 800f818:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f81a:	490e      	ldr	r1, [pc, #56]	@ (800f854 <debug_scd4x_PM25+0xbc>)
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7ff fe95 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 800f822:	4b08      	ldr	r3, [pc, #32]	@ (800f844 <debug_scd4x_PM25+0xac>)
 800f824:	2200      	movs	r2, #0
 800f826:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f828:	4b05      	ldr	r3, [pc, #20]	@ (800f840 <debug_scd4x_PM25+0xa8>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	701a      	strb	r2, [r3, #0]
}
 800f82e:	bf00      	nop
 800f830:	3748      	adds	r7, #72	@ 0x48
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	08022494 	.word	0x08022494
 800f83c:	08022498 	.word	0x08022498
 800f840:	20001b3a 	.word	0x20001b3a
 800f844:	20001b3b 	.word	0x20001b3b
 800f848:	20001a74 	.word	0x20001a74
 800f84c:	20001578 	.word	0x20001578
 800f850:	080224cc 	.word	0x080224cc
 800f854:	080224dc 	.word	0x080224dc

0800f858 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f864:	f7f2 fe22 	bl	80024ac <ver_GetUid>
 800f868:	4603      	mov	r3, r0
 800f86a:	461a      	mov	r2, r3
 800f86c:	4903      	ldr	r1, [pc, #12]	@ (800f87c <DeviceSignature+0x24>)
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff fe6c 	bl	800f54c <cli_printf>
}
 800f874:	bf00      	nop
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	080224ec 	.word	0x080224ec

0800f880 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f880:	b580      	push	{r7, lr}
 800f882:	b092      	sub	sp, #72	@ 0x48
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f88c:	4b2d      	ldr	r3, [pc, #180]	@ (800f944 <SetID+0xc4>)
 800f88e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f890:	492d      	ldr	r1, [pc, #180]	@ (800f948 <SetID+0xc8>)
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff fe5a 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f898:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f89a:	f7f0 fd01 	bl	80002a0 <strlen>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8a8:	4828      	ldr	r0, [pc, #160]	@ (800f94c <SetID+0xcc>)
 800f8aa:	f7fc fced 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f8ae:	4928      	ldr	r1, [pc, #160]	@ (800f950 <SetID+0xd0>)
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7ff fe4b 	bl	800f54c <cli_printf>
	cli_other = 1;
 800f8b6:	4b27      	ldr	r3, [pc, #156]	@ (800f954 <SetID+0xd4>)
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f8bc:	4b26      	ldr	r3, [pc, #152]	@ (800f958 <SetID+0xd8>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f8c2:	f107 0310 	add.w	r3, r7, #16
 800f8c6:	2232      	movs	r2, #50	@ 0x32
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fe80 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f8d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f8d2:	f7f0 fce5 	bl	80002a0 <strlen>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8e0:	481a      	ldr	r0, [pc, #104]	@ (800f94c <SetID+0xcc>)
 800f8e2:	f7fc fcd1 	bl	800c288 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f8e6:	f107 0310 	add.w	r3, r7, #16
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f0 fcd8 	bl	80002a0 <strlen>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f8f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8fa:	2b1d      	cmp	r3, #29
 800f8fc:	d814      	bhi.n	800f928 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f8fe:	7c3b      	ldrb	r3, [r7, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d015      	beq.n	800f930 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f904:	f107 0310 	add.w	r3, r7, #16
 800f908:	4619      	mov	r1, r3
 800f90a:	4814      	ldr	r0, [pc, #80]	@ (800f95c <SetID+0xdc>)
 800f90c:	f00f fb75 	bl	801effa <strcpy>
				set_param_flags();
 800f910:	4b13      	ldr	r3, [pc, #76]	@ (800f960 <SetID+0xe0>)
 800f912:	2201      	movs	r2, #1
 800f914:	701a      	strb	r2, [r3, #0]
 800f916:	4b13      	ldr	r3, [pc, #76]	@ (800f964 <SetID+0xe4>)
 800f918:	2201      	movs	r2, #1
 800f91a:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f91c:	4a0f      	ldr	r2, [pc, #60]	@ (800f95c <SetID+0xdc>)
 800f91e:	4912      	ldr	r1, [pc, #72]	@ (800f968 <SetID+0xe8>)
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7ff fe13 	bl	800f54c <cli_printf>
 800f926:	e003      	b.n	800f930 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f928:	4910      	ldr	r1, [pc, #64]	@ (800f96c <SetID+0xec>)
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f7ff fe0e 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 800f930:	4b09      	ldr	r3, [pc, #36]	@ (800f958 <SetID+0xd8>)
 800f932:	2200      	movs	r2, #0
 800f934:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f936:	4b07      	ldr	r3, [pc, #28]	@ (800f954 <SetID+0xd4>)
 800f938:	2200      	movs	r2, #0
 800f93a:	701a      	strb	r2, [r3, #0]

}
 800f93c:	bf00      	nop
 800f93e:	3748      	adds	r7, #72	@ 0x48
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	08022494 	.word	0x08022494
 800f948:	08022508 	.word	0x08022508
 800f94c:	20001a74 	.word	0x20001a74
 800f950:	08022540 	.word	0x08022540
 800f954:	20001b3a 	.word	0x20001b3a
 800f958:	20001b3b 	.word	0x20001b3b
 800f95c:	20001399 	.word	0x20001399
 800f960:	20001579 	.word	0x20001579
 800f964:	2000157a 	.word	0x2000157a
 800f968:	08022568 	.word	0x08022568
 800f96c:	0802257c 	.word	0x0802257c

0800f970 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b092      	sub	sp, #72	@ 0x48
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f97c:	4b2d      	ldr	r3, [pc, #180]	@ (800fa34 <SetLocation+0xc4>)
 800f97e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f980:	492d      	ldr	r1, [pc, #180]	@ (800fa38 <SetLocation+0xc8>)
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f7ff fde2 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f988:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f98a:	f7f0 fc89 	bl	80002a0 <strlen>
 800f98e:	4603      	mov	r3, r0
 800f990:	b29a      	uxth	r2, r3
 800f992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f996:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f998:	4828      	ldr	r0, [pc, #160]	@ (800fa3c <SetLocation+0xcc>)
 800f99a:	f7fc fc75 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f99e:	4928      	ldr	r1, [pc, #160]	@ (800fa40 <SetLocation+0xd0>)
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f7ff fdd3 	bl	800f54c <cli_printf>
	cli_other = 1;
 800f9a6:	4b27      	ldr	r3, [pc, #156]	@ (800fa44 <SetLocation+0xd4>)
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f9ac:	4b26      	ldr	r3, [pc, #152]	@ (800fa48 <SetLocation+0xd8>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f9b2:	f107 0310 	add.w	r3, r7, #16
 800f9b6:	2232      	movs	r2, #50	@ 0x32
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7ff fe08 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f9c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f9c2:	f7f0 fc6d 	bl	80002a0 <strlen>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f9d0:	481a      	ldr	r0, [pc, #104]	@ (800fa3c <SetLocation+0xcc>)
 800f9d2:	f7fc fc59 	bl	800c288 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f9d6:	f107 0310 	add.w	r3, r7, #16
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f0 fc60 	bl	80002a0 <strlen>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f9e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f9ea:	2b0e      	cmp	r3, #14
 800f9ec:	d814      	bhi.n	800fa18 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f9ee:	7c3b      	ldrb	r3, [r7, #16]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d015      	beq.n	800fa20 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f9f4:	f107 0310 	add.w	r3, r7, #16
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4814      	ldr	r0, [pc, #80]	@ (800fa4c <SetLocation+0xdc>)
 800f9fc:	f00f fafd 	bl	801effa <strcpy>
				set_param_flags();
 800fa00:	4b13      	ldr	r3, [pc, #76]	@ (800fa50 <SetLocation+0xe0>)
 800fa02:	2201      	movs	r2, #1
 800fa04:	701a      	strb	r2, [r3, #0]
 800fa06:	4b13      	ldr	r3, [pc, #76]	@ (800fa54 <SetLocation+0xe4>)
 800fa08:	2201      	movs	r2, #1
 800fa0a:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800fa0c:	4a0f      	ldr	r2, [pc, #60]	@ (800fa4c <SetLocation+0xdc>)
 800fa0e:	4912      	ldr	r1, [pc, #72]	@ (800fa58 <SetLocation+0xe8>)
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f7ff fd9b 	bl	800f54c <cli_printf>
 800fa16:	e003      	b.n	800fa20 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800fa18:	4910      	ldr	r1, [pc, #64]	@ (800fa5c <SetLocation+0xec>)
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7ff fd96 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 800fa20:	4b09      	ldr	r3, [pc, #36]	@ (800fa48 <SetLocation+0xd8>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fa26:	4b07      	ldr	r3, [pc, #28]	@ (800fa44 <SetLocation+0xd4>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	701a      	strb	r2, [r3, #0]

}
 800fa2c:	bf00      	nop
 800fa2e:	3748      	adds	r7, #72	@ 0x48
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	08022494 	.word	0x08022494
 800fa38:	08022508 	.word	0x08022508
 800fa3c:	20001a74 	.word	0x20001a74
 800fa40:	0802258c 	.word	0x0802258c
 800fa44:	20001b3a 	.word	0x20001b3a
 800fa48:	20001b3b 	.word	0x20001b3b
 800fa4c:	200013cb 	.word	0x200013cb
 800fa50:	20001579 	.word	0x20001579
 800fa54:	2000157a 	.word	0x2000157a
 800fa58:	080225c0 	.word	0x080225c0
 800fa5c:	080225d8 	.word	0x080225d8

0800fa60 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b092      	sub	sp, #72	@ 0x48
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa6c:	4b2d      	ldr	r3, [pc, #180]	@ (800fb24 <Setgroup+0xc4>)
 800fa6e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa70:	492d      	ldr	r1, [pc, #180]	@ (800fb28 <Setgroup+0xc8>)
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f7ff fd6a 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa7a:	f7f0 fc11 	bl	80002a0 <strlen>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa88:	4828      	ldr	r0, [pc, #160]	@ (800fb2c <Setgroup+0xcc>)
 800fa8a:	f7fc fbfd 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fa8e:	4928      	ldr	r1, [pc, #160]	@ (800fb30 <Setgroup+0xd0>)
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f7ff fd5b 	bl	800f54c <cli_printf>
	cli_other = 1;
 800fa96:	4b27      	ldr	r3, [pc, #156]	@ (800fb34 <Setgroup+0xd4>)
 800fa98:	2201      	movs	r2, #1
 800fa9a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa9c:	4b26      	ldr	r3, [pc, #152]	@ (800fb38 <Setgroup+0xd8>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800faa2:	f107 0310 	add.w	r3, r7, #16
 800faa6:	2232      	movs	r2, #50	@ 0x32
 800faa8:	4619      	mov	r1, r3
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7ff fd90 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fab0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fab2:	f7f0 fbf5 	bl	80002a0 <strlen>
 800fab6:	4603      	mov	r3, r0
 800fab8:	b29a      	uxth	r2, r3
 800faba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fabe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fac0:	481a      	ldr	r0, [pc, #104]	@ (800fb2c <Setgroup+0xcc>)
 800fac2:	f7fc fbe1 	bl	800c288 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fac6:	f107 0310 	add.w	r3, r7, #16
 800faca:	4618      	mov	r0, r3
 800facc:	f7f0 fbe8 	bl	80002a0 <strlen>
 800fad0:	4603      	mov	r3, r0
 800fad2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fada:	2b0e      	cmp	r3, #14
 800fadc:	d814      	bhi.n	800fb08 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800fade:	7c3b      	ldrb	r3, [r7, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d015      	beq.n	800fb10 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800fae4:	f107 0310 	add.w	r3, r7, #16
 800fae8:	4619      	mov	r1, r3
 800faea:	4814      	ldr	r0, [pc, #80]	@ (800fb3c <Setgroup+0xdc>)
 800faec:	f00f fa85 	bl	801effa <strcpy>
				set_param_flags();
 800faf0:	4b13      	ldr	r3, [pc, #76]	@ (800fb40 <Setgroup+0xe0>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	701a      	strb	r2, [r3, #0]
 800faf6:	4b13      	ldr	r3, [pc, #76]	@ (800fb44 <Setgroup+0xe4>)
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800fafc:	4a0f      	ldr	r2, [pc, #60]	@ (800fb3c <Setgroup+0xdc>)
 800fafe:	4912      	ldr	r1, [pc, #72]	@ (800fb48 <Setgroup+0xe8>)
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7ff fd23 	bl	800f54c <cli_printf>
 800fb06:	e003      	b.n	800fb10 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fb08:	4910      	ldr	r1, [pc, #64]	@ (800fb4c <Setgroup+0xec>)
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f7ff fd1e 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 800fb10:	4b09      	ldr	r3, [pc, #36]	@ (800fb38 <Setgroup+0xd8>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fb16:	4b07      	ldr	r3, [pc, #28]	@ (800fb34 <Setgroup+0xd4>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	701a      	strb	r2, [r3, #0]

}
 800fb1c:	bf00      	nop
 800fb1e:	3748      	adds	r7, #72	@ 0x48
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	08022494 	.word	0x08022494
 800fb28:	08022508 	.word	0x08022508
 800fb2c:	20001a74 	.word	0x20001a74
 800fb30:	08022644 	.word	0x08022644
 800fb34:	20001b3a 	.word	0x20001b3a
 800fb38:	20001b3b 	.word	0x20001b3b
 800fb3c:	2000142f 	.word	0x2000142f
 800fb40:	20001579 	.word	0x20001579
 800fb44:	2000157a 	.word	0x2000157a
 800fb48:	08022674 	.word	0x08022674
 800fb4c:	08022688 	.word	0x08022688

0800fb50 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fb5c:	4a04      	ldr	r2, [pc, #16]	@ (800fb70 <GetID+0x20>)
 800fb5e:	4905      	ldr	r1, [pc, #20]	@ (800fb74 <GetID+0x24>)
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f7ff fcf3 	bl	800f54c <cli_printf>
}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	20001399 	.word	0x20001399
 800fb74:	0802269c 	.word	0x0802269c

0800fb78 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fb84:	4a04      	ldr	r2, [pc, #16]	@ (800fb98 <GetLocation+0x20>)
 800fb86:	4905      	ldr	r1, [pc, #20]	@ (800fb9c <GetLocation+0x24>)
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fcdf 	bl	800f54c <cli_printf>

}
 800fb8e:	bf00      	nop
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	200013cb 	.word	0x200013cb
 800fb9c:	080226a4 	.word	0x080226a4

0800fba0 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fbac:	4a04      	ldr	r2, [pc, #16]	@ (800fbc0 <Getgroup+0x20>)
 800fbae:	4905      	ldr	r1, [pc, #20]	@ (800fbc4 <Getgroup+0x24>)
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f7ff fccb 	bl	800f54c <cli_printf>

}
 800fbb6:	bf00      	nop
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	2000142f 	.word	0x2000142f
 800fbc4:	080226c0 	.word	0x080226c0

0800fbc8 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b09a      	sub	sp, #104	@ 0x68
 800fbcc:	af02      	add	r7, sp, #8
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fbd4:	4b26      	ldr	r3, [pc, #152]	@ (800fc70 <SetDate+0xa8>)
 800fbd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fbd8:	4926      	ldr	r1, [pc, #152]	@ (800fc74 <SetDate+0xac>)
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f7ff fcb6 	bl	800f54c <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fbe0:	4b25      	ldr	r3, [pc, #148]	@ (800fc78 <SetDate+0xb0>)
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fbe6:	4b25      	ldr	r3, [pc, #148]	@ (800fc7c <SetDate+0xb4>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fbec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbf0:	2232      	movs	r2, #50	@ 0x32
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f7ff fceb 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbfa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbfc:	f7f0 fb50 	bl	80002a0 <strlen>
 800fc00:	4603      	mov	r3, r0
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc08:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc0a:	481d      	ldr	r0, [pc, #116]	@ (800fc80 <SetDate+0xb8>)
 800fc0c:	f7fc fb3c 	bl	800c288 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fc10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d004      	beq.n	800fc22 <SetDate+0x5a>
		Set_Date(buffer);
 800fc18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f004 f883 	bl	8013d28 <Set_Date>
	}
	flag_cli = 0;
 800fc22:	4b16      	ldr	r3, [pc, #88]	@ (800fc7c <SetDate+0xb4>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fc28:	4b13      	ldr	r3, [pc, #76]	@ (800fc78 <SetDate+0xb0>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fc2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc32:	2200      	movs	r2, #0
 800fc34:	4619      	mov	r1, r3
 800fc36:	4813      	ldr	r0, [pc, #76]	@ (800fc84 <SetDate+0xbc>)
 800fc38:	f7f9 ffa5 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fc3c:	f107 0310 	add.w	r3, r7, #16
 800fc40:	2200      	movs	r2, #0
 800fc42:	4619      	mov	r1, r3
 800fc44:	480f      	ldr	r0, [pc, #60]	@ (800fc84 <SetDate+0xbc>)
 800fc46:	f7f9 febc 	bl	80099c2 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc54:	4619      	mov	r1, r3
			gDate.Year);
 800fc56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	490a      	ldr	r1, [pc, #40]	@ (800fc88 <SetDate+0xc0>)
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f7ff fc73 	bl	800f54c <cli_printf>

}
 800fc66:	bf00      	nop
 800fc68:	3760      	adds	r7, #96	@ 0x60
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	08022494 	.word	0x08022494
 800fc74:	080226cc 	.word	0x080226cc
 800fc78:	20001b3a 	.word	0x20001b3a
 800fc7c:	20001b3b 	.word	0x20001b3b
 800fc80:	20001a74 	.word	0x20001a74
 800fc84:	20001898 	.word	0x20001898
 800fc88:	08022708 	.word	0x08022708

0800fc8c <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b09a      	sub	sp, #104	@ 0x68
 800fc90:	af02      	add	r7, sp, #8
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc98:	4b26      	ldr	r3, [pc, #152]	@ (800fd34 <SetTime+0xa8>)
 800fc9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc9c:	4926      	ldr	r1, [pc, #152]	@ (800fd38 <SetTime+0xac>)
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f7ff fc54 	bl	800f54c <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fca4:	4b25      	ldr	r3, [pc, #148]	@ (800fd3c <SetTime+0xb0>)
 800fca6:	2201      	movs	r2, #1
 800fca8:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fcaa:	4b25      	ldr	r3, [pc, #148]	@ (800fd40 <SetTime+0xb4>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fcb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcb4:	2232      	movs	r2, #50	@ 0x32
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f7ff fc89 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fcbe:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fcc0:	f7f0 faee 	bl	80002a0 <strlen>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fccc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fcce:	481d      	ldr	r0, [pc, #116]	@ (800fd44 <SetTime+0xb8>)
 800fcd0:	f7fc fada 	bl	800c288 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fcd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d004      	beq.n	800fce6 <SetTime+0x5a>
		Set_Time(buffer);
 800fcdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fce0:	4618      	mov	r0, r3
 800fce2:	f004 f8df 	bl	8013ea4 <Set_Time>
	}
	flag_cli = 0;
 800fce6:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <SetTime+0xb4>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fcec:	4b13      	ldr	r3, [pc, #76]	@ (800fd3c <SetTime+0xb0>)
 800fcee:	2200      	movs	r2, #0
 800fcf0:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fcf2:	4b15      	ldr	r3, [pc, #84]	@ (800fd48 <SetTime+0xbc>)
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fcf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4619      	mov	r1, r3
 800fd00:	4812      	ldr	r0, [pc, #72]	@ (800fd4c <SetTime+0xc0>)
 800fd02:	f7f9 ff40 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd06:	f107 0310 	add.w	r3, r7, #16
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	480f      	ldr	r0, [pc, #60]	@ (800fd4c <SetTime+0xc0>)
 800fd10:	f7f9 fe57 	bl	80099c2 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd14:	7c3b      	ldrb	r3, [r7, #16]
 800fd16:	461a      	mov	r2, r3
 800fd18:	7c7b      	ldrb	r3, [r7, #17]
 800fd1a:	4619      	mov	r1, r3
			gTime.Seconds);
 800fd1c:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd1e:	9300      	str	r3, [sp, #0]
 800fd20:	460b      	mov	r3, r1
 800fd22:	490b      	ldr	r1, [pc, #44]	@ (800fd50 <SetTime+0xc4>)
 800fd24:	68f8      	ldr	r0, [r7, #12]
 800fd26:	f7ff fc11 	bl	800f54c <cli_printf>

}
 800fd2a:	bf00      	nop
 800fd2c:	3760      	adds	r7, #96	@ 0x60
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	08022494 	.word	0x08022494
 800fd38:	08022724 	.word	0x08022724
 800fd3c:	20001b3a 	.word	0x20001b3a
 800fd40:	20001b3b 	.word	0x20001b3b
 800fd44:	20001a74 	.word	0x20001a74
 800fd48:	20000029 	.word	0x20000029
 800fd4c:	20001898 	.word	0x20001898
 800fd50:	08022768 	.word	0x08022768

0800fd54 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b08c      	sub	sp, #48	@ 0x30
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd64:	2200      	movs	r2, #0
 800fd66:	4619      	mov	r1, r3
 800fd68:	480f      	ldr	r0, [pc, #60]	@ (800fda8 <GetDate+0x54>)
 800fd6a:	f7f9 ff0c 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd6e:	f107 0310 	add.w	r3, r7, #16
 800fd72:	2200      	movs	r2, #0
 800fd74:	4619      	mov	r1, r3
 800fd76:	480c      	ldr	r0, [pc, #48]	@ (800fda8 <GetDate+0x54>)
 800fd78:	f7f9 fe23 	bl	80099c2 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fd7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd80:	461a      	mov	r2, r3
 800fd82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fd86:	4619      	mov	r1, r3
 800fd88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4906      	ldr	r1, [pc, #24]	@ (800fdac <GetDate+0x58>)
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f7ff fbda 	bl	800f54c <cli_printf>
	HAL_Delay(100);
 800fd98:	2064      	movs	r0, #100	@ 0x64
 800fd9a:	f7f4 f9e1 	bl	8004160 <HAL_Delay>
}
 800fd9e:	bf00      	nop
 800fda0:	3728      	adds	r7, #40	@ 0x28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20001898 	.word	0x20001898
 800fdac:	08022784 	.word	0x08022784

0800fdb0 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b08c      	sub	sp, #48	@ 0x30
 800fdb4:	af02      	add	r7, sp, #8
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fdbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	480d      	ldr	r0, [pc, #52]	@ (800fdfc <GetTime+0x4c>)
 800fdc6:	f7f9 fede 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fdca:	f107 0310 	add.w	r3, r7, #16
 800fdce:	2200      	movs	r2, #0
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	480a      	ldr	r0, [pc, #40]	@ (800fdfc <GetTime+0x4c>)
 800fdd4:	f7f9 fdf5 	bl	80099c2 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fdd8:	7c3b      	ldrb	r3, [r7, #16]
 800fdda:	461a      	mov	r2, r3
 800fddc:	7c7b      	ldrb	r3, [r7, #17]
 800fdde:	4619      	mov	r1, r3
			gTime.Seconds);
 800fde0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	460b      	mov	r3, r1
 800fde6:	4906      	ldr	r1, [pc, #24]	@ (800fe00 <GetTime+0x50>)
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f7ff fbaf 	bl	800f54c <cli_printf>
	HAL_Delay(100);
 800fdee:	2064      	movs	r0, #100	@ 0x64
 800fdf0:	f7f4 f9b6 	bl	8004160 <HAL_Delay>
}
 800fdf4:	bf00      	nop
 800fdf6:	3728      	adds	r7, #40	@ 0x28
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	20001898 	.word	0x20001898
 800fe00:	08022794 	.word	0x08022794

0800fe04 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b092      	sub	sp, #72	@ 0x48
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fe10:	4b54      	ldr	r3, [pc, #336]	@ (800ff64 <SetInterval+0x160>)
 800fe12:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fe14:	4954      	ldr	r1, [pc, #336]	@ (800ff68 <SetInterval+0x164>)
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff fb98 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe1e:	f7f0 fa3f 	bl	80002a0 <strlen>
 800fe22:	4603      	mov	r3, r0
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe2c:	484f      	ldr	r0, [pc, #316]	@ (800ff6c <SetInterval+0x168>)
 800fe2e:	f7fc fa2b 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800fe32:	494f      	ldr	r1, [pc, #316]	@ (800ff70 <SetInterval+0x16c>)
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f7ff fb89 	bl	800f54c <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fe3a:	494e      	ldr	r1, [pc, #312]	@ (800ff74 <SetInterval+0x170>)
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7ff fb85 	bl	800f54c <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fe42:	494d      	ldr	r1, [pc, #308]	@ (800ff78 <SetInterval+0x174>)
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f7ff fb81 	bl	800f54c <cli_printf>
	cli_printf(cli,
 800fe4a:	494c      	ldr	r1, [pc, #304]	@ (800ff7c <SetInterval+0x178>)
 800fe4c:	68f8      	ldr	r0, [r7, #12]
 800fe4e:	f7ff fb7d 	bl	800f54c <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fe52:	4b4b      	ldr	r3, [pc, #300]	@ (800ff80 <SetInterval+0x17c>)
 800fe54:	2201      	movs	r2, #1
 800fe56:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe58:	4b4a      	ldr	r3, [pc, #296]	@ (800ff84 <SetInterval+0x180>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fe5e:	f107 0310 	add.w	r3, r7, #16
 800fe62:	2232      	movs	r2, #50	@ 0x32
 800fe64:	4619      	mov	r1, r3
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f7ff fbb2 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe6c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe6e:	f7f0 fa17 	bl	80002a0 <strlen>
 800fe72:	4603      	mov	r3, r0
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe7c:	483b      	ldr	r0, [pc, #236]	@ (800ff6c <SetInterval+0x168>)
 800fe7e:	f7fc fa03 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fe82:	f107 0310 	add.w	r3, r7, #16
 800fe86:	2131      	movs	r1, #49	@ 0x31
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f00e ffaf 	bl	801edec <strchr>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d015      	beq.n	800fec0 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fe94:	4b3c      	ldr	r3, [pc, #240]	@ (800ff88 <SetInterval+0x184>)
 800fe96:	2200      	movs	r2, #0
 800fe98:	f042 0205 	orr.w	r2, r2, #5
 800fe9c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fea0:	2200      	movs	r2, #0
 800fea2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fea6:	2200      	movs	r2, #0
 800fea8:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800feac:	2200      	movs	r2, #0
 800feae:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800feb2:	4b36      	ldr	r3, [pc, #216]	@ (800ff8c <SetInterval+0x188>)
 800feb4:	2201      	movs	r2, #1
 800feb6:	701a      	strb	r2, [r3, #0]
 800feb8:	4b35      	ldr	r3, [pc, #212]	@ (800ff90 <SetInterval+0x18c>)
 800feba:	2201      	movs	r2, #1
 800febc:	701a      	strb	r2, [r3, #0]
 800febe:	e03c      	b.n	800ff3a <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fec0:	f107 0310 	add.w	r3, r7, #16
 800fec4:	2132      	movs	r1, #50	@ 0x32
 800fec6:	4618      	mov	r0, r3
 800fec8:	f00e ff90 	bl	801edec <strchr>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d015      	beq.n	800fefe <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fed2:	4b2d      	ldr	r3, [pc, #180]	@ (800ff88 <SetInterval+0x184>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	f042 020f 	orr.w	r2, r2, #15
 800feda:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fee4:	2200      	movs	r2, #0
 800fee6:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800feea:	2200      	movs	r2, #0
 800feec:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fef0:	4b26      	ldr	r3, [pc, #152]	@ (800ff8c <SetInterval+0x188>)
 800fef2:	2201      	movs	r2, #1
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	4b26      	ldr	r3, [pc, #152]	@ (800ff90 <SetInterval+0x18c>)
 800fef8:	2201      	movs	r2, #1
 800fefa:	701a      	strb	r2, [r3, #0]
 800fefc:	e01d      	b.n	800ff3a <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800fefe:	f107 0310 	add.w	r3, r7, #16
 800ff02:	2133      	movs	r1, #51	@ 0x33
 800ff04:	4618      	mov	r0, r3
 800ff06:	f00e ff71 	bl	801edec <strchr>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d014      	beq.n	800ff3a <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800ff10:	4b1d      	ldr	r3, [pc, #116]	@ (800ff88 <SetInterval+0x184>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800ff18:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800ff2e:	4b17      	ldr	r3, [pc, #92]	@ (800ff8c <SetInterval+0x188>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	701a      	strb	r2, [r3, #0]
 800ff34:	4b16      	ldr	r3, [pc, #88]	@ (800ff90 <SetInterval+0x18c>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800ff3a:	4b12      	ldr	r3, [pc, #72]	@ (800ff84 <SetInterval+0x180>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ff40:	4b0f      	ldr	r3, [pc, #60]	@ (800ff80 <SetInterval+0x17c>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff46:	4b10      	ldr	r3, [pc, #64]	@ (800ff88 <SetInterval+0x184>)
 800ff48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	4911      	ldr	r1, [pc, #68]	@ (800ff94 <SetInterval+0x190>)
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f7ff fafb 	bl	800f54c <cli_printf>
	set_alarm_Time = 1;
 800ff56:	4b10      	ldr	r3, [pc, #64]	@ (800ff98 <SetInterval+0x194>)
 800ff58:	2201      	movs	r2, #1
 800ff5a:	701a      	strb	r2, [r3, #0]
}
 800ff5c:	bf00      	nop
 800ff5e:	3748      	adds	r7, #72	@ 0x48
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	08022494 	.word	0x08022494
 800ff68:	08022508 	.word	0x08022508
 800ff6c:	20001a74 	.word	0x20001a74
 800ff70:	080227a4 	.word	0x080227a4
 800ff74:	080227b8 	.word	0x080227b8
 800ff78:	080227cc 	.word	0x080227cc
 800ff7c:	080227e0 	.word	0x080227e0
 800ff80:	20001b3a 	.word	0x20001b3a
 800ff84:	20001b3b 	.word	0x20001b3b
 800ff88:	200012cc 	.word	0x200012cc
 800ff8c:	20001579 	.word	0x20001579
 800ff90:	2000157a 	.word	0x2000157a
 800ff94:	08022828 	.word	0x08022828
 800ff98:	20000029 	.word	0x20000029

0800ff9c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800ffa8:	4b05      	ldr	r3, [pc, #20]	@ (800ffc0 <GetInterval+0x24>)
 800ffaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ffae:	461a      	mov	r2, r3
 800ffb0:	4904      	ldr	r1, [pc, #16]	@ (800ffc4 <GetInterval+0x28>)
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f7ff faca 	bl	800f54c <cli_printf>

}
 800ffb8:	bf00      	nop
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	200012cc 	.word	0x200012cc
 800ffc4:	08022844 	.word	0x08022844

0800ffc8 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b09a      	sub	sp, #104	@ 0x68
 800ffcc:	af02      	add	r7, sp, #8
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800ffd4:	4b40      	ldr	r3, [pc, #256]	@ (80100d8 <SetFilename+0x110>)
 800ffd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800ffd8:	4940      	ldr	r1, [pc, #256]	@ (80100dc <SetFilename+0x114>)
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7ff fab6 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffe0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffe2:	f7f0 f95d 	bl	80002a0 <strlen>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffee:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fff0:	483b      	ldr	r0, [pc, #236]	@ (80100e0 <SetFilename+0x118>)
 800fff2:	f7fc f949 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800fff6:	493b      	ldr	r1, [pc, #236]	@ (80100e4 <SetFilename+0x11c>)
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f7ff faa7 	bl	800f54c <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800fffe:	493a      	ldr	r1, [pc, #232]	@ (80100e8 <SetFilename+0x120>)
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff faa3 	bl	800f54c <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 8010006:	4b39      	ldr	r3, [pc, #228]	@ (80100ec <SetFilename+0x124>)
 8010008:	2201      	movs	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801000c:	4b38      	ldr	r3, [pc, #224]	@ (80100f0 <SetFilename+0x128>)
 801000e:	2200      	movs	r2, #0
 8010010:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8010012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010016:	2232      	movs	r2, #50	@ 0x32
 8010018:	4619      	mov	r1, r3
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff fad8 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010020:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8010022:	f7f0 f93d 	bl	80002a0 <strlen>
 8010026:	4603      	mov	r3, r0
 8010028:	b29a      	uxth	r2, r3
 801002a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801002e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8010030:	482b      	ldr	r0, [pc, #172]	@ (80100e0 <SetFilename+0x118>)
 8010032:	f7fc f929 	bl	800c288 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 8010036:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801003a:	4618      	mov	r0, r3
 801003c:	f7f0 f930 	bl	80002a0 <strlen>
 8010040:	4603      	mov	r3, r0
 8010042:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 8010046:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801004a:	2b13      	cmp	r3, #19
 801004c:	d836      	bhi.n	80100bc <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 801004e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010052:	2b00      	cmp	r3, #0
 8010054:	d036      	beq.n	80100c4 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 8010056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801005a:	4619      	mov	r1, r3
 801005c:	4825      	ldr	r0, [pc, #148]	@ (80100f4 <SetFilename+0x12c>)
 801005e:	f00e ffcc 	bl	801effa <strcpy>
				set_param_flags();
 8010062:	4b25      	ldr	r3, [pc, #148]	@ (80100f8 <SetFilename+0x130>)
 8010064:	2201      	movs	r2, #1
 8010066:	701a      	strb	r2, [r3, #0]
 8010068:	4b24      	ldr	r3, [pc, #144]	@ (80100fc <SetFilename+0x134>)
 801006a:	2201      	movs	r2, #1
 801006c:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 801006e:	4b24      	ldr	r3, [pc, #144]	@ (8010100 <SetFilename+0x138>)
 8010070:	2201      	movs	r2, #1
 8010072:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 8010076:	4a1f      	ldr	r2, [pc, #124]	@ (80100f4 <SetFilename+0x12c>)
 8010078:	4922      	ldr	r1, [pc, #136]	@ (8010104 <SetFilename+0x13c>)
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff fa66 	bl	800f54c <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010084:	2200      	movs	r2, #0
 8010086:	4619      	mov	r1, r3
 8010088:	481f      	ldr	r0, [pc, #124]	@ (8010108 <SetFilename+0x140>)
 801008a:	f7f9 fd7c 	bl	8009b86 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801008e:	f107 0310 	add.w	r3, r7, #16
 8010092:	2200      	movs	r2, #0
 8010094:	4619      	mov	r1, r3
 8010096:	481c      	ldr	r0, [pc, #112]	@ (8010108 <SetFilename+0x140>)
 8010098:	f7f9 fc93 	bl	80099c2 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 801009c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100a0:	4619      	mov	r1, r3
 80100a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80100a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80100aa:	9201      	str	r2, [sp, #4]
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	460b      	mov	r3, r1
 80100b0:	4a10      	ldr	r2, [pc, #64]	@ (80100f4 <SetFilename+0x12c>)
 80100b2:	4916      	ldr	r1, [pc, #88]	@ (801010c <SetFilename+0x144>)
 80100b4:	4816      	ldr	r0, [pc, #88]	@ (8010110 <SetFilename+0x148>)
 80100b6:	f00e fd47 	bl	801eb48 <siprintf>
 80100ba:	e003      	b.n	80100c4 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 80100bc:	4915      	ldr	r1, [pc, #84]	@ (8010114 <SetFilename+0x14c>)
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f7ff fa44 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 80100c4:	4b0a      	ldr	r3, [pc, #40]	@ (80100f0 <SetFilename+0x128>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80100ca:	4b08      	ldr	r3, [pc, #32]	@ (80100ec <SetFilename+0x124>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	701a      	strb	r2, [r3, #0]

}
 80100d0:	bf00      	nop
 80100d2:	3760      	adds	r7, #96	@ 0x60
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	08022494 	.word	0x08022494
 80100dc:	08022508 	.word	0x08022508
 80100e0:	20001a74 	.word	0x20001a74
 80100e4:	08022860 	.word	0x08022860
 80100e8:	080228d4 	.word	0x080228d4
 80100ec:	20001b3a 	.word	0x20001b3a
 80100f0:	20001b3b 	.word	0x20001b3b
 80100f4:	200012cc 	.word	0x200012cc
 80100f8:	20001579 	.word	0x20001579
 80100fc:	2000157a 	.word	0x2000157a
 8010100:	20001530 	.word	0x20001530
 8010104:	08022914 	.word	0x08022914
 8010108:	20001898 	.word	0x20001898
 801010c:	0802292c 	.word	0x0802292c
 8010110:	200014c5 	.word	0x200014c5
 8010114:	08022940 	.word	0x08022940

08010118 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 8010124:	4a04      	ldr	r2, [pc, #16]	@ (8010138 <GetFilename+0x20>)
 8010126:	4905      	ldr	r1, [pc, #20]	@ (801013c <GetFilename+0x24>)
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f7ff fa0f 	bl	800f54c <cli_printf>

}
 801012e:	bf00      	nop
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	200014c5 	.word	0x200014c5
 801013c:	08022914 	.word	0x08022914

08010140 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010140:	b580      	push	{r7, lr}
 8010142:	b092      	sub	sp, #72	@ 0x48
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 801014c:	4b41      	ldr	r3, [pc, #260]	@ (8010254 <SetFileformat+0x114>)
 801014e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010150:	4941      	ldr	r1, [pc, #260]	@ (8010258 <SetFileformat+0x118>)
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f7ff f9fa 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010158:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801015a:	f7f0 f8a1 	bl	80002a0 <strlen>
 801015e:	4603      	mov	r3, r0
 8010160:	b29a      	uxth	r2, r3
 8010162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010166:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010168:	483c      	ldr	r0, [pc, #240]	@ (801025c <SetFileformat+0x11c>)
 801016a:	f7fc f88d 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 801016e:	493c      	ldr	r1, [pc, #240]	@ (8010260 <SetFileformat+0x120>)
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f7ff f9eb 	bl	800f54c <cli_printf>
	cli_printf(cli, "1. (.csv)");
 8010176:	493b      	ldr	r1, [pc, #236]	@ (8010264 <SetFileformat+0x124>)
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f7ff f9e7 	bl	800f54c <cli_printf>
	cli_printf(cli, "2. (.json)");
 801017e:	493a      	ldr	r1, [pc, #232]	@ (8010268 <SetFileformat+0x128>)
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7ff f9e3 	bl	800f54c <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 8010186:	4939      	ldr	r1, [pc, #228]	@ (801026c <SetFileformat+0x12c>)
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f7ff f9df 	bl	800f54c <cli_printf>

	cli_other = 1;
 801018e:	4b38      	ldr	r3, [pc, #224]	@ (8010270 <SetFileformat+0x130>)
 8010190:	2201      	movs	r2, #1
 8010192:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010194:	4b37      	ldr	r3, [pc, #220]	@ (8010274 <SetFileformat+0x134>)
 8010196:	2200      	movs	r2, #0
 8010198:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801019a:	f107 0310 	add.w	r3, r7, #16
 801019e:	2232      	movs	r2, #50	@ 0x32
 80101a0:	4619      	mov	r1, r3
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f7ff fa14 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80101a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80101aa:	f7f0 f879 	bl	80002a0 <strlen>
 80101ae:	4603      	mov	r3, r0
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80101b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101b8:	4828      	ldr	r0, [pc, #160]	@ (801025c <SetFileformat+0x11c>)
 80101ba:	f7fc f865 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 80101be:	f107 0310 	add.w	r3, r7, #16
 80101c2:	2131      	movs	r1, #49	@ 0x31
 80101c4:	4618      	mov	r0, r3
 80101c6:	f00e fe11 	bl	801edec <strchr>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d014      	beq.n	80101fa <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 80101d0:	4b29      	ldr	r3, [pc, #164]	@ (8010278 <SetFileformat+0x138>)
 80101d2:	4a2a      	ldr	r2, [pc, #168]	@ (801027c <SetFileformat+0x13c>)
 80101d4:	6810      	ldr	r0, [r2, #0]
 80101d6:	6018      	str	r0, [r3, #0]
 80101d8:	7912      	ldrb	r2, [r2, #4]
 80101da:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 80101dc:	4b28      	ldr	r3, [pc, #160]	@ (8010280 <SetFileformat+0x140>)
 80101de:	2201      	movs	r2, #1
 80101e0:	701a      	strb	r2, [r3, #0]
 80101e2:	4b28      	ldr	r3, [pc, #160]	@ (8010284 <SetFileformat+0x144>)
 80101e4:	2201      	movs	r2, #1
 80101e6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101e8:	4b27      	ldr	r3, [pc, #156]	@ (8010288 <SetFileformat+0x148>)
 80101ea:	2201      	movs	r2, #1
 80101ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 80101f0:	4b25      	ldr	r3, [pc, #148]	@ (8010288 <SetFileformat+0x148>)
 80101f2:	2201      	movs	r2, #1
 80101f4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80101f8:	e01c      	b.n	8010234 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 80101fa:	f107 0310 	add.w	r3, r7, #16
 80101fe:	2132      	movs	r1, #50	@ 0x32
 8010200:	4618      	mov	r0, r3
 8010202:	f00e fdf3 	bl	801edec <strchr>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d013      	beq.n	8010234 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 801020c:	4b1a      	ldr	r3, [pc, #104]	@ (8010278 <SetFileformat+0x138>)
 801020e:	4a1f      	ldr	r2, [pc, #124]	@ (801028c <SetFileformat+0x14c>)
 8010210:	6810      	ldr	r0, [r2, #0]
 8010212:	6018      	str	r0, [r3, #0]
 8010214:	8892      	ldrh	r2, [r2, #4]
 8010216:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 8010218:	4b19      	ldr	r3, [pc, #100]	@ (8010280 <SetFileformat+0x140>)
 801021a:	2201      	movs	r2, #1
 801021c:	701a      	strb	r2, [r3, #0]
 801021e:	4b19      	ldr	r3, [pc, #100]	@ (8010284 <SetFileformat+0x144>)
 8010220:	2201      	movs	r2, #1
 8010222:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 8010224:	4b18      	ldr	r3, [pc, #96]	@ (8010288 <SetFileformat+0x148>)
 8010226:	2201      	movs	r2, #1
 8010228:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 801022c:	4b16      	ldr	r3, [pc, #88]	@ (8010288 <SetFileformat+0x148>)
 801022e:	2200      	movs	r2, #0
 8010230:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 8010234:	4b0f      	ldr	r3, [pc, #60]	@ (8010274 <SetFileformat+0x134>)
 8010236:	2200      	movs	r2, #0
 8010238:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801023a:	4b0d      	ldr	r3, [pc, #52]	@ (8010270 <SetFileformat+0x130>)
 801023c:	2200      	movs	r2, #0
 801023e:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010240:	4a0d      	ldr	r2, [pc, #52]	@ (8010278 <SetFileformat+0x138>)
 8010242:	4913      	ldr	r1, [pc, #76]	@ (8010290 <SetFileformat+0x150>)
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f7ff f981 	bl	800f54c <cli_printf>

}
 801024a:	bf00      	nop
 801024c:	3748      	adds	r7, #72	@ 0x48
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	08022494 	.word	0x08022494
 8010258:	08022508 	.word	0x08022508
 801025c:	20001a74 	.word	0x20001a74
 8010260:	08022958 	.word	0x08022958
 8010264:	0802297c 	.word	0x0802297c
 8010268:	08022988 	.word	0x08022988
 801026c:	08022994 	.word	0x08022994
 8010270:	20001b3a 	.word	0x20001b3a
 8010274:	20001b3b 	.word	0x20001b3b
 8010278:	20001330 	.word	0x20001330
 801027c:	080229c4 	.word	0x080229c4
 8010280:	20001579 	.word	0x20001579
 8010284:	2000157a 	.word	0x2000157a
 8010288:	20001530 	.word	0x20001530
 801028c:	080229cc 	.word	0x080229cc
 8010290:	080229d4 	.word	0x080229d4

08010294 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 80102a0:	4a04      	ldr	r2, [pc, #16]	@ (80102b4 <GetFileformat+0x20>)
 80102a2:	4905      	ldr	r1, [pc, #20]	@ (80102b8 <GetFileformat+0x24>)
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7ff f951 	bl	800f54c <cli_printf>

}
 80102aa:	bf00      	nop
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	20001330 	.word	0x20001330
 80102b8:	080229d4 	.word	0x080229d4

080102bc <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b096      	sub	sp, #88	@ 0x58
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 80102c8:	4b48      	ldr	r3, [pc, #288]	@ (80103ec <fanclean+0x130>)
 80102ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80102d0:	4b47      	ldr	r3, [pc, #284]	@ (80103f0 <fanclean+0x134>)
 80102d2:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80102d4:	2300      	movs	r3, #0
 80102d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 80102da:	4946      	ldr	r1, [pc, #280]	@ (80103f4 <fanclean+0x138>)
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f7ff f935 	bl	800f54c <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 80102e2:	4b45      	ldr	r3, [pc, #276]	@ (80103f8 <fanclean+0x13c>)
 80102e4:	2201      	movs	r2, #1
 80102e6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80102e8:	4b44      	ldr	r3, [pc, #272]	@ (80103fc <fanclean+0x140>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80102ee:	f107 0314 	add.w	r3, r7, #20
 80102f2:	2232      	movs	r2, #50	@ 0x32
 80102f4:	4619      	mov	r1, r3
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f7ff f96a 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80102fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80102fe:	f7ef ffcf 	bl	80002a0 <strlen>
 8010302:	4603      	mov	r3, r0
 8010304:	b29a      	uxth	r2, r3
 8010306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801030a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801030c:	483c      	ldr	r0, [pc, #240]	@ (8010400 <fanclean+0x144>)
 801030e:	f7fb ffbb 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 8010312:	f107 0314 	add.w	r3, r7, #20
 8010316:	216e      	movs	r1, #110	@ 0x6e
 8010318:	4618      	mov	r0, r3
 801031a:	f00e fd67 	bl	801edec <strchr>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00f      	beq.n	8010344 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 8010324:	4b37      	ldr	r3, [pc, #220]	@ (8010404 <fanclean+0x148>)
 8010326:	2200      	movs	r2, #0
 8010328:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 801032c:	4b36      	ldr	r3, [pc, #216]	@ (8010408 <fanclean+0x14c>)
 801032e:	2201      	movs	r2, #1
 8010330:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 8010334:	4935      	ldr	r1, [pc, #212]	@ (801040c <fanclean+0x150>)
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff f908 	bl	800f54c <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 801033c:	2300      	movs	r3, #0
 801033e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010342:	e00f      	b.n	8010364 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 8010344:	f107 0314 	add.w	r3, r7, #20
 8010348:	2179      	movs	r1, #121	@ 0x79
 801034a:	4618      	mov	r0, r3
 801034c:	f00e fd4e 	bl	801edec <strchr>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d006      	beq.n	8010364 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 8010356:	4b2c      	ldr	r3, [pc, #176]	@ (8010408 <fanclean+0x14c>)
 8010358:	2200      	movs	r2, #0
 801035a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 801035e:	2301      	movs	r3, #1
 8010360:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010364:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010368:	2b01      	cmp	r3, #1
 801036a:	d135      	bne.n	80103d8 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801036c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801036e:	f7ef ff97 	bl	80002a0 <strlen>
 8010372:	4603      	mov	r3, r0
 8010374:	b29a      	uxth	r2, r3
 8010376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801037a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801037c:	4820      	ldr	r0, [pc, #128]	@ (8010400 <fanclean+0x144>)
 801037e:	f7fb ff83 	bl	800c288 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 8010382:	4923      	ldr	r1, [pc, #140]	@ (8010410 <fanclean+0x154>)
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff f8e1 	bl	800f54c <cli_printf>
		while (counter < 8) {
 801038a:	e013      	b.n	80103b4 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801038c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801038e:	f7ef ff87 	bl	80002a0 <strlen>
 8010392:	4603      	mov	r3, r0
 8010394:	b29a      	uxth	r2, r3
 8010396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801039a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801039c:	4818      	ldr	r0, [pc, #96]	@ (8010400 <fanclean+0x144>)
 801039e:	f7fb ff73 	bl	800c288 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 80103a2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80103a6:	f7f3 fedb 	bl	8004160 <HAL_Delay>
			toggle_blue_led();
 80103aa:	f7f0 fe87 	bl	80010bc <toggle_blue_led>
			counter++;
 80103ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103b0:	3301      	adds	r3, #1
 80103b2:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 80103b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103b6:	2b07      	cmp	r3, #7
 80103b8:	dde8      	ble.n	801038c <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80103ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80103bc:	f7ef ff70 	bl	80002a0 <strlen>
 80103c0:	4603      	mov	r3, r0
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80103c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80103ca:	480d      	ldr	r0, [pc, #52]	@ (8010400 <fanclean+0x144>)
 80103cc:	f7fb ff5c 	bl	800c288 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 80103d0:	4910      	ldr	r1, [pc, #64]	@ (8010414 <fanclean+0x158>)
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f7ff f8ba 	bl	800f54c <cli_printf>

	}

	flag_cli = 0;
 80103d8:	4b08      	ldr	r3, [pc, #32]	@ (80103fc <fanclean+0x140>)
 80103da:	2200      	movs	r2, #0
 80103dc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80103de:	4b06      	ldr	r3, [pc, #24]	@ (80103f8 <fanclean+0x13c>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	701a      	strb	r2, [r3, #0]
}
 80103e4:	bf00      	nop
 80103e6:	3758      	adds	r7, #88	@ 0x58
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	08022494 	.word	0x08022494
 80103f0:	080229f0 	.word	0x080229f0
 80103f4:	080229fc 	.word	0x080229fc
 80103f8:	20001b3a 	.word	0x20001b3a
 80103fc:	20001b3b 	.word	0x20001b3b
 8010400:	20001a74 	.word	0x20001a74
 8010404:	200012cc 	.word	0x200012cc
 8010408:	20001530 	.word	0x20001530
 801040c:	08022a38 	.word	0x08022a38
 8010410:	08022a60 	.word	0x08022a60
 8010414:	08022a98 	.word	0x08022a98

08010418 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 8010418:	b580      	push	{r7, lr}
 801041a:	b096      	sub	sp, #88	@ 0x58
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010424:	4b57      	ldr	r3, [pc, #348]	@ (8010584 <co2calibrate+0x16c>)
 8010426:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010428:	2300      	movs	r3, #0
 801042a:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 801042c:	4b56      	ldr	r3, [pc, #344]	@ (8010588 <co2calibrate+0x170>)
 801042e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010430:	2300      	movs	r3, #0
 8010432:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 8010436:	4b55      	ldr	r3, [pc, #340]	@ (801058c <co2calibrate+0x174>)
 8010438:	2201      	movs	r2, #1
 801043a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801043c:	4b54      	ldr	r3, [pc, #336]	@ (8010590 <co2calibrate+0x178>)
 801043e:	2200      	movs	r2, #0
 8010440:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010442:	f107 0310 	add.w	r3, r7, #16
 8010446:	2232      	movs	r2, #50	@ 0x32
 8010448:	2100      	movs	r1, #0
 801044a:	4618      	mov	r0, r3
 801044c:	f00e fcc6 	bl	801eddc <memset>
	cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 8010450:	4950      	ldr	r1, [pc, #320]	@ (8010594 <co2calibrate+0x17c>)
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f7ff f87a 	bl	800f54c <cli_printf>
	cli_printf(cli,
 8010458:	494f      	ldr	r1, [pc, #316]	@ (8010598 <co2calibrate+0x180>)
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f7ff f876 	bl	800f54c <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 8010460:	494e      	ldr	r1, [pc, #312]	@ (801059c <co2calibrate+0x184>)
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	f7ff f872 	bl	800f54c <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010468:	f107 0310 	add.w	r3, r7, #16
 801046c:	2232      	movs	r2, #50	@ 0x32
 801046e:	4619      	mov	r1, r3
 8010470:	68f8      	ldr	r0, [r7, #12]
 8010472:	f7ff f8ad 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010476:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010478:	f7ef ff12 	bl	80002a0 <strlen>
 801047c:	4603      	mov	r3, r0
 801047e:	b29a      	uxth	r2, r3
 8010480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010484:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010486:	4846      	ldr	r0, [pc, #280]	@ (80105a0 <co2calibrate+0x188>)
 8010488:	f7fb fefe 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 801048c:	7c3b      	ldrb	r3, [r7, #16]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d01e      	beq.n	80104d0 <co2calibrate+0xb8>
		_RunTime_Packet.CO2_calibration = 1;
 8010492:	4b44      	ldr	r3, [pc, #272]	@ (80105a4 <co2calibrate+0x18c>)
 8010494:	2201      	movs	r2, #1
 8010496:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 801049a:	f107 0310 	add.w	r3, r7, #16
 801049e:	4618      	mov	r0, r3
 80104a0:	f00d fa1a 	bl	801d8d8 <atoi>
 80104a4:	4603      	mov	r3, r0
 80104a6:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 80104a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d803      	bhi.n	80104ba <co2calibrate+0xa2>
			_RunTime_Packet._target_co2_concentration = val;
 80104b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	4b3b      	ldr	r3, [pc, #236]	@ (80105a4 <co2calibrate+0x18c>)
 80104b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 80104ba:	4b3a      	ldr	r3, [pc, #232]	@ (80105a4 <co2calibrate+0x18c>)
 80104bc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 80104be:	461a      	mov	r2, r3
 80104c0:	4939      	ldr	r1, [pc, #228]	@ (80105a8 <co2calibrate+0x190>)
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff f842 	bl	800f54c <cli_printf>
		do_Calibration = 1;
 80104c8:	2301      	movs	r3, #1
 80104ca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80104ce:	e00a      	b.n	80104e6 <co2calibrate+0xce>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 80104d0:	4936      	ldr	r1, [pc, #216]	@ (80105ac <co2calibrate+0x194>)
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f7ff f83a 	bl	800f54c <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 80104d8:	4b32      	ldr	r3, [pc, #200]	@ (80105a4 <co2calibrate+0x18c>)
 80104da:	2200      	movs	r2, #0
 80104dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 80104e0:	2300      	movs	r3, #0
 80104e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 80104e6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d13f      	bne.n	801056e <co2calibrate+0x156>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104f0:	f7ef fed6 	bl	80002a0 <strlen>
 80104f4:	4603      	mov	r3, r0
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104fe:	4828      	ldr	r0, [pc, #160]	@ (80105a0 <co2calibrate+0x188>)
 8010500:	f7fb fec2 	bl	800c288 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 8010504:	492a      	ldr	r1, [pc, #168]	@ (80105b0 <co2calibrate+0x198>)
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f7ff f820 	bl	800f54c <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 801050c:	4b25      	ldr	r3, [pc, #148]	@ (80105a4 <co2calibrate+0x18c>)
 801050e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010512:	2b00      	cmp	r3, #0
 8010514:	d119      	bne.n	801054a <co2calibrate+0x132>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010516:	4b23      	ldr	r3, [pc, #140]	@ (80105a4 <co2calibrate+0x18c>)
 8010518:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801051a:	4618      	mov	r0, r3
 801051c:	f004 f93c 	bl	8014798 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 8010520:	e013      	b.n	801054a <co2calibrate+0x132>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010522:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010524:	f7ef febc 	bl	80002a0 <strlen>
 8010528:	4603      	mov	r3, r0
 801052a:	b29a      	uxth	r2, r3
 801052c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010530:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010532:	481b      	ldr	r0, [pc, #108]	@ (80105a0 <co2calibrate+0x188>)
 8010534:	f7fb fea8 	bl	800c288 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 8010538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801053c:	f7f3 fe10 	bl	8004160 <HAL_Delay>
			toggle_blue_led();
 8010540:	f7f0 fdbc 	bl	80010bc <toggle_blue_led>
			counter++;
 8010544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010546:	3301      	adds	r3, #1
 8010548:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 801054a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801054c:	2b07      	cmp	r3, #7
 801054e:	dde8      	ble.n	8010522 <co2calibrate+0x10a>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010550:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010552:	f7ef fea5 	bl	80002a0 <strlen>
 8010556:	4603      	mov	r3, r0
 8010558:	b29a      	uxth	r2, r3
 801055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801055e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010560:	480f      	ldr	r0, [pc, #60]	@ (80105a0 <co2calibrate+0x188>)
 8010562:	f7fb fe91 	bl	800c288 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 8010566:	4913      	ldr	r1, [pc, #76]	@ (80105b4 <co2calibrate+0x19c>)
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7fe ffef 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 801056e:	4b08      	ldr	r3, [pc, #32]	@ (8010590 <co2calibrate+0x178>)
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010574:	4b05      	ldr	r3, [pc, #20]	@ (801058c <co2calibrate+0x174>)
 8010576:	2200      	movs	r2, #0
 8010578:	701a      	strb	r2, [r3, #0]
}
 801057a:	bf00      	nop
 801057c:	3758      	adds	r7, #88	@ 0x58
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	08022494 	.word	0x08022494
 8010588:	080229f0 	.word	0x080229f0
 801058c:	20001b3a 	.word	0x20001b3a
 8010590:	20001b3b 	.word	0x20001b3b
 8010594:	08022aac 	.word	0x08022aac
 8010598:	08022b00 	.word	0x08022b00
 801059c:	08022b44 	.word	0x08022b44
 80105a0:	20001a74 	.word	0x20001a74
 80105a4:	20001530 	.word	0x20001530
 80105a8:	08022b98 	.word	0x08022b98
 80105ac:	08022be8 	.word	0x08022be8
 80105b0:	08022c08 	.word	0x08022c08
 80105b4:	08022c2c 	.word	0x08022c2c

080105b8 <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08a      	sub	sp, #40	@ 0x28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 80105c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105c8:	4618      	mov	r0, r3
 80105ca:	f004 f923 	bl	8014814 <scd30_get_force_recalibration_status>
 80105ce:	4603      	mov	r3, r0
 80105d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 80105d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d107      	bne.n	80105ea <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80105da:	f107 0310 	add.w	r3, r7, #16
 80105de:	4a0f      	ldr	r2, [pc, #60]	@ (801061c <statco2calibrate+0x64>)
 80105e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105e4:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105e8:	e007      	b.n	80105fa <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80105ea:	f107 0310 	add.w	r3, r7, #16
 80105ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010620 <statco2calibrate+0x68>)
 80105f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105f4:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105f8:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80105fa:	f107 0310 	add.w	r3, r7, #16
 80105fe:	461a      	mov	r2, r3
 8010600:	4908      	ldr	r1, [pc, #32]	@ (8010624 <statco2calibrate+0x6c>)
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f7fe ffa2 	bl	800f54c <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 8010608:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801060a:	461a      	mov	r2, r3
 801060c:	4906      	ldr	r1, [pc, #24]	@ (8010628 <statco2calibrate+0x70>)
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f7fe ff9c 	bl	800f54c <cli_printf>



}
 8010614:	bf00      	nop
 8010616:	3728      	adds	r7, #40	@ 0x28
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	08022c48 	.word	0x08022c48
 8010620:	08022c50 	.word	0x08022c50
 8010624:	08022c58 	.word	0x08022c58
 8010628:	08022c70 	.word	0x08022c70

0801062c <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b094      	sub	sp, #80	@ 0x50
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 8010638:	4b28      	ldr	r3, [pc, #160]	@ (80106dc <co2_auto_calibration+0xb0>)
 801063a:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 801063c:	4928      	ldr	r1, [pc, #160]	@ (80106e0 <co2_auto_calibration+0xb4>)
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f7fe ff84 	bl	800f54c <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 8010644:	4927      	ldr	r1, [pc, #156]	@ (80106e4 <co2_auto_calibration+0xb8>)
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7fe ff80 	bl	800f54c <cli_printf>



		cli_other = 1;
 801064c:	4b26      	ldr	r3, [pc, #152]	@ (80106e8 <co2_auto_calibration+0xbc>)
 801064e:	2201      	movs	r2, #1
 8010650:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010652:	4b26      	ldr	r3, [pc, #152]	@ (80106ec <co2_auto_calibration+0xc0>)
 8010654:	2200      	movs	r2, #0
 8010656:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 8010658:	f107 0314 	add.w	r3, r7, #20
 801065c:	2232      	movs	r2, #50	@ 0x32
 801065e:	4619      	mov	r1, r3
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f7fe ffb5 	bl	800f5d0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010666:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010668:	f7ef fe1a 	bl	80002a0 <strlen>
 801066c:	4603      	mov	r3, r0
 801066e:	b29a      	uxth	r2, r3
 8010670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010674:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010676:	481e      	ldr	r0, [pc, #120]	@ (80106f0 <co2_auto_calibration+0xc4>)
 8010678:	f7fb fe06 	bl	800c288 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 801067c:	f107 0314 	add.w	r3, r7, #20
 8010680:	2179      	movs	r1, #121	@ 0x79
 8010682:	4618      	mov	r0, r3
 8010684:	f00e fbb2 	bl	801edec <strchr>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <co2_auto_calibration+0x72>
			calib = 1;
 801068e:	2301      	movs	r3, #1
 8010690:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 8010694:	4917      	ldr	r1, [pc, #92]	@ (80106f4 <co2_auto_calibration+0xc8>)
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f7fe ff58 	bl	800f54c <cli_printf>
 801069c:	e00f      	b.n	80106be <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 801069e:	f107 0314 	add.w	r3, r7, #20
 80106a2:	216e      	movs	r1, #110	@ 0x6e
 80106a4:	4618      	mov	r0, r3
 80106a6:	f00e fba1 	bl	801edec <strchr>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d006      	beq.n	80106be <co2_auto_calibration+0x92>
			calib = 0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 80106b6:	4910      	ldr	r1, [pc, #64]	@ (80106f8 <co2_auto_calibration+0xcc>)
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f7fe ff47 	bl	800f54c <cli_printf>
		}

		flag_cli = 0;
 80106be:	4b0b      	ldr	r3, [pc, #44]	@ (80106ec <co2_auto_calibration+0xc0>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 80106c4:	4b08      	ldr	r3, [pc, #32]	@ (80106e8 <co2_auto_calibration+0xbc>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 80106ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106ce:	4618      	mov	r0, r3
 80106d0:	f003 ffd4 	bl	801467c <scd30_activate_auto_calibration>
}
 80106d4:	bf00      	nop
 80106d6:	3750      	adds	r7, #80	@ 0x50
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	08022494 	.word	0x08022494
 80106e0:	08022c88 	.word	0x08022c88
 80106e4:	08022cb0 	.word	0x08022cb0
 80106e8:	20001b3a 	.word	0x20001b3a
 80106ec:	20001b3b 	.word	0x20001b3b
 80106f0:	20001a74 	.word	0x20001a74
 80106f4:	08022cd8 	.word	0x08022cd8
 80106f8:	08022cf4 	.word	0x08022cf4

080106fc <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	@ 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 8010708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801070c:	4618      	mov	r0, r3
 801070e:	f003 fff3 	bl	80146f8 <scd30_get_auto_calibration_status>
 8010712:	4603      	mov	r3, r0
 8010714:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 8010716:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801071a:	2b00      	cmp	r3, #0
 801071c:	d107      	bne.n	801072e <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 801071e:	f107 0310 	add.w	r3, r7, #16
 8010722:	4a0f      	ldr	r2, [pc, #60]	@ (8010760 <get_auto_calibration+0x64>)
 8010724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010728:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 801072c:	e007      	b.n	801073e <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 801072e:	f107 0310 	add.w	r3, r7, #16
 8010732:	4a0c      	ldr	r2, [pc, #48]	@ (8010764 <get_auto_calibration+0x68>)
 8010734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010738:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 801073c:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 801073e:	f107 0310 	add.w	r3, r7, #16
 8010742:	461a      	mov	r2, r3
 8010744:	4908      	ldr	r1, [pc, #32]	@ (8010768 <get_auto_calibration+0x6c>)
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7fe ff00 	bl	800f54c <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 801074c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801074e:	461a      	mov	r2, r3
 8010750:	4906      	ldr	r1, [pc, #24]	@ (801076c <get_auto_calibration+0x70>)
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7fe fefa 	bl	800f54c <cli_printf>
}
 8010758:	bf00      	nop
 801075a:	3728      	adds	r7, #40	@ 0x28
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	08022c48 	.word	0x08022c48
 8010764:	08022c50 	.word	0x08022c50
 8010768:	08022c58 	.word	0x08022c58
 801076c:	08022d10 	.word	0x08022d10

08010770 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b096      	sub	sp, #88	@ 0x58
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 801077c:	4b55      	ldr	r3, [pc, #340]	@ (80108d4 <set_co2_temp_offset+0x164>)
 801077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010784:	4b54      	ldr	r3, [pc, #336]	@ (80108d8 <set_co2_temp_offset+0x168>)
 8010786:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 801078e:	4b53      	ldr	r3, [pc, #332]	@ (80108dc <set_co2_temp_offset+0x16c>)
 8010790:	2201      	movs	r2, #1
 8010792:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010794:	4b52      	ldr	r3, [pc, #328]	@ (80108e0 <set_co2_temp_offset+0x170>)
 8010796:	2200      	movs	r2, #0
 8010798:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801079a:	f107 0310 	add.w	r3, r7, #16
 801079e:	2232      	movs	r2, #50	@ 0x32
 80107a0:	2100      	movs	r1, #0
 80107a2:	4618      	mov	r0, r3
 80107a4:	f00e fb1a 	bl	801eddc <memset>
		cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 80107a8:	494e      	ldr	r1, [pc, #312]	@ (80108e4 <set_co2_temp_offset+0x174>)
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	f7fe fece 	bl	800f54c <cli_printf>
		cli_printf(cli,
 80107b0:	494d      	ldr	r1, [pc, #308]	@ (80108e8 <set_co2_temp_offset+0x178>)
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f7fe feca 	bl	800f54c <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 80107b8:	494c      	ldr	r1, [pc, #304]	@ (80108ec <set_co2_temp_offset+0x17c>)
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f7fe fec6 	bl	800f54c <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 80107c0:	f107 0310 	add.w	r3, r7, #16
 80107c4:	2232      	movs	r2, #50	@ 0x32
 80107c6:	4619      	mov	r1, r3
 80107c8:	68f8      	ldr	r0, [r7, #12]
 80107ca:	f7fe ff01 	bl	800f5d0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80107ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80107d0:	f7ef fd66 	bl	80002a0 <strlen>
 80107d4:	4603      	mov	r3, r0
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80107de:	4844      	ldr	r0, [pc, #272]	@ (80108f0 <set_co2_temp_offset+0x180>)
 80107e0:	f7fb fd52 	bl	800c288 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 80107e4:	7c3b      	ldrb	r3, [r7, #16]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d01e      	beq.n	8010828 <set_co2_temp_offset+0xb8>
			_RunTime_Packet.temp_offset = 1;
 80107ea:	4b42      	ldr	r3, [pc, #264]	@ (80108f4 <set_co2_temp_offset+0x184>)
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 80107f2:	f107 0310 	add.w	r3, r7, #16
 80107f6:	4618      	mov	r0, r3
 80107f8:	f00d f86e 	bl	801d8d8 <atoi>
 80107fc:	4603      	mov	r3, r0
 80107fe:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 8010800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010802:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010806:	4293      	cmp	r3, r2
 8010808:	d803      	bhi.n	8010812 <set_co2_temp_offset+0xa2>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 801080a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801080c:	b29a      	uxth	r2, r3
 801080e:	4b39      	ldr	r3, [pc, #228]	@ (80108f4 <set_co2_temp_offset+0x184>)
 8010810:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 8010812:	4b38      	ldr	r3, [pc, #224]	@ (80108f4 <set_co2_temp_offset+0x184>)
 8010814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 8010816:	461a      	mov	r2, r3
 8010818:	4937      	ldr	r1, [pc, #220]	@ (80108f8 <set_co2_temp_offset+0x188>)
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f7fe fe96 	bl	800f54c <cli_printf>

			do_Calibration = 1;
 8010820:	2301      	movs	r3, #1
 8010822:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010826:	e006      	b.n	8010836 <set_co2_temp_offset+0xc6>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 8010828:	4934      	ldr	r1, [pc, #208]	@ (80108fc <set_co2_temp_offset+0x18c>)
 801082a:	68f8      	ldr	r0, [r7, #12]
 801082c:	f7fe fe8e 	bl	800f54c <cli_printf>
			do_Calibration = 0;
 8010830:	2300      	movs	r3, #0
 8010832:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 8010836:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801083a:	2b01      	cmp	r3, #1
 801083c:	d13f      	bne.n	80108be <set_co2_temp_offset+0x14e>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801083e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010840:	f7ef fd2e 	bl	80002a0 <strlen>
 8010844:	4603      	mov	r3, r0
 8010846:	b29a      	uxth	r2, r3
 8010848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801084c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801084e:	4828      	ldr	r0, [pc, #160]	@ (80108f0 <set_co2_temp_offset+0x180>)
 8010850:	f7fb fd1a 	bl	800c288 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 8010854:	492a      	ldr	r1, [pc, #168]	@ (8010900 <set_co2_temp_offset+0x190>)
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f7fe fe78 	bl	800f54c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 801085c:	4b25      	ldr	r3, [pc, #148]	@ (80108f4 <set_co2_temp_offset+0x184>)
 801085e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010862:	2b00      	cmp	r3, #0
 8010864:	d119      	bne.n	801089a <set_co2_temp_offset+0x12a>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 8010866:	4b23      	ldr	r3, [pc, #140]	@ (80108f4 <set_co2_temp_offset+0x184>)
 8010868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801086a:	4618      	mov	r0, r3
 801086c:	f004 f822 	bl	80148b4 <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 8010870:	e013      	b.n	801089a <set_co2_temp_offset+0x12a>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010872:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010874:	f7ef fd14 	bl	80002a0 <strlen>
 8010878:	4603      	mov	r3, r0
 801087a:	b29a      	uxth	r2, r3
 801087c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010880:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010882:	481b      	ldr	r0, [pc, #108]	@ (80108f0 <set_co2_temp_offset+0x180>)
 8010884:	f7fb fd00 	bl	800c288 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801088c:	f7f3 fc68 	bl	8004160 <HAL_Delay>
				toggle_blue_led();
 8010890:	f7f0 fc14 	bl	80010bc <toggle_blue_led>
				counter++;
 8010894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010896:	3301      	adds	r3, #1
 8010898:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 801089a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801089c:	2b07      	cmp	r3, #7
 801089e:	dde8      	ble.n	8010872 <set_co2_temp_offset+0x102>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80108a0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80108a2:	f7ef fcfd 	bl	80002a0 <strlen>
 80108a6:	4603      	mov	r3, r0
 80108a8:	b29a      	uxth	r2, r3
 80108aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80108ae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80108b0:	480f      	ldr	r0, [pc, #60]	@ (80108f0 <set_co2_temp_offset+0x180>)
 80108b2:	f7fb fce9 	bl	800c288 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 80108b6:	4913      	ldr	r1, [pc, #76]	@ (8010904 <set_co2_temp_offset+0x194>)
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f7fe fe47 	bl	800f54c <cli_printf>
		}

		flag_cli = 0;
 80108be:	4b08      	ldr	r3, [pc, #32]	@ (80108e0 <set_co2_temp_offset+0x170>)
 80108c0:	2200      	movs	r2, #0
 80108c2:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 80108c4:	4b05      	ldr	r3, [pc, #20]	@ (80108dc <set_co2_temp_offset+0x16c>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]
}
 80108ca:	bf00      	nop
 80108cc:	3758      	adds	r7, #88	@ 0x58
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	08022494 	.word	0x08022494
 80108d8:	080229f0 	.word	0x080229f0
 80108dc:	20001b3a 	.word	0x20001b3a
 80108e0:	20001b3b 	.word	0x20001b3b
 80108e4:	08022aac 	.word	0x08022aac
 80108e8:	08022d34 	.word	0x08022d34
 80108ec:	08022d78 	.word	0x08022d78
 80108f0:	20001a74 	.word	0x20001a74
 80108f4:	20001530 	.word	0x20001530
 80108f8:	08022dbc 	.word	0x08022dbc
 80108fc:	08022e00 	.word	0x08022e00
 8010900:	08022e28 	.word	0x08022e28
 8010904:	08022c2c 	.word	0x08022c2c

08010908 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08a      	sub	sp, #40	@ 0x28
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 8010914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010918:	4618      	mov	r0, r3
 801091a:	f004 f809 	bl	8014930 <scd30_get_temperature_offset>
 801091e:	4603      	mov	r3, r0
 8010920:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010922:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010926:	2b00      	cmp	r3, #0
 8010928:	d107      	bne.n	801093a <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 801092a:	f107 0310 	add.w	r3, r7, #16
 801092e:	4a0f      	ldr	r2, [pc, #60]	@ (801096c <get_co2_temp_offset+0x64>)
 8010930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010934:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010938:	e007      	b.n	801094a <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 801093a:	f107 0310 	add.w	r3, r7, #16
 801093e:	4a0c      	ldr	r2, [pc, #48]	@ (8010970 <get_co2_temp_offset+0x68>)
 8010940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010944:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010948:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 801094a:	f107 0310 	add.w	r3, r7, #16
 801094e:	461a      	mov	r2, r3
 8010950:	4908      	ldr	r1, [pc, #32]	@ (8010974 <get_co2_temp_offset+0x6c>)
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f7fe fdfa 	bl	800f54c <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 8010958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801095a:	461a      	mov	r2, r3
 801095c:	4906      	ldr	r1, [pc, #24]	@ (8010978 <get_co2_temp_offset+0x70>)
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f7fe fdf4 	bl	800f54c <cli_printf>
}
 8010964:	bf00      	nop
 8010966:	3728      	adds	r7, #40	@ 0x28
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	08022c48 	.word	0x08022c48
 8010970:	08022c50 	.word	0x08022c50
 8010974:	08022e5c 	.word	0x08022e5c
 8010978:	08022e7c 	.word	0x08022e7c

0801097c <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b096      	sub	sp, #88	@ 0x58
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010988:	4b55      	ldr	r3, [pc, #340]	@ (8010ae0 <set_co2_altitude_compensation+0x164>)
 801098a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 801098c:	2300      	movs	r3, #0
 801098e:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010990:	4b54      	ldr	r3, [pc, #336]	@ (8010ae4 <set_co2_altitude_compensation+0x168>)
 8010992:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 801099a:	4b53      	ldr	r3, [pc, #332]	@ (8010ae8 <set_co2_altitude_compensation+0x16c>)
 801099c:	2201      	movs	r2, #1
 801099e:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 80109a0:	4b52      	ldr	r3, [pc, #328]	@ (8010aec <set_co2_altitude_compensation+0x170>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 80109a6:	f107 0310 	add.w	r3, r7, #16
 80109aa:	2232      	movs	r2, #50	@ 0x32
 80109ac:	2100      	movs	r1, #0
 80109ae:	4618      	mov	r0, r3
 80109b0:	f00e fa14 	bl	801eddc <memset>
		cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 80109b4:	494e      	ldr	r1, [pc, #312]	@ (8010af0 <set_co2_altitude_compensation+0x174>)
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7fe fdc8 	bl	800f54c <cli_printf>
		cli_printf(cli,
 80109bc:	494d      	ldr	r1, [pc, #308]	@ (8010af4 <set_co2_altitude_compensation+0x178>)
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f7fe fdc4 	bl	800f54c <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 80109c4:	494c      	ldr	r1, [pc, #304]	@ (8010af8 <set_co2_altitude_compensation+0x17c>)
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7fe fdc0 	bl	800f54c <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 80109cc:	f107 0310 	add.w	r3, r7, #16
 80109d0:	2232      	movs	r2, #50	@ 0x32
 80109d2:	4619      	mov	r1, r3
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f7fe fdfb 	bl	800f5d0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80109da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109dc:	f7ef fc60 	bl	80002a0 <strlen>
 80109e0:	4603      	mov	r3, r0
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80109ea:	4844      	ldr	r0, [pc, #272]	@ (8010afc <set_co2_altitude_compensation+0x180>)
 80109ec:	f7fb fc4c 	bl	800c288 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 80109f0:	7c3b      	ldrb	r3, [r7, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d01e      	beq.n	8010a34 <set_co2_altitude_compensation+0xb8>
			_RunTime_Packet.temp_offset = 1;
 80109f6:	4b42      	ldr	r3, [pc, #264]	@ (8010b00 <set_co2_altitude_compensation+0x184>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 80109fe:	f107 0310 	add.w	r3, r7, #16
 8010a02:	4618      	mov	r0, r3
 8010a04:	f00c ff68 	bl	801d8d8 <atoi>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 8010a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d803      	bhi.n	8010a1e <set_co2_altitude_compensation+0xa2>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 8010a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	4b39      	ldr	r3, [pc, #228]	@ (8010b00 <set_co2_altitude_compensation+0x184>)
 8010a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 8010a1e:	4b38      	ldr	r3, [pc, #224]	@ (8010b00 <set_co2_altitude_compensation+0x184>)
 8010a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 8010a22:	461a      	mov	r2, r3
 8010a24:	4937      	ldr	r1, [pc, #220]	@ (8010b04 <set_co2_altitude_compensation+0x188>)
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f7fe fd90 	bl	800f54c <cli_printf>

			do_Calibration = 1;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010a32:	e006      	b.n	8010a42 <set_co2_altitude_compensation+0xc6>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 8010a34:	4934      	ldr	r1, [pc, #208]	@ (8010b08 <set_co2_altitude_compensation+0x18c>)
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f7fe fd88 	bl	800f54c <cli_printf>
			do_Calibration = 0;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 8010a42:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d13f      	bne.n	8010aca <set_co2_altitude_compensation+0x14e>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a4c:	f7ef fc28 	bl	80002a0 <strlen>
 8010a50:	4603      	mov	r3, r0
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a5a:	4828      	ldr	r0, [pc, #160]	@ (8010afc <set_co2_altitude_compensation+0x180>)
 8010a5c:	f7fb fc14 	bl	800c288 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 8010a60:	492a      	ldr	r1, [pc, #168]	@ (8010b0c <set_co2_altitude_compensation+0x190>)
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f7fe fd72 	bl	800f54c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010a68:	4b25      	ldr	r3, [pc, #148]	@ (8010b00 <set_co2_altitude_compensation+0x184>)
 8010a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d119      	bne.n	8010aa6 <set_co2_altitude_compensation+0x12a>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010a72:	4b23      	ldr	r3, [pc, #140]	@ (8010b00 <set_co2_altitude_compensation+0x184>)
 8010a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a76:	4618      	mov	r0, r3
 8010a78:	f003 fffa 	bl	8014a70 <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010a7c:	e013      	b.n	8010aa6 <set_co2_altitude_compensation+0x12a>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010a7e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010a80:	f7ef fc0e 	bl	80002a0 <strlen>
 8010a84:	4603      	mov	r3, r0
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a8c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a8e:	481b      	ldr	r0, [pc, #108]	@ (8010afc <set_co2_altitude_compensation+0x180>)
 8010a90:	f7fb fbfa 	bl	800c288 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a98:	f7f3 fb62 	bl	8004160 <HAL_Delay>
				toggle_blue_led();
 8010a9c:	f7f0 fb0e 	bl	80010bc <toggle_blue_led>
				counter++;
 8010aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aa8:	2b07      	cmp	r3, #7
 8010aaa:	dde8      	ble.n	8010a7e <set_co2_altitude_compensation+0x102>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010aac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010aae:	f7ef fbf7 	bl	80002a0 <strlen>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010aba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010abc:	480f      	ldr	r0, [pc, #60]	@ (8010afc <set_co2_altitude_compensation+0x180>)
 8010abe:	f7fb fbe3 	bl	800c288 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010ac2:	4913      	ldr	r1, [pc, #76]	@ (8010b10 <set_co2_altitude_compensation+0x194>)
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f7fe fd41 	bl	800f54c <cli_printf>
		}

		flag_cli = 0;
 8010aca:	4b08      	ldr	r3, [pc, #32]	@ (8010aec <set_co2_altitude_compensation+0x170>)
 8010acc:	2200      	movs	r2, #0
 8010ace:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010ad0:	4b05      	ldr	r3, [pc, #20]	@ (8010ae8 <set_co2_altitude_compensation+0x16c>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	701a      	strb	r2, [r3, #0]
}
 8010ad6:	bf00      	nop
 8010ad8:	3758      	adds	r7, #88	@ 0x58
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	08022494 	.word	0x08022494
 8010ae4:	080229f0 	.word	0x080229f0
 8010ae8:	20001b3a 	.word	0x20001b3a
 8010aec:	20001b3b 	.word	0x20001b3b
 8010af0:	08022aac 	.word	0x08022aac
 8010af4:	08022e9c 	.word	0x08022e9c
 8010af8:	08022ee4 	.word	0x08022ee4
 8010afc:	20001a74 	.word	0x20001a74
 8010b00:	20001530 	.word	0x20001530
 8010b04:	08022f2c 	.word	0x08022f2c
 8010b08:	08022f70 	.word	0x08022f70
 8010b0c:	08022f9c 	.word	0x08022f9c
 8010b10:	08022c2c 	.word	0x08022c2c

08010b14 <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08a      	sub	sp, #40	@ 0x28
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b24:	4618      	mov	r0, r3
 8010b26:	f003 ff53 	bl	80149d0 <scd30_get_altitude_compensation>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010b2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d107      	bne.n	8010b46 <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010b36:	f107 0310 	add.w	r3, r7, #16
 8010b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8010b78 <get_co2_altitude_compensation+0x64>)
 8010b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b40:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010b44:	e007      	b.n	8010b56 <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010b46:	f107 0310 	add.w	r3, r7, #16
 8010b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8010b7c <get_co2_altitude_compensation+0x68>)
 8010b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b50:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010b54:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010b56:	f107 0310 	add.w	r3, r7, #16
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	4908      	ldr	r1, [pc, #32]	@ (8010b80 <get_co2_altitude_compensation+0x6c>)
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f7fe fcf4 	bl	800f54c <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b66:	461a      	mov	r2, r3
 8010b68:	4906      	ldr	r1, [pc, #24]	@ (8010b84 <get_co2_altitude_compensation+0x70>)
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	f7fe fcee 	bl	800f54c <cli_printf>
}
 8010b70:	bf00      	nop
 8010b72:	3728      	adds	r7, #40	@ 0x28
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	08022c48 	.word	0x08022c48
 8010b7c:	08022c50 	.word	0x08022c50
 8010b80:	08022fd4 	.word	0x08022fd4
 8010b84:	08022ff8 	.word	0x08022ff8

08010b88 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b0a7      	sub	sp, #156	@ 0x9c
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010b94:	4bb1      	ldr	r3, [pc, #708]	@ (8010e5c <run_co2_calibration_routine+0x2d4>)
 8010b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010b9a:	f7f3 fad5 	bl	8004148 <HAL_GetTick>
 8010b9e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010ba8:	4bad      	ldr	r3, [pc, #692]	@ (8010e60 <run_co2_calibration_routine+0x2d8>)
 8010baa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010bb4:	4bab      	ldr	r3, [pc, #684]	@ (8010e64 <run_co2_calibration_routine+0x2dc>)
 8010bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010bb8:	4aab      	ldr	r2, [pc, #684]	@ (8010e68 <run_co2_calibration_routine+0x2e0>)
 8010bba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010bbe:	4614      	mov	r4, r2
 8010bc0:	6820      	ldr	r0, [r4, #0]
 8010bc2:	6861      	ldr	r1, [r4, #4]
 8010bc4:	68a2      	ldr	r2, [r4, #8]
 8010bc6:	c307      	stmia	r3!, {r0, r1, r2}
 8010bc8:	89a2      	ldrh	r2, [r4, #12]
 8010bca:	801a      	strh	r2, [r3, #0]
 8010bcc:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010bd0:	2224      	movs	r2, #36	@ 0x24
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f00e f901 	bl	801eddc <memset>
	uint8_t calib = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010be0:	2300      	movs	r3, #0
 8010be2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010be6:	4ba1      	ldr	r3, [pc, #644]	@ (8010e6c <run_co2_calibration_routine+0x2e4>)
 8010be8:	2201      	movs	r2, #1
 8010bea:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010bec:	4ba0      	ldr	r3, [pc, #640]	@ (8010e70 <run_co2_calibration_routine+0x2e8>)
 8010bee:	2200      	movs	r2, #0
 8010bf0:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010bf2:	f107 0310 	add.w	r3, r7, #16
 8010bf6:	2232      	movs	r2, #50	@ 0x32
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f00e f8ee 	bl	801eddc <memset>

		     cli_printf(cli,"");
 8010c00:	499c      	ldr	r1, [pc, #624]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f7fe fca2 	bl	800f54c <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010c08:	499b      	ldr	r1, [pc, #620]	@ (8010e78 <run_co2_calibration_routine+0x2f0>)
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7fe fc9e 	bl	800f54c <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010c10:	499a      	ldr	r1, [pc, #616]	@ (8010e7c <run_co2_calibration_routine+0x2f4>)
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7fe fc9a 	bl	800f54c <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010c18:	4999      	ldr	r1, [pc, #612]	@ (8010e80 <run_co2_calibration_routine+0x2f8>)
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f7fe fc96 	bl	800f54c <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010c20:	f107 0310 	add.w	r3, r7, #16
 8010c24:	2232      	movs	r2, #50	@ 0x32
 8010c26:	4619      	mov	r1, r3
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7fe fcd1 	bl	800f5d0 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010c2e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010c32:	f7ef fb35 	bl	80002a0 <strlen>
 8010c36:	4603      	mov	r3, r0
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010c3e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010c42:	4890      	ldr	r0, [pc, #576]	@ (8010e84 <run_co2_calibration_routine+0x2fc>)
 8010c44:	f7fb fb20 	bl	800c288 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010c48:	f107 0310 	add.w	r3, r7, #16
 8010c4c:	2179      	movs	r1, #121	@ 0x79
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f00e f8cc 	bl	801edec <strchr>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d007      	beq.n	8010c6a <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010c60:	4989      	ldr	r1, [pc, #548]	@ (8010e88 <run_co2_calibration_routine+0x300>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7fe fc72 	bl	800f54c <cli_printf>
 8010c68:	e00f      	b.n	8010c8a <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010c6a:	f107 0310 	add.w	r3, r7, #16
 8010c6e:	216e      	movs	r1, #110	@ 0x6e
 8010c70:	4618      	mov	r0, r3
 8010c72:	f00e f8bb 	bl	801edec <strchr>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d006      	beq.n	8010c8a <run_co2_calibration_routine+0x102>
			calib = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010c82:	4982      	ldr	r1, [pc, #520]	@ (8010e8c <run_co2_calibration_routine+0x304>)
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f7fe fc61 	bl	800f54c <cli_printf>
		}


		if(calib)
 8010c8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f000 8141 	beq.w	8010f16 <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010c94:	4b7e      	ldr	r3, [pc, #504]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d102      	bne.n	8010ca4 <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f003 fb8c 	bl	80143bc <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010ca4:	4973      	ldr	r1, [pc, #460]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f7fe fc50 	bl	800f54c <cli_printf>
			cli_printf(cli,"GuideLines");
 8010cac:	4979      	ldr	r1, [pc, #484]	@ (8010e94 <run_co2_calibration_routine+0x30c>)
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f7fe fc4c 	bl	800f54c <cli_printf>
			cli_printf(cli,"");
 8010cb4:	496f      	ldr	r1, [pc, #444]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f7fe fc48 	bl	800f54c <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010cbc:	4976      	ldr	r1, [pc, #472]	@ (8010e98 <run_co2_calibration_routine+0x310>)
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f7fe fc44 	bl	800f54c <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010cc4:	4975      	ldr	r1, [pc, #468]	@ (8010e9c <run_co2_calibration_routine+0x314>)
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f7fe fc40 	bl	800f54c <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010ccc:	4974      	ldr	r1, [pc, #464]	@ (8010ea0 <run_co2_calibration_routine+0x318>)
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f7fe fc3c 	bl	800f54c <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010cd4:	4973      	ldr	r1, [pc, #460]	@ (8010ea4 <run_co2_calibration_routine+0x31c>)
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f7fe fc38 	bl	800f54c <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010cdc:	f107 0310 	add.w	r3, r7, #16
 8010ce0:	2232      	movs	r2, #50	@ 0x32
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f00e f879 	bl	801eddc <memset>

			 prev_maxTime =  HAL_GetTick();
 8010cea:	f7f3 fa2d 	bl	8004148 <HAL_GetTick>
 8010cee:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010cf2:	f7f3 fa29 	bl	8004148 <HAL_GetTick>
 8010cf6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010cfa:	495e      	ldr	r1, [pc, #376]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7fe fc25 	bl	800f54c <cli_printf>
				cli_printf(cli,"");
 8010d02:	495c      	ldr	r1, [pc, #368]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f7fe fc21 	bl	800f54c <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010d0a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ef fac6 	bl	80002a0 <strlen>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d20:	4858      	ldr	r0, [pc, #352]	@ (8010e84 <run_co2_calibration_routine+0x2fc>)
 8010d22:	f7fb fab1 	bl	800c288 <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010d26:	e01e      	b.n	8010d66 <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010d28:	f7f3 fa0e 	bl	8004148 <HAL_GetTick>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d90a      	bls.n	8010d52 <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d40:	2202      	movs	r2, #2
 8010d42:	4959      	ldr	r1, [pc, #356]	@ (8010ea8 <run_co2_calibration_routine+0x320>)
 8010d44:	484f      	ldr	r0, [pc, #316]	@ (8010e84 <run_co2_calibration_routine+0x2fc>)
 8010d46:	f7fb fa9f 	bl	800c288 <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010d4a:	f7f3 f9fd 	bl	8004148 <HAL_GetTick>
 8010d4e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010d52:	f7f3 f9f9 	bl	8004148 <HAL_GetTick>
 8010d56:	4602      	mov	r2, r0
 8010d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d308      	bcc.n	8010d78 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010d6a:	4850      	ldr	r0, [pc, #320]	@ (8010eac <run_co2_calibration_routine+0x324>)
 8010d6c:	f7f5 f9b8 	bl	80060e0 <HAL_GPIO_ReadPin>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1d8      	bne.n	8010d28 <run_co2_calibration_routine+0x1a0>
 8010d76:	e000      	b.n	8010d7a <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010d78:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010d7a:	493e      	ldr	r1, [pc, #248]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7fe fbe5 	bl	800f54c <cli_printf>
			 cli_printf(cli,"");
 8010d82:	493c      	ldr	r1, [pc, #240]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7fe fbe1 	bl	800f54c <cli_printf>
			 cli_printf(cli,"");
 8010d8a:	493a      	ldr	r1, [pc, #232]	@ (8010e74 <run_co2_calibration_routine+0x2ec>)
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7fe fbdd 	bl	800f54c <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010d92:	4947      	ldr	r1, [pc, #284]	@ (8010eb0 <run_co2_calibration_routine+0x328>)
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f7fe fbd9 	bl	800f54c <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010d9a:	f107 0310 	add.w	r3, r7, #16
 8010d9e:	2232      	movs	r2, #50	@ 0x32
 8010da0:	4619      	mov	r1, r3
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f7fe fc14 	bl	800f5d0 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010da8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010dac:	f7ef fa78 	bl	80002a0 <strlen>
 8010db0:	4603      	mov	r3, r0
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010db8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010dbc:	4831      	ldr	r0, [pc, #196]	@ (8010e84 <run_co2_calibration_routine+0x2fc>)
 8010dbe:	f7fb fa63 	bl	800c288 <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010dc2:	7c3b      	ldrb	r3, [r7, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01e      	beq.n	8010e06 <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010dc8:	4b31      	ldr	r3, [pc, #196]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010dd0:	f107 0310 	add.w	r3, r7, #16
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f00c fd7f 	bl	801d8d8 <atoi>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010de0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d803      	bhi.n	8010df0 <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	4b28      	ldr	r3, [pc, #160]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010dee:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010df0:	4b27      	ldr	r3, [pc, #156]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010df2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010df4:	461a      	mov	r2, r3
 8010df6:	492f      	ldr	r1, [pc, #188]	@ (8010eb4 <run_co2_calibration_routine+0x32c>)
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f7fe fba7 	bl	800f54c <cli_printf>
					do_Calibration = 1;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010e04:	e00a      	b.n	8010e1c <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010e06:	492c      	ldr	r1, [pc, #176]	@ (8010eb8 <run_co2_calibration_routine+0x330>)
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f7fe fb9f 	bl	800f54c <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010e0e:	4b20      	ldr	r3, [pc, #128]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010e10:	2200      	movs	r2, #0
 8010e12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010e1c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	d178      	bne.n	8010f16 <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010e24:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010e28:	f7ef fa3a 	bl	80002a0 <strlen>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e34:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010e38:	4812      	ldr	r0, [pc, #72]	@ (8010e84 <run_co2_calibration_routine+0x2fc>)
 8010e3a:	f7fb fa25 	bl	800c288 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010e3e:	491f      	ldr	r1, [pc, #124]	@ (8010ebc <run_co2_calibration_routine+0x334>)
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	f7fe fb83 	bl	800f54c <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010e46:	4b12      	ldr	r3, [pc, #72]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010e48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d14d      	bne.n	8010eec <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010e50:	4b0f      	ldr	r3, [pc, #60]	@ (8010e90 <run_co2_calibration_routine+0x308>)
 8010e52:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010e54:	4618      	mov	r0, r3
 8010e56:	f003 fc9f 	bl	8014798 <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010e5a:	e047      	b.n	8010eec <run_co2_calibration_routine+0x364>
 8010e5c:	0001d4c0 	.word	0x0001d4c0
 8010e60:	08022494 	.word	0x08022494
 8010e64:	080229f0 	.word	0x080229f0
 8010e68:	08023230 	.word	0x08023230
 8010e6c:	20001b3a 	.word	0x20001b3a
 8010e70:	20001b3b 	.word	0x20001b3b
 8010e74:	08023018 	.word	0x08023018
 8010e78:	0802301c 	.word	0x0802301c
 8010e7c:	0802304c 	.word	0x0802304c
 8010e80:	08023084 	.word	0x08023084
 8010e84:	20001a74 	.word	0x20001a74
 8010e88:	080230b4 	.word	0x080230b4
 8010e8c:	080230d0 	.word	0x080230d0
 8010e90:	20001530 	.word	0x20001530
 8010e94:	080230ec 	.word	0x080230ec
 8010e98:	080230f8 	.word	0x080230f8
 8010e9c:	08023138 	.word	0x08023138
 8010ea0:	08023184 	.word	0x08023184
 8010ea4:	080231b0 	.word	0x080231b0
 8010ea8:	080231d4 	.word	0x080231d4
 8010eac:	40020000 	.word	0x40020000
 8010eb0:	080231d8 	.word	0x080231d8
 8010eb4:	08022b98 	.word	0x08022b98
 8010eb8:	080231fc 	.word	0x080231fc
 8010ebc:	08022c08 	.word	0x08022c08
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010ec0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010ec2:	f7ef f9ed 	bl	80002a0 <strlen>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ece:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010ed0:	4816      	ldr	r0, [pc, #88]	@ (8010f2c <run_co2_calibration_routine+0x3a4>)
 8010ed2:	f7fb f9d9 	bl	800c288 <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010ed6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010eda:	f7f3 f941 	bl	8004160 <HAL_Delay>
						toggle_blue_led();
 8010ede:	f7f0 f8ed 	bl	80010bc <toggle_blue_led>
						counter++;
 8010ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010ef0:	2b07      	cmp	r3, #7
 8010ef2:	dde5      	ble.n	8010ec0 <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010ef4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010ef8:	f7ef f9d2 	bl	80002a0 <strlen>
 8010efc:	4603      	mov	r3, r0
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f04:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010f08:	4808      	ldr	r0, [pc, #32]	@ (8010f2c <run_co2_calibration_routine+0x3a4>)
 8010f0a:	f7fb f9bd 	bl	800c288 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010f0e:	4908      	ldr	r1, [pc, #32]	@ (8010f30 <run_co2_calibration_routine+0x3a8>)
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7fe fb1b 	bl	800f54c <cli_printf>
		}




		flag_cli = 0;
 8010f16:	4b07      	ldr	r3, [pc, #28]	@ (8010f34 <run_co2_calibration_routine+0x3ac>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010f1c:	4b06      	ldr	r3, [pc, #24]	@ (8010f38 <run_co2_calibration_routine+0x3b0>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	701a      	strb	r2, [r3, #0]

}
 8010f22:	bf00      	nop
 8010f24:	379c      	adds	r7, #156	@ 0x9c
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd90      	pop	{r4, r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	20001a74 	.word	0x20001a74
 8010f30:	08022c2c 	.word	0x08022c2c
 8010f34:	20001b3b 	.word	0x20001b3b
 8010f38:	20001b3a 	.word	0x20001b3a

08010f3c <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b092      	sub	sp, #72	@ 0x48
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010f48:	4b37      	ldr	r3, [pc, #220]	@ (8011028 <set_co2_samples+0xec>)
 8010f4a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 8010f4c:	4937      	ldr	r1, [pc, #220]	@ (801102c <set_co2_samples+0xf0>)
 8010f4e:	68f8      	ldr	r0, [r7, #12]
 8010f50:	f7fe fafc 	bl	800f54c <cli_printf>
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010f54:	4936      	ldr	r1, [pc, #216]	@ (8011030 <set_co2_samples+0xf4>)
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f7fe faf8 	bl	800f54c <cli_printf>
	cli_printf(cli, "Disclaimer: Increase in Samples number also reduces battery life.");
 8010f5c:	4935      	ldr	r1, [pc, #212]	@ (8011034 <set_co2_samples+0xf8>)
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f7fe faf4 	bl	800f54c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f64:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f66:	f7ef f99b 	bl	80002a0 <strlen>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f74:	4830      	ldr	r0, [pc, #192]	@ (8011038 <set_co2_samples+0xfc>)
 8010f76:	f7fb f987 	bl	800c288 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8010f7a:	4930      	ldr	r1, [pc, #192]	@ (801103c <set_co2_samples+0x100>)
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f7fe fae5 	bl	800f54c <cli_printf>

	uint16_t val;
	cli_other = 1;
 8010f82:	4b2f      	ldr	r3, [pc, #188]	@ (8011040 <set_co2_samples+0x104>)
 8010f84:	2201      	movs	r2, #1
 8010f86:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010f88:	4b2e      	ldr	r3, [pc, #184]	@ (8011044 <set_co2_samples+0x108>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010f8e:	f107 0310 	add.w	r3, r7, #16
 8010f92:	2232      	movs	r2, #50	@ 0x32
 8010f94:	2100      	movs	r1, #0
 8010f96:	4618      	mov	r0, r3
 8010f98:	f00d ff20 	bl	801eddc <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8010f9c:	f107 0310 	add.w	r3, r7, #16
 8010fa0:	2232      	movs	r2, #50	@ 0x32
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f7fe fb13 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010faa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010fac:	f7ef f978 	bl	80002a0 <strlen>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010fba:	481f      	ldr	r0, [pc, #124]	@ (8011038 <set_co2_samples+0xfc>)
 8010fbc:	f7fb f964 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010fc0:	7c3b      	ldrb	r3, [r7, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d022      	beq.n	801100c <set_co2_samples+0xd0>

		val = atoi(buffer);
 8010fc6:	f107 0310 	add.w	r3, r7, #16
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f00c fc84 	bl	801d8d8 <atoi>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 8010fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d004      	beq.n	8010fec <set_co2_samples+0xb0>
				_Flash_Packet.co2_samples = val;
 8010fe2:	4b19      	ldr	r3, [pc, #100]	@ (8011048 <set_co2_samples+0x10c>)
 8010fe4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010fe8:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8010fec:	4b16      	ldr	r3, [pc, #88]	@ (8011048 <set_co2_samples+0x10c>)
 8010fee:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4915      	ldr	r1, [pc, #84]	@ (801104c <set_co2_samples+0x110>)
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7fe faa7 	bl	800f54c <cli_printf>
		set_param_flags();
 8010ffe:	4b14      	ldr	r3, [pc, #80]	@ (8011050 <set_co2_samples+0x114>)
 8011000:	2201      	movs	r2, #1
 8011002:	701a      	strb	r2, [r3, #0]
 8011004:	4b13      	ldr	r3, [pc, #76]	@ (8011054 <set_co2_samples+0x118>)
 8011006:	2201      	movs	r2, #1
 8011008:	701a      	strb	r2, [r3, #0]
 801100a:	e003      	b.n	8011014 <set_co2_samples+0xd8>
	}
	else
	{
		cli_printf(cli, "No Value provided, operation aborted!");
 801100c:	4912      	ldr	r1, [pc, #72]	@ (8011058 <set_co2_samples+0x11c>)
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f7fe fa9c 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 8011014:	4b0b      	ldr	r3, [pc, #44]	@ (8011044 <set_co2_samples+0x108>)
 8011016:	2200      	movs	r2, #0
 8011018:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801101a:	4b09      	ldr	r3, [pc, #36]	@ (8011040 <set_co2_samples+0x104>)
 801101c:	2200      	movs	r2, #0
 801101e:	701a      	strb	r2, [r3, #0]

}
 8011020:	bf00      	nop
 8011022:	3748      	adds	r7, #72	@ 0x48
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	08022494 	.word	0x08022494
 801102c:	08022aac 	.word	0x08022aac
 8011030:	08022508 	.word	0x08022508
 8011034:	08023240 	.word	0x08023240
 8011038:	20001a74 	.word	0x20001a74
 801103c:	08023284 	.word	0x08023284
 8011040:	20001b3a 	.word	0x20001b3a
 8011044:	20001b3b 	.word	0x20001b3b
 8011048:	200012cc 	.word	0x200012cc
 801104c:	080232a4 	.word	0x080232a4
 8011050:	20001579 	.word	0x20001579
 8011054:	2000157a 	.word	0x2000157a
 8011058:	080232b0 	.word	0x080232b0

0801105c <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 8011068:	4b06      	ldr	r3, [pc, #24]	@ (8011084 <get_co2_samples+0x28>)
 801106a:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 801106e:	b29b      	uxth	r3, r3
 8011070:	461a      	mov	r2, r3
 8011072:	4905      	ldr	r1, [pc, #20]	@ (8011088 <get_co2_samples+0x2c>)
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f7fe fa69 	bl	800f54c <cli_printf>
}
 801107a:	bf00      	nop
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	200012cc 	.word	0x200012cc
 8011088:	080232d8 	.word	0x080232d8

0801108c <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 801108c:	b580      	push	{r7, lr}
 801108e:	b092      	sub	sp, #72	@ 0x48
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8011098:	4b22      	ldr	r3, [pc, #136]	@ (8011124 <SystemRestart+0x98>)
 801109a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 801109c:	4922      	ldr	r1, [pc, #136]	@ (8011128 <SystemRestart+0x9c>)
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f7fe fa54 	bl	800f54c <cli_printf>

	cli_other = 1;
 80110a4:	4b21      	ldr	r3, [pc, #132]	@ (801112c <SystemRestart+0xa0>)
 80110a6:	2201      	movs	r2, #1
 80110a8:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80110aa:	4b21      	ldr	r3, [pc, #132]	@ (8011130 <SystemRestart+0xa4>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	2232      	movs	r2, #50	@ 0x32
 80110b6:	4619      	mov	r1, r3
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7fe fa89 	bl	800f5d0 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80110be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80110c0:	f7ef f8ee 	bl	80002a0 <strlen>
 80110c4:	4603      	mov	r3, r0
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80110ce:	4819      	ldr	r0, [pc, #100]	@ (8011134 <SystemRestart+0xa8>)
 80110d0:	f7fb f8da 	bl	800c288 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 80110d4:	f107 0310 	add.w	r3, r7, #16
 80110d8:	2179      	movs	r1, #121	@ 0x79
 80110da:	4618      	mov	r0, r3
 80110dc:	f00d fe86 	bl	801edec <strchr>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 80110e6:	4914      	ldr	r1, [pc, #80]	@ (8011138 <SystemRestart+0xac>)
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7fe fa2f 	bl	800f54c <cli_printf>
		HAL_NVIC_SystemReset();
 80110ee:	f7f3 fe46 	bl	8004d7e <HAL_NVIC_SystemReset>
 80110f2:	e00c      	b.n	801110e <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 80110f4:	f107 0310 	add.w	r3, r7, #16
 80110f8:	216e      	movs	r1, #110	@ 0x6e
 80110fa:	4618      	mov	r0, r3
 80110fc:	f00d fe76 	bl	801edec <strchr>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	d003      	beq.n	801110e <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 8011106:	490d      	ldr	r1, [pc, #52]	@ (801113c <SystemRestart+0xb0>)
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f7fe fa1f 	bl	800f54c <cli_printf>
	}

	flag_cli = 0;
 801110e:	4b08      	ldr	r3, [pc, #32]	@ (8011130 <SystemRestart+0xa4>)
 8011110:	2200      	movs	r2, #0
 8011112:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8011114:	4b05      	ldr	r3, [pc, #20]	@ (801112c <SystemRestart+0xa0>)
 8011116:	2200      	movs	r2, #0
 8011118:	701a      	strb	r2, [r3, #0]
}
 801111a:	bf00      	nop
 801111c:	3748      	adds	r7, #72	@ 0x48
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	08022494 	.word	0x08022494
 8011128:	080232e8 	.word	0x080232e8
 801112c:	20001b3a 	.word	0x20001b3a
 8011130:	20001b3b 	.word	0x20001b3b
 8011134:	20001a74 	.word	0x20001a74
 8011138:	08023310 	.word	0x08023310
 801113c:	0802332c 	.word	0x0802332c

08011140 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801114c:	4b0a      	ldr	r3, [pc, #40]	@ (8011178 <Co2Level+0x38>)
 801114e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011152:	2b00      	cmp	r3, #0
 8011154:	d101      	bne.n	801115a <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011156:	f7f0 fac3 	bl	80016e0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 801115a:	4b07      	ldr	r3, [pc, #28]	@ (8011178 <Co2Level+0x38>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4618      	mov	r0, r3
 8011160:	f7ef fa0a 	bl	8000578 <__aeabi_f2d>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	4904      	ldr	r1, [pc, #16]	@ (801117c <Co2Level+0x3c>)
 801116a:	68f8      	ldr	r0, [r7, #12]
 801116c:	f7fe f9ee 	bl	800f54c <cli_printf>
#endif
}
 8011170:	bf00      	nop
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	20001530 	.word	0x20001530
 801117c:	08023344 	.word	0x08023344

08011180 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801118c:	4b0a      	ldr	r3, [pc, #40]	@ (80111b8 <TempLevel+0x38>)
 801118e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011196:	f7f0 faa3 	bl	80016e0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801119a:	4b07      	ldr	r3, [pc, #28]	@ (80111b8 <TempLevel+0x38>)
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ef f9ea 	bl	8000578 <__aeabi_f2d>
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	4904      	ldr	r1, [pc, #16]	@ (80111bc <TempLevel+0x3c>)
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f7fe f9ce 	bl	800f54c <cli_printf>
#endif
}
 80111b0:	bf00      	nop
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	20001530 	.word	0x20001530
 80111bc:	08023354 	.word	0x08023354

080111c0 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80111cc:	4b0a      	ldr	r3, [pc, #40]	@ (80111f8 <HumidLevel+0x38>)
 80111ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d101      	bne.n	80111da <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80111d6:	f7f0 fa83 	bl	80016e0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 80111da:	4b07      	ldr	r3, [pc, #28]	@ (80111f8 <HumidLevel+0x38>)
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7ef f9ca 	bl	8000578 <__aeabi_f2d>
 80111e4:	4602      	mov	r2, r0
 80111e6:	460b      	mov	r3, r1
 80111e8:	4904      	ldr	r1, [pc, #16]	@ (80111fc <HumidLevel+0x3c>)
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f7fe f9ae 	bl	800f54c <cli_printf>
#endif
}
 80111f0:	bf00      	nop
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	20001530 	.word	0x20001530
 80111fc:	08023370 	.word	0x08023370

08011200 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 801120c:	491f      	ldr	r1, [pc, #124]	@ (801128c <MotionDetection+0x8c>)
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7fe f99c 	bl	800f54c <cli_printf>
	HAL_Delay(2000);
 8011214:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011218:	f7f2 ffa2 	bl	8004160 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 801121c:	f7f2 ff94 	bl	8004148 <HAL_GetTick>
 8011220:	4603      	mov	r3, r0
 8011222:	4a1b      	ldr	r2, [pc, #108]	@ (8011290 <MotionDetection+0x90>)
 8011224:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 8011226:	4b1b      	ldr	r3, [pc, #108]	@ (8011294 <MotionDetection+0x94>)
 8011228:	2200      	movs	r2, #0
 801122a:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 801122c:	e01c      	b.n	8011268 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 801122e:	2101      	movs	r1, #1
 8011230:	4819      	ldr	r0, [pc, #100]	@ (8011298 <MotionDetection+0x98>)
 8011232:	f7f4 ff55 	bl	80060e0 <HAL_GPIO_ReadPin>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 801123c:	4b17      	ldr	r3, [pc, #92]	@ (801129c <MotionDetection+0x9c>)
 801123e:	2201      	movs	r2, #1
 8011240:	731a      	strb	r2, [r3, #12]
 8011242:	e002      	b.n	801124a <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 8011244:	4b15      	ldr	r3, [pc, #84]	@ (801129c <MotionDetection+0x9c>)
 8011246:	2200      	movs	r2, #0
 8011248:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801124a:	4b14      	ldr	r3, [pc, #80]	@ (801129c <MotionDetection+0x9c>)
 801124c:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 801124e:	2b01      	cmp	r3, #1
 8011250:	d101      	bne.n	8011256 <MotionDetection+0x56>
 8011252:	4b13      	ldr	r3, [pc, #76]	@ (80112a0 <MotionDetection+0xa0>)
 8011254:	e000      	b.n	8011258 <MotionDetection+0x58>
 8011256:	4b13      	ldr	r3, [pc, #76]	@ (80112a4 <MotionDetection+0xa4>)
 8011258:	461a      	mov	r2, r3
 801125a:	4913      	ldr	r1, [pc, #76]	@ (80112a8 <MotionDetection+0xa8>)
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f7fe f975 	bl	800f54c <cli_printf>
//	         	}
		HAL_Delay(100);
 8011262:	2064      	movs	r0, #100	@ 0x64
 8011264:	f7f2 ff7c 	bl	8004160 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 8011268:	f7f2 ff6e 	bl	8004148 <HAL_GetTick>
 801126c:	4602      	mov	r2, r0
 801126e:	4b08      	ldr	r3, [pc, #32]	@ (8011290 <MotionDetection+0x90>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	1ad2      	subs	r2, r2, r3
 8011274:	4b0d      	ldr	r3, [pc, #52]	@ (80112ac <MotionDetection+0xac>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	429a      	cmp	r2, r3
 801127a:	d3d8      	bcc.n	801122e <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 801127c:	490c      	ldr	r1, [pc, #48]	@ (80112b0 <MotionDetection+0xb0>)
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7fe f964 	bl	800f54c <cli_printf>

}
 8011284:	bf00      	nop
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	08023388 	.word	0x08023388
 8011290:	20001b34 	.word	0x20001b34
 8011294:	20001b3c 	.word	0x20001b3c
 8011298:	40020000 	.word	0x40020000
 801129c:	20001530 	.word	0x20001530
 80112a0:	080233c0 	.word	0x080233c0
 80112a4:	080233c8 	.word	0x080233c8
 80112a8:	080233d0 	.word	0x080233d0
 80112ac:	20000020 	.word	0x20000020
 80112b0:	080233e4 	.word	0x080233e4

080112b4 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 80112c0:	4922      	ldr	r1, [pc, #136]	@ (801134c <AirQuality+0x98>)
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f7fe f942 	bl	800f54c <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80112c8:	4b21      	ldr	r3, [pc, #132]	@ (8011350 <AirQuality+0x9c>)
 80112ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d104      	bne.n	80112dc <AirQuality+0x28>
 80112d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011350 <AirQuality+0x9c>)
 80112d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 80112dc:	491d      	ldr	r1, [pc, #116]	@ (8011354 <AirQuality+0xa0>)
 80112de:	68f8      	ldr	r0, [r7, #12]
 80112e0:	f7fe f934 	bl	800f54c <cli_printf>
 80112e4:	e02e      	b.n	8011344 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 80112e6:	f7f0 fabd 	bl	8001864 <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 80112ea:	4b19      	ldr	r3, [pc, #100]	@ (8011350 <AirQuality+0x9c>)
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ef f942 	bl	8000578 <__aeabi_f2d>
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	4917      	ldr	r1, [pc, #92]	@ (8011358 <AirQuality+0xa4>)
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7fe f926 	bl	800f54c <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8011300:	4b13      	ldr	r3, [pc, #76]	@ (8011350 <AirQuality+0x9c>)
 8011302:	695b      	ldr	r3, [r3, #20]
 8011304:	4618      	mov	r0, r3
 8011306:	f7ef f937 	bl	8000578 <__aeabi_f2d>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4913      	ldr	r1, [pc, #76]	@ (801135c <AirQuality+0xa8>)
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f7fe f91b 	bl	800f54c <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 8011316:	4b0e      	ldr	r3, [pc, #56]	@ (8011350 <AirQuality+0x9c>)
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	4618      	mov	r0, r3
 801131c:	f7ef f92c 	bl	8000578 <__aeabi_f2d>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	490e      	ldr	r1, [pc, #56]	@ (8011360 <AirQuality+0xac>)
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7fe f910 	bl	800f54c <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 801132c:	4b08      	ldr	r3, [pc, #32]	@ (8011350 <AirQuality+0x9c>)
 801132e:	69db      	ldr	r3, [r3, #28]
 8011330:	4618      	mov	r0, r3
 8011332:	f7ef f921 	bl	8000578 <__aeabi_f2d>
 8011336:	4602      	mov	r2, r0
 8011338:	460b      	mov	r3, r1
 801133a:	490a      	ldr	r1, [pc, #40]	@ (8011364 <AirQuality+0xb0>)
 801133c:	68f8      	ldr	r0, [r7, #12]
 801133e:	f7fe f905 	bl	800f54c <cli_printf>
	}

}
 8011342:	bf00      	nop
 8011344:	bf00      	nop
 8011346:	3710      	adds	r7, #16
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	080233f4 	.word	0x080233f4
 8011350:	20001530 	.word	0x20001530
 8011354:	08023410 	.word	0x08023410
 8011358:	08023430 	.word	0x08023430
 801135c:	0802343c 	.word	0x0802343c
 8011360:	0802344c 	.word	0x0802344c
 8011364:	0802345c 	.word	0x0802345c

08011368 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011374:	4808      	ldr	r0, [pc, #32]	@ (8011398 <BattVolt+0x30>)
 8011376:	f002 ff23 	bl	80141c0 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 801137a:	4b08      	ldr	r3, [pc, #32]	@ (801139c <BattVolt+0x34>)
 801137c:	6a1b      	ldr	r3, [r3, #32]
 801137e:	4618      	mov	r0, r3
 8011380:	f7ef f8fa 	bl	8000578 <__aeabi_f2d>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	4905      	ldr	r1, [pc, #20]	@ (80113a0 <BattVolt+0x38>)
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7fe f8de 	bl	800f54c <cli_printf>

}
 8011390:	bf00      	nop
 8011392:	3710      	adds	r7, #16
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20001550 	.word	0x20001550
 801139c:	20001530 	.word	0x20001530
 80113a0:	0802346c 	.word	0x0802346c

080113a4 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 80113b0:	4903      	ldr	r1, [pc, #12]	@ (80113c0 <port+0x1c>)
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f7fe f8ca 	bl	800f54c <cli_printf>
}
 80113b8:	bf00      	nop
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	08023484 	.word	0x08023484

080113c4 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 80113c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113c6:	b0bb      	sub	sp, #236	@ 0xec
 80113c8:	af06      	add	r7, sp, #24
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 80113d0:	4bba      	ldr	r3, [pc, #744]	@ (80116bc <showall+0x2f8>)
 80113d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d104      	bne.n	80113e4 <showall+0x20>
 80113da:	4bb8      	ldr	r3, [pc, #736]	@ (80116bc <showall+0x2f8>)
 80113dc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d006      	beq.n	80113f2 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 80113e4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80113e8:	49b5      	ldr	r1, [pc, #724]	@ (80116c0 <showall+0x2fc>)
 80113ea:	4618      	mov	r0, r3
 80113ec:	f00d fbac 	bl	801eb48 <siprintf>
 80113f0:	e00d      	b.n	801140e <showall+0x4a>
	} else {

		get_sps30_measurement();
 80113f2:	f7f0 fa37 	bl	8001864 <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 80113f6:	4bb1      	ldr	r3, [pc, #708]	@ (80116bc <showall+0x2f8>)
 80113f8:	695b      	ldr	r3, [r3, #20]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ef f8bc 	bl	8000578 <__aeabi_f2d>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8011408:	49ae      	ldr	r1, [pc, #696]	@ (80116c4 <showall+0x300>)
 801140a:	f00d fb9d 	bl	801eb48 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 801140e:	48ae      	ldr	r0, [pc, #696]	@ (80116c8 <showall+0x304>)
 8011410:	f002 fed6 	bl	80141c0 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8011414:	2101      	movs	r1, #1
 8011416:	48ad      	ldr	r0, [pc, #692]	@ (80116cc <showall+0x308>)
 8011418:	f7f4 fe62 	bl	80060e0 <HAL_GPIO_ReadPin>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 8011422:	4ba6      	ldr	r3, [pc, #664]	@ (80116bc <showall+0x2f8>)
 8011424:	2201      	movs	r2, #1
 8011426:	731a      	strb	r2, [r3, #12]
 8011428:	e002      	b.n	8011430 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 801142a:	4ba4      	ldr	r3, [pc, #656]	@ (80116bc <showall+0x2f8>)
 801142c:	2200      	movs	r2, #0
 801142e:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 8011430:	4aa7      	ldr	r2, [pc, #668]	@ (80116d0 <showall+0x30c>)
 8011432:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801143a:	6018      	str	r0, [r3, #0]
 801143c:	3304      	adds	r3, #4
 801143e:	8019      	strh	r1, [r3, #0]
 8011440:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]
 8011450:	615a      	str	r2, [r3, #20]

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 8011452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011456:	2205      	movs	r2, #5
 8011458:	21c2      	movs	r1, #194	@ 0xc2
 801145a:	489e      	ldr	r0, [pc, #632]	@ (80116d4 <showall+0x310>)
 801145c:	f7f5 fb2e 	bl	8006abc <HAL_I2C_IsDeviceReady>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01c      	beq.n	80114a0 <showall+0xdc>
			!= HAL_OK) {

		if (debug_scd_pm) {
 8011466:	4b9c      	ldr	r3, [pc, #624]	@ (80116d8 <showall+0x314>)
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d013      	beq.n	8011496 <showall+0xd2>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 801146e:	f107 0314 	add.w	r3, r7, #20
 8011472:	499a      	ldr	r1, [pc, #616]	@ (80116dc <showall+0x318>)
 8011474:	4618      	mov	r0, r3
 8011476:	f00d fb67 	bl	801eb48 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 801147a:	f107 0314 	add.w	r3, r7, #20
 801147e:	4618      	mov	r0, r3
 8011480:	f7ee ff0e 	bl	80002a0 <strlen>
 8011484:	4603      	mov	r3, r0
 8011486:	b29a      	uxth	r2, r3
 8011488:	f107 0114 	add.w	r1, r7, #20
 801148c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011490:	4893      	ldr	r0, [pc, #588]	@ (80116e0 <showall+0x31c>)
 8011492:	f7fa fef9 	bl	800c288 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8011496:	4b89      	ldr	r3, [pc, #548]	@ (80116bc <showall+0x2f8>)
 8011498:	2201      	movs	r2, #1
 801149a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801149e:	e003      	b.n	80114a8 <showall+0xe4>
	}
	else
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
 80114a0:	4b86      	ldr	r3, [pc, #536]	@ (80116bc <showall+0x2f8>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80114a8:	4b84      	ldr	r3, [pc, #528]	@ (80116bc <showall+0x2f8>)
 80114aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d10c      	bne.n	80114cc <showall+0x108>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();

		get_scd30_measurement_();
 80114b2:	f7f0 f915 	bl	80016e0 <get_scd30_measurement_>
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 80114b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80114ba:	4a8a      	ldr	r2, [pc, #552]	@ (80116e4 <showall+0x320>)
 80114bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114c0:	6018      	str	r0, [r3, #0]
 80114c2:	3304      	adds	r3, #4
 80114c4:	8019      	strh	r1, [r3, #0]
 80114c6:	3302      	adds	r3, #2
 80114c8:	0c0a      	lsrs	r2, r1, #16
 80114ca:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 80114cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80114d0:	2200      	movs	r2, #0
 80114d2:	4619      	mov	r1, r3
 80114d4:	4884      	ldr	r0, [pc, #528]	@ (80116e8 <showall+0x324>)
 80114d6:	f7f8 fb56 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80114da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80114de:	2200      	movs	r2, #0
 80114e0:	4619      	mov	r1, r3
 80114e2:	4881      	ldr	r0, [pc, #516]	@ (80116e8 <showall+0x324>)
 80114e4:	f7f8 fa6d 	bl	80099c2 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 80114e8:	4b80      	ldr	r3, [pc, #512]	@ (80116ec <showall+0x328>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d106      	bne.n	80114fe <showall+0x13a>

		sprintf(buff_filewritten, "Data not written yet");
 80114f0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80114f4:	497e      	ldr	r1, [pc, #504]	@ (80116f0 <showall+0x32c>)
 80114f6:	4618      	mov	r0, r3
 80114f8:	f00d fb26 	bl	801eb48 <siprintf>
 80114fc:	e014      	b.n	8011528 <showall+0x164>

	} else if (datawritten == 1) {
 80114fe:	4b7b      	ldr	r3, [pc, #492]	@ (80116ec <showall+0x328>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d106      	bne.n	8011514 <showall+0x150>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 8011506:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801150a:	497a      	ldr	r1, [pc, #488]	@ (80116f4 <showall+0x330>)
 801150c:	4618      	mov	r0, r3
 801150e:	f00d fb1b 	bl	801eb48 <siprintf>
 8011512:	e009      	b.n	8011528 <showall+0x164>
	} else if (datawritten == 2) {
 8011514:	4b75      	ldr	r3, [pc, #468]	@ (80116ec <showall+0x328>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b02      	cmp	r3, #2
 801151a:	d105      	bne.n	8011528 <showall+0x164>

		sprintf(buff_filewritten, " **FAILED** ");
 801151c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011520:	4975      	ldr	r1, [pc, #468]	@ (80116f8 <showall+0x334>)
 8011522:	4618      	mov	r0, r3
 8011524:	f00d fb10 	bl	801eb48 <siprintf>
	}
	uint16_t calib_val = 0;
 8011528:	2300      	movs	r3, #0
 801152a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t calib_stat = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t temp_offset = 0;
 8011534:	2300      	movs	r3, #0
 8011536:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t altitude_comp = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011540:	4b5e      	ldr	r3, [pc, #376]	@ (80116bc <showall+0x2f8>)
 8011542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011546:	2b00      	cmp	r3, #0
 8011548:	d113      	bne.n	8011572 <showall+0x1ae>
	scd30_get_force_recalibration_status(&calib_val);
 801154a:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 801154e:	4618      	mov	r0, r3
 8011550:	f003 f960 	bl	8014814 <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 8011554:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8011558:	4618      	mov	r0, r3
 801155a:	f003 f8cd 	bl	80146f8 <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 801155e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011562:	4618      	mov	r0, r3
 8011564:	f003 fa34 	bl	80149d0 <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 8011568:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 801156c:	4618      	mov	r0, r3
 801156e:	f003 f9df 	bl	8014930 <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 8011572:	4962      	ldr	r1, [pc, #392]	@ (80116fc <showall+0x338>)
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f7fd ffe9 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 801157a:	4960      	ldr	r1, [pc, #384]	@ (80116fc <showall+0x338>)
 801157c:	68f8      	ldr	r0, [r7, #12]
 801157e:	f7fd ffe5 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 8011582:	495e      	ldr	r1, [pc, #376]	@ (80116fc <showall+0x338>)
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f7fd ffe1 	bl	800f54c <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 801158a:	f7f0 ff8f 	bl	80024ac <ver_GetUid>
 801158e:	4603      	mov	r3, r0
 8011590:	461a      	mov	r2, r3
 8011592:	495b      	ldr	r1, [pc, #364]	@ (8011700 <showall+0x33c>)
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f7fd ffd9 	bl	800f54c <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 801159a:	4a5a      	ldr	r2, [pc, #360]	@ (8011704 <showall+0x340>)
 801159c:	495a      	ldr	r1, [pc, #360]	@ (8011708 <showall+0x344>)
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f7fd ffd4 	bl	800f54c <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80115a4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80115a8:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80115aa:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80115ae:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 80115b0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	460b      	mov	r3, r1
 80115b8:	4954      	ldr	r1, [pc, #336]	@ (801170c <showall+0x348>)
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f7fd ffc6 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 80115c0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80115c4:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 80115c6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80115ca:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 80115cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 80115d0:	9300      	str	r3, [sp, #0]
 80115d2:	460b      	mov	r3, r1
 80115d4:	494e      	ldr	r1, [pc, #312]	@ (8011710 <showall+0x34c>)
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f7fd ffb8 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 80115dc:	4a4d      	ldr	r2, [pc, #308]	@ (8011714 <showall+0x350>)
 80115de:	494e      	ldr	r1, [pc, #312]	@ (8011718 <showall+0x354>)
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f7fd ffb3 	bl	800f54c <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 80115e6:	4a4d      	ldr	r2, [pc, #308]	@ (801171c <showall+0x358>)
 80115e8:	494d      	ldr	r1, [pc, #308]	@ (8011720 <showall+0x35c>)
 80115ea:	68f8      	ldr	r0, [r7, #12]
 80115ec:	f7fd ffae 	bl	800f54c <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 80115f0:	4a4c      	ldr	r2, [pc, #304]	@ (8011724 <showall+0x360>)
 80115f2:	494d      	ldr	r1, [pc, #308]	@ (8011728 <showall+0x364>)
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f7fd ffa9 	bl	800f54c <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 80115fa:	4a4c      	ldr	r2, [pc, #304]	@ (801172c <showall+0x368>)
 80115fc:	494c      	ldr	r1, [pc, #304]	@ (8011730 <showall+0x36c>)
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	f7fd ffa4 	bl	800f54c <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 8011604:	4b4b      	ldr	r3, [pc, #300]	@ (8011734 <showall+0x370>)
 8011606:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801160a:	461a      	mov	r2, r3
 801160c:	494a      	ldr	r1, [pc, #296]	@ (8011738 <showall+0x374>)
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f7fd ff9c 	bl	800f54c <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 8011614:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011618:	461a      	mov	r2, r3
 801161a:	4948      	ldr	r1, [pc, #288]	@ (801173c <showall+0x378>)
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f7fd ff95 	bl	800f54c <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 8011622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011626:	461a      	mov	r2, r3
 8011628:	4945      	ldr	r1, [pc, #276]	@ (8011740 <showall+0x37c>)
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f7fd ff8e 	bl	800f54c <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 8011630:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011634:	461a      	mov	r2, r3
 8011636:	4943      	ldr	r1, [pc, #268]	@ (8011744 <showall+0x380>)
 8011638:	68f8      	ldr	r0, [r7, #12]
 801163a:	f7fd ff87 	bl	800f54c <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 801163e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8011642:	461a      	mov	r2, r3
 8011644:	4940      	ldr	r1, [pc, #256]	@ (8011748 <showall+0x384>)
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7fd ff80 	bl	800f54c <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 801164c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8011650:	461a      	mov	r2, r3
 8011652:	493e      	ldr	r1, [pc, #248]	@ (801174c <showall+0x388>)
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f7fd ff79 	bl	800f54c <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 801165a:	4b36      	ldr	r3, [pc, #216]	@ (8011734 <showall+0x370>)
 801165c:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8011660:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 8011662:	461a      	mov	r2, r3
 8011664:	493a      	ldr	r1, [pc, #232]	@ (8011750 <showall+0x38c>)
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f7fd ff70 	bl	800f54c <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 801166c:	4b13      	ldr	r3, [pc, #76]	@ (80116bc <showall+0x2f8>)
 801166e:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 8011670:	4618      	mov	r0, r3
 8011672:	f7ee ff81 	bl	8000578 <__aeabi_f2d>
 8011676:	4602      	mov	r2, r0
 8011678:	460b      	mov	r3, r1
 801167a:	4936      	ldr	r1, [pc, #216]	@ (8011754 <showall+0x390>)
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	f7fd ff65 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 8011682:	4b0e      	ldr	r3, [pc, #56]	@ (80116bc <showall+0x2f8>)
 8011684:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8011686:	4618      	mov	r0, r3
 8011688:	f7ee ff76 	bl	8000578 <__aeabi_f2d>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	4931      	ldr	r1, [pc, #196]	@ (8011758 <showall+0x394>)
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7fd ff5a 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8011698:	4b08      	ldr	r3, [pc, #32]	@ (80116bc <showall+0x2f8>)
 801169a:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 801169c:	4618      	mov	r0, r3
 801169e:	f7ee ff6b 	bl	8000578 <__aeabi_f2d>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	492d      	ldr	r1, [pc, #180]	@ (801175c <showall+0x398>)
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7fd ff4f 	bl	800f54c <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80116ae:	4b03      	ldr	r3, [pc, #12]	@ (80116bc <showall+0x2f8>)
 80116b0:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d156      	bne.n	8011764 <showall+0x3a0>
 80116b6:	4b2a      	ldr	r3, [pc, #168]	@ (8011760 <showall+0x39c>)
 80116b8:	e055      	b.n	8011766 <showall+0x3a2>
 80116ba:	bf00      	nop
 80116bc:	20001530 	.word	0x20001530
 80116c0:	080234ac 	.word	0x080234ac
 80116c4:	080234b8 	.word	0x080234b8
 80116c8:	20001550 	.word	0x20001550
 80116cc:	40020000 	.word	0x40020000
 80116d0:	080239f4 	.word	0x080239f4
 80116d4:	20001838 	.word	0x20001838
 80116d8:	20001578 	.word	0x20001578
 80116dc:	080234c0 	.word	0x080234c0
 80116e0:	20001a74 	.word	0x20001a74
 80116e4:	080234e8 	.word	0x080234e8
 80116e8:	20001898 	.word	0x20001898
 80116ec:	20002328 	.word	0x20002328
 80116f0:	080234f0 	.word	0x080234f0
 80116f4:	08023508 	.word	0x08023508
 80116f8:	0802351c 	.word	0x0802351c
 80116fc:	08023018 	.word	0x08023018
 8011700:	0802352c 	.word	0x0802352c
 8011704:	20001399 	.word	0x20001399
 8011708:	0802355c 	.word	0x0802355c
 801170c:	0802358c 	.word	0x0802358c
 8011710:	080235bc 	.word	0x080235bc
 8011714:	200013cb 	.word	0x200013cb
 8011718:	080235ec 	.word	0x080235ec
 801171c:	200014c5 	.word	0x200014c5
 8011720:	0802361c 	.word	0x0802361c
 8011724:	20001330 	.word	0x20001330
 8011728:	0802364c 	.word	0x0802364c
 801172c:	2000142f 	.word	0x2000142f
 8011730:	0802367c 	.word	0x0802367c
 8011734:	200012cc 	.word	0x200012cc
 8011738:	080236ac 	.word	0x080236ac
 801173c:	080236e0 	.word	0x080236e0
 8011740:	08023710 	.word	0x08023710
 8011744:	08023740 	.word	0x08023740
 8011748:	08023770 	.word	0x08023770
 801174c:	080237a0 	.word	0x080237a0
 8011750:	080237d0 	.word	0x080237d0
 8011754:	08023800 	.word	0x08023800
 8011758:	08023834 	.word	0x08023834
 801175c:	08023868 	.word	0x08023868
 8011760:	080233c0 	.word	0x080233c0
 8011764:	4b28      	ldr	r3, [pc, #160]	@ (8011808 <showall+0x444>)
 8011766:	461a      	mov	r2, r3
 8011768:	4928      	ldr	r1, [pc, #160]	@ (801180c <showall+0x448>)
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f7fd feee 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 8011770:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011774:	461a      	mov	r2, r3
 8011776:	4926      	ldr	r1, [pc, #152]	@ (8011810 <showall+0x44c>)
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f7fd fee7 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 801177e:	4925      	ldr	r1, [pc, #148]	@ (8011814 <showall+0x450>)
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7fd fee3 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 8011786:	4b24      	ldr	r3, [pc, #144]	@ (8011818 <showall+0x454>)
 8011788:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 801178a:	4618      	mov	r0, r3
 801178c:	f7ee fef4 	bl	8000578 <__aeabi_f2d>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	4921      	ldr	r1, [pc, #132]	@ (801181c <showall+0x458>)
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f7fd fed8 	bl	800f54c <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 801179c:	4b20      	ldr	r3, [pc, #128]	@ (8011820 <showall+0x45c>)
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	461d      	mov	r5, r3
 80117a2:	4b20      	ldr	r3, [pc, #128]	@ (8011824 <showall+0x460>)
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	461e      	mov	r6, r3
 80117a8:	4b1f      	ldr	r3, [pc, #124]	@ (8011828 <showall+0x464>)
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	461a      	mov	r2, r3
 80117ae:	4b1f      	ldr	r3, [pc, #124]	@ (801182c <showall+0x468>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	4619      	mov	r1, r3
 80117b4:	4b1e      	ldr	r3, [pc, #120]	@ (8011830 <showall+0x46c>)
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	4618      	mov	r0, r3
 80117ba:	4b1e      	ldr	r3, [pc, #120]	@ (8011834 <showall+0x470>)
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	461c      	mov	r4, r3
 80117c0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80117c4:	9305      	str	r3, [sp, #20]
 80117c6:	4b1c      	ldr	r3, [pc, #112]	@ (8011838 <showall+0x474>)
 80117c8:	9304      	str	r3, [sp, #16]
 80117ca:	9403      	str	r4, [sp, #12]
 80117cc:	9002      	str	r0, [sp, #8]
 80117ce:	9101      	str	r1, [sp, #4]
 80117d0:	9200      	str	r2, [sp, #0]
 80117d2:	4633      	mov	r3, r6
 80117d4:	462a      	mov	r2, r5
 80117d6:	4919      	ldr	r1, [pc, #100]	@ (801183c <showall+0x478>)
 80117d8:	68f8      	ldr	r0, [r7, #12]
 80117da:	f7fd feb7 	bl	800f54c <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 80117de:	4a18      	ldr	r2, [pc, #96]	@ (8011840 <showall+0x47c>)
 80117e0:	4918      	ldr	r1, [pc, #96]	@ (8011844 <showall+0x480>)
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f7fd feb2 	bl	800f54c <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 80117e8:	4917      	ldr	r1, [pc, #92]	@ (8011848 <showall+0x484>)
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f7fd feae 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80117f0:	4915      	ldr	r1, [pc, #84]	@ (8011848 <showall+0x484>)
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7fd feaa 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80117f8:	4913      	ldr	r1, [pc, #76]	@ (8011848 <showall+0x484>)
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f7fd fea6 	bl	800f54c <cli_printf>
}
 8011800:	bf00      	nop
 8011802:	37d4      	adds	r7, #212	@ 0xd4
 8011804:	46bd      	mov	sp, r7
 8011806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011808:	080233c8 	.word	0x080233c8
 801180c:	0802389c 	.word	0x0802389c
 8011810:	080238cc 	.word	0x080238cc
 8011814:	080238fc 	.word	0x080238fc
 8011818:	20001530 	.word	0x20001530
 801181c:	0802392c 	.word	0x0802392c
 8011820:	20002322 	.word	0x20002322
 8011824:	20002323 	.word	0x20002323
 8011828:	20002324 	.word	0x20002324
 801182c:	20002325 	.word	0x20002325
 8011830:	20002326 	.word	0x20002326
 8011834:	20002327 	.word	0x20002327
 8011838:	200014c5 	.word	0x200014c5
 801183c:	0802395c 	.word	0x0802395c
 8011840:	2000002c 	.word	0x2000002c
 8011844:	080239c4 	.word	0x080239c4
 8011848:	08023018 	.word	0x08023018

0801184c <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 8011858:	4911      	ldr	r1, [pc, #68]	@ (80118a0 <systemversion+0x54>)
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	f7fd fe76 	bl	800f54c <cli_printf>
		cli_printf(cli, "");
 8011860:	490f      	ldr	r1, [pc, #60]	@ (80118a0 <systemversion+0x54>)
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	f7fd fe72 	bl	800f54c <cli_printf>
		cli_printf(cli, "");
 8011868:	490d      	ldr	r1, [pc, #52]	@ (80118a0 <systemversion+0x54>)
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	f7fd fe6e 	bl	800f54c <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 8011870:	490c      	ldr	r1, [pc, #48]	@ (80118a4 <systemversion+0x58>)
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f7fd fe6a 	bl	800f54c <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8011878:	490b      	ldr	r1, [pc, #44]	@ (80118a8 <systemversion+0x5c>)
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7fd fe66 	bl	800f54c <cli_printf>

		cli_printf(cli, "");
 8011880:	4907      	ldr	r1, [pc, #28]	@ (80118a0 <systemversion+0x54>)
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7fd fe62 	bl	800f54c <cli_printf>
			cli_printf(cli, "");
 8011888:	4905      	ldr	r1, [pc, #20]	@ (80118a0 <systemversion+0x54>)
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f7fd fe5e 	bl	800f54c <cli_printf>
			cli_printf(cli, "");
 8011890:	4903      	ldr	r1, [pc, #12]	@ (80118a0 <systemversion+0x54>)
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f7fd fe5a 	bl	800f54c <cli_printf>

}
 8011898:	bf00      	nop
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	08023018 	.word	0x08023018
 80118a4:	08023a14 	.word	0x08023a14
 80118a8:	08023a4c 	.word	0x08023a4c

080118ac <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 80118b8:	4917      	ldr	r1, [pc, #92]	@ (8011918 <aboutDev+0x6c>)
 80118ba:	68f8      	ldr	r0, [r7, #12]
 80118bc:	f7fd fe46 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80118c0:	4915      	ldr	r1, [pc, #84]	@ (8011918 <aboutDev+0x6c>)
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f7fd fe42 	bl	800f54c <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 80118c8:	4914      	ldr	r1, [pc, #80]	@ (801191c <aboutDev+0x70>)
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	f7fd fe3e 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80118d0:	4911      	ldr	r1, [pc, #68]	@ (8011918 <aboutDev+0x6c>)
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	f7fd fe3a 	bl	800f54c <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 80118d8:	4911      	ldr	r1, [pc, #68]	@ (8011920 <aboutDev+0x74>)
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f7fd fe36 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80118e0:	490d      	ldr	r1, [pc, #52]	@ (8011918 <aboutDev+0x6c>)
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7fd fe32 	bl	800f54c <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 80118e8:	490e      	ldr	r1, [pc, #56]	@ (8011924 <aboutDev+0x78>)
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7fd fe2e 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 80118f0:	4909      	ldr	r1, [pc, #36]	@ (8011918 <aboutDev+0x6c>)
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f7fd fe2a 	bl	800f54c <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 80118f8:	490b      	ldr	r1, [pc, #44]	@ (8011928 <aboutDev+0x7c>)
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f7fd fe26 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 8011900:	4905      	ldr	r1, [pc, #20]	@ (8011918 <aboutDev+0x6c>)
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7fd fe22 	bl	800f54c <cli_printf>
	cli_printf(cli, "");
 8011908:	4903      	ldr	r1, [pc, #12]	@ (8011918 <aboutDev+0x6c>)
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7fd fe1e 	bl	800f54c <cli_printf>
}
 8011910:	bf00      	nop
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	08023018 	.word	0x08023018
 801191c:	08023a84 	.word	0x08023a84
 8011920:	08023aac 	.word	0x08023aac
 8011924:	08023ad4 	.word	0x08023ad4
 8011928:	08023ae8 	.word	0x08023ae8

0801192c <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 801192c:	b5b0      	push	{r4, r5, r7, lr}
 801192e:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 8011932:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 8011934:	f000 fe3b 	bl	80125ae <embeddedCliNewDefault>
 8011938:	4603      	mov	r3, r0
 801193a:	4aa9      	ldr	r2, [pc, #676]	@ (8011be0 <initializeEmbeddedCli+0x2b4>)
 801193c:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 801193e:	4ba9      	ldr	r3, [pc, #676]	@ (8011be4 <initializeEmbeddedCli+0x2b8>)
 8011940:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 8011944:	461d      	mov	r5, r3
 8011946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801194a:	682b      	ldr	r3, [r5, #0]
 801194c:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 801194e:	4ba6      	ldr	r3, [pc, #664]	@ (8011be8 <initializeEmbeddedCli+0x2bc>)
 8011950:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 8011954:	461d      	mov	r5, r3
 8011956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801195a:	682b      	ldr	r3, [r5, #0]
 801195c:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 801195e:	4ba3      	ldr	r3, [pc, #652]	@ (8011bec <initializeEmbeddedCli+0x2c0>)
 8011960:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 8011964:	461d      	mov	r5, r3
 8011966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801196a:	682b      	ldr	r3, [r5, #0]
 801196c:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 801196e:	4ba0      	ldr	r3, [pc, #640]	@ (8011bf0 <initializeEmbeddedCli+0x2c4>)
 8011970:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 8011974:	461d      	mov	r5, r3
 8011976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801197a:	682b      	ldr	r3, [r5, #0]
 801197c:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 801197e:	4b9d      	ldr	r3, [pc, #628]	@ (8011bf4 <initializeEmbeddedCli+0x2c8>)
 8011980:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8011984:	461d      	mov	r5, r3
 8011986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801198a:	682b      	ldr	r3, [r5, #0]
 801198c:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 801198e:	4b9a      	ldr	r3, [pc, #616]	@ (8011bf8 <initializeEmbeddedCli+0x2cc>)
 8011990:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011994:	461d      	mov	r5, r3
 8011996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801199a:	682b      	ldr	r3, [r5, #0]
 801199c:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 801199e:	4b97      	ldr	r3, [pc, #604]	@ (8011bfc <initializeEmbeddedCli+0x2d0>)
 80119a0:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 80119a4:	461d      	mov	r5, r3
 80119a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 80119ae:	4b94      	ldr	r3, [pc, #592]	@ (8011c00 <initializeEmbeddedCli+0x2d4>)
 80119b0:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 80119b4:	461d      	mov	r5, r3
 80119b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ba:	682b      	ldr	r3, [r5, #0]
 80119bc:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 80119be:	4b91      	ldr	r3, [pc, #580]	@ (8011c04 <initializeEmbeddedCli+0x2d8>)
 80119c0:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 80119c4:	461d      	mov	r5, r3
 80119c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ca:	682b      	ldr	r3, [r5, #0]
 80119cc:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 80119ce:	4b8e      	ldr	r3, [pc, #568]	@ (8011c08 <initializeEmbeddedCli+0x2dc>)
 80119d0:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 80119d4:	461d      	mov	r5, r3
 80119d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119da:	682b      	ldr	r3, [r5, #0]
 80119dc:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 80119de:	4b8b      	ldr	r3, [pc, #556]	@ (8011c0c <initializeEmbeddedCli+0x2e0>)
 80119e0:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 80119e4:	461d      	mov	r5, r3
 80119e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ea:	682b      	ldr	r3, [r5, #0]
 80119ec:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 80119ee:	4b88      	ldr	r3, [pc, #544]	@ (8011c10 <initializeEmbeddedCli+0x2e4>)
 80119f0:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80119f4:	461d      	mov	r5, r3
 80119f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119fa:	682b      	ldr	r3, [r5, #0]
 80119fc:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 80119fe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011a06:	4a83      	ldr	r2, [pc, #524]	@ (8011c14 <initializeEmbeddedCli+0x2e8>)
 8011a08:	461c      	mov	r4, r3
 8011a0a:	4615      	mov	r5, r2
 8011a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8011a14:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011a1c:	4a7e      	ldr	r2, [pc, #504]	@ (8011c18 <initializeEmbeddedCli+0x2ec>)
 8011a1e:	461c      	mov	r4, r3
 8011a20:	4615      	mov	r5, r2
 8011a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a26:	682b      	ldr	r3, [r5, #0]
 8011a28:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 8011a2a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a32:	4a7a      	ldr	r2, [pc, #488]	@ (8011c1c <initializeEmbeddedCli+0x2f0>)
 8011a34:	461c      	mov	r4, r3
 8011a36:	4615      	mov	r5, r2
 8011a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a3c:	682b      	ldr	r3, [r5, #0]
 8011a3e:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 8011a40:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011a48:	4a75      	ldr	r2, [pc, #468]	@ (8011c20 <initializeEmbeddedCli+0x2f4>)
 8011a4a:	461c      	mov	r4, r3
 8011a4c:	4615      	mov	r5, r2
 8011a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a52:	682b      	ldr	r3, [r5, #0]
 8011a54:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 8011a56:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a5a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011a5e:	4a71      	ldr	r2, [pc, #452]	@ (8011c24 <initializeEmbeddedCli+0x2f8>)
 8011a60:	461c      	mov	r4, r3
 8011a62:	4615      	mov	r5, r2
 8011a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a68:	682b      	ldr	r3, [r5, #0]
 8011a6a:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 8011a6c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a70:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011a74:	4a6c      	ldr	r2, [pc, #432]	@ (8011c28 <initializeEmbeddedCli+0x2fc>)
 8011a76:	461c      	mov	r4, r3
 8011a78:	4615      	mov	r5, r2
 8011a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a7e:	682b      	ldr	r3, [r5, #0]
 8011a80:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8011a82:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a86:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011a8a:	4a68      	ldr	r2, [pc, #416]	@ (8011c2c <initializeEmbeddedCli+0x300>)
 8011a8c:	461c      	mov	r4, r3
 8011a8e:	4615      	mov	r5, r2
 8011a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a94:	682b      	ldr	r3, [r5, #0]
 8011a96:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8011a98:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a9c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011aa0:	4a63      	ldr	r2, [pc, #396]	@ (8011c30 <initializeEmbeddedCli+0x304>)
 8011aa2:	461c      	mov	r4, r3
 8011aa4:	4615      	mov	r5, r2
 8011aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aaa:	682b      	ldr	r3, [r5, #0]
 8011aac:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 8011aae:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ab2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8011c34 <initializeEmbeddedCli+0x308>)
 8011ab8:	461c      	mov	r4, r3
 8011aba:	4615      	mov	r5, r2
 8011abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 8011ac4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ac8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011acc:	4a5a      	ldr	r2, [pc, #360]	@ (8011c38 <initializeEmbeddedCli+0x30c>)
 8011ace:	461c      	mov	r4, r3
 8011ad0:	4615      	mov	r5, r2
 8011ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 8011ada:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ade:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011ae2:	4a56      	ldr	r2, [pc, #344]	@ (8011c3c <initializeEmbeddedCli+0x310>)
 8011ae4:	461c      	mov	r4, r3
 8011ae6:	4615      	mov	r5, r2
 8011ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 8011af0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011af4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011af8:	4a51      	ldr	r2, [pc, #324]	@ (8011c40 <initializeEmbeddedCli+0x314>)
 8011afa:	461c      	mov	r4, r3
 8011afc:	4615      	mov	r5, r2
 8011afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b02:	682b      	ldr	r3, [r5, #0]
 8011b04:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 8011b06:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b0a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8011c44 <initializeEmbeddedCli+0x318>)
 8011b10:	461c      	mov	r4, r3
 8011b12:	4615      	mov	r5, r2
 8011b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011b1c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b20:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011b24:	4a48      	ldr	r2, [pc, #288]	@ (8011c48 <initializeEmbeddedCli+0x31c>)
 8011b26:	461c      	mov	r4, r3
 8011b28:	4615      	mov	r5, r2
 8011b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b2e:	682b      	ldr	r3, [r5, #0]
 8011b30:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011b32:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b36:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011b3a:	4a44      	ldr	r2, [pc, #272]	@ (8011c4c <initializeEmbeddedCli+0x320>)
 8011b3c:	461c      	mov	r4, r3
 8011b3e:	4615      	mov	r5, r2
 8011b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011b48:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b4c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011b50:	4a3f      	ldr	r2, [pc, #252]	@ (8011c50 <initializeEmbeddedCli+0x324>)
 8011b52:	461c      	mov	r4, r3
 8011b54:	4615      	mov	r5, r2
 8011b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b5a:	682b      	ldr	r3, [r5, #0]
 8011b5c:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011b5e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b62:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011b66:	4a3b      	ldr	r2, [pc, #236]	@ (8011c54 <initializeEmbeddedCli+0x328>)
 8011b68:	461c      	mov	r4, r3
 8011b6a:	4615      	mov	r5, r2
 8011b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011b74:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b78:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011b7c:	4a36      	ldr	r2, [pc, #216]	@ (8011c58 <initializeEmbeddedCli+0x32c>)
 8011b7e:	461c      	mov	r4, r3
 8011b80:	4615      	mov	r5, r2
 8011b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b86:	682b      	ldr	r3, [r5, #0]
 8011b88:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011b8a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b8e:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011b92:	4a32      	ldr	r2, [pc, #200]	@ (8011c5c <initializeEmbeddedCli+0x330>)
 8011b94:	461c      	mov	r4, r3
 8011b96:	4615      	mov	r5, r2
 8011b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b9c:	682b      	ldr	r3, [r5, #0]
 8011b9e:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011ba0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ba4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8011c60 <initializeEmbeddedCli+0x334>)
 8011baa:	461c      	mov	r4, r3
 8011bac:	4615      	mov	r5, r2
 8011bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bb2:	682b      	ldr	r3, [r5, #0]
 8011bb4:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011bb6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bba:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011bbe:	4a29      	ldr	r2, [pc, #164]	@ (8011c64 <initializeEmbeddedCli+0x338>)
 8011bc0:	461c      	mov	r4, r3
 8011bc2:	4615      	mov	r5, r2
 8011bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bc8:	682b      	ldr	r3, [r5, #0]
 8011bca:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011bcc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bd0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011bd4:	4a24      	ldr	r2, [pc, #144]	@ (8011c68 <initializeEmbeddedCli+0x33c>)
 8011bd6:	461c      	mov	r4, r3
 8011bd8:	4615      	mov	r5, r2
 8011bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bde:	e045      	b.n	8011c6c <initializeEmbeddedCli+0x340>
 8011be0:	20001b2c 	.word	0x20001b2c
 8011be4:	08023b20 	.word	0x08023b20
 8011be8:	08023b74 	.word	0x08023b74
 8011bec:	08023bdc 	.word	0x08023bdc
 8011bf0:	08023c1c 	.word	0x08023c1c
 8011bf4:	08023c7c 	.word	0x08023c7c
 8011bf8:	08023ccc 	.word	0x08023ccc
 8011bfc:	08023cf0 	.word	0x08023cf0
 8011c00:	08023d24 	.word	0x08023d24
 8011c04:	08023d50 	.word	0x08023d50
 8011c08:	08023d84 	.word	0x08023d84
 8011c0c:	08023db0 	.word	0x08023db0
 8011c10:	08023de4 	.word	0x08023de4
 8011c14:	08023e18 	.word	0x08023e18
 8011c18:	08023e64 	.word	0x08023e64
 8011c1c:	08023e9c 	.word	0x08023e9c
 8011c20:	08023f00 	.word	0x08023f00
 8011c24:	08023f34 	.word	0x08023f34
 8011c28:	08023f70 	.word	0x08023f70
 8011c2c:	08023fa4 	.word	0x08023fa4
 8011c30:	08023fe4 	.word	0x08023fe4
 8011c34:	08024030 	.word	0x08024030
 8011c38:	08024098 	.word	0x08024098
 8011c3c:	080240f4 	.word	0x080240f4
 8011c40:	0802414c 	.word	0x0802414c
 8011c44:	0802419c 	.word	0x0802419c
 8011c48:	080241ec 	.word	0x080241ec
 8011c4c:	08024240 	.word	0x08024240
 8011c50:	08024294 	.word	0x08024294
 8011c54:	080242e0 	.word	0x080242e0
 8011c58:	08024338 	.word	0x08024338
 8011c5c:	0802436c 	.word	0x0802436c
 8011c60:	080243a4 	.word	0x080243a4
 8011c64:	080243d8 	.word	0x080243d8
 8011c68:	08024420 	.word	0x08024420
 8011c6c:	682b      	ldr	r3, [r5, #0]
 8011c6e:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011c70:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c74:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011c78:	4acb      	ldr	r2, [pc, #812]	@ (8011fa8 <initializeEmbeddedCli+0x67c>)
 8011c7a:	461c      	mov	r4, r3
 8011c7c:	4615      	mov	r5, r2
 8011c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c82:	682b      	ldr	r3, [r5, #0]
 8011c84:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011c86:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c8a:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011c8e:	4ac7      	ldr	r2, [pc, #796]	@ (8011fac <initializeEmbeddedCli+0x680>)
 8011c90:	461c      	mov	r4, r3
 8011c92:	4615      	mov	r5, r2
 8011c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c98:	682b      	ldr	r3, [r5, #0]
 8011c9a:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011c9c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ca0:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011ca4:	4ac2      	ldr	r2, [pc, #776]	@ (8011fb0 <initializeEmbeddedCli+0x684>)
 8011ca6:	461c      	mov	r4, r3
 8011ca8:	4615      	mov	r5, r2
 8011caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cae:	682b      	ldr	r3, [r5, #0]
 8011cb0:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011cb2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011cb6:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011cba:	4abe      	ldr	r2, [pc, #760]	@ (8011fb4 <initializeEmbeddedCli+0x688>)
 8011cbc:	461c      	mov	r4, r3
 8011cbe:	4615      	mov	r5, r2
 8011cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cc4:	682b      	ldr	r3, [r5, #0]
 8011cc6:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011cc8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ccc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011cd0:	4ab9      	ldr	r2, [pc, #740]	@ (8011fb8 <initializeEmbeddedCli+0x68c>)
 8011cd2:	461c      	mov	r4, r3
 8011cd4:	4615      	mov	r5, r2
 8011cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cda:	682b      	ldr	r3, [r5, #0]
 8011cdc:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011cde:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ce2:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011ce6:	4ab5      	ldr	r2, [pc, #724]	@ (8011fbc <initializeEmbeddedCli+0x690>)
 8011ce8:	461c      	mov	r4, r3
 8011cea:	4615      	mov	r5, r2
 8011cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cf0:	682b      	ldr	r3, [r5, #0]
 8011cf2:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011cf4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011cf8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011cfc:	4ab0      	ldr	r2, [pc, #704]	@ (8011fc0 <initializeEmbeddedCli+0x694>)
 8011cfe:	461c      	mov	r4, r3
 8011d00:	4615      	mov	r5, r2
 8011d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d06:	682b      	ldr	r3, [r5, #0]
 8011d08:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011d0a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d0e:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011d12:	4aac      	ldr	r2, [pc, #688]	@ (8011fc4 <initializeEmbeddedCli+0x698>)
 8011d14:	461c      	mov	r4, r3
 8011d16:	4615      	mov	r5, r2
 8011d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d1c:	682b      	ldr	r3, [r5, #0]
 8011d1e:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011d20:	4ba9      	ldr	r3, [pc, #676]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011d22:	681c      	ldr	r4, [r3, #0]
 8011d24:	466a      	mov	r2, sp
 8011d26:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011d2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d32:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f000 fcf6 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011d3e:	4ba2      	ldr	r3, [pc, #648]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011d40:	681c      	ldr	r4, [r3, #0]
 8011d42:	466a      	mov	r2, sp
 8011d44:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011d48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d50:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 fce7 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011d5e:	681c      	ldr	r4, [r3, #0]
 8011d60:	466a      	mov	r2, sp
 8011d62:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011d66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d6e:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d74:	4620      	mov	r0, r4
 8011d76:	f000 fcd8 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011d7a:	4b93      	ldr	r3, [pc, #588]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011d7c:	681c      	ldr	r4, [r3, #0]
 8011d7e:	466a      	mov	r2, sp
 8011d80:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011d84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d88:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d8c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d92:	4620      	mov	r0, r4
 8011d94:	f000 fcc9 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011d98:	4b8b      	ldr	r3, [pc, #556]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011d9a:	681c      	ldr	r4, [r3, #0]
 8011d9c:	466a      	mov	r2, sp
 8011d9e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011da2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011da6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011daa:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011db0:	4620      	mov	r0, r4
 8011db2:	f000 fcba 	bl	801272a <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011db6:	4b84      	ldr	r3, [pc, #528]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011db8:	681c      	ldr	r4, [r3, #0]
 8011dba:	466a      	mov	r2, sp
 8011dbc:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011dc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dc4:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dc8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f000 fcab 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011dd6:	681c      	ldr	r4, [r3, #0]
 8011dd8:	466a      	mov	r2, sp
 8011dda:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011dde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011de2:	e882 0003 	stmia.w	r2, {r0, r1}
 8011de6:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dec:	4620      	mov	r0, r4
 8011dee:	f000 fc9c 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011df2:	4b75      	ldr	r3, [pc, #468]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011df4:	681c      	ldr	r4, [r3, #0]
 8011df6:	466a      	mov	r2, sp
 8011df8:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011dfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e00:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e04:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f000 fc8d 	bl	801272a <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011e10:	4b6d      	ldr	r3, [pc, #436]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011e12:	681c      	ldr	r4, [r3, #0]
 8011e14:	466a      	mov	r2, sp
 8011e16:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011e1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e22:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f000 fc7e 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011e2e:	4b66      	ldr	r3, [pc, #408]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011e30:	681c      	ldr	r4, [r3, #0]
 8011e32:	466a      	mov	r2, sp
 8011e34:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e40:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e46:	4620      	mov	r0, r4
 8011e48:	f000 fc6f 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011e4e:	681c      	ldr	r4, [r3, #0]
 8011e50:	466a      	mov	r2, sp
 8011e52:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011e56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e5e:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e64:	4620      	mov	r0, r4
 8011e66:	f000 fc60 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011e6a:	4b57      	ldr	r3, [pc, #348]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011e6c:	681c      	ldr	r4, [r3, #0]
 8011e6e:	466a      	mov	r2, sp
 8011e70:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011e74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e78:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e7c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e82:	4620      	mov	r0, r4
 8011e84:	f000 fc51 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011e88:	4b4f      	ldr	r3, [pc, #316]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011e8a:	681c      	ldr	r4, [r3, #0]
 8011e8c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e94:	466d      	mov	r5, sp
 8011e96:	f103 020c 	add.w	r2, r3, #12
 8011e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f000 fc40 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011eaa:	4b47      	ldr	r3, [pc, #284]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011eac:	681c      	ldr	r4, [r3, #0]
 8011eae:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011eb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011eb6:	466d      	mov	r5, sp
 8011eb8:	f103 020c 	add.w	r2, r3, #12
 8011ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f000 fc2f 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011ece:	681c      	ldr	r4, [r3, #0]
 8011ed0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ed4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ed8:	466d      	mov	r5, sp
 8011eda:	f103 020c 	add.w	r2, r3, #12
 8011ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ee2:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f000 fc1e 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011eee:	4b36      	ldr	r3, [pc, #216]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011ef0:	681c      	ldr	r4, [r3, #0]
 8011ef2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ef6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011efa:	466d      	mov	r5, sp
 8011efc:	f103 020c 	add.w	r2, r3, #12
 8011f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f000 fc0d 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011f10:	4b2d      	ldr	r3, [pc, #180]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011f12:	681c      	ldr	r4, [r3, #0]
 8011f14:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f18:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011f1c:	466d      	mov	r5, sp
 8011f1e:	f103 020c 	add.w	r2, r3, #12
 8011f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f000 fbfc 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011f32:	4b25      	ldr	r3, [pc, #148]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011f34:	681c      	ldr	r4, [r3, #0]
 8011f36:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f3a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011f3e:	466d      	mov	r5, sp
 8011f40:	f103 020c 	add.w	r2, r3, #12
 8011f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fbeb 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011f54:	4b1c      	ldr	r3, [pc, #112]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011f56:	681c      	ldr	r4, [r3, #0]
 8011f58:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f5c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011f60:	466d      	mov	r5, sp
 8011f62:	f103 020c 	add.w	r2, r3, #12
 8011f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f70:	4620      	mov	r0, r4
 8011f72:	f000 fbda 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011f76:	4b14      	ldr	r3, [pc, #80]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011f78:	681c      	ldr	r4, [r3, #0]
 8011f7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f7e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011f82:	466d      	mov	r5, sp
 8011f84:	f103 020c 	add.w	r2, r3, #12
 8011f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f92:	4620      	mov	r0, r4
 8011f94:	f000 fbc9 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8011f98:	4b0b      	ldr	r3, [pc, #44]	@ (8011fc8 <initializeEmbeddedCli+0x69c>)
 8011f9a:	681c      	ldr	r4, [r3, #0]
 8011f9c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fa0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011fa4:	e012      	b.n	8011fcc <initializeEmbeddedCli+0x6a0>
 8011fa6:	bf00      	nop
 8011fa8:	08024468 	.word	0x08024468
 8011fac:	080244b0 	.word	0x080244b0
 8011fb0:	080244e8 	.word	0x080244e8
 8011fb4:	0802454c 	.word	0x0802454c
 8011fb8:	08024578 	.word	0x08024578
 8011fbc:	080245b0 	.word	0x080245b0
 8011fc0:	080245f4 	.word	0x080245f4
 8011fc4:	0802462c 	.word	0x0802462c
 8011fc8:	20001b2c 	.word	0x20001b2c
 8011fcc:	466d      	mov	r5, sp
 8011fce:	f103 020c 	add.w	r2, r3, #12
 8011fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f000 fba4 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 8011fe2:	4bba      	ldr	r3, [pc, #744]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8011fe4:	681c      	ldr	r4, [r3, #0]
 8011fe6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011fee:	466d      	mov	r5, sp
 8011ff0:	f103 020c 	add.w	r2, r3, #12
 8011ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ff8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ffe:	4620      	mov	r0, r4
 8012000:	f000 fb93 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 8012004:	4bb1      	ldr	r3, [pc, #708]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012006:	681c      	ldr	r4, [r3, #0]
 8012008:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801200c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012010:	466d      	mov	r5, sp
 8012012:	f103 020c 	add.w	r2, r3, #12
 8012016:	e892 0003 	ldmia.w	r2, {r0, r1}
 801201a:	e885 0003 	stmia.w	r5, {r0, r1}
 801201e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012020:	4620      	mov	r0, r4
 8012022:	f000 fb82 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 8012026:	4ba9      	ldr	r3, [pc, #676]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012028:	681c      	ldr	r4, [r3, #0]
 801202a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801202e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012032:	466d      	mov	r5, sp
 8012034:	f103 020c 	add.w	r2, r3, #12
 8012038:	e892 0003 	ldmia.w	r2, {r0, r1}
 801203c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012042:	4620      	mov	r0, r4
 8012044:	f000 fb71 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 8012048:	4ba0      	ldr	r3, [pc, #640]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801204a:	681c      	ldr	r4, [r3, #0]
 801204c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012050:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8012054:	466d      	mov	r5, sp
 8012056:	f103 020c 	add.w	r2, r3, #12
 801205a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801205e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012064:	4620      	mov	r0, r4
 8012066:	f000 fb60 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 801206a:	4b98      	ldr	r3, [pc, #608]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801206c:	681c      	ldr	r4, [r3, #0]
 801206e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012072:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8012076:	466d      	mov	r5, sp
 8012078:	f103 020c 	add.w	r2, r3, #12
 801207c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012080:	e885 0003 	stmia.w	r5, {r0, r1}
 8012084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012086:	4620      	mov	r0, r4
 8012088:	f000 fb4f 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 801208c:	4b8f      	ldr	r3, [pc, #572]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801208e:	681c      	ldr	r4, [r3, #0]
 8012090:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012094:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012098:	466d      	mov	r5, sp
 801209a:	f103 020c 	add.w	r2, r3, #12
 801209e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80120a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120a8:	4620      	mov	r0, r4
 80120aa:	f000 fb3e 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 80120ae:	4b87      	ldr	r3, [pc, #540]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80120b0:	681c      	ldr	r4, [r3, #0]
 80120b2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120b6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80120ba:	466d      	mov	r5, sp
 80120bc:	f103 020c 	add.w	r2, r3, #12
 80120c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80120c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 fb2d 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 80120d0:	4b7e      	ldr	r3, [pc, #504]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80120d2:	681c      	ldr	r4, [r3, #0]
 80120d4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120d8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80120dc:	466d      	mov	r5, sp
 80120de:	f103 020c 	add.w	r2, r3, #12
 80120e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ec:	4620      	mov	r0, r4
 80120ee:	f000 fb1c 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 80120f2:	4b76      	ldr	r3, [pc, #472]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80120f4:	681c      	ldr	r4, [r3, #0]
 80120f6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120fa:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80120fe:	466d      	mov	r5, sp
 8012100:	f103 020c 	add.w	r2, r3, #12
 8012104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012108:	e885 0003 	stmia.w	r5, {r0, r1}
 801210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801210e:	4620      	mov	r0, r4
 8012110:	f000 fb0b 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 8012114:	4b6d      	ldr	r3, [pc, #436]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012116:	681c      	ldr	r4, [r3, #0]
 8012118:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801211c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8012120:	466d      	mov	r5, sp
 8012122:	f103 020c 	add.w	r2, r3, #12
 8012126:	e892 0003 	ldmia.w	r2, {r0, r1}
 801212a:	e885 0003 	stmia.w	r5, {r0, r1}
 801212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012130:	4620      	mov	r0, r4
 8012132:	f000 fafa 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8012136:	4b65      	ldr	r3, [pc, #404]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012138:	681c      	ldr	r4, [r3, #0]
 801213a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801213e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8012142:	466d      	mov	r5, sp
 8012144:	f103 020c 	add.w	r2, r3, #12
 8012148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801214c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012152:	4620      	mov	r0, r4
 8012154:	f000 fae9 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8012158:	4b5c      	ldr	r3, [pc, #368]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801215a:	681c      	ldr	r4, [r3, #0]
 801215c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012160:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8012164:	466d      	mov	r5, sp
 8012166:	f103 020c 	add.w	r2, r3, #12
 801216a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801216e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012174:	4620      	mov	r0, r4
 8012176:	f000 fad8 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 801217a:	4b54      	ldr	r3, [pc, #336]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801217c:	681c      	ldr	r4, [r3, #0]
 801217e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012182:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8012186:	466d      	mov	r5, sp
 8012188:	f103 020c 	add.w	r2, r3, #12
 801218c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012190:	e885 0003 	stmia.w	r5, {r0, r1}
 8012194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012196:	4620      	mov	r0, r4
 8012198:	f000 fac7 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 801219c:	4b4b      	ldr	r3, [pc, #300]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801219e:	681c      	ldr	r4, [r3, #0]
 80121a0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121a4:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80121a8:	466d      	mov	r5, sp
 80121aa:	f103 020c 	add.w	r2, r3, #12
 80121ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80121b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121b8:	4620      	mov	r0, r4
 80121ba:	f000 fab6 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 80121be:	4b43      	ldr	r3, [pc, #268]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80121c0:	681c      	ldr	r4, [r3, #0]
 80121c2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121c6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80121ca:	466d      	mov	r5, sp
 80121cc:	f103 020c 	add.w	r2, r3, #12
 80121d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80121d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121da:	4620      	mov	r0, r4
 80121dc:	f000 faa5 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 80121e0:	4b3a      	ldr	r3, [pc, #232]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80121e2:	681c      	ldr	r4, [r3, #0]
 80121e4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121e8:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80121ec:	466d      	mov	r5, sp
 80121ee:	f103 020c 	add.w	r2, r3, #12
 80121f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80121fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121fc:	4620      	mov	r0, r4
 80121fe:	f000 fa94 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8012202:	4b32      	ldr	r3, [pc, #200]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012204:	681c      	ldr	r4, [r3, #0]
 8012206:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801220a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801220e:	466d      	mov	r5, sp
 8012210:	f103 020c 	add.w	r2, r3, #12
 8012214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012218:	e885 0003 	stmia.w	r5, {r0, r1}
 801221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801221e:	4620      	mov	r0, r4
 8012220:	f000 fa83 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8012224:	4b29      	ldr	r3, [pc, #164]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012226:	681c      	ldr	r4, [r3, #0]
 8012228:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801222c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8012230:	466d      	mov	r5, sp
 8012232:	f103 020c 	add.w	r2, r3, #12
 8012236:	e892 0003 	ldmia.w	r2, {r0, r1}
 801223a:	e885 0003 	stmia.w	r5, {r0, r1}
 801223e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012240:	4620      	mov	r0, r4
 8012242:	f000 fa72 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 8012246:	4b21      	ldr	r3, [pc, #132]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 8012248:	681c      	ldr	r4, [r3, #0]
 801224a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801224e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8012252:	466d      	mov	r5, sp
 8012254:	f103 020c 	add.w	r2, r3, #12
 8012258:	e892 0003 	ldmia.w	r2, {r0, r1}
 801225c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012262:	4620      	mov	r0, r4
 8012264:	f000 fa61 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8012268:	4b18      	ldr	r3, [pc, #96]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801226a:	681c      	ldr	r4, [r3, #0]
 801226c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012270:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8012274:	466d      	mov	r5, sp
 8012276:	f103 020c 	add.w	r2, r3, #12
 801227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801227e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012284:	4620      	mov	r0, r4
 8012286:	f000 fa50 	bl	801272a <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 801228a:	4b10      	ldr	r3, [pc, #64]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 801228c:	681c      	ldr	r4, [r3, #0]
 801228e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012292:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8012296:	466d      	mov	r5, sp
 8012298:	f103 020c 	add.w	r2, r3, #12
 801229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80122a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 fa3f 	bl	801272a <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 80122ac:	4b07      	ldr	r3, [pc, #28]	@ (80122cc <initializeEmbeddedCli+0x9a0>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4a07      	ldr	r2, [pc, #28]	@ (80122d0 <initializeEmbeddedCli+0x9a4>)
 80122b2:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 80122b4:	4b07      	ldr	r3, [pc, #28]	@ (80122d4 <initializeEmbeddedCli+0x9a8>)
 80122b6:	2201      	movs	r2, #1
 80122b8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80122ba:	4b07      	ldr	r3, [pc, #28]	@ (80122d8 <initializeEmbeddedCli+0x9ac>)
 80122bc:	2200      	movs	r2, #0
 80122be:	701a      	strb	r2, [r3, #0]
}
 80122c0:	bf00      	nop
 80122c2:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bdb0      	pop	{r4, r5, r7, pc}
 80122ca:	bf00      	nop
 80122cc:	20001b2c 	.word	0x20001b2c
 80122d0:	0800f521 	.word	0x0800f521
 80122d4:	20001b39 	.word	0x20001b39
 80122d8:	20001b3a 	.word	0x20001b3a

080122dc <console_process>:

void console_process(void) {
 80122dc:	b580      	push	{r7, lr}
 80122de:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 80122e0:	4b03      	ldr	r3, [pc, #12]	@ (80122f0 <console_process+0x14>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 f990 	bl	801260a <embeddedCliProcess>
}
 80122ea:	bf00      	nop
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	20001b2c 	.word	0x20001b2c

080122f4 <console_uart_deinit>:

void console_uart_deinit() {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80122f8:	4803      	ldr	r0, [pc, #12]	@ (8012308 <console_uart_deinit+0x14>)
 80122fa:	f7f9 ff93 	bl	800c224 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 80122fe:	4802      	ldr	r0, [pc, #8]	@ (8012308 <console_uart_deinit+0x14>)
 8012300:	f7f1 fcfa 	bl	8003cf8 <HAL_UART_MspDeInit>
}
 8012304:	bf00      	nop
 8012306:	bd80      	pop	{r7, pc}
 8012308:	20001a74 	.word	0x20001a74

0801230c <console_uart_init>:
void console_uart_init() {
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012310:	4815      	ldr	r0, [pc, #84]	@ (8012368 <console_uart_init+0x5c>)
 8012312:	f7f9 ff87 	bl	800c224 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 8012316:	4b14      	ldr	r3, [pc, #80]	@ (8012368 <console_uart_init+0x5c>)
 8012318:	4a14      	ldr	r2, [pc, #80]	@ (801236c <console_uart_init+0x60>)
 801231a:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 801231c:	4b12      	ldr	r3, [pc, #72]	@ (8012368 <console_uart_init+0x5c>)
 801231e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012322:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012324:	4b10      	ldr	r3, [pc, #64]	@ (8012368 <console_uart_init+0x5c>)
 8012326:	2200      	movs	r2, #0
 8012328:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 801232a:	4b0f      	ldr	r3, [pc, #60]	@ (8012368 <console_uart_init+0x5c>)
 801232c:	2200      	movs	r2, #0
 801232e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8012330:	4b0d      	ldr	r3, [pc, #52]	@ (8012368 <console_uart_init+0x5c>)
 8012332:	2200      	movs	r2, #0
 8012334:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8012336:	4b0c      	ldr	r3, [pc, #48]	@ (8012368 <console_uart_init+0x5c>)
 8012338:	220c      	movs	r2, #12
 801233a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801233c:	4b0a      	ldr	r3, [pc, #40]	@ (8012368 <console_uart_init+0x5c>)
 801233e:	2200      	movs	r2, #0
 8012340:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012342:	4b09      	ldr	r3, [pc, #36]	@ (8012368 <console_uart_init+0x5c>)
 8012344:	2200      	movs	r2, #0
 8012346:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8012348:	4807      	ldr	r0, [pc, #28]	@ (8012368 <console_uart_init+0x5c>)
 801234a:	f7f9 ff1b 	bl	800c184 <HAL_UART_Init>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d001      	beq.n	8012358 <console_uart_init+0x4c>
		Error_Handler();
 8012354:	f7f1 f9ae 	bl	80036b4 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8012358:	2201      	movs	r2, #1
 801235a:	4905      	ldr	r1, [pc, #20]	@ (8012370 <console_uart_init+0x64>)
 801235c:	4802      	ldr	r0, [pc, #8]	@ (8012368 <console_uart_init+0x5c>)
 801235e:	f7fa f81e 	bl	800c39e <HAL_UART_Receive_IT>
}
 8012362:	bf00      	nop
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	20001a74 	.word	0x20001a74
 801236c:	40011000 	.word	0x40011000
 8012370:	20001b38 	.word	0x20001b38

08012374 <console_init>:

void console_init(void) {
 8012374:	b580      	push	{r7, lr}
 8012376:	af00      	add	r7, sp, #0
	console_uart_init();
 8012378:	f7ff ffc8 	bl	801230c <console_uart_init>
	initializeEmbeddedCli();
 801237c:	f7ff fad6 	bl	801192c <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8012380:	2201      	movs	r2, #1
 8012382:	4903      	ldr	r1, [pc, #12]	@ (8012390 <console_init+0x1c>)
 8012384:	4803      	ldr	r0, [pc, #12]	@ (8012394 <console_init+0x20>)
 8012386:	f7fa f80a 	bl	800c39e <HAL_UART_Receive_IT>
}
 801238a:	bf00      	nop
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	20001b38 	.word	0x20001b38
 8012394:	20001a74 	.word	0x20001a74

08012398 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8012398:	b480      	push	{r7}
 801239a:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 801239c:	4b0e      	ldr	r3, [pc, #56]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 801239e:	2240      	movs	r2, #64	@ 0x40
 80123a0:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80123a2:	4b0d      	ldr	r3, [pc, #52]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123a4:	2240      	movs	r2, #64	@ 0x40
 80123a6:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 80123a8:	4b0b      	ldr	r3, [pc, #44]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123aa:	2280      	movs	r2, #128	@ 0x80
 80123ac:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80123ae:	4b0a      	ldr	r3, [pc, #40]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123b0:	2200      	movs	r2, #0
 80123b2:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 80123b4:	4b08      	ldr	r3, [pc, #32]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123b6:	2200      	movs	r2, #0
 80123b8:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 80123ba:	4b07      	ldr	r3, [pc, #28]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123bc:	2246      	movs	r2, #70	@ 0x46
 80123be:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 80123c0:	4b05      	ldr	r3, [pc, #20]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123c2:	2201      	movs	r2, #1
 80123c4:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 80123c6:	4b04      	ldr	r3, [pc, #16]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
 80123c8:	4a04      	ldr	r2, [pc, #16]	@ (80123dc <embeddedCliDefaultConfig+0x44>)
 80123ca:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 80123cc:	4b02      	ldr	r3, [pc, #8]	@ (80123d8 <embeddedCliDefaultConfig+0x40>)
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr
 80123d8:	20001b40 	.word	0x20001b40
 80123dc:	08024644 	.word	0x08024644

080123e0 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	895b      	ldrh	r3, [r3, #10]
 80123ec:	2201      	movs	r2, #1
 80123ee:	4413      	add	r3, r2
 80123f0:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	889b      	ldrh	r3, [r3, #4]
 80123f6:	3303      	adds	r3, #3
 80123f8:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	88db      	ldrh	r3, [r3, #6]
 80123fe:	3303      	adds	r3, #3
 8012400:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8012402:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	891b      	ldrh	r3, [r3, #8]
 8012408:	3303      	adds	r3, #3
 801240a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 801240c:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 801240e:	89fa      	ldrh	r2, [r7, #14]
 8012410:	4613      	mov	r3, r2
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	4413      	add	r3, r2
 8012416:	009b      	lsls	r3, r3, #2
 8012418:	3303      	adds	r3, #3
 801241a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 801241c:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 801241e:	89fb      	ldrh	r3, [r7, #14]
 8012420:	3303      	adds	r3, #3
 8012422:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012424:	4413      	add	r3, r2
 8012426:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8012428:	b29b      	uxth	r3, r3
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	b29b      	uxth	r3, r3
}
 801242e:	4618      	mov	r0, r3
 8012430:	3714      	adds	r7, #20
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr

0801243a <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 801243a:	b580      	push	{r7, lr}
 801243c:	b088      	sub	sp, #32
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8012442:	2300      	movs	r3, #0
 8012444:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	895b      	ldrh	r3, [r3, #10]
 801244a:	2201      	movs	r2, #1
 801244c:	4413      	add	r3, r2
 801244e:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7ff ffc5 	bl	80123e0 <embeddedCliRequiredSize>
 8012456:	4603      	mov	r3, r0
 8012458:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 801245a:	2300      	movs	r3, #0
 801245c:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d10f      	bne.n	8012486 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8012466:	6938      	ldr	r0, [r7, #16]
 8012468:	f00b fa3a 	bl	801d8e0 <malloc>
 801246c:	4603      	mov	r3, r0
 801246e:	461a      	mov	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d101      	bne.n	8012480 <embeddedCliNew+0x46>
            return NULL;
 801247c:	2300      	movs	r3, #0
 801247e:	e092      	b.n	80125a6 <embeddedCliNew+0x16c>
        allocated = true;
 8012480:	2301      	movs	r3, #1
 8012482:	77fb      	strb	r3, [r7, #31]
 8012484:	e007      	b.n	8012496 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	8a1b      	ldrh	r3, [r3, #16]
 801248a:	461a      	mov	r2, r3
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	4293      	cmp	r3, r2
 8012490:	d901      	bls.n	8012496 <embeddedCliNew+0x5c>
        return NULL;
 8012492:	2300      	movs	r3, #0
 8012494:	e087      	b.n	80125a6 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 801249c:	693a      	ldr	r2, [r7, #16]
 801249e:	2100      	movs	r1, #0
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f00c fc9b 	bl	801eddc <memset>

    cli = (EmbeddedCli *) buf;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	3310      	adds	r3, #16
 80124ae:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	3334      	adds	r3, #52	@ 0x34
 80124ba:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	889b      	ldrh	r3, [r3, #4]
 80124cc:	3303      	adds	r3, #3
 80124ce:	f023 0303 	bic.w	r3, r3, #3
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	4413      	add	r3, r2
 80124d6:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	88db      	ldrh	r3, [r3, #6]
 80124e2:	3303      	adds	r3, #3
 80124e4:	f023 0303 	bic.w	r3, r3, #3
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	4413      	add	r3, r2
 80124ec:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80124f4:	8afa      	ldrh	r2, [r7, #22]
 80124f6:	4613      	mov	r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4413      	add	r3, r2
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	3303      	adds	r3, #3
 8012500:	f023 0303 	bic.w	r3, r3, #3
 8012504:	68fa      	ldr	r2, [r7, #12]
 8012506:	4413      	add	r3, r2
 8012508:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8012510:	8afb      	ldrh	r3, [r7, #22]
 8012512:	3303      	adds	r3, #3
 8012514:	f023 0303 	bic.w	r3, r3, #3
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	4413      	add	r3, r2
 801251c:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	891a      	ldrh	r2, [r3, #8]
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	811a      	strh	r2, [r3, #8]

    if (allocated)
 801252c:	7ffb      	ldrb	r3, [r7, #31]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d008      	beq.n	8012544 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012538:	f043 0304 	orr.w	r3, r3, #4
 801253c:	b2da      	uxtb	r2, r3
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7c9b      	ldrb	r3, [r3, #18]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d008      	beq.n	801255e <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012552:	f043 0320 	orr.w	r3, r3, #32
 8012556:	b2da      	uxtb	r2, r3
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	889a      	ldrh	r2, [r3, #4]
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	2200      	movs	r2, #0
 801256a:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	2200      	movs	r2, #0
 8012570:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	88da      	ldrh	r2, [r3, #6]
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	2200      	movs	r2, #0
 801257e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	895b      	ldrh	r3, [r3, #10]
 8012584:	2201      	movs	r2, #1
 8012586:	4413      	add	r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	2200      	movs	r2, #0
 8012592:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 801259e:	69b8      	ldr	r0, [r7, #24]
 80125a0:	f000 fc5e 	bl	8012e60 <initInternalBindings>

    return cli;
 80125a4:	69bb      	ldr	r3, [r7, #24]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 80125ae:	b580      	push	{r7, lr}
 80125b0:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 80125b2:	f7ff fef1 	bl	8012398 <embeddedCliDefaultConfig>
 80125b6:	4603      	mov	r3, r0
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff ff3e 	bl	801243a <embeddedCliNew>
 80125be:	4603      	mov	r3, r0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	460b      	mov	r3, r1
 80125ce:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	3310      	adds	r3, #16
 80125da:	78fa      	ldrb	r2, [r7, #3]
 80125dc:	4611      	mov	r1, r2
 80125de:	4618      	mov	r0, r3
 80125e0:	f001 f865 	bl	80136ae <fifoBufPush>
 80125e4:	4603      	mov	r3, r0
 80125e6:	f083 0301 	eor.w	r3, r3, #1
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d008      	beq.n	8012602 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125f6:	f043 0301 	orr.w	r3, r3, #1
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8012602:	bf00      	nop
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 801260a:	b580      	push	{r7, lr}
 801260c:	b084      	sub	sp, #16
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 8083 	beq.w	8012722 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012628:	f003 0302 	and.w	r3, r3, #2
 801262c:	2b00      	cmp	r3, #0
 801262e:	d155      	bne.n	80126dc <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012636:	f043 0302 	orr.w	r3, r3, #2
 801263a:	b2da      	uxtb	r2, r3
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4619      	mov	r1, r3
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 ff8f 	bl	801356c <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 801264e:	e045      	b.n	80126dc <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3310      	adds	r3, #16
 8012654:	4618      	mov	r0, r3
 8012656:	f001 f802 	bl	801365e <fifoBufPop>
 801265a:	4603      	mov	r3, r0
 801265c:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012664:	f003 0308 	and.w	r3, r3, #8
 8012668:	2b00      	cmp	r3, #0
 801266a:	d005      	beq.n	8012678 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 801266c:	7afb      	ldrb	r3, [r7, #11]
 801266e:	4619      	mov	r1, r3
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 fa17 	bl	8012aa4 <onEscapedInput>
 8012676:	e02a      	b.n	80126ce <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801267e:	2b1b      	cmp	r3, #27
 8012680:	d10c      	bne.n	801269c <embeddedCliProcess+0x92>
 8012682:	7afb      	ldrb	r3, [r7, #11]
 8012684:	2b5b      	cmp	r3, #91	@ 0x5b
 8012686:	d109      	bne.n	801269c <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801268e:	f043 0308 	orr.w	r3, r3, #8
 8012692:	b2da      	uxtb	r2, r3
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 801269a:	e018      	b.n	80126ce <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 801269c:	7afb      	ldrb	r3, [r7, #11]
 801269e:	4618      	mov	r0, r3
 80126a0:	f000 ff85 	bl	80135ae <isControlChar>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d005      	beq.n	80126b6 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80126aa:	7afb      	ldrb	r3, [r7, #11]
 80126ac:	4619      	mov	r1, r3
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f000 fa54 	bl	8012b5c <onControlInput>
 80126b4:	e00b      	b.n	80126ce <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80126b6:	7afb      	ldrb	r3, [r7, #11]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 ff98 	bl	80135ee <isDisplayableChar>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d004      	beq.n	80126ce <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80126c4:	7afb      	ldrb	r3, [r7, #11]
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 fa17 	bl	8012afc <onCharInput>
        }

        printLiveAutocompletion(cli);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 fe35 	bl	801333e <printLiveAutocompletion>

        impl->lastChar = c;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	7afa      	ldrb	r2, [r7, #11]
 80126d8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	3310      	adds	r3, #16
 80126e0:	4618      	mov	r0, r3
 80126e2:	f000 ff9b 	bl	801361c <fifoBufAvailable>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1b1      	bne.n	8012650 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126f2:	f003 0301 	and.w	r3, r3, #1
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d014      	beq.n	8012724 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2200      	movs	r2, #0
 80126fe:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	69db      	ldr	r3, [r3, #28]
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	8c12      	ldrh	r2, [r2, #32]
 8012708:	4413      	add	r3, r2
 801270a:	2200      	movs	r2, #0
 801270c:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012714:	f023 0301 	bic.w	r3, r3, #1
 8012718:	b2da      	uxtb	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012720:	e000      	b.n	8012724 <embeddedCliProcess+0x11a>
        return;
 8012722:	bf00      	nop
    }
}
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}

0801272a <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801272a:	b084      	sub	sp, #16
 801272c:	b4b0      	push	{r4, r5, r7}
 801272e:	b085      	sub	sp, #20
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801274a:	429a      	cmp	r2, r3
 801274c:	d101      	bne.n	8012752 <embeddedCliAddBinding+0x28>
        return false;
 801274e:	2300      	movs	r3, #0
 8012750:	e017      	b.n	8012782 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801275a:	4619      	mov	r1, r3
 801275c:	460b      	mov	r3, r1
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	440b      	add	r3, r1
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4413      	add	r3, r2
 8012766:	461d      	mov	r5, r3
 8012768:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 801276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012778:	3301      	adds	r3, #1
 801277a:	b29a      	uxth	r2, r3
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 8012780:	2301      	movs	r3, #1
}
 8012782:	4618      	mov	r0, r3
 8012784:	3714      	adds	r7, #20
 8012786:	46bd      	mov	sp, r7
 8012788:	bcb0      	pop	{r4, r5, r7}
 801278a:	b004      	add	sp, #16
 801278c:	4770      	bx	lr
	...

08012790 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d031      	beq.n	8012806 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80127ae:	f003 0310 	and.w	r3, r3, #16
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d102      	bne.n	80127bc <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fea6 	bl	8013508 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80127bc:	6839      	ldr	r1, [r7, #0]
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 fed4 	bl	801356c <writeToOutput>
    writeToOutput(cli, lineBreak);
 80127c4:	4b12      	ldr	r3, [pc, #72]	@ (8012810 <embeddedCliPrint+0x80>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4619      	mov	r1, r3
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fece 	bl	801356c <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80127d6:	f003 0310 	and.w	r3, r3, #16
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d114      	bne.n	8012808 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f000 fec1 	bl	801356c <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	69db      	ldr	r3, [r3, #28]
 80127ee:	4619      	mov	r1, r3
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 febb 	bl	801356c <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	8c1a      	ldrh	r2, [r3, #32]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f000 fd9d 	bl	801333e <printLiveAutocompletion>
 8012804:	e000      	b.n	8012808 <embeddedCliPrint+0x78>
        return;
 8012806:	bf00      	nop
    }
}
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	20000024 	.word	0x20000024

08012814 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8012814:	b580      	push	{r7, lr}
 8012816:	b088      	sub	sp, #32
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d066      	beq.n	80128f0 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8012822:	4b35      	ldr	r3, [pc, #212]	@ (80128f8 <embeddedCliTokenizeArgs+0xe4>)
 8012824:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8012826:	2300      	movs	r3, #0
 8012828:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801282a:	2300      	movs	r3, #0
 801282c:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 801282e:	2300      	movs	r3, #0
 8012830:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8012832:	2300      	movs	r3, #0
 8012834:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8012836:	e047      	b.n	80128c8 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	3301      	adds	r3, #1
 801283c:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 801283e:	7fbb      	ldrb	r3, [r7, #30]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d002      	beq.n	801284a <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8012844:	2300      	movs	r3, #0
 8012846:	77bb      	strb	r3, [r7, #30]
 8012848:	e029      	b.n	801289e <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801284a:	7cfb      	ldrb	r3, [r7, #19]
 801284c:	2b5c      	cmp	r3, #92	@ 0x5c
 801284e:	d102      	bne.n	8012856 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8012850:	2301      	movs	r3, #1
 8012852:	77bb      	strb	r3, [r7, #30]
            continue;
 8012854:	e038      	b.n	80128c8 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8012856:	7cfb      	ldrb	r3, [r7, #19]
 8012858:	2b22      	cmp	r3, #34	@ 0x22
 801285a:	d110      	bne.n	801287e <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 801285c:	7ffb      	ldrb	r3, [r7, #31]
 801285e:	2b00      	cmp	r3, #0
 8012860:	bf14      	ite	ne
 8012862:	2301      	movne	r3, #1
 8012864:	2300      	moveq	r3, #0
 8012866:	b2db      	uxtb	r3, r3
 8012868:	f083 0301 	eor.w	r3, r3, #1
 801286c:	b2db      	uxtb	r3, r3
 801286e:	77fb      	strb	r3, [r7, #31]
 8012870:	7ffb      	ldrb	r3, [r7, #31]
 8012872:	f003 0301 	and.w	r3, r3, #1
 8012876:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8012878:	2300      	movs	r3, #0
 801287a:	74fb      	strb	r3, [r7, #19]
 801287c:	e00f      	b.n	801289e <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 801287e:	7ffb      	ldrb	r3, [r7, #31]
 8012880:	f083 0301 	eor.w	r3, r3, #1
 8012884:	b2db      	uxtb	r3, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	d009      	beq.n	801289e <embeddedCliTokenizeArgs+0x8a>
 801288a:	7cfb      	ldrb	r3, [r7, #19]
 801288c:	4619      	mov	r1, r3
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f00c faac 	bl	801edec <strchr>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 801289a:	2300      	movs	r3, #0
 801289c:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 801289e:	7cfb      	ldrb	r3, [r7, #19]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d109      	bne.n	80128b8 <embeddedCliTokenizeArgs+0xa4>
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	dd0e      	ble.n	80128c8 <embeddedCliTokenizeArgs+0xb4>
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	4413      	add	r3, r2
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d007      	beq.n	80128c8 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	4413      	add	r3, r2
 80128be:	7cfa      	ldrb	r2, [r7, #19]
 80128c0:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	3301      	adds	r3, #1
 80128c6:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	4413      	add	r3, r2
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	74fb      	strb	r3, [r7, #19]
 80128d2:	7cfb      	ldrb	r3, [r7, #19]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1af      	bne.n	8012838 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	4413      	add	r3, r2
 80128de:	2200      	movs	r2, #0
 80128e0:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80128e2:	69bb      	ldr	r3, [r7, #24]
 80128e4:	3301      	adds	r3, #1
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	4413      	add	r3, r2
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
 80128ee:	e000      	b.n	80128f2 <embeddedCliTokenizeArgs+0xde>
        return;
 80128f0:	bf00      	nop
}
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	08024648 	.word	0x08024648

080128fc <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	460b      	mov	r3, r1
 8012906:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8012908:	887b      	ldrh	r3, [r7, #2]
 801290a:	4619      	mov	r1, r3
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 ffd5 	bl	80138bc <getTokenPosition>
 8012912:	4603      	mov	r3, r0
 8012914:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8012916:	89fb      	ldrh	r3, [r7, #14]
 8012918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801291c:	4293      	cmp	r3, r2
 801291e:	d003      	beq.n	8012928 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8012920:	89fb      	ldrh	r3, [r7, #14]
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	4413      	add	r3, r2
 8012926:	e000      	b.n	801292a <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
 801293a:	460b      	mov	r3, r1
 801293c:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 801293e:	887b      	ldrh	r3, [r7, #2]
 8012940:	4619      	mov	r1, r3
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 ffba 	bl	80138bc <getTokenPosition>
 8012948:	4603      	mov	r3, r0
 801294a:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801294c:	89fb      	ldrh	r3, [r7, #14]
 801294e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012952:	4293      	cmp	r3, r2
 8012954:	d003      	beq.n	801295e <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8012956:	89fb      	ldrh	r3, [r7, #14]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	4413      	add	r3, r2
 801295c:	e000      	b.n	8012960 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8012968:	b480      	push	{r7}
 801296a:	b085      	sub	sp, #20
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d003      	beq.n	801297e <embeddedCliGetTokenCount+0x16>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d101      	bne.n	8012982 <embeddedCliGetTokenCount+0x1a>
        return 0;
 801297e:	2300      	movs	r3, #0
 8012980:	e019      	b.n	80129b6 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8012986:	2301      	movs	r3, #1
 8012988:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	4413      	add	r3, r2
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d109      	bne.n	80129aa <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	3301      	adds	r3, #1
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	4413      	add	r3, r2
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d006      	beq.n	80129b2 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80129a4:	897b      	ldrh	r3, [r7, #10]
 80129a6:	3301      	adds	r3, #1
 80129a8:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	3301      	adds	r3, #1
 80129ae:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80129b0:	e7eb      	b.n	801298a <embeddedCliGetTokenCount+0x22>
                break;
 80129b2:	bf00      	nop
    }

    return tokenCount;
 80129b4:	897b      	ldrh	r3, [r7, #10]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3714      	adds	r7, #20
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
	...

080129c4 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b086      	sub	sp, #24
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	460b      	mov	r3, r1
 80129ce:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	899b      	ldrh	r3, [r3, #12]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d05c      	beq.n	8012a98 <navigateHistory+0xd4>
 80129de:	78fb      	ldrb	r3, [r7, #3]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d005      	beq.n	80129f0 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	895a      	ldrh	r2, [r3, #10]
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	899b      	ldrh	r3, [r3, #12]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d053      	beq.n	8012a98 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80129f0:	78fb      	ldrb	r3, [r7, #3]
 80129f2:	f083 0301 	eor.w	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d003      	beq.n	8012a04 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	895b      	ldrh	r3, [r3, #10]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d049      	beq.n	8012a98 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 fd7f 	bl	8013508 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 fdab 	bl	801356c <writeToOutput>

    if (navigateUp)
 8012a16:	78fb      	ldrb	r3, [r7, #3]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d006      	beq.n	8012a2a <navigateHistory+0x66>
        ++impl->history.current;
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	895b      	ldrh	r3, [r3, #10]
 8012a20:	3301      	adds	r3, #1
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	815a      	strh	r2, [r3, #10]
 8012a28:	e005      	b.n	8012a36 <navigateHistory+0x72>
    else
        --impl->history.current;
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	895b      	ldrh	r3, [r3, #10]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	1d1a      	adds	r2, r3, #4
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	895b      	ldrh	r3, [r3, #10]
 8012a3e:	4619      	mov	r1, r3
 8012a40:	4610      	mov	r0, r2
 8012a42:	f000 fec2 	bl	80137ca <historyGet>
 8012a46:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d101      	bne.n	8012a52 <navigateHistory+0x8e>
        item = "";
 8012a4e:	4b14      	ldr	r3, [pc, #80]	@ (8012aa0 <navigateHistory+0xdc>)
 8012a50:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8012a52:	6978      	ldr	r0, [r7, #20]
 8012a54:	f7ed fc24 	bl	80002a0 <strlen>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	69db      	ldr	r3, [r3, #28]
 8012a60:	89fa      	ldrh	r2, [r7, #14]
 8012a62:	6979      	ldr	r1, [r7, #20]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f00c fad0 	bl	801f00a <memcpy>
    impl->cmdBuffer[len] = '\0';
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	69da      	ldr	r2, [r3, #28]
 8012a6e:	89fb      	ldrh	r3, [r7, #14]
 8012a70:	4413      	add	r3, r2
 8012a72:	2200      	movs	r2, #0
 8012a74:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	89fa      	ldrh	r2, [r7, #14]
 8012a7a:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	69db      	ldr	r3, [r3, #28]
 8012a80:	4619      	mov	r1, r3
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fd72 	bl	801356c <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	8c1a      	ldrh	r2, [r3, #32]
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 fc54 	bl	801333e <printLiveAutocompletion>
 8012a96:	e000      	b.n	8012a9a <navigateHistory+0xd6>
        return;
 8012a98:	bf00      	nop
}
 8012a9a:	3718      	adds	r7, #24
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	0802464c 	.word	0x0802464c

08012aa4 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	460b      	mov	r3, r1
 8012aae:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8012ab6:	78fb      	ldrb	r3, [r7, #3]
 8012ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8012aba:	d91b      	bls.n	8012af4 <onEscapedInput+0x50>
 8012abc:	78fb      	ldrb	r3, [r7, #3]
 8012abe:	2b7e      	cmp	r3, #126	@ 0x7e
 8012ac0:	d818      	bhi.n	8012af4 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012ac8:	f023 0308 	bic.w	r3, r3, #8
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8012ad4:	78fb      	ldrb	r3, [r7, #3]
 8012ad6:	2b41      	cmp	r3, #65	@ 0x41
 8012ad8:	d002      	beq.n	8012ae0 <onEscapedInput+0x3c>
 8012ada:	78fb      	ldrb	r3, [r7, #3]
 8012adc:	2b42      	cmp	r3, #66	@ 0x42
 8012ade:	d109      	bne.n	8012af4 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8012ae0:	78fb      	ldrb	r3, [r7, #3]
 8012ae2:	2b41      	cmp	r3, #65	@ 0x41
 8012ae4:	bf0c      	ite	eq
 8012ae6:	2301      	moveq	r3, #1
 8012ae8:	2300      	movne	r3, #0
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	4619      	mov	r1, r3
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7ff ff68 	bl	80129c4 <navigateHistory>
        }
    }
}
 8012af4:	bf00      	nop
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	460b      	mov	r3, r1
 8012b06:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	68db      	ldr	r3, [r3, #12]
 8012b0c:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8c1b      	ldrh	r3, [r3, #32]
 8012b12:	3302      	adds	r3, #2
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	da1a      	bge.n	8012b52 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	69db      	ldr	r3, [r3, #28]
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	8c12      	ldrh	r2, [r2, #32]
 8012b24:	4413      	add	r3, r2
 8012b26:	78fa      	ldrb	r2, [r7, #3]
 8012b28:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	8c1b      	ldrh	r3, [r3, #32]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	69db      	ldr	r3, [r3, #28]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	8c12      	ldrh	r2, [r2, #32]
 8012b3e:	4413      	add	r3, r2
 8012b40:	2200      	movs	r2, #0
 8012b42:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	78fa      	ldrb	r2, [r7, #3]
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	4798      	blx	r3
 8012b50:	e000      	b.n	8012b54 <onCharInput+0x58>
        return;
 8012b52:	bf00      	nop
}
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
	...

08012b5c <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	460b      	mov	r3, r1
 8012b66:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012b74:	2b0d      	cmp	r3, #13
 8012b76:	d102      	bne.n	8012b7e <onControlInput+0x22>
 8012b78:	78fb      	ldrb	r3, [r7, #3]
 8012b7a:	2b0a      	cmp	r3, #10
 8012b7c:	d062      	beq.n	8012c44 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012b84:	2b0a      	cmp	r3, #10
 8012b86:	d102      	bne.n	8012b8e <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012b88:	78fb      	ldrb	r3, [r7, #3]
 8012b8a:	2b0d      	cmp	r3, #13
 8012b8c:	d05a      	beq.n	8012c44 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012b8e:	78fb      	ldrb	r3, [r7, #3]
 8012b90:	2b0d      	cmp	r3, #13
 8012b92:	d002      	beq.n	8012b9a <onControlInput+0x3e>
 8012b94:	78fb      	ldrb	r3, [r7, #3]
 8012b96:	2b0a      	cmp	r3, #10
 8012b98:	d126      	bne.n	8012be8 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 fc2a 	bl	80133f4 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8012c4c <onControlInput+0xf0>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f000 fce0 	bl	801356c <writeToOutput>

        if (impl->cmdSize > 0)
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	8c1b      	ldrh	r3, [r3, #32]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <onControlInput+0x5e>
            parseCommand(cli);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 f84b 	bl	8012c50 <parseCommand>
        impl->cmdSize = 0;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	69db      	ldr	r3, [r3, #28]
 8012bc4:	68fa      	ldr	r2, [r7, #12]
 8012bc6:	8c12      	ldrh	r2, [r2, #32]
 8012bc8:	4413      	add	r3, r2
 8012bca:	2200      	movs	r2, #0
 8012bcc:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	4619      	mov	r1, r3
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f000 fcc3 	bl	801356c <writeToOutput>
 8012be6:	e02e      	b.n	8012c46 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012be8:	78fb      	ldrb	r3, [r7, #3]
 8012bea:	2b08      	cmp	r3, #8
 8012bec:	d002      	beq.n	8012bf4 <onControlInput+0x98>
 8012bee:	78fb      	ldrb	r3, [r7, #3]
 8012bf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8012bf2:	d120      	bne.n	8012c36 <onControlInput+0xda>
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	8c1b      	ldrh	r3, [r3, #32]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d01c      	beq.n	8012c36 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2108      	movs	r1, #8
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2120      	movs	r1, #32
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2108      	movs	r1, #8
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	8c1b      	ldrh	r3, [r3, #32]
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	69db      	ldr	r3, [r3, #28]
 8012c2a:	68fa      	ldr	r2, [r7, #12]
 8012c2c:	8c12      	ldrh	r2, [r2, #32]
 8012c2e:	4413      	add	r3, r2
 8012c30:	2200      	movs	r2, #0
 8012c32:	701a      	strb	r2, [r3, #0]
 8012c34:	e007      	b.n	8012c46 <onControlInput+0xea>
    } else if (c == '\t') {
 8012c36:	78fb      	ldrb	r3, [r7, #3]
 8012c38:	2b09      	cmp	r3, #9
 8012c3a:	d104      	bne.n	8012c46 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 fbd9 	bl	80133f4 <onAutocompleteRequest>
 8012c42:	e000      	b.n	8012c46 <onControlInput+0xea>
        return;
 8012c44:	bf00      	nop
    }

}
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	20000024 	.word	0x20000024

08012c50 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b08f      	sub	sp, #60	@ 0x3c
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c64:	2300      	movs	r3, #0
 8012c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c68:	e00d      	b.n	8012c86 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	69da      	ldr	r2, [r3, #28]
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c70:	4413      	add	r3, r2
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	2b20      	cmp	r3, #32
 8012c76:	d003      	beq.n	8012c80 <parseCommand+0x30>
            isEmpty = false;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012c7e:	e008      	b.n	8012c92 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c82:	3301      	adds	r3, #1
 8012c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	8c1b      	ldrh	r3, [r3, #32]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	dbeb      	blt.n	8012c6a <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012c92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	f040 80dc 	bne.w	8012e54 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	1d1a      	adds	r2, r3, #4
 8012ca0:	69bb      	ldr	r3, [r7, #24]
 8012ca2:	69db      	ldr	r3, [r3, #28]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	4610      	mov	r0, r2
 8012ca8:	f000 fd2b 	bl	8013702 <historyPut>

    char *cmdName = NULL;
 8012cac:	2300      	movs	r3, #0
 8012cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012cba:	2300      	movs	r3, #0
 8012cbc:	623b      	str	r3, [r7, #32]
 8012cbe:	e030      	b.n	8012d22 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	69da      	ldr	r2, [r3, #28]
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012ccc:	7dfb      	ldrb	r3, [r7, #23]
 8012cce:	2b20      	cmp	r3, #32
 8012cd0:	d10f      	bne.n	8012cf2 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d105      	bne.n	8012ce4 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	69da      	ldr	r2, [r3, #28]
 8012cdc:	6a3b      	ldr	r3, [r7, #32]
 8012cde:	4413      	add	r3, r2
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d018      	beq.n	8012d1c <parseCommand+0xcc>
                nameFinished = true;
 8012cea:	2301      	movs	r3, #1
 8012cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012cf0:	e014      	b.n	8012d1c <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d105      	bne.n	8012d04 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	69da      	ldr	r2, [r3, #28]
 8012cfc:	6a3b      	ldr	r3, [r7, #32]
 8012cfe:	4413      	add	r3, r2
 8012d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d02:	e00b      	b.n	8012d1c <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d108      	bne.n	8012d1c <parseCommand+0xcc>
 8012d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d004      	beq.n	8012d1c <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	69da      	ldr	r2, [r3, #28]
 8012d16:	6a3b      	ldr	r3, [r7, #32]
 8012d18:	4413      	add	r3, r2
 8012d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	623b      	str	r3, [r7, #32]
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	8c1b      	ldrh	r3, [r3, #32]
 8012d26:	461a      	mov	r2, r3
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	dbc8      	blt.n	8012cc0 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	69da      	ldr	r2, [r3, #28]
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	8c1b      	ldrh	r3, [r3, #32]
 8012d36:	3301      	adds	r3, #1
 8012d38:	4413      	add	r3, r2
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f000 8089 	beq.w	8012e58 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012d46:	2300      	movs	r3, #0
 8012d48:	61fb      	str	r3, [r7, #28]
 8012d4a:	e054      	b.n	8012df6 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d50:	69fa      	ldr	r2, [r7, #28]
 8012d52:	4613      	mov	r3, r2
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	4413      	add	r3, r2
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	440b      	add	r3, r1
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4619      	mov	r1, r3
 8012d60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d62:	f7ed fa3d 	bl	80001e0 <strcmp>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d141      	bne.n	8012df0 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d70:	69fa      	ldr	r2, [r7, #28]
 8012d72:	4613      	mov	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4413      	add	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	440b      	add	r3, r1
 8012d7c:	691b      	ldr	r3, [r3, #16]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d040      	beq.n	8012e04 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d86:	69fa      	ldr	r2, [r7, #28]
 8012d88:	4613      	mov	r3, r2
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	4413      	add	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	440b      	add	r3, r1
 8012d92:	7a1b      	ldrb	r3, [r3, #8]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d9a:	f7ff fd3b 	bl	8012814 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d9e:	69bb      	ldr	r3, [r7, #24]
 8012da0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012da4:	f043 0310 	orr.w	r3, r3, #16
 8012da8:	b2da      	uxtb	r2, r3
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012db4:	69fa      	ldr	r2, [r7, #28]
 8012db6:	4613      	mov	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4413      	add	r3, r2
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	440b      	add	r3, r1
 8012dc0:	691c      	ldr	r4, [r3, #16]
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012dc6:	69fa      	ldr	r2, [r7, #28]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	009b      	lsls	r3, r3, #2
 8012dcc:	4413      	add	r3, r2
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	440b      	add	r3, r1
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012de2:	f023 0310 	bic.w	r3, r3, #16
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012dee:	e034      	b.n	8012e5a <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	3301      	adds	r3, #1
 8012df4:	61fb      	str	r3, [r7, #28]
 8012df6:	69bb      	ldr	r3, [r7, #24]
 8012df8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	dba4      	blt.n	8012d4c <parseCommand+0xfc>
 8012e02:	e000      	b.n	8012e06 <parseCommand+0x1b6>
                break;
 8012e04:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d01d      	beq.n	8012e4a <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e10:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e14:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012e1c:	f043 0310 	orr.w	r3, r3, #16
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	f107 020c 	add.w	r2, r7, #12
 8012e30:	4611      	mov	r1, r2
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012e3c:	f023 0310 	bic.w	r3, r3, #16
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012e48:	e007      	b.n	8012e5a <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 f997 	bl	8013180 <onUnknownCommand>
 8012e52:	e002      	b.n	8012e5a <parseCommand+0x20a>
        return;
 8012e54:	bf00      	nop
 8012e56:	e000      	b.n	8012e5a <parseCommand+0x20a>
        return;
 8012e58:	bf00      	nop
    }
}
 8012e5a:	373c      	adds	r7, #60	@ 0x3c
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd90      	pop	{r4, r7, pc}

08012e60 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012e60:	b5b0      	push	{r4, r5, r7, lr}
 8012e62:	b08a      	sub	sp, #40	@ 0x28
 8012e64:	af02      	add	r7, sp, #8
 8012e66:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012e68:	4b0c      	ldr	r3, [pc, #48]	@ (8012e9c <initInternalBindings+0x3c>)
 8012e6a:	f107 040c 	add.w	r4, r7, #12
 8012e6e:	461d      	mov	r5, r3
 8012e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012e78:	466a      	mov	r2, sp
 8012e7a:	f107 0318 	add.w	r3, r7, #24
 8012e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e82:	e882 0003 	stmia.w	r2, {r0, r1}
 8012e86:	f107 030c 	add.w	r3, r7, #12
 8012e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff fc4c 	bl	801272a <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012e92:	bf00      	nop
 8012e94:	3720      	adds	r7, #32
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bdb0      	pop	{r4, r5, r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	08024670 	.word	0x08024670

08012ea0 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08c      	sub	sp, #48	@ 0x30
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d10a      	bne.n	8012ed0 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012eba:	49a5      	ldr	r1, [pc, #660]	@ (8013150 <onHelp+0x2b0>)
 8012ebc:	68f8      	ldr	r0, [r7, #12]
 8012ebe:	f000 fb55 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ec2:	4ba4      	ldr	r3, [pc, #656]	@ (8013154 <onHelp+0x2b4>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f000 fb4f 	bl	801356c <writeToOutput>
        return;
 8012ece:	e13b      	b.n	8013148 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012ed0:	4ba1      	ldr	r3, [pc, #644]	@ (8013158 <onHelp+0x2b8>)
 8012ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d03d      	beq.n	8012f56 <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012eda:	4b9f      	ldr	r3, [pc, #636]	@ (8013158 <onHelp+0x2b8>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012ee2:	4b9c      	ldr	r3, [pc, #624]	@ (8013154 <onHelp+0x2b4>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 fb3f 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eee:	4b99      	ldr	r3, [pc, #612]	@ (8013154 <onHelp+0x2b4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f000 fb39 	bl	801356c <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012efa:	4998      	ldr	r1, [pc, #608]	@ (801315c <onHelp+0x2bc>)
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f000 fb35 	bl	801356c <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012f02:	4b94      	ldr	r3, [pc, #592]	@ (8013154 <onHelp+0x2b4>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4619      	mov	r1, r3
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 fb2f 	bl	801356c <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012f0e:	4994      	ldr	r1, [pc, #592]	@ (8013160 <onHelp+0x2c0>)
 8012f10:	68f8      	ldr	r0, [r7, #12]
 8012f12:	f000 fb2b 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f16:	4b8f      	ldr	r3, [pc, #572]	@ (8013154 <onHelp+0x2b4>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f000 fb25 	bl	801356c <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012f22:	4990      	ldr	r1, [pc, #576]	@ (8013164 <onHelp+0x2c4>)
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f000 fb21 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8013154 <onHelp+0x2b4>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fb1b 	bl	801356c <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012f36:	498c      	ldr	r1, [pc, #560]	@ (8013168 <onHelp+0x2c8>)
 8012f38:	68f8      	ldr	r0, [r7, #12]
 8012f3a:	f000 fb17 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f3e:	4b85      	ldr	r3, [pc, #532]	@ (8013154 <onHelp+0x2b4>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	4619      	mov	r1, r3
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fb11 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f4a:	4b82      	ldr	r3, [pc, #520]	@ (8013154 <onHelp+0x2b4>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4619      	mov	r1, r3
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f000 fb0b 	bl	801356c <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012f56:	68b8      	ldr	r0, [r7, #8]
 8012f58:	f7ff fd06 	bl	8012968 <embeddedCliGetTokenCount>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012f60:	8b7b      	ldrh	r3, [r7, #26]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d176      	bne.n	8013054 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f66:	2300      	movs	r3, #0
 8012f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f6a:	e03c      	b.n	8012fe6 <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012f6c:	497f      	ldr	r1, [pc, #508]	@ (801316c <onHelp+0x2cc>)
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f000 fafc 	bl	801356c <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	009b      	lsls	r3, r3, #2
 8012f7e:	4413      	add	r3, r2
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	440b      	add	r3, r1
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4619      	mov	r1, r3
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f000 faef 	bl	801356c <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012f8e:	4b71      	ldr	r3, [pc, #452]	@ (8013154 <onHelp+0x2b4>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f000 fae9 	bl	801356c <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	4413      	add	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	440b      	add	r3, r1
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d017      	beq.n	8012fe0 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2109      	movs	r1, #9
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	4413      	add	r3, r2
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	440b      	add	r3, r1
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	68f8      	ldr	r0, [r7, #12]
 8012fd0:	f000 facc 	bl	801356c <writeToOutput>
                writeToOutput(cli, lineBreak);
 8012fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8013154 <onHelp+0x2b4>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4619      	mov	r1, r3
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f000 fac6 	bl	801356c <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012fea:	461a      	mov	r2, r3
 8012fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	dbbc      	blt.n	8012f6c <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8012ff2:	4b58      	ldr	r3, [pc, #352]	@ (8013154 <onHelp+0x2b4>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f000 fab7 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ffe:	4b55      	ldr	r3, [pc, #340]	@ (8013154 <onHelp+0x2b4>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	4619      	mov	r1, r3
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	f000 fab1 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 801300a:	4b52      	ldr	r3, [pc, #328]	@ (8013154 <onHelp+0x2b4>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4619      	mov	r1, r3
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f000 faab 	bl	801356c <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8013016:	4956      	ldr	r1, [pc, #344]	@ (8013170 <onHelp+0x2d0>)
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	f000 faa7 	bl	801356c <writeToOutput>
		writeToOutput(cli, lineBreak);
 801301e:	4b4d      	ldr	r3, [pc, #308]	@ (8013154 <onHelp+0x2b4>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	4619      	mov	r1, r3
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	f000 faa1 	bl	801356c <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 801302a:	4952      	ldr	r1, [pc, #328]	@ (8013174 <onHelp+0x2d4>)
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f000 fa9d 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013032:	4b48      	ldr	r3, [pc, #288]	@ (8013154 <onHelp+0x2b4>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4619      	mov	r1, r3
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f000 fa97 	bl	801356c <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 801303e:	494e      	ldr	r1, [pc, #312]	@ (8013178 <onHelp+0x2d8>)
 8013040:	68f8      	ldr	r0, [r7, #12]
 8013042:	f000 fa93 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013046:	4b43      	ldr	r3, [pc, #268]	@ (8013154 <onHelp+0x2b4>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4619      	mov	r1, r3
 801304c:	68f8      	ldr	r0, [r7, #12]
 801304e:	f000 fa8d 	bl	801356c <writeToOutput>
 8013052:	e079      	b.n	8013148 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8013054:	8b7b      	ldrh	r3, [r7, #26]
 8013056:	2b01      	cmp	r3, #1
 8013058:	d16c      	bne.n	8013134 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 801305a:	2300      	movs	r3, #0
 801305c:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 801305e:	2101      	movs	r1, #1
 8013060:	68b8      	ldr	r0, [r7, #8]
 8013062:	f7ff fc4b 	bl	80128fc <embeddedCliGetToken>
 8013066:	6178      	str	r0, [r7, #20]
        bool found = false;
 8013068:	2300      	movs	r3, #0
 801306a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801306e:	2300      	movs	r3, #0
 8013070:	623b      	str	r3, [r7, #32]
 8013072:	e020      	b.n	80130b6 <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013078:	6a3a      	ldr	r2, [r7, #32]
 801307a:	4613      	mov	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	4413      	add	r3, r2
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	440b      	add	r3, r1
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	6979      	ldr	r1, [r7, #20]
 8013088:	4618      	mov	r0, r3
 801308a:	f7ed f8a9 	bl	80001e0 <strcmp>
 801308e:	4603      	mov	r3, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	d10d      	bne.n	80130b0 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013098:	6a3a      	ldr	r2, [r7, #32]
 801309a:	4613      	mov	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	4413      	add	r3, r2
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	440b      	add	r3, r1
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 80130a8:	2301      	movs	r3, #1
 80130aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80130ae:	e008      	b.n	80130c2 <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80130b0:	6a3b      	ldr	r3, [r7, #32]
 80130b2:	3301      	adds	r3, #1
 80130b4:	623b      	str	r3, [r7, #32]
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80130ba:	461a      	mov	r2, r3
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	4293      	cmp	r3, r2
 80130c0:	dbd8      	blt.n	8013074 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 80130c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d020      	beq.n	801310c <onHelp+0x26c>
 80130ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d01d      	beq.n	801310c <onHelp+0x26c>
            writeToOutput(cli, " * ");
 80130d0:	4926      	ldr	r1, [pc, #152]	@ (801316c <onHelp+0x2cc>)
 80130d2:	68f8      	ldr	r0, [r7, #12]
 80130d4:	f000 fa4a 	bl	801356c <writeToOutput>
            writeToOutput(cli, cmdName);
 80130d8:	6979      	ldr	r1, [r7, #20]
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 fa46 	bl	801356c <writeToOutput>
            writeToOutput(cli, lineBreak);
 80130e0:	4b1c      	ldr	r3, [pc, #112]	@ (8013154 <onHelp+0x2b4>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4619      	mov	r1, r3
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f000 fa40 	bl	801356c <writeToOutput>
            cli->writeChar(cli, '\t');
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2109      	movs	r1, #9
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 80130f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f000 fa37 	bl	801356c <writeToOutput>
            writeToOutput(cli, lineBreak);
 80130fe:	4b15      	ldr	r3, [pc, #84]	@ (8013154 <onHelp+0x2b4>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4619      	mov	r1, r3
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f000 fa31 	bl	801356c <writeToOutput>
 801310a:	e01d      	b.n	8013148 <onHelp+0x2a8>
        } else if (found) {
 801310c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00a      	beq.n	801312a <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 8013114:	490e      	ldr	r1, [pc, #56]	@ (8013150 <onHelp+0x2b0>)
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f000 fa28 	bl	801356c <writeToOutput>
            writeToOutput(cli, lineBreak);
 801311c:	4b0d      	ldr	r3, [pc, #52]	@ (8013154 <onHelp+0x2b4>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4619      	mov	r1, r3
 8013122:	68f8      	ldr	r0, [r7, #12]
 8013124:	f000 fa22 	bl	801356c <writeToOutput>
 8013128:	e00e      	b.n	8013148 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 801312a:	6979      	ldr	r1, [r7, #20]
 801312c:	68f8      	ldr	r0, [r7, #12]
 801312e:	f000 f827 	bl	8013180 <onUnknownCommand>
 8013132:	e009      	b.n	8013148 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8013134:	4911      	ldr	r1, [pc, #68]	@ (801317c <onHelp+0x2dc>)
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f000 fa18 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 801313c:	4b05      	ldr	r3, [pc, #20]	@ (8013154 <onHelp+0x2b4>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4619      	mov	r1, r3
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f000 fa12 	bl	801356c <writeToOutput>
    }
}
 8013148:	3730      	adds	r7, #48	@ 0x30
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
 801314e:	bf00      	nop
 8013150:	08024684 	.word	0x08024684
 8013154:	20000024 	.word	0x20000024
 8013158:	20001530 	.word	0x20001530
 801315c:	0802469c 	.word	0x0802469c
 8013160:	080246c4 	.word	0x080246c4
 8013164:	080246ec 	.word	0x080246ec
 8013168:	08024700 	.word	0x08024700
 801316c:	0802471c 	.word	0x0802471c
 8013170:	08024720 	.word	0x08024720
 8013174:	08024740 	.word	0x08024740
 8013178:	08024764 	.word	0x08024764
 801317c:	08024778 	.word	0x08024778

08013180 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 801318a:	490b      	ldr	r1, [pc, #44]	@ (80131b8 <onUnknownCommand+0x38>)
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 f9ed 	bl	801356c <writeToOutput>
    writeToOutput(cli, name);
 8013192:	6839      	ldr	r1, [r7, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f000 f9e9 	bl	801356c <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 801319a:	4908      	ldr	r1, [pc, #32]	@ (80131bc <onUnknownCommand+0x3c>)
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 f9e5 	bl	801356c <writeToOutput>
    writeToOutput(cli, lineBreak);
 80131a2:	4b07      	ldr	r3, [pc, #28]	@ (80131c0 <onUnknownCommand+0x40>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4619      	mov	r1, r3
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 f9df 	bl	801356c <writeToOutput>
}
 80131ae:	bf00      	nop
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	080247a8 	.word	0x080247a8
 80131bc:	080247bc 	.word	0x080247bc
 80131c0:	20000024 	.word	0x20000024

080131c4 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08e      	sub	sp, #56	@ 0x38
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 80131d0:	2300      	movs	r3, #0
 80131d2:	613b      	str	r3, [r7, #16]
 80131d4:	2300      	movs	r3, #0
 80131d6:	82bb      	strh	r3, [r7, #20]
 80131d8:	2300      	movs	r3, #0
 80131da:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ed f85f 	bl	80002a0 <strlen>
 80131e2:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <getAutocompletedCommand+0x34>
 80131f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d108      	bne.n	801320a <getAutocompletedCommand+0x46>
        return cmd;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	461a      	mov	r2, r3
 80131fc:	f107 0310 	add.w	r3, r7, #16
 8013200:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013204:	e882 0003 	stmia.w	r2, {r0, r1}
 8013208:	e095      	b.n	8013336 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 801320a:	2300      	movs	r3, #0
 801320c:	637b      	str	r3, [r7, #52]	@ 0x34
 801320e:	e083      	b.n	8013318 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013216:	4613      	mov	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4413      	add	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	440b      	add	r3, r1
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8013224:	69f8      	ldr	r0, [r7, #28]
 8013226:	f7ed f83b 	bl	80002a0 <strlen>
 801322a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013232:	4413      	add	r3, r2
 8013234:	781a      	ldrb	r2, [r3, #0]
 8013236:	6a3b      	ldr	r3, [r7, #32]
 8013238:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801323c:	440b      	add	r3, r1
 801323e:	f022 0201 	bic.w	r2, r2, #1
 8013242:	b2d2      	uxtb	r2, r2
 8013244:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8013246:	69ba      	ldr	r2, [r7, #24]
 8013248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324a:	429a      	cmp	r2, r3
 801324c:	d35e      	bcc.n	801330c <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 801324e:	2301      	movs	r3, #1
 8013250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8013254:	2300      	movs	r3, #0
 8013256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013258:	e010      	b.n	801327c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801325e:	4413      	add	r3, r2
 8013260:	781a      	ldrb	r2, [r3, #0]
 8013262:	69f9      	ldr	r1, [r7, #28]
 8013264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013266:	440b      	add	r3, r1
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	429a      	cmp	r2, r3
 801326c:	d003      	beq.n	8013276 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 801326e:	2300      	movs	r3, #0
 8013270:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8013274:	e006      	b.n	8013284 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8013276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013278:	3301      	adds	r3, #1
 801327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801327c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013280:	429a      	cmp	r2, r3
 8013282:	d3ea      	bcc.n	801325a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8013284:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013288:	f083 0301 	eor.w	r3, r3, #1
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b00      	cmp	r3, #0
 8013290:	d13e      	bne.n	8013310 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8013292:	6a3b      	ldr	r3, [r7, #32]
 8013294:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013298:	4413      	add	r3, r2
 801329a:	781a      	ldrb	r2, [r3, #0]
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80132a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132a2:	440b      	add	r3, r1
 80132a4:	f042 0201 	orr.w	r2, r2, #1
 80132a8:	b2d2      	uxtb	r2, r2
 80132aa:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80132ac:	8afb      	ldrh	r3, [r7, #22]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d004      	beq.n	80132bc <getAutocompletedCommand+0xf8>
 80132b2:	8abb      	ldrh	r3, [r7, #20]
 80132b4:	461a      	mov	r2, r3
 80132b6:	69bb      	ldr	r3, [r7, #24]
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d202      	bcs.n	80132c2 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 80132c2:	8afb      	ldrh	r3, [r7, #22]
 80132c4:	3301      	adds	r3, #1
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 80132ca:	8afb      	ldrh	r3, [r7, #22]
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d102      	bne.n	80132d6 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	613b      	str	r3, [r7, #16]
            continue;
 80132d4:	e01d      	b.n	8013312 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	8c1b      	ldrh	r3, [r3, #32]
 80132da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80132dc:	e010      	b.n	8013300 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 80132de:	693a      	ldr	r2, [r7, #16]
 80132e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e2:	4413      	add	r3, r2
 80132e4:	781a      	ldrb	r2, [r3, #0]
 80132e6:	69f9      	ldr	r1, [r7, #28]
 80132e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ea:	440b      	add	r3, r1
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d003      	beq.n	80132fa <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 80132f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	82bb      	strh	r3, [r7, #20]
                break;
 80132f8:	e00b      	b.n	8013312 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80132fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132fc:	3301      	adds	r3, #1
 80132fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013300:	8abb      	ldrh	r3, [r7, #20]
 8013302:	461a      	mov	r2, r3
 8013304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013306:	4293      	cmp	r3, r2
 8013308:	d3e9      	bcc.n	80132de <getAutocompletedCommand+0x11a>
 801330a:	e002      	b.n	8013312 <getAutocompletedCommand+0x14e>
            continue;
 801330c:	bf00      	nop
 801330e:	e000      	b.n	8013312 <getAutocompletedCommand+0x14e>
            continue;
 8013310:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013314:	3301      	adds	r3, #1
 8013316:	637b      	str	r3, [r7, #52]	@ 0x34
 8013318:	6a3b      	ldr	r3, [r7, #32]
 801331a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801331c:	461a      	mov	r2, r3
 801331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013320:	4293      	cmp	r3, r2
 8013322:	f6ff af75 	blt.w	8013210 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	461a      	mov	r2, r3
 801332a:	f107 0310 	add.w	r3, r7, #16
 801332e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013332:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8013336:	68f8      	ldr	r0, [r7, #12]
 8013338:	3738      	adds	r7, #56	@ 0x38
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 801333e:	b580      	push	{r7, lr}
 8013340:	b088      	sub	sp, #32
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013352:	f003 0320 	and.w	r3, r3, #32
 8013356:	2b00      	cmp	r3, #0
 8013358:	d048      	beq.n	80133ec <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	69da      	ldr	r2, [r3, #28]
 801335e:	f107 030c 	add.w	r3, r7, #12
 8013362:	6879      	ldr	r1, [r7, #4]
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff ff2d 	bl	80131c4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 801336a:	8a7b      	ldrh	r3, [r7, #18]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d102      	bne.n	8013376 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	8c1b      	ldrh	r3, [r3, #32]
 8013374:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	8c1b      	ldrh	r3, [r3, #32]
 801337a:	61fb      	str	r3, [r7, #28]
 801337c:	e00b      	b.n	8013396 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68f9      	ldr	r1, [r7, #12]
 8013384:	69fa      	ldr	r2, [r7, #28]
 8013386:	440a      	add	r2, r1
 8013388:	7812      	ldrb	r2, [r2, #0]
 801338a:	4611      	mov	r1, r2
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	3301      	adds	r3, #1
 8013394:	61fb      	str	r3, [r7, #28]
 8013396:	8a3b      	ldrh	r3, [r7, #16]
 8013398:	461a      	mov	r2, r3
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	4293      	cmp	r3, r2
 801339e:	d3ee      	bcc.n	801337e <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80133a0:	8a3b      	ldrh	r3, [r7, #16]
 80133a2:	61bb      	str	r3, [r7, #24]
 80133a4:	e007      	b.n	80133b6 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2120      	movs	r1, #32
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	3301      	adds	r3, #1
 80133b4:	61bb      	str	r3, [r7, #24]
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80133ba:	461a      	mov	r2, r3
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	4293      	cmp	r3, r2
 80133c0:	d3f1      	bcc.n	80133a6 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 80133c2:	8a3a      	ldrh	r2, [r7, #16]
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	210d      	movs	r1, #13
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4619      	mov	r1, r3
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f000 f8c7 	bl	801356c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	69db      	ldr	r3, [r3, #28]
 80133e2:	4619      	mov	r1, r3
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 f8c1 	bl	801356c <writeToOutput>
 80133ea:	e000      	b.n	80133ee <printLiveAutocompletion+0xb0>
        return;
 80133ec:	bf00      	nop
}
 80133ee:	3720      	adds	r7, #32
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}

080133f4 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b088      	sub	sp, #32
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	69da      	ldr	r2, [r3, #28]
 8013406:	f107 030c 	add.w	r3, r7, #12
 801340a:	6879      	ldr	r1, [r7, #4]
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff fed9 	bl	80131c4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8013412:	8a7b      	ldrh	r3, [r7, #18]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d071      	beq.n	80134fc <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8013418:	8a7b      	ldrh	r3, [r7, #18]
 801341a:	2b01      	cmp	r3, #1
 801341c:	d004      	beq.n	8013428 <onAutocompleteRequest+0x34>
 801341e:	8a3a      	ldrh	r2, [r7, #16]
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	8c1b      	ldrh	r3, [r3, #32]
 8013424:	429a      	cmp	r2, r3
 8013426:	d92a      	bls.n	801347e <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	69db      	ldr	r3, [r3, #28]
 801342c:	68f9      	ldr	r1, [r7, #12]
 801342e:	8a3a      	ldrh	r2, [r7, #16]
 8013430:	4618      	mov	r0, r3
 8013432:	f00b fdea 	bl	801f00a <memcpy>
        if (cmd.candidateCount == 1) {
 8013436:	8a7b      	ldrh	r3, [r7, #18]
 8013438:	2b01      	cmp	r3, #1
 801343a:	d109      	bne.n	8013450 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 801343c:	69bb      	ldr	r3, [r7, #24]
 801343e:	69db      	ldr	r3, [r3, #28]
 8013440:	8a3a      	ldrh	r2, [r7, #16]
 8013442:	4413      	add	r3, r2
 8013444:	2220      	movs	r2, #32
 8013446:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8013448:	8a3b      	ldrh	r3, [r7, #16]
 801344a:	3301      	adds	r3, #1
 801344c:	b29b      	uxth	r3, r3
 801344e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	69db      	ldr	r3, [r3, #28]
 8013454:	8a3a      	ldrh	r2, [r7, #16]
 8013456:	4413      	add	r3, r2
 8013458:	2200      	movs	r2, #0
 801345a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	69db      	ldr	r3, [r3, #28]
 8013460:	69ba      	ldr	r2, [r7, #24]
 8013462:	8c12      	ldrh	r2, [r2, #32]
 8013464:	4413      	add	r3, r2
 8013466:	4619      	mov	r1, r3
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 f87f 	bl	801356c <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 801346e:	8a3a      	ldrh	r2, [r7, #16]
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	8c1a      	ldrh	r2, [r3, #32]
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 801347c:	e03f      	b.n	80134fe <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f842 	bl	8013508 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013484:	2300      	movs	r3, #0
 8013486:	61fb      	str	r3, [r7, #28]
 8013488:	e021      	b.n	80134ce <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	4413      	add	r3, r2
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	f003 0301 	and.w	r3, r3, #1
 8013498:	2b00      	cmp	r3, #0
 801349a:	d014      	beq.n	80134c6 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80134a0:	69fa      	ldr	r2, [r7, #28]
 80134a2:	4613      	mov	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	4413      	add	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	440b      	add	r3, r1
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80134b0:	6979      	ldr	r1, [r7, #20]
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f000 f85a 	bl	801356c <writeToOutput>
        writeToOutput(cli, lineBreak);
 80134b8:	4b12      	ldr	r3, [pc, #72]	@ (8013504 <onAutocompleteRequest+0x110>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4619      	mov	r1, r3
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f000 f854 	bl	801356c <writeToOutput>
 80134c4:	e000      	b.n	80134c8 <onAutocompleteRequest+0xd4>
            continue;
 80134c6:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	3301      	adds	r3, #1
 80134cc:	61fb      	str	r3, [r7, #28]
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80134d2:	461a      	mov	r2, r3
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	4293      	cmp	r3, r2
 80134d8:	dbd7      	blt.n	801348a <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4619      	mov	r1, r3
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f000 f843 	bl	801356c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	69db      	ldr	r3, [r3, #28]
 80134ea:	4619      	mov	r1, r3
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f000 f83d 	bl	801356c <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	8c1a      	ldrh	r2, [r3, #32]
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80134fa:	e000      	b.n	80134fe <onAutocompleteRequest+0x10a>
        return;
 80134fc:	bf00      	nop
}
 80134fe:	3720      	adds	r7, #32
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	20000024 	.word	0x20000024

08013508 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8013508:	b590      	push	{r4, r7, lr}
 801350a:	b087      	sub	sp, #28
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	68db      	ldr	r3, [r3, #12]
 8013514:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801351a:	461c      	mov	r4, r3
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	4618      	mov	r0, r3
 8013522:	f7ec febd 	bl	80002a0 <strlen>
 8013526:	4603      	mov	r3, r0
 8013528:	4423      	add	r3, r4
 801352a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	210d      	movs	r1, #13
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8013536:	2300      	movs	r3, #0
 8013538:	617b      	str	r3, [r7, #20]
 801353a:	e007      	b.n	801354c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2120      	movs	r1, #32
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	3301      	adds	r3, #1
 801354a:	617b      	str	r3, [r7, #20]
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	429a      	cmp	r2, r3
 8013552:	d3f3      	bcc.n	801353c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	210d      	movs	r1, #13
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	4798      	blx	r3
    impl->inputLineLength = 0;
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	2200      	movs	r2, #0
 8013562:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8013564:	bf00      	nop
 8013566:	371c      	adds	r7, #28
 8013568:	46bd      	mov	sp, r7
 801356a:	bd90      	pop	{r4, r7, pc}

0801356c <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013576:	6838      	ldr	r0, [r7, #0]
 8013578:	f7ec fe92 	bl	80002a0 <strlen>
 801357c:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801357e:	2300      	movs	r3, #0
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	e00b      	b.n	801359c <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	6839      	ldr	r1, [r7, #0]
 801358a:	68fa      	ldr	r2, [r7, #12]
 801358c:	440a      	add	r2, r1
 801358e:	7812      	ldrb	r2, [r2, #0]
 8013590:	4611      	mov	r1, r2
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	3301      	adds	r3, #1
 801359a:	60fb      	str	r3, [r7, #12]
 801359c:	68fa      	ldr	r2, [r7, #12]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d3ef      	bcc.n	8013584 <writeToOutput+0x18>
    }
}
 80135a4:	bf00      	nop
 80135a6:	bf00      	nop
 80135a8:	3710      	adds	r7, #16
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <isControlChar>:

static bool isControlChar(char c) {
 80135ae:	b480      	push	{r7}
 80135b0:	b083      	sub	sp, #12
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	4603      	mov	r3, r0
 80135b6:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80135b8:	79fb      	ldrb	r3, [r7, #7]
 80135ba:	2b0d      	cmp	r3, #13
 80135bc:	d00b      	beq.n	80135d6 <isControlChar+0x28>
 80135be:	79fb      	ldrb	r3, [r7, #7]
 80135c0:	2b0a      	cmp	r3, #10
 80135c2:	d008      	beq.n	80135d6 <isControlChar+0x28>
 80135c4:	79fb      	ldrb	r3, [r7, #7]
 80135c6:	2b08      	cmp	r3, #8
 80135c8:	d005      	beq.n	80135d6 <isControlChar+0x28>
 80135ca:	79fb      	ldrb	r3, [r7, #7]
 80135cc:	2b09      	cmp	r3, #9
 80135ce:	d002      	beq.n	80135d6 <isControlChar+0x28>
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80135d4:	d101      	bne.n	80135da <isControlChar+0x2c>
 80135d6:	2301      	movs	r3, #1
 80135d8:	e000      	b.n	80135dc <isControlChar+0x2e>
 80135da:	2300      	movs	r3, #0
 80135dc:	f003 0301 	and.w	r3, r3, #1
 80135e0:	b2db      	uxtb	r3, r3
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	370c      	adds	r7, #12
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80135ee:	b480      	push	{r7}
 80135f0:	b083      	sub	sp, #12
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	4603      	mov	r3, r0
 80135f6:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	2b1f      	cmp	r3, #31
 80135fc:	d904      	bls.n	8013608 <isDisplayableChar+0x1a>
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	2b7e      	cmp	r3, #126	@ 0x7e
 8013602:	d801      	bhi.n	8013608 <isDisplayableChar+0x1a>
 8013604:	2301      	movs	r3, #1
 8013606:	e000      	b.n	801360a <isDisplayableChar+0x1c>
 8013608:	2300      	movs	r3, #0
 801360a:	f003 0301 	and.w	r3, r3, #1
 801360e:	b2db      	uxtb	r3, r3
}
 8013610:	4618      	mov	r0, r3
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	88da      	ldrh	r2, [r3, #6]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	889b      	ldrh	r3, [r3, #4]
 801362c:	429a      	cmp	r2, r3
 801362e:	d306      	bcc.n	801363e <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	88da      	ldrh	r2, [r3, #6]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	889b      	ldrh	r3, [r3, #4]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	b29b      	uxth	r3, r3
 801363c:	e009      	b.n	8013652 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	891a      	ldrh	r2, [r3, #8]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	889b      	ldrh	r3, [r3, #4]
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	b29a      	uxth	r2, r3
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	88db      	ldrh	r3, [r3, #6]
 801364e:	4413      	add	r3, r2
 8013650:	b29b      	uxth	r3, r3
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr

0801365e <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 801365e:	b480      	push	{r7}
 8013660:	b085      	sub	sp, #20
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8013666:	2300      	movs	r3, #0
 8013668:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	889a      	ldrh	r2, [r3, #4]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	88db      	ldrh	r3, [r3, #6]
 8013672:	429a      	cmp	r2, r3
 8013674:	d014      	beq.n	80136a0 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	8892      	ldrh	r2, [r2, #4]
 801367e:	4413      	add	r3, r2
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	889b      	ldrh	r3, [r3, #4]
 8013688:	3301      	adds	r3, #1
 801368a:	b29b      	uxth	r3, r3
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	8912      	ldrh	r2, [r2, #8]
 8013690:	fbb3 f1f2 	udiv	r1, r3, r2
 8013694:	fb01 f202 	mul.w	r2, r1, r2
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	b29a      	uxth	r2, r3
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80136a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3714      	adds	r7, #20
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr

080136ae <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80136ae:	b480      	push	{r7}
 80136b0:	b085      	sub	sp, #20
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
 80136b6:	460b      	mov	r3, r1
 80136b8:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	88db      	ldrh	r3, [r3, #6]
 80136be:	3301      	adds	r3, #1
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	8912      	ldrh	r2, [r2, #8]
 80136c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80136ca:	fb01 f202 	mul.w	r2, r1, r2
 80136ce:	1a9b      	subs	r3, r3, r2
 80136d0:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	889b      	ldrh	r3, [r3, #4]
 80136d6:	89fa      	ldrh	r2, [r7, #14]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d00b      	beq.n	80136f4 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	88d2      	ldrh	r2, [r2, #6]
 80136e4:	4413      	add	r3, r2
 80136e6:	78fa      	ldrb	r2, [r7, #3]
 80136e8:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	89fa      	ldrh	r2, [r7, #14]
 80136ee:	80da      	strh	r2, [r3, #6]
        return true;
 80136f0:	2301      	movs	r3, #1
 80136f2:	e000      	b.n	80136f6 <fifoBufPush+0x48>
    }
    return false;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3714      	adds	r7, #20
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8013702:	b580      	push	{r7, lr}
 8013704:	b088      	sub	sp, #32
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
 801370a:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 801370c:	6838      	ldr	r0, [r7, #0]
 801370e:	f7ec fdc7 	bl	80002a0 <strlen>
 8013712:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	889b      	ldrh	r3, [r3, #4]
 8013718:	461a      	mov	r2, r3
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	3301      	adds	r3, #1
 801371e:	429a      	cmp	r2, r3
 8013720:	d201      	bcs.n	8013726 <historyPut+0x24>
        return false;
 8013722:	2300      	movs	r3, #0
 8013724:	e04d      	b.n	80137c2 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 f86a 	bl	8013802 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 801372e:	e024      	b.n	801377a <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	891b      	ldrh	r3, [r3, #8]
 8013734:	4619      	mov	r1, r3
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f000 f847 	bl	80137ca <historyGet>
 801373c:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 801373e:	6978      	ldr	r0, [r7, #20]
 8013740:	f7ec fdae 	bl	80002a0 <strlen>
 8013744:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	697a      	ldr	r2, [r7, #20]
 801374c:	1ad3      	subs	r3, r2, r3
 801374e:	461a      	mov	r2, r3
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	4413      	add	r3, r2
 8013754:	3301      	adds	r3, #1
 8013756:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	889b      	ldrh	r3, [r3, #4]
 801375c:	461a      	mov	r2, r3
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	3301      	adds	r3, #1
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	429a      	cmp	r2, r3
 801376c:	d20a      	bcs.n	8013784 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	891b      	ldrh	r3, [r3, #8]
 8013772:	3b01      	subs	r3, #1
 8013774:	b29a      	uxth	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	891b      	ldrh	r3, [r3, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1d6      	bne.n	8013730 <historyPut+0x2e>
 8013782:	e000      	b.n	8013786 <historyPut+0x84>
            break;
 8013784:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	891b      	ldrh	r3, [r3, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d00a      	beq.n	80137a4 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	3301      	adds	r3, #1
 8013796:	18d0      	adds	r0, r2, r3
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	69fa      	ldr	r2, [r7, #28]
 801379e:	4619      	mov	r1, r3
 80137a0:	f00b fb02 	bl	801eda8 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	3301      	adds	r3, #1
 80137ac:	461a      	mov	r2, r3
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	f00b fc2b 	bl	801f00a <memcpy>
    ++history->itemsCount;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	891b      	ldrh	r3, [r3, #8]
 80137b8:	3301      	adds	r3, #1
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	811a      	strh	r2, [r3, #8]

    return true;
 80137c0:	2301      	movs	r3, #1
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3720      	adds	r7, #32
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}

080137ca <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80137ca:	b580      	push	{r7, lr}
 80137cc:	b082      	sub	sp, #8
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
 80137d2:	460b      	mov	r3, r1
 80137d4:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80137d6:	887b      	ldrh	r3, [r7, #2]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d004      	beq.n	80137e6 <historyGet+0x1c>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	891b      	ldrh	r3, [r3, #8]
 80137e0:	887a      	ldrh	r2, [r7, #2]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d901      	bls.n	80137ea <historyGet+0x20>
        return NULL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	e007      	b.n	80137fa <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	887a      	ldrh	r2, [r7, #2]
 80137f0:	4611      	mov	r1, r2
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7ff f882 	bl	80128fc <embeddedCliGetToken>
 80137f8:	4603      	mov	r3, r0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8013802:	b580      	push	{r7, lr}
 8013804:	b086      	sub	sp, #24
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d04c      	beq.n	80138ac <historyRemove+0xaa>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d048      	beq.n	80138ac <historyRemove+0xaa>
        return;
    char *item = NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801381e:	2301      	movs	r3, #1
 8013820:	827b      	strh	r3, [r7, #18]
 8013822:	e013      	b.n	801384c <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	8a7a      	ldrh	r2, [r7, #18]
 801382a:	4611      	mov	r1, r2
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff f880 	bl	8012932 <embeddedCliGetTokenVariable>
 8013832:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8013834:	6839      	ldr	r1, [r7, #0]
 8013836:	6978      	ldr	r0, [r7, #20]
 8013838:	f7ec fcd2 	bl	80001e0 <strcmp>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d00a      	beq.n	8013858 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8013846:	8a7b      	ldrh	r3, [r7, #18]
 8013848:	3301      	adds	r3, #1
 801384a:	827b      	strh	r3, [r7, #18]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	891b      	ldrh	r3, [r3, #8]
 8013850:	8a7a      	ldrh	r2, [r7, #18]
 8013852:	429a      	cmp	r2, r3
 8013854:	d9e6      	bls.n	8013824 <historyRemove+0x22>
 8013856:	e000      	b.n	801385a <historyRemove+0x58>
            break;
 8013858:	bf00      	nop
    }
    if (item == NULL)
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d027      	beq.n	80138b0 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	891b      	ldrh	r3, [r3, #8]
 8013864:	3b01      	subs	r3, #1
 8013866:	b29a      	uxth	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 801386c:	8a7a      	ldrh	r2, [r7, #18]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	891b      	ldrh	r3, [r3, #8]
 8013872:	3301      	adds	r3, #1
 8013874:	429a      	cmp	r2, r3
 8013876:	d01d      	beq.n	80138b4 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8013878:	6978      	ldr	r0, [r7, #20]
 801387a:	f7ec fd11 	bl	80002a0 <strlen>
 801387e:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	889b      	ldrh	r3, [r3, #4]
 8013884:	4619      	mov	r1, r3
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	3301      	adds	r3, #1
 801388a:	697a      	ldr	r2, [r7, #20]
 801388c:	441a      	add	r2, r3
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	1ad3      	subs	r3, r2, r3
 8013894:	1acb      	subs	r3, r1, r3
 8013896:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	3301      	adds	r3, #1
 801389c:	697a      	ldr	r2, [r7, #20]
 801389e:	4413      	add	r3, r2
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	4619      	mov	r1, r3
 80138a4:	6978      	ldr	r0, [r7, #20]
 80138a6:	f00b fa7f 	bl	801eda8 <memmove>
 80138aa:	e004      	b.n	80138b6 <historyRemove+0xb4>
        return;
 80138ac:	bf00      	nop
 80138ae:	e002      	b.n	80138b6 <historyRemove+0xb4>
        return;
 80138b0:	bf00      	nop
 80138b2:	e000      	b.n	80138b6 <historyRemove+0xb4>
        return;
 80138b4:	bf00      	nop
}
 80138b6:	3718      	adds	r7, #24
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	460b      	mov	r3, r1
 80138c6:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d002      	beq.n	80138d4 <getTokenPosition+0x18>
 80138ce:	887b      	ldrh	r3, [r7, #2]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d102      	bne.n	80138da <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80138d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80138d8:	e028      	b.n	801392c <getTokenPosition+0x70>
    uint16_t i = 0;
 80138da:	2300      	movs	r3, #0
 80138dc:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80138de:	2301      	movs	r3, #1
 80138e0:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80138e2:	89ba      	ldrh	r2, [r7, #12]
 80138e4:	887b      	ldrh	r3, [r7, #2]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d013      	beq.n	8013912 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80138ea:	89fb      	ldrh	r3, [r7, #14]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	4413      	add	r3, r2
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d109      	bne.n	801390a <getTokenPosition+0x4e>
            ++tokenCount;
 80138f6:	89bb      	ldrh	r3, [r7, #12]
 80138f8:	3301      	adds	r3, #1
 80138fa:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80138fc:	89fb      	ldrh	r3, [r7, #14]
 80138fe:	3301      	adds	r3, #1
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	4413      	add	r3, r2
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d005      	beq.n	8013916 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 801390a:	89fb      	ldrh	r3, [r7, #14]
 801390c:	3301      	adds	r3, #1
 801390e:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8013910:	e7e7      	b.n	80138e2 <getTokenPosition+0x26>
            break;
 8013912:	bf00      	nop
 8013914:	e000      	b.n	8013918 <getTokenPosition+0x5c>
                break;
 8013916:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8013918:	89fb      	ldrh	r3, [r7, #14]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	4413      	add	r3, r2
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <getTokenPosition+0x6c>
        return i;
 8013924:	89fb      	ldrh	r3, [r7, #14]
 8013926:	e001      	b.n	801392c <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8013928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 801392c:	4618      	mov	r0, r3
 801392e:	3714      	adds	r7, #20
 8013930:	46bd      	mov	sp, r7
 8013932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013936:	4770      	bx	lr

08013938 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801393c:	4904      	ldr	r1, [pc, #16]	@ (8013950 <MX_FATFS_Init+0x18>)
 801393e:	4805      	ldr	r0, [pc, #20]	@ (8013954 <MX_FATFS_Init+0x1c>)
 8013940:	f008 faac 	bl	801be9c <FATFS_LinkDriver>
 8013944:	4603      	mov	r3, r0
 8013946:	461a      	mov	r2, r3
 8013948:	4b03      	ldr	r3, [pc, #12]	@ (8013958 <MX_FATFS_Init+0x20>)
 801394a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801394c:	bf00      	nop
 801394e:	bd80      	pop	{r7, pc}
 8013950:	20001b58 	.word	0x20001b58
 8013954:	08025110 	.word	0x08025110
 8013958:	20001b54 	.word	0x20001b54

0801395c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801395c:	b480      	push	{r7}
 801395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013960:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013962:	4618      	mov	r0, r3
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013972:	2300      	movs	r3, #0
 8013974:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013976:	f000 f86b 	bl	8013a50 <BSP_SD_IsDetected>
 801397a:	4603      	mov	r3, r0
 801397c:	2b01      	cmp	r3, #1
 801397e:	d001      	beq.n	8013984 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013980:	2301      	movs	r3, #1
 8013982:	e005      	b.n	8013990 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013984:	4804      	ldr	r0, [pc, #16]	@ (8013998 <BSP_SD_Init+0x2c>)
 8013986:	f7f6 fbd1 	bl	800a12c <HAL_SD_Init>
 801398a:	4603      	mov	r3, r0
 801398c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801398e:	79fb      	ldrb	r3, [r7, #7]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	200018b8 	.word	0x200018b8

0801399c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b088      	sub	sp, #32
 80139a0:	af02      	add	r7, sp, #8
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
 80139a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80139aa:	2300      	movs	r3, #0
 80139ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	9300      	str	r3, [sp, #0]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	68f9      	ldr	r1, [r7, #12]
 80139b8:	4806      	ldr	r0, [pc, #24]	@ (80139d4 <BSP_SD_ReadBlocks+0x38>)
 80139ba:	f7f6 fc67 	bl	800a28c <HAL_SD_ReadBlocks>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d001      	beq.n	80139c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80139c4:	2301      	movs	r3, #1
 80139c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80139c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3718      	adds	r7, #24
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	200018b8 	.word	0x200018b8

080139d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b088      	sub	sp, #32
 80139dc:	af02      	add	r7, sp, #8
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
 80139e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80139e6:	2300      	movs	r3, #0
 80139e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	68ba      	ldr	r2, [r7, #8]
 80139f2:	68f9      	ldr	r1, [r7, #12]
 80139f4:	4806      	ldr	r0, [pc, #24]	@ (8013a10 <BSP_SD_WriteBlocks+0x38>)
 80139f6:	f7f6 fe2f 	bl	800a658 <HAL_SD_WriteBlocks>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d001      	beq.n	8013a04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013a00:	2301      	movs	r3, #1
 8013a02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3718      	adds	r7, #24
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	200018b8 	.word	0x200018b8

08013a14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013a18:	4805      	ldr	r0, [pc, #20]	@ (8013a30 <BSP_SD_GetCardState+0x1c>)
 8013a1a:	f7f7 f97b 	bl	800ad14 <HAL_SD_GetCardState>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b04      	cmp	r3, #4
 8013a22:	bf14      	ite	ne
 8013a24:	2301      	movne	r3, #1
 8013a26:	2300      	moveq	r3, #0
 8013a28:	b2db      	uxtb	r3, r3
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	200018b8 	.word	0x200018b8

08013a34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013a3c:	6879      	ldr	r1, [r7, #4]
 8013a3e:	4803      	ldr	r0, [pc, #12]	@ (8013a4c <BSP_SD_GetCardInfo+0x18>)
 8013a40:	f7f7 f93c 	bl	800acbc <HAL_SD_GetCardInfo>
}
 8013a44:	bf00      	nop
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	200018b8 	.word	0x200018b8

08013a50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b083      	sub	sp, #12
 8013a54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013a56:	2301      	movs	r3, #1
 8013a58:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	b2db      	uxtb	r3, r3
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr
	...

08013a6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	4603      	mov	r3, r0
 8013a74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013a76:	4b0b      	ldr	r3, [pc, #44]	@ (8013aa4 <SD_CheckStatus+0x38>)
 8013a78:	2201      	movs	r2, #1
 8013a7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013a7c:	f7ff ffca 	bl	8013a14 <BSP_SD_GetCardState>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d107      	bne.n	8013a96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013a86:	4b07      	ldr	r3, [pc, #28]	@ (8013aa4 <SD_CheckStatus+0x38>)
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	f023 0301 	bic.w	r3, r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	4b04      	ldr	r3, [pc, #16]	@ (8013aa4 <SD_CheckStatus+0x38>)
 8013a94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013a96:	4b03      	ldr	r3, [pc, #12]	@ (8013aa4 <SD_CheckStatus+0x38>)
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	b2db      	uxtb	r3, r3
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	20000028 	.word	0x20000028

08013aa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	4603      	mov	r3, r0
 8013ab0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8013ae0 <SD_initialize+0x38>)
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013ab8:	f7ff ff58 	bl	801396c <BSP_SD_Init>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d107      	bne.n	8013ad2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013ac2:	79fb      	ldrb	r3, [r7, #7]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffd1 	bl	8013a6c <SD_CheckStatus>
 8013aca:	4603      	mov	r3, r0
 8013acc:	461a      	mov	r2, r3
 8013ace:	4b04      	ldr	r3, [pc, #16]	@ (8013ae0 <SD_initialize+0x38>)
 8013ad0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013ad2:	4b03      	ldr	r3, [pc, #12]	@ (8013ae0 <SD_initialize+0x38>)
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	b2db      	uxtb	r3, r3
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	20000028 	.word	0x20000028

08013ae4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	4603      	mov	r3, r0
 8013aec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7ff ffbb 	bl	8013a6c <SD_CheckStatus>
 8013af6:	4603      	mov	r3, r0
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b086      	sub	sp, #24
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60b9      	str	r1, [r7, #8]
 8013b08:	607a      	str	r2, [r7, #4]
 8013b0a:	603b      	str	r3, [r7, #0]
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013b10:	2301      	movs	r3, #1
 8013b12:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013b14:	f04f 33ff 	mov.w	r3, #4294967295
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	6879      	ldr	r1, [r7, #4]
 8013b1c:	68b8      	ldr	r0, [r7, #8]
 8013b1e:	f7ff ff3d 	bl	801399c <BSP_SD_ReadBlocks>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d107      	bne.n	8013b38 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013b28:	bf00      	nop
 8013b2a:	f7ff ff73 	bl	8013a14 <BSP_SD_GetCardState>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d1fa      	bne.n	8013b2a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013b34:	2300      	movs	r3, #0
 8013b36:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3718      	adds	r7, #24
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013b42:	b580      	push	{r7, lr}
 8013b44:	b086      	sub	sp, #24
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	607a      	str	r2, [r7, #4]
 8013b4c:	603b      	str	r3, [r7, #0]
 8013b4e:	4603      	mov	r3, r0
 8013b50:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013b52:	2301      	movs	r3, #1
 8013b54:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013b56:	f04f 33ff 	mov.w	r3, #4294967295
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	6879      	ldr	r1, [r7, #4]
 8013b5e:	68b8      	ldr	r0, [r7, #8]
 8013b60:	f7ff ff3a 	bl	80139d8 <BSP_SD_WriteBlocks>
 8013b64:	4603      	mov	r3, r0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d107      	bne.n	8013b7a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013b6a:	bf00      	nop
 8013b6c:	f7ff ff52 	bl	8013a14 <BSP_SD_GetCardState>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d1fa      	bne.n	8013b6c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013b76:	2300      	movs	r3, #0
 8013b78:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b08c      	sub	sp, #48	@ 0x30
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	603a      	str	r2, [r7, #0]
 8013b8e:	71fb      	strb	r3, [r7, #7]
 8013b90:	460b      	mov	r3, r1
 8013b92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013b94:	2301      	movs	r3, #1
 8013b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013b9a:	4b25      	ldr	r3, [pc, #148]	@ (8013c30 <SD_ioctl+0xac>)
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	f003 0301 	and.w	r3, r3, #1
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d001      	beq.n	8013bac <SD_ioctl+0x28>
 8013ba8:	2303      	movs	r3, #3
 8013baa:	e03c      	b.n	8013c26 <SD_ioctl+0xa2>

  switch (cmd)
 8013bac:	79bb      	ldrb	r3, [r7, #6]
 8013bae:	2b03      	cmp	r3, #3
 8013bb0:	d834      	bhi.n	8013c1c <SD_ioctl+0x98>
 8013bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8013bb8 <SD_ioctl+0x34>)
 8013bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bb8:	08013bc9 	.word	0x08013bc9
 8013bbc:	08013bd1 	.word	0x08013bd1
 8013bc0:	08013be9 	.word	0x08013be9
 8013bc4:	08013c03 	.word	0x08013c03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013bce:	e028      	b.n	8013c22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013bd0:	f107 030c 	add.w	r3, r7, #12
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7ff ff2d 	bl	8013a34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013be0:	2300      	movs	r3, #0
 8013be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013be6:	e01c      	b.n	8013c22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013be8:	f107 030c 	add.w	r3, r7, #12
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7ff ff21 	bl	8013a34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013c00:	e00f      	b.n	8013c22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013c02:	f107 030c 	add.w	r3, r7, #12
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7ff ff14 	bl	8013a34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c0e:	0a5a      	lsrs	r2, r3, #9
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013c1a:	e002      	b.n	8013c22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013c1c:	2304      	movs	r3, #4
 8013c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3730      	adds	r7, #48	@ 0x30
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	20000028 	.word	0x20000028

08013c34 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8013c34:	b480      	push	{r7}
 8013c36:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013c38:	4b03      	ldr	r3, [pc, #12]	@ (8013c48 <RtcInt+0x14>)
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013c3e:	bf00      	nop
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr
 8013c48:	20000029 	.word	0x20000029

08013c4c <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013c50:	4b06      	ldr	r3, [pc, #24]	@ (8013c6c <Rtc_Alarm_watchdog_disable+0x20>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	689a      	ldr	r2, [r3, #8]
 8013c56:	4b05      	ldr	r3, [pc, #20]	@ (8013c6c <Rtc_Alarm_watchdog_disable+0x20>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013c5e:	609a      	str	r2, [r3, #8]
}
 8013c60:	bf00      	nop
 8013c62:	46bd      	mov	sp, r7
 8013c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop
 8013c6c:	20001898 	.word	0x20001898

08013c70 <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b092      	sub	sp, #72	@ 0x48
 8013c74:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013c76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4828      	ldr	r0, [pc, #160]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013c80:	f7f5 fe9f 	bl	80099c2 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013c84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013c88:	2200      	movs	r2, #0
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	4824      	ldr	r0, [pc, #144]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013c8e:	f7f5 ff7a 	bl	8009b86 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013c92:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013c96:	3319      	adds	r3, #25
 8013c98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013c9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013ca0:	2b3b      	cmp	r3, #59	@ 0x3b
 8013ca2:	d902      	bls.n	8013caa <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013caa:	1d3b      	adds	r3, r7, #4
 8013cac:	2228      	movs	r2, #40	@ 0x28
 8013cae:	2100      	movs	r1, #0
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f00b f893 	bl	801eddc <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013cbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013cd2:	4b14      	ldr	r3, [pc, #80]	@ (8013d24 <Rtc_Alarm_watchdog+0xb4>)
 8013cd4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013cea:	1d3b      	adds	r3, r7, #4
 8013cec:	2200      	movs	r2, #0
 8013cee:	4619      	mov	r1, r3
 8013cf0:	480b      	ldr	r0, [pc, #44]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013cf2:	f7f5 ff97 	bl	8009c24 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	689a      	ldr	r2, [r3, #8]
 8013cfc:	4b08      	ldr	r3, [pc, #32]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013d04:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013d06:	4b06      	ldr	r3, [pc, #24]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	4b04      	ldr	r3, [pc, #16]	@ (8013d20 <Rtc_Alarm_watchdog+0xb0>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013d16:	60da      	str	r2, [r3, #12]

}
 8013d18:	bf00      	nop
 8013d1a:	3748      	adds	r7, #72	@ 0x48
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20001898 	.word	0x20001898
 8013d24:	80808000 	.word	0x80808000

08013d28 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b088      	sub	sp, #32
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013d30:	f107 030c 	add.w	r3, r7, #12
 8013d34:	4619      	mov	r1, r3
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 f8e4 	bl	8013f04 <Parse_Date>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013d40:	7ffb      	ldrb	r3, [r7, #31]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d10c      	bne.n	8013d60 <Set_Date+0x38>
		sDate.Date = date[0];
 8013d46:	7b3b      	ldrb	r3, [r7, #12]
 8013d48:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013d4a:	7b7b      	ldrb	r3, [r7, #13]
 8013d4c:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013d4e:	7bbb      	ldrb	r3, [r7, #14]
 8013d50:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d52:	f107 0318 	add.w	r3, r7, #24
 8013d56:	2200      	movs	r2, #0
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4805      	ldr	r0, [pc, #20]	@ (8013d70 <Set_Date+0x48>)
 8013d5c:	f7f5 fe8f 	bl	8009a7e <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013d60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013d64:	f7f0 f9fc 	bl	8004160 <HAL_Delay>
}
 8013d68:	bf00      	nop
 8013d6a:	3720      	adds	r7, #32
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	20001898 	.word	0x20001898

08013d74 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b094      	sub	sp, #80	@ 0x50
 8013d78:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8013d7a:	4b44      	ldr	r3, [pc, #272]	@ (8013e8c <Rtc_set_alarm+0x118>)
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d07f      	beq.n	8013e82 <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	4619      	mov	r1, r3
 8013d90:	483f      	ldr	r0, [pc, #252]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013d92:	f7f5 fe16 	bl	80099c2 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	483c      	ldr	r0, [pc, #240]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013da0:	f7f5 fef1 	bl	8009b86 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8013da4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013da8:	461a      	mov	r2, r3
 8013daa:	4b3a      	ldr	r3, [pc, #232]	@ (8013e94 <Rtc_set_alarm+0x120>)
 8013dac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	4413      	add	r3, r2
 8013db4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8013db8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013dbc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8013dc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013dc4:	2b3b      	cmp	r3, #59	@ 0x3b
 8013dc6:	d917      	bls.n	8013df8 <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8013dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013dcc:	4a31      	ldr	r2, [pc, #196]	@ (8013e94 <Rtc_set_alarm+0x120>)
 8013dce:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8013dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dd6:	fb01 f202 	mul.w	r2, r1, r2
 8013dda:	1a9b      	subs	r3, r3, r2
 8013ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013de0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013de4:	3301      	adds	r3, #1
 8013de6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8013dea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013dee:	2b17      	cmp	r3, #23
 8013df0:	d902      	bls.n	8013df8 <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013df8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013dfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013e00:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8013e04:	9100      	str	r1, [sp, #0]
 8013e06:	4924      	ldr	r1, [pc, #144]	@ (8013e98 <Rtc_set_alarm+0x124>)
 8013e08:	4824      	ldr	r0, [pc, #144]	@ (8013e9c <Rtc_set_alarm+0x128>)
 8013e0a:	f00a fe9d 	bl	801eb48 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8013e0e:	1d3b      	adds	r3, r7, #4
 8013e10:	2228      	movs	r2, #40	@ 0x28
 8013e12:	2100      	movs	r1, #0
 8013e14:	4618      	mov	r0, r3
 8013e16:	f00a ffe1 	bl	801eddc <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8013e1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e32:	2300      	movs	r3, #0
 8013e34:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013e36:	4b1a      	ldr	r3, [pc, #104]	@ (8013ea0 <Rtc_set_alarm+0x12c>)
 8013e38:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013e42:	2301      	movs	r3, #1
 8013e44:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8013e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013e4e:	1d3b      	adds	r3, r7, #4
 8013e50:	2200      	movs	r2, #0
 8013e52:	4619      	mov	r1, r3
 8013e54:	480e      	ldr	r0, [pc, #56]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013e56:	f7f5 fee5 	bl	8009c24 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8013e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	689a      	ldr	r2, [r3, #8]
 8013e60:	4b0b      	ldr	r3, [pc, #44]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013e68:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8013e6a:	4b09      	ldr	r3, [pc, #36]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	b2da      	uxtb	r2, r3
 8013e72:	4b07      	ldr	r3, [pc, #28]	@ (8013e90 <Rtc_set_alarm+0x11c>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8013e7a:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8013e7c:	4b03      	ldr	r3, [pc, #12]	@ (8013e8c <Rtc_set_alarm+0x118>)
 8013e7e:	2200      	movs	r2, #0
 8013e80:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8013e82:	bf00      	nop
 8013e84:	3748      	adds	r7, #72	@ 0x48
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20000029 	.word	0x20000029
 8013e90:	20001898 	.word	0x20001898
 8013e94:	200012cc 	.word	0x200012cc
 8013e98:	080247f0 	.word	0x080247f0
 8013e9c:	2000002c 	.word	0x2000002c
 8013ea0:	80800080 	.word	0x80800080

08013ea4 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08c      	sub	sp, #48	@ 0x30
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013eac:	f107 030c 	add.w	r3, r7, #12
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 f890 	bl	8013fd8 <Parse_Time>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d113      	bne.n	8013eee <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013ec6:	7b3b      	ldrb	r3, [r7, #12]
 8013ec8:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013eca:	7b7b      	ldrb	r3, [r7, #13]
 8013ecc:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013ece:	7bbb      	ldrb	r3, [r7, #14]
 8013ed0:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013eda:	f107 0318 	add.w	r3, r7, #24
 8013ede:	2200      	movs	r2, #0
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4807      	ldr	r0, [pc, #28]	@ (8013f00 <Set_Time+0x5c>)
 8013ee4:	f7f5 fcd3 	bl	800988e <HAL_RTC_SetTime>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013eee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013ef2:	f7f0 f935 	bl	8004160 <HAL_Delay>

}
 8013ef6:	bf00      	nop
 8013ef8:	3730      	adds	r7, #48	@ 0x30
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	20001898 	.word	0x20001898

08013f04 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013f12:	2300      	movs	r3, #0
 8013f14:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013f16:	492e      	ldr	r1, [pc, #184]	@ (8013fd0 <Parse_Date+0xcc>)
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f00a ff75 	bl	801ee08 <strtok>
 8013f1e:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d14b      	bne.n	8013fbe <Parse_Date+0xba>
		{
			return 1;
 8013f26:	2301      	movs	r3, #1
 8013f28:	e04d      	b.n	8013fc6 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013f2a:	68b8      	ldr	r0, [r7, #8]
 8013f2c:	f009 fcd4 	bl	801d8d8 <atoi>
 8013f30:	4603      	mov	r3, r0
 8013f32:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013f34:	89fb      	ldrh	r3, [r7, #14]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10a      	bne.n	8013f50 <Parse_Date+0x4c>
 8013f3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f3e:	2b1f      	cmp	r3, #31
 8013f40:	dc03      	bgt.n	8013f4a <Parse_Date+0x46>
 8013f42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	dc02      	bgt.n	8013f50 <Parse_Date+0x4c>
			{
				val= 1;
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	81bb      	strh	r3, [r7, #12]
 8013f4e:	e028      	b.n	8013fa2 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	2b01      	cmp	r3, #1
 8013f54:	d10a      	bne.n	8013f6c <Parse_Date+0x68>
 8013f56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f5a:	2b0c      	cmp	r3, #12
 8013f5c:	dc03      	bgt.n	8013f66 <Parse_Date+0x62>
 8013f5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	dc02      	bgt.n	8013f6c <Parse_Date+0x68>
			{
				val= 1;
 8013f66:	2301      	movs	r3, #1
 8013f68:	81bb      	strh	r3, [r7, #12]
 8013f6a:	e01a      	b.n	8013fa2 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013f6c:	89fb      	ldrh	r3, [r7, #14]
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d112      	bne.n	8013f98 <Parse_Date+0x94>
 8013f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013f7a:	dd0d      	ble.n	8013f98 <Parse_Date+0x94>
			{
				val=val%100;
 8013f7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f80:	4a14      	ldr	r2, [pc, #80]	@ (8013fd4 <Parse_Date+0xd0>)
 8013f82:	fb82 1203 	smull	r1, r2, r2, r3
 8013f86:	1151      	asrs	r1, r2, #5
 8013f88:	17da      	asrs	r2, r3, #31
 8013f8a:	1a8a      	subs	r2, r1, r2
 8013f8c:	2164      	movs	r1, #100	@ 0x64
 8013f8e:	fb01 f202 	mul.w	r2, r1, r2
 8013f92:	1a9b      	subs	r3, r3, r2
 8013f94:	81bb      	strh	r3, [r7, #12]
 8013f96:	e004      	b.n	8013fa2 <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013f98:	89fb      	ldrh	r3, [r7, #14]
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d901      	bls.n	8013fa2 <Parse_Date+0x9e>
			{
				return 1;
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e011      	b.n	8013fc6 <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013fa2:	89fb      	ldrh	r3, [r7, #14]
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	89ba      	ldrh	r2, [r7, #12]
 8013faa:	b2d2      	uxtb	r2, r2
 8013fac:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013fae:	4908      	ldr	r1, [pc, #32]	@ (8013fd0 <Parse_Date+0xcc>)
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	f00a ff29 	bl	801ee08 <strtok>
 8013fb6:	60b8      	str	r0, [r7, #8]
		i++;
 8013fb8:	89fb      	ldrh	r3, [r7, #14]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d1b2      	bne.n	8013f2a <Parse_Date+0x26>
	}

	}

	return 0;
 8013fc4:	2300      	movs	r3, #0

}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	08024800 	.word	0x08024800
 8013fd4:	51eb851f 	.word	0x51eb851f

08013fd8 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8013fea:	492a      	ldr	r1, [pc, #168]	@ (8014094 <Parse_Time+0xbc>)
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f00a ff0b 	bl	801ee08 <strtok>
 8013ff2:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d143      	bne.n	8014082 <Parse_Time+0xaa>
			{
				return 1;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	e045      	b.n	801408a <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8013ffe:	68b8      	ldr	r0, [r7, #8]
 8014000:	f009 fc6a 	bl	801d8d8 <atoi>
 8014004:	4603      	mov	r3, r0
 8014006:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d10a      	bne.n	8014024 <Parse_Time+0x4c>
 801400e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014012:	2b18      	cmp	r3, #24
 8014014:	dc03      	bgt.n	801401e <Parse_Time+0x46>
 8014016:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	da02      	bge.n	8014024 <Parse_Time+0x4c>
				{
					val= 24;
 801401e:	2318      	movs	r3, #24
 8014020:	81bb      	strh	r3, [r7, #12]
 8014022:	e020      	b.n	8014066 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8014024:	89fb      	ldrh	r3, [r7, #14]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d10a      	bne.n	8014040 <Parse_Time+0x68>
 801402a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801402e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014030:	dc03      	bgt.n	801403a <Parse_Time+0x62>
 8014032:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014036:	2b00      	cmp	r3, #0
 8014038:	da02      	bge.n	8014040 <Parse_Time+0x68>
				{
					val= 59;
 801403a:	233b      	movs	r3, #59	@ 0x3b
 801403c:	81bb      	strh	r3, [r7, #12]
 801403e:	e012      	b.n	8014066 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8014040:	89fb      	ldrh	r3, [r7, #14]
 8014042:	2b02      	cmp	r3, #2
 8014044:	d10a      	bne.n	801405c <Parse_Time+0x84>
 8014046:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801404a:	2b3b      	cmp	r3, #59	@ 0x3b
 801404c:	dc03      	bgt.n	8014056 <Parse_Time+0x7e>
 801404e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014052:	2b00      	cmp	r3, #0
 8014054:	da02      	bge.n	801405c <Parse_Time+0x84>
				{
					val=59;
 8014056:	233b      	movs	r3, #59	@ 0x3b
 8014058:	81bb      	strh	r3, [r7, #12]
 801405a:	e004      	b.n	8014066 <Parse_Time+0x8e>
				}
				else if(i > 2)
 801405c:	89fb      	ldrh	r3, [r7, #14]
 801405e:	2b02      	cmp	r3, #2
 8014060:	d901      	bls.n	8014066 <Parse_Time+0x8e>
				{
					return 1;
 8014062:	2301      	movs	r3, #1
 8014064:	e011      	b.n	801408a <Parse_Time+0xb2>
				}


				time[i] =val;
 8014066:	89fb      	ldrh	r3, [r7, #14]
 8014068:	683a      	ldr	r2, [r7, #0]
 801406a:	4413      	add	r3, r2
 801406c:	89ba      	ldrh	r2, [r7, #12]
 801406e:	b2d2      	uxtb	r2, r2
 8014070:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8014072:	4908      	ldr	r1, [pc, #32]	@ (8014094 <Parse_Time+0xbc>)
 8014074:	2000      	movs	r0, #0
 8014076:	f00a fec7 	bl	801ee08 <strtok>
 801407a:	60b8      	str	r0, [r7, #8]
			i++;
 801407c:	89fb      	ldrh	r3, [r7, #14]
 801407e:	3301      	adds	r3, #1
 8014080:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d1ba      	bne.n	8013ffe <Parse_Time+0x26>
		}

		}

		return 0;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3710      	adds	r7, #16
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	08024800 	.word	0x08024800

08014098 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	460b      	mov	r3, r1
 80140a2:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 80140a4:	78fb      	ldrb	r3, [r7, #3]
 80140a6:	091b      	lsrs	r3, r3, #4
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	4619      	mov	r1, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	1c5a      	adds	r2, r3, #1
 80140b0:	607a      	str	r2, [r7, #4]
 80140b2:	4a08      	ldr	r2, [pc, #32]	@ (80140d4 <CharToHexasc+0x3c>)
 80140b4:	5c52      	ldrb	r2, [r2, r1]
 80140b6:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 80140b8:	78fb      	ldrb	r3, [r7, #3]
 80140ba:	f003 030f 	and.w	r3, r3, #15
 80140be:	4a05      	ldr	r2, [pc, #20]	@ (80140d4 <CharToHexasc+0x3c>)
 80140c0:	5cd2      	ldrb	r2, [r2, r3]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	701a      	strb	r2, [r3, #0]
}
 80140c6:	bf00      	nop
 80140c8:	370c      	adds	r7, #12
 80140ca:	46bd      	mov	sp, r7
 80140cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d0:	4770      	bx	lr
 80140d2:	bf00      	nop
 80140d4:	08025124 	.word	0x08025124

080140d8 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b088      	sub	sp, #32
 80140dc:	af00      	add	r7, sp, #0
	adc_Disable();
 80140de:	4830      	ldr	r0, [pc, #192]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 80140e0:	f7f0 f8e9 	bl	80042b6 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 80140e4:	f107 0314 	add.w	r3, r7, #20
 80140e8:	2200      	movs	r2, #0
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	605a      	str	r2, [r3, #4]
 80140ee:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 80140f0:	4b2b      	ldr	r3, [pc, #172]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 80140f2:	4a2c      	ldr	r2, [pc, #176]	@ (80141a4 <adc_InitOneShotMode+0xcc>)
 80140f4:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80140f6:	4b2a      	ldr	r3, [pc, #168]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 80140f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80140fc:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80140fe:	4b28      	ldr	r3, [pc, #160]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014100:	2200      	movs	r2, #0
 8014102:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8014104:	4b26      	ldr	r3, [pc, #152]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014106:	2200      	movs	r2, #0
 8014108:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 801410a:	4b25      	ldr	r3, [pc, #148]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801410c:	2200      	movs	r2, #0
 801410e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014110:	4b23      	ldr	r3, [pc, #140]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014112:	2200      	movs	r2, #0
 8014114:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8014118:	4b21      	ldr	r3, [pc, #132]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801411a:	2200      	movs	r2, #0
 801411c:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801411e:	4b20      	ldr	r3, [pc, #128]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014120:	4a21      	ldr	r2, [pc, #132]	@ (80141a8 <adc_InitOneShotMode+0xd0>)
 8014122:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014124:	4b1e      	ldr	r3, [pc, #120]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014126:	2200      	movs	r2, #0
 8014128:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 801412a:	4b1d      	ldr	r3, [pc, #116]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801412c:	2201      	movs	r2, #1
 801412e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8014130:	4b1b      	ldr	r3, [pc, #108]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014132:	2200      	movs	r2, #0
 8014134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014138:	4b19      	ldr	r3, [pc, #100]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801413a:	2201      	movs	r2, #1
 801413c:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801413e:	4818      	ldr	r0, [pc, #96]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 8014140:	f7f0 f876 	bl	8004230 <HAL_ADC_Init>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d001      	beq.n	801414e <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 801414a:	f7ef fab3 	bl	80036b4 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 801414e:	2300      	movs	r3, #0
 8014150:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8014152:	f107 0314 	add.w	r3, r7, #20
 8014156:	4619      	mov	r1, r3
 8014158:	4811      	ldr	r0, [pc, #68]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801415a:	f7f0 fc7d 	bl	8004a58 <HAL_ADCEx_MultiModeConfigChannel>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d001      	beq.n	8014168 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8014164:	f7ef faa6 	bl	80036b4 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8014168:	1d3b      	adds	r3, r7, #4
 801416a:	2200      	movs	r2, #0
 801416c:	601a      	str	r2, [r3, #0]
 801416e:	605a      	str	r2, [r3, #4]
 8014170:	609a      	str	r2, [r3, #8]
 8014172:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8014174:	230a      	movs	r3, #10
 8014176:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8014178:	2301      	movs	r3, #1
 801417a:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 801417c:	2302      	movs	r3, #2
 801417e:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8014180:	2300      	movs	r3, #0
 8014182:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014184:	1d3b      	adds	r3, r7, #4
 8014186:	4619      	mov	r1, r3
 8014188:	4805      	ldr	r0, [pc, #20]	@ (80141a0 <adc_InitOneShotMode+0xc8>)
 801418a:	f7f0 fa47 	bl	800461c <HAL_ADC_ConfigChannel>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d001      	beq.n	8014198 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8014194:	f7ef fa8e 	bl	80036b4 <Error_Handler>
		  }



}
 8014198:	bf00      	nop
 801419a:	3720      	adds	r7, #32
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	200017f0 	.word	0x200017f0
 80141a4:	40012000 	.word	0x40012000
 80141a8:	0f000001 	.word	0x0f000001

080141ac <adc_Getval>:

static uint32_t adc_Getval ()
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 80141b0:	4802      	ldr	r0, [pc, #8]	@ (80141bc <adc_Getval+0x10>)
 80141b2:	f7f0 fa25 	bl	8004600 <HAL_ADC_GetValue>
 80141b6:	4603      	mov	r3, r0

}
 80141b8:	4618      	mov	r0, r3
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	200017f0 	.word	0x200017f0

080141c0 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 80141c8:	f7ff ff86 	bl	80140d8 <adc_InitOneShotMode>
	HAL_Delay(1);
 80141cc:	2001      	movs	r0, #1
 80141ce:	f7ef ffc7 	bl	8004160 <HAL_Delay>
	adc_Start();
 80141d2:	4847      	ldr	r0, [pc, #284]	@ (80142f0 <adc_Measure+0x130>)
 80141d4:	f7f0 f8a2 	bl	800431c <HAL_ADC_Start>
	HAL_Delay(1);
 80141d8:	2001      	movs	r0, #1
 80141da:	f7ef ffc1 	bl	8004160 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141e2:	4843      	ldr	r0, [pc, #268]	@ (80142f0 <adc_Measure+0x130>)
 80141e4:	f7f0 f981 	bl	80044ea <HAL_ADC_PollForConversion>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d01d      	beq.n	801422a <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 80141ee:	2001      	movs	r0, #1
 80141f0:	f7ef ffb6 	bl	8004160 <HAL_Delay>
		   adc_Start();
 80141f4:	483e      	ldr	r0, [pc, #248]	@ (80142f0 <adc_Measure+0x130>)
 80141f6:	f7f0 f891 	bl	800431c <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141fe:	483c      	ldr	r0, [pc, #240]	@ (80142f0 <adc_Measure+0x130>)
 8014200:	f7f0 f973 	bl	80044ea <HAL_ADC_PollForConversion>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00f      	beq.n	801422a <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 801420a:	2001      	movs	r0, #1
 801420c:	f7ef ffa8 	bl	8004160 <HAL_Delay>
				adc_Start();
 8014210:	4837      	ldr	r0, [pc, #220]	@ (80142f0 <adc_Measure+0x130>)
 8014212:	f7f0 f883 	bl	800431c <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014216:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801421a:	4835      	ldr	r0, [pc, #212]	@ (80142f0 <adc_Measure+0x130>)
 801421c:	f7f0 f965 	bl	80044ea <HAL_ADC_PollForConversion>
 8014220:	4603      	mov	r3, r0
 8014222:	2b00      	cmp	r3, #0
 8014224:	d001      	beq.n	801422a <adc_Measure+0x6a>
				{
					return 0;
 8014226:	2300      	movs	r3, #0
 8014228:	e05a      	b.n	80142e0 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 801422a:	4831      	ldr	r0, [pc, #196]	@ (80142f0 <adc_Measure+0x130>)
 801422c:	f7f0 f92a 	bl	8004484 <HAL_ADC_Stop>

	val = adc_Getval();
 8014230:	f7ff ffbc 	bl	80141ac <adc_Getval>
 8014234:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8014236:	2001      	movs	r0, #1
 8014238:	f7ef ff92 	bl	8004160 <HAL_Delay>
	adc_Start();
 801423c:	482c      	ldr	r0, [pc, #176]	@ (80142f0 <adc_Measure+0x130>)
 801423e:	f7f0 f86d 	bl	800431c <HAL_ADC_Start>
	HAL_Delay(1);
 8014242:	2001      	movs	r0, #1
 8014244:	f7ef ff8c 	bl	8004160 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014248:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801424c:	4828      	ldr	r0, [pc, #160]	@ (80142f0 <adc_Measure+0x130>)
 801424e:	f7f0 f94c 	bl	80044ea <HAL_ADC_PollForConversion>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d01d      	beq.n	8014294 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8014258:	2001      	movs	r0, #1
 801425a:	f7ef ff81 	bl	8004160 <HAL_Delay>
		   adc_Start();
 801425e:	4824      	ldr	r0, [pc, #144]	@ (80142f0 <adc_Measure+0x130>)
 8014260:	f7f0 f85c 	bl	800431c <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014264:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014268:	4821      	ldr	r0, [pc, #132]	@ (80142f0 <adc_Measure+0x130>)
 801426a:	f7f0 f93e 	bl	80044ea <HAL_ADC_PollForConversion>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00f      	beq.n	8014294 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8014274:	2001      	movs	r0, #1
 8014276:	f7ef ff73 	bl	8004160 <HAL_Delay>
				adc_Start();
 801427a:	481d      	ldr	r0, [pc, #116]	@ (80142f0 <adc_Measure+0x130>)
 801427c:	f7f0 f84e 	bl	800431c <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014280:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014284:	481a      	ldr	r0, [pc, #104]	@ (80142f0 <adc_Measure+0x130>)
 8014286:	f7f0 f930 	bl	80044ea <HAL_ADC_PollForConversion>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d001      	beq.n	8014294 <adc_Measure+0xd4>
				{
					return 0;
 8014290:	2300      	movs	r3, #0
 8014292:	e025      	b.n	80142e0 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8014294:	4816      	ldr	r0, [pc, #88]	@ (80142f0 <adc_Measure+0x130>)
 8014296:	f7f0 f8f5 	bl	8004484 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 801429a:	f7ff ff87 	bl	80141ac <adc_Getval>
 801429e:	4602      	mov	r2, r0
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	4413      	add	r3, r2
 80142a4:	085b      	lsrs	r3, r3, #1
 80142a6:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	ee07 3a90 	vmov	s15, r3
 80142ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142b2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80142f4 <adc_Measure+0x134>
 80142b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80142ba:	ee17 0a90 	vmov	r0, s15
 80142be:	f7ec f95b 	bl	8000578 <__aeabi_f2d>
 80142c2:	a309      	add	r3, pc, #36	@ (adr r3, 80142e8 <adc_Measure+0x128>)
 80142c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c8:	f7ec f9ae 	bl	8000628 <__aeabi_dmul>
 80142cc:	4602      	mov	r2, r0
 80142ce:	460b      	mov	r3, r1
 80142d0:	4610      	mov	r0, r2
 80142d2:	4619      	mov	r1, r3
 80142d4:	f7ec fca0 	bl	8000c18 <__aeabi_d2f>
 80142d8:	4602      	mov	r2, r0
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	601a      	str	r2, [r3, #0]


	return 1;
 80142de:	2301      	movs	r3, #1


}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	851eb852 	.word	0x851eb852
 80142ec:	3ff451eb 	.word	0x3ff451eb
 80142f0:	200017f0 	.word	0x200017f0
 80142f4:	3a533333 	.word	0x3a533333

080142f8 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 80142f8:	b480      	push	{r7}
 80142fa:	b083      	sub	sp, #12
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	4603      	mov	r3, r0
 8014300:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 8014302:	4a04      	ldr	r2, [pc, #16]	@ (8014314 <init_driver+0x1c>)
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	7013      	strb	r3, [r2, #0]
}
 8014308:	bf00      	nop
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr
 8014314:	20001b5c 	.word	0x20001b5c

08014318 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 8014322:	2300      	movs	r3, #0
 8014324:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 8014326:	1d3b      	adds	r3, r7, #4
 8014328:	4618      	mov	r0, r3
 801432a:	f000 f8eb 	bl	8014504 <scd30_get_data_ready>
 801432e:	4603      	mov	r3, r0
 8014330:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d014      	beq.n	8014364 <scd30_await_data_ready+0x4c>
        return local_error;
 801433a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801433e:	e016      	b.n	801436e <scd30_await_data_ready+0x56>
    }
    while (data_ready == 0) {

        sensirion_hal_sleep_us(100000);
 8014340:	480d      	ldr	r0, [pc, #52]	@ (8014378 <scd30_await_data_ready+0x60>)
 8014342:	f000 feb3 	bl	80150ac <sensirion_i2c_hal_sleep_usec>


        local_error = scd30_get_data_ready(&data_ready);
 8014346:	1d3b      	adds	r3, r7, #4
 8014348:	4618      	mov	r0, r3
 801434a:	f000 f8db 	bl	8014504 <scd30_get_data_ready>
 801434e:	4603      	mov	r3, r0
 8014350:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 8014352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <scd30_await_data_ready+0x48>
            return local_error;
 801435a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801435e:	e006      	b.n	801436e <scd30_await_data_ready+0x56>
        }

        run_console_from_scd30();
 8014360:	f7ee f8f2 	bl	8002548 <run_console_from_scd30>
    while (data_ready == 0) {
 8014364:	88bb      	ldrh	r3, [r7, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d0ea      	beq.n	8014340 <scd30_await_data_ready+0x28>
    }
    return local_error;
 801436a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	000186a0 	.word	0x000186a0

0801437c <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 801437c:	b580      	push	{r7, lr}
 801437e:	b086      	sub	sp, #24
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 8014388:	2300      	movs	r3, #0
 801438a:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 801438c:	f7ff ffc4 	bl	8014318 <scd30_await_data_ready>
 8014390:	4603      	mov	r3, r0
 8014392:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014394:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d002      	beq.n	80143a2 <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 801439c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143a0:	e008      	b.n	80143b4 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	68b9      	ldr	r1, [r7, #8]
 80143a6:	68f8      	ldr	r0, [r7, #12]
 80143a8:	f000 f8fc 	bl	80145a4 <scd30_read_measurement_data>
 80143ac:	4603      	mov	r3, r0
 80143ae:	82fb      	strh	r3, [r7, #22]
    return local_error;
 80143b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3718      	adds	r7, #24
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}

080143bc <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 80143bc:	b580      	push	{r7, lr}
 80143be:	b086      	sub	sp, #24
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	4603      	mov	r3, r0
 80143c4:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80143c6:	2300      	movs	r3, #0
 80143c8:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80143ca:	2300      	movs	r3, #0
 80143cc:	60fb      	str	r3, [r7, #12]
 80143ce:	2300      	movs	r3, #0
 80143d0:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80143d2:	2300      	movs	r3, #0
 80143d4:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 80143d6:	8ab9      	ldrh	r1, [r7, #20]
 80143d8:	f107 030c 	add.w	r3, r7, #12
 80143dc:	2210      	movs	r2, #16
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 fd25 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80143e4:	4603      	mov	r3, r0
 80143e6:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80143e8:	88fa      	ldrh	r2, [r7, #6]
 80143ea:	8ab9      	ldrh	r1, [r7, #20]
 80143ec:	f107 030c 	add.w	r3, r7, #12
 80143f0:	4618      	mov	r0, r3
 80143f2:	f000 fd3f 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 80143f6:	4603      	mov	r3, r0
 80143f8:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80143fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014428 <scd30_start_periodic_measurement+0x6c>)
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	8aba      	ldrh	r2, [r7, #20]
 8014400:	f107 010c 	add.w	r1, r7, #12
 8014404:	4618      	mov	r0, r3
 8014406:	f000 fd65 	bl	8014ed4 <sensirion_i2c_write_data>
 801440a:	4603      	mov	r3, r0
 801440c:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 801440e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <scd30_start_periodic_measurement+0x60>
        return local_error;
 8014416:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801441a:	e001      	b.n	8014420 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 801441c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3718      	adds	r7, #24
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	20001b5c 	.word	0x20001b5c

0801442c <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014432:	2300      	movs	r3, #0
 8014434:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014436:	2300      	movs	r3, #0
 8014438:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 801443a:	2300      	movs	r3, #0
 801443c:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 801443e:	88b9      	ldrh	r1, [r7, #4]
 8014440:	463b      	mov	r3, r7
 8014442:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8014446:	4618      	mov	r0, r3
 8014448:	f000 fcf1 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 801444c:	4603      	mov	r3, r0
 801444e:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014450:	4b0c      	ldr	r3, [pc, #48]	@ (8014484 <scd30_stop_periodic_measurement+0x58>)
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	88ba      	ldrh	r2, [r7, #4]
 8014456:	4639      	mov	r1, r7
 8014458:	4618      	mov	r0, r3
 801445a:	f000 fd3b 	bl	8014ed4 <sensirion_i2c_write_data>
 801445e:	4603      	mov	r3, r0
 8014460:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d002      	beq.n	8014470 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 801446a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801446e:	e005      	b.n	801447c <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014470:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014474:	f000 fe1a 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801447c:	4618      	mov	r0, r3
 801447e:	3708      	adds	r7, #8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	20001b5c 	.word	0x20001b5c

08014488 <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 8014488:	b580      	push	{r7, lr}
 801448a:	b086      	sub	sp, #24
 801448c:	af00      	add	r7, sp, #0
 801448e:	4603      	mov	r3, r0
 8014490:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014492:	2300      	movs	r3, #0
 8014494:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014496:	2300      	movs	r3, #0
 8014498:	60fb      	str	r3, [r7, #12]
 801449a:	2300      	movs	r3, #0
 801449c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 80144a2:	8ab9      	ldrh	r1, [r7, #20]
 80144a4:	f107 030c 	add.w	r3, r7, #12
 80144a8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80144ac:	4618      	mov	r0, r3
 80144ae:	f000 fcbe 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80144b2:	4603      	mov	r3, r0
 80144b4:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 80144b6:	88fa      	ldrh	r2, [r7, #6]
 80144b8:	8ab9      	ldrh	r1, [r7, #20]
 80144ba:	f107 030c 	add.w	r3, r7, #12
 80144be:	4618      	mov	r0, r3
 80144c0:	f000 fcd8 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 80144c4:	4603      	mov	r3, r0
 80144c6:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144c8:	4b0d      	ldr	r3, [pc, #52]	@ (8014500 <scd30_set_measurement_interval+0x78>)
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	8aba      	ldrh	r2, [r7, #20]
 80144ce:	f107 010c 	add.w	r1, r7, #12
 80144d2:	4618      	mov	r0, r3
 80144d4:	f000 fcfe 	bl	8014ed4 <sensirion_i2c_write_data>
 80144d8:	4603      	mov	r3, r0
 80144da:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80144dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d002      	beq.n	80144ea <scd30_set_measurement_interval+0x62>
        return local_error;
 80144e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80144e8:	e005      	b.n	80144f6 <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80144ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80144ee:	f000 fddd 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80144f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3718      	adds	r7, #24
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	20001b5c 	.word	0x20001b5c

08014504 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801450c:	2300      	movs	r3, #0
 801450e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014510:	4b22      	ldr	r3, [pc, #136]	@ (801459c <scd30_get_data_ready+0x98>)
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	813b      	strh	r3, [r7, #8]
 8014516:	2300      	movs	r3, #0
 8014518:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801451a:	2300      	movs	r3, #0
 801451c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 801451e:	89b9      	ldrh	r1, [r7, #12]
 8014520:	f107 0308 	add.w	r3, r7, #8
 8014524:	f240 2202 	movw	r2, #514	@ 0x202
 8014528:	4618      	mov	r0, r3
 801452a:	f000 fc80 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 801452e:	4603      	mov	r3, r0
 8014530:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014532:	4b1b      	ldr	r3, [pc, #108]	@ (80145a0 <scd30_get_data_ready+0x9c>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	89ba      	ldrh	r2, [r7, #12]
 8014538:	f107 0108 	add.w	r1, r7, #8
 801453c:	4618      	mov	r0, r3
 801453e:	f000 fcc9 	bl	8014ed4 <sensirion_i2c_write_data>
 8014542:	4603      	mov	r3, r0
 8014544:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d002      	beq.n	8014554 <scd30_get_data_ready+0x50>
        return local_error;
 801454e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014552:	e01f      	b.n	8014594 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014554:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014558:	f000 fda8 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801455c:	4b10      	ldr	r3, [pc, #64]	@ (80145a0 <scd30_get_data_ready+0x9c>)
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f107 0108 	add.w	r1, r7, #8
 8014564:	2202      	movs	r2, #2
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fcc7 	bl	8014efa <sensirion_i2c_read_data_inplace>
 801456c:	4603      	mov	r3, r0
 801456e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d002      	beq.n	801457e <scd30_get_data_ready+0x7a>
        return local_error;
 8014578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801457c:	e00a      	b.n	8014594 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801457e:	f107 0308 	add.w	r3, r7, #8
 8014582:	4618      	mov	r0, r3
 8014584:	f000 fbc1 	bl	8014d0a <sensirion_common_bytes_to_uint16_t>
 8014588:	4603      	mov	r3, r0
 801458a:	461a      	mov	r2, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014594:	4618      	mov	r0, r3
 8014596:	3710      	adds	r7, #16
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	08024804 	.word	0x08024804
 80145a0:	20001b5c 	.word	0x20001b5c

080145a4 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08a      	sub	sp, #40	@ 0x28
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 80145b0:	2300      	movs	r3, #0
 80145b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 80145b4:	2300      	movs	r3, #0
 80145b6:	613b      	str	r3, [r7, #16]
 80145b8:	f107 0314 	add.w	r3, r7, #20
 80145bc:	2200      	movs	r2, #0
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	605a      	str	r2, [r3, #4]
 80145c2:	609a      	str	r2, [r3, #8]
 80145c4:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 80145c6:	2300      	movs	r3, #0
 80145c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 80145ca:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80145cc:	f107 0310 	add.w	r3, r7, #16
 80145d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fc2a 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80145da:	4603      	mov	r3, r0
 80145dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80145de:	4b26      	ldr	r3, [pc, #152]	@ (8014678 <scd30_read_measurement_data+0xd4>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80145e4:	f107 0110 	add.w	r1, r7, #16
 80145e8:	4618      	mov	r0, r3
 80145ea:	f000 fc73 	bl	8014ed4 <sensirion_i2c_write_data>
 80145ee:	4603      	mov	r3, r0
 80145f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80145f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d002      	beq.n	8014600 <scd30_read_measurement_data+0x5c>
        return local_error;
 80145fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145fe:	e036      	b.n	801466e <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014600:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014604:	f000 fd52 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 8014608:	4b1b      	ldr	r3, [pc, #108]	@ (8014678 <scd30_read_measurement_data+0xd4>)
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	f107 0110 	add.w	r1, r7, #16
 8014610:	220c      	movs	r2, #12
 8014612:	4618      	mov	r0, r3
 8014614:	f000 fc71 	bl	8014efa <sensirion_i2c_read_data_inplace>
 8014618:	4603      	mov	r3, r0
 801461a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 801461c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <scd30_read_measurement_data+0x86>
        return local_error;
 8014624:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014628:	e021      	b.n	801466e <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 801462a:	f107 0310 	add.w	r3, r7, #16
 801462e:	4618      	mov	r0, r3
 8014630:	f000 fb9b 	bl	8014d6a <sensirion_common_bytes_to_float>
 8014634:	eef0 7a40 	vmov.f32	s15, s0
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 801463e:	f107 0310 	add.w	r3, r7, #16
 8014642:	3304      	adds	r3, #4
 8014644:	4618      	mov	r0, r3
 8014646:	f000 fb90 	bl	8014d6a <sensirion_common_bytes_to_float>
 801464a:	eef0 7a40 	vmov.f32	s15, s0
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 8014654:	f107 0310 	add.w	r3, r7, #16
 8014658:	3308      	adds	r3, #8
 801465a:	4618      	mov	r0, r3
 801465c:	f000 fb85 	bl	8014d6a <sensirion_common_bytes_to_float>
 8014660:	eef0 7a40 	vmov.f32	s15, s0
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 801466a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801466e:	4618      	mov	r0, r3
 8014670:	3728      	adds	r7, #40	@ 0x28
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	20001b5c 	.word	0x20001b5c

0801467c <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 801467c:	b580      	push	{r7, lr}
 801467e:	b086      	sub	sp, #24
 8014680:	af00      	add	r7, sp, #0
 8014682:	4603      	mov	r3, r0
 8014684:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014686:	2300      	movs	r3, #0
 8014688:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801468a:	2300      	movs	r3, #0
 801468c:	60fb      	str	r3, [r7, #12]
 801468e:	2300      	movs	r3, #0
 8014690:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014692:	2300      	movs	r3, #0
 8014694:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 8014696:	8ab9      	ldrh	r1, [r7, #20]
 8014698:	f107 030c 	add.w	r3, r7, #12
 801469c:	f245 3206 	movw	r2, #21254	@ 0x5306
 80146a0:	4618      	mov	r0, r3
 80146a2:	f000 fbc4 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80146a6:	4603      	mov	r3, r0
 80146a8:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80146aa:	88fa      	ldrh	r2, [r7, #6]
 80146ac:	8ab9      	ldrh	r1, [r7, #20]
 80146ae:	f107 030c 	add.w	r3, r7, #12
 80146b2:	4618      	mov	r0, r3
 80146b4:	f000 fbde 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 80146b8:	4603      	mov	r3, r0
 80146ba:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146bc:	4b0d      	ldr	r3, [pc, #52]	@ (80146f4 <scd30_activate_auto_calibration+0x78>)
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	8aba      	ldrh	r2, [r7, #20]
 80146c2:	f107 010c 	add.w	r1, r7, #12
 80146c6:	4618      	mov	r0, r3
 80146c8:	f000 fc04 	bl	8014ed4 <sensirion_i2c_write_data>
 80146cc:	4603      	mov	r3, r0
 80146ce:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80146d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d002      	beq.n	80146de <scd30_activate_auto_calibration+0x62>
        return local_error;
 80146d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146dc:	e005      	b.n	80146ea <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80146de:	f242 7010 	movw	r0, #10000	@ 0x2710
 80146e2:	f000 fce3 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80146e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3718      	adds	r7, #24
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	20001b5c 	.word	0x20001b5c

080146f8 <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014700:	2300      	movs	r3, #0
 8014702:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014704:	4b22      	ldr	r3, [pc, #136]	@ (8014790 <scd30_get_auto_calibration_status+0x98>)
 8014706:	881b      	ldrh	r3, [r3, #0]
 8014708:	813b      	strh	r3, [r7, #8]
 801470a:	2300      	movs	r3, #0
 801470c:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801470e:	2300      	movs	r3, #0
 8014710:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 8014712:	89b9      	ldrh	r1, [r7, #12]
 8014714:	f107 0308 	add.w	r3, r7, #8
 8014718:	f245 3206 	movw	r2, #21254	@ 0x5306
 801471c:	4618      	mov	r0, r3
 801471e:	f000 fb86 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014722:	4603      	mov	r3, r0
 8014724:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014726:	4b1b      	ldr	r3, [pc, #108]	@ (8014794 <scd30_get_auto_calibration_status+0x9c>)
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	89ba      	ldrh	r2, [r7, #12]
 801472c:	f107 0108 	add.w	r1, r7, #8
 8014730:	4618      	mov	r0, r3
 8014732:	f000 fbcf 	bl	8014ed4 <sensirion_i2c_write_data>
 8014736:	4603      	mov	r3, r0
 8014738:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801473a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <scd30_get_auto_calibration_status+0x50>
        return local_error;
 8014742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014746:	e01f      	b.n	8014788 <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014748:	f242 7010 	movw	r0, #10000	@ 0x2710
 801474c:	f000 fcae 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014750:	4b10      	ldr	r3, [pc, #64]	@ (8014794 <scd30_get_auto_calibration_status+0x9c>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	f107 0108 	add.w	r1, r7, #8
 8014758:	2202      	movs	r2, #2
 801475a:	4618      	mov	r0, r3
 801475c:	f000 fbcd 	bl	8014efa <sensirion_i2c_read_data_inplace>
 8014760:	4603      	mov	r3, r0
 8014762:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d002      	beq.n	8014772 <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 801476c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014770:	e00a      	b.n	8014788 <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4618      	mov	r0, r3
 8014778:	f000 fac7 	bl	8014d0a <sensirion_common_bytes_to_uint16_t>
 801477c:	4603      	mov	r3, r0
 801477e:	461a      	mov	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014788:	4618      	mov	r0, r3
 801478a:	3710      	adds	r7, #16
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	08024804 	.word	0x08024804
 8014794:	20001b5c 	.word	0x20001b5c

08014798 <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af00      	add	r7, sp, #0
 801479e:	4603      	mov	r3, r0
 80147a0:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80147a2:	2300      	movs	r3, #0
 80147a4:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80147a6:	2300      	movs	r3, #0
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	2300      	movs	r3, #0
 80147ac:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80147ae:	2300      	movs	r3, #0
 80147b0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80147b2:	8ab9      	ldrh	r1, [r7, #20]
 80147b4:	f107 030c 	add.w	r3, r7, #12
 80147b8:	f245 2204 	movw	r2, #20996	@ 0x5204
 80147bc:	4618      	mov	r0, r3
 80147be:	f000 fb36 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80147c2:	4603      	mov	r3, r0
 80147c4:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80147c6:	88fa      	ldrh	r2, [r7, #6]
 80147c8:	8ab9      	ldrh	r1, [r7, #20]
 80147ca:	f107 030c 	add.w	r3, r7, #12
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 fb50 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 80147d4:	4603      	mov	r3, r0
 80147d6:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80147d8:	4b0d      	ldr	r3, [pc, #52]	@ (8014810 <scd30_force_recalibration+0x78>)
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	8aba      	ldrh	r2, [r7, #20]
 80147de:	f107 010c 	add.w	r1, r7, #12
 80147e2:	4618      	mov	r0, r3
 80147e4:	f000 fb76 	bl	8014ed4 <sensirion_i2c_write_data>
 80147e8:	4603      	mov	r3, r0
 80147ea:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80147ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <scd30_force_recalibration+0x62>
        return local_error;
 80147f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147f8:	e005      	b.n	8014806 <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80147fa:	f242 7010 	movw	r0, #10000	@ 0x2710
 80147fe:	f000 fc55 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014802:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014806:	4618      	mov	r0, r3
 8014808:	3718      	adds	r7, #24
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	20001b5c 	.word	0x20001b5c

08014814 <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801481c:	2300      	movs	r3, #0
 801481e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014820:	4b22      	ldr	r3, [pc, #136]	@ (80148ac <scd30_get_force_recalibration_status+0x98>)
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	813b      	strh	r3, [r7, #8]
 8014826:	2300      	movs	r3, #0
 8014828:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801482a:	2300      	movs	r3, #0
 801482c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 801482e:	89b9      	ldrh	r1, [r7, #12]
 8014830:	f107 0308 	add.w	r3, r7, #8
 8014834:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014838:	4618      	mov	r0, r3
 801483a:	f000 faf8 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 801483e:	4603      	mov	r3, r0
 8014840:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014842:	4b1b      	ldr	r3, [pc, #108]	@ (80148b0 <scd30_get_force_recalibration_status+0x9c>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	89ba      	ldrh	r2, [r7, #12]
 8014848:	f107 0108 	add.w	r1, r7, #8
 801484c:	4618      	mov	r0, r3
 801484e:	f000 fb41 	bl	8014ed4 <sensirion_i2c_write_data>
 8014852:	4603      	mov	r3, r0
 8014854:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d002      	beq.n	8014864 <scd30_get_force_recalibration_status+0x50>
        return local_error;
 801485e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014862:	e01f      	b.n	80148a4 <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014864:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014868:	f000 fc20 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801486c:	4b10      	ldr	r3, [pc, #64]	@ (80148b0 <scd30_get_force_recalibration_status+0x9c>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	f107 0108 	add.w	r1, r7, #8
 8014874:	2202      	movs	r2, #2
 8014876:	4618      	mov	r0, r3
 8014878:	f000 fb3f 	bl	8014efa <sensirion_i2c_read_data_inplace>
 801487c:	4603      	mov	r3, r0
 801487e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d002      	beq.n	801488e <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 8014888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801488c:	e00a      	b.n	80148a4 <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801488e:	f107 0308 	add.w	r3, r7, #8
 8014892:	4618      	mov	r0, r3
 8014894:	f000 fa39 	bl	8014d0a <sensirion_common_bytes_to_uint16_t>
 8014898:	4603      	mov	r3, r0
 801489a:	461a      	mov	r2, r3
    *co2_ref_concentration =
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	801a      	strh	r2, [r3, #0]
    return local_error;
 80148a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3710      	adds	r7, #16
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	08024804 	.word	0x08024804
 80148b0:	20001b5c 	.word	0x20001b5c

080148b4 <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	4603      	mov	r3, r0
 80148bc:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80148be:	2300      	movs	r3, #0
 80148c0:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80148c2:	2300      	movs	r3, #0
 80148c4:	60fb      	str	r3, [r7, #12]
 80148c6:	2300      	movs	r3, #0
 80148c8:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80148ce:	8ab9      	ldrh	r1, [r7, #20]
 80148d0:	f107 030c 	add.w	r3, r7, #12
 80148d4:	f245 4203 	movw	r2, #21507	@ 0x5403
 80148d8:	4618      	mov	r0, r3
 80148da:	f000 faa8 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80148de:	4603      	mov	r3, r0
 80148e0:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80148e2:	88fa      	ldrh	r2, [r7, #6]
 80148e4:	8ab9      	ldrh	r1, [r7, #20]
 80148e6:	f107 030c 	add.w	r3, r7, #12
 80148ea:	4618      	mov	r0, r3
 80148ec:	f000 fac2 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 80148f0:	4603      	mov	r3, r0
 80148f2:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80148f4:	4b0d      	ldr	r3, [pc, #52]	@ (801492c <scd30_set_temperature_offset+0x78>)
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	8aba      	ldrh	r2, [r7, #20]
 80148fa:	f107 010c 	add.w	r1, r7, #12
 80148fe:	4618      	mov	r0, r3
 8014900:	f000 fae8 	bl	8014ed4 <sensirion_i2c_write_data>
 8014904:	4603      	mov	r3, r0
 8014906:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <scd30_set_temperature_offset+0x62>
        return local_error;
 8014910:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014914:	e005      	b.n	8014922 <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014916:	f242 7010 	movw	r0, #10000	@ 0x2710
 801491a:	f000 fbc7 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801491e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3718      	adds	r7, #24
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	20001b5c 	.word	0x20001b5c

08014930 <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014938:	2300      	movs	r3, #0
 801493a:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 801493c:	4b22      	ldr	r3, [pc, #136]	@ (80149c8 <scd30_get_temperature_offset+0x98>)
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	813b      	strh	r3, [r7, #8]
 8014942:	2300      	movs	r3, #0
 8014944:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014946:	2300      	movs	r3, #0
 8014948:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 801494a:	89b9      	ldrh	r1, [r7, #12]
 801494c:	f107 0308 	add.w	r3, r7, #8
 8014950:	f245 4203 	movw	r2, #21507	@ 0x5403
 8014954:	4618      	mov	r0, r3
 8014956:	f000 fa6a 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 801495a:	4603      	mov	r3, r0
 801495c:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801495e:	4b1b      	ldr	r3, [pc, #108]	@ (80149cc <scd30_get_temperature_offset+0x9c>)
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	89ba      	ldrh	r2, [r7, #12]
 8014964:	f107 0108 	add.w	r1, r7, #8
 8014968:	4618      	mov	r0, r3
 801496a:	f000 fab3 	bl	8014ed4 <sensirion_i2c_write_data>
 801496e:	4603      	mov	r3, r0
 8014970:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d002      	beq.n	8014980 <scd30_get_temperature_offset+0x50>
        return local_error;
 801497a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801497e:	e01f      	b.n	80149c0 <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014980:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014984:	f000 fb92 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014988:	4b10      	ldr	r3, [pc, #64]	@ (80149cc <scd30_get_temperature_offset+0x9c>)
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	f107 0108 	add.w	r1, r7, #8
 8014990:	2202      	movs	r2, #2
 8014992:	4618      	mov	r0, r3
 8014994:	f000 fab1 	bl	8014efa <sensirion_i2c_read_data_inplace>
 8014998:	4603      	mov	r3, r0
 801499a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801499c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d002      	beq.n	80149aa <scd30_get_temperature_offset+0x7a>
        return local_error;
 80149a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149a8:	e00a      	b.n	80149c0 <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80149aa:	f107 0308 	add.w	r3, r7, #8
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 f9ab 	bl	8014d0a <sensirion_common_bytes_to_uint16_t>
 80149b4:	4603      	mov	r3, r0
 80149b6:	461a      	mov	r2, r3
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	801a      	strh	r2, [r3, #0]
    return local_error;
 80149bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3710      	adds	r7, #16
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	08024804 	.word	0x08024804
 80149cc:	20001b5c 	.word	0x20001b5c

080149d0 <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80149d8:	2300      	movs	r3, #0
 80149da:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80149dc:	4b22      	ldr	r3, [pc, #136]	@ (8014a68 <scd30_get_altitude_compensation+0x98>)
 80149de:	881b      	ldrh	r3, [r3, #0]
 80149e0:	813b      	strh	r3, [r7, #8]
 80149e2:	2300      	movs	r3, #0
 80149e4:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 80149ea:	89b9      	ldrh	r1, [r7, #12]
 80149ec:	f107 0308 	add.w	r3, r7, #8
 80149f0:	f245 1202 	movw	r2, #20738	@ 0x5102
 80149f4:	4618      	mov	r0, r3
 80149f6:	f000 fa1a 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 80149fa:	4603      	mov	r3, r0
 80149fc:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80149fe:	4b1b      	ldr	r3, [pc, #108]	@ (8014a6c <scd30_get_altitude_compensation+0x9c>)
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	89ba      	ldrh	r2, [r7, #12]
 8014a04:	f107 0108 	add.w	r1, r7, #8
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f000 fa63 	bl	8014ed4 <sensirion_i2c_write_data>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d002      	beq.n	8014a20 <scd30_get_altitude_compensation+0x50>
        return local_error;
 8014a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a1e:	e01f      	b.n	8014a60 <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a20:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a24:	f000 fb42 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014a28:	4b10      	ldr	r3, [pc, #64]	@ (8014a6c <scd30_get_altitude_compensation+0x9c>)
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	f107 0108 	add.w	r1, r7, #8
 8014a30:	2202      	movs	r2, #2
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 fa61 	bl	8014efa <sensirion_i2c_read_data_inplace>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <scd30_get_altitude_compensation+0x7a>
        return local_error;
 8014a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a48:	e00a      	b.n	8014a60 <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014a4a:	f107 0308 	add.w	r3, r7, #8
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 f95b 	bl	8014d0a <sensirion_common_bytes_to_uint16_t>
 8014a54:	4603      	mov	r3, r0
 8014a56:	461a      	mov	r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	08024804 	.word	0x08024804
 8014a6c:	20001b5c 	.word	0x20001b5c

08014a70 <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b086      	sub	sp, #24
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	4603      	mov	r3, r0
 8014a78:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014a7e:	2300      	movs	r3, #0
 8014a80:	60fb      	str	r3, [r7, #12]
 8014a82:	2300      	movs	r3, #0
 8014a84:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014a86:	2300      	movs	r3, #0
 8014a88:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014a8a:	8ab9      	ldrh	r1, [r7, #20]
 8014a8c:	f107 030c 	add.w	r3, r7, #12
 8014a90:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014a94:	4618      	mov	r0, r3
 8014a96:	f000 f9ca 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014a9e:	88fa      	ldrh	r2, [r7, #6]
 8014aa0:	8ab9      	ldrh	r1, [r7, #20]
 8014aa2:	f107 030c 	add.w	r3, r7, #12
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f9e4 	bl	8014e74 <sensirion_i2c_add_uint16_t_to_buffer>
 8014aac:	4603      	mov	r3, r0
 8014aae:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8014ae8 <scd30_set_altitude_compensation+0x78>)
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	8aba      	ldrh	r2, [r7, #20]
 8014ab6:	f107 010c 	add.w	r1, r7, #12
 8014aba:	4618      	mov	r0, r3
 8014abc:	f000 fa0a 	bl	8014ed4 <sensirion_i2c_write_data>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014ac4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <scd30_set_altitude_compensation+0x62>
        return local_error;
 8014acc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014ad0:	e005      	b.n	8014ade <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014ad2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014ad6:	f000 fae9 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3718      	adds	r7, #24
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	20001b5c 	.word	0x20001b5c

08014aec <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014af6:	2300      	movs	r3, #0
 8014af8:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014afa:	4b21      	ldr	r3, [pc, #132]	@ (8014b80 <scd30_read_firmware_version+0x94>)
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	813b      	strh	r3, [r7, #8]
 8014b00:	2300      	movs	r3, #0
 8014b02:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014b04:	2300      	movs	r3, #0
 8014b06:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014b08:	89b9      	ldrh	r1, [r7, #12]
 8014b0a:	f107 0308 	add.w	r3, r7, #8
 8014b0e:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014b12:	4618      	mov	r0, r3
 8014b14:	f000 f98b 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014b1c:	4b19      	ldr	r3, [pc, #100]	@ (8014b84 <scd30_read_firmware_version+0x98>)
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	89ba      	ldrh	r2, [r7, #12]
 8014b22:	f107 0108 	add.w	r1, r7, #8
 8014b26:	4618      	mov	r0, r3
 8014b28:	f000 f9d4 	bl	8014ed4 <sensirion_i2c_write_data>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d002      	beq.n	8014b3e <scd30_read_firmware_version+0x52>
        return local_error;
 8014b38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b3c:	e01c      	b.n	8014b78 <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014b3e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014b42:	f000 fab3 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014b46:	4b0f      	ldr	r3, [pc, #60]	@ (8014b84 <scd30_read_firmware_version+0x98>)
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	f107 0108 	add.w	r1, r7, #8
 8014b4e:	2202      	movs	r2, #2
 8014b50:	4618      	mov	r0, r3
 8014b52:	f000 f9d2 	bl	8014efa <sensirion_i2c_read_data_inplace>
 8014b56:	4603      	mov	r3, r0
 8014b58:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d002      	beq.n	8014b68 <scd30_read_firmware_version+0x7c>
        return local_error;
 8014b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b66:	e007      	b.n	8014b78 <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014b68:	7a3a      	ldrb	r2, [r7, #8]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014b6e:	7a7a      	ldrb	r2, [r7, #9]
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3710      	adds	r7, #16
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	08024804 	.word	0x08024804
 8014b84:	20001b5c 	.word	0x20001b5c

08014b88 <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014b92:	2300      	movs	r3, #0
 8014b94:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014b9a:	88b9      	ldrh	r1, [r7, #4]
 8014b9c:	463b      	mov	r3, r7
 8014b9e:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f000 f943 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014bac:	4b0c      	ldr	r3, [pc, #48]	@ (8014be0 <scd30_soft_reset+0x58>)
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	88ba      	ldrh	r2, [r7, #4]
 8014bb2:	4639      	mov	r1, r7
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f000 f98d 	bl	8014ed4 <sensirion_i2c_write_data>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d002      	beq.n	8014bcc <scd30_soft_reset+0x44>
        return local_error;
 8014bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bca:	e004      	b.n	8014bd6 <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014bcc:	4805      	ldr	r0, [pc, #20]	@ (8014be4 <scd30_soft_reset+0x5c>)
 8014bce:	f000 fa6d 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	20001b5c 	.word	0x20001b5c
 8014be4:	001e8480 	.word	0x001e8480

08014be8 <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014bf2:	88f9      	ldrh	r1, [r7, #6]
 8014bf4:	463b      	mov	r3, r7
 8014bf6:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f000 f917 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014c00:	4603      	mov	r3, r0
 8014c02:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c04:	88fa      	ldrh	r2, [r7, #6]
 8014c06:	463b      	mov	r3, r7
 8014c08:	4619      	mov	r1, r3
 8014c0a:	2062      	movs	r0, #98	@ 0x62
 8014c0c:	f000 f962 	bl	8014ed4 <sensirion_i2c_write_data>
 8014c10:	4603      	mov	r3, r0
 8014c12:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d002      	beq.n	8014c22 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014c1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c20:	e003      	b.n	8014c2a <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014c22:	4804      	ldr	r0, [pc, #16]	@ (8014c34 <scd4x_stop_periodic_measurement+0x4c>)
 8014c24:	f000 fa42 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	0007a120 	.word	0x0007a120

08014c38 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014c42:	88f9      	ldrh	r1, [r7, #6]
 8014c44:	463b      	mov	r3, r7
 8014c46:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f8ef 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014c50:	4603      	mov	r3, r0
 8014c52:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c54:	88fa      	ldrh	r2, [r7, #6]
 8014c56:	463b      	mov	r3, r7
 8014c58:	4619      	mov	r1, r3
 8014c5a:	2062      	movs	r0, #98	@ 0x62
 8014c5c:	f000 f93a 	bl	8014ed4 <sensirion_i2c_write_data>
 8014c60:	4603      	mov	r3, r0
 8014c62:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <scd4x_reinit+0x3a>
        return error;
 8014c6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c70:	e004      	b.n	8014c7c <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014c72:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c76:	f000 fa19 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014c8e:	88f9      	ldrh	r1, [r7, #6]
 8014c90:	463b      	mov	r3, r7
 8014c92:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 f8c9 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014ca0:	88fa      	ldrh	r2, [r7, #6]
 8014ca2:	463b      	mov	r3, r7
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	2062      	movs	r0, #98	@ 0x62
 8014ca8:	f000 f914 	bl	8014ed4 <sensirion_i2c_write_data>
 8014cac:	4603      	mov	r3, r0
 8014cae:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014cb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <scd4x_power_down+0x3a>
        return error;
 8014cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014cbc:	e004      	b.n	8014cc8 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014cc2:	f000 f9f3 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014cc6:	2300      	movs	r3, #0
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014cda:	88f9      	ldrh	r1, [r7, #6]
 8014cdc:	1d3b      	adds	r3, r7, #4
 8014cde:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f000 f8a3 	bl	8014e2e <sensirion_i2c_add_command_to_buffer>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014cec:	88fa      	ldrh	r2, [r7, #6]
 8014cee:	1d3b      	adds	r3, r7, #4
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	2062      	movs	r0, #98	@ 0x62
 8014cf4:	f000 f8ee 	bl	8014ed4 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014cf8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014cfc:	f000 f9d6 	bl	80150ac <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014d00:	2300      	movs	r3, #0
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3708      	adds	r7, #8
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}

08014d0a <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014d0a:	b480      	push	{r7}
 8014d0c:	b083      	sub	sp, #12
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	021b      	lsls	r3, r3, #8
 8014d18:	b21a      	sxth	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	b21b      	sxth	r3, r3
 8014d22:	4313      	orrs	r3, r2
 8014d24:	b21b      	sxth	r3, r3
 8014d26:	b29b      	uxth	r3, r3
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	061a      	lsls	r2, r3, #24
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	3301      	adds	r3, #1
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	041b      	lsls	r3, r3, #16
 8014d4a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	3302      	adds	r3, #2
 8014d50:	781b      	ldrb	r3, [r3, #0]
 8014d52:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014d54:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d56:	687a      	ldr	r2, [r7, #4]
 8014d58:	3203      	adds	r2, #3
 8014d5a:	7812      	ldrb	r2, [r2, #0]
 8014d5c:	4313      	orrs	r3, r2
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	370c      	adds	r7, #12
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr

08014d6a <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b084      	sub	sp, #16
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f7ff ffde 	bl	8014d34 <sensirion_common_bytes_to_uint32_t>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	ee07 3a90 	vmov	s15, r3
}
 8014d82:	eeb0 0a67 	vmov.f32	s0, s15
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014d8c:	b480      	push	{r7}
 8014d8e:	b085      	sub	sp, #20
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	460b      	mov	r3, r1
 8014d96:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014d98:	23ff      	movs	r3, #255	@ 0xff
 8014d9a:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	81fb      	strh	r3, [r7, #14]
 8014da0:	e021      	b.n	8014de6 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014da2:	89fb      	ldrh	r3, [r7, #14]
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	4413      	add	r3, r2
 8014da8:	781a      	ldrb	r2, [r3, #0]
 8014daa:	7b7b      	ldrb	r3, [r7, #13]
 8014dac:	4053      	eors	r3, r2
 8014dae:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014db0:	2308      	movs	r3, #8
 8014db2:	733b      	strb	r3, [r7, #12]
 8014db4:	e011      	b.n	8014dda <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014db6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	da07      	bge.n	8014dce <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014dbe:	7b7b      	ldrb	r3, [r7, #13]
 8014dc0:	005b      	lsls	r3, r3, #1
 8014dc2:	b25b      	sxtb	r3, r3
 8014dc4:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014dc8:	b25b      	sxtb	r3, r3
 8014dca:	737b      	strb	r3, [r7, #13]
 8014dcc:	e002      	b.n	8014dd4 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014dce:	7b7b      	ldrb	r3, [r7, #13]
 8014dd0:	005b      	lsls	r3, r3, #1
 8014dd2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014dd4:	7b3b      	ldrb	r3, [r7, #12]
 8014dd6:	3b01      	subs	r3, #1
 8014dd8:	733b      	strb	r3, [r7, #12]
 8014dda:	7b3b      	ldrb	r3, [r7, #12]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d1ea      	bne.n	8014db6 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014de0:	89fb      	ldrh	r3, [r7, #14]
 8014de2:	3301      	adds	r3, #1
 8014de4:	81fb      	strh	r3, [r7, #14]
 8014de6:	89fa      	ldrh	r2, [r7, #14]
 8014de8:	887b      	ldrh	r3, [r7, #2]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d3d9      	bcc.n	8014da2 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014dee:	7b7b      	ldrb	r3, [r7, #13]
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3714      	adds	r7, #20
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	460b      	mov	r3, r1
 8014e06:	807b      	strh	r3, [r7, #2]
 8014e08:	4613      	mov	r3, r2
 8014e0a:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014e0c:	887b      	ldrh	r3, [r7, #2]
 8014e0e:	4619      	mov	r1, r3
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f7ff ffbb 	bl	8014d8c <sensirion_i2c_generate_crc>
 8014e16:	4603      	mov	r3, r0
 8014e18:	461a      	mov	r2, r3
 8014e1a:	787b      	ldrb	r3, [r7, #1]
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d001      	beq.n	8014e24 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014e20:	2301      	movs	r3, #1
 8014e22:	e000      	b.n	8014e26 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014e24:	2300      	movs	r3, #0
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014e2e:	b480      	push	{r7}
 8014e30:	b083      	sub	sp, #12
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	460b      	mov	r3, r1
 8014e38:	807b      	strh	r3, [r7, #2]
 8014e3a:	4613      	mov	r3, r2
 8014e3c:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014e3e:	883b      	ldrh	r3, [r7, #0]
 8014e40:	0a1b      	lsrs	r3, r3, #8
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	887b      	ldrh	r3, [r7, #2]
 8014e46:	1c59      	adds	r1, r3, #1
 8014e48:	8079      	strh	r1, [r7, #2]
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	440b      	add	r3, r1
 8014e50:	b2d2      	uxtb	r2, r2
 8014e52:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014e54:	887b      	ldrh	r3, [r7, #2]
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	807a      	strh	r2, [r7, #2]
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	4413      	add	r3, r2
 8014e60:	883a      	ldrh	r2, [r7, #0]
 8014e62:	b2d2      	uxtb	r2, r2
 8014e64:	701a      	strb	r2, [r3, #0]
    return offset;
 8014e66:	887b      	ldrh	r3, [r7, #2]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	370c      	adds	r7, #12
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e72:	4770      	bx	lr

08014e74 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	807b      	strh	r3, [r7, #2]
 8014e80:	4613      	mov	r3, r2
 8014e82:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014e84:	883b      	ldrh	r3, [r7, #0]
 8014e86:	0a1b      	lsrs	r3, r3, #8
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	887b      	ldrh	r3, [r7, #2]
 8014e8c:	1c59      	adds	r1, r3, #1
 8014e8e:	8079      	strh	r1, [r7, #2]
 8014e90:	4619      	mov	r1, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	440b      	add	r3, r1
 8014e96:	b2d2      	uxtb	r2, r2
 8014e98:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014e9a:	887b      	ldrh	r3, [r7, #2]
 8014e9c:	1c5a      	adds	r2, r3, #1
 8014e9e:	807a      	strh	r2, [r7, #2]
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	883a      	ldrh	r2, [r7, #0]
 8014ea8:	b2d2      	uxtb	r2, r2
 8014eaa:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014eac:	887b      	ldrh	r3, [r7, #2]
 8014eae:	3b02      	subs	r3, #2
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014eb4:	887b      	ldrh	r3, [r7, #2]
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	18d4      	adds	r4, r2, r3
 8014eba:	2102      	movs	r1, #2
 8014ebc:	f7ff ff66 	bl	8014d8c <sensirion_i2c_generate_crc>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	7023      	strb	r3, [r4, #0]
    offset++;
 8014ec4:	887b      	ldrh	r3, [r7, #2]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	807b      	strh	r3, [r7, #2]

    return offset;
 8014eca:	887b      	ldrh	r3, [r7, #2]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	370c      	adds	r7, #12
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd90      	pop	{r4, r7, pc}

08014ed4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4603      	mov	r3, r0
 8014edc:	6039      	str	r1, [r7, #0]
 8014ede:	71fb      	strb	r3, [r7, #7]
 8014ee0:	4613      	mov	r3, r2
 8014ee2:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014ee4:	88ba      	ldrh	r2, [r7, #4]
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
 8014ee8:	6839      	ldr	r1, [r7, #0]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f000 f8c2 	bl	8015074 <sensirion_i2c_hal_write>
 8014ef0:	4603      	mov	r3, r0
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b084      	sub	sp, #16
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	4603      	mov	r3, r0
 8014f02:	6039      	str	r1, [r7, #0]
 8014f04:	71fb      	strb	r3, [r7, #7]
 8014f06:	4613      	mov	r3, r2
 8014f08:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014f0a:	88bb      	ldrh	r3, [r7, #4]
 8014f0c:	085b      	lsrs	r3, r3, #1
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	461a      	mov	r2, r3
 8014f12:	0052      	lsls	r2, r2, #1
 8014f14:	4413      	add	r3, r2
 8014f16:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014f18:	88bb      	ldrh	r3, [r7, #4]
 8014f1a:	f003 0301 	and.w	r3, r3, #1
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d001      	beq.n	8014f28 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014f24:	2304      	movs	r3, #4
 8014f26:	e047      	b.n	8014fb8 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014f28:	897a      	ldrh	r2, [r7, #10]
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	6839      	ldr	r1, [r7, #0]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f000 f884 	bl	801503c <sensirion_i2c_hal_read>
 8014f34:	4603      	mov	r3, r0
 8014f36:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014f38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d002      	beq.n	8014f46 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014f40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f44:	e038      	b.n	8014fb8 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014f46:	2300      	movs	r3, #0
 8014f48:	81fb      	strh	r3, [r7, #14]
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	81bb      	strh	r3, [r7, #12]
 8014f4e:	e02e      	b.n	8014fae <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f50:	89fb      	ldrh	r3, [r7, #14]
 8014f52:	683a      	ldr	r2, [r7, #0]
 8014f54:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014f56:	89fb      	ldrh	r3, [r7, #14]
 8014f58:	3302      	adds	r3, #2
 8014f5a:	683a      	ldr	r2, [r7, #0]
 8014f5c:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	461a      	mov	r2, r3
 8014f62:	2102      	movs	r1, #2
 8014f64:	f7ff ff4a 	bl	8014dfc <sensirion_i2c_check_crc>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014f6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d002      	beq.n	8014f7a <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014f74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f78:	e01e      	b.n	8014fb8 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014f7a:	89fb      	ldrh	r3, [r7, #14]
 8014f7c:	683a      	ldr	r2, [r7, #0]
 8014f7e:	441a      	add	r2, r3
 8014f80:	89bb      	ldrh	r3, [r7, #12]
 8014f82:	1c59      	adds	r1, r3, #1
 8014f84:	81b9      	strh	r1, [r7, #12]
 8014f86:	4619      	mov	r1, r3
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	440b      	add	r3, r1
 8014f8c:	7812      	ldrb	r2, [r2, #0]
 8014f8e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014f90:	89fb      	ldrh	r3, [r7, #14]
 8014f92:	3301      	adds	r3, #1
 8014f94:	683a      	ldr	r2, [r7, #0]
 8014f96:	441a      	add	r2, r3
 8014f98:	89bb      	ldrh	r3, [r7, #12]
 8014f9a:	1c59      	adds	r1, r3, #1
 8014f9c:	81b9      	strh	r1, [r7, #12]
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	440b      	add	r3, r1
 8014fa4:	7812      	ldrb	r2, [r2, #0]
 8014fa6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014fa8:	89fb      	ldrh	r3, [r7, #14]
 8014faa:	3303      	adds	r3, #3
 8014fac:	81fb      	strh	r3, [r7, #14]
 8014fae:	89fa      	ldrh	r2, [r7, #14]
 8014fb0:	897b      	ldrh	r3, [r7, #10]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d3cc      	bcc.n	8014f50 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3710      	adds	r7, #16
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014fc4:	4814      	ldr	r0, [pc, #80]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fc6:	f7f1 fa19 	bl	80063fc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014fca:	4b13      	ldr	r3, [pc, #76]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fcc:	4a13      	ldr	r2, [pc, #76]	@ (801501c <sensirion_i2c_hal_init+0x5c>)
 8014fce:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014fd0:	4b11      	ldr	r3, [pc, #68]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fd2:	4a13      	ldr	r2, [pc, #76]	@ (8015020 <sensirion_i2c_hal_init+0x60>)
 8014fd4:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014fd6:	4b10      	ldr	r3, [pc, #64]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fd8:	2200      	movs	r2, #0
 8014fda:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fde:	2200      	movs	r2, #0
 8014fe0:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fe4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014fe8:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014fea:	4b0b      	ldr	r3, [pc, #44]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014fec:	2200      	movs	r2, #0
 8014fee:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8014ff0:	4b09      	ldr	r3, [pc, #36]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014ff6:	4b08      	ldr	r3, [pc, #32]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014ffc:	4b06      	ldr	r3, [pc, #24]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8014ffe:	2200      	movs	r2, #0
 8015000:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015002:	4805      	ldr	r0, [pc, #20]	@ (8015018 <sensirion_i2c_hal_init+0x58>)
 8015004:	f7f1 f8b6 	bl	8006174 <HAL_I2C_Init>
 8015008:	4603      	mov	r3, r0
 801500a:	2b00      	cmp	r3, #0
 801500c:	d001      	beq.n	8015012 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 801500e:	f7ee fb51 	bl	80036b4 <Error_Handler>
	  }
}
 8015012:	bf00      	nop
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	20001838 	.word	0x20001838
 801501c:	40005400 	.word	0x40005400
 8015020:	000186a0 	.word	0x000186a0

08015024 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8015028:	4803      	ldr	r0, [pc, #12]	@ (8015038 <sensirion_i2c_hal_free+0x14>)
 801502a:	f7f1 f9e7 	bl	80063fc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 801502e:	4802      	ldr	r0, [pc, #8]	@ (8015038 <sensirion_i2c_hal_free+0x14>)
 8015030:	f7ee fc1a 	bl	8003868 <HAL_I2C_MspDeInit>
}
 8015034:	bf00      	nop
 8015036:	bd80      	pop	{r7, pc}
 8015038:	20001838 	.word	0x20001838

0801503c <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af02      	add	r7, sp, #8
 8015042:	4603      	mov	r3, r0
 8015044:	6039      	str	r1, [r7, #0]
 8015046:	71fb      	strb	r3, [r7, #7]
 8015048:	4613      	mov	r3, r2
 801504a:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 801504c:	79fb      	ldrb	r3, [r7, #7]
 801504e:	b29b      	uxth	r3, r3
 8015050:	005b      	lsls	r3, r3, #1
 8015052:	b299      	uxth	r1, r3
 8015054:	88bb      	ldrh	r3, [r7, #4]
 8015056:	f04f 32ff 	mov.w	r2, #4294967295
 801505a:	9200      	str	r2, [sp, #0]
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	4804      	ldr	r0, [pc, #16]	@ (8015070 <sensirion_i2c_hal_read+0x34>)
 8015060:	f7f1 fafa 	bl	8006658 <HAL_I2C_Master_Receive>
 8015064:	4603      	mov	r3, r0
 8015066:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	20001838 	.word	0x20001838

08015074 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af02      	add	r7, sp, #8
 801507a:	4603      	mov	r3, r0
 801507c:	6039      	str	r1, [r7, #0]
 801507e:	71fb      	strb	r3, [r7, #7]
 8015080:	4613      	mov	r3, r2
 8015082:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	b29b      	uxth	r3, r3
 8015088:	005b      	lsls	r3, r3, #1
 801508a:	b299      	uxth	r1, r3
 801508c:	88bb      	ldrh	r3, [r7, #4]
 801508e:	f04f 32ff 	mov.w	r2, #4294967295
 8015092:	9200      	str	r2, [sp, #0]
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	4804      	ldr	r0, [pc, #16]	@ (80150a8 <sensirion_i2c_hal_write+0x34>)
 8015098:	f7f1 f9e0 	bl	800645c <HAL_I2C_Master_Transmit>
 801509c:	4603      	mov	r3, r0
 801509e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	20001838 	.word	0x20001838

080150ac <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	4a0d      	ldr	r2, [pc, #52]	@ (80150ec <sensirion_i2c_hal_sleep_usec+0x40>)
 80150b8:	fba2 2303 	umull	r2, r3, r2, r3
 80150bc:	099b      	lsrs	r3, r3, #6
 80150be:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	4b0a      	ldr	r3, [pc, #40]	@ (80150ec <sensirion_i2c_hal_sleep_usec+0x40>)
 80150c4:	fba3 1302 	umull	r1, r3, r3, r2
 80150c8:	099b      	lsrs	r3, r3, #6
 80150ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80150ce:	fb01 f303 	mul.w	r3, r1, r3
 80150d2:	1ad3      	subs	r3, r2, r3
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d002      	beq.n	80150de <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	3301      	adds	r3, #1
 80150dc:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 80150de:	68f8      	ldr	r0, [r7, #12]
 80150e0:	f7ef f83e 	bl	8004160 <HAL_Delay>
}
 80150e4:	bf00      	nop
 80150e6:	3710      	adds	r7, #16
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	10624dd3 	.word	0x10624dd3

080150f0 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	061a      	lsls	r2, r3, #24
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	3301      	adds	r3, #1
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	041b      	lsls	r3, r3, #16
 8015106:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	3302      	adds	r3, #2
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8015110:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	3203      	adds	r2, #3
 8015116:	7812      	ldrb	r2, [r2, #0]
 8015118:	4313      	orrs	r3, r2
}
 801511a:	4618      	mov	r0, r3
 801511c:	370c      	adds	r7, #12
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff ffde 	bl	80150f0 <sensirion_bytes_to_uint32_t>
 8015134:	4603      	mov	r3, r0
 8015136:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	ee07 3a90 	vmov	s15, r3
}
 801513e:	eeb0 0a67 	vmov.f32	s0, s15
 8015142:	3710      	adds	r7, #16
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	603a      	str	r2, [r7, #0]
 8015152:	71fb      	strb	r3, [r7, #7]
 8015154:	460b      	mov	r3, r1
 8015156:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8015158:	79fa      	ldrb	r2, [r7, #7]
 801515a:	79bb      	ldrb	r3, [r7, #6]
 801515c:	4413      	add	r3, r2
 801515e:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8015160:	e006      	b.n	8015170 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	1c5a      	adds	r2, r3, #1
 8015166:	603a      	str	r2, [r7, #0]
 8015168:	781a      	ldrb	r2, [r3, #0]
 801516a:	79fb      	ldrb	r3, [r7, #7]
 801516c:	4413      	add	r3, r2
 801516e:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8015170:	79bb      	ldrb	r3, [r7, #6]
 8015172:	1e5a      	subs	r2, r3, #1
 8015174:	71ba      	strb	r2, [r7, #6]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1f3      	bne.n	8015162 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 801517a:	79fb      	ldrb	r3, [r7, #7]
 801517c:	43db      	mvns	r3, r3
 801517e:	b2db      	uxtb	r3, r3
}
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 801518c:	b480      	push	{r7}
 801518e:	b087      	sub	sp, #28
 8015190:	af00      	add	r7, sp, #0
 8015192:	4603      	mov	r3, r0
 8015194:	60b9      	str	r1, [r7, #8]
 8015196:	607a      	str	r2, [r7, #4]
 8015198:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 801519a:	2300      	movs	r3, #0
 801519c:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 801519e:	e026      	b.n	80151ee <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	1c5a      	adds	r2, r3, #1
 80151a4:	60ba      	str	r2, [r7, #8]
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80151aa:	7d7b      	ldrb	r3, [r7, #21]
 80151ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80151ae:	dc16      	bgt.n	80151de <sensirion_shdlc_stuff_data+0x52>
 80151b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80151b2:	da03      	bge.n	80151bc <sensirion_shdlc_stuff_data+0x30>
 80151b4:	2b11      	cmp	r3, #17
 80151b6:	d001      	beq.n	80151bc <sensirion_shdlc_stuff_data+0x30>
 80151b8:	2b13      	cmp	r3, #19
 80151ba:	d110      	bne.n	80151de <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	1c5a      	adds	r2, r3, #1
 80151c0:	607a      	str	r2, [r7, #4]
 80151c2:	227d      	movs	r2, #125	@ 0x7d
 80151c4:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	1c5a      	adds	r2, r3, #1
 80151ca:	607a      	str	r2, [r7, #4]
 80151cc:	7d7a      	ldrb	r2, [r7, #21]
 80151ce:	f082 0220 	eor.w	r2, r2, #32
 80151d2:	b2d2      	uxtb	r2, r2
 80151d4:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 80151d6:	8afb      	ldrh	r3, [r7, #22]
 80151d8:	3302      	adds	r3, #2
 80151da:	82fb      	strh	r3, [r7, #22]
                break;
 80151dc:	e007      	b.n	80151ee <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	607a      	str	r2, [r7, #4]
 80151e4:	7d7a      	ldrb	r2, [r7, #21]
 80151e6:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 80151e8:	8afb      	ldrh	r3, [r7, #22]
 80151ea:	3301      	adds	r3, #1
 80151ec:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 80151ee:	7bfb      	ldrb	r3, [r7, #15]
 80151f0:	1e5a      	subs	r2, r3, #1
 80151f2:	73fa      	strb	r2, [r7, #15]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d1d3      	bne.n	80151a0 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 80151f8:	8afb      	ldrh	r3, [r7, #22]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	371c      	adds	r7, #28
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr

08015206 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8015206:	b480      	push	{r7}
 8015208:	b083      	sub	sp, #12
 801520a:	af00      	add	r7, sp, #0
 801520c:	4603      	mov	r3, r0
 801520e:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8015210:	79fb      	ldrb	r3, [r7, #7]
 8015212:	2b7d      	cmp	r3, #125	@ 0x7d
 8015214:	bf0c      	ite	eq
 8015216:	2301      	moveq	r3, #1
 8015218:	2300      	movne	r3, #0
 801521a:	b2db      	uxtb	r3, r3
}
 801521c:	4618      	mov	r0, r3
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	4603      	mov	r3, r0
 8015230:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8015232:	79fb      	ldrb	r3, [r7, #7]
 8015234:	2b5e      	cmp	r3, #94	@ 0x5e
 8015236:	d010      	beq.n	801525a <sensirion_shdlc_unstuff_byte+0x32>
 8015238:	2b5e      	cmp	r3, #94	@ 0x5e
 801523a:	dc10      	bgt.n	801525e <sensirion_shdlc_unstuff_byte+0x36>
 801523c:	2b5d      	cmp	r3, #93	@ 0x5d
 801523e:	d00a      	beq.n	8015256 <sensirion_shdlc_unstuff_byte+0x2e>
 8015240:	2b5d      	cmp	r3, #93	@ 0x5d
 8015242:	dc0c      	bgt.n	801525e <sensirion_shdlc_unstuff_byte+0x36>
 8015244:	2b31      	cmp	r3, #49	@ 0x31
 8015246:	d002      	beq.n	801524e <sensirion_shdlc_unstuff_byte+0x26>
 8015248:	2b33      	cmp	r3, #51	@ 0x33
 801524a:	d002      	beq.n	8015252 <sensirion_shdlc_unstuff_byte+0x2a>
 801524c:	e007      	b.n	801525e <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 801524e:	2311      	movs	r3, #17
 8015250:	e006      	b.n	8015260 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8015252:	2313      	movs	r3, #19
 8015254:	e004      	b.n	8015260 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8015256:	237d      	movs	r3, #125	@ 0x7d
 8015258:	e002      	b.n	8015260 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 801525a:	237e      	movs	r3, #126	@ 0x7e
 801525c:	e000      	b.n	8015260 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 801525e:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8015260:	4618      	mov	r0, r3
 8015262:	370c      	adds	r7, #12
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr

0801526c <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	603b      	str	r3, [r7, #0]
 8015274:	4603      	mov	r3, r0
 8015276:	71fb      	strb	r3, [r7, #7]
 8015278:	460b      	mov	r3, r1
 801527a:	71bb      	strb	r3, [r7, #6]
 801527c:	4613      	mov	r3, r2
 801527e:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8015280:	797a      	ldrb	r2, [r7, #5]
 8015282:	79b9      	ldrb	r1, [r7, #6]
 8015284:	79f8      	ldrb	r0, [r7, #7]
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	f000 f818 	bl	80152bc <sensirion_shdlc_tx>
 801528c:	4603      	mov	r3, r0
 801528e:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8015290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d002      	beq.n	801529e <sensirion_shdlc_xcv+0x32>
        return ret;
 8015298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801529c:	e00a      	b.n	80152b4 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 801529e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80152a2:	f000 fb07 	bl	80158b4 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80152a6:	7e3b      	ldrb	r3, [r7, #24]
 80152a8:	6a3a      	ldr	r2, [r7, #32]
 80152aa:	69f9      	ldr	r1, [r7, #28]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f000 f8d7 	bl	8015460 <sensirion_shdlc_rx>
 80152b2:	4603      	mov	r3, r0
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80152bc:	b590      	push	{r4, r7, lr}
 80152be:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	4604      	mov	r4, r0
 80152c6:	4608      	mov	r0, r1
 80152c8:	4611      	mov	r1, r2
 80152ca:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80152ce:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80152d2:	6013      	str	r3, [r2, #0]
 80152d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152d8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80152dc:	4622      	mov	r2, r4
 80152de:	701a      	strb	r2, [r3, #0]
 80152e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152e4:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80152e8:	4602      	mov	r2, r0
 80152ea:	701a      	strb	r2, [r3, #0]
 80152ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152f0:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152f4:	460a      	mov	r2, r1
 80152f6:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 80152f8:	2300      	movs	r3, #0
 80152fa:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 80152fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015302:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015306:	781a      	ldrb	r2, [r3, #0]
 8015308:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801530c:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	4413      	add	r3, r2
 8015314:	b2d8      	uxtb	r0, r3
 8015316:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801531a:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 801531e:	7819      	ldrb	r1, [r3, #0]
 8015320:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015324:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015328:	681a      	ldr	r2, [r3, #0]
 801532a:	f7ff ff0d 	bl	8015148 <sensirion_shdlc_crc>
 801532e:	4603      	mov	r3, r0
 8015330:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8015334:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015338:	1c5a      	adds	r2, r3, #1
 801533a:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 801533e:	461a      	mov	r2, r3
 8015340:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015344:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015348:	217e      	movs	r1, #126	@ 0x7e
 801534a:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 801534c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015350:	f107 0208 	add.w	r2, r7, #8
 8015354:	441a      	add	r2, r3
 8015356:	1dfb      	adds	r3, r7, #7
 8015358:	4619      	mov	r1, r3
 801535a:	2001      	movs	r0, #1
 801535c:	f7ff ff16 	bl	801518c <sensirion_shdlc_stuff_data>
 8015360:	4603      	mov	r3, r0
 8015362:	461a      	mov	r2, r3
 8015364:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015368:	4413      	add	r3, r2
 801536a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 801536e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015372:	f107 0208 	add.w	r2, r7, #8
 8015376:	441a      	add	r2, r3
 8015378:	1dbb      	adds	r3, r7, #6
 801537a:	4619      	mov	r1, r3
 801537c:	2001      	movs	r0, #1
 801537e:	f7ff ff05 	bl	801518c <sensirion_shdlc_stuff_data>
 8015382:	4603      	mov	r3, r0
 8015384:	461a      	mov	r2, r3
 8015386:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801538a:	4413      	add	r3, r2
 801538c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8015390:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015394:	f107 0208 	add.w	r2, r7, #8
 8015398:	441a      	add	r2, r3
 801539a:	1d7b      	adds	r3, r7, #5
 801539c:	4619      	mov	r1, r3
 801539e:	2001      	movs	r0, #1
 80153a0:	f7ff fef4 	bl	801518c <sensirion_shdlc_stuff_data>
 80153a4:	4603      	mov	r3, r0
 80153a6:	461a      	mov	r2, r3
 80153a8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153ac:	4413      	add	r3, r2
 80153ae:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80153b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153b6:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80153ba:	7818      	ldrb	r0, [r3, #0]
 80153bc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153c0:	f107 0208 	add.w	r2, r7, #8
 80153c4:	441a      	add	r2, r3
 80153c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153ca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80153ce:	6819      	ldr	r1, [r3, #0]
 80153d0:	f7ff fedc 	bl	801518c <sensirion_shdlc_stuff_data>
 80153d4:	4603      	mov	r3, r0
 80153d6:	461a      	mov	r2, r3
 80153d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153dc:	4413      	add	r3, r2
 80153de:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 80153e2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153e6:	f107 0208 	add.w	r2, r7, #8
 80153ea:	441a      	add	r2, r3
 80153ec:	f207 2313 	addw	r3, r7, #531	@ 0x213
 80153f0:	4619      	mov	r1, r3
 80153f2:	2001      	movs	r0, #1
 80153f4:	f7ff feca 	bl	801518c <sensirion_shdlc_stuff_data>
 80153f8:	4603      	mov	r3, r0
 80153fa:	461a      	mov	r2, r3
 80153fc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015400:	4413      	add	r3, r2
 8015402:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8015406:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801540a:	1c5a      	adds	r2, r3, #1
 801540c:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8015410:	461a      	mov	r2, r3
 8015412:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015416:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801541a:	217e      	movs	r1, #126	@ 0x7e
 801541c:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 801541e:	f107 0208 	add.w	r2, r7, #8
 8015422:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015426:	4611      	mov	r1, r2
 8015428:	4618      	mov	r0, r3
 801542a:	f000 f9db 	bl	80157e4 <sensirion_uart_tx>
 801542e:	4603      	mov	r3, r0
 8015430:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 8015434:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8015438:	2b00      	cmp	r3, #0
 801543a:	da02      	bge.n	8015442 <sensirion_shdlc_tx+0x186>
        return ret;
 801543c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8015440:	e009      	b.n	8015456 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8015442:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 8015446:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801544a:	429a      	cmp	r2, r3
 801544c:	d002      	beq.n	8015454 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 801544e:	f06f 0305 	mvn.w	r3, #5
 8015452:	e000      	b.n	8015456 <sensirion_shdlc_tx+0x19a>
    return 0;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 801545c:	46bd      	mov	sp, r7
 801545e:	bd90      	pop	{r4, r7, pc}

08015460 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8015460:	b590      	push	{r4, r7, lr}
 8015462:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8015466:	af00      	add	r7, sp, #0
 8015468:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801546c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015470:	6019      	str	r1, [r3, #0]
 8015472:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015476:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801547a:	601a      	str	r2, [r3, #0]
 801547c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015480:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015484:	4602      	mov	r2, r0
 8015486:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8015488:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801548c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8015496:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801549a:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	3306      	adds	r3, #6
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	f107 0210 	add.w	r2, r7, #16
 80154ac:	4611      	mov	r1, r2
 80154ae:	4618      	mov	r0, r3
 80154b0:	f000 f9d2 	bl	8015858 <sensirion_uart_rx>
 80154b4:	4603      	mov	r3, r0
 80154b6:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80154ba:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80154be:	2b00      	cmp	r3, #0
 80154c0:	dd03      	ble.n	80154ca <sensirion_shdlc_rx+0x6a>
 80154c2:	4ba0      	ldr	r3, [pc, #640]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80154c8:	d002      	beq.n	80154d0 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 80154ca:	f06f 0301 	mvn.w	r3, #1
 80154ce:	e133      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80154d0:	2300      	movs	r3, #0
 80154d2:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154d6:	2301      	movs	r3, #1
 80154d8:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80154dc:	2300      	movs	r3, #0
 80154de:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80154e2:	e03a      	b.n	801555a <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 80154e4:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d015      	beq.n	8015518 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80154ec:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154f0:	4a94      	ldr	r2, [pc, #592]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 80154f2:	5cd2      	ldrb	r2, [r2, r3]
 80154f4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154f8:	1c59      	adds	r1, r3, #1
 80154fa:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154fe:	4619      	mov	r1, r3
 8015500:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015504:	185c      	adds	r4, r3, r1
 8015506:	4610      	mov	r0, r2
 8015508:	f7ff fe8e 	bl	8015228 <sensirion_shdlc_unstuff_byte>
 801550c:	4603      	mov	r3, r0
 801550e:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8015510:	2300      	movs	r3, #0
 8015512:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015516:	e01b      	b.n	8015550 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8015518:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801551c:	4a89      	ldr	r2, [pc, #548]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 801551e:	5cd3      	ldrb	r3, [r2, r3]
 8015520:	4618      	mov	r0, r3
 8015522:	f7ff fe70 	bl	8015206 <sensirion_shdlc_check_unstuff>
 8015526:	4603      	mov	r3, r0
 8015528:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 801552c:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015530:	2b00      	cmp	r3, #0
 8015532:	d10d      	bne.n	8015550 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8015534:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015538:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801553c:	1c59      	adds	r1, r3, #1
 801553e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015542:	4619      	mov	r1, r3
 8015544:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015548:	440b      	add	r3, r1
 801554a:	497e      	ldr	r1, [pc, #504]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 801554c:	5c8a      	ldrb	r2, [r1, r2]
 801554e:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8015550:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015554:	3301      	adds	r3, #1
 8015556:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 801555a:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801555e:	2b03      	cmp	r3, #3
 8015560:	d806      	bhi.n	8015570 <sensirion_shdlc_rx+0x110>
 8015562:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015566:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801556a:	3b02      	subs	r3, #2
 801556c:	429a      	cmp	r2, r3
 801556e:	dbb9      	blt.n	80154e4 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8015570:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015574:	2b04      	cmp	r3, #4
 8015576:	d103      	bne.n	8015580 <sensirion_shdlc_rx+0x120>
 8015578:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801557c:	2b00      	cmp	r3, #0
 801557e:	d002      	beq.n	8015586 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015580:	f06f 0304 	mvn.w	r3, #4
 8015584:	e0d8      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8015586:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801558a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	78db      	ldrb	r3, [r3, #3]
 8015592:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8015596:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 801559a:	7812      	ldrb	r2, [r2, #0]
 801559c:	429a      	cmp	r2, r3
 801559e:	d202      	bcs.n	80155a6 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80155a0:	f06f 0306 	mvn.w	r3, #6
 80155a4:	e0c8      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80155a6:	2300      	movs	r3, #0
 80155a8:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80155ac:	2300      	movs	r3, #0
 80155ae:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80155b2:	e040      	b.n	8015636 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80155b4:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d018      	beq.n	80155ee <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80155bc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155c0:	4a60      	ldr	r2, [pc, #384]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 80155c2:	5cd2      	ldrb	r2, [r2, r3]
 80155c4:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80155c8:	1c59      	adds	r1, r3, #1
 80155ca:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80155ce:	4619      	mov	r1, r3
 80155d0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155d4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	185c      	adds	r4, r3, r1
 80155dc:	4610      	mov	r0, r2
 80155de:	f7ff fe23 	bl	8015228 <sensirion_shdlc_unstuff_byte>
 80155e2:	4603      	mov	r3, r0
 80155e4:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80155e6:	2300      	movs	r3, #0
 80155e8:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80155ec:	e01e      	b.n	801562c <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80155ee:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155f2:	4a54      	ldr	r2, [pc, #336]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 80155f4:	5cd3      	ldrb	r3, [r2, r3]
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7ff fe05 	bl	8015206 <sensirion_shdlc_check_unstuff>
 80155fc:	4603      	mov	r3, r0
 80155fe:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8015602:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015606:	2b00      	cmp	r3, #0
 8015608:	d110      	bne.n	801562c <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 801560a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801560e:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015612:	1c59      	adds	r1, r3, #1
 8015614:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015618:	4619      	mov	r1, r3
 801561a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801561e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	440b      	add	r3, r1
 8015626:	4947      	ldr	r1, [pc, #284]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 8015628:	5c8a      	ldrb	r2, [r1, r2]
 801562a:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801562c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015630:	3301      	adds	r3, #1
 8015632:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015636:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801563a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	78db      	ldrb	r3, [r3, #3]
 8015642:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8015646:	429a      	cmp	r2, r3
 8015648:	d206      	bcs.n	8015658 <sensirion_shdlc_rx+0x1f8>
 801564a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801564e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015652:	3b02      	subs	r3, #2
 8015654:	429a      	cmp	r2, r3
 8015656:	dbad      	blt.n	80155b4 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8015658:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801565c:	2b00      	cmp	r3, #0
 801565e:	d002      	beq.n	8015666 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015660:	f06f 0304 	mvn.w	r3, #4
 8015664:	e068      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8015666:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801566a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	78db      	ldrb	r3, [r3, #3]
 8015672:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8015676:	429a      	cmp	r2, r3
 8015678:	d202      	bcs.n	8015680 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801567a:	f06f 0304 	mvn.w	r3, #4
 801567e:	e05b      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8015680:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015684:	1c5a      	adds	r2, r3, #1
 8015686:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 801568a:	461a      	mov	r2, r3
 801568c:	4b2d      	ldr	r3, [pc, #180]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 801568e:	5c9b      	ldrb	r3, [r3, r2]
 8015690:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8015694:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff fdb4 	bl	8015206 <sensirion_shdlc_check_unstuff>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d00d      	beq.n	80156c0 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80156a4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80156a8:	1c5a      	adds	r2, r3, #1
 80156aa:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 80156ae:	461a      	mov	r2, r3
 80156b0:	4b24      	ldr	r3, [pc, #144]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 80156b2:	5c9b      	ldrb	r3, [r3, r2]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff fdb7 	bl	8015228 <sensirion_shdlc_unstuff_byte>
 80156ba:	4603      	mov	r3, r0
 80156bc:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 80156c0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156c4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	781a      	ldrb	r2, [r3, #0]
 80156cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	785b      	ldrb	r3, [r3, #1]
 80156d8:	4413      	add	r3, r2
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	789b      	ldrb	r3, [r3, #2]
 80156e8:	4413      	add	r3, r2
 80156ea:	b2d8      	uxtb	r0, r3
 80156ec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156f0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	78d9      	ldrb	r1, [r3, #3]
 80156f8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156fc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	f7ff fd21 	bl	8015148 <sensirion_shdlc_crc>
 8015706:	4603      	mov	r3, r0
 8015708:	461a      	mov	r2, r3
 801570a:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 801570e:	4293      	cmp	r3, r2
 8015710:	d002      	beq.n	8015718 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8015712:	f06f 0303 	mvn.w	r3, #3
 8015716:	e00f      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8015718:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801571c:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015720:	429a      	cmp	r2, r3
 8015722:	da05      	bge.n	8015730 <sensirion_shdlc_rx+0x2d0>
 8015724:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015728:	4a06      	ldr	r2, [pc, #24]	@ (8015744 <sensirion_shdlc_rx+0x2e4>)
 801572a:	5cd3      	ldrb	r3, [r2, r3]
 801572c:	2b7e      	cmp	r3, #126	@ 0x7e
 801572e:	d002      	beq.n	8015736 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8015730:	f06f 0302 	mvn.w	r3, #2
 8015734:	e000      	b.n	8015738 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 801573e:	46bd      	mov	sp, r7
 8015740:	bd90      	pop	{r4, r7, pc}
 8015742:	bf00      	nop
 8015744:	2000158c 	.word	0x2000158c

08015748 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8015748:	b580      	push	{r7, lr}
 801574a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 801574c:	4819      	ldr	r0, [pc, #100]	@ (80157b4 <sensirion_uart_open+0x6c>)
 801574e:	f7f6 fd69 	bl	800c224 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8015752:	4b18      	ldr	r3, [pc, #96]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015754:	4a18      	ldr	r2, [pc, #96]	@ (80157b8 <sensirion_uart_open+0x70>)
 8015756:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8015758:	4b16      	ldr	r3, [pc, #88]	@ (80157b4 <sensirion_uart_open+0x6c>)
 801575a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801575e:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8015760:	4b14      	ldr	r3, [pc, #80]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015762:	2200      	movs	r2, #0
 8015764:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8015766:	4b13      	ldr	r3, [pc, #76]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015768:	2200      	movs	r2, #0
 801576a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 801576c:	4b11      	ldr	r3, [pc, #68]	@ (80157b4 <sensirion_uart_open+0x6c>)
 801576e:	2200      	movs	r2, #0
 8015770:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8015772:	4b10      	ldr	r3, [pc, #64]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015774:	220c      	movs	r2, #12
 8015776:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015778:	4b0e      	ldr	r3, [pc, #56]	@ (80157b4 <sensirion_uart_open+0x6c>)
 801577a:	2200      	movs	r2, #0
 801577c:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801577e:	4b0d      	ldr	r3, [pc, #52]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015780:	2200      	movs	r2, #0
 8015782:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8015784:	480b      	ldr	r0, [pc, #44]	@ (80157b4 <sensirion_uart_open+0x6c>)
 8015786:	f7f6 fcfd 	bl	800c184 <HAL_UART_Init>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d001      	beq.n	8015794 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8015790:	f7ed ff90 	bl	80036b4 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8015794:	f240 220a 	movw	r2, #522	@ 0x20a
 8015798:	4908      	ldr	r1, [pc, #32]	@ (80157bc <sensirion_uart_open+0x74>)
 801579a:	4806      	ldr	r0, [pc, #24]	@ (80157b4 <sensirion_uart_open+0x6c>)
 801579c:	f7f6 fe24 	bl	800c3e8 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80157a0:	4b07      	ldr	r3, [pc, #28]	@ (80157c0 <sensirion_uart_open+0x78>)
 80157a2:	2200      	movs	r2, #0
 80157a4:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80157a6:	4b07      	ldr	r3, [pc, #28]	@ (80157c4 <sensirion_uart_open+0x7c>)
 80157a8:	2200      	movs	r2, #0
 80157aa:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80157ac:	2300      	movs	r3, #0
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	bd80      	pop	{r7, pc}
 80157b2:	bf00      	nop
 80157b4:	20001abc 	.word	0x20001abc
 80157b8:	40004400 	.word	0x40004400
 80157bc:	2000158c 	.word	0x2000158c
 80157c0:	20001b5e 	.word	0x20001b5e
 80157c4:	20001b60 	.word	0x20001b60

080157c8 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 80157c8:	b580      	push	{r7, lr}
 80157ca:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 80157cc:	4804      	ldr	r0, [pc, #16]	@ (80157e0 <sensirion_uart_close+0x18>)
 80157ce:	f7f6 fd29 	bl	800c224 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 80157d2:	4803      	ldr	r0, [pc, #12]	@ (80157e0 <sensirion_uart_close+0x18>)
 80157d4:	f7ee fa90 	bl	8003cf8 <HAL_UART_MspDeInit>
    return 0;
 80157d8:	2300      	movs	r3, #0
}
 80157da:	4618      	mov	r0, r3
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	20001abc 	.word	0x20001abc

080157e4 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	4603      	mov	r3, r0
 80157ec:	6039      	str	r1, [r7, #0]
 80157ee:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 80157f0:	88fa      	ldrh	r2, [r7, #6]
 80157f2:	f04f 33ff 	mov.w	r3, #4294967295
 80157f6:	6839      	ldr	r1, [r7, #0]
 80157f8:	4807      	ldr	r0, [pc, #28]	@ (8015818 <sensirion_uart_tx+0x34>)
 80157fa:	f7f6 fd45 	bl	800c288 <HAL_UART_Transmit>
 80157fe:	4603      	mov	r3, r0
 8015800:	2b00      	cmp	r3, #0
 8015802:	d102      	bne.n	801580a <sensirion_uart_tx+0x26>
		{
			return data_len;
 8015804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015808:	e001      	b.n	801580e <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 801580a:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 801580e:	4618      	mov	r0, r3
 8015810:	3708      	adds	r7, #8
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	20001abc 	.word	0x20001abc

0801581c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b082      	sub	sp, #8
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	460b      	mov	r3, r1
 8015826:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8015828:	4a07      	ldr	r2, [pc, #28]	@ (8015848 <HAL_UARTEx_RxEventCallback+0x2c>)
 801582a:	887b      	ldrh	r3, [r7, #2]
 801582c:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 801582e:	4b07      	ldr	r3, [pc, #28]	@ (801584c <HAL_UARTEx_RxEventCallback+0x30>)
 8015830:	2201      	movs	r2, #1
 8015832:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8015834:	f240 220a 	movw	r2, #522	@ 0x20a
 8015838:	4905      	ldr	r1, [pc, #20]	@ (8015850 <HAL_UARTEx_RxEventCallback+0x34>)
 801583a:	4806      	ldr	r0, [pc, #24]	@ (8015854 <HAL_UARTEx_RxEventCallback+0x38>)
 801583c:	f7f6 fdd4 	bl	800c3e8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	20001b5e 	.word	0x20001b5e
 801584c:	20001b62 	.word	0x20001b62
 8015850:	2000158c 	.word	0x2000158c
 8015854:	20001abc 	.word	0x20001abc

08015858 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	4603      	mov	r3, r0
 8015860:	6039      	str	r1, [r7, #0]
 8015862:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8015864:	2300      	movs	r3, #0
 8015866:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8015868:	e005      	b.n	8015876 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	3301      	adds	r3, #1
 801586e:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8015870:	200a      	movs	r0, #10
 8015872:	f7ee fc75 	bl	8004160 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8015876:	4b0b      	ldr	r3, [pc, #44]	@ (80158a4 <sensirion_uart_rx+0x4c>)
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d102      	bne.n	8015884 <sensirion_uart_rx+0x2c>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2b02      	cmp	r3, #2
 8015882:	d9f2      	bls.n	801586a <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8015884:	4b07      	ldr	r3, [pc, #28]	@ (80158a4 <sensirion_uart_rx+0x4c>)
 8015886:	2200      	movs	r2, #0
 8015888:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 801588a:	4b07      	ldr	r3, [pc, #28]	@ (80158a8 <sensirion_uart_rx+0x50>)
 801588c:	2200      	movs	r2, #0
 801588e:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8015890:	4b06      	ldr	r3, [pc, #24]	@ (80158ac <sensirion_uart_rx+0x54>)
 8015892:	2200      	movs	r2, #0
 8015894:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8015896:	4b06      	ldr	r3, [pc, #24]	@ (80158b0 <sensirion_uart_rx+0x58>)
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	b21b      	sxth	r3, r3
	//return i;
}
 801589c:	4618      	mov	r0, r3
 801589e:	3710      	adds	r7, #16
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	20001b62 	.word	0x20001b62
 80158a8:	20001b64 	.word	0x20001b64
 80158ac:	20001b60 	.word	0x20001b60
 80158b0:	20001b5e 	.word	0x20001b5e

080158b4 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4a06      	ldr	r2, [pc, #24]	@ (80158d8 <sensirion_sleep_usec+0x24>)
 80158c0:	fba2 2303 	umull	r2, r3, r2, r3
 80158c4:	099b      	lsrs	r3, r3, #6
 80158c6:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7ee fc49 	bl	8004160 <HAL_Delay>
}
 80158ce:	bf00      	nop
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	10624dd3 	.word	0x10624dd3

080158dc <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80158dc:	b580      	push	{r7, lr}
 80158de:	b08a      	sub	sp, #40	@ 0x28
 80158e0:	af04      	add	r7, sp, #16
 80158e2:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80158e4:	2303      	movs	r3, #3
 80158e6:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 80158e8:	f107 020c 	add.w	r2, r7, #12
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	9302      	str	r3, [sp, #8]
 80158f0:	f107 0310 	add.w	r3, r7, #16
 80158f4:	9301      	str	r3, [sp, #4]
 80158f6:	2320      	movs	r3, #32
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	4613      	mov	r3, r2
 80158fc:	2201      	movs	r2, #1
 80158fe:	21d0      	movs	r1, #208	@ 0xd0
 8015900:	2000      	movs	r0, #0
 8015902:	f7ff fcb3 	bl	801526c <sensirion_shdlc_xcv>
 8015906:	4603      	mov	r3, r0
 8015908:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 801590a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801590e:	2b00      	cmp	r3, #0
 8015910:	da02      	bge.n	8015918 <sps30_get_serial+0x3c>
        return ret;
 8015912:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015916:	e009      	b.n	801592c <sps30_get_serial+0x50>

    if (header.state)
 8015918:	7cbb      	ldrb	r3, [r7, #18]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d005      	beq.n	801592a <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 801591e:	7cbb      	ldrb	r3, [r7, #18]
 8015920:	b21b      	sxth	r3, r3
 8015922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015926:	b21b      	sxth	r3, r3
 8015928:	e000      	b.n	801592c <sps30_get_serial+0x50>

    return 0;
 801592a:	2300      	movs	r3, #0
}
 801592c:	4618      	mov	r0, r3
 801592e:	3718      	adds	r7, #24
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8015934:	b580      	push	{r7, lr}
 8015936:	b086      	sub	sp, #24
 8015938:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 801593a:	f240 3301 	movw	r3, #769	@ 0x301
 801593e:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8015940:	463a      	mov	r2, r7
 8015942:	2300      	movs	r3, #0
 8015944:	9302      	str	r3, [sp, #8]
 8015946:	1d3b      	adds	r3, r7, #4
 8015948:	9301      	str	r3, [sp, #4]
 801594a:	2300      	movs	r3, #0
 801594c:	9300      	str	r3, [sp, #0]
 801594e:	4613      	mov	r3, r2
 8015950:	2202      	movs	r2, #2
 8015952:	2100      	movs	r1, #0
 8015954:	2000      	movs	r0, #0
 8015956:	f7ff fc89 	bl	801526c <sensirion_shdlc_xcv>
 801595a:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 801595c:	4618      	mov	r0, r3
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <sps30_read_measurement>:

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8015964:	b580      	push	{r7, lr}
 8015966:	b092      	sub	sp, #72	@ 0x48
 8015968:	af04      	add	r7, sp, #16
 801596a:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 801596c:	f107 0308 	add.w	r3, r7, #8
 8015970:	9302      	str	r3, [sp, #8]
 8015972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	2328      	movs	r3, #40	@ 0x28
 801597a:	9300      	str	r3, [sp, #0]
 801597c:	2300      	movs	r3, #0
 801597e:	2200      	movs	r2, #0
 8015980:	2103      	movs	r1, #3
 8015982:	2000      	movs	r0, #0
 8015984:	f7ff fc72 	bl	801526c <sensirion_shdlc_xcv>
 8015988:	4603      	mov	r3, r0
 801598a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 801598c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015990:	2b00      	cmp	r3, #0
 8015992:	d002      	beq.n	801599a <sps30_read_measurement+0x36>
        return error;
 8015994:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015998:	e07f      	b.n	8015a9a <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 801599a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801599e:	2b28      	cmp	r3, #40	@ 0x28
 80159a0:	d002      	beq.n	80159a8 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80159a2:	f04f 33ff 	mov.w	r3, #4294967295
 80159a6:	e078      	b.n	8015a9a <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80159a8:	f107 0308 	add.w	r3, r7, #8
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7ff fbba 	bl	8015126 <sensirion_bytes_to_float>
 80159b2:	eef0 7a40 	vmov.f32	s15, s0
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80159bc:	f107 0308 	add.w	r3, r7, #8
 80159c0:	3304      	adds	r3, #4
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ff fbaf 	bl	8015126 <sensirion_bytes_to_float>
 80159c8:	eef0 7a40 	vmov.f32	s15, s0
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 80159d2:	f107 0308 	add.w	r3, r7, #8
 80159d6:	3308      	adds	r3, #8
 80159d8:	4618      	mov	r0, r3
 80159da:	f7ff fba4 	bl	8015126 <sensirion_bytes_to_float>
 80159de:	eef0 7a40 	vmov.f32	s15, s0
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80159e8:	f107 0308 	add.w	r3, r7, #8
 80159ec:	330c      	adds	r3, #12
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7ff fb99 	bl	8015126 <sensirion_bytes_to_float>
 80159f4:	eef0 7a40 	vmov.f32	s15, s0
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80159fe:	f107 0308 	add.w	r3, r7, #8
 8015a02:	3310      	adds	r3, #16
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ff fb8e 	bl	8015126 <sensirion_bytes_to_float>
 8015a0a:	eef0 7a40 	vmov.f32	s15, s0
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8015a14:	f107 0308 	add.w	r3, r7, #8
 8015a18:	3314      	adds	r3, #20
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7ff fb83 	bl	8015126 <sensirion_bytes_to_float>
 8015a20:	eef0 7a40 	vmov.f32	s15, s0
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8015a2a:	f107 0308 	add.w	r3, r7, #8
 8015a2e:	3318      	adds	r3, #24
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7ff fb78 	bl	8015126 <sensirion_bytes_to_float>
 8015a36:	eef0 7a40 	vmov.f32	s15, s0
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8015a40:	f107 0308 	add.w	r3, r7, #8
 8015a44:	331c      	adds	r3, #28
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7ff fb6d 	bl	8015126 <sensirion_bytes_to_float>
 8015a4c:	eef0 7a40 	vmov.f32	s15, s0
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8015a56:	f107 0308 	add.w	r3, r7, #8
 8015a5a:	3320      	adds	r3, #32
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7ff fb62 	bl	8015126 <sensirion_bytes_to_float>
 8015a62:	eef0 7a40 	vmov.f32	s15, s0
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8015a6c:	f107 0308 	add.w	r3, r7, #8
 8015a70:	3324      	adds	r3, #36	@ 0x24
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff fb57 	bl	8015126 <sensirion_bytes_to_float>
 8015a78:	eef0 7a40 	vmov.f32	s15, s0
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8015a82:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d006      	beq.n	8015a98 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8015a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a8e:	b21b      	sxth	r3, r3
 8015a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a94:	b21b      	sxth	r3, r3
 8015a96:	e000      	b.n	8015a9a <sps30_read_measurement+0x136>
    }

    return 0;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3738      	adds	r7, #56	@ 0x38
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b086      	sub	sp, #24
 8015aa6:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	9302      	str	r3, [sp, #8]
 8015aac:	1d3b      	adds	r3, r7, #4
 8015aae:	9301      	str	r3, [sp, #4]
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2156      	movs	r1, #86	@ 0x56
 8015aba:	2000      	movs	r0, #0
 8015abc:	f7ff fbd6 	bl	801526c <sensirion_shdlc_xcv>
 8015ac0:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}

08015aca <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b08a      	sub	sp, #40	@ 0x28
 8015ace:	af04      	add	r7, sp, #16
 8015ad0:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015ad2:	f107 0308 	add.w	r3, r7, #8
 8015ad6:	9302      	str	r3, [sp, #8]
 8015ad8:	f107 0310 	add.w	r3, r7, #16
 8015adc:	9301      	str	r3, [sp, #4]
 8015ade:	2307      	movs	r3, #7
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	21d1      	movs	r1, #209	@ 0xd1
 8015ae8:	2000      	movs	r0, #0
 8015aea:	f7ff fbbf 	bl	801526c <sensirion_shdlc_xcv>
 8015aee:	4603      	mov	r3, r0
 8015af0:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d002      	beq.n	8015b00 <sps30_read_version+0x36>
        return error;
 8015afa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015afe:	e01f      	b.n	8015b40 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015b00:	7cfb      	ldrb	r3, [r7, #19]
 8015b02:	2b07      	cmp	r3, #7
 8015b04:	d002      	beq.n	8015b0c <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015b06:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0a:	e019      	b.n	8015b40 <sps30_read_version+0x76>
    }

    if (header.state) {
 8015b0c:	7cbb      	ldrb	r3, [r7, #18]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d005      	beq.n	8015b1e <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015b12:	7cbb      	ldrb	r3, [r7, #18]
 8015b14:	b21b      	sxth	r3, r3
 8015b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015b1a:	b21b      	sxth	r3, r3
 8015b1c:	e010      	b.n	8015b40 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015b1e:	7a3a      	ldrb	r2, [r7, #8]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015b24:	7a7a      	ldrb	r2, [r7, #9]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015b2a:	7afa      	ldrb	r2, [r7, #11]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015b30:	7b7a      	ldrb	r2, [r7, #13]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015b36:	7bba      	ldrb	r2, [r7, #14]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	711a      	strb	r2, [r3, #4]

    return error;
 8015b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3718      	adds	r7, #24
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	460b      	mov	r3, r1
 8015b52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b54:	f640 0074 	movw	r0, #2164	@ 0x874
 8015b58:	f007 fe7a 	bl	801d850 <USBD_static_malloc>
 8015b5c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d109      	bne.n	8015b78 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	32b0      	adds	r2, #176	@ 0xb0
 8015b6e:	2100      	movs	r1, #0
 8015b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b74:	2302      	movs	r3, #2
 8015b76:	e06e      	b.n	8015c56 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	32b0      	adds	r2, #176	@ 0xb0
 8015b82:	68f9      	ldr	r1, [r7, #12]
 8015b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	32b0      	adds	r2, #176	@ 0xb0
 8015b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	7c1b      	ldrb	r3, [r3, #16]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d12b      	bne.n	8015bfc <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8015c60 <USBD_MSC_Init+0x118>)
 8015ba6:	7819      	ldrb	r1, [r3, #0]
 8015ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bac:	2202      	movs	r2, #2
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f007 fd0b 	bl	801d5ca <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8015c60 <USBD_MSC_Init+0x118>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	f003 020f 	and.w	r2, r3, #15
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	440b      	add	r3, r1
 8015bc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bcc:	2201      	movs	r2, #1
 8015bce:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015bd0:	4b24      	ldr	r3, [pc, #144]	@ (8015c64 <USBD_MSC_Init+0x11c>)
 8015bd2:	7819      	ldrb	r1, [r3, #0]
 8015bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bd8:	2202      	movs	r2, #2
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f007 fcf5 	bl	801d5ca <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015be0:	4b20      	ldr	r3, [pc, #128]	@ (8015c64 <USBD_MSC_Init+0x11c>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	f003 020f 	and.w	r2, r3, #15
 8015be8:	6879      	ldr	r1, [r7, #4]
 8015bea:	4613      	mov	r3, r2
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	4413      	add	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3324      	adds	r3, #36	@ 0x24
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	801a      	strh	r2, [r3, #0]
 8015bfa:	e028      	b.n	8015c4e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bfc:	4b18      	ldr	r3, [pc, #96]	@ (8015c60 <USBD_MSC_Init+0x118>)
 8015bfe:	7819      	ldrb	r1, [r3, #0]
 8015c00:	2340      	movs	r3, #64	@ 0x40
 8015c02:	2202      	movs	r2, #2
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f007 fce0 	bl	801d5ca <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015c0a:	4b15      	ldr	r3, [pc, #84]	@ (8015c60 <USBD_MSC_Init+0x118>)
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	f003 020f 	and.w	r2, r3, #15
 8015c12:	6879      	ldr	r1, [r7, #4]
 8015c14:	4613      	mov	r3, r2
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	4413      	add	r3, r2
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	440b      	add	r3, r1
 8015c1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c22:	2201      	movs	r2, #1
 8015c24:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015c26:	4b0f      	ldr	r3, [pc, #60]	@ (8015c64 <USBD_MSC_Init+0x11c>)
 8015c28:	7819      	ldrb	r1, [r3, #0]
 8015c2a:	2340      	movs	r3, #64	@ 0x40
 8015c2c:	2202      	movs	r2, #2
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f007 fccb 	bl	801d5ca <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015c34:	4b0b      	ldr	r3, [pc, #44]	@ (8015c64 <USBD_MSC_Init+0x11c>)
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	f003 020f 	and.w	r2, r3, #15
 8015c3c:	6879      	ldr	r1, [r7, #4]
 8015c3e:	4613      	mov	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	4413      	add	r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	440b      	add	r3, r1
 8015c48:	3324      	adds	r3, #36	@ 0x24
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f000 fa2c 	bl	80160ac <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3710      	adds	r7, #16
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	200000af 	.word	0x200000af
 8015c64:	200000ae 	.word	0x200000ae

08015c68 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015c74:	4b26      	ldr	r3, [pc, #152]	@ (8015d10 <USBD_MSC_DeInit+0xa8>)
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	4619      	mov	r1, r3
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f007 fccb 	bl	801d616 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015c80:	4b23      	ldr	r3, [pc, #140]	@ (8015d10 <USBD_MSC_DeInit+0xa8>)
 8015c82:	781b      	ldrb	r3, [r3, #0]
 8015c84:	f003 020f 	and.w	r2, r3, #15
 8015c88:	6879      	ldr	r1, [r7, #4]
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	440b      	add	r3, r1
 8015c94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c98:	2200      	movs	r2, #0
 8015c9a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8015d14 <USBD_MSC_DeInit+0xac>)
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f007 fcb7 	bl	801d616 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8015d14 <USBD_MSC_DeInit+0xac>)
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	f003 020f 	and.w	r2, r3, #15
 8015cb0:	6879      	ldr	r1, [r7, #4]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	4413      	add	r3, r2
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	440b      	add	r3, r1
 8015cbc:	3324      	adds	r3, #36	@ 0x24
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	32b0      	adds	r2, #176	@ 0xb0
 8015ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d018      	beq.n	8015d06 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f000 fa67 	bl	80161a8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	32b0      	adds	r2, #176	@ 0xb0
 8015ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f007 fdbf 	bl	801d86c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	32b0      	adds	r2, #176	@ 0xb0
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2200      	movs	r2, #0
 8015d02:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d06:	2300      	movs	r3, #0
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3708      	adds	r7, #8
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}
 8015d10:	200000af 	.word	0x200000af
 8015d14:	200000ae 	.word	0x200000ae

08015d18 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b086      	sub	sp, #24
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	32b0      	adds	r2, #176	@ 0xb0
 8015d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d30:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d32:	2300      	movs	r3, #0
 8015d34:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015d36:	2300      	movs	r3, #0
 8015d38:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d101      	bne.n	8015d44 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015d40:	2303      	movs	r3, #3
 8015d42:	e0e1      	b.n	8015f08 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d053      	beq.n	8015df8 <USBD_MSC_Setup+0xe0>
 8015d50:	2b20      	cmp	r3, #32
 8015d52:	f040 80d1 	bne.w	8015ef8 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	785b      	ldrb	r3, [r3, #1]
 8015d5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8015d5c:	d002      	beq.n	8015d64 <USBD_MSC_Setup+0x4c>
 8015d5e:	2bff      	cmp	r3, #255	@ 0xff
 8015d60:	d02a      	beq.n	8015db8 <USBD_MSC_Setup+0xa0>
 8015d62:	e041      	b.n	8015de8 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	885b      	ldrh	r3, [r3, #2]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d11e      	bne.n	8015daa <USBD_MSC_Setup+0x92>
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	88db      	ldrh	r3, [r3, #6]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d11a      	bne.n	8015daa <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	da15      	bge.n	8015daa <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	33b0      	adds	r3, #176	@ 0xb0
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	4413      	add	r3, r2
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	699b      	ldr	r3, [r3, #24]
 8015d90:	4798      	blx	r3
 8015d92:	4603      	mov	r3, r0
 8015d94:	461a      	mov	r2, r3
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	4619      	mov	r1, r3
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f003 f979 	bl	8019098 <USBD_CtlSendData>
 8015da6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015da8:	e025      	b.n	8015df6 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015daa:	6839      	ldr	r1, [r7, #0]
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f003 f902 	bl	8018fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015db2:	2303      	movs	r3, #3
 8015db4:	75fb      	strb	r3, [r7, #23]
          break;
 8015db6:	e01e      	b.n	8015df6 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	885b      	ldrh	r3, [r3, #2]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d10c      	bne.n	8015dda <USBD_MSC_Setup+0xc2>
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	88db      	ldrh	r3, [r3, #6]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d108      	bne.n	8015dda <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	db03      	blt.n	8015dda <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f000 f9b4 	bl	8016140 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015dd8:	e00d      	b.n	8015df6 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015dda:	6839      	ldr	r1, [r7, #0]
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f003 f8ea 	bl	8018fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015de2:	2303      	movs	r3, #3
 8015de4:	75fb      	strb	r3, [r7, #23]
          break;
 8015de6:	e006      	b.n	8015df6 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015de8:	6839      	ldr	r1, [r7, #0]
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f003 f8e3 	bl	8018fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8015df0:	2303      	movs	r3, #3
 8015df2:	75fb      	strb	r3, [r7, #23]
          break;
 8015df4:	bf00      	nop
      }
      break;
 8015df6:	e086      	b.n	8015f06 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	785b      	ldrb	r3, [r3, #1]
 8015dfc:	2b0b      	cmp	r3, #11
 8015dfe:	d872      	bhi.n	8015ee6 <USBD_MSC_Setup+0x1ce>
 8015e00:	a201      	add	r2, pc, #4	@ (adr r2, 8015e08 <USBD_MSC_Setup+0xf0>)
 8015e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e06:	bf00      	nop
 8015e08:	08015e39 	.word	0x08015e39
 8015e0c:	08015eb5 	.word	0x08015eb5
 8015e10:	08015ee7 	.word	0x08015ee7
 8015e14:	08015ee7 	.word	0x08015ee7
 8015e18:	08015ee7 	.word	0x08015ee7
 8015e1c:	08015ee7 	.word	0x08015ee7
 8015e20:	08015ee7 	.word	0x08015ee7
 8015e24:	08015ee7 	.word	0x08015ee7
 8015e28:	08015ee7 	.word	0x08015ee7
 8015e2c:	08015ee7 	.word	0x08015ee7
 8015e30:	08015e63 	.word	0x08015e63
 8015e34:	08015e8d 	.word	0x08015e8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	2b03      	cmp	r3, #3
 8015e42:	d107      	bne.n	8015e54 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e44:	f107 030e 	add.w	r3, r7, #14
 8015e48:	2202      	movs	r2, #2
 8015e4a:	4619      	mov	r1, r3
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f003 f923 	bl	8019098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e52:	e050      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e54:	6839      	ldr	r1, [r7, #0]
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f003 f8ad 	bl	8018fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e5c:	2303      	movs	r3, #3
 8015e5e:	75fb      	strb	r3, [r7, #23]
          break;
 8015e60:	e049      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e68:	b2db      	uxtb	r3, r3
 8015e6a:	2b03      	cmp	r3, #3
 8015e6c:	d107      	bne.n	8015e7e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	3304      	adds	r3, #4
 8015e72:	2201      	movs	r2, #1
 8015e74:	4619      	mov	r1, r3
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f003 f90e 	bl	8019098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e7c:	e03b      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e7e:	6839      	ldr	r1, [r7, #0]
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f003 f898 	bl	8018fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e86:	2303      	movs	r3, #3
 8015e88:	75fb      	strb	r3, [r7, #23]
          break;
 8015e8a:	e034      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	2b03      	cmp	r3, #3
 8015e96:	d106      	bne.n	8015ea6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	885b      	ldrh	r3, [r3, #2]
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ea4:	e027      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f003 f884 	bl	8018fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015eae:	2303      	movs	r3, #3
 8015eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8015eb2:	e020      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eba:	b2db      	uxtb	r3, r3
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	d119      	bne.n	8015ef4 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	885b      	ldrh	r3, [r3, #2]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d115      	bne.n	8015ef4 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	889b      	ldrh	r3, [r3, #4]
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	4619      	mov	r1, r3
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f007 fbbf 	bl	801d654 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	889b      	ldrh	r3, [r3, #4]
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	4619      	mov	r1, r3
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fb2e 	bl	8016540 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015ee4:	e006      	b.n	8015ef4 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015ee6:	6839      	ldr	r1, [r7, #0]
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f003 f864 	bl	8018fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8015eee:	2303      	movs	r3, #3
 8015ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8015ef2:	e000      	b.n	8015ef6 <USBD_MSC_Setup+0x1de>
          break;
 8015ef4:	bf00      	nop
      }
      break;
 8015ef6:	e006      	b.n	8015f06 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f003 f85b 	bl	8018fb6 <USBD_CtlError>
      ret = USBD_FAIL;
 8015f00:	2303      	movs	r3, #3
 8015f02:	75fb      	strb	r3, [r7, #23]
      break;
 8015f04:	bf00      	nop
  }

  return (uint8_t)ret;
 8015f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3718      	adds	r7, #24
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}

08015f10 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
 8015f18:	460b      	mov	r3, r1
 8015f1a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015f1c:	78fb      	ldrb	r3, [r7, #3]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 f959 	bl	80161d8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015f26:	2300      	movs	r3, #0
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	460b      	mov	r3, r1
 8015f3a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015f3c:	78fb      	ldrb	r3, [r7, #3]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 f983 	bl	801624c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3708      	adds	r7, #8
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f58:	2181      	movs	r1, #129	@ 0x81
 8015f5a:	4812      	ldr	r0, [pc, #72]	@ (8015fa4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f5c:	f002 f9f5 	bl	801834a <USBD_GetEpDesc>
 8015f60:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f62:	2101      	movs	r1, #1
 8015f64:	480f      	ldr	r0, [pc, #60]	@ (8015fa4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f66:	f002 f9f0 	bl	801834a <USBD_GetEpDesc>
 8015f6a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d006      	beq.n	8015f80 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	2200      	movs	r2, #0
 8015f76:	711a      	strb	r2, [r3, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	f042 0202 	orr.w	r2, r2, #2
 8015f7e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d006      	beq.n	8015f94 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	711a      	strb	r2, [r3, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f042 0202 	orr.w	r2, r2, #2
 8015f92:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2220      	movs	r2, #32
 8015f98:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f9a:	4b02      	ldr	r3, [pc, #8]	@ (8015fa4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	20000084 	.word	0x20000084

08015fa8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015fb0:	2181      	movs	r1, #129	@ 0x81
 8015fb2:	4812      	ldr	r0, [pc, #72]	@ (8015ffc <USBD_MSC_GetFSCfgDesc+0x54>)
 8015fb4:	f002 f9c9 	bl	801834a <USBD_GetEpDesc>
 8015fb8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015fba:	2101      	movs	r1, #1
 8015fbc:	480f      	ldr	r0, [pc, #60]	@ (8015ffc <USBD_MSC_GetFSCfgDesc+0x54>)
 8015fbe:	f002 f9c4 	bl	801834a <USBD_GetEpDesc>
 8015fc2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d006      	beq.n	8015fd8 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fd2:	711a      	strb	r2, [r3, #4]
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d006      	beq.n	8015fec <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fe6:	711a      	strb	r2, [r3, #4]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2220      	movs	r2, #32
 8015ff0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015ff2:	4b02      	ldr	r3, [pc, #8]	@ (8015ffc <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3710      	adds	r7, #16
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}
 8015ffc:	20000084 	.word	0x20000084

08016000 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8016008:	2181      	movs	r1, #129	@ 0x81
 801600a:	4812      	ldr	r0, [pc, #72]	@ (8016054 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801600c:	f002 f99d 	bl	801834a <USBD_GetEpDesc>
 8016010:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8016012:	2101      	movs	r1, #1
 8016014:	480f      	ldr	r0, [pc, #60]	@ (8016054 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8016016:	f002 f998 	bl	801834a <USBD_GetEpDesc>
 801601a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d006      	beq.n	8016030 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	2200      	movs	r2, #0
 8016026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801602a:	711a      	strb	r2, [r3, #4]
 801602c:	2200      	movs	r2, #0
 801602e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d006      	beq.n	8016044 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	2200      	movs	r2, #0
 801603a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801603e:	711a      	strb	r2, [r3, #4]
 8016040:	2200      	movs	r2, #0
 8016042:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2220      	movs	r2, #32
 8016048:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801604a:	4b02      	ldr	r3, [pc, #8]	@ (8016054 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801604c:	4618      	mov	r0, r3
 801604e:	3710      	adds	r7, #16
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	20000084 	.word	0x20000084

08016058 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	220a      	movs	r2, #10
 8016064:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8016066:	4b03      	ldr	r3, [pc, #12]	@ (8016074 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016068:	4618      	mov	r0, r3
 801606a:	370c      	adds	r7, #12
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr
 8016074:	200000a4 	.word	0x200000a4

08016078 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8016078:	b480      	push	{r7}
 801607a:	b083      	sub	sp, #12
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016088:	2303      	movs	r3, #3
 801608a:	e009      	b.n	80160a0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	33b0      	adds	r3, #176	@ 0xb0
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	4413      	add	r3, r2
 801609a:	683a      	ldr	r2, [r7, #0]
 801609c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	370c      	adds	r7, #12
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr

080160ac <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	32b0      	adds	r2, #176	@ 0xb0
 80160be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d032      	beq.n	8016130 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2200      	movs	r2, #0
 80160ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2200      	movs	r2, #0
 80160d4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2200      	movs	r2, #0
 80160da:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2200      	movs	r2, #0
 80160e2:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2200      	movs	r2, #0
 80160ea:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	33b0      	adds	r3, #176	@ 0xb0
 80160f8:	009b      	lsls	r3, r3, #2
 80160fa:	4413      	add	r3, r2
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2000      	movs	r0, #0
 8016102:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8016104:	4b0c      	ldr	r3, [pc, #48]	@ (8016138 <MSC_BOT_Init+0x8c>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	4619      	mov	r1, r3
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f007 faa2 	bl	801d654 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8016110:	4b0a      	ldr	r3, [pc, #40]	@ (801613c <MSC_BOT_Init+0x90>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	4619      	mov	r1, r3
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f007 fa9c 	bl	801d654 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801611c:	4b06      	ldr	r3, [pc, #24]	@ (8016138 <MSC_BOT_Init+0x8c>)
 801611e:	7819      	ldrb	r1, [r3, #0]
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016126:	231f      	movs	r3, #31
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f007 fb5c 	bl	801d7e6 <USBD_LL_PrepareReceive>
 801612e:	e000      	b.n	8016132 <MSC_BOT_Init+0x86>
    return;
 8016130:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016132:	3710      	adds	r7, #16
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	200000af 	.word	0x200000af
 801613c:	200000ae 	.word	0x200000ae

08016140 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	32b0      	adds	r2, #176	@ 0xb0
 8016152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016156:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d01b      	beq.n	8016196 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	2200      	movs	r2, #0
 8016162:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	2201      	movs	r2, #1
 8016168:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801616a:	4b0d      	ldr	r3, [pc, #52]	@ (80161a0 <MSC_BOT_Reset+0x60>)
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	4619      	mov	r1, r3
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f007 faad 	bl	801d6d0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8016176:	4b0b      	ldr	r3, [pc, #44]	@ (80161a4 <MSC_BOT_Reset+0x64>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	4619      	mov	r1, r3
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f007 faa7 	bl	801d6d0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016182:	4b08      	ldr	r3, [pc, #32]	@ (80161a4 <MSC_BOT_Reset+0x64>)
 8016184:	7819      	ldrb	r1, [r3, #0]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 801618c:	231f      	movs	r3, #31
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f007 fb29 	bl	801d7e6 <USBD_LL_PrepareReceive>
 8016194:	e000      	b.n	8016198 <MSC_BOT_Reset+0x58>
    return;
 8016196:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	200000ae 	.word	0x200000ae
 80161a4:	200000af 	.word	0x200000af

080161a8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80161a8:	b480      	push	{r7}
 80161aa:	b085      	sub	sp, #20
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	32b0      	adds	r2, #176	@ 0xb0
 80161ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161be:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d002      	beq.n	80161cc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2200      	movs	r2, #0
 80161ca:	721a      	strb	r2, [r3, #8]
  }
}
 80161cc:	bf00      	nop
 80161ce:	3714      	adds	r7, #20
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b084      	sub	sp, #16
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
 80161e0:	460b      	mov	r3, r1
 80161e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	32b0      	adds	r2, #176	@ 0xb0
 80161ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d020      	beq.n	801623c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	7a1b      	ldrb	r3, [r3, #8]
 80161fe:	2b02      	cmp	r3, #2
 8016200:	d005      	beq.n	801620e <MSC_BOT_DataIn+0x36>
 8016202:	2b02      	cmp	r3, #2
 8016204:	db1c      	blt.n	8016240 <MSC_BOT_DataIn+0x68>
 8016206:	3b03      	subs	r3, #3
 8016208:	2b01      	cmp	r3, #1
 801620a:	d819      	bhi.n	8016240 <MSC_BOT_DataIn+0x68>
 801620c:	e011      	b.n	8016232 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801621a:	461a      	mov	r2, r3
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f000 f9c9 	bl	80165b4 <SCSI_ProcessCmd>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	da0d      	bge.n	8016244 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016228:	2101      	movs	r1, #1
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f000 f90c 	bl	8016448 <MSC_BOT_SendCSW>
      }
      break;
 8016230:	e008      	b.n	8016244 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016232:	2100      	movs	r1, #0
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f000 f907 	bl	8016448 <MSC_BOT_SendCSW>
      break;
 801623a:	e004      	b.n	8016246 <MSC_BOT_DataIn+0x6e>
    return;
 801623c:	bf00      	nop
 801623e:	e002      	b.n	8016246 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8016240:	bf00      	nop
 8016242:	e000      	b.n	8016246 <MSC_BOT_DataIn+0x6e>
      break;
 8016244:	bf00      	nop
  }
}
 8016246:	3710      	adds	r7, #16
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}

0801624c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	460b      	mov	r3, r1
 8016256:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	32b0      	adds	r2, #176	@ 0xb0
 8016262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016266:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d01c      	beq.n	80162a8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	7a1b      	ldrb	r3, [r3, #8]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d002      	beq.n	801627c <MSC_BOT_DataOut+0x30>
 8016276:	2b01      	cmp	r3, #1
 8016278:	d004      	beq.n	8016284 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801627a:	e018      	b.n	80162ae <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f819 	bl	80162b4 <MSC_BOT_CBW_Decode>
      break;
 8016282:	e014      	b.n	80162ae <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016290:	461a      	mov	r2, r3
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 f98e 	bl	80165b4 <SCSI_ProcessCmd>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	da06      	bge.n	80162ac <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801629e:	2101      	movs	r1, #1
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f000 f8d1 	bl	8016448 <MSC_BOT_SendCSW>
      break;
 80162a6:	e001      	b.n	80162ac <MSC_BOT_DataOut+0x60>
    return;
 80162a8:	bf00      	nop
 80162aa:	e000      	b.n	80162ae <MSC_BOT_DataOut+0x62>
      break;
 80162ac:	bf00      	nop
  }
}
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	32b0      	adds	r2, #176	@ 0xb0
 80162c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d079      	beq.n	80163c6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162ea:	4b3a      	ldr	r3, [pc, #232]	@ (80163d4 <MSC_BOT_CBW_Decode+0x120>)
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	4619      	mov	r1, r3
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f007 fa99 	bl	801d828 <USBD_LL_GetRxDataSize>
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b1f      	cmp	r3, #31
 80162fa:	d114      	bne.n	8016326 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8016302:	4a35      	ldr	r2, [pc, #212]	@ (80163d8 <MSC_BOT_CBW_Decode+0x124>)
 8016304:	4293      	cmp	r3, r2
 8016306:	d10e      	bne.n	8016326 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801630e:	2b01      	cmp	r3, #1
 8016310:	d809      	bhi.n	8016326 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 8016318:	2b00      	cmp	r3, #0
 801631a:	d004      	beq.n	8016326 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016322:	2b10      	cmp	r3, #16
 8016324:	d90e      	bls.n	8016344 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801632c:	2320      	movs	r3, #32
 801632e:	2205      	movs	r2, #5
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 fe57 	bl	8016fe4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2202      	movs	r2, #2
 801633a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 f8bd 	bl	80164bc <MSC_BOT_Abort>
 8016342:	e043      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016350:	461a      	mov	r2, r3
 8016352:	6878      	ldr	r0, [r7, #4]
 8016354:	f000 f92e 	bl	80165b4 <SCSI_ProcessCmd>
 8016358:	4603      	mov	r3, r0
 801635a:	2b00      	cmp	r3, #0
 801635c:	da0c      	bge.n	8016378 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	7a1b      	ldrb	r3, [r3, #8]
 8016362:	2b05      	cmp	r3, #5
 8016364:	d104      	bne.n	8016370 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016366:	2101      	movs	r1, #1
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f000 f86d 	bl	8016448 <MSC_BOT_SendCSW>
 801636e:	e02d      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 f8a3 	bl	80164bc <MSC_BOT_Abort>
 8016376:	e029      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	7a1b      	ldrb	r3, [r3, #8]
 801637c:	2b02      	cmp	r3, #2
 801637e:	d024      	beq.n	80163ca <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016384:	2b01      	cmp	r3, #1
 8016386:	d020      	beq.n	80163ca <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801638c:	2b03      	cmp	r3, #3
 801638e:	d01c      	beq.n	80163ca <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	68db      	ldr	r3, [r3, #12]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d009      	beq.n	80163ac <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f103 0110 	add.w	r1, r3, #16
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	68db      	ldr	r3, [r3, #12]
 80163a2:	461a      	mov	r2, r3
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f000 f819 	bl	80163dc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80163aa:	e00f      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d104      	bne.n	80163be <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80163b4:	2100      	movs	r1, #0
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 f846 	bl	8016448 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80163bc:	e006      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 f87c 	bl	80164bc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80163c4:	e002      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
    return;
 80163c6:	bf00      	nop
 80163c8:	e000      	b.n	80163cc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80163ca:	bf00      	nop
    }
  }
}
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	200000af 	.word	0x200000af
 80163d8:	43425355 	.word	0x43425355

080163dc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b086      	sub	sp, #24
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	60f8      	str	r0, [r7, #12]
 80163e4:	60b9      	str	r1, [r7, #8]
 80163e6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	32b0      	adds	r2, #176	@ 0xb0
 80163f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163f6:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d01e      	beq.n	801643c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016404:	687a      	ldr	r2, [r7, #4]
 8016406:	4293      	cmp	r3, r2
 8016408:	bf28      	it	cs
 801640a:	4613      	movcs	r3, r2
 801640c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801640e:	697b      	ldr	r3, [r7, #20]
 8016410:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	1ad2      	subs	r2, r2, r3
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	2200      	movs	r2, #0
 8016422:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	2204      	movs	r2, #4
 801642a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801642c:	4b05      	ldr	r3, [pc, #20]	@ (8016444 <MSC_BOT_SendData+0x68>)
 801642e:	7819      	ldrb	r1, [r3, #0]
 8016430:	693b      	ldr	r3, [r7, #16]
 8016432:	68ba      	ldr	r2, [r7, #8]
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f007 f9b5 	bl	801d7a4 <USBD_LL_Transmit>
 801643a:	e000      	b.n	801643e <MSC_BOT_SendData+0x62>
    return;
 801643c:	bf00      	nop
}
 801643e:	3718      	adds	r7, #24
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	200000ae 	.word	0x200000ae

08016448 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	460b      	mov	r3, r1
 8016452:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	32b0      	adds	r2, #176	@ 0xb0
 801645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016462:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d01d      	beq.n	80164a6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	4a10      	ldr	r2, [pc, #64]	@ (80164b0 <MSC_BOT_SendCSW+0x68>)
 801646e:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	78fa      	ldrb	r2, [r7, #3]
 8016476:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2200      	movs	r2, #0
 801647e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8016480:	4b0c      	ldr	r3, [pc, #48]	@ (80164b4 <MSC_BOT_SendCSW+0x6c>)
 8016482:	7819      	ldrb	r1, [r3, #0]
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 801648a:	230d      	movs	r3, #13
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f007 f989 	bl	801d7a4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016492:	4b09      	ldr	r3, [pc, #36]	@ (80164b8 <MSC_BOT_SendCSW+0x70>)
 8016494:	7819      	ldrb	r1, [r3, #0]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 801649c:	231f      	movs	r3, #31
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f007 f9a1 	bl	801d7e6 <USBD_LL_PrepareReceive>
 80164a4:	e000      	b.n	80164a8 <MSC_BOT_SendCSW+0x60>
    return;
 80164a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80164a8:	3710      	adds	r7, #16
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	53425355 	.word	0x53425355
 80164b4:	200000ae 	.word	0x200000ae
 80164b8:	200000af 	.word	0x200000af

080164bc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b084      	sub	sp, #16
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	32b0      	adds	r2, #176	@ 0xb0
 80164ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d02a      	beq.n	8016530 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d10e      	bne.n	8016502 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d009      	beq.n	8016502 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d105      	bne.n	8016502 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164f6:	4b10      	ldr	r3, [pc, #64]	@ (8016538 <MSC_BOT_Abort+0x7c>)
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	4619      	mov	r1, r3
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f007 f8c8 	bl	801d692 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016502:	4b0e      	ldr	r3, [pc, #56]	@ (801653c <MSC_BOT_Abort+0x80>)
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	4619      	mov	r1, r3
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f007 f8c2 	bl	801d692 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	7a5b      	ldrb	r3, [r3, #9]
 8016512:	2b02      	cmp	r3, #2
 8016514:	d10d      	bne.n	8016532 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016516:	4b09      	ldr	r3, [pc, #36]	@ (801653c <MSC_BOT_Abort+0x80>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	4619      	mov	r1, r3
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f007 f8b8 	bl	801d692 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8016522:	4b05      	ldr	r3, [pc, #20]	@ (8016538 <MSC_BOT_Abort+0x7c>)
 8016524:	781b      	ldrb	r3, [r3, #0]
 8016526:	4619      	mov	r1, r3
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f007 f8b2 	bl	801d692 <USBD_LL_StallEP>
 801652e:	e000      	b.n	8016532 <MSC_BOT_Abort+0x76>
    return;
 8016530:	bf00      	nop
  }
}
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	200000af 	.word	0x200000af
 801653c:	200000ae 	.word	0x200000ae

08016540 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	460b      	mov	r3, r1
 801654a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	32b0      	adds	r2, #176	@ 0xb0
 8016556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801655a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d01d      	beq.n	801659e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	7a5b      	ldrb	r3, [r3, #9]
 8016566:	2b02      	cmp	r3, #2
 8016568:	d10c      	bne.n	8016584 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801656a:	4b10      	ldr	r3, [pc, #64]	@ (80165ac <MSC_BOT_CplClrFeature+0x6c>)
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	4619      	mov	r1, r3
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f007 f88e 	bl	801d692 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8016576:	4b0e      	ldr	r3, [pc, #56]	@ (80165b0 <MSC_BOT_CplClrFeature+0x70>)
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	4619      	mov	r1, r3
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f007 f888 	bl	801d692 <USBD_LL_StallEP>
 8016582:	e00f      	b.n	80165a4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016588:	2b00      	cmp	r3, #0
 801658a:	da0a      	bge.n	80165a2 <MSC_BOT_CplClrFeature+0x62>
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	7a5b      	ldrb	r3, [r3, #9]
 8016590:	2b01      	cmp	r3, #1
 8016592:	d006      	beq.n	80165a2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016594:	2101      	movs	r1, #1
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f7ff ff56 	bl	8016448 <MSC_BOT_SendCSW>
 801659c:	e002      	b.n	80165a4 <MSC_BOT_CplClrFeature+0x64>
    return;
 801659e:	bf00      	nop
 80165a0:	e000      	b.n	80165a4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80165a2:	bf00      	nop
  }
}
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	200000ae 	.word	0x200000ae
 80165b0:	200000af 	.word	0x200000af

080165b4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	460b      	mov	r3, r1
 80165be:	607a      	str	r2, [r7, #4]
 80165c0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	32b0      	adds	r2, #176	@ 0xb0
 80165cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d102      	bne.n	80165de <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80165d8:	f04f 33ff 	mov.w	r3, #4294967295
 80165dc:	e168      	b.n	80168b0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	2baa      	cmp	r3, #170	@ 0xaa
 80165e4:	f000 8144 	beq.w	8016870 <SCSI_ProcessCmd+0x2bc>
 80165e8:	2baa      	cmp	r3, #170	@ 0xaa
 80165ea:	f300 8153 	bgt.w	8016894 <SCSI_ProcessCmd+0x2e0>
 80165ee:	2ba8      	cmp	r3, #168	@ 0xa8
 80165f0:	f000 812c 	beq.w	801684c <SCSI_ProcessCmd+0x298>
 80165f4:	2ba8      	cmp	r3, #168	@ 0xa8
 80165f6:	f300 814d 	bgt.w	8016894 <SCSI_ProcessCmd+0x2e0>
 80165fa:	2b5a      	cmp	r3, #90	@ 0x5a
 80165fc:	f300 80c0 	bgt.w	8016780 <SCSI_ProcessCmd+0x1cc>
 8016600:	2b00      	cmp	r3, #0
 8016602:	f2c0 8147 	blt.w	8016894 <SCSI_ProcessCmd+0x2e0>
 8016606:	2b5a      	cmp	r3, #90	@ 0x5a
 8016608:	f200 8144 	bhi.w	8016894 <SCSI_ProcessCmd+0x2e0>
 801660c:	a201      	add	r2, pc, #4	@ (adr r2, 8016614 <SCSI_ProcessCmd+0x60>)
 801660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016612:	bf00      	nop
 8016614:	08016787 	.word	0x08016787
 8016618:	08016895 	.word	0x08016895
 801661c:	08016895 	.word	0x08016895
 8016620:	08016799 	.word	0x08016799
 8016624:	08016895 	.word	0x08016895
 8016628:	08016895 	.word	0x08016895
 801662c:	08016895 	.word	0x08016895
 8016630:	08016895 	.word	0x08016895
 8016634:	08016895 	.word	0x08016895
 8016638:	08016895 	.word	0x08016895
 801663c:	08016895 	.word	0x08016895
 8016640:	08016895 	.word	0x08016895
 8016644:	08016895 	.word	0x08016895
 8016648:	08016895 	.word	0x08016895
 801664c:	08016895 	.word	0x08016895
 8016650:	08016895 	.word	0x08016895
 8016654:	08016895 	.word	0x08016895
 8016658:	08016895 	.word	0x08016895
 801665c:	080167ab 	.word	0x080167ab
 8016660:	08016895 	.word	0x08016895
 8016664:	08016895 	.word	0x08016895
 8016668:	08016895 	.word	0x08016895
 801666c:	08016895 	.word	0x08016895
 8016670:	08016895 	.word	0x08016895
 8016674:	08016895 	.word	0x08016895
 8016678:	08016895 	.word	0x08016895
 801667c:	080167e1 	.word	0x080167e1
 8016680:	080167bd 	.word	0x080167bd
 8016684:	08016895 	.word	0x08016895
 8016688:	08016895 	.word	0x08016895
 801668c:	080167cf 	.word	0x080167cf
 8016690:	08016895 	.word	0x08016895
 8016694:	08016895 	.word	0x08016895
 8016698:	08016895 	.word	0x08016895
 801669c:	08016895 	.word	0x08016895
 80166a0:	08016805 	.word	0x08016805
 80166a4:	08016895 	.word	0x08016895
 80166a8:	08016817 	.word	0x08016817
 80166ac:	08016895 	.word	0x08016895
 80166b0:	08016895 	.word	0x08016895
 80166b4:	0801683b 	.word	0x0801683b
 80166b8:	08016895 	.word	0x08016895
 80166bc:	0801685f 	.word	0x0801685f
 80166c0:	08016895 	.word	0x08016895
 80166c4:	08016895 	.word	0x08016895
 80166c8:	08016895 	.word	0x08016895
 80166cc:	08016895 	.word	0x08016895
 80166d0:	08016883 	.word	0x08016883
 80166d4:	08016895 	.word	0x08016895
 80166d8:	08016895 	.word	0x08016895
 80166dc:	08016895 	.word	0x08016895
 80166e0:	08016895 	.word	0x08016895
 80166e4:	08016895 	.word	0x08016895
 80166e8:	08016895 	.word	0x08016895
 80166ec:	08016895 	.word	0x08016895
 80166f0:	08016895 	.word	0x08016895
 80166f4:	08016895 	.word	0x08016895
 80166f8:	08016895 	.word	0x08016895
 80166fc:	08016895 	.word	0x08016895
 8016700:	08016895 	.word	0x08016895
 8016704:	08016895 	.word	0x08016895
 8016708:	08016895 	.word	0x08016895
 801670c:	08016895 	.word	0x08016895
 8016710:	08016895 	.word	0x08016895
 8016714:	08016895 	.word	0x08016895
 8016718:	08016895 	.word	0x08016895
 801671c:	08016895 	.word	0x08016895
 8016720:	08016895 	.word	0x08016895
 8016724:	08016895 	.word	0x08016895
 8016728:	08016895 	.word	0x08016895
 801672c:	08016895 	.word	0x08016895
 8016730:	08016895 	.word	0x08016895
 8016734:	08016895 	.word	0x08016895
 8016738:	08016895 	.word	0x08016895
 801673c:	08016895 	.word	0x08016895
 8016740:	08016895 	.word	0x08016895
 8016744:	08016895 	.word	0x08016895
 8016748:	08016895 	.word	0x08016895
 801674c:	08016895 	.word	0x08016895
 8016750:	08016895 	.word	0x08016895
 8016754:	08016895 	.word	0x08016895
 8016758:	08016895 	.word	0x08016895
 801675c:	08016895 	.word	0x08016895
 8016760:	08016895 	.word	0x08016895
 8016764:	08016895 	.word	0x08016895
 8016768:	08016895 	.word	0x08016895
 801676c:	08016895 	.word	0x08016895
 8016770:	08016895 	.word	0x08016895
 8016774:	08016895 	.word	0x08016895
 8016778:	08016895 	.word	0x08016895
 801677c:	080167f3 	.word	0x080167f3
 8016780:	2b9e      	cmp	r3, #158	@ 0x9e
 8016782:	d051      	beq.n	8016828 <SCSI_ProcessCmd+0x274>
 8016784:	e086      	b.n	8016894 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8016786:	7afb      	ldrb	r3, [r7, #11]
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	4619      	mov	r1, r3
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f000 f893 	bl	80168b8 <SCSI_TestUnitReady>
 8016792:	4603      	mov	r3, r0
 8016794:	75fb      	strb	r3, [r7, #23]
      break;
 8016796:	e089      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8016798:	7afb      	ldrb	r3, [r7, #11]
 801679a:	687a      	ldr	r2, [r7, #4]
 801679c:	4619      	mov	r1, r3
 801679e:	68f8      	ldr	r0, [r7, #12]
 80167a0:	f000 fb9a 	bl	8016ed8 <SCSI_RequestSense>
 80167a4:	4603      	mov	r3, r0
 80167a6:	75fb      	strb	r3, [r7, #23]
      break;
 80167a8:	e080      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80167aa:	7afb      	ldrb	r3, [r7, #11]
 80167ac:	687a      	ldr	r2, [r7, #4]
 80167ae:	4619      	mov	r1, r3
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	f000 f8db 	bl	801696c <SCSI_Inquiry>
 80167b6:	4603      	mov	r3, r0
 80167b8:	75fb      	strb	r3, [r7, #23]
      break;
 80167ba:	e077      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80167bc:	7afb      	ldrb	r3, [r7, #11]
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	4619      	mov	r1, r3
 80167c2:	68f8      	ldr	r0, [r7, #12]
 80167c4:	f000 fc5c 	bl	8017080 <SCSI_StartStopUnit>
 80167c8:	4603      	mov	r3, r0
 80167ca:	75fb      	strb	r3, [r7, #23]
      break;
 80167cc:	e06e      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80167ce:	7afb      	ldrb	r3, [r7, #11]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	4619      	mov	r1, r3
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	f000 fca8 	bl	801712a <SCSI_AllowPreventRemovable>
 80167da:	4603      	mov	r3, r0
 80167dc:	75fb      	strb	r3, [r7, #23]
      break;
 80167de:	e065      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80167e0:	7afb      	ldrb	r3, [r7, #11]
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	4619      	mov	r1, r3
 80167e6:	68f8      	ldr	r0, [r7, #12]
 80167e8:	f000 faea 	bl	8016dc0 <SCSI_ModeSense6>
 80167ec:	4603      	mov	r3, r0
 80167ee:	75fb      	strb	r3, [r7, #23]
      break;
 80167f0:	e05c      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80167f2:	7afb      	ldrb	r3, [r7, #11]
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	4619      	mov	r1, r3
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f000 fb27 	bl	8016e4c <SCSI_ModeSense10>
 80167fe:	4603      	mov	r3, r0
 8016800:	75fb      	strb	r3, [r7, #23]
      break;
 8016802:	e053      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8016804:	7afb      	ldrb	r3, [r7, #11]
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	4619      	mov	r1, r3
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f000 fa5c 	bl	8016cc8 <SCSI_ReadFormatCapacity>
 8016810:	4603      	mov	r3, r0
 8016812:	75fb      	strb	r3, [r7, #23]
      break;
 8016814:	e04a      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8016816:	7afb      	ldrb	r3, [r7, #11]
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	4619      	mov	r1, r3
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f000 f921 	bl	8016a64 <SCSI_ReadCapacity10>
 8016822:	4603      	mov	r3, r0
 8016824:	75fb      	strb	r3, [r7, #23]
      break;
 8016826:	e041      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8016828:	7afb      	ldrb	r3, [r7, #11]
 801682a:	687a      	ldr	r2, [r7, #4]
 801682c:	4619      	mov	r1, r3
 801682e:	68f8      	ldr	r0, [r7, #12]
 8016830:	f000 f996 	bl	8016b60 <SCSI_ReadCapacity16>
 8016834:	4603      	mov	r3, r0
 8016836:	75fb      	strb	r3, [r7, #23]
      break;
 8016838:	e038      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801683a:	7afb      	ldrb	r3, [r7, #11]
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	4619      	mov	r1, r3
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f000 fc9f 	bl	8017184 <SCSI_Read10>
 8016846:	4603      	mov	r3, r0
 8016848:	75fb      	strb	r3, [r7, #23]
      break;
 801684a:	e02f      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801684c:	7afb      	ldrb	r3, [r7, #11]
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	4619      	mov	r1, r3
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	f000 fd40 	bl	80172d8 <SCSI_Read12>
 8016858:	4603      	mov	r3, r0
 801685a:	75fb      	strb	r3, [r7, #23]
      break;
 801685c:	e026      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801685e:	7afb      	ldrb	r3, [r7, #11]
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	4619      	mov	r1, r3
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f000 fdeb 	bl	8017440 <SCSI_Write10>
 801686a:	4603      	mov	r3, r0
 801686c:	75fb      	strb	r3, [r7, #23]
      break;
 801686e:	e01d      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8016870:	7afb      	ldrb	r3, [r7, #11]
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	4619      	mov	r1, r3
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	f000 feb8 	bl	80175ec <SCSI_Write12>
 801687c:	4603      	mov	r3, r0
 801687e:	75fb      	strb	r3, [r7, #23]
      break;
 8016880:	e014      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8016882:	7afb      	ldrb	r3, [r7, #11]
 8016884:	687a      	ldr	r2, [r7, #4]
 8016886:	4619      	mov	r1, r3
 8016888:	68f8      	ldr	r0, [r7, #12]
 801688a:	f000 ff95 	bl	80177b8 <SCSI_Verify10>
 801688e:	4603      	mov	r3, r0
 8016890:	75fb      	strb	r3, [r7, #23]
      break;
 8016892:	e00b      	b.n	80168ac <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8016894:	7af9      	ldrb	r1, [r7, #11]
 8016896:	2320      	movs	r3, #32
 8016898:	2205      	movs	r2, #5
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f000 fba2 	bl	8016fe4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	2202      	movs	r2, #2
 80168a4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80168a6:	23ff      	movs	r3, #255	@ 0xff
 80168a8:	75fb      	strb	r3, [r7, #23]
      break;
 80168aa:	bf00      	nop
  }

  return ret;
 80168ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3718      	adds	r7, #24
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b086      	sub	sp, #24
 80168bc:	af00      	add	r7, sp, #0
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	460b      	mov	r3, r1
 80168c2:	607a      	str	r2, [r7, #4]
 80168c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	32b0      	adds	r2, #176	@ 0xb0
 80168d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80168d6:	697b      	ldr	r3, [r7, #20]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d102      	bne.n	80168e2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80168dc:	f04f 33ff 	mov.w	r3, #4294967295
 80168e0:	e03f      	b.n	8016962 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80168e2:	697b      	ldr	r3, [r7, #20]
 80168e4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d00a      	beq.n	8016902 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80168f2:	2320      	movs	r3, #32
 80168f4:	2205      	movs	r2, #5
 80168f6:	68f8      	ldr	r0, [r7, #12]
 80168f8:	f000 fb74 	bl	8016fe4 <SCSI_SenseCode>

    return -1;
 80168fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016900:	e02f      	b.n	8016962 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016908:	2b02      	cmp	r3, #2
 801690a:	d10b      	bne.n	8016924 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801690c:	7af9      	ldrb	r1, [r7, #11]
 801690e:	233a      	movs	r3, #58	@ 0x3a
 8016910:	2202      	movs	r2, #2
 8016912:	68f8      	ldr	r0, [r7, #12]
 8016914:	f000 fb66 	bl	8016fe4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	2205      	movs	r2, #5
 801691c:	721a      	strb	r2, [r3, #8]
    return -1;
 801691e:	f04f 33ff 	mov.w	r3, #4294967295
 8016922:	e01e      	b.n	8016962 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801692a:	68fa      	ldr	r2, [r7, #12]
 801692c:	33b0      	adds	r3, #176	@ 0xb0
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	4413      	add	r3, r2
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	689b      	ldr	r3, [r3, #8]
 8016936:	7afa      	ldrb	r2, [r7, #11]
 8016938:	4610      	mov	r0, r2
 801693a:	4798      	blx	r3
 801693c:	4603      	mov	r3, r0
 801693e:	2b00      	cmp	r3, #0
 8016940:	d00b      	beq.n	801695a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016942:	7af9      	ldrb	r1, [r7, #11]
 8016944:	233a      	movs	r3, #58	@ 0x3a
 8016946:	2202      	movs	r2, #2
 8016948:	68f8      	ldr	r0, [r7, #12]
 801694a:	f000 fb4b 	bl	8016fe4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	2205      	movs	r2, #5
 8016952:	721a      	strb	r2, [r3, #8]

    return -1;
 8016954:	f04f 33ff 	mov.w	r3, #4294967295
 8016958:	e003      	b.n	8016962 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	2200      	movs	r2, #0
 801695e:	60da      	str	r2, [r3, #12]

  return 0;
 8016960:	2300      	movs	r3, #0
}
 8016962:	4618      	mov	r0, r3
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
	...

0801696c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b088      	sub	sp, #32
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	460b      	mov	r3, r1
 8016976:	607a      	str	r2, [r7, #4]
 8016978:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	32b0      	adds	r2, #176	@ 0xb0
 8016984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016988:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801698a:	69bb      	ldr	r3, [r7, #24]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d102      	bne.n	8016996 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8016990:	f04f 33ff 	mov.w	r3, #4294967295
 8016994:	e05e      	b.n	8016a54 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801699c:	2b00      	cmp	r3, #0
 801699e:	d10a      	bne.n	80169b6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80169a0:	69bb      	ldr	r3, [r7, #24]
 80169a2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169a6:	2320      	movs	r3, #32
 80169a8:	2205      	movs	r2, #5
 80169aa:	68f8      	ldr	r0, [r7, #12]
 80169ac:	f000 fb1a 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 80169b0:	f04f 33ff 	mov.w	r3, #4294967295
 80169b4:	e04e      	b.n	8016a54 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	3301      	adds	r3, #1
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	f003 0301 	and.w	r3, r3, #1
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d020      	beq.n	8016a06 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	3302      	adds	r3, #2
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d105      	bne.n	80169da <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80169ce:	2206      	movs	r2, #6
 80169d0:	4922      	ldr	r1, [pc, #136]	@ (8016a5c <SCSI_Inquiry+0xf0>)
 80169d2:	69b8      	ldr	r0, [r7, #24]
 80169d4:	f001 f876 	bl	8017ac4 <SCSI_UpdateBotData>
 80169d8:	e03b      	b.n	8016a52 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	3302      	adds	r3, #2
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	2b80      	cmp	r3, #128	@ 0x80
 80169e2:	d105      	bne.n	80169f0 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80169e4:	2208      	movs	r2, #8
 80169e6:	491e      	ldr	r1, [pc, #120]	@ (8016a60 <SCSI_Inquiry+0xf4>)
 80169e8:	69b8      	ldr	r0, [r7, #24]
 80169ea:	f001 f86b 	bl	8017ac4 <SCSI_UpdateBotData>
 80169ee:	e030      	b.n	8016a52 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80169f0:	69bb      	ldr	r3, [r7, #24]
 80169f2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169f6:	2324      	movs	r3, #36	@ 0x24
 80169f8:	2205      	movs	r2, #5
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	f000 faf2 	bl	8016fe4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8016a00:	f04f 33ff 	mov.w	r3, #4294967295
 8016a04:	e026      	b.n	8016a54 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	33b0      	adds	r3, #176	@ 0xb0
 8016a10:	009b      	lsls	r3, r3, #2
 8016a12:	4413      	add	r3, r2
 8016a14:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8016a16:	69d9      	ldr	r1, [r3, #28]
 8016a18:	7afa      	ldrb	r2, [r7, #11]
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	4413      	add	r3, r2
 8016a20:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8016a22:	440b      	add	r3, r1
 8016a24:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	3304      	adds	r3, #4
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	3305      	adds	r3, #5
 8016a2e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	3304      	adds	r3, #4
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	461a      	mov	r2, r3
 8016a38:	8bfb      	ldrh	r3, [r7, #30]
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d303      	bcc.n	8016a46 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	3304      	adds	r3, #4
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8016a46:	8bfb      	ldrh	r3, [r7, #30]
 8016a48:	461a      	mov	r2, r3
 8016a4a:	6979      	ldr	r1, [r7, #20]
 8016a4c:	69b8      	ldr	r0, [r7, #24]
 8016a4e:	f001 f839 	bl	8017ac4 <SCSI_UpdateBotData>
  }

  return 0;
 8016a52:	2300      	movs	r3, #0
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3720      	adds	r7, #32
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	200000b0 	.word	0x200000b0
 8016a60:	200000b8 	.word	0x200000b8

08016a64 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b086      	sub	sp, #24
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	607a      	str	r2, [r7, #4]
 8016a70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	32b0      	adds	r2, #176	@ 0xb0
 8016a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d102      	bne.n	8016a8e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8016a88:	f04f 33ff 	mov.w	r3, #4294967295
 8016a8c:	e064      	b.n	8016b58 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	33b0      	adds	r3, #176	@ 0xb0
 8016a98:	009b      	lsls	r3, r3, #2
 8016a9a:	4413      	add	r3, r2
 8016a9c:	685b      	ldr	r3, [r3, #4]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	697a      	ldr	r2, [r7, #20]
 8016aa2:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016aa6:	697a      	ldr	r2, [r7, #20]
 8016aa8:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016aac:	7af8      	ldrb	r0, [r7, #11]
 8016aae:	4798      	blx	r3
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d104      	bne.n	8016ac6 <SCSI_ReadCapacity10+0x62>
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016ac2:	2b02      	cmp	r3, #2
 8016ac4:	d108      	bne.n	8016ad8 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016ac6:	7af9      	ldrb	r1, [r7, #11]
 8016ac8:	233a      	movs	r3, #58	@ 0x3a
 8016aca:	2202      	movs	r2, #2
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f000 fa89 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8016ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad6:	e03f      	b.n	8016b58 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016ade:	3b01      	subs	r3, #1
 8016ae0:	0e1b      	lsrs	r3, r3, #24
 8016ae2:	b2da      	uxtb	r2, r3
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aee:	3b01      	subs	r3, #1
 8016af0:	0c1b      	lsrs	r3, r3, #16
 8016af2:	b2da      	uxtb	r2, r3
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016afe:	3b01      	subs	r3, #1
 8016b00:	0a1b      	lsrs	r3, r3, #8
 8016b02:	b2da      	uxtb	r2, r3
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b0e:	b2db      	uxtb	r3, r3
 8016b10:	3b01      	subs	r3, #1
 8016b12:	b2da      	uxtb	r2, r3
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b1e:	161b      	asrs	r3, r3, #24
 8016b20:	b2da      	uxtb	r2, r3
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b2c:	141b      	asrs	r3, r3, #16
 8016b2e:	b2da      	uxtb	r2, r3
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b3a:	0a1b      	lsrs	r3, r3, #8
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	b2da      	uxtb	r2, r3
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b4a:	b2da      	uxtb	r2, r3
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	2208      	movs	r2, #8
 8016b54:	60da      	str	r2, [r3, #12]

  return 0;
 8016b56:	2300      	movs	r3, #0

}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3718      	adds	r7, #24
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b088      	sub	sp, #32
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	60f8      	str	r0, [r7, #12]
 8016b68:	460b      	mov	r3, r1
 8016b6a:	607a      	str	r2, [r7, #4]
 8016b6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	32b0      	adds	r2, #176	@ 0xb0
 8016b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b7c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016b7e:	69bb      	ldr	r3, [r7, #24]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d102      	bne.n	8016b8a <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016b84:	f04f 33ff 	mov.w	r3, #4294967295
 8016b88:	e09a      	b.n	8016cc0 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016b90:	68fa      	ldr	r2, [r7, #12]
 8016b92:	33b0      	adds	r3, #176	@ 0xb0
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	4413      	add	r3, r2
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	69ba      	ldr	r2, [r7, #24]
 8016b9e:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016ba2:	69ba      	ldr	r2, [r7, #24]
 8016ba4:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016ba8:	7af8      	ldrb	r0, [r7, #11]
 8016baa:	4798      	blx	r3
 8016bac:	4603      	mov	r3, r0
 8016bae:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d104      	bne.n	8016bc2 <SCSI_ReadCapacity16+0x62>
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016bbe:	2b02      	cmp	r3, #2
 8016bc0:	d108      	bne.n	8016bd4 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016bc2:	7af9      	ldrb	r1, [r7, #11]
 8016bc4:	233a      	movs	r3, #58	@ 0x3a
 8016bc6:	2202      	movs	r2, #2
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	f000 fa0b 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8016bce:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd2:	e075      	b.n	8016cc0 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	330a      	adds	r3, #10
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	330b      	adds	r3, #11
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016be4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	330c      	adds	r3, #12
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016bee:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	320d      	adds	r2, #13
 8016bf4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016bf6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	61fb      	str	r3, [r7, #28]
 8016c00:	e008      	b.n	8016c14 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016c02:	69ba      	ldr	r2, [r7, #24]
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	4413      	add	r3, r2
 8016c08:	3310      	adds	r3, #16
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	3301      	adds	r3, #1
 8016c12:	61fb      	str	r3, [r7, #28]
 8016c14:	69bb      	ldr	r3, [r7, #24]
 8016c16:	68db      	ldr	r3, [r3, #12]
 8016c18:	69fa      	ldr	r2, [r7, #28]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d3f1      	bcc.n	8016c02 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016c1e:	69bb      	ldr	r3, [r7, #24]
 8016c20:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c24:	3b01      	subs	r3, #1
 8016c26:	0e1b      	lsrs	r3, r3, #24
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016c2e:	69bb      	ldr	r3, [r7, #24]
 8016c30:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c34:	3b01      	subs	r3, #1
 8016c36:	0c1b      	lsrs	r3, r3, #16
 8016c38:	b2da      	uxtb	r2, r3
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016c3e:	69bb      	ldr	r3, [r7, #24]
 8016c40:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c44:	3b01      	subs	r3, #1
 8016c46:	0a1b      	lsrs	r3, r3, #8
 8016c48:	b2da      	uxtb	r2, r3
 8016c4a:	69bb      	ldr	r3, [r7, #24]
 8016c4c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c54:	b2db      	uxtb	r3, r3
 8016c56:	3b01      	subs	r3, #1
 8016c58:	b2da      	uxtb	r2, r3
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c5e:	69bb      	ldr	r3, [r7, #24]
 8016c60:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c64:	161b      	asrs	r3, r3, #24
 8016c66:	b2da      	uxtb	r2, r3
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016c6c:	69bb      	ldr	r3, [r7, #24]
 8016c6e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c72:	141b      	asrs	r3, r3, #16
 8016c74:	b2da      	uxtb	r2, r3
 8016c76:	69bb      	ldr	r3, [r7, #24]
 8016c78:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c80:	0a1b      	lsrs	r3, r3, #8
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	b2da      	uxtb	r2, r3
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016c8a:	69bb      	ldr	r3, [r7, #24]
 8016c8c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c90:	b2da      	uxtb	r2, r3
 8016c92:	69bb      	ldr	r3, [r7, #24]
 8016c94:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	330a      	adds	r3, #10
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	330b      	adds	r3, #11
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016ca6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	330c      	adds	r3, #12
 8016cac:	781b      	ldrb	r3, [r3, #0]
 8016cae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016cb0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	320d      	adds	r2, #13
 8016cb6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016cb8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cba:	69bb      	ldr	r3, [r7, #24]
 8016cbc:	60da      	str	r2, [r3, #12]

  return 0;
 8016cbe:	2300      	movs	r3, #0
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3720      	adds	r7, #32
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b088      	sub	sp, #32
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	60f8      	str	r0, [r7, #12]
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	607a      	str	r2, [r7, #4]
 8016cd4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	32b0      	adds	r2, #176	@ 0xb0
 8016ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ce4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d102      	bne.n	8016cf2 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016cec:	f04f 33ff 	mov.w	r3, #4294967295
 8016cf0:	e061      	b.n	8016db6 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cf8:	68fa      	ldr	r2, [r7, #12]
 8016cfa:	33b0      	adds	r3, #176	@ 0xb0
 8016cfc:	009b      	lsls	r3, r3, #2
 8016cfe:	4413      	add	r3, r2
 8016d00:	685b      	ldr	r3, [r3, #4]
 8016d02:	685b      	ldr	r3, [r3, #4]
 8016d04:	f107 0214 	add.w	r2, r7, #20
 8016d08:	f107 0110 	add.w	r1, r7, #16
 8016d0c:	7af8      	ldrb	r0, [r7, #11]
 8016d0e:	4798      	blx	r3
 8016d10:	4603      	mov	r3, r0
 8016d12:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d104      	bne.n	8016d26 <SCSI_ReadFormatCapacity+0x5e>
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016d22:	2b02      	cmp	r3, #2
 8016d24:	d108      	bne.n	8016d38 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016d26:	7af9      	ldrb	r1, [r7, #11]
 8016d28:	233a      	movs	r3, #58	@ 0x3a
 8016d2a:	2202      	movs	r2, #2
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f000 f959 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8016d32:	f04f 33ff 	mov.w	r3, #4294967295
 8016d36:	e03e      	b.n	8016db6 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016d38:	2300      	movs	r3, #0
 8016d3a:	83fb      	strh	r3, [r7, #30]
 8016d3c:	e007      	b.n	8016d4e <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016d3e:	8bfb      	ldrh	r3, [r7, #30]
 8016d40:	69ba      	ldr	r2, [r7, #24]
 8016d42:	4413      	add	r3, r2
 8016d44:	2200      	movs	r2, #0
 8016d46:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016d48:	8bfb      	ldrh	r3, [r7, #30]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	83fb      	strh	r3, [r7, #30]
 8016d4e:	8bfb      	ldrh	r3, [r7, #30]
 8016d50:	2b0b      	cmp	r3, #11
 8016d52:	d9f4      	bls.n	8016d3e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d54:	69bb      	ldr	r3, [r7, #24]
 8016d56:	2208      	movs	r2, #8
 8016d58:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	0e1b      	lsrs	r3, r3, #24
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	3b01      	subs	r3, #1
 8016d6a:	0c1b      	lsrs	r3, r3, #16
 8016d6c:	b2da      	uxtb	r2, r3
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	3b01      	subs	r3, #1
 8016d76:	0a1b      	lsrs	r3, r3, #8
 8016d78:	b2da      	uxtb	r2, r3
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	3b01      	subs	r3, #1
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016d8a:	69bb      	ldr	r3, [r7, #24]
 8016d8c:	2202      	movs	r2, #2
 8016d8e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016d90:	8abb      	ldrh	r3, [r7, #20]
 8016d92:	141b      	asrs	r3, r3, #16
 8016d94:	b2da      	uxtb	r2, r3
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016d9a:	8abb      	ldrh	r3, [r7, #20]
 8016d9c:	0a1b      	lsrs	r3, r3, #8
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	b2da      	uxtb	r2, r3
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016da6:	8abb      	ldrh	r3, [r7, #20]
 8016da8:	b2da      	uxtb	r2, r3
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016dae:	69bb      	ldr	r3, [r7, #24]
 8016db0:	220c      	movs	r2, #12
 8016db2:	60da      	str	r2, [r3, #12]

  return 0;
 8016db4:	2300      	movs	r3, #0
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3720      	adds	r7, #32
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
	...

08016dc0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b086      	sub	sp, #24
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	460b      	mov	r3, r1
 8016dca:	607a      	str	r2, [r7, #4]
 8016dcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	32b0      	adds	r2, #176	@ 0xb0
 8016dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ddc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016dde:	2304      	movs	r3, #4
 8016de0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d102      	bne.n	8016dee <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016de8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dec:	e027      	b.n	8016e3e <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016df4:	68fa      	ldr	r2, [r7, #12]
 8016df6:	33b0      	adds	r3, #176	@ 0xb0
 8016df8:	009b      	lsls	r3, r3, #2
 8016dfa:	4413      	add	r3, r2
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	68db      	ldr	r3, [r3, #12]
 8016e00:	7afa      	ldrb	r2, [r7, #11]
 8016e02:	4610      	mov	r0, r2
 8016e04:	4798      	blx	r3
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d006      	beq.n	8016e1a <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8016e48 <SCSI_ModeSense6+0x88>)
 8016e0e:	789b      	ldrb	r3, [r3, #2]
 8016e10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016e14:	b2da      	uxtb	r2, r3
 8016e16:	4b0c      	ldr	r3, [pc, #48]	@ (8016e48 <SCSI_ModeSense6+0x88>)
 8016e18:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	3304      	adds	r3, #4
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	461a      	mov	r2, r3
 8016e22:	8afb      	ldrh	r3, [r7, #22]
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d303      	bcc.n	8016e30 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	3304      	adds	r3, #4
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016e30:	8afb      	ldrh	r3, [r7, #22]
 8016e32:	461a      	mov	r2, r3
 8016e34:	4904      	ldr	r1, [pc, #16]	@ (8016e48 <SCSI_ModeSense6+0x88>)
 8016e36:	6938      	ldr	r0, [r7, #16]
 8016e38:	f000 fe44 	bl	8017ac4 <SCSI_UpdateBotData>

  return 0;
 8016e3c:	2300      	movs	r3, #0
}
 8016e3e:	4618      	mov	r0, r3
 8016e40:	3718      	adds	r7, #24
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
 8016e46:	bf00      	nop
 8016e48:	200000c0 	.word	0x200000c0

08016e4c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	60f8      	str	r0, [r7, #12]
 8016e54:	460b      	mov	r3, r1
 8016e56:	607a      	str	r2, [r7, #4]
 8016e58:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	32b0      	adds	r2, #176	@ 0xb0
 8016e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e68:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e6a:	2308      	movs	r3, #8
 8016e6c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d102      	bne.n	8016e7a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016e74:	f04f 33ff 	mov.w	r3, #4294967295
 8016e78:	e027      	b.n	8016eca <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e80:	68fa      	ldr	r2, [r7, #12]
 8016e82:	33b0      	adds	r3, #176	@ 0xb0
 8016e84:	009b      	lsls	r3, r3, #2
 8016e86:	4413      	add	r3, r2
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	68db      	ldr	r3, [r3, #12]
 8016e8c:	7afa      	ldrb	r2, [r7, #11]
 8016e8e:	4610      	mov	r0, r2
 8016e90:	4798      	blx	r3
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d006      	beq.n	8016ea6 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016e98:	4b0e      	ldr	r3, [pc, #56]	@ (8016ed4 <SCSI_ModeSense10+0x88>)
 8016e9a:	78db      	ldrb	r3, [r3, #3]
 8016e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016ea0:	b2da      	uxtb	r2, r3
 8016ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8016ed4 <SCSI_ModeSense10+0x88>)
 8016ea4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3308      	adds	r3, #8
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	461a      	mov	r2, r3
 8016eae:	8afb      	ldrh	r3, [r7, #22]
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d303      	bcc.n	8016ebc <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	3308      	adds	r3, #8
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016ebc:	8afb      	ldrh	r3, [r7, #22]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	4904      	ldr	r1, [pc, #16]	@ (8016ed4 <SCSI_ModeSense10+0x88>)
 8016ec2:	6938      	ldr	r0, [r7, #16]
 8016ec4:	f000 fdfe 	bl	8017ac4 <SCSI_UpdateBotData>

  return 0;
 8016ec8:	2300      	movs	r3, #0
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3718      	adds	r7, #24
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	200000c4 	.word	0x200000c4

08016ed8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b086      	sub	sp, #24
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	60f8      	str	r0, [r7, #12]
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	607a      	str	r2, [r7, #4]
 8016ee4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	32b0      	adds	r2, #176	@ 0xb0
 8016ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ef4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d102      	bne.n	8016f02 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016efc:	f04f 33ff 	mov.w	r3, #4294967295
 8016f00:	e06c      	b.n	8016fdc <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d10a      	bne.n	8016f22 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016f0c:	693b      	ldr	r3, [r7, #16]
 8016f0e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016f12:	2320      	movs	r3, #32
 8016f14:	2205      	movs	r2, #5
 8016f16:	68f8      	ldr	r0, [r7, #12]
 8016f18:	f000 f864 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8016f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f20:	e05c      	b.n	8016fdc <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016f22:	2300      	movs	r3, #0
 8016f24:	75fb      	strb	r3, [r7, #23]
 8016f26:	e007      	b.n	8016f38 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016f28:	7dfb      	ldrb	r3, [r7, #23]
 8016f2a:	693a      	ldr	r2, [r7, #16]
 8016f2c:	4413      	add	r3, r2
 8016f2e:	2200      	movs	r2, #0
 8016f30:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016f32:	7dfb      	ldrb	r3, [r7, #23]
 8016f34:	3301      	adds	r3, #1
 8016f36:	75fb      	strb	r3, [r7, #23]
 8016f38:	7dfb      	ldrb	r3, [r7, #23]
 8016f3a:	2b11      	cmp	r3, #17
 8016f3c:	d9f4      	bls.n	8016f28 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	2270      	movs	r2, #112	@ 0x70
 8016f42:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	220c      	movs	r2, #12
 8016f48:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d031      	beq.n	8016fbe <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f60:	461a      	mov	r2, r3
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f68:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016f70:	693b      	ldr	r3, [r7, #16]
 8016f72:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f76:	693a      	ldr	r2, [r7, #16]
 8016f78:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f7c:	00db      	lsls	r3, r3, #3
 8016f7e:	4413      	add	r3, r2
 8016f80:	791a      	ldrb	r2, [r3, #4]
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f8c:	693a      	ldr	r2, [r7, #16]
 8016f8e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f92:	00db      	lsls	r3, r3, #3
 8016f94:	4413      	add	r3, r2
 8016f96:	795a      	ldrb	r2, [r3, #5]
 8016f98:	693b      	ldr	r3, [r7, #16]
 8016f9a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016f9c:	693b      	ldr	r3, [r7, #16]
 8016f9e:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	693b      	ldr	r3, [r7, #16]
 8016fa8:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016fb2:	2b04      	cmp	r3, #4
 8016fb4:	d103      	bne.n	8016fbe <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	2200      	movs	r2, #0
 8016fba:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016fbe:	693b      	ldr	r3, [r7, #16]
 8016fc0:	2212      	movs	r2, #18
 8016fc2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	3304      	adds	r3, #4
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	2b12      	cmp	r3, #18
 8016fcc:	d805      	bhi.n	8016fda <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	3304      	adds	r3, #4
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016fda:	2300      	movs	r3, #0
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3718      	adds	r7, #24
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b085      	sub	sp, #20
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	4608      	mov	r0, r1
 8016fee:	4611      	mov	r1, r2
 8016ff0:	461a      	mov	r2, r3
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	70fb      	strb	r3, [r7, #3]
 8016ff6:	460b      	mov	r3, r1
 8016ff8:	70bb      	strb	r3, [r7, #2]
 8016ffa:	4613      	mov	r3, r2
 8016ffc:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	32b0      	adds	r2, #176	@ 0xb0
 8017008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801700c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d02f      	beq.n	8017074 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801701a:	461a      	mov	r2, r3
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8017022:	78b9      	ldrb	r1, [r7, #2]
 8017024:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801702e:	68fa      	ldr	r2, [r7, #12]
 8017030:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017034:	00db      	lsls	r3, r3, #3
 8017036:	4413      	add	r3, r2
 8017038:	787a      	ldrb	r2, [r7, #1]
 801703a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017042:	68fa      	ldr	r2, [r7, #12]
 8017044:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	4413      	add	r3, r2
 801704c:	2200      	movs	r2, #0
 801704e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017056:	3301      	adds	r3, #1
 8017058:	b2da      	uxtb	r2, r3
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017066:	2b04      	cmp	r3, #4
 8017068:	d105      	bne.n	8017076 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2200      	movs	r2, #0
 801706e:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 8017072:	e000      	b.n	8017076 <SCSI_SenseCode+0x92>
    return;
 8017074:	bf00      	nop
  }
}
 8017076:	3714      	adds	r7, #20
 8017078:	46bd      	mov	sp, r7
 801707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707e:	4770      	bx	lr

08017080 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b086      	sub	sp, #24
 8017084:	af00      	add	r7, sp, #0
 8017086:	60f8      	str	r0, [r7, #12]
 8017088:	460b      	mov	r3, r1
 801708a:	607a      	str	r2, [r7, #4]
 801708c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	32b0      	adds	r2, #176	@ 0xb0
 8017098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801709c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d102      	bne.n	80170aa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80170a4:	f04f 33ff 	mov.w	r3, #4294967295
 80170a8:	e03b      	b.n	8017122 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	d10f      	bne.n	80170d4 <SCSI_StartStopUnit+0x54>
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	3304      	adds	r3, #4
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	f003 0303 	and.w	r3, r3, #3
 80170be:	2b02      	cmp	r3, #2
 80170c0:	d108      	bne.n	80170d4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80170c2:	7af9      	ldrb	r1, [r7, #11]
 80170c4:	2324      	movs	r3, #36	@ 0x24
 80170c6:	2205      	movs	r2, #5
 80170c8:	68f8      	ldr	r0, [r7, #12]
 80170ca:	f7ff ff8b 	bl	8016fe4 <SCSI_SenseCode>

    return -1;
 80170ce:	f04f 33ff 	mov.w	r3, #4294967295
 80170d2:	e026      	b.n	8017122 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	3304      	adds	r3, #4
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	f003 0303 	and.w	r3, r3, #3
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d104      	bne.n	80170ec <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	2200      	movs	r2, #0
 80170e6:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170ea:	e016      	b.n	801711a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	3304      	adds	r3, #4
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	f003 0303 	and.w	r3, r3, #3
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d104      	bne.n	8017104 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	2202      	movs	r2, #2
 80170fe:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017102:	e00a      	b.n	801711a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	3304      	adds	r3, #4
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	f003 0303 	and.w	r3, r3, #3
 801710e:	2b03      	cmp	r3, #3
 8017110:	d103      	bne.n	801711a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	2200      	movs	r2, #0
 8017116:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	2200      	movs	r2, #0
 801711e:	60da      	str	r2, [r3, #12]

  return 0;
 8017120:	2300      	movs	r3, #0
}
 8017122:	4618      	mov	r0, r3
 8017124:	3718      	adds	r7, #24
 8017126:	46bd      	mov	sp, r7
 8017128:	bd80      	pop	{r7, pc}

0801712a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801712a:	b480      	push	{r7}
 801712c:	b087      	sub	sp, #28
 801712e:	af00      	add	r7, sp, #0
 8017130:	60f8      	str	r0, [r7, #12]
 8017132:	460b      	mov	r3, r1
 8017134:	607a      	str	r2, [r7, #4]
 8017136:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	32b0      	adds	r2, #176	@ 0xb0
 8017142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017146:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d102      	bne.n	8017154 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801714e:	f04f 33ff 	mov.w	r3, #4294967295
 8017152:	e011      	b.n	8017178 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	3304      	adds	r3, #4
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d104      	bne.n	8017168 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	2200      	movs	r2, #0
 8017162:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017166:	e003      	b.n	8017170 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	2201      	movs	r2, #1
 801716c:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	2200      	movs	r2, #0
 8017174:	60da      	str	r2, [r3, #12]

  return 0;
 8017176:	2300      	movs	r3, #0
}
 8017178:	4618      	mov	r0, r3
 801717a:	371c      	adds	r7, #28
 801717c:	46bd      	mov	sp, r7
 801717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017182:	4770      	bx	lr

08017184 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b086      	sub	sp, #24
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	460b      	mov	r3, r1
 801718e:	607a      	str	r2, [r7, #4]
 8017190:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	32b0      	adds	r2, #176	@ 0xb0
 801719c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d102      	bne.n	80171ae <SCSI_Read10+0x2a>
  {
    return -1;
 80171a8:	f04f 33ff 	mov.w	r3, #4294967295
 80171ac:	e090      	b.n	80172d0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	7a1b      	ldrb	r3, [r3, #8]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f040 8082 	bne.w	80172bc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80171be:	b25b      	sxtb	r3, r3
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	db0a      	blt.n	80171da <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80171ca:	2320      	movs	r3, #32
 80171cc:	2205      	movs	r2, #5
 80171ce:	68f8      	ldr	r0, [r7, #12]
 80171d0:	f7ff ff08 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 80171d4:	f04f 33ff 	mov.w	r3, #4294967295
 80171d8:	e07a      	b.n	80172d0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80171da:	697b      	ldr	r3, [r7, #20]
 80171dc:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80171e0:	2b02      	cmp	r3, #2
 80171e2:	d108      	bne.n	80171f6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171e4:	7af9      	ldrb	r1, [r7, #11]
 80171e6:	233a      	movs	r3, #58	@ 0x3a
 80171e8:	2202      	movs	r2, #2
 80171ea:	68f8      	ldr	r0, [r7, #12]
 80171ec:	f7ff fefa 	bl	8016fe4 <SCSI_SenseCode>

      return -1;
 80171f0:	f04f 33ff 	mov.w	r3, #4294967295
 80171f4:	e06c      	b.n	80172d0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80171fc:	68fa      	ldr	r2, [r7, #12]
 80171fe:	33b0      	adds	r3, #176	@ 0xb0
 8017200:	009b      	lsls	r3, r3, #2
 8017202:	4413      	add	r3, r2
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	689b      	ldr	r3, [r3, #8]
 8017208:	7afa      	ldrb	r2, [r7, #11]
 801720a:	4610      	mov	r0, r2
 801720c:	4798      	blx	r3
 801720e:	4603      	mov	r3, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d008      	beq.n	8017226 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017214:	7af9      	ldrb	r1, [r7, #11]
 8017216:	233a      	movs	r3, #58	@ 0x3a
 8017218:	2202      	movs	r2, #2
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f7ff fee2 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017220:	f04f 33ff 	mov.w	r3, #4294967295
 8017224:	e054      	b.n	80172d0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	3302      	adds	r3, #2
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	3303      	adds	r3, #3
 8017232:	781b      	ldrb	r3, [r3, #0]
 8017234:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017236:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	3304      	adds	r3, #4
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017240:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017242:	687a      	ldr	r2, [r7, #4]
 8017244:	3205      	adds	r2, #5
 8017246:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017248:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801724a:	697b      	ldr	r3, [r7, #20]
 801724c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	3307      	adds	r3, #7
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	021b      	lsls	r3, r3, #8
 8017258:	687a      	ldr	r2, [r7, #4]
 801725a:	3208      	adds	r2, #8
 801725c:	7812      	ldrb	r2, [r2, #0]
 801725e:	431a      	orrs	r2, r3
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017272:	7af9      	ldrb	r1, [r7, #11]
 8017274:	68f8      	ldr	r0, [r7, #12]
 8017276:	f000 fadc 	bl	8017832 <SCSI_CheckAddressRange>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	da02      	bge.n	8017286 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017280:	f04f 33ff 	mov.w	r3, #4294967295
 8017284:	e024      	b.n	80172d0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017292:	6979      	ldr	r1, [r7, #20]
 8017294:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017298:	fb01 f303 	mul.w	r3, r1, r3
 801729c:	429a      	cmp	r2, r3
 801729e:	d00a      	beq.n	80172b6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80172a6:	2320      	movs	r3, #32
 80172a8:	2205      	movs	r2, #5
 80172aa:	68f8      	ldr	r0, [r7, #12]
 80172ac:	f7ff fe9a 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 80172b0:	f04f 33ff 	mov.w	r3, #4294967295
 80172b4:	e00c      	b.n	80172d0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80172b6:	697b      	ldr	r3, [r7, #20]
 80172b8:	2202      	movs	r2, #2
 80172ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80172c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80172c4:	7afb      	ldrb	r3, [r7, #11]
 80172c6:	4619      	mov	r1, r3
 80172c8:	68f8      	ldr	r0, [r7, #12]
 80172ca:	f000 fadf 	bl	801788c <SCSI_ProcessRead>
 80172ce:	4603      	mov	r3, r0
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3718      	adds	r7, #24
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}

080172d8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b086      	sub	sp, #24
 80172dc:	af00      	add	r7, sp, #0
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	460b      	mov	r3, r1
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	32b0      	adds	r2, #176	@ 0xb0
 80172f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d102      	bne.n	8017302 <SCSI_Read12+0x2a>
  {
    return -1;
 80172fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017300:	e09a      	b.n	8017438 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	7a1b      	ldrb	r3, [r3, #8]
 8017306:	2b00      	cmp	r3, #0
 8017308:	f040 808c 	bne.w	8017424 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017312:	b25b      	sxtb	r3, r3
 8017314:	2b00      	cmp	r3, #0
 8017316:	db0a      	blt.n	801732e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801731e:	2320      	movs	r3, #32
 8017320:	2205      	movs	r2, #5
 8017322:	68f8      	ldr	r0, [r7, #12]
 8017324:	f7ff fe5e 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017328:	f04f 33ff 	mov.w	r3, #4294967295
 801732c:	e084      	b.n	8017438 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017334:	2b02      	cmp	r3, #2
 8017336:	d108      	bne.n	801734a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017338:	7af9      	ldrb	r1, [r7, #11]
 801733a:	233a      	movs	r3, #58	@ 0x3a
 801733c:	2202      	movs	r2, #2
 801733e:	68f8      	ldr	r0, [r7, #12]
 8017340:	f7ff fe50 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017344:	f04f 33ff 	mov.w	r3, #4294967295
 8017348:	e076      	b.n	8017438 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017350:	68fa      	ldr	r2, [r7, #12]
 8017352:	33b0      	adds	r3, #176	@ 0xb0
 8017354:	009b      	lsls	r3, r3, #2
 8017356:	4413      	add	r3, r2
 8017358:	685b      	ldr	r3, [r3, #4]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	7afa      	ldrb	r2, [r7, #11]
 801735e:	4610      	mov	r0, r2
 8017360:	4798      	blx	r3
 8017362:	4603      	mov	r3, r0
 8017364:	2b00      	cmp	r3, #0
 8017366:	d008      	beq.n	801737a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017368:	7af9      	ldrb	r1, [r7, #11]
 801736a:	233a      	movs	r3, #58	@ 0x3a
 801736c:	2202      	movs	r2, #2
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	f7ff fe38 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017374:	f04f 33ff 	mov.w	r3, #4294967295
 8017378:	e05e      	b.n	8017438 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	3302      	adds	r3, #2
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	3303      	adds	r3, #3
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801738a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	3304      	adds	r3, #4
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017394:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017396:	687a      	ldr	r2, [r7, #4]
 8017398:	3205      	adds	r2, #5
 801739a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801739c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	3306      	adds	r3, #6
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	3307      	adds	r3, #7
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	3308      	adds	r3, #8
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80173be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	3209      	adds	r2, #9
 80173c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80173c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173da:	7af9      	ldrb	r1, [r7, #11]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f000 fa28 	bl	8017832 <SCSI_CheckAddressRange>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	da02      	bge.n	80173ee <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80173e8:	f04f 33ff 	mov.w	r3, #4294967295
 80173ec:	e024      	b.n	8017438 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80173ee:	697b      	ldr	r3, [r7, #20]
 80173f0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173fa:	6979      	ldr	r1, [r7, #20]
 80173fc:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017400:	fb01 f303 	mul.w	r3, r1, r3
 8017404:	429a      	cmp	r2, r3
 8017406:	d00a      	beq.n	801741e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801740e:	2320      	movs	r3, #32
 8017410:	2205      	movs	r2, #5
 8017412:	68f8      	ldr	r0, [r7, #12]
 8017414:	f7ff fde6 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017418:	f04f 33ff 	mov.w	r3, #4294967295
 801741c:	e00c      	b.n	8017438 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	2202      	movs	r2, #2
 8017422:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801742a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801742c:	7afb      	ldrb	r3, [r7, #11]
 801742e:	4619      	mov	r1, r3
 8017430:	68f8      	ldr	r0, [r7, #12]
 8017432:	f000 fa2b 	bl	801788c <SCSI_ProcessRead>
 8017436:	4603      	mov	r3, r0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b086      	sub	sp, #24
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	460b      	mov	r3, r1
 801744a:	607a      	str	r2, [r7, #4]
 801744c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	32b0      	adds	r2, #176	@ 0xb0
 8017458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801745c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d102      	bne.n	801746a <SCSI_Write10+0x2a>
  {
    return -1;
 8017464:	f04f 33ff 	mov.w	r3, #4294967295
 8017468:	e0ba      	b.n	80175e0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	7a1b      	ldrb	r3, [r3, #8]
 801746e:	2b00      	cmp	r3, #0
 8017470:	f040 80b0 	bne.w	80175d4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801747a:	2b00      	cmp	r3, #0
 801747c:	d10a      	bne.n	8017494 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017484:	2320      	movs	r3, #32
 8017486:	2205      	movs	r2, #5
 8017488:	68f8      	ldr	r0, [r7, #12]
 801748a:	f7ff fdab 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 801748e:	f04f 33ff 	mov.w	r3, #4294967295
 8017492:	e0a5      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801749a:	b25b      	sxtb	r3, r3
 801749c:	2b00      	cmp	r3, #0
 801749e:	da0a      	bge.n	80174b6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80174a6:	2320      	movs	r3, #32
 80174a8:	2205      	movs	r2, #5
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fd9a 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 80174b0:	f04f 33ff 	mov.w	r3, #4294967295
 80174b4:	e094      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	33b0      	adds	r3, #176	@ 0xb0
 80174c0:	009b      	lsls	r3, r3, #2
 80174c2:	4413      	add	r3, r2
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	689b      	ldr	r3, [r3, #8]
 80174c8:	7afa      	ldrb	r2, [r7, #11]
 80174ca:	4610      	mov	r0, r2
 80174cc:	4798      	blx	r3
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d008      	beq.n	80174e6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80174d4:	7af9      	ldrb	r1, [r7, #11]
 80174d6:	233a      	movs	r3, #58	@ 0x3a
 80174d8:	2202      	movs	r2, #2
 80174da:	68f8      	ldr	r0, [r7, #12]
 80174dc:	f7ff fd82 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 80174e0:	f04f 33ff 	mov.w	r3, #4294967295
 80174e4:	e07c      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174ec:	68fa      	ldr	r2, [r7, #12]
 80174ee:	33b0      	adds	r3, #176	@ 0xb0
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	4413      	add	r3, r2
 80174f4:	685b      	ldr	r3, [r3, #4]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	7afa      	ldrb	r2, [r7, #11]
 80174fa:	4610      	mov	r0, r2
 80174fc:	4798      	blx	r3
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d008      	beq.n	8017516 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8017504:	7af9      	ldrb	r1, [r7, #11]
 8017506:	2327      	movs	r3, #39	@ 0x27
 8017508:	2202      	movs	r2, #2
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f7ff fd6a 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017510:	f04f 33ff 	mov.w	r3, #4294967295
 8017514:	e064      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	3302      	adds	r3, #2
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	3303      	adds	r3, #3
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017526:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	3304      	adds	r3, #4
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017530:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017532:	687a      	ldr	r2, [r7, #4]
 8017534:	3205      	adds	r2, #5
 8017536:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017538:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	3307      	adds	r3, #7
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	3208      	adds	r2, #8
 801754c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801754e:	431a      	orrs	r2, r3
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017562:	7af9      	ldrb	r1, [r7, #11]
 8017564:	68f8      	ldr	r0, [r7, #12]
 8017566:	f000 f964 	bl	8017832 <SCSI_CheckAddressRange>
 801756a:	4603      	mov	r3, r0
 801756c:	2b00      	cmp	r3, #0
 801756e:	da02      	bge.n	8017576 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017570:	f04f 33ff 	mov.w	r3, #4294967295
 8017574:	e034      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801757c:	697a      	ldr	r2, [r7, #20]
 801757e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017582:	fb02 f303 	mul.w	r3, r2, r3
 8017586:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017588:	697b      	ldr	r3, [r7, #20]
 801758a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	429a      	cmp	r2, r3
 8017592:	d00a      	beq.n	80175aa <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801759a:	2320      	movs	r3, #32
 801759c:	2205      	movs	r2, #5
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff fd20 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 80175a4:	f04f 33ff 	mov.w	r3, #4294967295
 80175a8:	e01a      	b.n	80175e0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80175b0:	bf28      	it	cs
 80175b2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80175b6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	2201      	movs	r2, #1
 80175bc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80175be:	4b0a      	ldr	r3, [pc, #40]	@ (80175e8 <SCSI_Write10+0x1a8>)
 80175c0:	7819      	ldrb	r1, [r3, #0]
 80175c2:	697b      	ldr	r3, [r7, #20]
 80175c4:	f103 0210 	add.w	r2, r3, #16
 80175c8:	693b      	ldr	r3, [r7, #16]
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f006 f90b 	bl	801d7e6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80175d0:	2300      	movs	r3, #0
 80175d2:	e005      	b.n	80175e0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80175d4:	7afb      	ldrb	r3, [r7, #11]
 80175d6:	4619      	mov	r1, r3
 80175d8:	68f8      	ldr	r0, [r7, #12]
 80175da:	f000 f9dd 	bl	8017998 <SCSI_ProcessWrite>
 80175de:	4603      	mov	r3, r0
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3718      	adds	r7, #24
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	200000af 	.word	0x200000af

080175ec <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b086      	sub	sp, #24
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	60f8      	str	r0, [r7, #12]
 80175f4:	460b      	mov	r3, r1
 80175f6:	607a      	str	r2, [r7, #4]
 80175f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	32b0      	adds	r2, #176	@ 0xb0
 8017604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017608:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d102      	bne.n	8017616 <SCSI_Write12+0x2a>
  {
    return -1;
 8017610:	f04f 33ff 	mov.w	r3, #4294967295
 8017614:	e0ca      	b.n	80177ac <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	7a1b      	ldrb	r3, [r3, #8]
 801761a:	2b00      	cmp	r3, #0
 801761c:	f040 80c0 	bne.w	80177a0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017626:	2b00      	cmp	r3, #0
 8017628:	d10a      	bne.n	8017640 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017630:	2320      	movs	r3, #32
 8017632:	2205      	movs	r2, #5
 8017634:	68f8      	ldr	r0, [r7, #12]
 8017636:	f7ff fcd5 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 801763a:	f04f 33ff 	mov.w	r3, #4294967295
 801763e:	e0b5      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017646:	b25b      	sxtb	r3, r3
 8017648:	2b00      	cmp	r3, #0
 801764a:	da0a      	bge.n	8017662 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017652:	2320      	movs	r3, #32
 8017654:	2205      	movs	r2, #5
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f7ff fcc4 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 801765c:	f04f 33ff 	mov.w	r3, #4294967295
 8017660:	e0a4      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017668:	68fa      	ldr	r2, [r7, #12]
 801766a:	33b0      	adds	r3, #176	@ 0xb0
 801766c:	009b      	lsls	r3, r3, #2
 801766e:	4413      	add	r3, r2
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	689b      	ldr	r3, [r3, #8]
 8017674:	7afa      	ldrb	r2, [r7, #11]
 8017676:	4610      	mov	r0, r2
 8017678:	4798      	blx	r3
 801767a:	4603      	mov	r3, r0
 801767c:	2b00      	cmp	r3, #0
 801767e:	d00b      	beq.n	8017698 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017680:	7af9      	ldrb	r1, [r7, #11]
 8017682:	233a      	movs	r3, #58	@ 0x3a
 8017684:	2202      	movs	r2, #2
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f7ff fcac 	bl	8016fe4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	2205      	movs	r2, #5
 8017690:	721a      	strb	r2, [r3, #8]
      return -1;
 8017692:	f04f 33ff 	mov.w	r3, #4294967295
 8017696:	e089      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801769e:	68fa      	ldr	r2, [r7, #12]
 80176a0:	33b0      	adds	r3, #176	@ 0xb0
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	4413      	add	r3, r2
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	68db      	ldr	r3, [r3, #12]
 80176aa:	7afa      	ldrb	r2, [r7, #11]
 80176ac:	4610      	mov	r0, r2
 80176ae:	4798      	blx	r3
 80176b0:	4603      	mov	r3, r0
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d00b      	beq.n	80176ce <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80176b6:	7af9      	ldrb	r1, [r7, #11]
 80176b8:	2327      	movs	r3, #39	@ 0x27
 80176ba:	2202      	movs	r2, #2
 80176bc:	68f8      	ldr	r0, [r7, #12]
 80176be:	f7ff fc91 	bl	8016fe4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	2205      	movs	r2, #5
 80176c6:	721a      	strb	r2, [r3, #8]
      return -1;
 80176c8:	f04f 33ff 	mov.w	r3, #4294967295
 80176cc:	e06e      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	3302      	adds	r3, #2
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	3303      	adds	r3, #3
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	3304      	adds	r3, #4
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80176e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	3205      	adds	r2, #5
 80176ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80176f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176f2:	697b      	ldr	r3, [r7, #20]
 80176f4:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	3306      	adds	r3, #6
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	3307      	adds	r3, #7
 8017704:	781b      	ldrb	r3, [r3, #0]
 8017706:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017708:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	3308      	adds	r3, #8
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8017712:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	3209      	adds	r2, #9
 8017718:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801771a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801772e:	7af9      	ldrb	r1, [r7, #11]
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	f000 f87e 	bl	8017832 <SCSI_CheckAddressRange>
 8017736:	4603      	mov	r3, r0
 8017738:	2b00      	cmp	r3, #0
 801773a:	da02      	bge.n	8017742 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801773c:	f04f 33ff 	mov.w	r3, #4294967295
 8017740:	e034      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017748:	697a      	ldr	r2, [r7, #20]
 801774a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801774e:	fb02 f303 	mul.w	r3, r2, r3
 8017752:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801775a:	693a      	ldr	r2, [r7, #16]
 801775c:	429a      	cmp	r2, r3
 801775e:	d00a      	beq.n	8017776 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017766:	2320      	movs	r3, #32
 8017768:	2205      	movs	r2, #5
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	f7ff fc3a 	bl	8016fe4 <SCSI_SenseCode>
      return -1;
 8017770:	f04f 33ff 	mov.w	r3, #4294967295
 8017774:	e01a      	b.n	80177ac <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801777c:	bf28      	it	cs
 801777e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017782:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017784:	697b      	ldr	r3, [r7, #20]
 8017786:	2201      	movs	r2, #1
 8017788:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801778a:	4b0a      	ldr	r3, [pc, #40]	@ (80177b4 <SCSI_Write12+0x1c8>)
 801778c:	7819      	ldrb	r1, [r3, #0]
 801778e:	697b      	ldr	r3, [r7, #20]
 8017790:	f103 0210 	add.w	r2, r3, #16
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	68f8      	ldr	r0, [r7, #12]
 8017798:	f006 f825 	bl	801d7e6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801779c:	2300      	movs	r3, #0
 801779e:	e005      	b.n	80177ac <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80177a0:	7afb      	ldrb	r3, [r7, #11]
 80177a2:	4619      	mov	r1, r3
 80177a4:	68f8      	ldr	r0, [r7, #12]
 80177a6:	f000 f8f7 	bl	8017998 <SCSI_ProcessWrite>
 80177aa:	4603      	mov	r3, r0
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3718      	adds	r7, #24
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	200000af 	.word	0x200000af

080177b8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	460b      	mov	r3, r1
 80177c2:	607a      	str	r2, [r7, #4]
 80177c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	32b0      	adds	r2, #176	@ 0xb0
 80177d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d102      	bne.n	80177e2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80177dc:	f04f 33ff 	mov.w	r3, #4294967295
 80177e0:	e023      	b.n	801782a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	3301      	adds	r3, #1
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	f003 0302 	and.w	r3, r3, #2
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d008      	beq.n	8017802 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80177f0:	7af9      	ldrb	r1, [r7, #11]
 80177f2:	2324      	movs	r3, #36	@ 0x24
 80177f4:	2205      	movs	r2, #5
 80177f6:	68f8      	ldr	r0, [r7, #12]
 80177f8:	f7ff fbf4 	bl	8016fe4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80177fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017800:	e013      	b.n	801782a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801780e:	7af9      	ldrb	r1, [r7, #11]
 8017810:	68f8      	ldr	r0, [r7, #12]
 8017812:	f000 f80e 	bl	8017832 <SCSI_CheckAddressRange>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	da02      	bge.n	8017822 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 801781c:	f04f 33ff 	mov.w	r3, #4294967295
 8017820:	e003      	b.n	801782a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	2200      	movs	r2, #0
 8017826:	60da      	str	r2, [r3, #12]

  return 0;
 8017828:	2300      	movs	r3, #0
}
 801782a:	4618      	mov	r0, r3
 801782c:	3718      	adds	r7, #24
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}

08017832 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8017832:	b580      	push	{r7, lr}
 8017834:	b086      	sub	sp, #24
 8017836:	af00      	add	r7, sp, #0
 8017838:	60f8      	str	r0, [r7, #12]
 801783a:	607a      	str	r2, [r7, #4]
 801783c:	603b      	str	r3, [r7, #0]
 801783e:	460b      	mov	r3, r1
 8017840:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	32b0      	adds	r2, #176	@ 0xb0
 801784c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017850:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8017858:	f04f 33ff 	mov.w	r3, #4294967295
 801785c:	e011      	b.n	8017882 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	441a      	add	r2, r3
 8017864:	697b      	ldr	r3, [r7, #20]
 8017866:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 801786a:	429a      	cmp	r2, r3
 801786c:	d908      	bls.n	8017880 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801786e:	7af9      	ldrb	r1, [r7, #11]
 8017870:	2321      	movs	r3, #33	@ 0x21
 8017872:	2205      	movs	r2, #5
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f7ff fbb5 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 801787a:	f04f 33ff 	mov.w	r3, #4294967295
 801787e:	e000      	b.n	8017882 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8017880:	2300      	movs	r3, #0
}
 8017882:	4618      	mov	r0, r3
 8017884:	3718      	adds	r7, #24
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
	...

0801788c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801788c:	b590      	push	{r4, r7, lr}
 801788e:	b085      	sub	sp, #20
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	460b      	mov	r3, r1
 8017896:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	32b0      	adds	r2, #176	@ 0xb0
 80178a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178a6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d102      	bne.n	80178b4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80178ae:	f04f 33ff 	mov.w	r3, #4294967295
 80178b2:	e06a      	b.n	801798a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80178c0:	fb02 f303 	mul.w	r3, r2, r3
 80178c4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80178c6:	68bb      	ldr	r3, [r7, #8]
 80178c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178cc:	bf28      	it	cs
 80178ce:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80178d2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80178da:	687a      	ldr	r2, [r7, #4]
 80178dc:	33b0      	adds	r3, #176	@ 0xb0
 80178de:	009b      	lsls	r3, r3, #2
 80178e0:	4413      	add	r3, r2
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	691c      	ldr	r4, [r3, #16]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f103 0110 	add.w	r1, r3, #16
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80178f8:	4618      	mov	r0, r3
 80178fa:	68bb      	ldr	r3, [r7, #8]
 80178fc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8017900:	b29b      	uxth	r3, r3
 8017902:	78f8      	ldrb	r0, [r7, #3]
 8017904:	47a0      	blx	r4
 8017906:	4603      	mov	r3, r0
 8017908:	2b00      	cmp	r3, #0
 801790a:	da08      	bge.n	801791e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801790c:	78f9      	ldrb	r1, [r7, #3]
 801790e:	2311      	movs	r3, #17
 8017910:	2204      	movs	r2, #4
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7ff fb66 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8017918:	f04f 33ff 	mov.w	r3, #4294967295
 801791c:	e035      	b.n	801798a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801791e:	4b1d      	ldr	r3, [pc, #116]	@ (8017994 <SCSI_ProcessRead+0x108>)
 8017920:	7819      	ldrb	r1, [r3, #0]
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	f103 0210 	add.w	r2, r3, #16
 8017928:	68bb      	ldr	r3, [r7, #8]
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f005 ff3a 	bl	801d7a4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 801793c:	4619      	mov	r1, r3
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	fbb3 f3f1 	udiv	r3, r3, r1
 8017944:	441a      	add	r2, r3
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017958:	4619      	mov	r1, r3
 801795a:	68bb      	ldr	r3, [r7, #8]
 801795c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017960:	1ad2      	subs	r2, r2, r3
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	1ad2      	subs	r2, r2, r3
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801797e:	2b00      	cmp	r3, #0
 8017980:	d102      	bne.n	8017988 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	2203      	movs	r2, #3
 8017986:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8017988:	2300      	movs	r3, #0
}
 801798a:	4618      	mov	r0, r3
 801798c:	3714      	adds	r7, #20
 801798e:	46bd      	mov	sp, r7
 8017990:	bd90      	pop	{r4, r7, pc}
 8017992:	bf00      	nop
 8017994:	200000ae 	.word	0x200000ae

08017998 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017998:	b590      	push	{r4, r7, lr}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
 80179a0:	460b      	mov	r3, r1
 80179a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	32b0      	adds	r2, #176	@ 0xb0
 80179ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d102      	bne.n	80179c0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80179ba:	f04f 33ff 	mov.w	r3, #4294967295
 80179be:	e07a      	b.n	8017ab6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80179c6:	68fa      	ldr	r2, [r7, #12]
 80179c8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80179cc:	fb02 f303 	mul.w	r3, r2, r3
 80179d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80179d8:	bf28      	it	cs
 80179da:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80179de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80179e6:	687a      	ldr	r2, [r7, #4]
 80179e8:	33b0      	adds	r3, #176	@ 0xb0
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	4413      	add	r3, r2
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	695c      	ldr	r4, [r3, #20]
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	f103 0110 	add.w	r1, r3, #16
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a04:	4618      	mov	r0, r3
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8017a0c:	b29b      	uxth	r3, r3
 8017a0e:	78f8      	ldrb	r0, [r7, #3]
 8017a10:	47a0      	blx	r4
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	da08      	bge.n	8017a2a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8017a18:	78f9      	ldrb	r1, [r7, #3]
 8017a1a:	2303      	movs	r3, #3
 8017a1c:	2204      	movs	r2, #4
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7ff fae0 	bl	8016fe4 <SCSI_SenseCode>
    return -1;
 8017a24:	f04f 33ff 	mov.w	r3, #4294967295
 8017a28:	e045      	b.n	8017ab6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a36:	4619      	mov	r1, r3
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a3e:	441a      	add	r2, r3
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a52:	4619      	mov	r1, r3
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a5a:	1ad2      	subs	r2, r2, r3
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	1ad2      	subs	r2, r2, r3
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d104      	bne.n	8017a86 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017a7c:	2100      	movs	r1, #0
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f7fe fce2 	bl	8016448 <MSC_BOT_SendCSW>
 8017a84:	e016      	b.n	8017ab4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a8c:	68fa      	ldr	r2, [r7, #12]
 8017a8e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017a92:	fb02 f303 	mul.w	r3, r2, r3
 8017a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017a9a:	bf28      	it	cs
 8017a9c:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017aa0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017aa2:	4b07      	ldr	r3, [pc, #28]	@ (8017ac0 <SCSI_ProcessWrite+0x128>)
 8017aa4:	7819      	ldrb	r1, [r3, #0]
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f103 0210 	add.w	r2, r3, #16
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f005 fe99 	bl	801d7e6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8017ab4:	2300      	movs	r3, #0
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	3714      	adds	r7, #20
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd90      	pop	{r4, r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	200000af 	.word	0x200000af

08017ac4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8017ac4:	b480      	push	{r7}
 8017ac6:	b087      	sub	sp, #28
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	4613      	mov	r3, r2
 8017ad0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017ad2:	88fb      	ldrh	r3, [r7, #6]
 8017ad4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d102      	bne.n	8017ae2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017adc:	f04f 33ff 	mov.w	r3, #4294967295
 8017ae0:	e013      	b.n	8017b0a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017ae2:	8afa      	ldrh	r2, [r7, #22]
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017ae8:	e00b      	b.n	8017b02 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017aea:	8afb      	ldrh	r3, [r7, #22]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017af0:	8afb      	ldrh	r3, [r7, #22]
 8017af2:	68ba      	ldr	r2, [r7, #8]
 8017af4:	441a      	add	r2, r3
 8017af6:	8afb      	ldrh	r3, [r7, #22]
 8017af8:	7811      	ldrb	r1, [r2, #0]
 8017afa:	68fa      	ldr	r2, [r7, #12]
 8017afc:	4413      	add	r3, r2
 8017afe:	460a      	mov	r2, r1
 8017b00:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017b02:	8afb      	ldrh	r3, [r7, #22]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d1f0      	bne.n	8017aea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017b08:	2300      	movs	r3, #0
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	371c      	adds	r7, #28
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr

08017b16 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017b16:	b580      	push	{r7, lr}
 8017b18:	b086      	sub	sp, #24
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	60f8      	str	r0, [r7, #12]
 8017b1e:	60b9      	str	r1, [r7, #8]
 8017b20:	4613      	mov	r3, r2
 8017b22:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d101      	bne.n	8017b2e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b2a:	2303      	movs	r3, #3
 8017b2c:	e01f      	b.n	8017b6e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	2200      	movs	r2, #0
 8017b32:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	2200      	movs	r2, #0
 8017b3a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2200      	movs	r2, #0
 8017b42:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d003      	beq.n	8017b54 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	68ba      	ldr	r2, [r7, #8]
 8017b50:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2201      	movs	r2, #1
 8017b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	79fa      	ldrb	r2, [r7, #7]
 8017b60:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017b62:	68f8      	ldr	r0, [r7, #12]
 8017b64:	f005 fc94 	bl	801d490 <USBD_LL_Init>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3718      	adds	r7, #24
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f005 fd08 	bl	801d594 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2201      	movs	r2, #1
 8017b88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d009      	beq.n	8017baa <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	6852      	ldr	r2, [r2, #4]
 8017ba2:	b2d2      	uxtb	r2, r2
 8017ba4:	4611      	mov	r1, r2
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2200      	movs	r2, #0
 8017bae:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	f005 fcb0 	bl	801d528 <USBD_LL_DeInit>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	3710      	adds	r7, #16
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}

08017bd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017bd6:	b580      	push	{r7, lr}
 8017bd8:	b084      	sub	sp, #16
 8017bda:	af00      	add	r7, sp, #0
 8017bdc:	6078      	str	r0, [r7, #4]
 8017bde:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017be0:	2300      	movs	r3, #0
 8017be2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d101      	bne.n	8017bee <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017bea:	2303      	movs	r3, #3
 8017bec:	e025      	b.n	8017c3a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	683a      	ldr	r2, [r7, #0]
 8017bf2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	32ae      	adds	r2, #174	@ 0xae
 8017c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00f      	beq.n	8017c2a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	32ae      	adds	r2, #174	@ 0xae
 8017c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c1a:	f107 020e 	add.w	r2, r7, #14
 8017c1e:	4610      	mov	r0, r2
 8017c20:	4798      	blx	r3
 8017c22:	4602      	mov	r2, r0
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017c30:	1c5a      	adds	r2, r3, #1
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3710      	adds	r7, #16
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b082      	sub	sp, #8
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f005 fc87 	bl	801d55e <USBD_LL_Start>
 8017c50:	4603      	mov	r3, r0
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f005 fc96 	bl	801d594 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d009      	beq.n	8017c86 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	687a      	ldr	r2, [r7, #4]
 8017c7c:	6852      	ldr	r2, [r2, #4]
 8017c7e:	b2d2      	uxtb	r2, r2
 8017c80:	4611      	mov	r1, r2
 8017c82:	6878      	ldr	r0, [r7, #4]
 8017c84:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017c86:	2300      	movs	r3, #0
}
 8017c88:	4618      	mov	r0, r3
 8017c8a:	3708      	adds	r7, #8
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}

08017c90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017c98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	370c      	adds	r7, #12
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr

08017ca6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017ca6:	b580      	push	{r7, lr}
 8017ca8:	b084      	sub	sp, #16
 8017caa:	af00      	add	r7, sp, #0
 8017cac:	6078      	str	r0, [r7, #4]
 8017cae:	460b      	mov	r3, r1
 8017cb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d009      	beq.n	8017cd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	78fa      	ldrb	r2, [r7, #3]
 8017cca:	4611      	mov	r1, r2
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	4798      	blx	r3
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3710      	adds	r7, #16
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}

08017cde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017cde:	b580      	push	{r7, lr}
 8017ce0:	b084      	sub	sp, #16
 8017ce2:	af00      	add	r7, sp, #0
 8017ce4:	6078      	str	r0, [r7, #4]
 8017ce6:	460b      	mov	r3, r1
 8017ce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cea:	2300      	movs	r3, #0
 8017cec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	78fa      	ldrb	r2, [r7, #3]
 8017cf8:	4611      	mov	r1, r2
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	4798      	blx	r3
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017d04:	2303      	movs	r3, #3
 8017d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3710      	adds	r7, #16
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017d12:	b580      	push	{r7, lr}
 8017d14:	b084      	sub	sp, #16
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	6078      	str	r0, [r7, #4]
 8017d1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d22:	6839      	ldr	r1, [r7, #0]
 8017d24:	4618      	mov	r0, r3
 8017d26:	f001 f90c 	bl	8018f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017d38:	461a      	mov	r2, r3
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d46:	f003 031f 	and.w	r3, r3, #31
 8017d4a:	2b02      	cmp	r3, #2
 8017d4c:	d01a      	beq.n	8017d84 <USBD_LL_SetupStage+0x72>
 8017d4e:	2b02      	cmp	r3, #2
 8017d50:	d822      	bhi.n	8017d98 <USBD_LL_SetupStage+0x86>
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d002      	beq.n	8017d5c <USBD_LL_SetupStage+0x4a>
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d00a      	beq.n	8017d70 <USBD_LL_SetupStage+0x5e>
 8017d5a:	e01d      	b.n	8017d98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d62:	4619      	mov	r1, r3
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f000 fb63 	bl	8018430 <USBD_StdDevReq>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8017d6e:	e020      	b.n	8017db2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d76:	4619      	mov	r1, r3
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f000 fbcb 	bl	8018514 <USBD_StdItfReq>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	73fb      	strb	r3, [r7, #15]
      break;
 8017d82:	e016      	b.n	8017db2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f000 fc2d 	bl	80185ec <USBD_StdEPReq>
 8017d92:	4603      	mov	r3, r0
 8017d94:	73fb      	strb	r3, [r7, #15]
      break;
 8017d96:	e00c      	b.n	8017db2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	4619      	mov	r1, r3
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f005 fc73 	bl	801d692 <USBD_LL_StallEP>
 8017dac:	4603      	mov	r3, r0
 8017dae:	73fb      	strb	r3, [r7, #15]
      break;
 8017db0:	bf00      	nop
  }

  return ret;
 8017db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017db4:	4618      	mov	r0, r3
 8017db6:	3710      	adds	r7, #16
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}

08017dbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b086      	sub	sp, #24
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	460b      	mov	r3, r1
 8017dc6:	607a      	str	r2, [r7, #4]
 8017dc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017dce:	7afb      	ldrb	r3, [r7, #11]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d16e      	bne.n	8017eb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017dda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017de2:	2b03      	cmp	r3, #3
 8017de4:	f040 8098 	bne.w	8017f18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017de8:	693b      	ldr	r3, [r7, #16]
 8017dea:	689a      	ldr	r2, [r3, #8]
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	68db      	ldr	r3, [r3, #12]
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d913      	bls.n	8017e1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	689a      	ldr	r2, [r3, #8]
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	68db      	ldr	r3, [r3, #12]
 8017dfc:	1ad2      	subs	r2, r2, r3
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	68da      	ldr	r2, [r3, #12]
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	689b      	ldr	r3, [r3, #8]
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	bf28      	it	cs
 8017e0e:	4613      	movcs	r3, r2
 8017e10:	461a      	mov	r2, r3
 8017e12:	6879      	ldr	r1, [r7, #4]
 8017e14:	68f8      	ldr	r0, [r7, #12]
 8017e16:	f001 f96b 	bl	80190f0 <USBD_CtlContinueRx>
 8017e1a:	e07d      	b.n	8017f18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017e22:	f003 031f 	and.w	r3, r3, #31
 8017e26:	2b02      	cmp	r3, #2
 8017e28:	d014      	beq.n	8017e54 <USBD_LL_DataOutStage+0x98>
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	d81d      	bhi.n	8017e6a <USBD_LL_DataOutStage+0xae>
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d002      	beq.n	8017e38 <USBD_LL_DataOutStage+0x7c>
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	d003      	beq.n	8017e3e <USBD_LL_DataOutStage+0x82>
 8017e36:	e018      	b.n	8017e6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	75bb      	strb	r3, [r7, #22]
            break;
 8017e3c:	e018      	b.n	8017e70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	4619      	mov	r1, r3
 8017e48:	68f8      	ldr	r0, [r7, #12]
 8017e4a:	f000 fa64 	bl	8018316 <USBD_CoreFindIF>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	75bb      	strb	r3, [r7, #22]
            break;
 8017e52:	e00d      	b.n	8017e70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	4619      	mov	r1, r3
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f000 fa66 	bl	8018330 <USBD_CoreFindEP>
 8017e64:	4603      	mov	r3, r0
 8017e66:	75bb      	strb	r3, [r7, #22]
            break;
 8017e68:	e002      	b.n	8017e70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8017e6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017e70:	7dbb      	ldrb	r3, [r7, #22]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d119      	bne.n	8017eaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	2b03      	cmp	r3, #3
 8017e80:	d113      	bne.n	8017eaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017e82:	7dba      	ldrb	r2, [r7, #22]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	32ae      	adds	r2, #174	@ 0xae
 8017e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e8c:	691b      	ldr	r3, [r3, #16]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d00b      	beq.n	8017eaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017e92:	7dba      	ldrb	r2, [r7, #22]
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017e9a:	7dba      	ldrb	r2, [r7, #22]
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	32ae      	adds	r2, #174	@ 0xae
 8017ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	68f8      	ldr	r0, [r7, #12]
 8017ea8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017eaa:	68f8      	ldr	r0, [r7, #12]
 8017eac:	f001 f931 	bl	8019112 <USBD_CtlSendStatus>
 8017eb0:	e032      	b.n	8017f18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017eb2:	7afb      	ldrb	r3, [r7, #11]
 8017eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017eb8:	b2db      	uxtb	r3, r3
 8017eba:	4619      	mov	r1, r3
 8017ebc:	68f8      	ldr	r0, [r7, #12]
 8017ebe:	f000 fa37 	bl	8018330 <USBD_CoreFindEP>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ec6:	7dbb      	ldrb	r3, [r7, #22]
 8017ec8:	2bff      	cmp	r3, #255	@ 0xff
 8017eca:	d025      	beq.n	8017f18 <USBD_LL_DataOutStage+0x15c>
 8017ecc:	7dbb      	ldrb	r3, [r7, #22]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d122      	bne.n	8017f18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b03      	cmp	r3, #3
 8017edc:	d117      	bne.n	8017f0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017ede:	7dba      	ldrb	r2, [r7, #22]
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	32ae      	adds	r2, #174	@ 0xae
 8017ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ee8:	699b      	ldr	r3, [r3, #24]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d00f      	beq.n	8017f0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017eee:	7dba      	ldrb	r2, [r7, #22]
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017ef6:	7dba      	ldrb	r2, [r7, #22]
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	32ae      	adds	r2, #174	@ 0xae
 8017efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f00:	699b      	ldr	r3, [r3, #24]
 8017f02:	7afa      	ldrb	r2, [r7, #11]
 8017f04:	4611      	mov	r1, r2
 8017f06:	68f8      	ldr	r0, [r7, #12]
 8017f08:	4798      	blx	r3
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017f0e:	7dfb      	ldrb	r3, [r7, #23]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d001      	beq.n	8017f18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017f14:	7dfb      	ldrb	r3, [r7, #23]
 8017f16:	e000      	b.n	8017f1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017f18:	2300      	movs	r3, #0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3718      	adds	r7, #24
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}

08017f22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017f22:	b580      	push	{r7, lr}
 8017f24:	b086      	sub	sp, #24
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	60f8      	str	r0, [r7, #12]
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	607a      	str	r2, [r7, #4]
 8017f2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017f30:	7afb      	ldrb	r3, [r7, #11]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d16f      	bne.n	8018016 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	3314      	adds	r3, #20
 8017f3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017f42:	2b02      	cmp	r3, #2
 8017f44:	d15a      	bne.n	8017ffc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017f46:	693b      	ldr	r3, [r7, #16]
 8017f48:	689a      	ldr	r2, [r3, #8]
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	68db      	ldr	r3, [r3, #12]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d914      	bls.n	8017f7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017f52:	693b      	ldr	r3, [r7, #16]
 8017f54:	689a      	ldr	r2, [r3, #8]
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	68db      	ldr	r3, [r3, #12]
 8017f5a:	1ad2      	subs	r2, r2, r3
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017f60:	693b      	ldr	r3, [r7, #16]
 8017f62:	689b      	ldr	r3, [r3, #8]
 8017f64:	461a      	mov	r2, r3
 8017f66:	6879      	ldr	r1, [r7, #4]
 8017f68:	68f8      	ldr	r0, [r7, #12]
 8017f6a:	f001 f8b0 	bl	80190ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f6e:	2300      	movs	r3, #0
 8017f70:	2200      	movs	r2, #0
 8017f72:	2100      	movs	r1, #0
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	f005 fc36 	bl	801d7e6 <USBD_LL_PrepareReceive>
 8017f7a:	e03f      	b.n	8017ffc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017f7c:	693b      	ldr	r3, [r7, #16]
 8017f7e:	68da      	ldr	r2, [r3, #12]
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	689b      	ldr	r3, [r3, #8]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d11c      	bne.n	8017fc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017f88:	693b      	ldr	r3, [r7, #16]
 8017f8a:	685a      	ldr	r2, [r3, #4]
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d316      	bcc.n	8017fc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	685a      	ldr	r2, [r3, #4]
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d20f      	bcs.n	8017fc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	2100      	movs	r1, #0
 8017fa6:	68f8      	ldr	r0, [r7, #12]
 8017fa8:	f001 f891 	bl	80190ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	2100      	movs	r1, #0
 8017fba:	68f8      	ldr	r0, [r7, #12]
 8017fbc:	f005 fc13 	bl	801d7e6 <USBD_LL_PrepareReceive>
 8017fc0:	e01c      	b.n	8017ffc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017fc8:	b2db      	uxtb	r3, r3
 8017fca:	2b03      	cmp	r3, #3
 8017fcc:	d10f      	bne.n	8017fee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fd4:	68db      	ldr	r3, [r3, #12]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d009      	beq.n	8017fee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	2200      	movs	r2, #0
 8017fde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fe8:	68db      	ldr	r3, [r3, #12]
 8017fea:	68f8      	ldr	r0, [r7, #12]
 8017fec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017fee:	2180      	movs	r1, #128	@ 0x80
 8017ff0:	68f8      	ldr	r0, [r7, #12]
 8017ff2:	f005 fb4e 	bl	801d692 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017ff6:	68f8      	ldr	r0, [r7, #12]
 8017ff8:	f001 f89e 	bl	8019138 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8018002:	2b00      	cmp	r3, #0
 8018004:	d03a      	beq.n	801807c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018006:	68f8      	ldr	r0, [r7, #12]
 8018008:	f7ff fe42 	bl	8017c90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	2200      	movs	r2, #0
 8018010:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8018014:	e032      	b.n	801807c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018016:	7afb      	ldrb	r3, [r7, #11]
 8018018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801801c:	b2db      	uxtb	r3, r3
 801801e:	4619      	mov	r1, r3
 8018020:	68f8      	ldr	r0, [r7, #12]
 8018022:	f000 f985 	bl	8018330 <USBD_CoreFindEP>
 8018026:	4603      	mov	r3, r0
 8018028:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801802a:	7dfb      	ldrb	r3, [r7, #23]
 801802c:	2bff      	cmp	r3, #255	@ 0xff
 801802e:	d025      	beq.n	801807c <USBD_LL_DataInStage+0x15a>
 8018030:	7dfb      	ldrb	r3, [r7, #23]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d122      	bne.n	801807c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b03      	cmp	r3, #3
 8018040:	d11c      	bne.n	801807c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018042:	7dfa      	ldrb	r2, [r7, #23]
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	32ae      	adds	r2, #174	@ 0xae
 8018048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801804c:	695b      	ldr	r3, [r3, #20]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d014      	beq.n	801807c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018052:	7dfa      	ldrb	r2, [r7, #23]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801805a:	7dfa      	ldrb	r2, [r7, #23]
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	32ae      	adds	r2, #174	@ 0xae
 8018060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018064:	695b      	ldr	r3, [r3, #20]
 8018066:	7afa      	ldrb	r2, [r7, #11]
 8018068:	4611      	mov	r1, r2
 801806a:	68f8      	ldr	r0, [r7, #12]
 801806c:	4798      	blx	r3
 801806e:	4603      	mov	r3, r0
 8018070:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018072:	7dbb      	ldrb	r3, [r7, #22]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d001      	beq.n	801807c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018078:	7dbb      	ldrb	r3, [r7, #22]
 801807a:	e000      	b.n	801807e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801807c:	2300      	movs	r3, #0
}
 801807e:	4618      	mov	r0, r3
 8018080:	3718      	adds	r7, #24
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b084      	sub	sp, #16
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801808e:	2300      	movs	r3, #0
 8018090:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	2201      	movs	r2, #1
 8018096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2200      	movs	r2, #0
 801809e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2200      	movs	r2, #0
 80180ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d014      	beq.n	80180ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180c8:	685b      	ldr	r3, [r3, #4]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d00e      	beq.n	80180ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	6852      	ldr	r2, [r2, #4]
 80180da:	b2d2      	uxtb	r2, r2
 80180dc:	4611      	mov	r1, r2
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	4798      	blx	r3
 80180e2:	4603      	mov	r3, r0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d001      	beq.n	80180ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80180e8:	2303      	movs	r3, #3
 80180ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180ec:	2340      	movs	r3, #64	@ 0x40
 80180ee:	2200      	movs	r2, #0
 80180f0:	2100      	movs	r1, #0
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f005 fa69 	bl	801d5ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	2201      	movs	r2, #1
 80180fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2240      	movs	r2, #64	@ 0x40
 8018104:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018108:	2340      	movs	r3, #64	@ 0x40
 801810a:	2200      	movs	r2, #0
 801810c:	2180      	movs	r1, #128	@ 0x80
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f005 fa5b 	bl	801d5ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2201      	movs	r2, #1
 8018118:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2240      	movs	r2, #64	@ 0x40
 801811e:	621a      	str	r2, [r3, #32]

  return ret;
 8018120:	7bfb      	ldrb	r3, [r7, #15]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}

0801812a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801812a:	b480      	push	{r7}
 801812c:	b083      	sub	sp, #12
 801812e:	af00      	add	r7, sp, #0
 8018130:	6078      	str	r0, [r7, #4]
 8018132:	460b      	mov	r3, r1
 8018134:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	78fa      	ldrb	r2, [r7, #3]
 801813a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801813c:	2300      	movs	r3, #0
}
 801813e:	4618      	mov	r0, r3
 8018140:	370c      	adds	r7, #12
 8018142:	46bd      	mov	sp, r7
 8018144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018148:	4770      	bx	lr

0801814a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801814a:	b480      	push	{r7}
 801814c:	b083      	sub	sp, #12
 801814e:	af00      	add	r7, sp, #0
 8018150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018158:	b2db      	uxtb	r3, r3
 801815a:	2b04      	cmp	r3, #4
 801815c:	d006      	beq.n	801816c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018164:	b2da      	uxtb	r2, r3
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2204      	movs	r2, #4
 8018170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018174:	2300      	movs	r3, #0
}
 8018176:	4618      	mov	r0, r3
 8018178:	370c      	adds	r7, #12
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr

08018182 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018182:	b480      	push	{r7}
 8018184:	b083      	sub	sp, #12
 8018186:	af00      	add	r7, sp, #0
 8018188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018190:	b2db      	uxtb	r3, r3
 8018192:	2b04      	cmp	r3, #4
 8018194:	d106      	bne.n	80181a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801819c:	b2da      	uxtb	r2, r3
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80181a4:	2300      	movs	r3, #0
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	370c      	adds	r7, #12
 80181aa:	46bd      	mov	sp, r7
 80181ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b0:	4770      	bx	lr

080181b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80181b2:	b580      	push	{r7, lr}
 80181b4:	b082      	sub	sp, #8
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	2b03      	cmp	r3, #3
 80181c4:	d110      	bne.n	80181e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d00b      	beq.n	80181e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181d6:	69db      	ldr	r3, [r3, #28]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d005      	beq.n	80181e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181e2:	69db      	ldr	r3, [r3, #28]
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80181e8:	2300      	movs	r3, #0
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3708      	adds	r7, #8
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80181f2:	b580      	push	{r7, lr}
 80181f4:	b082      	sub	sp, #8
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
 80181fa:	460b      	mov	r3, r1
 80181fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	32ae      	adds	r2, #174	@ 0xae
 8018208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d101      	bne.n	8018214 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018210:	2303      	movs	r3, #3
 8018212:	e01c      	b.n	801824e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801821a:	b2db      	uxtb	r3, r3
 801821c:	2b03      	cmp	r3, #3
 801821e:	d115      	bne.n	801824c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	32ae      	adds	r2, #174	@ 0xae
 801822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801822e:	6a1b      	ldr	r3, [r3, #32]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d00b      	beq.n	801824c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	32ae      	adds	r2, #174	@ 0xae
 801823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018242:	6a1b      	ldr	r3, [r3, #32]
 8018244:	78fa      	ldrb	r2, [r7, #3]
 8018246:	4611      	mov	r1, r2
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801824c:	2300      	movs	r3, #0
}
 801824e:	4618      	mov	r0, r3
 8018250:	3708      	adds	r7, #8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}

08018256 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018256:	b580      	push	{r7, lr}
 8018258:	b082      	sub	sp, #8
 801825a:	af00      	add	r7, sp, #0
 801825c:	6078      	str	r0, [r7, #4]
 801825e:	460b      	mov	r3, r1
 8018260:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	32ae      	adds	r2, #174	@ 0xae
 801826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d101      	bne.n	8018278 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018274:	2303      	movs	r3, #3
 8018276:	e01c      	b.n	80182b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b03      	cmp	r3, #3
 8018282:	d115      	bne.n	80182b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	32ae      	adds	r2, #174	@ 0xae
 801828e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018294:	2b00      	cmp	r3, #0
 8018296:	d00b      	beq.n	80182b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	32ae      	adds	r2, #174	@ 0xae
 80182a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182a8:	78fa      	ldrb	r2, [r7, #3]
 80182aa:	4611      	mov	r1, r2
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80182b0:	2300      	movs	r3, #0
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80182ba:	b480      	push	{r7}
 80182bc:	b083      	sub	sp, #12
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80182c2:	2300      	movs	r3, #0
}
 80182c4:	4618      	mov	r0, r3
 80182c6:	370c      	adds	r7, #12
 80182c8:	46bd      	mov	sp, r7
 80182ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ce:	4770      	bx	lr

080182d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80182d8:	2300      	movs	r3, #0
 80182da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2201      	movs	r2, #1
 80182e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d00e      	beq.n	801830c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	687a      	ldr	r2, [r7, #4]
 80182f8:	6852      	ldr	r2, [r2, #4]
 80182fa:	b2d2      	uxtb	r2, r2
 80182fc:	4611      	mov	r1, r2
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	4798      	blx	r3
 8018302:	4603      	mov	r3, r0
 8018304:	2b00      	cmp	r3, #0
 8018306:	d001      	beq.n	801830c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018308:	2303      	movs	r3, #3
 801830a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801830c:	7bfb      	ldrb	r3, [r7, #15]
}
 801830e:	4618      	mov	r0, r3
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018316:	b480      	push	{r7}
 8018318:	b083      	sub	sp, #12
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
 801831e:	460b      	mov	r3, r1
 8018320:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018322:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018324:	4618      	mov	r0, r3
 8018326:	370c      	adds	r7, #12
 8018328:	46bd      	mov	sp, r7
 801832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832e:	4770      	bx	lr

08018330 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018330:	b480      	push	{r7}
 8018332:	b083      	sub	sp, #12
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	460b      	mov	r3, r1
 801833a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801833c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801833e:	4618      	mov	r0, r3
 8018340:	370c      	adds	r7, #12
 8018342:	46bd      	mov	sp, r7
 8018344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018348:	4770      	bx	lr

0801834a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801834a:	b580      	push	{r7, lr}
 801834c:	b086      	sub	sp, #24
 801834e:	af00      	add	r7, sp, #0
 8018350:	6078      	str	r0, [r7, #4]
 8018352:	460b      	mov	r3, r1
 8018354:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801835e:	2300      	movs	r3, #0
 8018360:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	885b      	ldrh	r3, [r3, #2]
 8018366:	b29b      	uxth	r3, r3
 8018368:	68fa      	ldr	r2, [r7, #12]
 801836a:	7812      	ldrb	r2, [r2, #0]
 801836c:	4293      	cmp	r3, r2
 801836e:	d91f      	bls.n	80183b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018376:	e013      	b.n	80183a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018378:	f107 030a 	add.w	r3, r7, #10
 801837c:	4619      	mov	r1, r3
 801837e:	6978      	ldr	r0, [r7, #20]
 8018380:	f000 f81b 	bl	80183ba <USBD_GetNextDesc>
 8018384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018386:	697b      	ldr	r3, [r7, #20]
 8018388:	785b      	ldrb	r3, [r3, #1]
 801838a:	2b05      	cmp	r3, #5
 801838c:	d108      	bne.n	80183a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801838e:	697b      	ldr	r3, [r7, #20]
 8018390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018392:	693b      	ldr	r3, [r7, #16]
 8018394:	789b      	ldrb	r3, [r3, #2]
 8018396:	78fa      	ldrb	r2, [r7, #3]
 8018398:	429a      	cmp	r2, r3
 801839a:	d008      	beq.n	80183ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801839c:	2300      	movs	r3, #0
 801839e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	885b      	ldrh	r3, [r3, #2]
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	897b      	ldrh	r3, [r7, #10]
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d8e5      	bhi.n	8018378 <USBD_GetEpDesc+0x2e>
 80183ac:	e000      	b.n	80183b0 <USBD_GetEpDesc+0x66>
          break;
 80183ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80183b0:	693b      	ldr	r3, [r7, #16]
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	3718      	adds	r7, #24
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}

080183ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80183ba:	b480      	push	{r7}
 80183bc:	b085      	sub	sp, #20
 80183be:	af00      	add	r7, sp, #0
 80183c0:	6078      	str	r0, [r7, #4]
 80183c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	881b      	ldrh	r3, [r3, #0]
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	7812      	ldrb	r2, [r2, #0]
 80183d0:	4413      	add	r3, r2
 80183d2:	b29a      	uxth	r2, r3
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	781b      	ldrb	r3, [r3, #0]
 80183dc:	461a      	mov	r2, r3
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	4413      	add	r3, r2
 80183e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80183e4:	68fb      	ldr	r3, [r7, #12]
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3714      	adds	r7, #20
 80183ea:	46bd      	mov	sp, r7
 80183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f0:	4770      	bx	lr

080183f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80183f2:	b480      	push	{r7}
 80183f4:	b087      	sub	sp, #28
 80183f6:	af00      	add	r7, sp, #0
 80183f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80183fe:	697b      	ldr	r3, [r7, #20]
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	3301      	adds	r3, #1
 8018408:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018410:	8a3b      	ldrh	r3, [r7, #16]
 8018412:	021b      	lsls	r3, r3, #8
 8018414:	b21a      	sxth	r2, r3
 8018416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801841a:	4313      	orrs	r3, r2
 801841c:	b21b      	sxth	r3, r3
 801841e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018420:	89fb      	ldrh	r3, [r7, #14]
}
 8018422:	4618      	mov	r0, r3
 8018424:	371c      	adds	r7, #28
 8018426:	46bd      	mov	sp, r7
 8018428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842c:	4770      	bx	lr
	...

08018430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b084      	sub	sp, #16
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801843a:	2300      	movs	r3, #0
 801843c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018446:	2b40      	cmp	r3, #64	@ 0x40
 8018448:	d005      	beq.n	8018456 <USBD_StdDevReq+0x26>
 801844a:	2b40      	cmp	r3, #64	@ 0x40
 801844c:	d857      	bhi.n	80184fe <USBD_StdDevReq+0xce>
 801844e:	2b00      	cmp	r3, #0
 8018450:	d00f      	beq.n	8018472 <USBD_StdDevReq+0x42>
 8018452:	2b20      	cmp	r3, #32
 8018454:	d153      	bne.n	80184fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	32ae      	adds	r2, #174	@ 0xae
 8018460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018464:	689b      	ldr	r3, [r3, #8]
 8018466:	6839      	ldr	r1, [r7, #0]
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	4798      	blx	r3
 801846c:	4603      	mov	r3, r0
 801846e:	73fb      	strb	r3, [r7, #15]
      break;
 8018470:	e04a      	b.n	8018508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	785b      	ldrb	r3, [r3, #1]
 8018476:	2b09      	cmp	r3, #9
 8018478:	d83b      	bhi.n	80184f2 <USBD_StdDevReq+0xc2>
 801847a:	a201      	add	r2, pc, #4	@ (adr r2, 8018480 <USBD_StdDevReq+0x50>)
 801847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018480:	080184d5 	.word	0x080184d5
 8018484:	080184e9 	.word	0x080184e9
 8018488:	080184f3 	.word	0x080184f3
 801848c:	080184df 	.word	0x080184df
 8018490:	080184f3 	.word	0x080184f3
 8018494:	080184b3 	.word	0x080184b3
 8018498:	080184a9 	.word	0x080184a9
 801849c:	080184f3 	.word	0x080184f3
 80184a0:	080184cb 	.word	0x080184cb
 80184a4:	080184bd 	.word	0x080184bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80184a8:	6839      	ldr	r1, [r7, #0]
 80184aa:	6878      	ldr	r0, [r7, #4]
 80184ac:	f000 fa3c 	bl	8018928 <USBD_GetDescriptor>
          break;
 80184b0:	e024      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80184b2:	6839      	ldr	r1, [r7, #0]
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f000 fba1 	bl	8018bfc <USBD_SetAddress>
          break;
 80184ba:	e01f      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80184bc:	6839      	ldr	r1, [r7, #0]
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f000 fbe0 	bl	8018c84 <USBD_SetConfig>
 80184c4:	4603      	mov	r3, r0
 80184c6:	73fb      	strb	r3, [r7, #15]
          break;
 80184c8:	e018      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80184ca:	6839      	ldr	r1, [r7, #0]
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fc83 	bl	8018dd8 <USBD_GetConfig>
          break;
 80184d2:	e013      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80184d4:	6839      	ldr	r1, [r7, #0]
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f000 fcb4 	bl	8018e44 <USBD_GetStatus>
          break;
 80184dc:	e00e      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80184de:	6839      	ldr	r1, [r7, #0]
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f000 fce3 	bl	8018eac <USBD_SetFeature>
          break;
 80184e6:	e009      	b.n	80184fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80184e8:	6839      	ldr	r1, [r7, #0]
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f000 fd07 	bl	8018efe <USBD_ClrFeature>
          break;
 80184f0:	e004      	b.n	80184fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80184f2:	6839      	ldr	r1, [r7, #0]
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f000 fd5e 	bl	8018fb6 <USBD_CtlError>
          break;
 80184fa:	bf00      	nop
      }
      break;
 80184fc:	e004      	b.n	8018508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80184fe:	6839      	ldr	r1, [r7, #0]
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f000 fd58 	bl	8018fb6 <USBD_CtlError>
      break;
 8018506:	bf00      	nop
  }

  return ret;
 8018508:	7bfb      	ldrb	r3, [r7, #15]
}
 801850a:	4618      	mov	r0, r3
 801850c:	3710      	adds	r7, #16
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop

08018514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
 801851c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801851e:	2300      	movs	r3, #0
 8018520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801852a:	2b40      	cmp	r3, #64	@ 0x40
 801852c:	d005      	beq.n	801853a <USBD_StdItfReq+0x26>
 801852e:	2b40      	cmp	r3, #64	@ 0x40
 8018530:	d852      	bhi.n	80185d8 <USBD_StdItfReq+0xc4>
 8018532:	2b00      	cmp	r3, #0
 8018534:	d001      	beq.n	801853a <USBD_StdItfReq+0x26>
 8018536:	2b20      	cmp	r3, #32
 8018538:	d14e      	bne.n	80185d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018540:	b2db      	uxtb	r3, r3
 8018542:	3b01      	subs	r3, #1
 8018544:	2b02      	cmp	r3, #2
 8018546:	d840      	bhi.n	80185ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	889b      	ldrh	r3, [r3, #4]
 801854c:	b2db      	uxtb	r3, r3
 801854e:	2b01      	cmp	r3, #1
 8018550:	d836      	bhi.n	80185c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	889b      	ldrh	r3, [r3, #4]
 8018556:	b2db      	uxtb	r3, r3
 8018558:	4619      	mov	r1, r3
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f7ff fedb 	bl	8018316 <USBD_CoreFindIF>
 8018560:	4603      	mov	r3, r0
 8018562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018564:	7bbb      	ldrb	r3, [r7, #14]
 8018566:	2bff      	cmp	r3, #255	@ 0xff
 8018568:	d01d      	beq.n	80185a6 <USBD_StdItfReq+0x92>
 801856a:	7bbb      	ldrb	r3, [r7, #14]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d11a      	bne.n	80185a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018570:	7bba      	ldrb	r2, [r7, #14]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	32ae      	adds	r2, #174	@ 0xae
 8018576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801857a:	689b      	ldr	r3, [r3, #8]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d00f      	beq.n	80185a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018580:	7bba      	ldrb	r2, [r7, #14]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018588:	7bba      	ldrb	r2, [r7, #14]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	32ae      	adds	r2, #174	@ 0xae
 801858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	6839      	ldr	r1, [r7, #0]
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	4798      	blx	r3
 801859a:	4603      	mov	r3, r0
 801859c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801859e:	e004      	b.n	80185aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80185a0:	2303      	movs	r3, #3
 80185a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80185a4:	e001      	b.n	80185aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80185a6:	2303      	movs	r3, #3
 80185a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	88db      	ldrh	r3, [r3, #6]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d110      	bne.n	80185d4 <USBD_StdItfReq+0xc0>
 80185b2:	7bfb      	ldrb	r3, [r7, #15]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d10d      	bne.n	80185d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f000 fdaa 	bl	8019112 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80185be:	e009      	b.n	80185d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80185c0:	6839      	ldr	r1, [r7, #0]
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f000 fcf7 	bl	8018fb6 <USBD_CtlError>
          break;
 80185c8:	e004      	b.n	80185d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80185ca:	6839      	ldr	r1, [r7, #0]
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f000 fcf2 	bl	8018fb6 <USBD_CtlError>
          break;
 80185d2:	e000      	b.n	80185d6 <USBD_StdItfReq+0xc2>
          break;
 80185d4:	bf00      	nop
      }
      break;
 80185d6:	e004      	b.n	80185e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80185d8:	6839      	ldr	r1, [r7, #0]
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f000 fceb 	bl	8018fb6 <USBD_CtlError>
      break;
 80185e0:	bf00      	nop
  }

  return ret;
 80185e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3710      	adds	r7, #16
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}

080185ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80185f6:	2300      	movs	r3, #0
 80185f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80185fa:	683b      	ldr	r3, [r7, #0]
 80185fc:	889b      	ldrh	r3, [r3, #4]
 80185fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018608:	2b40      	cmp	r3, #64	@ 0x40
 801860a:	d007      	beq.n	801861c <USBD_StdEPReq+0x30>
 801860c:	2b40      	cmp	r3, #64	@ 0x40
 801860e:	f200 817f 	bhi.w	8018910 <USBD_StdEPReq+0x324>
 8018612:	2b00      	cmp	r3, #0
 8018614:	d02a      	beq.n	801866c <USBD_StdEPReq+0x80>
 8018616:	2b20      	cmp	r3, #32
 8018618:	f040 817a 	bne.w	8018910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801861c:	7bbb      	ldrb	r3, [r7, #14]
 801861e:	4619      	mov	r1, r3
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7ff fe85 	bl	8018330 <USBD_CoreFindEP>
 8018626:	4603      	mov	r3, r0
 8018628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801862a:	7b7b      	ldrb	r3, [r7, #13]
 801862c:	2bff      	cmp	r3, #255	@ 0xff
 801862e:	f000 8174 	beq.w	801891a <USBD_StdEPReq+0x32e>
 8018632:	7b7b      	ldrb	r3, [r7, #13]
 8018634:	2b00      	cmp	r3, #0
 8018636:	f040 8170 	bne.w	801891a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801863a:	7b7a      	ldrb	r2, [r7, #13]
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8018642:	7b7a      	ldrb	r2, [r7, #13]
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	32ae      	adds	r2, #174	@ 0xae
 8018648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801864c:	689b      	ldr	r3, [r3, #8]
 801864e:	2b00      	cmp	r3, #0
 8018650:	f000 8163 	beq.w	801891a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018654:	7b7a      	ldrb	r2, [r7, #13]
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	32ae      	adds	r2, #174	@ 0xae
 801865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801865e:	689b      	ldr	r3, [r3, #8]
 8018660:	6839      	ldr	r1, [r7, #0]
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	4798      	blx	r3
 8018666:	4603      	mov	r3, r0
 8018668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801866a:	e156      	b.n	801891a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	785b      	ldrb	r3, [r3, #1]
 8018670:	2b03      	cmp	r3, #3
 8018672:	d008      	beq.n	8018686 <USBD_StdEPReq+0x9a>
 8018674:	2b03      	cmp	r3, #3
 8018676:	f300 8145 	bgt.w	8018904 <USBD_StdEPReq+0x318>
 801867a:	2b00      	cmp	r3, #0
 801867c:	f000 809b 	beq.w	80187b6 <USBD_StdEPReq+0x1ca>
 8018680:	2b01      	cmp	r3, #1
 8018682:	d03c      	beq.n	80186fe <USBD_StdEPReq+0x112>
 8018684:	e13e      	b.n	8018904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801868c:	b2db      	uxtb	r3, r3
 801868e:	2b02      	cmp	r3, #2
 8018690:	d002      	beq.n	8018698 <USBD_StdEPReq+0xac>
 8018692:	2b03      	cmp	r3, #3
 8018694:	d016      	beq.n	80186c4 <USBD_StdEPReq+0xd8>
 8018696:	e02c      	b.n	80186f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018698:	7bbb      	ldrb	r3, [r7, #14]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d00d      	beq.n	80186ba <USBD_StdEPReq+0xce>
 801869e:	7bbb      	ldrb	r3, [r7, #14]
 80186a0:	2b80      	cmp	r3, #128	@ 0x80
 80186a2:	d00a      	beq.n	80186ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80186a4:	7bbb      	ldrb	r3, [r7, #14]
 80186a6:	4619      	mov	r1, r3
 80186a8:	6878      	ldr	r0, [r7, #4]
 80186aa:	f004 fff2 	bl	801d692 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80186ae:	2180      	movs	r1, #128	@ 0x80
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f004 ffee 	bl	801d692 <USBD_LL_StallEP>
 80186b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80186b8:	e020      	b.n	80186fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80186ba:	6839      	ldr	r1, [r7, #0]
 80186bc:	6878      	ldr	r0, [r7, #4]
 80186be:	f000 fc7a 	bl	8018fb6 <USBD_CtlError>
              break;
 80186c2:	e01b      	b.n	80186fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	885b      	ldrh	r3, [r3, #2]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d10e      	bne.n	80186ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80186cc:	7bbb      	ldrb	r3, [r7, #14]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d00b      	beq.n	80186ea <USBD_StdEPReq+0xfe>
 80186d2:	7bbb      	ldrb	r3, [r7, #14]
 80186d4:	2b80      	cmp	r3, #128	@ 0x80
 80186d6:	d008      	beq.n	80186ea <USBD_StdEPReq+0xfe>
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	88db      	ldrh	r3, [r3, #6]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d104      	bne.n	80186ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80186e0:	7bbb      	ldrb	r3, [r7, #14]
 80186e2:	4619      	mov	r1, r3
 80186e4:	6878      	ldr	r0, [r7, #4]
 80186e6:	f004 ffd4 	bl	801d692 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f000 fd11 	bl	8019112 <USBD_CtlSendStatus>

              break;
 80186f0:	e004      	b.n	80186fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80186f2:	6839      	ldr	r1, [r7, #0]
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f000 fc5e 	bl	8018fb6 <USBD_CtlError>
              break;
 80186fa:	bf00      	nop
          }
          break;
 80186fc:	e107      	b.n	801890e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018704:	b2db      	uxtb	r3, r3
 8018706:	2b02      	cmp	r3, #2
 8018708:	d002      	beq.n	8018710 <USBD_StdEPReq+0x124>
 801870a:	2b03      	cmp	r3, #3
 801870c:	d016      	beq.n	801873c <USBD_StdEPReq+0x150>
 801870e:	e04b      	b.n	80187a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018710:	7bbb      	ldrb	r3, [r7, #14]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d00d      	beq.n	8018732 <USBD_StdEPReq+0x146>
 8018716:	7bbb      	ldrb	r3, [r7, #14]
 8018718:	2b80      	cmp	r3, #128	@ 0x80
 801871a:	d00a      	beq.n	8018732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801871c:	7bbb      	ldrb	r3, [r7, #14]
 801871e:	4619      	mov	r1, r3
 8018720:	6878      	ldr	r0, [r7, #4]
 8018722:	f004 ffb6 	bl	801d692 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018726:	2180      	movs	r1, #128	@ 0x80
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f004 ffb2 	bl	801d692 <USBD_LL_StallEP>
 801872e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018730:	e040      	b.n	80187b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8018732:	6839      	ldr	r1, [r7, #0]
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f000 fc3e 	bl	8018fb6 <USBD_CtlError>
              break;
 801873a:	e03b      	b.n	80187b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	885b      	ldrh	r3, [r3, #2]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d136      	bne.n	80187b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018744:	7bbb      	ldrb	r3, [r7, #14]
 8018746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801874a:	2b00      	cmp	r3, #0
 801874c:	d004      	beq.n	8018758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801874e:	7bbb      	ldrb	r3, [r7, #14]
 8018750:	4619      	mov	r1, r3
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f004 ffbc 	bl	801d6d0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	f000 fcda 	bl	8019112 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801875e:	7bbb      	ldrb	r3, [r7, #14]
 8018760:	4619      	mov	r1, r3
 8018762:	6878      	ldr	r0, [r7, #4]
 8018764:	f7ff fde4 	bl	8018330 <USBD_CoreFindEP>
 8018768:	4603      	mov	r3, r0
 801876a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801876c:	7b7b      	ldrb	r3, [r7, #13]
 801876e:	2bff      	cmp	r3, #255	@ 0xff
 8018770:	d01f      	beq.n	80187b2 <USBD_StdEPReq+0x1c6>
 8018772:	7b7b      	ldrb	r3, [r7, #13]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d11c      	bne.n	80187b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018778:	7b7a      	ldrb	r2, [r7, #13]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018780:	7b7a      	ldrb	r2, [r7, #13]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	32ae      	adds	r2, #174	@ 0xae
 8018786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801878a:	689b      	ldr	r3, [r3, #8]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d010      	beq.n	80187b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018790:	7b7a      	ldrb	r2, [r7, #13]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	32ae      	adds	r2, #174	@ 0xae
 8018796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879a:	689b      	ldr	r3, [r3, #8]
 801879c:	6839      	ldr	r1, [r7, #0]
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	4798      	blx	r3
 80187a2:	4603      	mov	r3, r0
 80187a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80187a6:	e004      	b.n	80187b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80187a8:	6839      	ldr	r1, [r7, #0]
 80187aa:	6878      	ldr	r0, [r7, #4]
 80187ac:	f000 fc03 	bl	8018fb6 <USBD_CtlError>
              break;
 80187b0:	e000      	b.n	80187b4 <USBD_StdEPReq+0x1c8>
              break;
 80187b2:	bf00      	nop
          }
          break;
 80187b4:	e0ab      	b.n	801890e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	2b02      	cmp	r3, #2
 80187c0:	d002      	beq.n	80187c8 <USBD_StdEPReq+0x1dc>
 80187c2:	2b03      	cmp	r3, #3
 80187c4:	d032      	beq.n	801882c <USBD_StdEPReq+0x240>
 80187c6:	e097      	b.n	80188f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80187c8:	7bbb      	ldrb	r3, [r7, #14]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d007      	beq.n	80187de <USBD_StdEPReq+0x1f2>
 80187ce:	7bbb      	ldrb	r3, [r7, #14]
 80187d0:	2b80      	cmp	r3, #128	@ 0x80
 80187d2:	d004      	beq.n	80187de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80187d4:	6839      	ldr	r1, [r7, #0]
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f000 fbed 	bl	8018fb6 <USBD_CtlError>
                break;
 80187dc:	e091      	b.n	8018902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	da0b      	bge.n	80187fe <USBD_StdEPReq+0x212>
 80187e6:	7bbb      	ldrb	r3, [r7, #14]
 80187e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187ec:	4613      	mov	r3, r2
 80187ee:	009b      	lsls	r3, r3, #2
 80187f0:	4413      	add	r3, r2
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	3310      	adds	r3, #16
 80187f6:	687a      	ldr	r2, [r7, #4]
 80187f8:	4413      	add	r3, r2
 80187fa:	3304      	adds	r3, #4
 80187fc:	e00b      	b.n	8018816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187fe:	7bbb      	ldrb	r3, [r7, #14]
 8018800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018804:	4613      	mov	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018810:	687a      	ldr	r2, [r7, #4]
 8018812:	4413      	add	r3, r2
 8018814:	3304      	adds	r3, #4
 8018816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	2200      	movs	r2, #0
 801881c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	2202      	movs	r2, #2
 8018822:	4619      	mov	r1, r3
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f000 fc37 	bl	8019098 <USBD_CtlSendData>
              break;
 801882a:	e06a      	b.n	8018902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801882c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018830:	2b00      	cmp	r3, #0
 8018832:	da11      	bge.n	8018858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018834:	7bbb      	ldrb	r3, [r7, #14]
 8018836:	f003 020f 	and.w	r2, r3, #15
 801883a:	6879      	ldr	r1, [r7, #4]
 801883c:	4613      	mov	r3, r2
 801883e:	009b      	lsls	r3, r3, #2
 8018840:	4413      	add	r3, r2
 8018842:	009b      	lsls	r3, r3, #2
 8018844:	440b      	add	r3, r1
 8018846:	3324      	adds	r3, #36	@ 0x24
 8018848:	881b      	ldrh	r3, [r3, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d117      	bne.n	801887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801884e:	6839      	ldr	r1, [r7, #0]
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f000 fbb0 	bl	8018fb6 <USBD_CtlError>
                  break;
 8018856:	e054      	b.n	8018902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018858:	7bbb      	ldrb	r3, [r7, #14]
 801885a:	f003 020f 	and.w	r2, r3, #15
 801885e:	6879      	ldr	r1, [r7, #4]
 8018860:	4613      	mov	r3, r2
 8018862:	009b      	lsls	r3, r3, #2
 8018864:	4413      	add	r3, r2
 8018866:	009b      	lsls	r3, r3, #2
 8018868:	440b      	add	r3, r1
 801886a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801886e:	881b      	ldrh	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d104      	bne.n	801887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018874:	6839      	ldr	r1, [r7, #0]
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f000 fb9d 	bl	8018fb6 <USBD_CtlError>
                  break;
 801887c:	e041      	b.n	8018902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801887e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018882:	2b00      	cmp	r3, #0
 8018884:	da0b      	bge.n	801889e <USBD_StdEPReq+0x2b2>
 8018886:	7bbb      	ldrb	r3, [r7, #14]
 8018888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801888c:	4613      	mov	r3, r2
 801888e:	009b      	lsls	r3, r3, #2
 8018890:	4413      	add	r3, r2
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	3310      	adds	r3, #16
 8018896:	687a      	ldr	r2, [r7, #4]
 8018898:	4413      	add	r3, r2
 801889a:	3304      	adds	r3, #4
 801889c:	e00b      	b.n	80188b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801889e:	7bbb      	ldrb	r3, [r7, #14]
 80188a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80188a4:	4613      	mov	r3, r2
 80188a6:	009b      	lsls	r3, r3, #2
 80188a8:	4413      	add	r3, r2
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80188b0:	687a      	ldr	r2, [r7, #4]
 80188b2:	4413      	add	r3, r2
 80188b4:	3304      	adds	r3, #4
 80188b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80188b8:	7bbb      	ldrb	r3, [r7, #14]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d002      	beq.n	80188c4 <USBD_StdEPReq+0x2d8>
 80188be:	7bbb      	ldrb	r3, [r7, #14]
 80188c0:	2b80      	cmp	r3, #128	@ 0x80
 80188c2:	d103      	bne.n	80188cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	2200      	movs	r2, #0
 80188c8:	601a      	str	r2, [r3, #0]
 80188ca:	e00e      	b.n	80188ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80188cc:	7bbb      	ldrb	r3, [r7, #14]
 80188ce:	4619      	mov	r1, r3
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f004 ff1c 	bl	801d70e <USBD_LL_IsStallEP>
 80188d6:	4603      	mov	r3, r0
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d003      	beq.n	80188e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	2201      	movs	r2, #1
 80188e0:	601a      	str	r2, [r3, #0]
 80188e2:	e002      	b.n	80188ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	2200      	movs	r2, #0
 80188e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	2202      	movs	r2, #2
 80188ee:	4619      	mov	r1, r3
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f000 fbd1 	bl	8019098 <USBD_CtlSendData>
              break;
 80188f6:	e004      	b.n	8018902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80188f8:	6839      	ldr	r1, [r7, #0]
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f000 fb5b 	bl	8018fb6 <USBD_CtlError>
              break;
 8018900:	bf00      	nop
          }
          break;
 8018902:	e004      	b.n	801890e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8018904:	6839      	ldr	r1, [r7, #0]
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f000 fb55 	bl	8018fb6 <USBD_CtlError>
          break;
 801890c:	bf00      	nop
      }
      break;
 801890e:	e005      	b.n	801891c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018910:	6839      	ldr	r1, [r7, #0]
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	f000 fb4f 	bl	8018fb6 <USBD_CtlError>
      break;
 8018918:	e000      	b.n	801891c <USBD_StdEPReq+0x330>
      break;
 801891a:	bf00      	nop
  }

  return ret;
 801891c:	7bfb      	ldrb	r3, [r7, #15]
}
 801891e:	4618      	mov	r0, r3
 8018920:	3710      	adds	r7, #16
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}
	...

08018928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b084      	sub	sp, #16
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
 8018930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018932:	2300      	movs	r3, #0
 8018934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018936:	2300      	movs	r3, #0
 8018938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801893a:	2300      	movs	r3, #0
 801893c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	885b      	ldrh	r3, [r3, #2]
 8018942:	0a1b      	lsrs	r3, r3, #8
 8018944:	b29b      	uxth	r3, r3
 8018946:	3b01      	subs	r3, #1
 8018948:	2b06      	cmp	r3, #6
 801894a:	f200 8128 	bhi.w	8018b9e <USBD_GetDescriptor+0x276>
 801894e:	a201      	add	r2, pc, #4	@ (adr r2, 8018954 <USBD_GetDescriptor+0x2c>)
 8018950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018954:	08018971 	.word	0x08018971
 8018958:	08018989 	.word	0x08018989
 801895c:	080189c9 	.word	0x080189c9
 8018960:	08018b9f 	.word	0x08018b9f
 8018964:	08018b9f 	.word	0x08018b9f
 8018968:	08018b3f 	.word	0x08018b3f
 801896c:	08018b6b 	.word	0x08018b6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	687a      	ldr	r2, [r7, #4]
 801897a:	7c12      	ldrb	r2, [r2, #16]
 801897c:	f107 0108 	add.w	r1, r7, #8
 8018980:	4610      	mov	r0, r2
 8018982:	4798      	blx	r3
 8018984:	60f8      	str	r0, [r7, #12]
      break;
 8018986:	e112      	b.n	8018bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	7c1b      	ldrb	r3, [r3, #16]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d10d      	bne.n	80189ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018998:	f107 0208 	add.w	r2, r7, #8
 801899c:	4610      	mov	r0, r2
 801899e:	4798      	blx	r3
 80189a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	3301      	adds	r3, #1
 80189a6:	2202      	movs	r2, #2
 80189a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80189aa:	e100      	b.n	8018bae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80189b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189b4:	f107 0208 	add.w	r2, r7, #8
 80189b8:	4610      	mov	r0, r2
 80189ba:	4798      	blx	r3
 80189bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	3301      	adds	r3, #1
 80189c2:	2202      	movs	r2, #2
 80189c4:	701a      	strb	r2, [r3, #0]
      break;
 80189c6:	e0f2      	b.n	8018bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80189c8:	683b      	ldr	r3, [r7, #0]
 80189ca:	885b      	ldrh	r3, [r3, #2]
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	2b05      	cmp	r3, #5
 80189d0:	f200 80ac 	bhi.w	8018b2c <USBD_GetDescriptor+0x204>
 80189d4:	a201      	add	r2, pc, #4	@ (adr r2, 80189dc <USBD_GetDescriptor+0xb4>)
 80189d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189da:	bf00      	nop
 80189dc:	080189f5 	.word	0x080189f5
 80189e0:	08018a29 	.word	0x08018a29
 80189e4:	08018a5d 	.word	0x08018a5d
 80189e8:	08018a91 	.word	0x08018a91
 80189ec:	08018ac5 	.word	0x08018ac5
 80189f0:	08018af9 	.word	0x08018af9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00b      	beq.n	8018a18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a06:	685b      	ldr	r3, [r3, #4]
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	7c12      	ldrb	r2, [r2, #16]
 8018a0c:	f107 0108 	add.w	r1, r7, #8
 8018a10:	4610      	mov	r0, r2
 8018a12:	4798      	blx	r3
 8018a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a16:	e091      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a18:	6839      	ldr	r1, [r7, #0]
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f000 facb 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018a20:	7afb      	ldrb	r3, [r7, #11]
 8018a22:	3301      	adds	r3, #1
 8018a24:	72fb      	strb	r3, [r7, #11]
          break;
 8018a26:	e089      	b.n	8018b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a2e:	689b      	ldr	r3, [r3, #8]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d00b      	beq.n	8018a4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a3a:	689b      	ldr	r3, [r3, #8]
 8018a3c:	687a      	ldr	r2, [r7, #4]
 8018a3e:	7c12      	ldrb	r2, [r2, #16]
 8018a40:	f107 0108 	add.w	r1, r7, #8
 8018a44:	4610      	mov	r0, r2
 8018a46:	4798      	blx	r3
 8018a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a4a:	e077      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a4c:	6839      	ldr	r1, [r7, #0]
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 fab1 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018a54:	7afb      	ldrb	r3, [r7, #11]
 8018a56:	3301      	adds	r3, #1
 8018a58:	72fb      	strb	r3, [r7, #11]
          break;
 8018a5a:	e06f      	b.n	8018b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d00b      	beq.n	8018a80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a6e:	68db      	ldr	r3, [r3, #12]
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	7c12      	ldrb	r2, [r2, #16]
 8018a74:	f107 0108 	add.w	r1, r7, #8
 8018a78:	4610      	mov	r0, r2
 8018a7a:	4798      	blx	r3
 8018a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a7e:	e05d      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a80:	6839      	ldr	r1, [r7, #0]
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f000 fa97 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018a88:	7afb      	ldrb	r3, [r7, #11]
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a8e:	e055      	b.n	8018b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a96:	691b      	ldr	r3, [r3, #16]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d00b      	beq.n	8018ab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aa2:	691b      	ldr	r3, [r3, #16]
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	7c12      	ldrb	r2, [r2, #16]
 8018aa8:	f107 0108 	add.w	r1, r7, #8
 8018aac:	4610      	mov	r0, r2
 8018aae:	4798      	blx	r3
 8018ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ab2:	e043      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ab4:	6839      	ldr	r1, [r7, #0]
 8018ab6:	6878      	ldr	r0, [r7, #4]
 8018ab8:	f000 fa7d 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018abc:	7afb      	ldrb	r3, [r7, #11]
 8018abe:	3301      	adds	r3, #1
 8018ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8018ac2:	e03b      	b.n	8018b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aca:	695b      	ldr	r3, [r3, #20]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00b      	beq.n	8018ae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ad6:	695b      	ldr	r3, [r3, #20]
 8018ad8:	687a      	ldr	r2, [r7, #4]
 8018ada:	7c12      	ldrb	r2, [r2, #16]
 8018adc:	f107 0108 	add.w	r1, r7, #8
 8018ae0:	4610      	mov	r0, r2
 8018ae2:	4798      	blx	r3
 8018ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ae6:	e029      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ae8:	6839      	ldr	r1, [r7, #0]
 8018aea:	6878      	ldr	r0, [r7, #4]
 8018aec:	f000 fa63 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018af0:	7afb      	ldrb	r3, [r7, #11]
 8018af2:	3301      	adds	r3, #1
 8018af4:	72fb      	strb	r3, [r7, #11]
          break;
 8018af6:	e021      	b.n	8018b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018afe:	699b      	ldr	r3, [r3, #24]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d00b      	beq.n	8018b1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018b0a:	699b      	ldr	r3, [r3, #24]
 8018b0c:	687a      	ldr	r2, [r7, #4]
 8018b0e:	7c12      	ldrb	r2, [r2, #16]
 8018b10:	f107 0108 	add.w	r1, r7, #8
 8018b14:	4610      	mov	r0, r2
 8018b16:	4798      	blx	r3
 8018b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b1a:	e00f      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018b1c:	6839      	ldr	r1, [r7, #0]
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 fa49 	bl	8018fb6 <USBD_CtlError>
            err++;
 8018b24:	7afb      	ldrb	r3, [r7, #11]
 8018b26:	3301      	adds	r3, #1
 8018b28:	72fb      	strb	r3, [r7, #11]
          break;
 8018b2a:	e007      	b.n	8018b3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018b2c:	6839      	ldr	r1, [r7, #0]
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f000 fa41 	bl	8018fb6 <USBD_CtlError>
          err++;
 8018b34:	7afb      	ldrb	r3, [r7, #11]
 8018b36:	3301      	adds	r3, #1
 8018b38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018b3a:	bf00      	nop
      }
      break;
 8018b3c:	e037      	b.n	8018bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	7c1b      	ldrb	r3, [r3, #16]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d109      	bne.n	8018b5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b4e:	f107 0208 	add.w	r2, r7, #8
 8018b52:	4610      	mov	r0, r2
 8018b54:	4798      	blx	r3
 8018b56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b58:	e029      	b.n	8018bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b5a:	6839      	ldr	r1, [r7, #0]
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f000 fa2a 	bl	8018fb6 <USBD_CtlError>
        err++;
 8018b62:	7afb      	ldrb	r3, [r7, #11]
 8018b64:	3301      	adds	r3, #1
 8018b66:	72fb      	strb	r3, [r7, #11]
      break;
 8018b68:	e021      	b.n	8018bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	7c1b      	ldrb	r3, [r3, #16]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d10d      	bne.n	8018b8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b7a:	f107 0208 	add.w	r2, r7, #8
 8018b7e:	4610      	mov	r0, r2
 8018b80:	4798      	blx	r3
 8018b82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	3301      	adds	r3, #1
 8018b88:	2207      	movs	r2, #7
 8018b8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b8c:	e00f      	b.n	8018bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b8e:	6839      	ldr	r1, [r7, #0]
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f000 fa10 	bl	8018fb6 <USBD_CtlError>
        err++;
 8018b96:	7afb      	ldrb	r3, [r7, #11]
 8018b98:	3301      	adds	r3, #1
 8018b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8018b9c:	e007      	b.n	8018bae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018b9e:	6839      	ldr	r1, [r7, #0]
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f000 fa08 	bl	8018fb6 <USBD_CtlError>
      err++;
 8018ba6:	7afb      	ldrb	r3, [r7, #11]
 8018ba8:	3301      	adds	r3, #1
 8018baa:	72fb      	strb	r3, [r7, #11]
      break;
 8018bac:	bf00      	nop
  }

  if (err != 0U)
 8018bae:	7afb      	ldrb	r3, [r7, #11]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d11e      	bne.n	8018bf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018bb4:	683b      	ldr	r3, [r7, #0]
 8018bb6:	88db      	ldrh	r3, [r3, #6]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d016      	beq.n	8018bea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018bbc:	893b      	ldrh	r3, [r7, #8]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d00e      	beq.n	8018be0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	88da      	ldrh	r2, [r3, #6]
 8018bc6:	893b      	ldrh	r3, [r7, #8]
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	bf28      	it	cs
 8018bcc:	4613      	movcs	r3, r2
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018bd2:	893b      	ldrh	r3, [r7, #8]
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	68f9      	ldr	r1, [r7, #12]
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f000 fa5d 	bl	8019098 <USBD_CtlSendData>
 8018bde:	e009      	b.n	8018bf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018be0:	6839      	ldr	r1, [r7, #0]
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	f000 f9e7 	bl	8018fb6 <USBD_CtlError>
 8018be8:	e004      	b.n	8018bf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018bea:	6878      	ldr	r0, [r7, #4]
 8018bec:	f000 fa91 	bl	8019112 <USBD_CtlSendStatus>
 8018bf0:	e000      	b.n	8018bf4 <USBD_GetDescriptor+0x2cc>
    return;
 8018bf2:	bf00      	nop
  }
}
 8018bf4:	3710      	adds	r7, #16
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	bf00      	nop

08018bfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018c06:	683b      	ldr	r3, [r7, #0]
 8018c08:	889b      	ldrh	r3, [r3, #4]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d131      	bne.n	8018c72 <USBD_SetAddress+0x76>
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	88db      	ldrh	r3, [r3, #6]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d12d      	bne.n	8018c72 <USBD_SetAddress+0x76>
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	885b      	ldrh	r3, [r3, #2]
 8018c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8018c1c:	d829      	bhi.n	8018c72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018c1e:	683b      	ldr	r3, [r7, #0]
 8018c20:	885b      	ldrh	r3, [r3, #2]
 8018c22:	b2db      	uxtb	r3, r3
 8018c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018c28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c30:	b2db      	uxtb	r3, r3
 8018c32:	2b03      	cmp	r3, #3
 8018c34:	d104      	bne.n	8018c40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018c36:	6839      	ldr	r1, [r7, #0]
 8018c38:	6878      	ldr	r0, [r7, #4]
 8018c3a:	f000 f9bc 	bl	8018fb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c3e:	e01d      	b.n	8018c7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	7bfa      	ldrb	r2, [r7, #15]
 8018c44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018c48:	7bfb      	ldrb	r3, [r7, #15]
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f004 fd8a 	bl	801d766 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f000 fa5d 	bl	8019112 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c58:	7bfb      	ldrb	r3, [r7, #15]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d004      	beq.n	8018c68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2202      	movs	r2, #2
 8018c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c66:	e009      	b.n	8018c7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	2201      	movs	r2, #1
 8018c6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c70:	e004      	b.n	8018c7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c72:	6839      	ldr	r1, [r7, #0]
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f000 f99e 	bl	8018fb6 <USBD_CtlError>
  }
}
 8018c7a:	bf00      	nop
 8018c7c:	bf00      	nop
 8018c7e:	3710      	adds	r7, #16
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
 8018c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c8e:	2300      	movs	r3, #0
 8018c90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	885b      	ldrh	r3, [r3, #2]
 8018c96:	b2da      	uxtb	r2, r3
 8018c98:	4b4e      	ldr	r3, [pc, #312]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d905      	bls.n	8018cb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018ca4:	6839      	ldr	r1, [r7, #0]
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f000 f985 	bl	8018fb6 <USBD_CtlError>
    return USBD_FAIL;
 8018cac:	2303      	movs	r3, #3
 8018cae:	e08c      	b.n	8018dca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	2b02      	cmp	r3, #2
 8018cba:	d002      	beq.n	8018cc2 <USBD_SetConfig+0x3e>
 8018cbc:	2b03      	cmp	r3, #3
 8018cbe:	d029      	beq.n	8018d14 <USBD_SetConfig+0x90>
 8018cc0:	e075      	b.n	8018dae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018cc2:	4b44      	ldr	r3, [pc, #272]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d020      	beq.n	8018d0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018cca:	4b42      	ldr	r3, [pc, #264]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	461a      	mov	r2, r3
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018cd6:	781b      	ldrb	r3, [r3, #0]
 8018cd8:	4619      	mov	r1, r3
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f7fe ffe3 	bl	8017ca6 <USBD_SetClassConfig>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018ce4:	7bfb      	ldrb	r3, [r7, #15]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d008      	beq.n	8018cfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018cea:	6839      	ldr	r1, [r7, #0]
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f000 f962 	bl	8018fb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2202      	movs	r2, #2
 8018cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018cfa:	e065      	b.n	8018dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	f000 fa08 	bl	8019112 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2203      	movs	r2, #3
 8018d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d0a:	e05d      	b.n	8018dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f000 fa00 	bl	8019112 <USBD_CtlSendStatus>
      break;
 8018d12:	e059      	b.n	8018dc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018d14:	4b2f      	ldr	r3, [pc, #188]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d112      	bne.n	8018d42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2202      	movs	r2, #2
 8018d20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018d24:	4b2b      	ldr	r3, [pc, #172]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d26:	781b      	ldrb	r3, [r3, #0]
 8018d28:	461a      	mov	r2, r3
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d2e:	4b29      	ldr	r3, [pc, #164]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	4619      	mov	r1, r3
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f7fe ffd2 	bl	8017cde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f000 f9e9 	bl	8019112 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018d40:	e042      	b.n	8018dc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018d42:	4b24      	ldr	r3, [pc, #144]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	461a      	mov	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d02a      	beq.n	8018da6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	685b      	ldr	r3, [r3, #4]
 8018d54:	b2db      	uxtb	r3, r3
 8018d56:	4619      	mov	r1, r3
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f7fe ffc0 	bl	8017cde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	461a      	mov	r2, r3
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018d68:	4b1a      	ldr	r3, [pc, #104]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018d6a:	781b      	ldrb	r3, [r3, #0]
 8018d6c:	4619      	mov	r1, r3
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f7fe ff99 	bl	8017ca6 <USBD_SetClassConfig>
 8018d74:	4603      	mov	r3, r0
 8018d76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018d78:	7bfb      	ldrb	r3, [r7, #15]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d00f      	beq.n	8018d9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018d7e:	6839      	ldr	r1, [r7, #0]
 8018d80:	6878      	ldr	r0, [r7, #4]
 8018d82:	f000 f918 	bl	8018fb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	685b      	ldr	r3, [r3, #4]
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	4619      	mov	r1, r3
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f7fe ffa5 	bl	8017cde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2202      	movs	r2, #2
 8018d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d9c:	e014      	b.n	8018dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018d9e:	6878      	ldr	r0, [r7, #4]
 8018da0:	f000 f9b7 	bl	8019112 <USBD_CtlSendStatus>
      break;
 8018da4:	e010      	b.n	8018dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018da6:	6878      	ldr	r0, [r7, #4]
 8018da8:	f000 f9b3 	bl	8019112 <USBD_CtlSendStatus>
      break;
 8018dac:	e00c      	b.n	8018dc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018dae:	6839      	ldr	r1, [r7, #0]
 8018db0:	6878      	ldr	r0, [r7, #4]
 8018db2:	f000 f900 	bl	8018fb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018db6:	4b07      	ldr	r3, [pc, #28]	@ (8018dd4 <USBD_SetConfig+0x150>)
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	4619      	mov	r1, r3
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f7fe ff8e 	bl	8017cde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018dc2:	2303      	movs	r3, #3
 8018dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8018dc6:	bf00      	nop
  }

  return ret;
 8018dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3710      	adds	r7, #16
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}
 8018dd2:	bf00      	nop
 8018dd4:	20001b66 	.word	0x20001b66

08018dd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	88db      	ldrh	r3, [r3, #6]
 8018de6:	2b01      	cmp	r3, #1
 8018de8:	d004      	beq.n	8018df4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018dea:	6839      	ldr	r1, [r7, #0]
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	f000 f8e2 	bl	8018fb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018df2:	e023      	b.n	8018e3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	2b02      	cmp	r3, #2
 8018dfe:	dc02      	bgt.n	8018e06 <USBD_GetConfig+0x2e>
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	dc03      	bgt.n	8018e0c <USBD_GetConfig+0x34>
 8018e04:	e015      	b.n	8018e32 <USBD_GetConfig+0x5a>
 8018e06:	2b03      	cmp	r3, #3
 8018e08:	d00b      	beq.n	8018e22 <USBD_GetConfig+0x4a>
 8018e0a:	e012      	b.n	8018e32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	3308      	adds	r3, #8
 8018e16:	2201      	movs	r2, #1
 8018e18:	4619      	mov	r1, r3
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 f93c 	bl	8019098 <USBD_CtlSendData>
        break;
 8018e20:	e00c      	b.n	8018e3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	3304      	adds	r3, #4
 8018e26:	2201      	movs	r2, #1
 8018e28:	4619      	mov	r1, r3
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f000 f934 	bl	8019098 <USBD_CtlSendData>
        break;
 8018e30:	e004      	b.n	8018e3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018e32:	6839      	ldr	r1, [r7, #0]
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 f8be 	bl	8018fb6 <USBD_CtlError>
        break;
 8018e3a:	bf00      	nop
}
 8018e3c:	bf00      	nop
 8018e3e:	3708      	adds	r7, #8
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b082      	sub	sp, #8
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e54:	b2db      	uxtb	r3, r3
 8018e56:	3b01      	subs	r3, #1
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d81e      	bhi.n	8018e9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	88db      	ldrh	r3, [r3, #6]
 8018e60:	2b02      	cmp	r3, #2
 8018e62:	d004      	beq.n	8018e6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018e64:	6839      	ldr	r1, [r7, #0]
 8018e66:	6878      	ldr	r0, [r7, #4]
 8018e68:	f000 f8a5 	bl	8018fb6 <USBD_CtlError>
        break;
 8018e6c:	e01a      	b.n	8018ea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2201      	movs	r2, #1
 8018e72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d005      	beq.n	8018e8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	68db      	ldr	r3, [r3, #12]
 8018e82:	f043 0202 	orr.w	r2, r3, #2
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	330c      	adds	r3, #12
 8018e8e:	2202      	movs	r2, #2
 8018e90:	4619      	mov	r1, r3
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f000 f900 	bl	8019098 <USBD_CtlSendData>
      break;
 8018e98:	e004      	b.n	8018ea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018e9a:	6839      	ldr	r1, [r7, #0]
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f000 f88a 	bl	8018fb6 <USBD_CtlError>
      break;
 8018ea2:	bf00      	nop
  }
}
 8018ea4:	bf00      	nop
 8018ea6:	3708      	adds	r7, #8
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	885b      	ldrh	r3, [r3, #2]
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	d107      	bne.n	8018ece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2201      	movs	r2, #1
 8018ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f000 f923 	bl	8019112 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018ecc:	e013      	b.n	8018ef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	885b      	ldrh	r3, [r3, #2]
 8018ed2:	2b02      	cmp	r3, #2
 8018ed4:	d10b      	bne.n	8018eee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	889b      	ldrh	r3, [r3, #4]
 8018eda:	0a1b      	lsrs	r3, r3, #8
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	b2da      	uxtb	r2, r3
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f000 f913 	bl	8019112 <USBD_CtlSendStatus>
}
 8018eec:	e003      	b.n	8018ef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018eee:	6839      	ldr	r1, [r7, #0]
 8018ef0:	6878      	ldr	r0, [r7, #4]
 8018ef2:	f000 f860 	bl	8018fb6 <USBD_CtlError>
}
 8018ef6:	bf00      	nop
 8018ef8:	3708      	adds	r7, #8
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}

08018efe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018efe:	b580      	push	{r7, lr}
 8018f00:	b082      	sub	sp, #8
 8018f02:	af00      	add	r7, sp, #0
 8018f04:	6078      	str	r0, [r7, #4]
 8018f06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018f0e:	b2db      	uxtb	r3, r3
 8018f10:	3b01      	subs	r3, #1
 8018f12:	2b02      	cmp	r3, #2
 8018f14:	d80b      	bhi.n	8018f2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	885b      	ldrh	r3, [r3, #2]
 8018f1a:	2b01      	cmp	r3, #1
 8018f1c:	d10c      	bne.n	8018f38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2200      	movs	r2, #0
 8018f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f000 f8f3 	bl	8019112 <USBD_CtlSendStatus>
      }
      break;
 8018f2c:	e004      	b.n	8018f38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018f2e:	6839      	ldr	r1, [r7, #0]
 8018f30:	6878      	ldr	r0, [r7, #4]
 8018f32:	f000 f840 	bl	8018fb6 <USBD_CtlError>
      break;
 8018f36:	e000      	b.n	8018f3a <USBD_ClrFeature+0x3c>
      break;
 8018f38:	bf00      	nop
  }
}
 8018f3a:	bf00      	nop
 8018f3c:	3708      	adds	r7, #8
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}

08018f42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018f42:	b580      	push	{r7, lr}
 8018f44:	b084      	sub	sp, #16
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	6078      	str	r0, [r7, #4]
 8018f4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	781a      	ldrb	r2, [r3, #0]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	3301      	adds	r3, #1
 8018f5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	781a      	ldrb	r2, [r3, #0]
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	3301      	adds	r3, #1
 8018f6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018f6c:	68f8      	ldr	r0, [r7, #12]
 8018f6e:	f7ff fa40 	bl	80183f2 <SWAPBYTE>
 8018f72:	4603      	mov	r3, r0
 8018f74:	461a      	mov	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	3301      	adds	r3, #1
 8018f7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	3301      	adds	r3, #1
 8018f84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018f86:	68f8      	ldr	r0, [r7, #12]
 8018f88:	f7ff fa33 	bl	80183f2 <SWAPBYTE>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	461a      	mov	r2, r3
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	3301      	adds	r3, #1
 8018f98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	3301      	adds	r3, #1
 8018f9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018fa0:	68f8      	ldr	r0, [r7, #12]
 8018fa2:	f7ff fa26 	bl	80183f2 <SWAPBYTE>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	461a      	mov	r2, r3
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	80da      	strh	r2, [r3, #6]
}
 8018fae:	bf00      	nop
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}

08018fb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fb6:	b580      	push	{r7, lr}
 8018fb8:	b082      	sub	sp, #8
 8018fba:	af00      	add	r7, sp, #0
 8018fbc:	6078      	str	r0, [r7, #4]
 8018fbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018fc0:	2180      	movs	r1, #128	@ 0x80
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f004 fb65 	bl	801d692 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018fc8:	2100      	movs	r1, #0
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f004 fb61 	bl	801d692 <USBD_LL_StallEP>
}
 8018fd0:	bf00      	nop
 8018fd2:	3708      	adds	r7, #8
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}

08018fd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b086      	sub	sp, #24
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d036      	beq.n	801905c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018ff2:	6938      	ldr	r0, [r7, #16]
 8018ff4:	f000 f836 	bl	8019064 <USBD_GetLen>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	3301      	adds	r3, #1
 8018ffc:	b29b      	uxth	r3, r3
 8018ffe:	005b      	lsls	r3, r3, #1
 8019000:	b29a      	uxth	r2, r3
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019006:	7dfb      	ldrb	r3, [r7, #23]
 8019008:	68ba      	ldr	r2, [r7, #8]
 801900a:	4413      	add	r3, r2
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	7812      	ldrb	r2, [r2, #0]
 8019010:	701a      	strb	r2, [r3, #0]
  idx++;
 8019012:	7dfb      	ldrb	r3, [r7, #23]
 8019014:	3301      	adds	r3, #1
 8019016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019018:	7dfb      	ldrb	r3, [r7, #23]
 801901a:	68ba      	ldr	r2, [r7, #8]
 801901c:	4413      	add	r3, r2
 801901e:	2203      	movs	r2, #3
 8019020:	701a      	strb	r2, [r3, #0]
  idx++;
 8019022:	7dfb      	ldrb	r3, [r7, #23]
 8019024:	3301      	adds	r3, #1
 8019026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019028:	e013      	b.n	8019052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801902a:	7dfb      	ldrb	r3, [r7, #23]
 801902c:	68ba      	ldr	r2, [r7, #8]
 801902e:	4413      	add	r3, r2
 8019030:	693a      	ldr	r2, [r7, #16]
 8019032:	7812      	ldrb	r2, [r2, #0]
 8019034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	3301      	adds	r3, #1
 801903a:	613b      	str	r3, [r7, #16]
    idx++;
 801903c:	7dfb      	ldrb	r3, [r7, #23]
 801903e:	3301      	adds	r3, #1
 8019040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019042:	7dfb      	ldrb	r3, [r7, #23]
 8019044:	68ba      	ldr	r2, [r7, #8]
 8019046:	4413      	add	r3, r2
 8019048:	2200      	movs	r2, #0
 801904a:	701a      	strb	r2, [r3, #0]
    idx++;
 801904c:	7dfb      	ldrb	r3, [r7, #23]
 801904e:	3301      	adds	r3, #1
 8019050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019052:	693b      	ldr	r3, [r7, #16]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d1e7      	bne.n	801902a <USBD_GetString+0x52>
 801905a:	e000      	b.n	801905e <USBD_GetString+0x86>
    return;
 801905c:	bf00      	nop
  }
}
 801905e:	3718      	adds	r7, #24
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019064:	b480      	push	{r7}
 8019066:	b085      	sub	sp, #20
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801906c:	2300      	movs	r3, #0
 801906e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019074:	e005      	b.n	8019082 <USBD_GetLen+0x1e>
  {
    len++;
 8019076:	7bfb      	ldrb	r3, [r7, #15]
 8019078:	3301      	adds	r3, #1
 801907a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	3301      	adds	r3, #1
 8019080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	781b      	ldrb	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1f5      	bne.n	8019076 <USBD_GetLen+0x12>
  }

  return len;
 801908a:	7bfb      	ldrb	r3, [r7, #15]
}
 801908c:	4618      	mov	r0, r3
 801908e:	3714      	adds	r7, #20
 8019090:	46bd      	mov	sp, r7
 8019092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019096:	4770      	bx	lr

08019098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b084      	sub	sp, #16
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	2202      	movs	r2, #2
 80190a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	687a      	ldr	r2, [r7, #4]
 80190b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	687a      	ldr	r2, [r7, #4]
 80190b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	68ba      	ldr	r2, [r7, #8]
 80190bc:	2100      	movs	r1, #0
 80190be:	68f8      	ldr	r0, [r7, #12]
 80190c0:	f004 fb70 	bl	801d7a4 <USBD_LL_Transmit>

  return USBD_OK;
 80190c4:	2300      	movs	r3, #0
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	3710      	adds	r7, #16
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}

080190ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80190ce:	b580      	push	{r7, lr}
 80190d0:	b084      	sub	sp, #16
 80190d2:	af00      	add	r7, sp, #0
 80190d4:	60f8      	str	r0, [r7, #12]
 80190d6:	60b9      	str	r1, [r7, #8]
 80190d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	68ba      	ldr	r2, [r7, #8]
 80190de:	2100      	movs	r1, #0
 80190e0:	68f8      	ldr	r0, [r7, #12]
 80190e2:	f004 fb5f 	bl	801d7a4 <USBD_LL_Transmit>

  return USBD_OK;
 80190e6:	2300      	movs	r3, #0
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	3710      	adds	r7, #16
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}

080190f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b084      	sub	sp, #16
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	68ba      	ldr	r2, [r7, #8]
 8019100:	2100      	movs	r1, #0
 8019102:	68f8      	ldr	r0, [r7, #12]
 8019104:	f004 fb6f 	bl	801d7e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019108:	2300      	movs	r3, #0
}
 801910a:	4618      	mov	r0, r3
 801910c:	3710      	adds	r7, #16
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}

08019112 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019112:	b580      	push	{r7, lr}
 8019114:	b082      	sub	sp, #8
 8019116:	af00      	add	r7, sp, #0
 8019118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	2204      	movs	r2, #4
 801911e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019122:	2300      	movs	r3, #0
 8019124:	2200      	movs	r2, #0
 8019126:	2100      	movs	r1, #0
 8019128:	6878      	ldr	r0, [r7, #4]
 801912a:	f004 fb3b 	bl	801d7a4 <USBD_LL_Transmit>

  return USBD_OK;
 801912e:	2300      	movs	r3, #0
}
 8019130:	4618      	mov	r0, r3
 8019132:	3708      	adds	r7, #8
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}

08019138 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b082      	sub	sp, #8
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2205      	movs	r2, #5
 8019144:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019148:	2300      	movs	r3, #0
 801914a:	2200      	movs	r2, #0
 801914c:	2100      	movs	r1, #0
 801914e:	6878      	ldr	r0, [r7, #4]
 8019150:	f004 fb49 	bl	801d7e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019154:	2300      	movs	r3, #0
}
 8019156:	4618      	mov	r0, r3
 8019158:	3708      	adds	r7, #8
 801915a:	46bd      	mov	sp, r7
 801915c:	bd80      	pop	{r7, pc}
	...

08019160 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	4603      	mov	r3, r0
 8019168:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801916a:	79fb      	ldrb	r3, [r7, #7]
 801916c:	4a08      	ldr	r2, [pc, #32]	@ (8019190 <disk_status+0x30>)
 801916e:	009b      	lsls	r3, r3, #2
 8019170:	4413      	add	r3, r2
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	685b      	ldr	r3, [r3, #4]
 8019176:	79fa      	ldrb	r2, [r7, #7]
 8019178:	4905      	ldr	r1, [pc, #20]	@ (8019190 <disk_status+0x30>)
 801917a:	440a      	add	r2, r1
 801917c:	7a12      	ldrb	r2, [r2, #8]
 801917e:	4610      	mov	r0, r2
 8019180:	4798      	blx	r3
 8019182:	4603      	mov	r3, r0
 8019184:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019186:	7bfb      	ldrb	r3, [r7, #15]
}
 8019188:	4618      	mov	r0, r3
 801918a:	3710      	adds	r7, #16
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}
 8019190:	20001d90 	.word	0x20001d90

08019194 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	4603      	mov	r3, r0
 801919c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801919e:	2300      	movs	r3, #0
 80191a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80191a2:	79fb      	ldrb	r3, [r7, #7]
 80191a4:	4a0e      	ldr	r2, [pc, #56]	@ (80191e0 <disk_initialize+0x4c>)
 80191a6:	5cd3      	ldrb	r3, [r2, r3]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d114      	bne.n	80191d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80191ac:	79fb      	ldrb	r3, [r7, #7]
 80191ae:	4a0c      	ldr	r2, [pc, #48]	@ (80191e0 <disk_initialize+0x4c>)
 80191b0:	009b      	lsls	r3, r3, #2
 80191b2:	4413      	add	r3, r2
 80191b4:	685b      	ldr	r3, [r3, #4]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	79fa      	ldrb	r2, [r7, #7]
 80191ba:	4909      	ldr	r1, [pc, #36]	@ (80191e0 <disk_initialize+0x4c>)
 80191bc:	440a      	add	r2, r1
 80191be:	7a12      	ldrb	r2, [r2, #8]
 80191c0:	4610      	mov	r0, r2
 80191c2:	4798      	blx	r3
 80191c4:	4603      	mov	r3, r0
 80191c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80191c8:	7bfb      	ldrb	r3, [r7, #15]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d103      	bne.n	80191d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80191ce:	79fb      	ldrb	r3, [r7, #7]
 80191d0:	4a03      	ldr	r2, [pc, #12]	@ (80191e0 <disk_initialize+0x4c>)
 80191d2:	2101      	movs	r1, #1
 80191d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80191d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80191d8:	4618      	mov	r0, r3
 80191da:	3710      	adds	r7, #16
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	20001d90 	.word	0x20001d90

080191e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80191e4:	b590      	push	{r4, r7, lr}
 80191e6:	b087      	sub	sp, #28
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	60b9      	str	r1, [r7, #8]
 80191ec:	607a      	str	r2, [r7, #4]
 80191ee:	603b      	str	r3, [r7, #0]
 80191f0:	4603      	mov	r3, r0
 80191f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80191f4:	7bfb      	ldrb	r3, [r7, #15]
 80191f6:	4a0a      	ldr	r2, [pc, #40]	@ (8019220 <disk_read+0x3c>)
 80191f8:	009b      	lsls	r3, r3, #2
 80191fa:	4413      	add	r3, r2
 80191fc:	685b      	ldr	r3, [r3, #4]
 80191fe:	689c      	ldr	r4, [r3, #8]
 8019200:	7bfb      	ldrb	r3, [r7, #15]
 8019202:	4a07      	ldr	r2, [pc, #28]	@ (8019220 <disk_read+0x3c>)
 8019204:	4413      	add	r3, r2
 8019206:	7a18      	ldrb	r0, [r3, #8]
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	68b9      	ldr	r1, [r7, #8]
 801920e:	47a0      	blx	r4
 8019210:	4603      	mov	r3, r0
 8019212:	75fb      	strb	r3, [r7, #23]
  return res;
 8019214:	7dfb      	ldrb	r3, [r7, #23]
}
 8019216:	4618      	mov	r0, r3
 8019218:	371c      	adds	r7, #28
 801921a:	46bd      	mov	sp, r7
 801921c:	bd90      	pop	{r4, r7, pc}
 801921e:	bf00      	nop
 8019220:	20001d90 	.word	0x20001d90

08019224 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b087      	sub	sp, #28
 8019228:	af00      	add	r7, sp, #0
 801922a:	60b9      	str	r1, [r7, #8]
 801922c:	607a      	str	r2, [r7, #4]
 801922e:	603b      	str	r3, [r7, #0]
 8019230:	4603      	mov	r3, r0
 8019232:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019234:	7bfb      	ldrb	r3, [r7, #15]
 8019236:	4a0a      	ldr	r2, [pc, #40]	@ (8019260 <disk_write+0x3c>)
 8019238:	009b      	lsls	r3, r3, #2
 801923a:	4413      	add	r3, r2
 801923c:	685b      	ldr	r3, [r3, #4]
 801923e:	68dc      	ldr	r4, [r3, #12]
 8019240:	7bfb      	ldrb	r3, [r7, #15]
 8019242:	4a07      	ldr	r2, [pc, #28]	@ (8019260 <disk_write+0x3c>)
 8019244:	4413      	add	r3, r2
 8019246:	7a18      	ldrb	r0, [r3, #8]
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	68b9      	ldr	r1, [r7, #8]
 801924e:	47a0      	blx	r4
 8019250:	4603      	mov	r3, r0
 8019252:	75fb      	strb	r3, [r7, #23]
  return res;
 8019254:	7dfb      	ldrb	r3, [r7, #23]
}
 8019256:	4618      	mov	r0, r3
 8019258:	371c      	adds	r7, #28
 801925a:	46bd      	mov	sp, r7
 801925c:	bd90      	pop	{r4, r7, pc}
 801925e:	bf00      	nop
 8019260:	20001d90 	.word	0x20001d90

08019264 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
 801926a:	4603      	mov	r3, r0
 801926c:	603a      	str	r2, [r7, #0]
 801926e:	71fb      	strb	r3, [r7, #7]
 8019270:	460b      	mov	r3, r1
 8019272:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8019274:	79fb      	ldrb	r3, [r7, #7]
 8019276:	4a09      	ldr	r2, [pc, #36]	@ (801929c <disk_ioctl+0x38>)
 8019278:	009b      	lsls	r3, r3, #2
 801927a:	4413      	add	r3, r2
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	691b      	ldr	r3, [r3, #16]
 8019280:	79fa      	ldrb	r2, [r7, #7]
 8019282:	4906      	ldr	r1, [pc, #24]	@ (801929c <disk_ioctl+0x38>)
 8019284:	440a      	add	r2, r1
 8019286:	7a10      	ldrb	r0, [r2, #8]
 8019288:	79b9      	ldrb	r1, [r7, #6]
 801928a:	683a      	ldr	r2, [r7, #0]
 801928c:	4798      	blx	r3
 801928e:	4603      	mov	r3, r0
 8019290:	73fb      	strb	r3, [r7, #15]
  return res;
 8019292:	7bfb      	ldrb	r3, [r7, #15]
}
 8019294:	4618      	mov	r0, r3
 8019296:	3710      	adds	r7, #16
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	20001d90 	.word	0x20001d90

080192a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80192a0:	b480      	push	{r7}
 80192a2:	b085      	sub	sp, #20
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	3301      	adds	r3, #1
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80192b0:	89fb      	ldrh	r3, [r7, #14]
 80192b2:	021b      	lsls	r3, r3, #8
 80192b4:	b21a      	sxth	r2, r3
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	b21b      	sxth	r3, r3
 80192bc:	4313      	orrs	r3, r2
 80192be:	b21b      	sxth	r3, r3
 80192c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80192c2:	89fb      	ldrh	r3, [r7, #14]
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3714      	adds	r7, #20
 80192c8:	46bd      	mov	sp, r7
 80192ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ce:	4770      	bx	lr

080192d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80192d0:	b480      	push	{r7}
 80192d2:	b085      	sub	sp, #20
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	3303      	adds	r3, #3
 80192dc:	781b      	ldrb	r3, [r3, #0]
 80192de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	021b      	lsls	r3, r3, #8
 80192e4:	687a      	ldr	r2, [r7, #4]
 80192e6:	3202      	adds	r2, #2
 80192e8:	7812      	ldrb	r2, [r2, #0]
 80192ea:	4313      	orrs	r3, r2
 80192ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	021b      	lsls	r3, r3, #8
 80192f2:	687a      	ldr	r2, [r7, #4]
 80192f4:	3201      	adds	r2, #1
 80192f6:	7812      	ldrb	r2, [r2, #0]
 80192f8:	4313      	orrs	r3, r2
 80192fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	021b      	lsls	r3, r3, #8
 8019300:	687a      	ldr	r2, [r7, #4]
 8019302:	7812      	ldrb	r2, [r2, #0]
 8019304:	4313      	orrs	r3, r2
 8019306:	60fb      	str	r3, [r7, #12]
	return rv;
 8019308:	68fb      	ldr	r3, [r7, #12]
}
 801930a:	4618      	mov	r0, r3
 801930c:	3714      	adds	r7, #20
 801930e:	46bd      	mov	sp, r7
 8019310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019314:	4770      	bx	lr

08019316 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8019316:	b480      	push	{r7}
 8019318:	b083      	sub	sp, #12
 801931a:	af00      	add	r7, sp, #0
 801931c:	6078      	str	r0, [r7, #4]
 801931e:	460b      	mov	r3, r1
 8019320:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	1c5a      	adds	r2, r3, #1
 8019326:	607a      	str	r2, [r7, #4]
 8019328:	887a      	ldrh	r2, [r7, #2]
 801932a:	b2d2      	uxtb	r2, r2
 801932c:	701a      	strb	r2, [r3, #0]
 801932e:	887b      	ldrh	r3, [r7, #2]
 8019330:	0a1b      	lsrs	r3, r3, #8
 8019332:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	1c5a      	adds	r2, r3, #1
 8019338:	607a      	str	r2, [r7, #4]
 801933a:	887a      	ldrh	r2, [r7, #2]
 801933c:	b2d2      	uxtb	r2, r2
 801933e:	701a      	strb	r2, [r3, #0]
}
 8019340:	bf00      	nop
 8019342:	370c      	adds	r7, #12
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr

0801934c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801934c:	b480      	push	{r7}
 801934e:	b083      	sub	sp, #12
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	1c5a      	adds	r2, r3, #1
 801935a:	607a      	str	r2, [r7, #4]
 801935c:	683a      	ldr	r2, [r7, #0]
 801935e:	b2d2      	uxtb	r2, r2
 8019360:	701a      	strb	r2, [r3, #0]
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	0a1b      	lsrs	r3, r3, #8
 8019366:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	1c5a      	adds	r2, r3, #1
 801936c:	607a      	str	r2, [r7, #4]
 801936e:	683a      	ldr	r2, [r7, #0]
 8019370:	b2d2      	uxtb	r2, r2
 8019372:	701a      	strb	r2, [r3, #0]
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	0a1b      	lsrs	r3, r3, #8
 8019378:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	1c5a      	adds	r2, r3, #1
 801937e:	607a      	str	r2, [r7, #4]
 8019380:	683a      	ldr	r2, [r7, #0]
 8019382:	b2d2      	uxtb	r2, r2
 8019384:	701a      	strb	r2, [r3, #0]
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	0a1b      	lsrs	r3, r3, #8
 801938a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	1c5a      	adds	r2, r3, #1
 8019390:	607a      	str	r2, [r7, #4]
 8019392:	683a      	ldr	r2, [r7, #0]
 8019394:	b2d2      	uxtb	r2, r2
 8019396:	701a      	strb	r2, [r3, #0]
}
 8019398:	bf00      	nop
 801939a:	370c      	adds	r7, #12
 801939c:	46bd      	mov	sp, r7
 801939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a2:	4770      	bx	lr

080193a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80193a4:	b480      	push	{r7}
 80193a6:	b087      	sub	sp, #28
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	60f8      	str	r0, [r7, #12]
 80193ac:	60b9      	str	r1, [r7, #8]
 80193ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80193b4:	68bb      	ldr	r3, [r7, #8]
 80193b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d00d      	beq.n	80193da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80193be:	693a      	ldr	r2, [r7, #16]
 80193c0:	1c53      	adds	r3, r2, #1
 80193c2:	613b      	str	r3, [r7, #16]
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	1c59      	adds	r1, r3, #1
 80193c8:	6179      	str	r1, [r7, #20]
 80193ca:	7812      	ldrb	r2, [r2, #0]
 80193cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	3b01      	subs	r3, #1
 80193d2:	607b      	str	r3, [r7, #4]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d1f1      	bne.n	80193be <mem_cpy+0x1a>
	}
}
 80193da:	bf00      	nop
 80193dc:	371c      	adds	r7, #28
 80193de:	46bd      	mov	sp, r7
 80193e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e4:	4770      	bx	lr

080193e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80193e6:	b480      	push	{r7}
 80193e8:	b087      	sub	sp, #28
 80193ea:	af00      	add	r7, sp, #0
 80193ec:	60f8      	str	r0, [r7, #12]
 80193ee:	60b9      	str	r1, [r7, #8]
 80193f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80193f6:	697b      	ldr	r3, [r7, #20]
 80193f8:	1c5a      	adds	r2, r3, #1
 80193fa:	617a      	str	r2, [r7, #20]
 80193fc:	68ba      	ldr	r2, [r7, #8]
 80193fe:	b2d2      	uxtb	r2, r2
 8019400:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	3b01      	subs	r3, #1
 8019406:	607b      	str	r3, [r7, #4]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d1f3      	bne.n	80193f6 <mem_set+0x10>
}
 801940e:	bf00      	nop
 8019410:	bf00      	nop
 8019412:	371c      	adds	r7, #28
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr

0801941c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801941c:	b480      	push	{r7}
 801941e:	b089      	sub	sp, #36	@ 0x24
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	61fb      	str	r3, [r7, #28]
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019434:	69fb      	ldr	r3, [r7, #28]
 8019436:	1c5a      	adds	r2, r3, #1
 8019438:	61fa      	str	r2, [r7, #28]
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	4619      	mov	r1, r3
 801943e:	69bb      	ldr	r3, [r7, #24]
 8019440:	1c5a      	adds	r2, r3, #1
 8019442:	61ba      	str	r2, [r7, #24]
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	1acb      	subs	r3, r1, r3
 8019448:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	3b01      	subs	r3, #1
 801944e:	607b      	str	r3, [r7, #4]
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d002      	beq.n	801945c <mem_cmp+0x40>
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d0eb      	beq.n	8019434 <mem_cmp+0x18>

	return r;
 801945c:	697b      	ldr	r3, [r7, #20]
}
 801945e:	4618      	mov	r0, r3
 8019460:	3724      	adds	r7, #36	@ 0x24
 8019462:	46bd      	mov	sp, r7
 8019464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019468:	4770      	bx	lr

0801946a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801946a:	b480      	push	{r7}
 801946c:	b083      	sub	sp, #12
 801946e:	af00      	add	r7, sp, #0
 8019470:	6078      	str	r0, [r7, #4]
 8019472:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8019474:	e002      	b.n	801947c <chk_chr+0x12>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	3301      	adds	r3, #1
 801947a:	607b      	str	r3, [r7, #4]
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	781b      	ldrb	r3, [r3, #0]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d005      	beq.n	8019490 <chk_chr+0x26>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	461a      	mov	r2, r3
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	4293      	cmp	r3, r2
 801948e:	d1f2      	bne.n	8019476 <chk_chr+0xc>
	return *str;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	781b      	ldrb	r3, [r3, #0]
}
 8019494:	4618      	mov	r0, r3
 8019496:	370c      	adds	r7, #12
 8019498:	46bd      	mov	sp, r7
 801949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801949e:	4770      	bx	lr

080194a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80194a0:	b480      	push	{r7}
 80194a2:	b085      	sub	sp, #20
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
 80194a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80194aa:	2300      	movs	r3, #0
 80194ac:	60bb      	str	r3, [r7, #8]
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	60fb      	str	r3, [r7, #12]
 80194b2:	e029      	b.n	8019508 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80194b4:	4a27      	ldr	r2, [pc, #156]	@ (8019554 <chk_lock+0xb4>)
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	011b      	lsls	r3, r3, #4
 80194ba:	4413      	add	r3, r2
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d01d      	beq.n	80194fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194c2:	4a24      	ldr	r2, [pc, #144]	@ (8019554 <chk_lock+0xb4>)
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	011b      	lsls	r3, r3, #4
 80194c8:	4413      	add	r3, r2
 80194ca:	681a      	ldr	r2, [r3, #0]
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d116      	bne.n	8019502 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80194d4:	4a1f      	ldr	r2, [pc, #124]	@ (8019554 <chk_lock+0xb4>)
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	011b      	lsls	r3, r3, #4
 80194da:	4413      	add	r3, r2
 80194dc:	3304      	adds	r3, #4
 80194de:	681a      	ldr	r2, [r3, #0]
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d10c      	bne.n	8019502 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194e8:	4a1a      	ldr	r2, [pc, #104]	@ (8019554 <chk_lock+0xb4>)
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	011b      	lsls	r3, r3, #4
 80194ee:	4413      	add	r3, r2
 80194f0:	3308      	adds	r3, #8
 80194f2:	681a      	ldr	r2, [r3, #0]
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80194f8:	429a      	cmp	r2, r3
 80194fa:	d102      	bne.n	8019502 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194fc:	e007      	b.n	801950e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80194fe:	2301      	movs	r3, #1
 8019500:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	3301      	adds	r3, #1
 8019506:	60fb      	str	r3, [r7, #12]
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	2b01      	cmp	r3, #1
 801950c:	d9d2      	bls.n	80194b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2b02      	cmp	r3, #2
 8019512:	d109      	bne.n	8019528 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d102      	bne.n	8019520 <chk_lock+0x80>
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	2b02      	cmp	r3, #2
 801951e:	d101      	bne.n	8019524 <chk_lock+0x84>
 8019520:	2300      	movs	r3, #0
 8019522:	e010      	b.n	8019546 <chk_lock+0xa6>
 8019524:	2312      	movs	r3, #18
 8019526:	e00e      	b.n	8019546 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d108      	bne.n	8019540 <chk_lock+0xa0>
 801952e:	4a09      	ldr	r2, [pc, #36]	@ (8019554 <chk_lock+0xb4>)
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	011b      	lsls	r3, r3, #4
 8019534:	4413      	add	r3, r2
 8019536:	330c      	adds	r3, #12
 8019538:	881b      	ldrh	r3, [r3, #0]
 801953a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801953e:	d101      	bne.n	8019544 <chk_lock+0xa4>
 8019540:	2310      	movs	r3, #16
 8019542:	e000      	b.n	8019546 <chk_lock+0xa6>
 8019544:	2300      	movs	r3, #0
}
 8019546:	4618      	mov	r0, r3
 8019548:	3714      	adds	r7, #20
 801954a:	46bd      	mov	sp, r7
 801954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019550:	4770      	bx	lr
 8019552:	bf00      	nop
 8019554:	20001b70 	.word	0x20001b70

08019558 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019558:	b480      	push	{r7}
 801955a:	b083      	sub	sp, #12
 801955c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801955e:	2300      	movs	r3, #0
 8019560:	607b      	str	r3, [r7, #4]
 8019562:	e002      	b.n	801956a <enq_lock+0x12>
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	3301      	adds	r3, #1
 8019568:	607b      	str	r3, [r7, #4]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b01      	cmp	r3, #1
 801956e:	d806      	bhi.n	801957e <enq_lock+0x26>
 8019570:	4a09      	ldr	r2, [pc, #36]	@ (8019598 <enq_lock+0x40>)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	011b      	lsls	r3, r3, #4
 8019576:	4413      	add	r3, r2
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d1f2      	bne.n	8019564 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2b02      	cmp	r3, #2
 8019582:	bf14      	ite	ne
 8019584:	2301      	movne	r3, #1
 8019586:	2300      	moveq	r3, #0
 8019588:	b2db      	uxtb	r3, r3
}
 801958a:	4618      	mov	r0, r3
 801958c:	370c      	adds	r7, #12
 801958e:	46bd      	mov	sp, r7
 8019590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019594:	4770      	bx	lr
 8019596:	bf00      	nop
 8019598:	20001b70 	.word	0x20001b70

0801959c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801959c:	b480      	push	{r7}
 801959e:	b085      	sub	sp, #20
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195a6:	2300      	movs	r3, #0
 80195a8:	60fb      	str	r3, [r7, #12]
 80195aa:	e01f      	b.n	80195ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80195ac:	4a41      	ldr	r2, [pc, #260]	@ (80196b4 <inc_lock+0x118>)
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	011b      	lsls	r3, r3, #4
 80195b2:	4413      	add	r3, r2
 80195b4:	681a      	ldr	r2, [r3, #0]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d113      	bne.n	80195e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80195be:	4a3d      	ldr	r2, [pc, #244]	@ (80196b4 <inc_lock+0x118>)
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	011b      	lsls	r3, r3, #4
 80195c4:	4413      	add	r3, r2
 80195c6:	3304      	adds	r3, #4
 80195c8:	681a      	ldr	r2, [r3, #0]
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d109      	bne.n	80195e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80195d2:	4a38      	ldr	r2, [pc, #224]	@ (80196b4 <inc_lock+0x118>)
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	011b      	lsls	r3, r3, #4
 80195d8:	4413      	add	r3, r2
 80195da:	3308      	adds	r3, #8
 80195dc:	681a      	ldr	r2, [r3, #0]
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d006      	beq.n	80195f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	3301      	adds	r3, #1
 80195ea:	60fb      	str	r3, [r7, #12]
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d9dc      	bls.n	80195ac <inc_lock+0x10>
 80195f2:	e000      	b.n	80195f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80195f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	2b02      	cmp	r3, #2
 80195fa:	d132      	bne.n	8019662 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80195fc:	2300      	movs	r3, #0
 80195fe:	60fb      	str	r3, [r7, #12]
 8019600:	e002      	b.n	8019608 <inc_lock+0x6c>
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	3301      	adds	r3, #1
 8019606:	60fb      	str	r3, [r7, #12]
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	2b01      	cmp	r3, #1
 801960c:	d806      	bhi.n	801961c <inc_lock+0x80>
 801960e:	4a29      	ldr	r2, [pc, #164]	@ (80196b4 <inc_lock+0x118>)
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	011b      	lsls	r3, r3, #4
 8019614:	4413      	add	r3, r2
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d1f2      	bne.n	8019602 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	2b02      	cmp	r3, #2
 8019620:	d101      	bne.n	8019626 <inc_lock+0x8a>
 8019622:	2300      	movs	r3, #0
 8019624:	e040      	b.n	80196a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681a      	ldr	r2, [r3, #0]
 801962a:	4922      	ldr	r1, [pc, #136]	@ (80196b4 <inc_lock+0x118>)
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	011b      	lsls	r3, r3, #4
 8019630:	440b      	add	r3, r1
 8019632:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	689a      	ldr	r2, [r3, #8]
 8019638:	491e      	ldr	r1, [pc, #120]	@ (80196b4 <inc_lock+0x118>)
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	011b      	lsls	r3, r3, #4
 801963e:	440b      	add	r3, r1
 8019640:	3304      	adds	r3, #4
 8019642:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	695a      	ldr	r2, [r3, #20]
 8019648:	491a      	ldr	r1, [pc, #104]	@ (80196b4 <inc_lock+0x118>)
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	011b      	lsls	r3, r3, #4
 801964e:	440b      	add	r3, r1
 8019650:	3308      	adds	r3, #8
 8019652:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019654:	4a17      	ldr	r2, [pc, #92]	@ (80196b4 <inc_lock+0x118>)
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	011b      	lsls	r3, r3, #4
 801965a:	4413      	add	r3, r2
 801965c:	330c      	adds	r3, #12
 801965e:	2200      	movs	r2, #0
 8019660:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d009      	beq.n	801967c <inc_lock+0xe0>
 8019668:	4a12      	ldr	r2, [pc, #72]	@ (80196b4 <inc_lock+0x118>)
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	011b      	lsls	r3, r3, #4
 801966e:	4413      	add	r3, r2
 8019670:	330c      	adds	r3, #12
 8019672:	881b      	ldrh	r3, [r3, #0]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d001      	beq.n	801967c <inc_lock+0xe0>
 8019678:	2300      	movs	r3, #0
 801967a:	e015      	b.n	80196a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d108      	bne.n	8019694 <inc_lock+0xf8>
 8019682:	4a0c      	ldr	r2, [pc, #48]	@ (80196b4 <inc_lock+0x118>)
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	011b      	lsls	r3, r3, #4
 8019688:	4413      	add	r3, r2
 801968a:	330c      	adds	r3, #12
 801968c:	881b      	ldrh	r3, [r3, #0]
 801968e:	3301      	adds	r3, #1
 8019690:	b29a      	uxth	r2, r3
 8019692:	e001      	b.n	8019698 <inc_lock+0xfc>
 8019694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019698:	4906      	ldr	r1, [pc, #24]	@ (80196b4 <inc_lock+0x118>)
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	011b      	lsls	r3, r3, #4
 801969e:	440b      	add	r3, r1
 80196a0:	330c      	adds	r3, #12
 80196a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	3301      	adds	r3, #1
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	3714      	adds	r7, #20
 80196ac:	46bd      	mov	sp, r7
 80196ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b2:	4770      	bx	lr
 80196b4:	20001b70 	.word	0x20001b70

080196b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80196b8:	b480      	push	{r7}
 80196ba:	b085      	sub	sp, #20
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	3b01      	subs	r3, #1
 80196c4:	607b      	str	r3, [r7, #4]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2b01      	cmp	r3, #1
 80196ca:	d825      	bhi.n	8019718 <dec_lock+0x60>
		n = Files[i].ctr;
 80196cc:	4a17      	ldr	r2, [pc, #92]	@ (801972c <dec_lock+0x74>)
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	011b      	lsls	r3, r3, #4
 80196d2:	4413      	add	r3, r2
 80196d4:	330c      	adds	r3, #12
 80196d6:	881b      	ldrh	r3, [r3, #0]
 80196d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80196da:	89fb      	ldrh	r3, [r7, #14]
 80196dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196e0:	d101      	bne.n	80196e6 <dec_lock+0x2e>
 80196e2:	2300      	movs	r3, #0
 80196e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80196e6:	89fb      	ldrh	r3, [r7, #14]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d002      	beq.n	80196f2 <dec_lock+0x3a>
 80196ec:	89fb      	ldrh	r3, [r7, #14]
 80196ee:	3b01      	subs	r3, #1
 80196f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80196f2:	4a0e      	ldr	r2, [pc, #56]	@ (801972c <dec_lock+0x74>)
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	011b      	lsls	r3, r3, #4
 80196f8:	4413      	add	r3, r2
 80196fa:	330c      	adds	r3, #12
 80196fc:	89fa      	ldrh	r2, [r7, #14]
 80196fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019700:	89fb      	ldrh	r3, [r7, #14]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d105      	bne.n	8019712 <dec_lock+0x5a>
 8019706:	4a09      	ldr	r2, [pc, #36]	@ (801972c <dec_lock+0x74>)
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	011b      	lsls	r3, r3, #4
 801970c:	4413      	add	r3, r2
 801970e:	2200      	movs	r2, #0
 8019710:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8019712:	2300      	movs	r3, #0
 8019714:	737b      	strb	r3, [r7, #13]
 8019716:	e001      	b.n	801971c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8019718:	2302      	movs	r3, #2
 801971a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801971c:	7b7b      	ldrb	r3, [r7, #13]
}
 801971e:	4618      	mov	r0, r3
 8019720:	3714      	adds	r7, #20
 8019722:	46bd      	mov	sp, r7
 8019724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019728:	4770      	bx	lr
 801972a:	bf00      	nop
 801972c:	20001b70 	.word	0x20001b70

08019730 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019730:	b480      	push	{r7}
 8019732:	b085      	sub	sp, #20
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019738:	2300      	movs	r3, #0
 801973a:	60fb      	str	r3, [r7, #12]
 801973c:	e010      	b.n	8019760 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801973e:	4a0d      	ldr	r2, [pc, #52]	@ (8019774 <clear_lock+0x44>)
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	011b      	lsls	r3, r3, #4
 8019744:	4413      	add	r3, r2
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	687a      	ldr	r2, [r7, #4]
 801974a:	429a      	cmp	r2, r3
 801974c:	d105      	bne.n	801975a <clear_lock+0x2a>
 801974e:	4a09      	ldr	r2, [pc, #36]	@ (8019774 <clear_lock+0x44>)
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	011b      	lsls	r3, r3, #4
 8019754:	4413      	add	r3, r2
 8019756:	2200      	movs	r2, #0
 8019758:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	3301      	adds	r3, #1
 801975e:	60fb      	str	r3, [r7, #12]
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	2b01      	cmp	r3, #1
 8019764:	d9eb      	bls.n	801973e <clear_lock+0xe>
	}
}
 8019766:	bf00      	nop
 8019768:	bf00      	nop
 801976a:	3714      	adds	r7, #20
 801976c:	46bd      	mov	sp, r7
 801976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019772:	4770      	bx	lr
 8019774:	20001b70 	.word	0x20001b70

08019778 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b086      	sub	sp, #24
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8019780:	2300      	movs	r3, #0
 8019782:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	78db      	ldrb	r3, [r3, #3]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d034      	beq.n	80197f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019790:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	7858      	ldrb	r0, [r3, #1]
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801979c:	2301      	movs	r3, #1
 801979e:	697a      	ldr	r2, [r7, #20]
 80197a0:	f7ff fd40 	bl	8019224 <disk_write>
 80197a4:	4603      	mov	r3, r0
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d002      	beq.n	80197b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80197aa:	2301      	movs	r3, #1
 80197ac:	73fb      	strb	r3, [r7, #15]
 80197ae:	e022      	b.n	80197f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2200      	movs	r2, #0
 80197b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197ba:	697a      	ldr	r2, [r7, #20]
 80197bc:	1ad2      	subs	r2, r2, r3
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	69db      	ldr	r3, [r3, #28]
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d217      	bcs.n	80197f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	789b      	ldrb	r3, [r3, #2]
 80197ca:	613b      	str	r3, [r7, #16]
 80197cc:	e010      	b.n	80197f0 <sync_window+0x78>
					wsect += fs->fsize;
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	69db      	ldr	r3, [r3, #28]
 80197d2:	697a      	ldr	r2, [r7, #20]
 80197d4:	4413      	add	r3, r2
 80197d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	7858      	ldrb	r0, [r3, #1]
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197e2:	2301      	movs	r3, #1
 80197e4:	697a      	ldr	r2, [r7, #20]
 80197e6:	f7ff fd1d 	bl	8019224 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	3b01      	subs	r3, #1
 80197ee:	613b      	str	r3, [r7, #16]
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d8eb      	bhi.n	80197ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80197f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3718      	adds	r7, #24
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b084      	sub	sp, #16
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801980a:	2300      	movs	r3, #0
 801980c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019812:	683a      	ldr	r2, [r7, #0]
 8019814:	429a      	cmp	r2, r3
 8019816:	d01b      	beq.n	8019850 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f7ff ffad 	bl	8019778 <sync_window>
 801981e:	4603      	mov	r3, r0
 8019820:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8019822:	7bfb      	ldrb	r3, [r7, #15]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d113      	bne.n	8019850 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	7858      	ldrb	r0, [r3, #1]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019832:	2301      	movs	r3, #1
 8019834:	683a      	ldr	r2, [r7, #0]
 8019836:	f7ff fcd5 	bl	80191e4 <disk_read>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	d004      	beq.n	801984a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019840:	f04f 33ff 	mov.w	r3, #4294967295
 8019844:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019846:	2301      	movs	r3, #1
 8019848:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	683a      	ldr	r2, [r7, #0]
 801984e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8019850:	7bfb      	ldrb	r3, [r7, #15]
}
 8019852:	4618      	mov	r0, r3
 8019854:	3710      	adds	r7, #16
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
	...

0801985c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f7ff ff87 	bl	8019778 <sync_window>
 801986a:	4603      	mov	r3, r0
 801986c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801986e:	7bfb      	ldrb	r3, [r7, #15]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d158      	bne.n	8019926 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	2b03      	cmp	r3, #3
 801987a:	d148      	bne.n	801990e <sync_fs+0xb2>
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	791b      	ldrb	r3, [r3, #4]
 8019880:	2b01      	cmp	r3, #1
 8019882:	d144      	bne.n	801990e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	3334      	adds	r3, #52	@ 0x34
 8019888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801988c:	2100      	movs	r1, #0
 801988e:	4618      	mov	r0, r3
 8019890:	f7ff fda9 	bl	80193e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	3334      	adds	r3, #52	@ 0x34
 8019898:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801989c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ff fd38 	bl	8019316 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	3334      	adds	r3, #52	@ 0x34
 80198aa:	4921      	ldr	r1, [pc, #132]	@ (8019930 <sync_fs+0xd4>)
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7ff fd4d 	bl	801934c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	3334      	adds	r3, #52	@ 0x34
 80198b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80198ba:	491e      	ldr	r1, [pc, #120]	@ (8019934 <sync_fs+0xd8>)
 80198bc:	4618      	mov	r0, r3
 80198be:	f7ff fd45 	bl	801934c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	3334      	adds	r3, #52	@ 0x34
 80198c6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	695b      	ldr	r3, [r3, #20]
 80198ce:	4619      	mov	r1, r3
 80198d0:	4610      	mov	r0, r2
 80198d2:	f7ff fd3b 	bl	801934c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	3334      	adds	r3, #52	@ 0x34
 80198da:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	691b      	ldr	r3, [r3, #16]
 80198e2:	4619      	mov	r1, r3
 80198e4:	4610      	mov	r0, r2
 80198e6:	f7ff fd31 	bl	801934c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6a1b      	ldr	r3, [r3, #32]
 80198ee:	1c5a      	adds	r2, r3, #1
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	7858      	ldrb	r0, [r3, #1]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019902:	2301      	movs	r3, #1
 8019904:	f7ff fc8e 	bl	8019224 <disk_write>
			fs->fsi_flag = 0;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2200      	movs	r2, #0
 801990c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	785b      	ldrb	r3, [r3, #1]
 8019912:	2200      	movs	r2, #0
 8019914:	2100      	movs	r1, #0
 8019916:	4618      	mov	r0, r3
 8019918:	f7ff fca4 	bl	8019264 <disk_ioctl>
 801991c:	4603      	mov	r3, r0
 801991e:	2b00      	cmp	r3, #0
 8019920:	d001      	beq.n	8019926 <sync_fs+0xca>
 8019922:	2301      	movs	r3, #1
 8019924:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8019926:	7bfb      	ldrb	r3, [r7, #15]
}
 8019928:	4618      	mov	r0, r3
 801992a:	3710      	adds	r7, #16
 801992c:	46bd      	mov	sp, r7
 801992e:	bd80      	pop	{r7, pc}
 8019930:	41615252 	.word	0x41615252
 8019934:	61417272 	.word	0x61417272

08019938 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019938:	b480      	push	{r7}
 801993a:	b083      	sub	sp, #12
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
 8019940:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	3b02      	subs	r3, #2
 8019946:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	699b      	ldr	r3, [r3, #24]
 801994c:	3b02      	subs	r3, #2
 801994e:	683a      	ldr	r2, [r7, #0]
 8019950:	429a      	cmp	r2, r3
 8019952:	d301      	bcc.n	8019958 <clust2sect+0x20>
 8019954:	2300      	movs	r3, #0
 8019956:	e008      	b.n	801996a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	895b      	ldrh	r3, [r3, #10]
 801995c:	461a      	mov	r2, r3
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	fb03 f202 	mul.w	r2, r3, r2
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019968:	4413      	add	r3, r2
}
 801996a:	4618      	mov	r0, r3
 801996c:	370c      	adds	r7, #12
 801996e:	46bd      	mov	sp, r7
 8019970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019974:	4770      	bx	lr

08019976 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019976:	b580      	push	{r7, lr}
 8019978:	b086      	sub	sp, #24
 801997a:	af00      	add	r7, sp, #0
 801997c:	6078      	str	r0, [r7, #4]
 801997e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	2b01      	cmp	r3, #1
 801998a:	d904      	bls.n	8019996 <get_fat+0x20>
 801998c:	693b      	ldr	r3, [r7, #16]
 801998e:	699b      	ldr	r3, [r3, #24]
 8019990:	683a      	ldr	r2, [r7, #0]
 8019992:	429a      	cmp	r2, r3
 8019994:	d302      	bcc.n	801999c <get_fat+0x26>
		val = 1;	/* Internal error */
 8019996:	2301      	movs	r3, #1
 8019998:	617b      	str	r3, [r7, #20]
 801999a:	e08e      	b.n	8019aba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801999c:	f04f 33ff 	mov.w	r3, #4294967295
 80199a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	781b      	ldrb	r3, [r3, #0]
 80199a6:	2b03      	cmp	r3, #3
 80199a8:	d061      	beq.n	8019a6e <get_fat+0xf8>
 80199aa:	2b03      	cmp	r3, #3
 80199ac:	dc7b      	bgt.n	8019aa6 <get_fat+0x130>
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d002      	beq.n	80199b8 <get_fat+0x42>
 80199b2:	2b02      	cmp	r3, #2
 80199b4:	d041      	beq.n	8019a3a <get_fat+0xc4>
 80199b6:	e076      	b.n	8019aa6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	60fb      	str	r3, [r7, #12]
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	085b      	lsrs	r3, r3, #1
 80199c0:	68fa      	ldr	r2, [r7, #12]
 80199c2:	4413      	add	r3, r2
 80199c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	0a5b      	lsrs	r3, r3, #9
 80199ce:	4413      	add	r3, r2
 80199d0:	4619      	mov	r1, r3
 80199d2:	6938      	ldr	r0, [r7, #16]
 80199d4:	f7ff ff14 	bl	8019800 <move_window>
 80199d8:	4603      	mov	r3, r0
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d166      	bne.n	8019aac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	1c5a      	adds	r2, r3, #1
 80199e2:	60fa      	str	r2, [r7, #12]
 80199e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199e8:	693a      	ldr	r2, [r7, #16]
 80199ea:	4413      	add	r3, r2
 80199ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199f2:	693b      	ldr	r3, [r7, #16]
 80199f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	0a5b      	lsrs	r3, r3, #9
 80199fa:	4413      	add	r3, r2
 80199fc:	4619      	mov	r1, r3
 80199fe:	6938      	ldr	r0, [r7, #16]
 8019a00:	f7ff fefe 	bl	8019800 <move_window>
 8019a04:	4603      	mov	r3, r0
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d152      	bne.n	8019ab0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a10:	693a      	ldr	r2, [r7, #16]
 8019a12:	4413      	add	r3, r2
 8019a14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019a18:	021b      	lsls	r3, r3, #8
 8019a1a:	68ba      	ldr	r2, [r7, #8]
 8019a1c:	4313      	orrs	r3, r2
 8019a1e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	f003 0301 	and.w	r3, r3, #1
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d002      	beq.n	8019a30 <get_fat+0xba>
 8019a2a:	68bb      	ldr	r3, [r7, #8]
 8019a2c:	091b      	lsrs	r3, r3, #4
 8019a2e:	e002      	b.n	8019a36 <get_fat+0xc0>
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a36:	617b      	str	r3, [r7, #20]
			break;
 8019a38:	e03f      	b.n	8019aba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	0a1b      	lsrs	r3, r3, #8
 8019a42:	4413      	add	r3, r2
 8019a44:	4619      	mov	r1, r3
 8019a46:	6938      	ldr	r0, [r7, #16]
 8019a48:	f7ff feda 	bl	8019800 <move_window>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d130      	bne.n	8019ab4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	005b      	lsls	r3, r3, #1
 8019a5c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019a60:	4413      	add	r3, r2
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7ff fc1c 	bl	80192a0 <ld_word>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	617b      	str	r3, [r7, #20]
			break;
 8019a6c:	e025      	b.n	8019aba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a6e:	693b      	ldr	r3, [r7, #16]
 8019a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a72:	683b      	ldr	r3, [r7, #0]
 8019a74:	09db      	lsrs	r3, r3, #7
 8019a76:	4413      	add	r3, r2
 8019a78:	4619      	mov	r1, r3
 8019a7a:	6938      	ldr	r0, [r7, #16]
 8019a7c:	f7ff fec0 	bl	8019800 <move_window>
 8019a80:	4603      	mov	r3, r0
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d118      	bne.n	8019ab8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019a86:	693b      	ldr	r3, [r7, #16]
 8019a88:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	009b      	lsls	r3, r3, #2
 8019a90:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019a94:	4413      	add	r3, r2
 8019a96:	4618      	mov	r0, r3
 8019a98:	f7ff fc1a 	bl	80192d0 <ld_dword>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019aa2:	617b      	str	r3, [r7, #20]
			break;
 8019aa4:	e009      	b.n	8019aba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	617b      	str	r3, [r7, #20]
 8019aaa:	e006      	b.n	8019aba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019aac:	bf00      	nop
 8019aae:	e004      	b.n	8019aba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019ab0:	bf00      	nop
 8019ab2:	e002      	b.n	8019aba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019ab4:	bf00      	nop
 8019ab6:	e000      	b.n	8019aba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019ab8:	bf00      	nop
		}
	}

	return val;
 8019aba:	697b      	ldr	r3, [r7, #20]
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3718      	adds	r7, #24
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019ac4:	b590      	push	{r4, r7, lr}
 8019ac6:	b089      	sub	sp, #36	@ 0x24
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019ad0:	2302      	movs	r3, #2
 8019ad2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	f240 80d9 	bls.w	8019c8e <put_fat+0x1ca>
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	699b      	ldr	r3, [r3, #24]
 8019ae0:	68ba      	ldr	r2, [r7, #8]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	f080 80d3 	bcs.w	8019c8e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	2b03      	cmp	r3, #3
 8019aee:	f000 8096 	beq.w	8019c1e <put_fat+0x15a>
 8019af2:	2b03      	cmp	r3, #3
 8019af4:	f300 80cb 	bgt.w	8019c8e <put_fat+0x1ca>
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d002      	beq.n	8019b02 <put_fat+0x3e>
 8019afc:	2b02      	cmp	r3, #2
 8019afe:	d06e      	beq.n	8019bde <put_fat+0x11a>
 8019b00:	e0c5      	b.n	8019c8e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	61bb      	str	r3, [r7, #24]
 8019b06:	69bb      	ldr	r3, [r7, #24]
 8019b08:	085b      	lsrs	r3, r3, #1
 8019b0a:	69ba      	ldr	r2, [r7, #24]
 8019b0c:	4413      	add	r3, r2
 8019b0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	0a5b      	lsrs	r3, r3, #9
 8019b18:	4413      	add	r3, r2
 8019b1a:	4619      	mov	r1, r3
 8019b1c:	68f8      	ldr	r0, [r7, #12]
 8019b1e:	f7ff fe6f 	bl	8019800 <move_window>
 8019b22:	4603      	mov	r3, r0
 8019b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b26:	7ffb      	ldrb	r3, [r7, #31]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	f040 80a9 	bne.w	8019c80 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b34:	69bb      	ldr	r3, [r7, #24]
 8019b36:	1c59      	adds	r1, r3, #1
 8019b38:	61b9      	str	r1, [r7, #24]
 8019b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b3e:	4413      	add	r3, r2
 8019b40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	f003 0301 	and.w	r3, r3, #1
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d00d      	beq.n	8019b68 <put_fat+0xa4>
 8019b4c:	697b      	ldr	r3, [r7, #20]
 8019b4e:	781b      	ldrb	r3, [r3, #0]
 8019b50:	b25b      	sxtb	r3, r3
 8019b52:	f003 030f 	and.w	r3, r3, #15
 8019b56:	b25a      	sxtb	r2, r3
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	011b      	lsls	r3, r3, #4
 8019b5e:	b25b      	sxtb	r3, r3
 8019b60:	4313      	orrs	r3, r2
 8019b62:	b25b      	sxtb	r3, r3
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	e001      	b.n	8019b6c <put_fat+0xa8>
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	697a      	ldr	r2, [r7, #20]
 8019b6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	2201      	movs	r2, #1
 8019b74:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b7a:	69bb      	ldr	r3, [r7, #24]
 8019b7c:	0a5b      	lsrs	r3, r3, #9
 8019b7e:	4413      	add	r3, r2
 8019b80:	4619      	mov	r1, r3
 8019b82:	68f8      	ldr	r0, [r7, #12]
 8019b84:	f7ff fe3c 	bl	8019800 <move_window>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b8c:	7ffb      	ldrb	r3, [r7, #31]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d178      	bne.n	8019c84 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b98:	69bb      	ldr	r3, [r7, #24]
 8019b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b9e:	4413      	add	r3, r2
 8019ba0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	f003 0301 	and.w	r3, r3, #1
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d003      	beq.n	8019bb4 <put_fat+0xf0>
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	091b      	lsrs	r3, r3, #4
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	e00e      	b.n	8019bd2 <put_fat+0x10e>
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	b25b      	sxtb	r3, r3
 8019bba:	f023 030f 	bic.w	r3, r3, #15
 8019bbe:	b25a      	sxtb	r2, r3
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	0a1b      	lsrs	r3, r3, #8
 8019bc4:	b25b      	sxtb	r3, r3
 8019bc6:	f003 030f 	and.w	r3, r3, #15
 8019bca:	b25b      	sxtb	r3, r3
 8019bcc:	4313      	orrs	r3, r2
 8019bce:	b25b      	sxtb	r3, r3
 8019bd0:	b2db      	uxtb	r3, r3
 8019bd2:	697a      	ldr	r2, [r7, #20]
 8019bd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	2201      	movs	r2, #1
 8019bda:	70da      	strb	r2, [r3, #3]
			break;
 8019bdc:	e057      	b.n	8019c8e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	0a1b      	lsrs	r3, r3, #8
 8019be6:	4413      	add	r3, r2
 8019be8:	4619      	mov	r1, r3
 8019bea:	68f8      	ldr	r0, [r7, #12]
 8019bec:	f7ff fe08 	bl	8019800 <move_window>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019bf4:	7ffb      	ldrb	r3, [r7, #31]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d146      	bne.n	8019c88 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	005b      	lsls	r3, r3, #1
 8019c04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019c08:	4413      	add	r3, r2
 8019c0a:	687a      	ldr	r2, [r7, #4]
 8019c0c:	b292      	uxth	r2, r2
 8019c0e:	4611      	mov	r1, r2
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7ff fb80 	bl	8019316 <st_word>
			fs->wflag = 1;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	2201      	movs	r2, #1
 8019c1a:	70da      	strb	r2, [r3, #3]
			break;
 8019c1c:	e037      	b.n	8019c8e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	09db      	lsrs	r3, r3, #7
 8019c26:	4413      	add	r3, r2
 8019c28:	4619      	mov	r1, r3
 8019c2a:	68f8      	ldr	r0, [r7, #12]
 8019c2c:	f7ff fde8 	bl	8019800 <move_window>
 8019c30:	4603      	mov	r3, r0
 8019c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c34:	7ffb      	ldrb	r3, [r7, #31]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d128      	bne.n	8019c8c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	009b      	lsls	r3, r3, #2
 8019c4a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c4e:	4413      	add	r3, r2
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7ff fb3d 	bl	80192d0 <ld_dword>
 8019c56:	4603      	mov	r3, r0
 8019c58:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019c5c:	4323      	orrs	r3, r4
 8019c5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c6e:	4413      	add	r3, r2
 8019c70:	6879      	ldr	r1, [r7, #4]
 8019c72:	4618      	mov	r0, r3
 8019c74:	f7ff fb6a 	bl	801934c <st_dword>
			fs->wflag = 1;
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	2201      	movs	r2, #1
 8019c7c:	70da      	strb	r2, [r3, #3]
			break;
 8019c7e:	e006      	b.n	8019c8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c80:	bf00      	nop
 8019c82:	e004      	b.n	8019c8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c84:	bf00      	nop
 8019c86:	e002      	b.n	8019c8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c88:	bf00      	nop
 8019c8a:	e000      	b.n	8019c8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c8c:	bf00      	nop
		}
	}
	return res;
 8019c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	3724      	adds	r7, #36	@ 0x24
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd90      	pop	{r4, r7, pc}

08019c98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b088      	sub	sp, #32
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	60f8      	str	r0, [r7, #12]
 8019ca0:	60b9      	str	r1, [r7, #8]
 8019ca2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	2b01      	cmp	r3, #1
 8019cb2:	d904      	bls.n	8019cbe <remove_chain+0x26>
 8019cb4:	69bb      	ldr	r3, [r7, #24]
 8019cb6:	699b      	ldr	r3, [r3, #24]
 8019cb8:	68ba      	ldr	r2, [r7, #8]
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	d301      	bcc.n	8019cc2 <remove_chain+0x2a>
 8019cbe:	2302      	movs	r3, #2
 8019cc0:	e04b      	b.n	8019d5a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d00c      	beq.n	8019ce2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8019ccc:	6879      	ldr	r1, [r7, #4]
 8019cce:	69b8      	ldr	r0, [r7, #24]
 8019cd0:	f7ff fef8 	bl	8019ac4 <put_fat>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019cd8:	7ffb      	ldrb	r3, [r7, #31]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d001      	beq.n	8019ce2 <remove_chain+0x4a>
 8019cde:	7ffb      	ldrb	r3, [r7, #31]
 8019ce0:	e03b      	b.n	8019d5a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019ce2:	68b9      	ldr	r1, [r7, #8]
 8019ce4:	68f8      	ldr	r0, [r7, #12]
 8019ce6:	f7ff fe46 	bl	8019976 <get_fat>
 8019cea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019cec:	697b      	ldr	r3, [r7, #20]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d031      	beq.n	8019d56 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	2b01      	cmp	r3, #1
 8019cf6:	d101      	bne.n	8019cfc <remove_chain+0x64>
 8019cf8:	2302      	movs	r3, #2
 8019cfa:	e02e      	b.n	8019d5a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d02:	d101      	bne.n	8019d08 <remove_chain+0x70>
 8019d04:	2301      	movs	r3, #1
 8019d06:	e028      	b.n	8019d5a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019d08:	2200      	movs	r2, #0
 8019d0a:	68b9      	ldr	r1, [r7, #8]
 8019d0c:	69b8      	ldr	r0, [r7, #24]
 8019d0e:	f7ff fed9 	bl	8019ac4 <put_fat>
 8019d12:	4603      	mov	r3, r0
 8019d14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019d16:	7ffb      	ldrb	r3, [r7, #31]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d001      	beq.n	8019d20 <remove_chain+0x88>
 8019d1c:	7ffb      	ldrb	r3, [r7, #31]
 8019d1e:	e01c      	b.n	8019d5a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	695a      	ldr	r2, [r3, #20]
 8019d24:	69bb      	ldr	r3, [r7, #24]
 8019d26:	699b      	ldr	r3, [r3, #24]
 8019d28:	3b02      	subs	r3, #2
 8019d2a:	429a      	cmp	r2, r3
 8019d2c:	d20b      	bcs.n	8019d46 <remove_chain+0xae>
			fs->free_clst++;
 8019d2e:	69bb      	ldr	r3, [r7, #24]
 8019d30:	695b      	ldr	r3, [r3, #20]
 8019d32:	1c5a      	adds	r2, r3, #1
 8019d34:	69bb      	ldr	r3, [r7, #24]
 8019d36:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019d38:	69bb      	ldr	r3, [r7, #24]
 8019d3a:	791b      	ldrb	r3, [r3, #4]
 8019d3c:	f043 0301 	orr.w	r3, r3, #1
 8019d40:	b2da      	uxtb	r2, r3
 8019d42:	69bb      	ldr	r3, [r7, #24]
 8019d44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019d4a:	69bb      	ldr	r3, [r7, #24]
 8019d4c:	699b      	ldr	r3, [r3, #24]
 8019d4e:	68ba      	ldr	r2, [r7, #8]
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d3c6      	bcc.n	8019ce2 <remove_chain+0x4a>
 8019d54:	e000      	b.n	8019d58 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019d56:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019d58:	2300      	movs	r3, #0
}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	3720      	adds	r7, #32
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b088      	sub	sp, #32
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
 8019d6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d10d      	bne.n	8019d94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	691b      	ldr	r3, [r3, #16]
 8019d7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d004      	beq.n	8019d8e <create_chain+0x2c>
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	699b      	ldr	r3, [r3, #24]
 8019d88:	69ba      	ldr	r2, [r7, #24]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d31b      	bcc.n	8019dc6 <create_chain+0x64>
 8019d8e:	2301      	movs	r3, #1
 8019d90:	61bb      	str	r3, [r7, #24]
 8019d92:	e018      	b.n	8019dc6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019d94:	6839      	ldr	r1, [r7, #0]
 8019d96:	6878      	ldr	r0, [r7, #4]
 8019d98:	f7ff fded 	bl	8019976 <get_fat>
 8019d9c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	2b01      	cmp	r3, #1
 8019da2:	d801      	bhi.n	8019da8 <create_chain+0x46>
 8019da4:	2301      	movs	r3, #1
 8019da6:	e070      	b.n	8019e8a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dae:	d101      	bne.n	8019db4 <create_chain+0x52>
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	e06a      	b.n	8019e8a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019db4:	693b      	ldr	r3, [r7, #16]
 8019db6:	699b      	ldr	r3, [r3, #24]
 8019db8:	68fa      	ldr	r2, [r7, #12]
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	d201      	bcs.n	8019dc2 <create_chain+0x60>
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	e063      	b.n	8019e8a <create_chain+0x128>
		scl = clst;
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019dc6:	69bb      	ldr	r3, [r7, #24]
 8019dc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	3301      	adds	r3, #1
 8019dce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	699b      	ldr	r3, [r3, #24]
 8019dd4:	69fa      	ldr	r2, [r7, #28]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	d307      	bcc.n	8019dea <create_chain+0x88>
				ncl = 2;
 8019dda:	2302      	movs	r3, #2
 8019ddc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019dde:	69fa      	ldr	r2, [r7, #28]
 8019de0:	69bb      	ldr	r3, [r7, #24]
 8019de2:	429a      	cmp	r2, r3
 8019de4:	d901      	bls.n	8019dea <create_chain+0x88>
 8019de6:	2300      	movs	r3, #0
 8019de8:	e04f      	b.n	8019e8a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019dea:	69f9      	ldr	r1, [r7, #28]
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7ff fdc2 	bl	8019976 <get_fat>
 8019df2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d00e      	beq.n	8019e18 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	2b01      	cmp	r3, #1
 8019dfe:	d003      	beq.n	8019e08 <create_chain+0xa6>
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e06:	d101      	bne.n	8019e0c <create_chain+0xaa>
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	e03e      	b.n	8019e8a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019e0c:	69fa      	ldr	r2, [r7, #28]
 8019e0e:	69bb      	ldr	r3, [r7, #24]
 8019e10:	429a      	cmp	r2, r3
 8019e12:	d1da      	bne.n	8019dca <create_chain+0x68>
 8019e14:	2300      	movs	r3, #0
 8019e16:	e038      	b.n	8019e8a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019e18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8019e1e:	69f9      	ldr	r1, [r7, #28]
 8019e20:	6938      	ldr	r0, [r7, #16]
 8019e22:	f7ff fe4f 	bl	8019ac4 <put_fat>
 8019e26:	4603      	mov	r3, r0
 8019e28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019e2a:	7dfb      	ldrb	r3, [r7, #23]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d109      	bne.n	8019e44 <create_chain+0xe2>
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d006      	beq.n	8019e44 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019e36:	69fa      	ldr	r2, [r7, #28]
 8019e38:	6839      	ldr	r1, [r7, #0]
 8019e3a:	6938      	ldr	r0, [r7, #16]
 8019e3c:	f7ff fe42 	bl	8019ac4 <put_fat>
 8019e40:	4603      	mov	r3, r0
 8019e42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019e44:	7dfb      	ldrb	r3, [r7, #23]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d116      	bne.n	8019e78 <create_chain+0x116>
		fs->last_clst = ncl;
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	69fa      	ldr	r2, [r7, #28]
 8019e4e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019e50:	693b      	ldr	r3, [r7, #16]
 8019e52:	695a      	ldr	r2, [r3, #20]
 8019e54:	693b      	ldr	r3, [r7, #16]
 8019e56:	699b      	ldr	r3, [r3, #24]
 8019e58:	3b02      	subs	r3, #2
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d804      	bhi.n	8019e68 <create_chain+0x106>
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	695b      	ldr	r3, [r3, #20]
 8019e62:	1e5a      	subs	r2, r3, #1
 8019e64:	693b      	ldr	r3, [r7, #16]
 8019e66:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019e68:	693b      	ldr	r3, [r7, #16]
 8019e6a:	791b      	ldrb	r3, [r3, #4]
 8019e6c:	f043 0301 	orr.w	r3, r3, #1
 8019e70:	b2da      	uxtb	r2, r3
 8019e72:	693b      	ldr	r3, [r7, #16]
 8019e74:	711a      	strb	r2, [r3, #4]
 8019e76:	e007      	b.n	8019e88 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019e78:	7dfb      	ldrb	r3, [r7, #23]
 8019e7a:	2b01      	cmp	r3, #1
 8019e7c:	d102      	bne.n	8019e84 <create_chain+0x122>
 8019e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e82:	e000      	b.n	8019e86 <create_chain+0x124>
 8019e84:	2301      	movs	r3, #1
 8019e86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019e88:	69fb      	ldr	r3, [r7, #28]
}
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3720      	adds	r7, #32
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd80      	pop	{r7, pc}

08019e92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019e92:	b480      	push	{r7}
 8019e94:	b087      	sub	sp, #28
 8019e96:	af00      	add	r7, sp, #0
 8019e98:	6078      	str	r0, [r7, #4]
 8019e9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ea6:	3304      	adds	r3, #4
 8019ea8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	0a5b      	lsrs	r3, r3, #9
 8019eae:	68fa      	ldr	r2, [r7, #12]
 8019eb0:	8952      	ldrh	r2, [r2, #10]
 8019eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8019eb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	1d1a      	adds	r2, r3, #4
 8019ebc:	613a      	str	r2, [r7, #16]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d101      	bne.n	8019ecc <clmt_clust+0x3a>
 8019ec8:	2300      	movs	r3, #0
 8019eca:	e010      	b.n	8019eee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019ecc:	697a      	ldr	r2, [r7, #20]
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d307      	bcc.n	8019ee4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019ed4:	697a      	ldr	r2, [r7, #20]
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	1ad3      	subs	r3, r2, r3
 8019eda:	617b      	str	r3, [r7, #20]
 8019edc:	693b      	ldr	r3, [r7, #16]
 8019ede:	3304      	adds	r3, #4
 8019ee0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019ee2:	e7e9      	b.n	8019eb8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019ee4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019ee6:	693b      	ldr	r3, [r7, #16]
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	697b      	ldr	r3, [r7, #20]
 8019eec:	4413      	add	r3, r2
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	371c      	adds	r7, #28
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef8:	4770      	bx	lr

08019efa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019efa:	b580      	push	{r7, lr}
 8019efc:	b086      	sub	sp, #24
 8019efe:	af00      	add	r7, sp, #0
 8019f00:	6078      	str	r0, [r7, #4]
 8019f02:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019f10:	d204      	bcs.n	8019f1c <dir_sdi+0x22>
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	f003 031f 	and.w	r3, r3, #31
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d001      	beq.n	8019f20 <dir_sdi+0x26>
		return FR_INT_ERR;
 8019f1c:	2302      	movs	r3, #2
 8019f1e:	e063      	b.n	8019fe8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	683a      	ldr	r2, [r7, #0]
 8019f24:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d106      	bne.n	8019f40 <dir_sdi+0x46>
 8019f32:	693b      	ldr	r3, [r7, #16]
 8019f34:	781b      	ldrb	r3, [r3, #0]
 8019f36:	2b02      	cmp	r3, #2
 8019f38:	d902      	bls.n	8019f40 <dir_sdi+0x46>
		clst = fs->dirbase;
 8019f3a:	693b      	ldr	r3, [r7, #16]
 8019f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d10c      	bne.n	8019f60 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	095b      	lsrs	r3, r3, #5
 8019f4a:	693a      	ldr	r2, [r7, #16]
 8019f4c:	8912      	ldrh	r2, [r2, #8]
 8019f4e:	4293      	cmp	r3, r2
 8019f50:	d301      	bcc.n	8019f56 <dir_sdi+0x5c>
 8019f52:	2302      	movs	r3, #2
 8019f54:	e048      	b.n	8019fe8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019f56:	693b      	ldr	r3, [r7, #16]
 8019f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	61da      	str	r2, [r3, #28]
 8019f5e:	e029      	b.n	8019fb4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	895b      	ldrh	r3, [r3, #10]
 8019f64:	025b      	lsls	r3, r3, #9
 8019f66:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f68:	e019      	b.n	8019f9e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6979      	ldr	r1, [r7, #20]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7ff fd01 	bl	8019976 <get_fat>
 8019f74:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f7c:	d101      	bne.n	8019f82 <dir_sdi+0x88>
 8019f7e:	2301      	movs	r3, #1
 8019f80:	e032      	b.n	8019fe8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	2b01      	cmp	r3, #1
 8019f86:	d904      	bls.n	8019f92 <dir_sdi+0x98>
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	699b      	ldr	r3, [r3, #24]
 8019f8c:	697a      	ldr	r2, [r7, #20]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d301      	bcc.n	8019f96 <dir_sdi+0x9c>
 8019f92:	2302      	movs	r3, #2
 8019f94:	e028      	b.n	8019fe8 <dir_sdi+0xee>
			ofs -= csz;
 8019f96:	683a      	ldr	r2, [r7, #0]
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	1ad3      	subs	r3, r2, r3
 8019f9c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f9e:	683a      	ldr	r2, [r7, #0]
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d2e1      	bcs.n	8019f6a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019fa6:	6979      	ldr	r1, [r7, #20]
 8019fa8:	6938      	ldr	r0, [r7, #16]
 8019faa:	f7ff fcc5 	bl	8019938 <clust2sect>
 8019fae:	4602      	mov	r2, r0
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	697a      	ldr	r2, [r7, #20]
 8019fb8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	69db      	ldr	r3, [r3, #28]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d101      	bne.n	8019fc6 <dir_sdi+0xcc>
 8019fc2:	2302      	movs	r3, #2
 8019fc4:	e010      	b.n	8019fe8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	69da      	ldr	r2, [r3, #28]
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	0a5b      	lsrs	r3, r3, #9
 8019fce:	441a      	add	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fe0:	441a      	add	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019fe6:	2300      	movs	r3, #0
}
 8019fe8:	4618      	mov	r0, r3
 8019fea:	3718      	adds	r7, #24
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}

08019ff0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b086      	sub	sp, #24
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	695b      	ldr	r3, [r3, #20]
 801a004:	3320      	adds	r3, #32
 801a006:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	69db      	ldr	r3, [r3, #28]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d003      	beq.n	801a018 <dir_next+0x28>
 801a010:	68bb      	ldr	r3, [r7, #8]
 801a012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801a016:	d301      	bcc.n	801a01c <dir_next+0x2c>
 801a018:	2304      	movs	r3, #4
 801a01a:	e0aa      	b.n	801a172 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a022:	2b00      	cmp	r3, #0
 801a024:	f040 8098 	bne.w	801a158 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	69db      	ldr	r3, [r3, #28]
 801a02c:	1c5a      	adds	r2, r3, #1
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	699b      	ldr	r3, [r3, #24]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d10b      	bne.n	801a052 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	095b      	lsrs	r3, r3, #5
 801a03e:	68fa      	ldr	r2, [r7, #12]
 801a040:	8912      	ldrh	r2, [r2, #8]
 801a042:	4293      	cmp	r3, r2
 801a044:	f0c0 8088 	bcc.w	801a158 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	2200      	movs	r2, #0
 801a04c:	61da      	str	r2, [r3, #28]
 801a04e:	2304      	movs	r3, #4
 801a050:	e08f      	b.n	801a172 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	0a5b      	lsrs	r3, r3, #9
 801a056:	68fa      	ldr	r2, [r7, #12]
 801a058:	8952      	ldrh	r2, [r2, #10]
 801a05a:	3a01      	subs	r2, #1
 801a05c:	4013      	ands	r3, r2
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d17a      	bne.n	801a158 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a062:	687a      	ldr	r2, [r7, #4]
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	699b      	ldr	r3, [r3, #24]
 801a068:	4619      	mov	r1, r3
 801a06a:	4610      	mov	r0, r2
 801a06c:	f7ff fc83 	bl	8019976 <get_fat>
 801a070:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	2b01      	cmp	r3, #1
 801a076:	d801      	bhi.n	801a07c <dir_next+0x8c>
 801a078:	2302      	movs	r3, #2
 801a07a:	e07a      	b.n	801a172 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a07c:	697b      	ldr	r3, [r7, #20]
 801a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a082:	d101      	bne.n	801a088 <dir_next+0x98>
 801a084:	2301      	movs	r3, #1
 801a086:	e074      	b.n	801a172 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	699b      	ldr	r3, [r3, #24]
 801a08c:	697a      	ldr	r2, [r7, #20]
 801a08e:	429a      	cmp	r2, r3
 801a090:	d358      	bcc.n	801a144 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a092:	683b      	ldr	r3, [r7, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d104      	bne.n	801a0a2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2200      	movs	r2, #0
 801a09c:	61da      	str	r2, [r3, #28]
 801a09e:	2304      	movs	r3, #4
 801a0a0:	e067      	b.n	801a172 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a0a2:	687a      	ldr	r2, [r7, #4]
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	699b      	ldr	r3, [r3, #24]
 801a0a8:	4619      	mov	r1, r3
 801a0aa:	4610      	mov	r0, r2
 801a0ac:	f7ff fe59 	bl	8019d62 <create_chain>
 801a0b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d101      	bne.n	801a0bc <dir_next+0xcc>
 801a0b8:	2307      	movs	r3, #7
 801a0ba:	e05a      	b.n	801a172 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a0bc:	697b      	ldr	r3, [r7, #20]
 801a0be:	2b01      	cmp	r3, #1
 801a0c0:	d101      	bne.n	801a0c6 <dir_next+0xd6>
 801a0c2:	2302      	movs	r3, #2
 801a0c4:	e055      	b.n	801a172 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a0c6:	697b      	ldr	r3, [r7, #20]
 801a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0cc:	d101      	bne.n	801a0d2 <dir_next+0xe2>
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	e04f      	b.n	801a172 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a0d2:	68f8      	ldr	r0, [r7, #12]
 801a0d4:	f7ff fb50 	bl	8019778 <sync_window>
 801a0d8:	4603      	mov	r3, r0
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d001      	beq.n	801a0e2 <dir_next+0xf2>
 801a0de:	2301      	movs	r3, #1
 801a0e0:	e047      	b.n	801a172 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	3334      	adds	r3, #52	@ 0x34
 801a0e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0ea:	2100      	movs	r1, #0
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7ff f97a 	bl	80193e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	613b      	str	r3, [r7, #16]
 801a0f6:	6979      	ldr	r1, [r7, #20]
 801a0f8:	68f8      	ldr	r0, [r7, #12]
 801a0fa:	f7ff fc1d 	bl	8019938 <clust2sect>
 801a0fe:	4602      	mov	r2, r0
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	631a      	str	r2, [r3, #48]	@ 0x30
 801a104:	e012      	b.n	801a12c <dir_next+0x13c>
						fs->wflag = 1;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	2201      	movs	r2, #1
 801a10a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a10c:	68f8      	ldr	r0, [r7, #12]
 801a10e:	f7ff fb33 	bl	8019778 <sync_window>
 801a112:	4603      	mov	r3, r0
 801a114:	2b00      	cmp	r3, #0
 801a116:	d001      	beq.n	801a11c <dir_next+0x12c>
 801a118:	2301      	movs	r3, #1
 801a11a:	e02a      	b.n	801a172 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	3301      	adds	r3, #1
 801a120:	613b      	str	r3, [r7, #16]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a126:	1c5a      	adds	r2, r3, #1
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	631a      	str	r2, [r3, #48]	@ 0x30
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	895b      	ldrh	r3, [r3, #10]
 801a130:	461a      	mov	r2, r3
 801a132:	693b      	ldr	r3, [r7, #16]
 801a134:	4293      	cmp	r3, r2
 801a136:	d3e6      	bcc.n	801a106 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a13c:	693b      	ldr	r3, [r7, #16]
 801a13e:	1ad2      	subs	r2, r2, r3
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	697a      	ldr	r2, [r7, #20]
 801a148:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a14a:	6979      	ldr	r1, [r7, #20]
 801a14c:	68f8      	ldr	r0, [r7, #12]
 801a14e:	f7ff fbf3 	bl	8019938 <clust2sect>
 801a152:	4602      	mov	r2, r0
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	68ba      	ldr	r2, [r7, #8]
 801a15c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a16a:	441a      	add	r2, r3
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a170:	2300      	movs	r3, #0
}
 801a172:	4618      	mov	r0, r3
 801a174:	3718      	adds	r7, #24
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}

0801a17a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a17a:	b580      	push	{r7, lr}
 801a17c:	b086      	sub	sp, #24
 801a17e:	af00      	add	r7, sp, #0
 801a180:	6078      	str	r0, [r7, #4]
 801a182:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a18a:	2100      	movs	r1, #0
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	f7ff feb4 	bl	8019efa <dir_sdi>
 801a192:	4603      	mov	r3, r0
 801a194:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a196:	7dfb      	ldrb	r3, [r7, #23]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d12b      	bne.n	801a1f4 <dir_alloc+0x7a>
		n = 0;
 801a19c:	2300      	movs	r3, #0
 801a19e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	69db      	ldr	r3, [r3, #28]
 801a1a4:	4619      	mov	r1, r3
 801a1a6:	68f8      	ldr	r0, [r7, #12]
 801a1a8:	f7ff fb2a 	bl	8019800 <move_window>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a1b0:	7dfb      	ldrb	r3, [r7, #23]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d11d      	bne.n	801a1f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	6a1b      	ldr	r3, [r3, #32]
 801a1ba:	781b      	ldrb	r3, [r3, #0]
 801a1bc:	2be5      	cmp	r3, #229	@ 0xe5
 801a1be:	d004      	beq.n	801a1ca <dir_alloc+0x50>
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6a1b      	ldr	r3, [r3, #32]
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d107      	bne.n	801a1da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a1ca:	693b      	ldr	r3, [r7, #16]
 801a1cc:	3301      	adds	r3, #1
 801a1ce:	613b      	str	r3, [r7, #16]
 801a1d0:	693a      	ldr	r2, [r7, #16]
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d102      	bne.n	801a1de <dir_alloc+0x64>
 801a1d8:	e00c      	b.n	801a1f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a1da:	2300      	movs	r3, #0
 801a1dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a1de:	2101      	movs	r1, #1
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f7ff ff05 	bl	8019ff0 <dir_next>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a1ea:	7dfb      	ldrb	r3, [r7, #23]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d0d7      	beq.n	801a1a0 <dir_alloc+0x26>
 801a1f0:	e000      	b.n	801a1f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a1f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a1f4:	7dfb      	ldrb	r3, [r7, #23]
 801a1f6:	2b04      	cmp	r3, #4
 801a1f8:	d101      	bne.n	801a1fe <dir_alloc+0x84>
 801a1fa:	2307      	movs	r3, #7
 801a1fc:	75fb      	strb	r3, [r7, #23]
	return res;
 801a1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801a200:	4618      	mov	r0, r3
 801a202:	3718      	adds	r7, #24
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}

0801a208 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b084      	sub	sp, #16
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
 801a210:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	331a      	adds	r3, #26
 801a216:	4618      	mov	r0, r3
 801a218:	f7ff f842 	bl	80192a0 <ld_word>
 801a21c:	4603      	mov	r3, r0
 801a21e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	781b      	ldrb	r3, [r3, #0]
 801a224:	2b03      	cmp	r3, #3
 801a226:	d109      	bne.n	801a23c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	3314      	adds	r3, #20
 801a22c:	4618      	mov	r0, r3
 801a22e:	f7ff f837 	bl	80192a0 <ld_word>
 801a232:	4603      	mov	r3, r0
 801a234:	041b      	lsls	r3, r3, #16
 801a236:	68fa      	ldr	r2, [r7, #12]
 801a238:	4313      	orrs	r3, r2
 801a23a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a23c:	68fb      	ldr	r3, [r7, #12]
}
 801a23e:	4618      	mov	r0, r3
 801a240:	3710      	adds	r7, #16
 801a242:	46bd      	mov	sp, r7
 801a244:	bd80      	pop	{r7, pc}

0801a246 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a246:	b580      	push	{r7, lr}
 801a248:	b084      	sub	sp, #16
 801a24a:	af00      	add	r7, sp, #0
 801a24c:	60f8      	str	r0, [r7, #12]
 801a24e:	60b9      	str	r1, [r7, #8]
 801a250:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	331a      	adds	r3, #26
 801a256:	687a      	ldr	r2, [r7, #4]
 801a258:	b292      	uxth	r2, r2
 801a25a:	4611      	mov	r1, r2
 801a25c:	4618      	mov	r0, r3
 801a25e:	f7ff f85a 	bl	8019316 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	781b      	ldrb	r3, [r3, #0]
 801a266:	2b03      	cmp	r3, #3
 801a268:	d109      	bne.n	801a27e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	f103 0214 	add.w	r2, r3, #20
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	0c1b      	lsrs	r3, r3, #16
 801a274:	b29b      	uxth	r3, r3
 801a276:	4619      	mov	r1, r3
 801a278:	4610      	mov	r0, r2
 801a27a:	f7ff f84c 	bl	8019316 <st_word>
	}
}
 801a27e:	bf00      	nop
 801a280:	3710      	adds	r7, #16
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}
	...

0801a288 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a288:	b590      	push	{r4, r7, lr}
 801a28a:	b087      	sub	sp, #28
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
 801a290:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	331a      	adds	r3, #26
 801a296:	4618      	mov	r0, r3
 801a298:	f7ff f802 	bl	80192a0 <ld_word>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d001      	beq.n	801a2a6 <cmp_lfn+0x1e>
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	e059      	b.n	801a35a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a2a6:	683b      	ldr	r3, [r7, #0]
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a2ae:	1e5a      	subs	r2, r3, #1
 801a2b0:	4613      	mov	r3, r2
 801a2b2:	005b      	lsls	r3, r3, #1
 801a2b4:	4413      	add	r3, r2
 801a2b6:	009b      	lsls	r3, r3, #2
 801a2b8:	4413      	add	r3, r2
 801a2ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a2bc:	2301      	movs	r3, #1
 801a2be:	81fb      	strh	r3, [r7, #14]
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	613b      	str	r3, [r7, #16]
 801a2c4:	e033      	b.n	801a32e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a2c6:	4a27      	ldr	r2, [pc, #156]	@ (801a364 <cmp_lfn+0xdc>)
 801a2c8:	693b      	ldr	r3, [r7, #16]
 801a2ca:	4413      	add	r3, r2
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	461a      	mov	r2, r3
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	4413      	add	r3, r2
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7fe ffe3 	bl	80192a0 <ld_word>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a2de:	89fb      	ldrh	r3, [r7, #14]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d01a      	beq.n	801a31a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a2e4:	697b      	ldr	r3, [r7, #20]
 801a2e6:	2bfe      	cmp	r3, #254	@ 0xfe
 801a2e8:	d812      	bhi.n	801a310 <cmp_lfn+0x88>
 801a2ea:	89bb      	ldrh	r3, [r7, #12]
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f001 fe21 	bl	801bf34 <ff_wtoupper>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	461c      	mov	r4, r3
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	1c5a      	adds	r2, r3, #1
 801a2fa:	617a      	str	r2, [r7, #20]
 801a2fc:	005b      	lsls	r3, r3, #1
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	4413      	add	r3, r2
 801a302:	881b      	ldrh	r3, [r3, #0]
 801a304:	4618      	mov	r0, r3
 801a306:	f001 fe15 	bl	801bf34 <ff_wtoupper>
 801a30a:	4603      	mov	r3, r0
 801a30c:	429c      	cmp	r4, r3
 801a30e:	d001      	beq.n	801a314 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a310:	2300      	movs	r3, #0
 801a312:	e022      	b.n	801a35a <cmp_lfn+0xd2>
			}
			wc = uc;
 801a314:	89bb      	ldrh	r3, [r7, #12]
 801a316:	81fb      	strh	r3, [r7, #14]
 801a318:	e006      	b.n	801a328 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a31a:	89bb      	ldrh	r3, [r7, #12]
 801a31c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a320:	4293      	cmp	r3, r2
 801a322:	d001      	beq.n	801a328 <cmp_lfn+0xa0>
 801a324:	2300      	movs	r3, #0
 801a326:	e018      	b.n	801a35a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a328:	693b      	ldr	r3, [r7, #16]
 801a32a:	3301      	adds	r3, #1
 801a32c:	613b      	str	r3, [r7, #16]
 801a32e:	693b      	ldr	r3, [r7, #16]
 801a330:	2b0c      	cmp	r3, #12
 801a332:	d9c8      	bls.n	801a2c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a334:	683b      	ldr	r3, [r7, #0]
 801a336:	781b      	ldrb	r3, [r3, #0]
 801a338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d00b      	beq.n	801a358 <cmp_lfn+0xd0>
 801a340:	89fb      	ldrh	r3, [r7, #14]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d008      	beq.n	801a358 <cmp_lfn+0xd0>
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	005b      	lsls	r3, r3, #1
 801a34a:	687a      	ldr	r2, [r7, #4]
 801a34c:	4413      	add	r3, r2
 801a34e:	881b      	ldrh	r3, [r3, #0]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d001      	beq.n	801a358 <cmp_lfn+0xd0>
 801a354:	2300      	movs	r3, #0
 801a356:	e000      	b.n	801a35a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a358:	2301      	movs	r3, #1
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	371c      	adds	r7, #28
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd90      	pop	{r4, r7, pc}
 801a362:	bf00      	nop
 801a364:	080251b4 	.word	0x080251b4

0801a368 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b088      	sub	sp, #32
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	60f8      	str	r0, [r7, #12]
 801a370:	60b9      	str	r1, [r7, #8]
 801a372:	4611      	mov	r1, r2
 801a374:	461a      	mov	r2, r3
 801a376:	460b      	mov	r3, r1
 801a378:	71fb      	strb	r3, [r7, #7]
 801a37a:	4613      	mov	r3, r2
 801a37c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a37e:	68bb      	ldr	r3, [r7, #8]
 801a380:	330d      	adds	r3, #13
 801a382:	79ba      	ldrb	r2, [r7, #6]
 801a384:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a386:	68bb      	ldr	r3, [r7, #8]
 801a388:	330b      	adds	r3, #11
 801a38a:	220f      	movs	r2, #15
 801a38c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	330c      	adds	r3, #12
 801a392:	2200      	movs	r2, #0
 801a394:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	331a      	adds	r3, #26
 801a39a:	2100      	movs	r1, #0
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7fe ffba 	bl	8019316 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a3a2:	79fb      	ldrb	r3, [r7, #7]
 801a3a4:	1e5a      	subs	r2, r3, #1
 801a3a6:	4613      	mov	r3, r2
 801a3a8:	005b      	lsls	r3, r3, #1
 801a3aa:	4413      	add	r3, r2
 801a3ac:	009b      	lsls	r3, r3, #2
 801a3ae:	4413      	add	r3, r2
 801a3b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	82fb      	strh	r3, [r7, #22]
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a3ba:	8afb      	ldrh	r3, [r7, #22]
 801a3bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	d007      	beq.n	801a3d4 <put_lfn+0x6c>
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	1c5a      	adds	r2, r3, #1
 801a3c8:	61fa      	str	r2, [r7, #28]
 801a3ca:	005b      	lsls	r3, r3, #1
 801a3cc:	68fa      	ldr	r2, [r7, #12]
 801a3ce:	4413      	add	r3, r2
 801a3d0:	881b      	ldrh	r3, [r3, #0]
 801a3d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a3d4:	4a17      	ldr	r2, [pc, #92]	@ (801a434 <put_lfn+0xcc>)
 801a3d6:	69bb      	ldr	r3, [r7, #24]
 801a3d8:	4413      	add	r3, r2
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	461a      	mov	r2, r3
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	4413      	add	r3, r2
 801a3e2:	8afa      	ldrh	r2, [r7, #22]
 801a3e4:	4611      	mov	r1, r2
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7fe ff95 	bl	8019316 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a3ec:	8afb      	ldrh	r3, [r7, #22]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d102      	bne.n	801a3f8 <put_lfn+0x90>
 801a3f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	61bb      	str	r3, [r7, #24]
 801a3fe:	69bb      	ldr	r3, [r7, #24]
 801a400:	2b0c      	cmp	r3, #12
 801a402:	d9da      	bls.n	801a3ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a404:	8afb      	ldrh	r3, [r7, #22]
 801a406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d006      	beq.n	801a41c <put_lfn+0xb4>
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	005b      	lsls	r3, r3, #1
 801a412:	68fa      	ldr	r2, [r7, #12]
 801a414:	4413      	add	r3, r2
 801a416:	881b      	ldrh	r3, [r3, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d103      	bne.n	801a424 <put_lfn+0xbc>
 801a41c:	79fb      	ldrb	r3, [r7, #7]
 801a41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a422:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	79fa      	ldrb	r2, [r7, #7]
 801a428:	701a      	strb	r2, [r3, #0]
}
 801a42a:	bf00      	nop
 801a42c:	3720      	adds	r7, #32
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}
 801a432:	bf00      	nop
 801a434:	080251b4 	.word	0x080251b4

0801a438 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b08c      	sub	sp, #48	@ 0x30
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	60f8      	str	r0, [r7, #12]
 801a440:	60b9      	str	r1, [r7, #8]
 801a442:	607a      	str	r2, [r7, #4]
 801a444:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a446:	220b      	movs	r2, #11
 801a448:	68b9      	ldr	r1, [r7, #8]
 801a44a:	68f8      	ldr	r0, [r7, #12]
 801a44c:	f7fe ffaa 	bl	80193a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	2b05      	cmp	r3, #5
 801a454:	d92b      	bls.n	801a4ae <gen_numname+0x76>
		sr = seq;
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a45a:	e022      	b.n	801a4a2 <gen_numname+0x6a>
			wc = *lfn++;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	1c9a      	adds	r2, r3, #2
 801a460:	607a      	str	r2, [r7, #4]
 801a462:	881b      	ldrh	r3, [r3, #0]
 801a464:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a466:	2300      	movs	r3, #0
 801a468:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a46a:	e017      	b.n	801a49c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a46c:	69fb      	ldr	r3, [r7, #28]
 801a46e:	005a      	lsls	r2, r3, #1
 801a470:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a472:	f003 0301 	and.w	r3, r3, #1
 801a476:	4413      	add	r3, r2
 801a478:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a47a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a47c:	085b      	lsrs	r3, r3, #1
 801a47e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a480:	69fb      	ldr	r3, [r7, #28]
 801a482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a486:	2b00      	cmp	r3, #0
 801a488:	d005      	beq.n	801a496 <gen_numname+0x5e>
 801a48a:	69fb      	ldr	r3, [r7, #28]
 801a48c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a490:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a494:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a498:	3301      	adds	r3, #1
 801a49a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a49e:	2b0f      	cmp	r3, #15
 801a4a0:	d9e4      	bls.n	801a46c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	881b      	ldrh	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d1d8      	bne.n	801a45c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a4aa:	69fb      	ldr	r3, [r7, #28]
 801a4ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a4ae:	2307      	movs	r3, #7
 801a4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	f003 030f 	and.w	r3, r3, #15
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	3330      	adds	r3, #48	@ 0x30
 801a4be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a4c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4c6:	2b39      	cmp	r3, #57	@ 0x39
 801a4c8:	d904      	bls.n	801a4d4 <gen_numname+0x9c>
 801a4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4ce:	3307      	adds	r3, #7
 801a4d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4d6:	1e5a      	subs	r2, r3, #1
 801a4d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4da:	3330      	adds	r3, #48	@ 0x30
 801a4dc:	443b      	add	r3, r7
 801a4de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a4e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a4e6:	683b      	ldr	r3, [r7, #0]
 801a4e8:	091b      	lsrs	r3, r3, #4
 801a4ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d1df      	bne.n	801a4b2 <gen_numname+0x7a>
	ns[i] = '~';
 801a4f2:	f107 0214 	add.w	r2, r7, #20
 801a4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4f8:	4413      	add	r3, r2
 801a4fa:	227e      	movs	r2, #126	@ 0x7e
 801a4fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a4fe:	2300      	movs	r3, #0
 801a500:	627b      	str	r3, [r7, #36]	@ 0x24
 801a502:	e002      	b.n	801a50a <gen_numname+0xd2>
 801a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a506:	3301      	adds	r3, #1
 801a508:	627b      	str	r3, [r7, #36]	@ 0x24
 801a50a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a50e:	429a      	cmp	r2, r3
 801a510:	d205      	bcs.n	801a51e <gen_numname+0xe6>
 801a512:	68fa      	ldr	r2, [r7, #12]
 801a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a516:	4413      	add	r3, r2
 801a518:	781b      	ldrb	r3, [r3, #0]
 801a51a:	2b20      	cmp	r3, #32
 801a51c:	d1f2      	bne.n	801a504 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a520:	2b07      	cmp	r3, #7
 801a522:	d807      	bhi.n	801a534 <gen_numname+0xfc>
 801a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a526:	1c5a      	adds	r2, r3, #1
 801a528:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a52a:	3330      	adds	r3, #48	@ 0x30
 801a52c:	443b      	add	r3, r7
 801a52e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a532:	e000      	b.n	801a536 <gen_numname+0xfe>
 801a534:	2120      	movs	r1, #32
 801a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a538:	1c5a      	adds	r2, r3, #1
 801a53a:	627a      	str	r2, [r7, #36]	@ 0x24
 801a53c:	68fa      	ldr	r2, [r7, #12]
 801a53e:	4413      	add	r3, r2
 801a540:	460a      	mov	r2, r1
 801a542:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a546:	2b07      	cmp	r3, #7
 801a548:	d9e9      	bls.n	801a51e <gen_numname+0xe6>
}
 801a54a:	bf00      	nop
 801a54c:	bf00      	nop
 801a54e:	3730      	adds	r7, #48	@ 0x30
 801a550:	46bd      	mov	sp, r7
 801a552:	bd80      	pop	{r7, pc}

0801a554 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a554:	b480      	push	{r7}
 801a556:	b085      	sub	sp, #20
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a55c:	2300      	movs	r3, #0
 801a55e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a560:	230b      	movs	r3, #11
 801a562:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a564:	7bfb      	ldrb	r3, [r7, #15]
 801a566:	b2da      	uxtb	r2, r3
 801a568:	0852      	lsrs	r2, r2, #1
 801a56a:	01db      	lsls	r3, r3, #7
 801a56c:	4313      	orrs	r3, r2
 801a56e:	b2da      	uxtb	r2, r3
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	1c59      	adds	r1, r3, #1
 801a574:	6079      	str	r1, [r7, #4]
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	4413      	add	r3, r2
 801a57a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	3b01      	subs	r3, #1
 801a580:	60bb      	str	r3, [r7, #8]
 801a582:	68bb      	ldr	r3, [r7, #8]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d1ed      	bne.n	801a564 <sum_sfn+0x10>
	return sum;
 801a588:	7bfb      	ldrb	r3, [r7, #15]
}
 801a58a:	4618      	mov	r0, r3
 801a58c:	3714      	adds	r7, #20
 801a58e:	46bd      	mov	sp, r7
 801a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a594:	4770      	bx	lr

0801a596 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a596:	b580      	push	{r7, lr}
 801a598:	b086      	sub	sp, #24
 801a59a:	af00      	add	r7, sp, #0
 801a59c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a5a4:	2100      	movs	r1, #0
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f7ff fca7 	bl	8019efa <dir_sdi>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a5b0:	7dfb      	ldrb	r3, [r7, #23]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d001      	beq.n	801a5ba <dir_find+0x24>
 801a5b6:	7dfb      	ldrb	r3, [r7, #23]
 801a5b8:	e0a9      	b.n	801a70e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a5ba:	23ff      	movs	r3, #255	@ 0xff
 801a5bc:	753b      	strb	r3, [r7, #20]
 801a5be:	7d3b      	ldrb	r3, [r7, #20]
 801a5c0:	757b      	strb	r3, [r7, #21]
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 801a5c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	69db      	ldr	r3, [r3, #28]
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	6938      	ldr	r0, [r7, #16]
 801a5d2:	f7ff f915 	bl	8019800 <move_window>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a5da:	7dfb      	ldrb	r3, [r7, #23]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f040 8090 	bne.w	801a702 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	6a1b      	ldr	r3, [r3, #32]
 801a5e6:	781b      	ldrb	r3, [r3, #0]
 801a5e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a5ea:	7dbb      	ldrb	r3, [r7, #22]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d102      	bne.n	801a5f6 <dir_find+0x60>
 801a5f0:	2304      	movs	r3, #4
 801a5f2:	75fb      	strb	r3, [r7, #23]
 801a5f4:	e08a      	b.n	801a70c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6a1b      	ldr	r3, [r3, #32]
 801a5fa:	330b      	adds	r3, #11
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a602:	73fb      	strb	r3, [r7, #15]
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	7bfa      	ldrb	r2, [r7, #15]
 801a608:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a60a:	7dbb      	ldrb	r3, [r7, #22]
 801a60c:	2be5      	cmp	r3, #229	@ 0xe5
 801a60e:	d007      	beq.n	801a620 <dir_find+0x8a>
 801a610:	7bfb      	ldrb	r3, [r7, #15]
 801a612:	f003 0308 	and.w	r3, r3, #8
 801a616:	2b00      	cmp	r3, #0
 801a618:	d009      	beq.n	801a62e <dir_find+0x98>
 801a61a:	7bfb      	ldrb	r3, [r7, #15]
 801a61c:	2b0f      	cmp	r3, #15
 801a61e:	d006      	beq.n	801a62e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a620:	23ff      	movs	r3, #255	@ 0xff
 801a622:	757b      	strb	r3, [r7, #21]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	f04f 32ff 	mov.w	r2, #4294967295
 801a62a:	631a      	str	r2, [r3, #48]	@ 0x30
 801a62c:	e05e      	b.n	801a6ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a62e:	7bfb      	ldrb	r3, [r7, #15]
 801a630:	2b0f      	cmp	r3, #15
 801a632:	d136      	bne.n	801a6a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a63a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d154      	bne.n	801a6ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a642:	7dbb      	ldrb	r3, [r7, #22]
 801a644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d00d      	beq.n	801a668 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6a1b      	ldr	r3, [r3, #32]
 801a650:	7b5b      	ldrb	r3, [r3, #13]
 801a652:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a654:	7dbb      	ldrb	r3, [r7, #22]
 801a656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a65a:	75bb      	strb	r3, [r7, #22]
 801a65c:	7dbb      	ldrb	r3, [r7, #22]
 801a65e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	695a      	ldr	r2, [r3, #20]
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a668:	7dba      	ldrb	r2, [r7, #22]
 801a66a:	7d7b      	ldrb	r3, [r7, #21]
 801a66c:	429a      	cmp	r2, r3
 801a66e:	d115      	bne.n	801a69c <dir_find+0x106>
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6a1b      	ldr	r3, [r3, #32]
 801a674:	330d      	adds	r3, #13
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	7d3a      	ldrb	r2, [r7, #20]
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d10e      	bne.n	801a69c <dir_find+0x106>
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	68da      	ldr	r2, [r3, #12]
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	6a1b      	ldr	r3, [r3, #32]
 801a686:	4619      	mov	r1, r3
 801a688:	4610      	mov	r0, r2
 801a68a:	f7ff fdfd 	bl	801a288 <cmp_lfn>
 801a68e:	4603      	mov	r3, r0
 801a690:	2b00      	cmp	r3, #0
 801a692:	d003      	beq.n	801a69c <dir_find+0x106>
 801a694:	7d7b      	ldrb	r3, [r7, #21]
 801a696:	3b01      	subs	r3, #1
 801a698:	b2db      	uxtb	r3, r3
 801a69a:	e000      	b.n	801a69e <dir_find+0x108>
 801a69c:	23ff      	movs	r3, #255	@ 0xff
 801a69e:	757b      	strb	r3, [r7, #21]
 801a6a0:	e024      	b.n	801a6ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a6a2:	7d7b      	ldrb	r3, [r7, #21]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d109      	bne.n	801a6bc <dir_find+0x126>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	6a1b      	ldr	r3, [r3, #32]
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f7ff ff51 	bl	801a554 <sum_sfn>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	7d3b      	ldrb	r3, [r7, #20]
 801a6b8:	4293      	cmp	r3, r2
 801a6ba:	d024      	beq.n	801a706 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a6c2:	f003 0301 	and.w	r3, r3, #1
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d10a      	bne.n	801a6e0 <dir_find+0x14a>
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6a18      	ldr	r0, [r3, #32]
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	3324      	adds	r3, #36	@ 0x24
 801a6d2:	220b      	movs	r2, #11
 801a6d4:	4619      	mov	r1, r3
 801a6d6:	f7fe fea1 	bl	801941c <mem_cmp>
 801a6da:	4603      	mov	r3, r0
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d014      	beq.n	801a70a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a6e0:	23ff      	movs	r3, #255	@ 0xff
 801a6e2:	757b      	strb	r3, [r7, #21]
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a6ec:	2100      	movs	r1, #0
 801a6ee:	6878      	ldr	r0, [r7, #4]
 801a6f0:	f7ff fc7e 	bl	8019ff0 <dir_next>
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a6f8:	7dfb      	ldrb	r3, [r7, #23]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f43f af65 	beq.w	801a5ca <dir_find+0x34>
 801a700:	e004      	b.n	801a70c <dir_find+0x176>
		if (res != FR_OK) break;
 801a702:	bf00      	nop
 801a704:	e002      	b.n	801a70c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a706:	bf00      	nop
 801a708:	e000      	b.n	801a70c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a70a:	bf00      	nop

	return res;
 801a70c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a70e:	4618      	mov	r0, r3
 801a710:	3718      	adds	r7, #24
 801a712:	46bd      	mov	sp, r7
 801a714:	bd80      	pop	{r7, pc}
	...

0801a718 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b08c      	sub	sp, #48	@ 0x30
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a72c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a730:	2b00      	cmp	r3, #0
 801a732:	d001      	beq.n	801a738 <dir_register+0x20>
 801a734:	2306      	movs	r3, #6
 801a736:	e0e0      	b.n	801a8fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a738:	2300      	movs	r3, #0
 801a73a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a73c:	e002      	b.n	801a744 <dir_register+0x2c>
 801a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a740:	3301      	adds	r3, #1
 801a742:	627b      	str	r3, [r7, #36]	@ 0x24
 801a744:	69fb      	ldr	r3, [r7, #28]
 801a746:	68da      	ldr	r2, [r3, #12]
 801a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a74a:	005b      	lsls	r3, r3, #1
 801a74c:	4413      	add	r3, r2
 801a74e:	881b      	ldrh	r3, [r3, #0]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d1f4      	bne.n	801a73e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a75a:	f107 030c 	add.w	r3, r7, #12
 801a75e:	220c      	movs	r2, #12
 801a760:	4618      	mov	r0, r3
 801a762:	f7fe fe1f 	bl	80193a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a766:	7dfb      	ldrb	r3, [r7, #23]
 801a768:	f003 0301 	and.w	r3, r3, #1
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d032      	beq.n	801a7d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	2240      	movs	r2, #64	@ 0x40
 801a774:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a778:	2301      	movs	r3, #1
 801a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a77c:	e016      	b.n	801a7ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a784:	69fb      	ldr	r3, [r7, #28]
 801a786:	68da      	ldr	r2, [r3, #12]
 801a788:	f107 010c 	add.w	r1, r7, #12
 801a78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a78e:	f7ff fe53 	bl	801a438 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7ff feff 	bl	801a596 <dir_find>
 801a798:	4603      	mov	r3, r0
 801a79a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a79e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d106      	bne.n	801a7b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a8:	3301      	adds	r3, #1
 801a7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7ae:	2b63      	cmp	r3, #99	@ 0x63
 801a7b0:	d9e5      	bls.n	801a77e <dir_register+0x66>
 801a7b2:	e000      	b.n	801a7b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801a7b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7b8:	2b64      	cmp	r3, #100	@ 0x64
 801a7ba:	d101      	bne.n	801a7c0 <dir_register+0xa8>
 801a7bc:	2307      	movs	r3, #7
 801a7be:	e09c      	b.n	801a8fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7c4:	2b04      	cmp	r3, #4
 801a7c6:	d002      	beq.n	801a7ce <dir_register+0xb6>
 801a7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7cc:	e095      	b.n	801a8fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a7ce:	7dfa      	ldrb	r2, [r7, #23]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a7d6:	7dfb      	ldrb	r3, [r7, #23]
 801a7d8:	f003 0302 	and.w	r3, r3, #2
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d007      	beq.n	801a7f0 <dir_register+0xd8>
 801a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7e2:	330c      	adds	r3, #12
 801a7e4:	4a47      	ldr	r2, [pc, #284]	@ (801a904 <dir_register+0x1ec>)
 801a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 801a7ea:	089b      	lsrs	r3, r3, #2
 801a7ec:	3301      	adds	r3, #1
 801a7ee:	e000      	b.n	801a7f2 <dir_register+0xda>
 801a7f0:	2301      	movs	r3, #1
 801a7f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a7f4:	6a39      	ldr	r1, [r7, #32]
 801a7f6:	6878      	ldr	r0, [r7, #4]
 801a7f8:	f7ff fcbf 	bl	801a17a <dir_alloc>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a806:	2b00      	cmp	r3, #0
 801a808:	d148      	bne.n	801a89c <dir_register+0x184>
 801a80a:	6a3b      	ldr	r3, [r7, #32]
 801a80c:	3b01      	subs	r3, #1
 801a80e:	623b      	str	r3, [r7, #32]
 801a810:	6a3b      	ldr	r3, [r7, #32]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d042      	beq.n	801a89c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	695a      	ldr	r2, [r3, #20]
 801a81a:	6a3b      	ldr	r3, [r7, #32]
 801a81c:	015b      	lsls	r3, r3, #5
 801a81e:	1ad3      	subs	r3, r2, r3
 801a820:	4619      	mov	r1, r3
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	f7ff fb69 	bl	8019efa <dir_sdi>
 801a828:	4603      	mov	r3, r0
 801a82a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a82e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a832:	2b00      	cmp	r3, #0
 801a834:	d132      	bne.n	801a89c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	3324      	adds	r3, #36	@ 0x24
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7ff fe8a 	bl	801a554 <sum_sfn>
 801a840:	4603      	mov	r3, r0
 801a842:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	69db      	ldr	r3, [r3, #28]
 801a848:	4619      	mov	r1, r3
 801a84a:	69f8      	ldr	r0, [r7, #28]
 801a84c:	f7fe ffd8 	bl	8019800 <move_window>
 801a850:	4603      	mov	r3, r0
 801a852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d11d      	bne.n	801a89a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a85e:	69fb      	ldr	r3, [r7, #28]
 801a860:	68d8      	ldr	r0, [r3, #12]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	6a19      	ldr	r1, [r3, #32]
 801a866:	6a3b      	ldr	r3, [r7, #32]
 801a868:	b2da      	uxtb	r2, r3
 801a86a:	7efb      	ldrb	r3, [r7, #27]
 801a86c:	f7ff fd7c 	bl	801a368 <put_lfn>
				fs->wflag = 1;
 801a870:	69fb      	ldr	r3, [r7, #28]
 801a872:	2201      	movs	r2, #1
 801a874:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a876:	2100      	movs	r1, #0
 801a878:	6878      	ldr	r0, [r7, #4]
 801a87a:	f7ff fbb9 	bl	8019ff0 <dir_next>
 801a87e:	4603      	mov	r3, r0
 801a880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d107      	bne.n	801a89c <dir_register+0x184>
 801a88c:	6a3b      	ldr	r3, [r7, #32]
 801a88e:	3b01      	subs	r3, #1
 801a890:	623b      	str	r3, [r7, #32]
 801a892:	6a3b      	ldr	r3, [r7, #32]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d1d5      	bne.n	801a844 <dir_register+0x12c>
 801a898:	e000      	b.n	801a89c <dir_register+0x184>
				if (res != FR_OK) break;
 801a89a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a89c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d128      	bne.n	801a8f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	69db      	ldr	r3, [r3, #28]
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	69f8      	ldr	r0, [r7, #28]
 801a8ac:	f7fe ffa8 	bl	8019800 <move_window>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d11b      	bne.n	801a8f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	6a1b      	ldr	r3, [r3, #32]
 801a8c2:	2220      	movs	r2, #32
 801a8c4:	2100      	movs	r1, #0
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	f7fe fd8d 	bl	80193e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6a18      	ldr	r0, [r3, #32]
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	3324      	adds	r3, #36	@ 0x24
 801a8d4:	220b      	movs	r2, #11
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	f7fe fd64 	bl	80193a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6a1b      	ldr	r3, [r3, #32]
 801a8e6:	330c      	adds	r3, #12
 801a8e8:	f002 0218 	and.w	r2, r2, #24
 801a8ec:	b2d2      	uxtb	r2, r2
 801a8ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a8f0:	69fb      	ldr	r3, [r7, #28]
 801a8f2:	2201      	movs	r2, #1
 801a8f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	3730      	adds	r7, #48	@ 0x30
 801a8fe:	46bd      	mov	sp, r7
 801a900:	bd80      	pop	{r7, pc}
 801a902:	bf00      	nop
 801a904:	4ec4ec4f 	.word	0x4ec4ec4f

0801a908 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b088      	sub	sp, #32
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
 801a910:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	2200      	movs	r2, #0
 801a91c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	69db      	ldr	r3, [r3, #28]
 801a922:	2b00      	cmp	r3, #0
 801a924:	f000 80ca 	beq.w	801aabc <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a930:	d032      	beq.n	801a998 <get_fileinfo+0x90>
			i = j = 0;
 801a932:	2300      	movs	r3, #0
 801a934:	61bb      	str	r3, [r7, #24]
 801a936:	69bb      	ldr	r3, [r7, #24]
 801a938:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a93a:	e01b      	b.n	801a974 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a93c:	89fb      	ldrh	r3, [r7, #14]
 801a93e:	2100      	movs	r1, #0
 801a940:	4618      	mov	r0, r3
 801a942:	f001 fabb 	bl	801bebc <ff_convert>
 801a946:	4603      	mov	r3, r0
 801a948:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a94a:	89fb      	ldrh	r3, [r7, #14]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d102      	bne.n	801a956 <get_fileinfo+0x4e>
 801a950:	2300      	movs	r3, #0
 801a952:	61fb      	str	r3, [r7, #28]
 801a954:	e01a      	b.n	801a98c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a956:	69fb      	ldr	r3, [r7, #28]
 801a958:	2bfe      	cmp	r3, #254	@ 0xfe
 801a95a:	d902      	bls.n	801a962 <get_fileinfo+0x5a>
 801a95c:	2300      	movs	r3, #0
 801a95e:	61fb      	str	r3, [r7, #28]
 801a960:	e014      	b.n	801a98c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a962:	69fb      	ldr	r3, [r7, #28]
 801a964:	1c5a      	adds	r2, r3, #1
 801a966:	61fa      	str	r2, [r7, #28]
 801a968:	89fa      	ldrh	r2, [r7, #14]
 801a96a:	b2d1      	uxtb	r1, r2
 801a96c:	683a      	ldr	r2, [r7, #0]
 801a96e:	4413      	add	r3, r2
 801a970:	460a      	mov	r2, r1
 801a972:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a974:	693b      	ldr	r3, [r7, #16]
 801a976:	68da      	ldr	r2, [r3, #12]
 801a978:	69bb      	ldr	r3, [r7, #24]
 801a97a:	1c59      	adds	r1, r3, #1
 801a97c:	61b9      	str	r1, [r7, #24]
 801a97e:	005b      	lsls	r3, r3, #1
 801a980:	4413      	add	r3, r2
 801a982:	881b      	ldrh	r3, [r3, #0]
 801a984:	81fb      	strh	r3, [r7, #14]
 801a986:	89fb      	ldrh	r3, [r7, #14]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d1d7      	bne.n	801a93c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a98c:	683a      	ldr	r2, [r7, #0]
 801a98e:	69fb      	ldr	r3, [r7, #28]
 801a990:	4413      	add	r3, r2
 801a992:	3316      	adds	r3, #22
 801a994:	2200      	movs	r2, #0
 801a996:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a998:	2300      	movs	r3, #0
 801a99a:	61bb      	str	r3, [r7, #24]
 801a99c:	69bb      	ldr	r3, [r7, #24]
 801a99e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a9a0:	683a      	ldr	r2, [r7, #0]
 801a9a2:	69fb      	ldr	r3, [r7, #28]
 801a9a4:	4413      	add	r3, r2
 801a9a6:	3316      	adds	r3, #22
 801a9a8:	781b      	ldrb	r3, [r3, #0]
 801a9aa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a9ac:	e04d      	b.n	801aa4a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6a1a      	ldr	r2, [r3, #32]
 801a9b2:	69fb      	ldr	r3, [r7, #28]
 801a9b4:	1c59      	adds	r1, r3, #1
 801a9b6:	61f9      	str	r1, [r7, #28]
 801a9b8:	4413      	add	r3, r2
 801a9ba:	781b      	ldrb	r3, [r3, #0]
 801a9bc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a9be:	7dfb      	ldrb	r3, [r7, #23]
 801a9c0:	2b20      	cmp	r3, #32
 801a9c2:	d041      	beq.n	801aa48 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a9c4:	7dfb      	ldrb	r3, [r7, #23]
 801a9c6:	2b05      	cmp	r3, #5
 801a9c8:	d101      	bne.n	801a9ce <get_fileinfo+0xc6>
 801a9ca:	23e5      	movs	r3, #229	@ 0xe5
 801a9cc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a9ce:	69fb      	ldr	r3, [r7, #28]
 801a9d0:	2b09      	cmp	r3, #9
 801a9d2:	d10f      	bne.n	801a9f4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a9d4:	89bb      	ldrh	r3, [r7, #12]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d105      	bne.n	801a9e6 <get_fileinfo+0xde>
 801a9da:	683a      	ldr	r2, [r7, #0]
 801a9dc:	69bb      	ldr	r3, [r7, #24]
 801a9de:	4413      	add	r3, r2
 801a9e0:	3316      	adds	r3, #22
 801a9e2:	222e      	movs	r2, #46	@ 0x2e
 801a9e4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a9e6:	69bb      	ldr	r3, [r7, #24]
 801a9e8:	1c5a      	adds	r2, r3, #1
 801a9ea:	61ba      	str	r2, [r7, #24]
 801a9ec:	683a      	ldr	r2, [r7, #0]
 801a9ee:	4413      	add	r3, r2
 801a9f0:	222e      	movs	r2, #46	@ 0x2e
 801a9f2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801a9f4:	683a      	ldr	r2, [r7, #0]
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	4413      	add	r3, r2
 801a9fa:	3309      	adds	r3, #9
 801a9fc:	7dfa      	ldrb	r2, [r7, #23]
 801a9fe:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801aa00:	89bb      	ldrh	r3, [r7, #12]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d11c      	bne.n	801aa40 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801aa06:	7dfb      	ldrb	r3, [r7, #23]
 801aa08:	2b40      	cmp	r3, #64	@ 0x40
 801aa0a:	d913      	bls.n	801aa34 <get_fileinfo+0x12c>
 801aa0c:	7dfb      	ldrb	r3, [r7, #23]
 801aa0e:	2b5a      	cmp	r3, #90	@ 0x5a
 801aa10:	d810      	bhi.n	801aa34 <get_fileinfo+0x12c>
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6a1b      	ldr	r3, [r3, #32]
 801aa16:	330c      	adds	r3, #12
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	69fb      	ldr	r3, [r7, #28]
 801aa1e:	2b08      	cmp	r3, #8
 801aa20:	d901      	bls.n	801aa26 <get_fileinfo+0x11e>
 801aa22:	2310      	movs	r3, #16
 801aa24:	e000      	b.n	801aa28 <get_fileinfo+0x120>
 801aa26:	2308      	movs	r3, #8
 801aa28:	4013      	ands	r3, r2
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d002      	beq.n	801aa34 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801aa2e:	7dfb      	ldrb	r3, [r7, #23]
 801aa30:	3320      	adds	r3, #32
 801aa32:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801aa34:	683a      	ldr	r2, [r7, #0]
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	4413      	add	r3, r2
 801aa3a:	3316      	adds	r3, #22
 801aa3c:	7dfa      	ldrb	r2, [r7, #23]
 801aa3e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801aa40:	69bb      	ldr	r3, [r7, #24]
 801aa42:	3301      	adds	r3, #1
 801aa44:	61bb      	str	r3, [r7, #24]
 801aa46:	e000      	b.n	801aa4a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801aa48:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801aa4a:	69fb      	ldr	r3, [r7, #28]
 801aa4c:	2b0a      	cmp	r3, #10
 801aa4e:	d9ae      	bls.n	801a9ae <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801aa50:	89bb      	ldrh	r3, [r7, #12]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d10d      	bne.n	801aa72 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801aa56:	683a      	ldr	r2, [r7, #0]
 801aa58:	69bb      	ldr	r3, [r7, #24]
 801aa5a:	4413      	add	r3, r2
 801aa5c:	3316      	adds	r3, #22
 801aa5e:	2200      	movs	r2, #0
 801aa60:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a1b      	ldr	r3, [r3, #32]
 801aa66:	330c      	adds	r3, #12
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d101      	bne.n	801aa72 <get_fileinfo+0x16a>
 801aa6e:	2300      	movs	r3, #0
 801aa70:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801aa72:	683a      	ldr	r2, [r7, #0]
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	4413      	add	r3, r2
 801aa78:	3309      	adds	r3, #9
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	6a1b      	ldr	r3, [r3, #32]
 801aa82:	7ada      	ldrb	r2, [r3, #11]
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6a1b      	ldr	r3, [r3, #32]
 801aa8c:	331c      	adds	r3, #28
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fe fc1e 	bl	80192d0 <ld_dword>
 801aa94:	4602      	mov	r2, r0
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6a1b      	ldr	r3, [r3, #32]
 801aa9e:	3316      	adds	r3, #22
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7fe fc15 	bl	80192d0 <ld_dword>
 801aaa6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801aaa8:	68bb      	ldr	r3, [r7, #8]
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	80da      	strh	r2, [r3, #6]
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	0c1b      	lsrs	r3, r3, #16
 801aab4:	b29a      	uxth	r2, r3
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	809a      	strh	r2, [r3, #4]
 801aaba:	e000      	b.n	801aabe <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801aabc:	bf00      	nop
}
 801aabe:	3720      	adds	r7, #32
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b08a      	sub	sp, #40	@ 0x28
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
 801aacc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aace:	683b      	ldr	r3, [r7, #0]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	613b      	str	r3, [r7, #16]
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	68db      	ldr	r3, [r3, #12]
 801aada:	60fb      	str	r3, [r7, #12]
 801aadc:	2300      	movs	r3, #0
 801aade:	617b      	str	r3, [r7, #20]
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aae4:	69bb      	ldr	r3, [r7, #24]
 801aae6:	1c5a      	adds	r2, r3, #1
 801aae8:	61ba      	str	r2, [r7, #24]
 801aaea:	693a      	ldr	r2, [r7, #16]
 801aaec:	4413      	add	r3, r2
 801aaee:	781b      	ldrb	r3, [r3, #0]
 801aaf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801aaf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aaf4:	2b1f      	cmp	r3, #31
 801aaf6:	d940      	bls.n	801ab7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801aaf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aafa:	2b2f      	cmp	r3, #47	@ 0x2f
 801aafc:	d006      	beq.n	801ab0c <create_name+0x48>
 801aafe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab00:	2b5c      	cmp	r3, #92	@ 0x5c
 801ab02:	d110      	bne.n	801ab26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ab04:	e002      	b.n	801ab0c <create_name+0x48>
 801ab06:	69bb      	ldr	r3, [r7, #24]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	61bb      	str	r3, [r7, #24]
 801ab0c:	693a      	ldr	r2, [r7, #16]
 801ab0e:	69bb      	ldr	r3, [r7, #24]
 801ab10:	4413      	add	r3, r2
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab16:	d0f6      	beq.n	801ab06 <create_name+0x42>
 801ab18:	693a      	ldr	r2, [r7, #16]
 801ab1a:	69bb      	ldr	r3, [r7, #24]
 801ab1c:	4413      	add	r3, r2
 801ab1e:	781b      	ldrb	r3, [r3, #0]
 801ab20:	2b5c      	cmp	r3, #92	@ 0x5c
 801ab22:	d0f0      	beq.n	801ab06 <create_name+0x42>
			break;
 801ab24:	e02a      	b.n	801ab7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	2bfe      	cmp	r3, #254	@ 0xfe
 801ab2a:	d901      	bls.n	801ab30 <create_name+0x6c>
 801ab2c:	2306      	movs	r3, #6
 801ab2e:	e17d      	b.n	801ae2c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ab30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ab36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab38:	2101      	movs	r1, #1
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f001 f9be 	bl	801bebc <ff_convert>
 801ab40:	4603      	mov	r3, r0
 801ab42:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ab44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d101      	bne.n	801ab4e <create_name+0x8a>
 801ab4a:	2306      	movs	r3, #6
 801ab4c:	e16e      	b.n	801ae2c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab50:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab52:	d809      	bhi.n	801ab68 <create_name+0xa4>
 801ab54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab56:	4619      	mov	r1, r3
 801ab58:	488d      	ldr	r0, [pc, #564]	@ (801ad90 <create_name+0x2cc>)
 801ab5a:	f7fe fc86 	bl	801946a <chk_chr>
 801ab5e:	4603      	mov	r3, r0
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d001      	beq.n	801ab68 <create_name+0xa4>
 801ab64:	2306      	movs	r3, #6
 801ab66:	e161      	b.n	801ae2c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	1c5a      	adds	r2, r3, #1
 801ab6c:	617a      	str	r2, [r7, #20]
 801ab6e:	005b      	lsls	r3, r3, #1
 801ab70:	68fa      	ldr	r2, [r7, #12]
 801ab72:	4413      	add	r3, r2
 801ab74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ab76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ab78:	e7b4      	b.n	801aae4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ab7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ab7c:	693a      	ldr	r2, [r7, #16]
 801ab7e:	69bb      	ldr	r3, [r7, #24]
 801ab80:	441a      	add	r2, r3
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ab86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab88:	2b1f      	cmp	r3, #31
 801ab8a:	d801      	bhi.n	801ab90 <create_name+0xcc>
 801ab8c:	2304      	movs	r3, #4
 801ab8e:	e000      	b.n	801ab92 <create_name+0xce>
 801ab90:	2300      	movs	r3, #0
 801ab92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab96:	e011      	b.n	801abbc <create_name+0xf8>
		w = lfn[di - 1];
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ab9e:	3b01      	subs	r3, #1
 801aba0:	005b      	lsls	r3, r3, #1
 801aba2:	68fa      	ldr	r2, [r7, #12]
 801aba4:	4413      	add	r3, r2
 801aba6:	881b      	ldrh	r3, [r3, #0]
 801aba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801abaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abac:	2b20      	cmp	r3, #32
 801abae:	d002      	beq.n	801abb6 <create_name+0xf2>
 801abb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abb2:	2b2e      	cmp	r3, #46	@ 0x2e
 801abb4:	d106      	bne.n	801abc4 <create_name+0x100>
		di--;
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	3b01      	subs	r3, #1
 801abba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d1ea      	bne.n	801ab98 <create_name+0xd4>
 801abc2:	e000      	b.n	801abc6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801abc4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	005b      	lsls	r3, r3, #1
 801abca:	68fa      	ldr	r2, [r7, #12]
 801abcc:	4413      	add	r3, r2
 801abce:	2200      	movs	r2, #0
 801abd0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801abd2:	697b      	ldr	r3, [r7, #20]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d101      	bne.n	801abdc <create_name+0x118>
 801abd8:	2306      	movs	r3, #6
 801abda:	e127      	b.n	801ae2c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	3324      	adds	r3, #36	@ 0x24
 801abe0:	220b      	movs	r2, #11
 801abe2:	2120      	movs	r1, #32
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7fe fbfe 	bl	80193e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801abea:	2300      	movs	r3, #0
 801abec:	61bb      	str	r3, [r7, #24]
 801abee:	e002      	b.n	801abf6 <create_name+0x132>
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	3301      	adds	r3, #1
 801abf4:	61bb      	str	r3, [r7, #24]
 801abf6:	69bb      	ldr	r3, [r7, #24]
 801abf8:	005b      	lsls	r3, r3, #1
 801abfa:	68fa      	ldr	r2, [r7, #12]
 801abfc:	4413      	add	r3, r2
 801abfe:	881b      	ldrh	r3, [r3, #0]
 801ac00:	2b20      	cmp	r3, #32
 801ac02:	d0f5      	beq.n	801abf0 <create_name+0x12c>
 801ac04:	69bb      	ldr	r3, [r7, #24]
 801ac06:	005b      	lsls	r3, r3, #1
 801ac08:	68fa      	ldr	r2, [r7, #12]
 801ac0a:	4413      	add	r3, r2
 801ac0c:	881b      	ldrh	r3, [r3, #0]
 801ac0e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac10:	d0ee      	beq.n	801abf0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ac12:	69bb      	ldr	r3, [r7, #24]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d009      	beq.n	801ac2c <create_name+0x168>
 801ac18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac1c:	f043 0303 	orr.w	r3, r3, #3
 801ac20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ac24:	e002      	b.n	801ac2c <create_name+0x168>
 801ac26:	697b      	ldr	r3, [r7, #20]
 801ac28:	3b01      	subs	r3, #1
 801ac2a:	617b      	str	r3, [r7, #20]
 801ac2c:	697b      	ldr	r3, [r7, #20]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d009      	beq.n	801ac46 <create_name+0x182>
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ac38:	3b01      	subs	r3, #1
 801ac3a:	005b      	lsls	r3, r3, #1
 801ac3c:	68fa      	ldr	r2, [r7, #12]
 801ac3e:	4413      	add	r3, r2
 801ac40:	881b      	ldrh	r3, [r3, #0]
 801ac42:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac44:	d1ef      	bne.n	801ac26 <create_name+0x162>

	i = b = 0; ni = 8;
 801ac46:	2300      	movs	r3, #0
 801ac48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	623b      	str	r3, [r7, #32]
 801ac50:	2308      	movs	r3, #8
 801ac52:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ac54:	69bb      	ldr	r3, [r7, #24]
 801ac56:	1c5a      	adds	r2, r3, #1
 801ac58:	61ba      	str	r2, [r7, #24]
 801ac5a:	005b      	lsls	r3, r3, #1
 801ac5c:	68fa      	ldr	r2, [r7, #12]
 801ac5e:	4413      	add	r3, r2
 801ac60:	881b      	ldrh	r3, [r3, #0]
 801ac62:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ac64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	f000 8090 	beq.w	801ad8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac6e:	2b20      	cmp	r3, #32
 801ac70:	d006      	beq.n	801ac80 <create_name+0x1bc>
 801ac72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac74:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac76:	d10a      	bne.n	801ac8e <create_name+0x1ca>
 801ac78:	69ba      	ldr	r2, [r7, #24]
 801ac7a:	697b      	ldr	r3, [r7, #20]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d006      	beq.n	801ac8e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801ac80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac84:	f043 0303 	orr.w	r3, r3, #3
 801ac88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac8c:	e07d      	b.n	801ad8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801ac8e:	6a3a      	ldr	r2, [r7, #32]
 801ac90:	69fb      	ldr	r3, [r7, #28]
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d203      	bcs.n	801ac9e <create_name+0x1da>
 801ac96:	69ba      	ldr	r2, [r7, #24]
 801ac98:	697b      	ldr	r3, [r7, #20]
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d123      	bne.n	801ace6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801ac9e:	69fb      	ldr	r3, [r7, #28]
 801aca0:	2b0b      	cmp	r3, #11
 801aca2:	d106      	bne.n	801acb2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801aca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aca8:	f043 0303 	orr.w	r3, r3, #3
 801acac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801acb0:	e075      	b.n	801ad9e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801acb2:	69ba      	ldr	r2, [r7, #24]
 801acb4:	697b      	ldr	r3, [r7, #20]
 801acb6:	429a      	cmp	r2, r3
 801acb8:	d005      	beq.n	801acc6 <create_name+0x202>
 801acba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acbe:	f043 0303 	orr.w	r3, r3, #3
 801acc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801acc6:	69ba      	ldr	r2, [r7, #24]
 801acc8:	697b      	ldr	r3, [r7, #20]
 801acca:	429a      	cmp	r2, r3
 801accc:	d866      	bhi.n	801ad9c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	61bb      	str	r3, [r7, #24]
 801acd2:	2308      	movs	r3, #8
 801acd4:	623b      	str	r3, [r7, #32]
 801acd6:	230b      	movs	r3, #11
 801acd8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801acda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acde:	009b      	lsls	r3, r3, #2
 801ace0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ace4:	e051      	b.n	801ad8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801ace6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ace8:	2b7f      	cmp	r3, #127	@ 0x7f
 801acea:	d914      	bls.n	801ad16 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801acec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acee:	2100      	movs	r1, #0
 801acf0:	4618      	mov	r0, r3
 801acf2:	f001 f8e3 	bl	801bebc <ff_convert>
 801acf6:	4603      	mov	r3, r0
 801acf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801acfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d004      	beq.n	801ad0a <create_name+0x246>
 801ad00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad02:	3b80      	subs	r3, #128	@ 0x80
 801ad04:	4a23      	ldr	r2, [pc, #140]	@ (801ad94 <create_name+0x2d0>)
 801ad06:	5cd3      	ldrb	r3, [r2, r3]
 801ad08:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801ad0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad0e:	f043 0302 	orr.w	r3, r3, #2
 801ad12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801ad16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d007      	beq.n	801ad2c <create_name+0x268>
 801ad1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad1e:	4619      	mov	r1, r3
 801ad20:	481d      	ldr	r0, [pc, #116]	@ (801ad98 <create_name+0x2d4>)
 801ad22:	f7fe fba2 	bl	801946a <chk_chr>
 801ad26:	4603      	mov	r3, r0
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d008      	beq.n	801ad3e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ad2c:	235f      	movs	r3, #95	@ 0x5f
 801ad2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ad30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad34:	f043 0303 	orr.w	r3, r3, #3
 801ad38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad3c:	e01b      	b.n	801ad76 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801ad3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad40:	2b40      	cmp	r3, #64	@ 0x40
 801ad42:	d909      	bls.n	801ad58 <create_name+0x294>
 801ad44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad46:	2b5a      	cmp	r3, #90	@ 0x5a
 801ad48:	d806      	bhi.n	801ad58 <create_name+0x294>
					b |= 2;
 801ad4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad4e:	f043 0302 	orr.w	r3, r3, #2
 801ad52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad56:	e00e      	b.n	801ad76 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ad58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad5a:	2b60      	cmp	r3, #96	@ 0x60
 801ad5c:	d90b      	bls.n	801ad76 <create_name+0x2b2>
 801ad5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad60:	2b7a      	cmp	r3, #122	@ 0x7a
 801ad62:	d808      	bhi.n	801ad76 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ad64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad68:	f043 0301 	orr.w	r3, r3, #1
 801ad6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad72:	3b20      	subs	r3, #32
 801ad74:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ad76:	6a3b      	ldr	r3, [r7, #32]
 801ad78:	1c5a      	adds	r2, r3, #1
 801ad7a:	623a      	str	r2, [r7, #32]
 801ad7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad7e:	b2d1      	uxtb	r1, r2
 801ad80:	687a      	ldr	r2, [r7, #4]
 801ad82:	4413      	add	r3, r2
 801ad84:	460a      	mov	r2, r1
 801ad86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ad8a:	e763      	b.n	801ac54 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ad8c:	bf00      	nop
 801ad8e:	e006      	b.n	801ad9e <create_name+0x2da>
 801ad90:	08024808 	.word	0x08024808
 801ad94:	08025134 	.word	0x08025134
 801ad98:	08024814 	.word	0x08024814
			if (si > di) break;			/* No extension */
 801ad9c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ada4:	2be5      	cmp	r3, #229	@ 0xe5
 801ada6:	d103      	bne.n	801adb0 <create_name+0x2ec>
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2205      	movs	r2, #5
 801adac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801adb0:	69fb      	ldr	r3, [r7, #28]
 801adb2:	2b08      	cmp	r3, #8
 801adb4:	d104      	bne.n	801adc0 <create_name+0x2fc>
 801adb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adba:	009b      	lsls	r3, r3, #2
 801adbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801adc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adc4:	f003 030c 	and.w	r3, r3, #12
 801adc8:	2b0c      	cmp	r3, #12
 801adca:	d005      	beq.n	801add8 <create_name+0x314>
 801adcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801add0:	f003 0303 	and.w	r3, r3, #3
 801add4:	2b03      	cmp	r3, #3
 801add6:	d105      	bne.n	801ade4 <create_name+0x320>
 801add8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801addc:	f043 0302 	orr.w	r3, r3, #2
 801ade0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ade4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ade8:	f003 0302 	and.w	r3, r3, #2
 801adec:	2b00      	cmp	r3, #0
 801adee:	d117      	bne.n	801ae20 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801adf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adf4:	f003 0303 	and.w	r3, r3, #3
 801adf8:	2b01      	cmp	r3, #1
 801adfa:	d105      	bne.n	801ae08 <create_name+0x344>
 801adfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae00:	f043 0310 	orr.w	r3, r3, #16
 801ae04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ae08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ae0c:	f003 030c 	and.w	r3, r3, #12
 801ae10:	2b04      	cmp	r3, #4
 801ae12:	d105      	bne.n	801ae20 <create_name+0x35c>
 801ae14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae18:	f043 0308 	orr.w	r3, r3, #8
 801ae1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ae26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ae2a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	3728      	adds	r7, #40	@ 0x28
 801ae30:	46bd      	mov	sp, r7
 801ae32:	bd80      	pop	{r7, pc}

0801ae34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b086      	sub	sp, #24
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
 801ae3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ae48:	e002      	b.n	801ae50 <follow_path+0x1c>
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	3301      	adds	r3, #1
 801ae4e:	603b      	str	r3, [r7, #0]
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	781b      	ldrb	r3, [r3, #0]
 801ae54:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae56:	d0f8      	beq.n	801ae4a <follow_path+0x16>
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	781b      	ldrb	r3, [r3, #0]
 801ae5c:	2b5c      	cmp	r3, #92	@ 0x5c
 801ae5e:	d0f4      	beq.n	801ae4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ae60:	693b      	ldr	r3, [r7, #16]
 801ae62:	2200      	movs	r2, #0
 801ae64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ae66:	683b      	ldr	r3, [r7, #0]
 801ae68:	781b      	ldrb	r3, [r3, #0]
 801ae6a:	2b1f      	cmp	r3, #31
 801ae6c:	d80a      	bhi.n	801ae84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2280      	movs	r2, #128	@ 0x80
 801ae72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ae76:	2100      	movs	r1, #0
 801ae78:	6878      	ldr	r0, [r7, #4]
 801ae7a:	f7ff f83e 	bl	8019efa <dir_sdi>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	75fb      	strb	r3, [r7, #23]
 801ae82:	e043      	b.n	801af0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae84:	463b      	mov	r3, r7
 801ae86:	4619      	mov	r1, r3
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	f7ff fe1b 	bl	801aac4 <create_name>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ae92:	7dfb      	ldrb	r3, [r7, #23]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d134      	bne.n	801af02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ae98:	6878      	ldr	r0, [r7, #4]
 801ae9a:	f7ff fb7c 	bl	801a596 <dir_find>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801aea8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801aeaa:	7dfb      	ldrb	r3, [r7, #23]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d00a      	beq.n	801aec6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801aeb0:	7dfb      	ldrb	r3, [r7, #23]
 801aeb2:	2b04      	cmp	r3, #4
 801aeb4:	d127      	bne.n	801af06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801aeb6:	7afb      	ldrb	r3, [r7, #11]
 801aeb8:	f003 0304 	and.w	r3, r3, #4
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d122      	bne.n	801af06 <follow_path+0xd2>
 801aec0:	2305      	movs	r3, #5
 801aec2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801aec4:	e01f      	b.n	801af06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aec6:	7afb      	ldrb	r3, [r7, #11]
 801aec8:	f003 0304 	and.w	r3, r3, #4
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d11c      	bne.n	801af0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801aed0:	693b      	ldr	r3, [r7, #16]
 801aed2:	799b      	ldrb	r3, [r3, #6]
 801aed4:	f003 0310 	and.w	r3, r3, #16
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d102      	bne.n	801aee2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801aedc:	2305      	movs	r3, #5
 801aede:	75fb      	strb	r3, [r7, #23]
 801aee0:	e014      	b.n	801af0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	695b      	ldr	r3, [r3, #20]
 801aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aef0:	4413      	add	r3, r2
 801aef2:	4619      	mov	r1, r3
 801aef4:	68f8      	ldr	r0, [r7, #12]
 801aef6:	f7ff f987 	bl	801a208 <ld_clust>
 801aefa:	4602      	mov	r2, r0
 801aefc:	693b      	ldr	r3, [r7, #16]
 801aefe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801af00:	e7c0      	b.n	801ae84 <follow_path+0x50>
			if (res != FR_OK) break;
 801af02:	bf00      	nop
 801af04:	e002      	b.n	801af0c <follow_path+0xd8>
				break;
 801af06:	bf00      	nop
 801af08:	e000      	b.n	801af0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801af0a:	bf00      	nop
			}
		}
	}

	return res;
 801af0c:	7dfb      	ldrb	r3, [r7, #23]
}
 801af0e:	4618      	mov	r0, r3
 801af10:	3718      	adds	r7, #24
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}

0801af16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801af16:	b480      	push	{r7}
 801af18:	b087      	sub	sp, #28
 801af1a:	af00      	add	r7, sp, #0
 801af1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801af1e:	f04f 33ff 	mov.w	r3, #4294967295
 801af22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d031      	beq.n	801af90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	617b      	str	r3, [r7, #20]
 801af32:	e002      	b.n	801af3a <get_ldnumber+0x24>
 801af34:	697b      	ldr	r3, [r7, #20]
 801af36:	3301      	adds	r3, #1
 801af38:	617b      	str	r3, [r7, #20]
 801af3a:	697b      	ldr	r3, [r7, #20]
 801af3c:	781b      	ldrb	r3, [r3, #0]
 801af3e:	2b1f      	cmp	r3, #31
 801af40:	d903      	bls.n	801af4a <get_ldnumber+0x34>
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	781b      	ldrb	r3, [r3, #0]
 801af46:	2b3a      	cmp	r3, #58	@ 0x3a
 801af48:	d1f4      	bne.n	801af34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801af4a:	697b      	ldr	r3, [r7, #20]
 801af4c:	781b      	ldrb	r3, [r3, #0]
 801af4e:	2b3a      	cmp	r3, #58	@ 0x3a
 801af50:	d11c      	bne.n	801af8c <get_ldnumber+0x76>
			tp = *path;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	1c5a      	adds	r2, r3, #1
 801af5c:	60fa      	str	r2, [r7, #12]
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	3b30      	subs	r3, #48	@ 0x30
 801af62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801af64:	68bb      	ldr	r3, [r7, #8]
 801af66:	2b09      	cmp	r3, #9
 801af68:	d80e      	bhi.n	801af88 <get_ldnumber+0x72>
 801af6a:	68fa      	ldr	r2, [r7, #12]
 801af6c:	697b      	ldr	r3, [r7, #20]
 801af6e:	429a      	cmp	r2, r3
 801af70:	d10a      	bne.n	801af88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d107      	bne.n	801af88 <get_ldnumber+0x72>
					vol = (int)i;
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801af7c:	697b      	ldr	r3, [r7, #20]
 801af7e:	3301      	adds	r3, #1
 801af80:	617b      	str	r3, [r7, #20]
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	697a      	ldr	r2, [r7, #20]
 801af86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801af88:	693b      	ldr	r3, [r7, #16]
 801af8a:	e002      	b.n	801af92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801af8c:	2300      	movs	r3, #0
 801af8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801af90:	693b      	ldr	r3, [r7, #16]
}
 801af92:	4618      	mov	r0, r3
 801af94:	371c      	adds	r7, #28
 801af96:	46bd      	mov	sp, r7
 801af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9c:	4770      	bx	lr
	...

0801afa0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
 801afa8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2200      	movs	r2, #0
 801afae:	70da      	strb	r2, [r3, #3]
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	f04f 32ff 	mov.w	r2, #4294967295
 801afb6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801afb8:	6839      	ldr	r1, [r7, #0]
 801afba:	6878      	ldr	r0, [r7, #4]
 801afbc:	f7fe fc20 	bl	8019800 <move_window>
 801afc0:	4603      	mov	r3, r0
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d001      	beq.n	801afca <check_fs+0x2a>
 801afc6:	2304      	movs	r3, #4
 801afc8:	e038      	b.n	801b03c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	3334      	adds	r3, #52	@ 0x34
 801afce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801afd2:	4618      	mov	r0, r3
 801afd4:	f7fe f964 	bl	80192a0 <ld_word>
 801afd8:	4603      	mov	r3, r0
 801afda:	461a      	mov	r2, r3
 801afdc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801afe0:	429a      	cmp	r2, r3
 801afe2:	d001      	beq.n	801afe8 <check_fs+0x48>
 801afe4:	2303      	movs	r3, #3
 801afe6:	e029      	b.n	801b03c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afee:	2be9      	cmp	r3, #233	@ 0xe9
 801aff0:	d009      	beq.n	801b006 <check_fs+0x66>
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801aff8:	2beb      	cmp	r3, #235	@ 0xeb
 801affa:	d11e      	bne.n	801b03a <check_fs+0x9a>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801b002:	2b90      	cmp	r3, #144	@ 0x90
 801b004:	d119      	bne.n	801b03a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	3334      	adds	r3, #52	@ 0x34
 801b00a:	3336      	adds	r3, #54	@ 0x36
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7fe f95f 	bl	80192d0 <ld_dword>
 801b012:	4603      	mov	r3, r0
 801b014:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801b018:	4a0a      	ldr	r2, [pc, #40]	@ (801b044 <check_fs+0xa4>)
 801b01a:	4293      	cmp	r3, r2
 801b01c:	d101      	bne.n	801b022 <check_fs+0x82>
 801b01e:	2300      	movs	r3, #0
 801b020:	e00c      	b.n	801b03c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	3334      	adds	r3, #52	@ 0x34
 801b026:	3352      	adds	r3, #82	@ 0x52
 801b028:	4618      	mov	r0, r3
 801b02a:	f7fe f951 	bl	80192d0 <ld_dword>
 801b02e:	4603      	mov	r3, r0
 801b030:	4a05      	ldr	r2, [pc, #20]	@ (801b048 <check_fs+0xa8>)
 801b032:	4293      	cmp	r3, r2
 801b034:	d101      	bne.n	801b03a <check_fs+0x9a>
 801b036:	2300      	movs	r3, #0
 801b038:	e000      	b.n	801b03c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b03a:	2302      	movs	r3, #2
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3708      	adds	r7, #8
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}
 801b044:	00544146 	.word	0x00544146
 801b048:	33544146 	.word	0x33544146

0801b04c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b096      	sub	sp, #88	@ 0x58
 801b050:	af00      	add	r7, sp, #0
 801b052:	60f8      	str	r0, [r7, #12]
 801b054:	60b9      	str	r1, [r7, #8]
 801b056:	4613      	mov	r3, r2
 801b058:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	2200      	movs	r2, #0
 801b05e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b060:	68f8      	ldr	r0, [r7, #12]
 801b062:	f7ff ff58 	bl	801af16 <get_ldnumber>
 801b066:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	da01      	bge.n	801b072 <find_volume+0x26>
 801b06e:	230b      	movs	r3, #11
 801b070:	e230      	b.n	801b4d4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b072:	4aa1      	ldr	r2, [pc, #644]	@ (801b2f8 <find_volume+0x2ac>)
 801b074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b07a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d101      	bne.n	801b086 <find_volume+0x3a>
 801b082:	230c      	movs	r3, #12
 801b084:	e226      	b.n	801b4d4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b08a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b08c:	79fb      	ldrb	r3, [r7, #7]
 801b08e:	f023 0301 	bic.w	r3, r3, #1
 801b092:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b096:	781b      	ldrb	r3, [r3, #0]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d01a      	beq.n	801b0d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b09e:	785b      	ldrb	r3, [r3, #1]
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7fe f85d 	bl	8019160 <disk_status>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b0ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0b0:	f003 0301 	and.w	r3, r3, #1
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d10c      	bne.n	801b0d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b0b8:	79fb      	ldrb	r3, [r7, #7]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d007      	beq.n	801b0ce <find_volume+0x82>
 801b0be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0c2:	f003 0304 	and.w	r3, r3, #4
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d001      	beq.n	801b0ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b0ca:	230a      	movs	r3, #10
 801b0cc:	e202      	b.n	801b4d4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	e200      	b.n	801b4d4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0da:	b2da      	uxtb	r2, r3
 801b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0e2:	785b      	ldrb	r3, [r3, #1]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	f7fe f855 	bl	8019194 <disk_initialize>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b0f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0f4:	f003 0301 	and.w	r3, r3, #1
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d001      	beq.n	801b100 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b0fc:	2303      	movs	r3, #3
 801b0fe:	e1e9      	b.n	801b4d4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b100:	79fb      	ldrb	r3, [r7, #7]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d007      	beq.n	801b116 <find_volume+0xca>
 801b106:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b10a:	f003 0304 	and.w	r3, r3, #4
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d001      	beq.n	801b116 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b112:	230a      	movs	r3, #10
 801b114:	e1de      	b.n	801b4d4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b116:	2300      	movs	r3, #0
 801b118:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b11a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b11c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b11e:	f7ff ff3f 	bl	801afa0 <check_fs>
 801b122:	4603      	mov	r3, r0
 801b124:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b12c:	2b02      	cmp	r3, #2
 801b12e:	d149      	bne.n	801b1c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b130:	2300      	movs	r3, #0
 801b132:	643b      	str	r3, [r7, #64]	@ 0x40
 801b134:	e01e      	b.n	801b174 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b138:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b13e:	011b      	lsls	r3, r3, #4
 801b140:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b144:	4413      	add	r3, r2
 801b146:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b14a:	3304      	adds	r3, #4
 801b14c:	781b      	ldrb	r3, [r3, #0]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d006      	beq.n	801b160 <find_volume+0x114>
 801b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b154:	3308      	adds	r3, #8
 801b156:	4618      	mov	r0, r3
 801b158:	f7fe f8ba 	bl	80192d0 <ld_dword>
 801b15c:	4602      	mov	r2, r0
 801b15e:	e000      	b.n	801b162 <find_volume+0x116>
 801b160:	2200      	movs	r2, #0
 801b162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b164:	009b      	lsls	r3, r3, #2
 801b166:	3358      	adds	r3, #88	@ 0x58
 801b168:	443b      	add	r3, r7
 801b16a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b170:	3301      	adds	r3, #1
 801b172:	643b      	str	r3, [r7, #64]	@ 0x40
 801b174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b176:	2b03      	cmp	r3, #3
 801b178:	d9dd      	bls.n	801b136 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b17a:	2300      	movs	r3, #0
 801b17c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b17e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b180:	2b00      	cmp	r3, #0
 801b182:	d002      	beq.n	801b18a <find_volume+0x13e>
 801b184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b186:	3b01      	subs	r3, #1
 801b188:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b18c:	009b      	lsls	r3, r3, #2
 801b18e:	3358      	adds	r3, #88	@ 0x58
 801b190:	443b      	add	r3, r7
 801b192:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b196:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d005      	beq.n	801b1aa <find_volume+0x15e>
 801b19e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b1a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b1a2:	f7ff fefd 	bl	801afa0 <check_fs>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	e000      	b.n	801b1ac <find_volume+0x160>
 801b1aa:	2303      	movs	r3, #3
 801b1ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b1b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1b4:	2b01      	cmp	r3, #1
 801b1b6:	d905      	bls.n	801b1c4 <find_volume+0x178>
 801b1b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	643b      	str	r3, [r7, #64]	@ 0x40
 801b1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1c0:	2b03      	cmp	r3, #3
 801b1c2:	d9e2      	bls.n	801b18a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b1c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1c8:	2b04      	cmp	r3, #4
 801b1ca:	d101      	bne.n	801b1d0 <find_volume+0x184>
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	e181      	b.n	801b4d4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1d4:	2b01      	cmp	r3, #1
 801b1d6:	d901      	bls.n	801b1dc <find_volume+0x190>
 801b1d8:	230d      	movs	r3, #13
 801b1da:	e17b      	b.n	801b4d4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1de:	3334      	adds	r3, #52	@ 0x34
 801b1e0:	330b      	adds	r3, #11
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f7fe f85c 	bl	80192a0 <ld_word>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b1ee:	d001      	beq.n	801b1f4 <find_volume+0x1a8>
 801b1f0:	230d      	movs	r3, #13
 801b1f2:	e16f      	b.n	801b4d4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f6:	3334      	adds	r3, #52	@ 0x34
 801b1f8:	3316      	adds	r3, #22
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7fe f850 	bl	80192a0 <ld_word>
 801b200:	4603      	mov	r3, r0
 801b202:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b206:	2b00      	cmp	r3, #0
 801b208:	d106      	bne.n	801b218 <find_volume+0x1cc>
 801b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b20c:	3334      	adds	r3, #52	@ 0x34
 801b20e:	3324      	adds	r3, #36	@ 0x24
 801b210:	4618      	mov	r0, r3
 801b212:	f7fe f85d 	bl	80192d0 <ld_dword>
 801b216:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b21a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b21c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b220:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b22a:	789b      	ldrb	r3, [r3, #2]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	d005      	beq.n	801b23c <find_volume+0x1f0>
 801b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b232:	789b      	ldrb	r3, [r3, #2]
 801b234:	2b02      	cmp	r3, #2
 801b236:	d001      	beq.n	801b23c <find_volume+0x1f0>
 801b238:	230d      	movs	r3, #13
 801b23a:	e14b      	b.n	801b4d4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23e:	789b      	ldrb	r3, [r3, #2]
 801b240:	461a      	mov	r2, r3
 801b242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b244:	fb02 f303 	mul.w	r3, r2, r3
 801b248:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b24c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b250:	461a      	mov	r2, r3
 801b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b258:	895b      	ldrh	r3, [r3, #10]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d008      	beq.n	801b270 <find_volume+0x224>
 801b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b260:	895b      	ldrh	r3, [r3, #10]
 801b262:	461a      	mov	r2, r3
 801b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b266:	895b      	ldrh	r3, [r3, #10]
 801b268:	3b01      	subs	r3, #1
 801b26a:	4013      	ands	r3, r2
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d001      	beq.n	801b274 <find_volume+0x228>
 801b270:	230d      	movs	r3, #13
 801b272:	e12f      	b.n	801b4d4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b276:	3334      	adds	r3, #52	@ 0x34
 801b278:	3311      	adds	r3, #17
 801b27a:	4618      	mov	r0, r3
 801b27c:	f7fe f810 	bl	80192a0 <ld_word>
 801b280:	4603      	mov	r3, r0
 801b282:	461a      	mov	r2, r3
 801b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b28a:	891b      	ldrh	r3, [r3, #8]
 801b28c:	f003 030f 	and.w	r3, r3, #15
 801b290:	b29b      	uxth	r3, r3
 801b292:	2b00      	cmp	r3, #0
 801b294:	d001      	beq.n	801b29a <find_volume+0x24e>
 801b296:	230d      	movs	r3, #13
 801b298:	e11c      	b.n	801b4d4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b29c:	3334      	adds	r3, #52	@ 0x34
 801b29e:	3313      	adds	r3, #19
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f7fd fffd 	bl	80192a0 <ld_word>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b2aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d106      	bne.n	801b2be <find_volume+0x272>
 801b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2b2:	3334      	adds	r3, #52	@ 0x34
 801b2b4:	3320      	adds	r3, #32
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	f7fe f80a 	bl	80192d0 <ld_dword>
 801b2bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2c0:	3334      	adds	r3, #52	@ 0x34
 801b2c2:	330e      	adds	r3, #14
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	f7fd ffeb 	bl	80192a0 <ld_word>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b2ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d101      	bne.n	801b2d8 <find_volume+0x28c>
 801b2d4:	230d      	movs	r3, #13
 801b2d6:	e0fd      	b.n	801b4d4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b2d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b2da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2dc:	4413      	add	r3, r2
 801b2de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2e0:	8912      	ldrh	r2, [r2, #8]
 801b2e2:	0912      	lsrs	r2, r2, #4
 801b2e4:	b292      	uxth	r2, r2
 801b2e6:	4413      	add	r3, r2
 801b2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b2ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d204      	bcs.n	801b2fc <find_volume+0x2b0>
 801b2f2:	230d      	movs	r3, #13
 801b2f4:	e0ee      	b.n	801b4d4 <find_volume+0x488>
 801b2f6:	bf00      	nop
 801b2f8:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b2fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b300:	1ad3      	subs	r3, r2, r3
 801b302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b304:	8952      	ldrh	r2, [r2, #10]
 801b306:	fbb3 f3f2 	udiv	r3, r3, r2
 801b30a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d101      	bne.n	801b316 <find_volume+0x2ca>
 801b312:	230d      	movs	r3, #13
 801b314:	e0de      	b.n	801b4d4 <find_volume+0x488>
		fmt = FS_FAT32;
 801b316:	2303      	movs	r3, #3
 801b318:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b31e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b322:	4293      	cmp	r3, r2
 801b324:	d802      	bhi.n	801b32c <find_volume+0x2e0>
 801b326:	2302      	movs	r3, #2
 801b328:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b32e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b332:	4293      	cmp	r3, r2
 801b334:	d802      	bhi.n	801b33c <find_volume+0x2f0>
 801b336:	2301      	movs	r3, #1
 801b338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b33e:	1c9a      	adds	r2, r3, #2
 801b340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b342:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b346:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b348:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b34a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b34c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b34e:	441a      	add	r2, r3
 801b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b352:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b354:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b358:	441a      	add	r2, r3
 801b35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b35c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b35e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b362:	2b03      	cmp	r3, #3
 801b364:	d11e      	bne.n	801b3a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b368:	3334      	adds	r3, #52	@ 0x34
 801b36a:	332a      	adds	r3, #42	@ 0x2a
 801b36c:	4618      	mov	r0, r3
 801b36e:	f7fd ff97 	bl	80192a0 <ld_word>
 801b372:	4603      	mov	r3, r0
 801b374:	2b00      	cmp	r3, #0
 801b376:	d001      	beq.n	801b37c <find_volume+0x330>
 801b378:	230d      	movs	r3, #13
 801b37a:	e0ab      	b.n	801b4d4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b37e:	891b      	ldrh	r3, [r3, #8]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d001      	beq.n	801b388 <find_volume+0x33c>
 801b384:	230d      	movs	r3, #13
 801b386:	e0a5      	b.n	801b4d4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b38a:	3334      	adds	r3, #52	@ 0x34
 801b38c:	332c      	adds	r3, #44	@ 0x2c
 801b38e:	4618      	mov	r0, r3
 801b390:	f7fd ff9e 	bl	80192d0 <ld_dword>
 801b394:	4602      	mov	r2, r0
 801b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b398:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b39c:	699b      	ldr	r3, [r3, #24]
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	647b      	str	r3, [r7, #68]	@ 0x44
 801b3a2:	e01f      	b.n	801b3e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3a6:	891b      	ldrh	r3, [r3, #8]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d101      	bne.n	801b3b0 <find_volume+0x364>
 801b3ac:	230d      	movs	r3, #13
 801b3ae:	e091      	b.n	801b4d4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3b6:	441a      	add	r2, r3
 801b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b3bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b3c0:	2b02      	cmp	r3, #2
 801b3c2:	d103      	bne.n	801b3cc <find_volume+0x380>
 801b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3c6:	699b      	ldr	r3, [r3, #24]
 801b3c8:	005b      	lsls	r3, r3, #1
 801b3ca:	e00a      	b.n	801b3e2 <find_volume+0x396>
 801b3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ce:	699a      	ldr	r2, [r3, #24]
 801b3d0:	4613      	mov	r3, r2
 801b3d2:	005b      	lsls	r3, r3, #1
 801b3d4:	4413      	add	r3, r2
 801b3d6:	085a      	lsrs	r2, r3, #1
 801b3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3da:	699b      	ldr	r3, [r3, #24]
 801b3dc:	f003 0301 	and.w	r3, r3, #1
 801b3e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b3e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e6:	69da      	ldr	r2, [r3, #28]
 801b3e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b3ee:	0a5b      	lsrs	r3, r3, #9
 801b3f0:	429a      	cmp	r2, r3
 801b3f2:	d201      	bcs.n	801b3f8 <find_volume+0x3ac>
 801b3f4:	230d      	movs	r3, #13
 801b3f6:	e06d      	b.n	801b4d4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 801b3fe:	615a      	str	r2, [r3, #20]
 801b400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b402:	695a      	ldr	r2, [r3, #20]
 801b404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b406:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b40a:	2280      	movs	r2, #128	@ 0x80
 801b40c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b40e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b412:	2b03      	cmp	r3, #3
 801b414:	d149      	bne.n	801b4aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b418:	3334      	adds	r3, #52	@ 0x34
 801b41a:	3330      	adds	r3, #48	@ 0x30
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7fd ff3f 	bl	80192a0 <ld_word>
 801b422:	4603      	mov	r3, r0
 801b424:	2b01      	cmp	r3, #1
 801b426:	d140      	bne.n	801b4aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b42a:	3301      	adds	r3, #1
 801b42c:	4619      	mov	r1, r3
 801b42e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b430:	f7fe f9e6 	bl	8019800 <move_window>
 801b434:	4603      	mov	r3, r0
 801b436:	2b00      	cmp	r3, #0
 801b438:	d137      	bne.n	801b4aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b43c:	2200      	movs	r2, #0
 801b43e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b442:	3334      	adds	r3, #52	@ 0x34
 801b444:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b448:	4618      	mov	r0, r3
 801b44a:	f7fd ff29 	bl	80192a0 <ld_word>
 801b44e:	4603      	mov	r3, r0
 801b450:	461a      	mov	r2, r3
 801b452:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b456:	429a      	cmp	r2, r3
 801b458:	d127      	bne.n	801b4aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b45c:	3334      	adds	r3, #52	@ 0x34
 801b45e:	4618      	mov	r0, r3
 801b460:	f7fd ff36 	bl	80192d0 <ld_dword>
 801b464:	4603      	mov	r3, r0
 801b466:	4a1d      	ldr	r2, [pc, #116]	@ (801b4dc <find_volume+0x490>)
 801b468:	4293      	cmp	r3, r2
 801b46a:	d11e      	bne.n	801b4aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b46e:	3334      	adds	r3, #52	@ 0x34
 801b470:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b474:	4618      	mov	r0, r3
 801b476:	f7fd ff2b 	bl	80192d0 <ld_dword>
 801b47a:	4603      	mov	r3, r0
 801b47c:	4a18      	ldr	r2, [pc, #96]	@ (801b4e0 <find_volume+0x494>)
 801b47e:	4293      	cmp	r3, r2
 801b480:	d113      	bne.n	801b4aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b484:	3334      	adds	r3, #52	@ 0x34
 801b486:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b48a:	4618      	mov	r0, r3
 801b48c:	f7fd ff20 	bl	80192d0 <ld_dword>
 801b490:	4602      	mov	r2, r0
 801b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b494:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b498:	3334      	adds	r3, #52	@ 0x34
 801b49a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b49e:	4618      	mov	r0, r3
 801b4a0:	f7fd ff16 	bl	80192d0 <ld_dword>
 801b4a4:	4602      	mov	r2, r0
 801b4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b4b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b4b2:	4b0c      	ldr	r3, [pc, #48]	@ (801b4e4 <find_volume+0x498>)
 801b4b4:	881b      	ldrh	r3, [r3, #0]
 801b4b6:	3301      	adds	r3, #1
 801b4b8:	b29a      	uxth	r2, r3
 801b4ba:	4b0a      	ldr	r3, [pc, #40]	@ (801b4e4 <find_volume+0x498>)
 801b4bc:	801a      	strh	r2, [r3, #0]
 801b4be:	4b09      	ldr	r3, [pc, #36]	@ (801b4e4 <find_volume+0x498>)
 801b4c0:	881a      	ldrh	r2, [r3, #0]
 801b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4c4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4c8:	4a07      	ldr	r2, [pc, #28]	@ (801b4e8 <find_volume+0x49c>)
 801b4ca:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b4cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b4ce:	f7fe f92f 	bl	8019730 <clear_lock>
#endif
	return FR_OK;
 801b4d2:	2300      	movs	r3, #0
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3758      	adds	r7, #88	@ 0x58
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}
 801b4dc:	41615252 	.word	0x41615252
 801b4e0:	61417272 	.word	0x61417272
 801b4e4:	20001b6c 	.word	0x20001b6c
 801b4e8:	20001b90 	.word	0x20001b90

0801b4ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b084      	sub	sp, #16
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b4f6:	2309      	movs	r3, #9
 801b4f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d01c      	beq.n	801b53a <validate+0x4e>
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d018      	beq.n	801b53a <validate+0x4e>
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d013      	beq.n	801b53a <validate+0x4e>
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	889a      	ldrh	r2, [r3, #4]
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	88db      	ldrh	r3, [r3, #6]
 801b51c:	429a      	cmp	r2, r3
 801b51e:	d10c      	bne.n	801b53a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	785b      	ldrb	r3, [r3, #1]
 801b526:	4618      	mov	r0, r3
 801b528:	f7fd fe1a 	bl	8019160 <disk_status>
 801b52c:	4603      	mov	r3, r0
 801b52e:	f003 0301 	and.w	r3, r3, #1
 801b532:	2b00      	cmp	r3, #0
 801b534:	d101      	bne.n	801b53a <validate+0x4e>
			res = FR_OK;
 801b536:	2300      	movs	r3, #0
 801b538:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b53a:	7bfb      	ldrb	r3, [r7, #15]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d102      	bne.n	801b546 <validate+0x5a>
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	e000      	b.n	801b548 <validate+0x5c>
 801b546:	2300      	movs	r3, #0
 801b548:	683a      	ldr	r2, [r7, #0]
 801b54a:	6013      	str	r3, [r2, #0]
	return res;
 801b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b54e:	4618      	mov	r0, r3
 801b550:	3710      	adds	r7, #16
 801b552:	46bd      	mov	sp, r7
 801b554:	bd80      	pop	{r7, pc}
	...

0801b558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	b088      	sub	sp, #32
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	60f8      	str	r0, [r7, #12]
 801b560:	60b9      	str	r1, [r7, #8]
 801b562:	4613      	mov	r3, r2
 801b564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b56a:	f107 0310 	add.w	r3, r7, #16
 801b56e:	4618      	mov	r0, r3
 801b570:	f7ff fcd1 	bl	801af16 <get_ldnumber>
 801b574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b576:	69fb      	ldr	r3, [r7, #28]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	da01      	bge.n	801b580 <f_mount+0x28>
 801b57c:	230b      	movs	r3, #11
 801b57e:	e02b      	b.n	801b5d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b580:	4a17      	ldr	r2, [pc, #92]	@ (801b5e0 <f_mount+0x88>)
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d005      	beq.n	801b59c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b590:	69b8      	ldr	r0, [r7, #24]
 801b592:	f7fe f8cd 	bl	8019730 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b596:	69bb      	ldr	r3, [r7, #24]
 801b598:	2200      	movs	r2, #0
 801b59a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d002      	beq.n	801b5a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b5a8:	68fa      	ldr	r2, [r7, #12]
 801b5aa:	490d      	ldr	r1, [pc, #52]	@ (801b5e0 <f_mount+0x88>)
 801b5ac:	69fb      	ldr	r3, [r7, #28]
 801b5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d002      	beq.n	801b5be <f_mount+0x66>
 801b5b8:	79fb      	ldrb	r3, [r7, #7]
 801b5ba:	2b01      	cmp	r3, #1
 801b5bc:	d001      	beq.n	801b5c2 <f_mount+0x6a>
 801b5be:	2300      	movs	r3, #0
 801b5c0:	e00a      	b.n	801b5d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b5c2:	f107 010c 	add.w	r1, r7, #12
 801b5c6:	f107 0308 	add.w	r3, r7, #8
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	f7ff fd3d 	bl	801b04c <find_volume>
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3720      	adds	r7, #32
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	20001b68 	.word	0x20001b68

0801b5e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b09a      	sub	sp, #104	@ 0x68
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	60f8      	str	r0, [r7, #12]
 801b5ec:	60b9      	str	r1, [r7, #8]
 801b5ee:	4613      	mov	r3, r2
 801b5f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d101      	bne.n	801b5fc <f_open+0x18>
 801b5f8:	2309      	movs	r3, #9
 801b5fa:	e1a9      	b.n	801b950 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b5fc:	79fb      	ldrb	r3, [r7, #7]
 801b5fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b602:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b604:	79fa      	ldrb	r2, [r7, #7]
 801b606:	f107 0114 	add.w	r1, r7, #20
 801b60a:	f107 0308 	add.w	r3, r7, #8
 801b60e:	4618      	mov	r0, r3
 801b610:	f7ff fd1c 	bl	801b04c <find_volume>
 801b614:	4603      	mov	r3, r0
 801b616:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b61a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b61e:	2b00      	cmp	r3, #0
 801b620:	f040 818d 	bne.w	801b93e <f_open+0x35a>
		dj.obj.fs = fs;
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b628:	68ba      	ldr	r2, [r7, #8]
 801b62a:	f107 0318 	add.w	r3, r7, #24
 801b62e:	4611      	mov	r1, r2
 801b630:	4618      	mov	r0, r3
 801b632:	f7ff fbff 	bl	801ae34 <follow_path>
 801b636:	4603      	mov	r3, r0
 801b638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b63c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b640:	2b00      	cmp	r3, #0
 801b642:	d118      	bne.n	801b676 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b644:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b648:	b25b      	sxtb	r3, r3
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	da03      	bge.n	801b656 <f_open+0x72>
				res = FR_INVALID_NAME;
 801b64e:	2306      	movs	r3, #6
 801b650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b654:	e00f      	b.n	801b676 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b656:	79fb      	ldrb	r3, [r7, #7]
 801b658:	2b01      	cmp	r3, #1
 801b65a:	bf8c      	ite	hi
 801b65c:	2301      	movhi	r3, #1
 801b65e:	2300      	movls	r3, #0
 801b660:	b2db      	uxtb	r3, r3
 801b662:	461a      	mov	r2, r3
 801b664:	f107 0318 	add.w	r3, r7, #24
 801b668:	4611      	mov	r1, r2
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7fd ff18 	bl	80194a0 <chk_lock>
 801b670:	4603      	mov	r3, r0
 801b672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b676:	79fb      	ldrb	r3, [r7, #7]
 801b678:	f003 031c 	and.w	r3, r3, #28
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d07f      	beq.n	801b780 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b684:	2b00      	cmp	r3, #0
 801b686:	d017      	beq.n	801b6b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b688:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b68c:	2b04      	cmp	r3, #4
 801b68e:	d10e      	bne.n	801b6ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b690:	f7fd ff62 	bl	8019558 <enq_lock>
 801b694:	4603      	mov	r3, r0
 801b696:	2b00      	cmp	r3, #0
 801b698:	d006      	beq.n	801b6a8 <f_open+0xc4>
 801b69a:	f107 0318 	add.w	r3, r7, #24
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7ff f83a 	bl	801a718 <dir_register>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	e000      	b.n	801b6aa <f_open+0xc6>
 801b6a8:	2312      	movs	r3, #18
 801b6aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b6ae:	79fb      	ldrb	r3, [r7, #7]
 801b6b0:	f043 0308 	orr.w	r3, r3, #8
 801b6b4:	71fb      	strb	r3, [r7, #7]
 801b6b6:	e010      	b.n	801b6da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b6b8:	7fbb      	ldrb	r3, [r7, #30]
 801b6ba:	f003 0311 	and.w	r3, r3, #17
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d003      	beq.n	801b6ca <f_open+0xe6>
					res = FR_DENIED;
 801b6c2:	2307      	movs	r3, #7
 801b6c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b6c8:	e007      	b.n	801b6da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b6ca:	79fb      	ldrb	r3, [r7, #7]
 801b6cc:	f003 0304 	and.w	r3, r3, #4
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d002      	beq.n	801b6da <f_open+0xf6>
 801b6d4:	2308      	movs	r3, #8
 801b6d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b6da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d168      	bne.n	801b7b4 <f_open+0x1d0>
 801b6e2:	79fb      	ldrb	r3, [r7, #7]
 801b6e4:	f003 0308 	and.w	r3, r3, #8
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d063      	beq.n	801b7b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 801b6ec:	f7f8 f936 	bl	801395c <get_fattime>
 801b6f0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6f4:	330e      	adds	r3, #14
 801b6f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7fd fe27 	bl	801934c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b700:	3316      	adds	r3, #22
 801b702:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b704:	4618      	mov	r0, r3
 801b706:	f7fd fe21 	bl	801934c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b70c:	330b      	adds	r3, #11
 801b70e:	2220      	movs	r2, #32
 801b710:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b716:	4611      	mov	r1, r2
 801b718:	4618      	mov	r0, r3
 801b71a:	f7fe fd75 	bl	801a208 <ld_clust>
 801b71e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b724:	2200      	movs	r2, #0
 801b726:	4618      	mov	r0, r3
 801b728:	f7fe fd8d 	bl	801a246 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b72e:	331c      	adds	r3, #28
 801b730:	2100      	movs	r1, #0
 801b732:	4618      	mov	r0, r3
 801b734:	f7fd fe0a 	bl	801934c <st_dword>
					fs->wflag = 1;
 801b738:	697b      	ldr	r3, [r7, #20]
 801b73a:	2201      	movs	r2, #1
 801b73c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b73e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b740:	2b00      	cmp	r3, #0
 801b742:	d037      	beq.n	801b7b4 <f_open+0x1d0>
						dw = fs->winsect;
 801b744:	697b      	ldr	r3, [r7, #20]
 801b746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b748:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b74a:	f107 0318 	add.w	r3, r7, #24
 801b74e:	2200      	movs	r2, #0
 801b750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b752:	4618      	mov	r0, r3
 801b754:	f7fe faa0 	bl	8019c98 <remove_chain>
 801b758:	4603      	mov	r3, r0
 801b75a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b75e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b762:	2b00      	cmp	r3, #0
 801b764:	d126      	bne.n	801b7b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7fe f848 	bl	8019800 <move_window>
 801b770:	4603      	mov	r3, r0
 801b772:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b77a:	3a01      	subs	r2, #1
 801b77c:	611a      	str	r2, [r3, #16]
 801b77e:	e019      	b.n	801b7b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b780:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b784:	2b00      	cmp	r3, #0
 801b786:	d115      	bne.n	801b7b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b788:	7fbb      	ldrb	r3, [r7, #30]
 801b78a:	f003 0310 	and.w	r3, r3, #16
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d003      	beq.n	801b79a <f_open+0x1b6>
					res = FR_NO_FILE;
 801b792:	2304      	movs	r3, #4
 801b794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b798:	e00c      	b.n	801b7b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b79a:	79fb      	ldrb	r3, [r7, #7]
 801b79c:	f003 0302 	and.w	r3, r3, #2
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d007      	beq.n	801b7b4 <f_open+0x1d0>
 801b7a4:	7fbb      	ldrb	r3, [r7, #30]
 801b7a6:	f003 0301 	and.w	r3, r3, #1
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d002      	beq.n	801b7b4 <f_open+0x1d0>
						res = FR_DENIED;
 801b7ae:	2307      	movs	r3, #7
 801b7b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b7b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d126      	bne.n	801b80a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b7bc:	79fb      	ldrb	r3, [r7, #7]
 801b7be:	f003 0308 	and.w	r3, r3, #8
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d003      	beq.n	801b7ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b7c6:	79fb      	ldrb	r3, [r7, #7]
 801b7c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b7ce:	697b      	ldr	r3, [r7, #20]
 801b7d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b7d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b7dc:	79fb      	ldrb	r3, [r7, #7]
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	bf8c      	ite	hi
 801b7e2:	2301      	movhi	r3, #1
 801b7e4:	2300      	movls	r3, #0
 801b7e6:	b2db      	uxtb	r3, r3
 801b7e8:	461a      	mov	r2, r3
 801b7ea:	f107 0318 	add.w	r3, r7, #24
 801b7ee:	4611      	mov	r1, r2
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7fd fed3 	bl	801959c <inc_lock>
 801b7f6:	4602      	mov	r2, r0
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	691b      	ldr	r3, [r3, #16]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d102      	bne.n	801b80a <f_open+0x226>
 801b804:	2302      	movs	r3, #2
 801b806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b80a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b80e:	2b00      	cmp	r3, #0
 801b810:	f040 8095 	bne.w	801b93e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b818:	4611      	mov	r1, r2
 801b81a:	4618      	mov	r0, r3
 801b81c:	f7fe fcf4 	bl	801a208 <ld_clust>
 801b820:	4602      	mov	r2, r0
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b828:	331c      	adds	r3, #28
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7fd fd50 	bl	80192d0 <ld_dword>
 801b830:	4602      	mov	r2, r0
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	2200      	movs	r2, #0
 801b83a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b83c:	697a      	ldr	r2, [r7, #20]
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b842:	697b      	ldr	r3, [r7, #20]
 801b844:	88da      	ldrh	r2, [r3, #6]
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	79fa      	ldrb	r2, [r7, #7]
 801b84e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	2200      	movs	r2, #0
 801b854:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	2200      	movs	r2, #0
 801b85a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	2200      	movs	r2, #0
 801b860:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	3330      	adds	r3, #48	@ 0x30
 801b866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b86a:	2100      	movs	r1, #0
 801b86c:	4618      	mov	r0, r3
 801b86e:	f7fd fdba 	bl	80193e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b872:	79fb      	ldrb	r3, [r7, #7]
 801b874:	f003 0320 	and.w	r3, r3, #32
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d060      	beq.n	801b93e <f_open+0x35a>
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	68db      	ldr	r3, [r3, #12]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d05c      	beq.n	801b93e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	68da      	ldr	r2, [r3, #12]
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	895b      	ldrh	r3, [r3, #10]
 801b890:	025b      	lsls	r3, r3, #9
 801b892:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	689b      	ldr	r3, [r3, #8]
 801b898:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	68db      	ldr	r3, [r3, #12]
 801b89e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8a0:	e016      	b.n	801b8d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	f7fe f865 	bl	8019976 <get_fat>
 801b8ac:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b8ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b8b0:	2b01      	cmp	r3, #1
 801b8b2:	d802      	bhi.n	801b8ba <f_open+0x2d6>
 801b8b4:	2302      	movs	r3, #2
 801b8b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b8ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8c0:	d102      	bne.n	801b8c8 <f_open+0x2e4>
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b8c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8cc:	1ad3      	subs	r3, r2, r3
 801b8ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d103      	bne.n	801b8e0 <f_open+0x2fc>
 801b8d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d8e0      	bhi.n	801b8a2 <f_open+0x2be>
				}
				fp->clust = clst;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b8e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b8e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d127      	bne.n	801b93e <f_open+0x35a>
 801b8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d022      	beq.n	801b93e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7fe f81b 	bl	8019938 <clust2sect>
 801b902:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b906:	2b00      	cmp	r3, #0
 801b908:	d103      	bne.n	801b912 <f_open+0x32e>
						res = FR_INT_ERR;
 801b90a:	2302      	movs	r3, #2
 801b90c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b910:	e015      	b.n	801b93e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b914:	0a5a      	lsrs	r2, r3, #9
 801b916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b918:	441a      	add	r2, r3
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b91e:	697b      	ldr	r3, [r7, #20]
 801b920:	7858      	ldrb	r0, [r3, #1]
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	6a1a      	ldr	r2, [r3, #32]
 801b92c:	2301      	movs	r3, #1
 801b92e:	f7fd fc59 	bl	80191e4 <disk_read>
 801b932:	4603      	mov	r3, r0
 801b934:	2b00      	cmp	r3, #0
 801b936:	d002      	beq.n	801b93e <f_open+0x35a>
 801b938:	2301      	movs	r3, #1
 801b93a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b93e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b942:	2b00      	cmp	r3, #0
 801b944:	d002      	beq.n	801b94c <f_open+0x368>
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	2200      	movs	r2, #0
 801b94a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b94c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b950:	4618      	mov	r0, r3
 801b952:	3768      	adds	r7, #104	@ 0x68
 801b954:	46bd      	mov	sp, r7
 801b956:	bd80      	pop	{r7, pc}

0801b958 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b08c      	sub	sp, #48	@ 0x30
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	60f8      	str	r0, [r7, #12]
 801b960:	60b9      	str	r1, [r7, #8]
 801b962:	607a      	str	r2, [r7, #4]
 801b964:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b96a:	683b      	ldr	r3, [r7, #0]
 801b96c:	2200      	movs	r2, #0
 801b96e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	f107 0210 	add.w	r2, r7, #16
 801b976:	4611      	mov	r1, r2
 801b978:	4618      	mov	r0, r3
 801b97a:	f7ff fdb7 	bl	801b4ec <validate>
 801b97e:	4603      	mov	r3, r0
 801b980:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d107      	bne.n	801b99c <f_write+0x44>
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	7d5b      	ldrb	r3, [r3, #21]
 801b990:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d002      	beq.n	801b9a2 <f_write+0x4a>
 801b99c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b9a0:	e14b      	b.n	801bc3a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	7d1b      	ldrb	r3, [r3, #20]
 801b9a6:	f003 0302 	and.w	r3, r3, #2
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d101      	bne.n	801b9b2 <f_write+0x5a>
 801b9ae:	2307      	movs	r3, #7
 801b9b0:	e143      	b.n	801bc3a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	699a      	ldr	r2, [r3, #24]
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	441a      	add	r2, r3
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	699b      	ldr	r3, [r3, #24]
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	f080 812d 	bcs.w	801bc1e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	699b      	ldr	r3, [r3, #24]
 801b9c8:	43db      	mvns	r3, r3
 801b9ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b9cc:	e127      	b.n	801bc1e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	699b      	ldr	r3, [r3, #24]
 801b9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	f040 80e3 	bne.w	801bba2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	699b      	ldr	r3, [r3, #24]
 801b9e0:	0a5b      	lsrs	r3, r3, #9
 801b9e2:	693a      	ldr	r2, [r7, #16]
 801b9e4:	8952      	ldrh	r2, [r2, #10]
 801b9e6:	3a01      	subs	r2, #1
 801b9e8:	4013      	ands	r3, r2
 801b9ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b9ec:	69bb      	ldr	r3, [r7, #24]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d143      	bne.n	801ba7a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	699b      	ldr	r3, [r3, #24]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d10c      	bne.n	801ba14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	689b      	ldr	r3, [r3, #8]
 801b9fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d11a      	bne.n	801ba3c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	2100      	movs	r1, #0
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	f7fe f9a9 	bl	8019d62 <create_chain>
 801ba10:	62b8      	str	r0, [r7, #40]	@ 0x28
 801ba12:	e013      	b.n	801ba3c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d007      	beq.n	801ba2c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	699b      	ldr	r3, [r3, #24]
 801ba20:	4619      	mov	r1, r3
 801ba22:	68f8      	ldr	r0, [r7, #12]
 801ba24:	f7fe fa35 	bl	8019e92 <clmt_clust>
 801ba28:	62b8      	str	r0, [r7, #40]	@ 0x28
 801ba2a:	e007      	b.n	801ba3c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801ba2c:	68fa      	ldr	r2, [r7, #12]
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	69db      	ldr	r3, [r3, #28]
 801ba32:	4619      	mov	r1, r3
 801ba34:	4610      	mov	r0, r2
 801ba36:	f7fe f994 	bl	8019d62 <create_chain>
 801ba3a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ba3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	f000 80f2 	beq.w	801bc28 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba46:	2b01      	cmp	r3, #1
 801ba48:	d104      	bne.n	801ba54 <f_write+0xfc>
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	2202      	movs	r2, #2
 801ba4e:	755a      	strb	r2, [r3, #21]
 801ba50:	2302      	movs	r3, #2
 801ba52:	e0f2      	b.n	801bc3a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba5a:	d104      	bne.n	801ba66 <f_write+0x10e>
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	2201      	movs	r2, #1
 801ba60:	755a      	strb	r2, [r3, #21]
 801ba62:	2301      	movs	r3, #1
 801ba64:	e0e9      	b.n	801bc3a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	689b      	ldr	r3, [r3, #8]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d102      	bne.n	801ba7a <f_write+0x122>
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	7d1b      	ldrb	r3, [r3, #20]
 801ba7e:	b25b      	sxtb	r3, r3
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	da18      	bge.n	801bab6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba84:	693b      	ldr	r3, [r7, #16]
 801ba86:	7858      	ldrb	r0, [r3, #1]
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	6a1a      	ldr	r2, [r3, #32]
 801ba92:	2301      	movs	r3, #1
 801ba94:	f7fd fbc6 	bl	8019224 <disk_write>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d004      	beq.n	801baa8 <f_write+0x150>
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	2201      	movs	r2, #1
 801baa2:	755a      	strb	r2, [r3, #21]
 801baa4:	2301      	movs	r3, #1
 801baa6:	e0c8      	b.n	801bc3a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	7d1b      	ldrb	r3, [r3, #20]
 801baac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bab0:	b2da      	uxtb	r2, r3
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801bab6:	693a      	ldr	r2, [r7, #16]
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	69db      	ldr	r3, [r3, #28]
 801babc:	4619      	mov	r1, r3
 801babe:	4610      	mov	r0, r2
 801bac0:	f7fd ff3a 	bl	8019938 <clust2sect>
 801bac4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d104      	bne.n	801bad6 <f_write+0x17e>
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2202      	movs	r2, #2
 801bad0:	755a      	strb	r2, [r3, #21]
 801bad2:	2302      	movs	r3, #2
 801bad4:	e0b1      	b.n	801bc3a <f_write+0x2e2>
			sect += csect;
 801bad6:	697a      	ldr	r2, [r7, #20]
 801bad8:	69bb      	ldr	r3, [r7, #24]
 801bada:	4413      	add	r3, r2
 801badc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	0a5b      	lsrs	r3, r3, #9
 801bae2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801bae4:	6a3b      	ldr	r3, [r7, #32]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d03c      	beq.n	801bb64 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801baea:	69ba      	ldr	r2, [r7, #24]
 801baec:	6a3b      	ldr	r3, [r7, #32]
 801baee:	4413      	add	r3, r2
 801baf0:	693a      	ldr	r2, [r7, #16]
 801baf2:	8952      	ldrh	r2, [r2, #10]
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d905      	bls.n	801bb04 <f_write+0x1ac>
					cc = fs->csize - csect;
 801baf8:	693b      	ldr	r3, [r7, #16]
 801bafa:	895b      	ldrh	r3, [r3, #10]
 801bafc:	461a      	mov	r2, r3
 801bafe:	69bb      	ldr	r3, [r7, #24]
 801bb00:	1ad3      	subs	r3, r2, r3
 801bb02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801bb04:	693b      	ldr	r3, [r7, #16]
 801bb06:	7858      	ldrb	r0, [r3, #1]
 801bb08:	6a3b      	ldr	r3, [r7, #32]
 801bb0a:	697a      	ldr	r2, [r7, #20]
 801bb0c:	69f9      	ldr	r1, [r7, #28]
 801bb0e:	f7fd fb89 	bl	8019224 <disk_write>
 801bb12:	4603      	mov	r3, r0
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d004      	beq.n	801bb22 <f_write+0x1ca>
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	2201      	movs	r2, #1
 801bb1c:	755a      	strb	r2, [r3, #21]
 801bb1e:	2301      	movs	r3, #1
 801bb20:	e08b      	b.n	801bc3a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	6a1a      	ldr	r2, [r3, #32]
 801bb26:	697b      	ldr	r3, [r7, #20]
 801bb28:	1ad3      	subs	r3, r2, r3
 801bb2a:	6a3a      	ldr	r2, [r7, #32]
 801bb2c:	429a      	cmp	r2, r3
 801bb2e:	d915      	bls.n	801bb5c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	6a1a      	ldr	r2, [r3, #32]
 801bb3a:	697b      	ldr	r3, [r7, #20]
 801bb3c:	1ad3      	subs	r3, r2, r3
 801bb3e:	025b      	lsls	r3, r3, #9
 801bb40:	69fa      	ldr	r2, [r7, #28]
 801bb42:	4413      	add	r3, r2
 801bb44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bb48:	4619      	mov	r1, r3
 801bb4a:	f7fd fc2b 	bl	80193a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	7d1b      	ldrb	r3, [r3, #20]
 801bb52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb56:	b2da      	uxtb	r2, r3
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801bb5c:	6a3b      	ldr	r3, [r7, #32]
 801bb5e:	025b      	lsls	r3, r3, #9
 801bb60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801bb62:	e03f      	b.n	801bbe4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	6a1b      	ldr	r3, [r3, #32]
 801bb68:	697a      	ldr	r2, [r7, #20]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d016      	beq.n	801bb9c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	699a      	ldr	r2, [r3, #24]
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb76:	429a      	cmp	r2, r3
 801bb78:	d210      	bcs.n	801bb9c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801bb7a:	693b      	ldr	r3, [r7, #16]
 801bb7c:	7858      	ldrb	r0, [r3, #1]
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bb84:	2301      	movs	r3, #1
 801bb86:	697a      	ldr	r2, [r7, #20]
 801bb88:	f7fd fb2c 	bl	80191e4 <disk_read>
 801bb8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d004      	beq.n	801bb9c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	2201      	movs	r2, #1
 801bb96:	755a      	strb	r2, [r3, #21]
 801bb98:	2301      	movs	r3, #1
 801bb9a:	e04e      	b.n	801bc3a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	697a      	ldr	r2, [r7, #20]
 801bba0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	699b      	ldr	r3, [r3, #24]
 801bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbaa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bbae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bbb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	429a      	cmp	r2, r3
 801bbb6:	d901      	bls.n	801bbbc <f_write+0x264>
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	699b      	ldr	r3, [r3, #24]
 801bbc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbca:	4413      	add	r3, r2
 801bbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbce:	69f9      	ldr	r1, [r7, #28]
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	f7fd fbe7 	bl	80193a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	7d1b      	ldrb	r3, [r3, #20]
 801bbda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bbde:	b2da      	uxtb	r2, r3
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bbe4:	69fa      	ldr	r2, [r7, #28]
 801bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe8:	4413      	add	r3, r2
 801bbea:	61fb      	str	r3, [r7, #28]
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	699a      	ldr	r2, [r3, #24]
 801bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf2:	441a      	add	r2, r3
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	619a      	str	r2, [r3, #24]
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	68da      	ldr	r2, [r3, #12]
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	699b      	ldr	r3, [r3, #24]
 801bc00:	429a      	cmp	r2, r3
 801bc02:	bf38      	it	cc
 801bc04:	461a      	movcc	r2, r3
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	60da      	str	r2, [r3, #12]
 801bc0a:	683b      	ldr	r3, [r7, #0]
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc10:	441a      	add	r2, r3
 801bc12:	683b      	ldr	r3, [r7, #0]
 801bc14:	601a      	str	r2, [r3, #0]
 801bc16:	687a      	ldr	r2, [r7, #4]
 801bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc1a:	1ad3      	subs	r3, r2, r3
 801bc1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f47f aed4 	bne.w	801b9ce <f_write+0x76>
 801bc26:	e000      	b.n	801bc2a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bc28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	7d1b      	ldrb	r3, [r3, #20]
 801bc2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc32:	b2da      	uxtb	r2, r3
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bc38:	2300      	movs	r3, #0
}
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	3730      	adds	r7, #48	@ 0x30
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}

0801bc42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bc42:	b580      	push	{r7, lr}
 801bc44:	b086      	sub	sp, #24
 801bc46:	af00      	add	r7, sp, #0
 801bc48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f107 0208 	add.w	r2, r7, #8
 801bc50:	4611      	mov	r1, r2
 801bc52:	4618      	mov	r0, r3
 801bc54:	f7ff fc4a 	bl	801b4ec <validate>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc5c:	7dfb      	ldrb	r3, [r7, #23]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d168      	bne.n	801bd34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	7d1b      	ldrb	r3, [r3, #20]
 801bc66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d062      	beq.n	801bd34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	7d1b      	ldrb	r3, [r3, #20]
 801bc72:	b25b      	sxtb	r3, r3
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	da15      	bge.n	801bca4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bc78:	68bb      	ldr	r3, [r7, #8]
 801bc7a:	7858      	ldrb	r0, [r3, #1]
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	6a1a      	ldr	r2, [r3, #32]
 801bc86:	2301      	movs	r3, #1
 801bc88:	f7fd facc 	bl	8019224 <disk_write>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d001      	beq.n	801bc96 <f_sync+0x54>
 801bc92:	2301      	movs	r3, #1
 801bc94:	e04f      	b.n	801bd36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	7d1b      	ldrb	r3, [r3, #20]
 801bc9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bc9e:	b2da      	uxtb	r2, r3
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bca4:	f7f7 fe5a 	bl	801395c <get_fattime>
 801bca8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bcaa:	68ba      	ldr	r2, [r7, #8]
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcb0:	4619      	mov	r1, r3
 801bcb2:	4610      	mov	r0, r2
 801bcb4:	f7fd fda4 	bl	8019800 <move_window>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bcbc:	7dfb      	ldrb	r3, [r7, #23]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d138      	bne.n	801bd34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bcc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	330b      	adds	r3, #11
 801bccc:	781a      	ldrb	r2, [r3, #0]
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	330b      	adds	r3, #11
 801bcd2:	f042 0220 	orr.w	r2, r2, #32
 801bcd6:	b2d2      	uxtb	r2, r2
 801bcd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	6818      	ldr	r0, [r3, #0]
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	689b      	ldr	r3, [r3, #8]
 801bce2:	461a      	mov	r2, r3
 801bce4:	68f9      	ldr	r1, [r7, #12]
 801bce6:	f7fe faae 	bl	801a246 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	f103 021c 	add.w	r2, r3, #28
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	68db      	ldr	r3, [r3, #12]
 801bcf4:	4619      	mov	r1, r3
 801bcf6:	4610      	mov	r0, r2
 801bcf8:	f7fd fb28 	bl	801934c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	3316      	adds	r3, #22
 801bd00:	6939      	ldr	r1, [r7, #16]
 801bd02:	4618      	mov	r0, r3
 801bd04:	f7fd fb22 	bl	801934c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	3312      	adds	r3, #18
 801bd0c:	2100      	movs	r1, #0
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f7fd fb01 	bl	8019316 <st_word>
					fs->wflag = 1;
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	2201      	movs	r2, #1
 801bd18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f7fd fd9d 	bl	801985c <sync_fs>
 801bd22:	4603      	mov	r3, r0
 801bd24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	7d1b      	ldrb	r3, [r3, #20]
 801bd2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd2e:	b2da      	uxtb	r2, r3
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bd34:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3718      	adds	r7, #24
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bd80      	pop	{r7, pc}

0801bd3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bd3e:	b580      	push	{r7, lr}
 801bd40:	b084      	sub	sp, #16
 801bd42:	af00      	add	r7, sp, #0
 801bd44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bd46:	6878      	ldr	r0, [r7, #4]
 801bd48:	f7ff ff7b 	bl	801bc42 <f_sync>
 801bd4c:	4603      	mov	r3, r0
 801bd4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bd50:	7bfb      	ldrb	r3, [r7, #15]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d118      	bne.n	801bd88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	f107 0208 	add.w	r2, r7, #8
 801bd5c:	4611      	mov	r1, r2
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f7ff fbc4 	bl	801b4ec <validate>
 801bd64:	4603      	mov	r3, r0
 801bd66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bd68:	7bfb      	ldrb	r3, [r7, #15]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d10c      	bne.n	801bd88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	691b      	ldr	r3, [r3, #16]
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7fd fca0 	bl	80196b8 <dec_lock>
 801bd78:	4603      	mov	r3, r0
 801bd7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bd7c:	7bfb      	ldrb	r3, [r7, #15]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d102      	bne.n	801bd88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	2200      	movs	r2, #0
 801bd86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bd88:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	3710      	adds	r7, #16
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	bd80      	pop	{r7, pc}

0801bd92 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bd92:	b580      	push	{r7, lr}
 801bd94:	b090      	sub	sp, #64	@ 0x40
 801bd96:	af00      	add	r7, sp, #0
 801bd98:	6078      	str	r0, [r7, #4]
 801bd9a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bd9c:	f107 0108 	add.w	r1, r7, #8
 801bda0:	1d3b      	adds	r3, r7, #4
 801bda2:	2200      	movs	r2, #0
 801bda4:	4618      	mov	r0, r3
 801bda6:	f7ff f951 	bl	801b04c <find_volume>
 801bdaa:	4603      	mov	r3, r0
 801bdac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bdb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d11f      	bne.n	801bdf8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bdb8:	687a      	ldr	r2, [r7, #4]
 801bdba:	f107 0308 	add.w	r3, r7, #8
 801bdbe:	4611      	mov	r1, r2
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	f7ff f837 	bl	801ae34 <follow_path>
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bdcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d111      	bne.n	801bdf8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bdd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bdd8:	b25b      	sxtb	r3, r3
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	da03      	bge.n	801bde6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bdde:	2306      	movs	r3, #6
 801bde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bde4:	e008      	b.n	801bdf8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bde6:	683b      	ldr	r3, [r7, #0]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d005      	beq.n	801bdf8 <f_stat+0x66>
 801bdec:	f107 0308 	add.w	r3, r7, #8
 801bdf0:	6839      	ldr	r1, [r7, #0]
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f7fe fd88 	bl	801a908 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bdf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	3740      	adds	r7, #64	@ 0x40
 801be00:	46bd      	mov	sp, r7
 801be02:	bd80      	pop	{r7, pc}

0801be04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801be04:	b480      	push	{r7}
 801be06:	b087      	sub	sp, #28
 801be08:	af00      	add	r7, sp, #0
 801be0a:	60f8      	str	r0, [r7, #12]
 801be0c:	60b9      	str	r1, [r7, #8]
 801be0e:	4613      	mov	r3, r2
 801be10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801be12:	2301      	movs	r3, #1
 801be14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801be16:	2300      	movs	r3, #0
 801be18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801be1a:	4b1f      	ldr	r3, [pc, #124]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be1c:	7a5b      	ldrb	r3, [r3, #9]
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	2b00      	cmp	r3, #0
 801be22:	d131      	bne.n	801be88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801be24:	4b1c      	ldr	r3, [pc, #112]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be26:	7a5b      	ldrb	r3, [r3, #9]
 801be28:	b2db      	uxtb	r3, r3
 801be2a:	461a      	mov	r2, r3
 801be2c:	4b1a      	ldr	r3, [pc, #104]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be2e:	2100      	movs	r1, #0
 801be30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801be32:	4b19      	ldr	r3, [pc, #100]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be34:	7a5b      	ldrb	r3, [r3, #9]
 801be36:	b2db      	uxtb	r3, r3
 801be38:	4a17      	ldr	r2, [pc, #92]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	4413      	add	r3, r2
 801be3e:	68fa      	ldr	r2, [r7, #12]
 801be40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801be42:	4b15      	ldr	r3, [pc, #84]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be44:	7a5b      	ldrb	r3, [r3, #9]
 801be46:	b2db      	uxtb	r3, r3
 801be48:	461a      	mov	r2, r3
 801be4a:	4b13      	ldr	r3, [pc, #76]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be4c:	4413      	add	r3, r2
 801be4e:	79fa      	ldrb	r2, [r7, #7]
 801be50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801be52:	4b11      	ldr	r3, [pc, #68]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be54:	7a5b      	ldrb	r3, [r3, #9]
 801be56:	b2db      	uxtb	r3, r3
 801be58:	1c5a      	adds	r2, r3, #1
 801be5a:	b2d1      	uxtb	r1, r2
 801be5c:	4a0e      	ldr	r2, [pc, #56]	@ (801be98 <FATFS_LinkDriverEx+0x94>)
 801be5e:	7251      	strb	r1, [r2, #9]
 801be60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801be62:	7dbb      	ldrb	r3, [r7, #22]
 801be64:	3330      	adds	r3, #48	@ 0x30
 801be66:	b2da      	uxtb	r2, r3
 801be68:	68bb      	ldr	r3, [r7, #8]
 801be6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801be6c:	68bb      	ldr	r3, [r7, #8]
 801be6e:	3301      	adds	r3, #1
 801be70:	223a      	movs	r2, #58	@ 0x3a
 801be72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801be74:	68bb      	ldr	r3, [r7, #8]
 801be76:	3302      	adds	r3, #2
 801be78:	222f      	movs	r2, #47	@ 0x2f
 801be7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801be7c:	68bb      	ldr	r3, [r7, #8]
 801be7e:	3303      	adds	r3, #3
 801be80:	2200      	movs	r2, #0
 801be82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801be84:	2300      	movs	r3, #0
 801be86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801be88:	7dfb      	ldrb	r3, [r7, #23]
}
 801be8a:	4618      	mov	r0, r3
 801be8c:	371c      	adds	r7, #28
 801be8e:	46bd      	mov	sp, r7
 801be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be94:	4770      	bx	lr
 801be96:	bf00      	nop
 801be98:	20001d90 	.word	0x20001d90

0801be9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b082      	sub	sp, #8
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801bea6:	2200      	movs	r2, #0
 801bea8:	6839      	ldr	r1, [r7, #0]
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	f7ff ffaa 	bl	801be04 <FATFS_LinkDriverEx>
 801beb0:	4603      	mov	r3, r0
}
 801beb2:	4618      	mov	r0, r3
 801beb4:	3708      	adds	r7, #8
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bd80      	pop	{r7, pc}
	...

0801bebc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801bebc:	b480      	push	{r7}
 801bebe:	b085      	sub	sp, #20
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	4603      	mov	r3, r0
 801bec4:	6039      	str	r1, [r7, #0]
 801bec6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801bec8:	88fb      	ldrh	r3, [r7, #6]
 801beca:	2b7f      	cmp	r3, #127	@ 0x7f
 801becc:	d802      	bhi.n	801bed4 <ff_convert+0x18>
		c = chr;
 801bece:	88fb      	ldrh	r3, [r7, #6]
 801bed0:	81fb      	strh	r3, [r7, #14]
 801bed2:	e025      	b.n	801bf20 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d00b      	beq.n	801bef2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801beda:	88fb      	ldrh	r3, [r7, #6]
 801bedc:	2bff      	cmp	r3, #255	@ 0xff
 801bede:	d805      	bhi.n	801beec <ff_convert+0x30>
 801bee0:	88fb      	ldrh	r3, [r7, #6]
 801bee2:	3b80      	subs	r3, #128	@ 0x80
 801bee4:	4a12      	ldr	r2, [pc, #72]	@ (801bf30 <ff_convert+0x74>)
 801bee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801beea:	e000      	b.n	801beee <ff_convert+0x32>
 801beec:	2300      	movs	r3, #0
 801beee:	81fb      	strh	r3, [r7, #14]
 801bef0:	e016      	b.n	801bf20 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801bef2:	2300      	movs	r3, #0
 801bef4:	81fb      	strh	r3, [r7, #14]
 801bef6:	e009      	b.n	801bf0c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801bef8:	89fb      	ldrh	r3, [r7, #14]
 801befa:	4a0d      	ldr	r2, [pc, #52]	@ (801bf30 <ff_convert+0x74>)
 801befc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf00:	88fa      	ldrh	r2, [r7, #6]
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d006      	beq.n	801bf14 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801bf06:	89fb      	ldrh	r3, [r7, #14]
 801bf08:	3301      	adds	r3, #1
 801bf0a:	81fb      	strh	r3, [r7, #14]
 801bf0c:	89fb      	ldrh	r3, [r7, #14]
 801bf0e:	2b7f      	cmp	r3, #127	@ 0x7f
 801bf10:	d9f2      	bls.n	801bef8 <ff_convert+0x3c>
 801bf12:	e000      	b.n	801bf16 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bf14:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801bf16:	89fb      	ldrh	r3, [r7, #14]
 801bf18:	3380      	adds	r3, #128	@ 0x80
 801bf1a:	b29b      	uxth	r3, r3
 801bf1c:	b2db      	uxtb	r3, r3
 801bf1e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801bf20:	89fb      	ldrh	r3, [r7, #14]
}
 801bf22:	4618      	mov	r0, r3
 801bf24:	3714      	adds	r7, #20
 801bf26:	46bd      	mov	sp, r7
 801bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2c:	4770      	bx	lr
 801bf2e:	bf00      	nop
 801bf30:	080251c4 	.word	0x080251c4

0801bf34 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801bf34:	b480      	push	{r7}
 801bf36:	b087      	sub	sp, #28
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bf3e:	88fb      	ldrh	r3, [r7, #6]
 801bf40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bf44:	d201      	bcs.n	801bf4a <ff_wtoupper+0x16>
 801bf46:	4b3e      	ldr	r3, [pc, #248]	@ (801c040 <ff_wtoupper+0x10c>)
 801bf48:	e000      	b.n	801bf4c <ff_wtoupper+0x18>
 801bf4a:	4b3e      	ldr	r3, [pc, #248]	@ (801c044 <ff_wtoupper+0x110>)
 801bf4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bf4e:	697b      	ldr	r3, [r7, #20]
 801bf50:	1c9a      	adds	r2, r3, #2
 801bf52:	617a      	str	r2, [r7, #20]
 801bf54:	881b      	ldrh	r3, [r3, #0]
 801bf56:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bf58:	8a7b      	ldrh	r3, [r7, #18]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d068      	beq.n	801c030 <ff_wtoupper+0xfc>
 801bf5e:	88fa      	ldrh	r2, [r7, #6]
 801bf60:	8a7b      	ldrh	r3, [r7, #18]
 801bf62:	429a      	cmp	r2, r3
 801bf64:	d364      	bcc.n	801c030 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	1c9a      	adds	r2, r3, #2
 801bf6a:	617a      	str	r2, [r7, #20]
 801bf6c:	881b      	ldrh	r3, [r3, #0]
 801bf6e:	823b      	strh	r3, [r7, #16]
 801bf70:	8a3b      	ldrh	r3, [r7, #16]
 801bf72:	0a1b      	lsrs	r3, r3, #8
 801bf74:	81fb      	strh	r3, [r7, #14]
 801bf76:	8a3b      	ldrh	r3, [r7, #16]
 801bf78:	b2db      	uxtb	r3, r3
 801bf7a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bf7c:	88fa      	ldrh	r2, [r7, #6]
 801bf7e:	8a79      	ldrh	r1, [r7, #18]
 801bf80:	8a3b      	ldrh	r3, [r7, #16]
 801bf82:	440b      	add	r3, r1
 801bf84:	429a      	cmp	r2, r3
 801bf86:	da49      	bge.n	801c01c <ff_wtoupper+0xe8>
			switch (cmd) {
 801bf88:	89fb      	ldrh	r3, [r7, #14]
 801bf8a:	2b08      	cmp	r3, #8
 801bf8c:	d84f      	bhi.n	801c02e <ff_wtoupper+0xfa>
 801bf8e:	a201      	add	r2, pc, #4	@ (adr r2, 801bf94 <ff_wtoupper+0x60>)
 801bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf94:	0801bfb9 	.word	0x0801bfb9
 801bf98:	0801bfcb 	.word	0x0801bfcb
 801bf9c:	0801bfe1 	.word	0x0801bfe1
 801bfa0:	0801bfe9 	.word	0x0801bfe9
 801bfa4:	0801bff1 	.word	0x0801bff1
 801bfa8:	0801bff9 	.word	0x0801bff9
 801bfac:	0801c001 	.word	0x0801c001
 801bfb0:	0801c009 	.word	0x0801c009
 801bfb4:	0801c011 	.word	0x0801c011
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bfb8:	88fa      	ldrh	r2, [r7, #6]
 801bfba:	8a7b      	ldrh	r3, [r7, #18]
 801bfbc:	1ad3      	subs	r3, r2, r3
 801bfbe:	005b      	lsls	r3, r3, #1
 801bfc0:	697a      	ldr	r2, [r7, #20]
 801bfc2:	4413      	add	r3, r2
 801bfc4:	881b      	ldrh	r3, [r3, #0]
 801bfc6:	80fb      	strh	r3, [r7, #6]
 801bfc8:	e027      	b.n	801c01a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bfca:	88fa      	ldrh	r2, [r7, #6]
 801bfcc:	8a7b      	ldrh	r3, [r7, #18]
 801bfce:	1ad3      	subs	r3, r2, r3
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	f003 0301 	and.w	r3, r3, #1
 801bfd6:	b29b      	uxth	r3, r3
 801bfd8:	88fa      	ldrh	r2, [r7, #6]
 801bfda:	1ad3      	subs	r3, r2, r3
 801bfdc:	80fb      	strh	r3, [r7, #6]
 801bfde:	e01c      	b.n	801c01a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bfe0:	88fb      	ldrh	r3, [r7, #6]
 801bfe2:	3b10      	subs	r3, #16
 801bfe4:	80fb      	strh	r3, [r7, #6]
 801bfe6:	e018      	b.n	801c01a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bfe8:	88fb      	ldrh	r3, [r7, #6]
 801bfea:	3b20      	subs	r3, #32
 801bfec:	80fb      	strh	r3, [r7, #6]
 801bfee:	e014      	b.n	801c01a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bff0:	88fb      	ldrh	r3, [r7, #6]
 801bff2:	3b30      	subs	r3, #48	@ 0x30
 801bff4:	80fb      	strh	r3, [r7, #6]
 801bff6:	e010      	b.n	801c01a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bff8:	88fb      	ldrh	r3, [r7, #6]
 801bffa:	3b1a      	subs	r3, #26
 801bffc:	80fb      	strh	r3, [r7, #6]
 801bffe:	e00c      	b.n	801c01a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801c000:	88fb      	ldrh	r3, [r7, #6]
 801c002:	3308      	adds	r3, #8
 801c004:	80fb      	strh	r3, [r7, #6]
 801c006:	e008      	b.n	801c01a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	3b50      	subs	r3, #80	@ 0x50
 801c00c:	80fb      	strh	r3, [r7, #6]
 801c00e:	e004      	b.n	801c01a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801c010:	88fb      	ldrh	r3, [r7, #6]
 801c012:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801c016:	80fb      	strh	r3, [r7, #6]
 801c018:	bf00      	nop
			}
			break;
 801c01a:	e008      	b.n	801c02e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801c01c:	89fb      	ldrh	r3, [r7, #14]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d195      	bne.n	801bf4e <ff_wtoupper+0x1a>
 801c022:	8a3b      	ldrh	r3, [r7, #16]
 801c024:	005b      	lsls	r3, r3, #1
 801c026:	697a      	ldr	r2, [r7, #20]
 801c028:	4413      	add	r3, r2
 801c02a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801c02c:	e78f      	b.n	801bf4e <ff_wtoupper+0x1a>
			break;
 801c02e:	bf00      	nop
	}

	return chr;
 801c030:	88fb      	ldrh	r3, [r7, #6]
}
 801c032:	4618      	mov	r0, r3
 801c034:	371c      	adds	r7, #28
 801c036:	46bd      	mov	sp, r7
 801c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03c:	4770      	bx	lr
 801c03e:	bf00      	nop
 801c040:	080252c4 	.word	0x080252c4
 801c044:	080254b8 	.word	0x080254b8

0801c048 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801c048:	b580      	push	{r7, lr}
 801c04a:	b082      	sub	sp, #8
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801c050:	2201      	movs	r2, #1
 801c052:	6879      	ldr	r1, [r7, #4]
 801c054:	480e      	ldr	r0, [pc, #56]	@ (801c090 <Mount_SD+0x48>)
 801c056:	f7ff fa7f 	bl	801b558 <f_mount>
 801c05a:	4603      	mov	r3, r0
 801c05c:	461a      	mov	r2, r3
 801c05e:	4b0d      	ldr	r3, [pc, #52]	@ (801c094 <Mount_SD+0x4c>)
 801c060:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c062:	4b0c      	ldr	r3, [pc, #48]	@ (801c094 <Mount_SD+0x4c>)
 801c064:	781b      	ldrb	r3, [r3, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d006      	beq.n	801c078 <Mount_SD+0x30>
		if (sdioPrints)
 801c06a:	2300      	movs	r3, #0
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d009      	beq.n	801c084 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801c070:	4809      	ldr	r0, [pc, #36]	@ (801c098 <Mount_SD+0x50>)
 801c072:	f002 fd61 	bl	801eb38 <puts>
 801c076:	e005      	b.n	801c084 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801c078:	2300      	movs	r3, #0
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d002      	beq.n	801c084 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801c07e:	4807      	ldr	r0, [pc, #28]	@ (801c09c <Mount_SD+0x54>)
 801c080:	f002 fd5a 	bl	801eb38 <puts>

	return fresult;
 801c084:	4b03      	ldr	r3, [pc, #12]	@ (801c094 <Mount_SD+0x4c>)
 801c086:	781b      	ldrb	r3, [r3, #0]
}
 801c088:	4618      	mov	r0, r3
 801c08a:	3708      	adds	r7, #8
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bd80      	pop	{r7, pc}
 801c090:	20001d9c 	.word	0x20001d9c
 801c094:	20002318 	.word	0x20002318
 801c098:	08024850 	.word	0x08024850
 801c09c:	08024870 	.word	0x08024870

0801c0a0 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b082      	sub	sp, #8
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801c0a8:	2201      	movs	r2, #1
 801c0aa:	6879      	ldr	r1, [r7, #4]
 801c0ac:	2000      	movs	r0, #0
 801c0ae:	f7ff fa53 	bl	801b558 <f_mount>
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	461a      	mov	r2, r3
 801c0b6:	4b0b      	ldr	r3, [pc, #44]	@ (801c0e4 <Unmount_SD+0x44>)
 801c0b8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c0ba:	4b0a      	ldr	r3, [pc, #40]	@ (801c0e4 <Unmount_SD+0x44>)
 801c0bc:	781b      	ldrb	r3, [r3, #0]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d106      	bne.n	801c0d0 <Unmount_SD+0x30>
		if (sdioPrints)
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d009      	beq.n	801c0dc <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801c0c8:	4807      	ldr	r0, [pc, #28]	@ (801c0e8 <Unmount_SD+0x48>)
 801c0ca:	f002 fd35 	bl	801eb38 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c0ce:	e005      	b.n	801c0dc <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d002      	beq.n	801c0dc <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c0d6:	4805      	ldr	r0, [pc, #20]	@ (801c0ec <Unmount_SD+0x4c>)
 801c0d8:	f002 fd2e 	bl	801eb38 <puts>
}
 801c0dc:	bf00      	nop
 801c0de:	3708      	adds	r7, #8
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}
 801c0e4:	20002318 	.word	0x20002318
 801c0e8:	08024890 	.word	0x08024890
 801c0ec:	080248b4 	.word	0x080248b4

0801c0f0 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b0a8      	sub	sp, #160	@ 0xa0
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c0f8:	4941      	ldr	r1, [pc, #260]	@ (801c200 <Create_File+0x110>)
 801c0fa:	6878      	ldr	r0, [r7, #4]
 801c0fc:	f7ff fe49 	bl	801bd92 <f_stat>
 801c100:	4603      	mov	r3, r0
 801c102:	461a      	mov	r2, r3
 801c104:	4b3f      	ldr	r3, [pc, #252]	@ (801c204 <Create_File+0x114>)
 801c106:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c108:	4b3e      	ldr	r3, [pc, #248]	@ (801c204 <Create_File+0x114>)
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d114      	bne.n	801c13a <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c110:	4b3d      	ldr	r3, [pc, #244]	@ (801c208 <Create_File+0x118>)
 801c112:	2201      	movs	r2, #1
 801c114:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c116:	f107 0308 	add.w	r3, r7, #8
 801c11a:	687a      	ldr	r2, [r7, #4]
 801c11c:	493b      	ldr	r1, [pc, #236]	@ (801c20c <Create_File+0x11c>)
 801c11e:	4618      	mov	r0, r3
 801c120:	f002 fd12 	bl	801eb48 <siprintf>
				name);
		if (sdioPrints)
 801c124:	2300      	movs	r3, #0
 801c126:	2b00      	cmp	r3, #0
 801c128:	d004      	beq.n	801c134 <Create_File+0x44>
			printf(buf);
 801c12a:	f107 0308 	add.w	r3, r7, #8
 801c12e:	4618      	mov	r0, r3
 801c130:	f002 fc9a 	bl	801ea68 <iprintf>

		return fresult;
 801c134:	4b33      	ldr	r3, [pc, #204]	@ (801c204 <Create_File+0x114>)
 801c136:	781b      	ldrb	r3, [r3, #0]
 801c138:	e05d      	b.n	801c1f6 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c13a:	220b      	movs	r2, #11
 801c13c:	6879      	ldr	r1, [r7, #4]
 801c13e:	4834      	ldr	r0, [pc, #208]	@ (801c210 <Create_File+0x120>)
 801c140:	f7ff fa50 	bl	801b5e4 <f_open>
 801c144:	4603      	mov	r3, r0
 801c146:	461a      	mov	r2, r3
 801c148:	4b2e      	ldr	r3, [pc, #184]	@ (801c204 <Create_File+0x114>)
 801c14a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c14c:	4b2d      	ldr	r3, [pc, #180]	@ (801c204 <Create_File+0x114>)
 801c14e:	781b      	ldrb	r3, [r3, #0]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d013      	beq.n	801c17c <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c154:	4b2b      	ldr	r3, [pc, #172]	@ (801c204 <Create_File+0x114>)
 801c156:	781b      	ldrb	r3, [r3, #0]
 801c158:	461a      	mov	r2, r3
 801c15a:	f107 0008 	add.w	r0, r7, #8
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	492c      	ldr	r1, [pc, #176]	@ (801c214 <Create_File+0x124>)
 801c162:	f002 fcf1 	bl	801eb48 <siprintf>
					name);
			if (sdioPrints)
 801c166:	2300      	movs	r3, #0
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d004      	beq.n	801c176 <Create_File+0x86>
				printf(buf);
 801c16c:	f107 0308 	add.w	r3, r7, #8
 801c170:	4618      	mov	r0, r3
 801c172:	f002 fc79 	bl	801ea68 <iprintf>

			return fresult;
 801c176:	4b23      	ldr	r3, [pc, #140]	@ (801c204 <Create_File+0x114>)
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	e03c      	b.n	801c1f6 <Create_File+0x106>
		} else {

			sprintf(buf,
 801c17c:	f107 0308 	add.w	r3, r7, #8
 801c180:	687a      	ldr	r2, [r7, #4]
 801c182:	4925      	ldr	r1, [pc, #148]	@ (801c218 <Create_File+0x128>)
 801c184:	4618      	mov	r0, r3
 801c186:	f002 fcdf 	bl	801eb48 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c18a:	2300      	movs	r3, #0
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d004      	beq.n	801c19a <Create_File+0xaa>
				printf(buf);
 801c190:	f107 0308 	add.w	r3, r7, #8
 801c194:	4618      	mov	r0, r3
 801c196:	f002 fc67 	bl	801ea68 <iprintf>

		}

		fresult = f_close(&fil);
 801c19a:	481d      	ldr	r0, [pc, #116]	@ (801c210 <Create_File+0x120>)
 801c19c:	f7ff fdcf 	bl	801bd3e <f_close>
 801c1a0:	4603      	mov	r3, r0
 801c1a2:	461a      	mov	r2, r3
 801c1a4:	4b17      	ldr	r3, [pc, #92]	@ (801c204 <Create_File+0x114>)
 801c1a6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c1a8:	4b16      	ldr	r3, [pc, #88]	@ (801c204 <Create_File+0x114>)
 801c1aa:	781b      	ldrb	r3, [r3, #0]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d011      	beq.n	801c1d4 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c1b0:	4b14      	ldr	r3, [pc, #80]	@ (801c204 <Create_File+0x114>)
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	461a      	mov	r2, r3
 801c1b6:	f107 0008 	add.w	r0, r7, #8
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	4917      	ldr	r1, [pc, #92]	@ (801c21c <Create_File+0x12c>)
 801c1be:	f002 fcc3 	bl	801eb48 <siprintf>
			if (sdioPrints)
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d014      	beq.n	801c1f2 <Create_File+0x102>
				printf(buf);
 801c1c8:	f107 0308 	add.w	r3, r7, #8
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	f002 fc4b 	bl	801ea68 <iprintf>
 801c1d2:	e00e      	b.n	801c1f2 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c1d4:	f107 0308 	add.w	r3, r7, #8
 801c1d8:	687a      	ldr	r2, [r7, #4]
 801c1da:	4911      	ldr	r1, [pc, #68]	@ (801c220 <Create_File+0x130>)
 801c1dc:	4618      	mov	r0, r3
 801c1de:	f002 fcb3 	bl	801eb48 <siprintf>
			if (sdioPrints)
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d004      	beq.n	801c1f2 <Create_File+0x102>
				printf(buf);
 801c1e8:	f107 0308 	add.w	r3, r7, #8
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f002 fc3b 	bl	801ea68 <iprintf>

		}
	}
	return fresult;
 801c1f2:	4b04      	ldr	r3, [pc, #16]	@ (801c204 <Create_File+0x114>)
 801c1f4:	781b      	ldrb	r3, [r3, #0]
}
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	37a0      	adds	r7, #160	@ 0xa0
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	20002200 	.word	0x20002200
 801c204:	20002318 	.word	0x20002318
 801c208:	20002321 	.word	0x20002321
 801c20c:	08024a78 	.word	0x08024a78
 801c210:	20001fd0 	.word	0x20001fd0
 801c214:	08024aac 	.word	0x08024aac
 801c218:	08024ad4 	.word	0x08024ad4
 801c21c:	08024b14 	.word	0x08024b14
 801c220:	08024a58 	.word	0x08024a58

0801c224 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c224:	b580      	push	{r7, lr}
 801c226:	b0a8      	sub	sp, #160	@ 0xa0
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c22e:	4951      	ldr	r1, [pc, #324]	@ (801c374 <Update_File+0x150>)
 801c230:	6878      	ldr	r0, [r7, #4]
 801c232:	f7ff fdae 	bl	801bd92 <f_stat>
 801c236:	4603      	mov	r3, r0
 801c238:	461a      	mov	r2, r3
 801c23a:	4b4f      	ldr	r3, [pc, #316]	@ (801c378 <Update_File+0x154>)
 801c23c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c23e:	4b4e      	ldr	r3, [pc, #312]	@ (801c378 <Update_File+0x154>)
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d011      	beq.n	801c26a <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c246:	f107 0308 	add.w	r3, r7, #8
 801c24a:	687a      	ldr	r2, [r7, #4]
 801c24c:	494b      	ldr	r1, [pc, #300]	@ (801c37c <Update_File+0x158>)
 801c24e:	4618      	mov	r0, r3
 801c250:	f002 fc7a 	bl	801eb48 <siprintf>
		if (sdioPrints)
 801c254:	2300      	movs	r3, #0
 801c256:	2b00      	cmp	r3, #0
 801c258:	d004      	beq.n	801c264 <Update_File+0x40>
			printf(buf);
 801c25a:	f107 0308 	add.w	r3, r7, #8
 801c25e:	4618      	mov	r0, r3
 801c260:	f002 fc02 	bl	801ea68 <iprintf>

		return fresult;
 801c264:	4b44      	ldr	r3, [pc, #272]	@ (801c378 <Update_File+0x154>)
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	e080      	b.n	801c36c <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c26a:	2232      	movs	r2, #50	@ 0x32
 801c26c:	6879      	ldr	r1, [r7, #4]
 801c26e:	4844      	ldr	r0, [pc, #272]	@ (801c380 <Update_File+0x15c>)
 801c270:	f7ff f9b8 	bl	801b5e4 <f_open>
 801c274:	4603      	mov	r3, r0
 801c276:	461a      	mov	r2, r3
 801c278:	4b3f      	ldr	r3, [pc, #252]	@ (801c378 <Update_File+0x154>)
 801c27a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c27c:	4b3e      	ldr	r3, [pc, #248]	@ (801c378 <Update_File+0x154>)
 801c27e:	781b      	ldrb	r3, [r3, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d013      	beq.n	801c2ac <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c284:	4b3c      	ldr	r3, [pc, #240]	@ (801c378 <Update_File+0x154>)
 801c286:	781b      	ldrb	r3, [r3, #0]
 801c288:	461a      	mov	r2, r3
 801c28a:	f107 0008 	add.w	r0, r7, #8
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	493c      	ldr	r1, [pc, #240]	@ (801c384 <Update_File+0x160>)
 801c292:	f002 fc59 	bl	801eb48 <siprintf>
					name);
			if (sdioPrints)
 801c296:	2300      	movs	r3, #0
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d004      	beq.n	801c2a6 <Update_File+0x82>
				printf(buf);
 801c29c:	f107 0308 	add.w	r3, r7, #8
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	f002 fbe1 	bl	801ea68 <iprintf>

			return fresult;
 801c2a6:	4b34      	ldr	r3, [pc, #208]	@ (801c378 <Update_File+0x154>)
 801c2a8:	781b      	ldrb	r3, [r3, #0]
 801c2aa:	e05f      	b.n	801c36c <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c2ac:	6838      	ldr	r0, [r7, #0]
 801c2ae:	f7e3 fff7 	bl	80002a0 <strlen>
 801c2b2:	4602      	mov	r2, r0
 801c2b4:	4b34      	ldr	r3, [pc, #208]	@ (801c388 <Update_File+0x164>)
 801c2b6:	6839      	ldr	r1, [r7, #0]
 801c2b8:	4831      	ldr	r0, [pc, #196]	@ (801c380 <Update_File+0x15c>)
 801c2ba:	f7ff fb4d 	bl	801b958 <f_write>
 801c2be:	4603      	mov	r3, r0
 801c2c0:	461a      	mov	r2, r3
 801c2c2:	4b2d      	ldr	r3, [pc, #180]	@ (801c378 <Update_File+0x154>)
 801c2c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2c6:	4b2c      	ldr	r3, [pc, #176]	@ (801c378 <Update_File+0x154>)
 801c2c8:	781b      	ldrb	r3, [r3, #0]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d011      	beq.n	801c2f2 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c2ce:	4b2a      	ldr	r3, [pc, #168]	@ (801c378 <Update_File+0x154>)
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	461a      	mov	r2, r3
 801c2d4:	f107 0008 	add.w	r0, r7, #8
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	492c      	ldr	r1, [pc, #176]	@ (801c38c <Update_File+0x168>)
 801c2dc:	f002 fc34 	bl	801eb48 <siprintf>
					name);
			if (sdioPrints)
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d014      	beq.n	801c310 <Update_File+0xec>
				printf(buf);
 801c2e6:	f107 0308 	add.w	r3, r7, #8
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f002 fbbc 	bl	801ea68 <iprintf>
 801c2f0:	e00e      	b.n	801c310 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c2f2:	f107 0308 	add.w	r3, r7, #8
 801c2f6:	687a      	ldr	r2, [r7, #4]
 801c2f8:	4925      	ldr	r1, [pc, #148]	@ (801c390 <Update_File+0x16c>)
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	f002 fc24 	bl	801eb48 <siprintf>
			if (sdioPrints)
 801c300:	2300      	movs	r3, #0
 801c302:	2b00      	cmp	r3, #0
 801c304:	d004      	beq.n	801c310 <Update_File+0xec>
				printf(buf);
 801c306:	f107 0308 	add.w	r3, r7, #8
 801c30a:	4618      	mov	r0, r3
 801c30c:	f002 fbac 	bl	801ea68 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c310:	481b      	ldr	r0, [pc, #108]	@ (801c380 <Update_File+0x15c>)
 801c312:	f7ff fd14 	bl	801bd3e <f_close>
 801c316:	4603      	mov	r3, r0
 801c318:	461a      	mov	r2, r3
 801c31a:	4b17      	ldr	r3, [pc, #92]	@ (801c378 <Update_File+0x154>)
 801c31c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c31e:	4b16      	ldr	r3, [pc, #88]	@ (801c378 <Update_File+0x154>)
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d011      	beq.n	801c34a <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c326:	4b14      	ldr	r3, [pc, #80]	@ (801c378 <Update_File+0x154>)
 801c328:	781b      	ldrb	r3, [r3, #0]
 801c32a:	461a      	mov	r2, r3
 801c32c:	f107 0008 	add.w	r0, r7, #8
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	4918      	ldr	r1, [pc, #96]	@ (801c394 <Update_File+0x170>)
 801c334:	f002 fc08 	bl	801eb48 <siprintf>
					name);
			if (sdioPrints)
 801c338:	2300      	movs	r3, #0
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d014      	beq.n	801c368 <Update_File+0x144>
				printf(buf);
 801c33e:	f107 0308 	add.w	r3, r7, #8
 801c342:	4618      	mov	r0, r3
 801c344:	f002 fb90 	bl	801ea68 <iprintf>
 801c348:	e00e      	b.n	801c368 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c34a:	f107 0308 	add.w	r3, r7, #8
 801c34e:	687a      	ldr	r2, [r7, #4]
 801c350:	4911      	ldr	r1, [pc, #68]	@ (801c398 <Update_File+0x174>)
 801c352:	4618      	mov	r0, r3
 801c354:	f002 fbf8 	bl	801eb48 <siprintf>
			if (sdioPrints)
 801c358:	2300      	movs	r3, #0
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d004      	beq.n	801c368 <Update_File+0x144>
				printf(buf);
 801c35e:	f107 0308 	add.w	r3, r7, #8
 801c362:	4618      	mov	r0, r3
 801c364:	f002 fb80 	bl	801ea68 <iprintf>

		}
	}
	return fresult;
 801c368:	4b03      	ldr	r3, [pc, #12]	@ (801c378 <Update_File+0x154>)
 801c36a:	781b      	ldrb	r3, [r3, #0]
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	37a0      	adds	r7, #160	@ 0xa0
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}
 801c374:	20002200 	.word	0x20002200
 801c378:	20002318 	.word	0x20002318
 801c37c:	08024908 	.word	0x08024908
 801c380:	20001fd0 	.word	0x20001fd0
 801c384:	08024928 	.word	0x08024928
 801c388:	2000231c 	.word	0x2000231c
 801c38c:	08024b38 	.word	0x08024b38
 801c390:	08024b60 	.word	0x08024b60
 801c394:	08024a30 	.word	0x08024a30
 801c398:	08024a58 	.word	0x08024a58

0801c39c <check_file_exists>:
/**
 * 0 file exists
 * 1 file is not there
 */
uint8_t check_file_exists(char *name)
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b082      	sub	sp, #8
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 801c3a4:	4906      	ldr	r1, [pc, #24]	@ (801c3c0 <check_file_exists+0x24>)
 801c3a6:	6878      	ldr	r0, [r7, #4]
 801c3a8:	f7ff fcf3 	bl	801bd92 <f_stat>
 801c3ac:	4603      	mov	r3, r0
 801c3ae:	461a      	mov	r2, r3
 801c3b0:	4b04      	ldr	r3, [pc, #16]	@ (801c3c4 <check_file_exists+0x28>)
 801c3b2:	701a      	strb	r2, [r3, #0]


	return fresult;
 801c3b4:	4b03      	ldr	r3, [pc, #12]	@ (801c3c4 <check_file_exists+0x28>)
 801c3b6:	781b      	ldrb	r3, [r3, #0]

}
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3708      	adds	r7, #8
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	20002200 	.word	0x20002200
 801c3c4:	20002318 	.word	0x20002318

0801c3c8 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b088      	sub	sp, #32
 801c3cc:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c3ce:	f107 0314 	add.w	r3, r7, #20
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	4619      	mov	r1, r3
 801c3d6:	48b4      	ldr	r0, [pc, #720]	@ (801c6a8 <json_update+0x2e0>)
 801c3d8:	f7ed fbd5 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c3dc:	463b      	mov	r3, r7
 801c3de:	2200      	movs	r2, #0
 801c3e0:	4619      	mov	r1, r3
 801c3e2:	48b1      	ldr	r0, [pc, #708]	@ (801c6a8 <json_update+0x2e0>)
 801c3e4:	f7ed faed 	bl	80099c2 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c3e8:	7dba      	ldrb	r2, [r7, #22]
 801c3ea:	4bb0      	ldr	r3, [pc, #704]	@ (801c6ac <json_update+0x2e4>)
 801c3ec:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c3ee:	7d7a      	ldrb	r2, [r7, #21]
 801c3f0:	4baf      	ldr	r3, [pc, #700]	@ (801c6b0 <json_update+0x2e8>)
 801c3f2:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c3f4:	7dfa      	ldrb	r2, [r7, #23]
 801c3f6:	4baf      	ldr	r3, [pc, #700]	@ (801c6b4 <json_update+0x2ec>)
 801c3f8:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c3fa:	783a      	ldrb	r2, [r7, #0]
 801c3fc:	4bae      	ldr	r3, [pc, #696]	@ (801c6b8 <json_update+0x2f0>)
 801c3fe:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c400:	787a      	ldrb	r2, [r7, #1]
 801c402:	4bae      	ldr	r3, [pc, #696]	@ (801c6bc <json_update+0x2f4>)
 801c404:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c406:	78ba      	ldrb	r2, [r7, #2]
 801c408:	4bad      	ldr	r3, [pc, #692]	@ (801c6c0 <json_update+0x2f8>)
 801c40a:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c40c:	48ad      	ldr	r0, [pc, #692]	@ (801c6c4 <json_update+0x2fc>)
 801c40e:	f7ff fe1b 	bl	801c048 <Mount_SD>
 801c412:	4603      	mov	r3, r0
 801c414:	461a      	mov	r2, r3
 801c416:	4bac      	ldr	r3, [pc, #688]	@ (801c6c8 <json_update+0x300>)
 801c418:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c41a:	4bab      	ldr	r3, [pc, #684]	@ (801c6c8 <json_update+0x300>)
 801c41c:	781b      	ldrb	r3, [r3, #0]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	f040 8137 	bne.w	801c692 <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c424:	49a9      	ldr	r1, [pc, #676]	@ (801c6cc <json_update+0x304>)
 801c426:	48aa      	ldr	r0, [pc, #680]	@ (801c6d0 <json_update+0x308>)
 801c428:	f002 fb8e 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c42c:	49a8      	ldr	r1, [pc, #672]	@ (801c6d0 <json_update+0x308>)
 801c42e:	48a9      	ldr	r0, [pc, #676]	@ (801c6d4 <json_update+0x30c>)
 801c430:	f7ff fef8 	bl	801c224 <Update_File>
 801c434:	4603      	mov	r3, r0
 801c436:	461a      	mov	r2, r3
 801c438:	4ba3      	ldr	r3, [pc, #652]	@ (801c6c8 <json_update+0x300>)
 801c43a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c43c:	22ff      	movs	r2, #255	@ 0xff
 801c43e:	2100      	movs	r1, #0
 801c440:	48a3      	ldr	r0, [pc, #652]	@ (801c6d0 <json_update+0x308>)
 801c442:	f002 fccb 	bl	801eddc <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c446:	f7e6 f831 	bl	80024ac <ver_GetUid>
 801c44a:	4603      	mov	r3, r0
 801c44c:	461a      	mov	r2, r3
 801c44e:	49a2      	ldr	r1, [pc, #648]	@ (801c6d8 <json_update+0x310>)
 801c450:	489f      	ldr	r0, [pc, #636]	@ (801c6d0 <json_update+0x308>)
 801c452:	f002 fb79 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c456:	499e      	ldr	r1, [pc, #632]	@ (801c6d0 <json_update+0x308>)
 801c458:	489e      	ldr	r0, [pc, #632]	@ (801c6d4 <json_update+0x30c>)
 801c45a:	f7ff fee3 	bl	801c224 <Update_File>
 801c45e:	4603      	mov	r3, r0
 801c460:	461a      	mov	r2, r3
 801c462:	4b99      	ldr	r3, [pc, #612]	@ (801c6c8 <json_update+0x300>)
 801c464:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c466:	22ff      	movs	r2, #255	@ 0xff
 801c468:	2100      	movs	r1, #0
 801c46a:	4899      	ldr	r0, [pc, #612]	@ (801c6d0 <json_update+0x308>)
 801c46c:	f002 fcb6 	bl	801eddc <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c470:	4a9a      	ldr	r2, [pc, #616]	@ (801c6dc <json_update+0x314>)
 801c472:	499b      	ldr	r1, [pc, #620]	@ (801c6e0 <json_update+0x318>)
 801c474:	4896      	ldr	r0, [pc, #600]	@ (801c6d0 <json_update+0x308>)
 801c476:	f002 fb67 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c47a:	4995      	ldr	r1, [pc, #596]	@ (801c6d0 <json_update+0x308>)
 801c47c:	4895      	ldr	r0, [pc, #596]	@ (801c6d4 <json_update+0x30c>)
 801c47e:	f7ff fed1 	bl	801c224 <Update_File>
 801c482:	4603      	mov	r3, r0
 801c484:	461a      	mov	r2, r3
 801c486:	4b90      	ldr	r3, [pc, #576]	@ (801c6c8 <json_update+0x300>)
 801c488:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c48a:	22ff      	movs	r2, #255	@ 0xff
 801c48c:	2100      	movs	r1, #0
 801c48e:	4890      	ldr	r0, [pc, #576]	@ (801c6d0 <json_update+0x308>)
 801c490:	f002 fca4 	bl	801eddc <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c494:	783b      	ldrb	r3, [r7, #0]
 801c496:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c498:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c49a:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c49c:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c49e:	9300      	str	r3, [sp, #0]
 801c4a0:	460b      	mov	r3, r1
 801c4a2:	4990      	ldr	r1, [pc, #576]	@ (801c6e4 <json_update+0x31c>)
 801c4a4:	488a      	ldr	r0, [pc, #552]	@ (801c6d0 <json_update+0x308>)
 801c4a6:	f002 fb4f 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4aa:	4989      	ldr	r1, [pc, #548]	@ (801c6d0 <json_update+0x308>)
 801c4ac:	4889      	ldr	r0, [pc, #548]	@ (801c6d4 <json_update+0x30c>)
 801c4ae:	f7ff feb9 	bl	801c224 <Update_File>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	461a      	mov	r2, r3
 801c4b6:	4b84      	ldr	r3, [pc, #528]	@ (801c6c8 <json_update+0x300>)
 801c4b8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4ba:	22ff      	movs	r2, #255	@ 0xff
 801c4bc:	2100      	movs	r1, #0
 801c4be:	4884      	ldr	r0, [pc, #528]	@ (801c6d0 <json_update+0x308>)
 801c4c0:	f002 fc8c 	bl	801eddc <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c4c4:	4a88      	ldr	r2, [pc, #544]	@ (801c6e8 <json_update+0x320>)
 801c4c6:	4989      	ldr	r1, [pc, #548]	@ (801c6ec <json_update+0x324>)
 801c4c8:	4881      	ldr	r0, [pc, #516]	@ (801c6d0 <json_update+0x308>)
 801c4ca:	f002 fb3d 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4ce:	4980      	ldr	r1, [pc, #512]	@ (801c6d0 <json_update+0x308>)
 801c4d0:	4880      	ldr	r0, [pc, #512]	@ (801c6d4 <json_update+0x30c>)
 801c4d2:	f7ff fea7 	bl	801c224 <Update_File>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	461a      	mov	r2, r3
 801c4da:	4b7b      	ldr	r3, [pc, #492]	@ (801c6c8 <json_update+0x300>)
 801c4dc:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4de:	22ff      	movs	r2, #255	@ 0xff
 801c4e0:	2100      	movs	r1, #0
 801c4e2:	487b      	ldr	r0, [pc, #492]	@ (801c6d0 <json_update+0x308>)
 801c4e4:	f002 fc7a 	bl	801eddc <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c4e8:	4a81      	ldr	r2, [pc, #516]	@ (801c6f0 <json_update+0x328>)
 801c4ea:	4982      	ldr	r1, [pc, #520]	@ (801c6f4 <json_update+0x32c>)
 801c4ec:	4878      	ldr	r0, [pc, #480]	@ (801c6d0 <json_update+0x308>)
 801c4ee:	f002 fb2b 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4f2:	4977      	ldr	r1, [pc, #476]	@ (801c6d0 <json_update+0x308>)
 801c4f4:	4877      	ldr	r0, [pc, #476]	@ (801c6d4 <json_update+0x30c>)
 801c4f6:	f7ff fe95 	bl	801c224 <Update_File>
 801c4fa:	4603      	mov	r3, r0
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	4b72      	ldr	r3, [pc, #456]	@ (801c6c8 <json_update+0x300>)
 801c500:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c502:	22ff      	movs	r2, #255	@ 0xff
 801c504:	2100      	movs	r1, #0
 801c506:	4872      	ldr	r0, [pc, #456]	@ (801c6d0 <json_update+0x308>)
 801c508:	f002 fc68 	bl	801eddc <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c50c:	4a7a      	ldr	r2, [pc, #488]	@ (801c6f8 <json_update+0x330>)
 801c50e:	497b      	ldr	r1, [pc, #492]	@ (801c6fc <json_update+0x334>)
 801c510:	486f      	ldr	r0, [pc, #444]	@ (801c6d0 <json_update+0x308>)
 801c512:	f002 fb19 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c516:	496e      	ldr	r1, [pc, #440]	@ (801c6d0 <json_update+0x308>)
 801c518:	486e      	ldr	r0, [pc, #440]	@ (801c6d4 <json_update+0x30c>)
 801c51a:	f7ff fe83 	bl	801c224 <Update_File>
 801c51e:	4603      	mov	r3, r0
 801c520:	461a      	mov	r2, r3
 801c522:	4b69      	ldr	r3, [pc, #420]	@ (801c6c8 <json_update+0x300>)
 801c524:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c526:	22ff      	movs	r2, #255	@ 0xff
 801c528:	2100      	movs	r1, #0
 801c52a:	4869      	ldr	r0, [pc, #420]	@ (801c6d0 <json_update+0x308>)
 801c52c:	f002 fc56 	bl	801eddc <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c530:	4b73      	ldr	r3, [pc, #460]	@ (801c700 <json_update+0x338>)
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	4618      	mov	r0, r3
 801c536:	f7e4 f81f 	bl	8000578 <__aeabi_f2d>
 801c53a:	4602      	mov	r2, r0
 801c53c:	460b      	mov	r3, r1
 801c53e:	4971      	ldr	r1, [pc, #452]	@ (801c704 <json_update+0x33c>)
 801c540:	4863      	ldr	r0, [pc, #396]	@ (801c6d0 <json_update+0x308>)
 801c542:	f002 fb01 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c546:	4962      	ldr	r1, [pc, #392]	@ (801c6d0 <json_update+0x308>)
 801c548:	4862      	ldr	r0, [pc, #392]	@ (801c6d4 <json_update+0x30c>)
 801c54a:	f7ff fe6b 	bl	801c224 <Update_File>
 801c54e:	4603      	mov	r3, r0
 801c550:	461a      	mov	r2, r3
 801c552:	4b5d      	ldr	r3, [pc, #372]	@ (801c6c8 <json_update+0x300>)
 801c554:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c556:	22ff      	movs	r2, #255	@ 0xff
 801c558:	2100      	movs	r1, #0
 801c55a:	485d      	ldr	r0, [pc, #372]	@ (801c6d0 <json_update+0x308>)
 801c55c:	f002 fc3e 	bl	801eddc <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c560:	4b67      	ldr	r3, [pc, #412]	@ (801c700 <json_update+0x338>)
 801c562:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c564:	4618      	mov	r0, r3
 801c566:	f7e4 f807 	bl	8000578 <__aeabi_f2d>
 801c56a:	4602      	mov	r2, r0
 801c56c:	460b      	mov	r3, r1
 801c56e:	4966      	ldr	r1, [pc, #408]	@ (801c708 <json_update+0x340>)
 801c570:	4857      	ldr	r0, [pc, #348]	@ (801c6d0 <json_update+0x308>)
 801c572:	f002 fae9 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c576:	4956      	ldr	r1, [pc, #344]	@ (801c6d0 <json_update+0x308>)
 801c578:	4856      	ldr	r0, [pc, #344]	@ (801c6d4 <json_update+0x30c>)
 801c57a:	f7ff fe53 	bl	801c224 <Update_File>
 801c57e:	4603      	mov	r3, r0
 801c580:	461a      	mov	r2, r3
 801c582:	4b51      	ldr	r3, [pc, #324]	@ (801c6c8 <json_update+0x300>)
 801c584:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c586:	22ff      	movs	r2, #255	@ 0xff
 801c588:	2100      	movs	r1, #0
 801c58a:	4851      	ldr	r0, [pc, #324]	@ (801c6d0 <json_update+0x308>)
 801c58c:	f002 fc26 	bl	801eddc <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c590:	4b5b      	ldr	r3, [pc, #364]	@ (801c700 <json_update+0x338>)
 801c592:	689b      	ldr	r3, [r3, #8]
 801c594:	4618      	mov	r0, r3
 801c596:	f7e3 ffef 	bl	8000578 <__aeabi_f2d>
 801c59a:	4602      	mov	r2, r0
 801c59c:	460b      	mov	r3, r1
 801c59e:	495b      	ldr	r1, [pc, #364]	@ (801c70c <json_update+0x344>)
 801c5a0:	484b      	ldr	r0, [pc, #300]	@ (801c6d0 <json_update+0x308>)
 801c5a2:	f002 fad1 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5a6:	494a      	ldr	r1, [pc, #296]	@ (801c6d0 <json_update+0x308>)
 801c5a8:	484a      	ldr	r0, [pc, #296]	@ (801c6d4 <json_update+0x30c>)
 801c5aa:	f7ff fe3b 	bl	801c224 <Update_File>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	4b45      	ldr	r3, [pc, #276]	@ (801c6c8 <json_update+0x300>)
 801c5b4:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c5b6:	22ff      	movs	r2, #255	@ 0xff
 801c5b8:	2100      	movs	r1, #0
 801c5ba:	4845      	ldr	r0, [pc, #276]	@ (801c6d0 <json_update+0x308>)
 801c5bc:	f002 fc0e 	bl	801eddc <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c5c0:	4b4f      	ldr	r3, [pc, #316]	@ (801c700 <json_update+0x338>)
 801c5c2:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d001      	beq.n	801c5cc <json_update+0x204>
 801c5c8:	4b51      	ldr	r3, [pc, #324]	@ (801c710 <json_update+0x348>)
 801c5ca:	e000      	b.n	801c5ce <json_update+0x206>
 801c5cc:	4b51      	ldr	r3, [pc, #324]	@ (801c714 <json_update+0x34c>)
 801c5ce:	461a      	mov	r2, r3
 801c5d0:	4951      	ldr	r1, [pc, #324]	@ (801c718 <json_update+0x350>)
 801c5d2:	483f      	ldr	r0, [pc, #252]	@ (801c6d0 <json_update+0x308>)
 801c5d4:	f002 fab8 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5d8:	493d      	ldr	r1, [pc, #244]	@ (801c6d0 <json_update+0x308>)
 801c5da:	483e      	ldr	r0, [pc, #248]	@ (801c6d4 <json_update+0x30c>)
 801c5dc:	f7ff fe22 	bl	801c224 <Update_File>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	461a      	mov	r2, r3
 801c5e4:	4b38      	ldr	r3, [pc, #224]	@ (801c6c8 <json_update+0x300>)
 801c5e6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5e8:	22ff      	movs	r2, #255	@ 0xff
 801c5ea:	2100      	movs	r1, #0
 801c5ec:	4838      	ldr	r0, [pc, #224]	@ (801c6d0 <json_update+0x308>)
 801c5ee:	f002 fbf5 	bl	801eddc <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c5f2:	4b43      	ldr	r3, [pc, #268]	@ (801c700 <json_update+0x338>)
 801c5f4:	695b      	ldr	r3, [r3, #20]
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	f7e3 ffbe 	bl	8000578 <__aeabi_f2d>
 801c5fc:	4602      	mov	r2, r0
 801c5fe:	460b      	mov	r3, r1
 801c600:	4946      	ldr	r1, [pc, #280]	@ (801c71c <json_update+0x354>)
 801c602:	4833      	ldr	r0, [pc, #204]	@ (801c6d0 <json_update+0x308>)
 801c604:	f002 faa0 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c608:	4931      	ldr	r1, [pc, #196]	@ (801c6d0 <json_update+0x308>)
 801c60a:	4832      	ldr	r0, [pc, #200]	@ (801c6d4 <json_update+0x30c>)
 801c60c:	f7ff fe0a 	bl	801c224 <Update_File>
 801c610:	4603      	mov	r3, r0
 801c612:	461a      	mov	r2, r3
 801c614:	4b2c      	ldr	r3, [pc, #176]	@ (801c6c8 <json_update+0x300>)
 801c616:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c618:	22ff      	movs	r2, #255	@ 0xff
 801c61a:	2100      	movs	r1, #0
 801c61c:	482c      	ldr	r0, [pc, #176]	@ (801c6d0 <json_update+0x308>)
 801c61e:	f002 fbdd 	bl	801eddc <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c622:	493f      	ldr	r1, [pc, #252]	@ (801c720 <json_update+0x358>)
 801c624:	482a      	ldr	r0, [pc, #168]	@ (801c6d0 <json_update+0x308>)
 801c626:	f002 fa8f 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c62a:	4929      	ldr	r1, [pc, #164]	@ (801c6d0 <json_update+0x308>)
 801c62c:	4829      	ldr	r0, [pc, #164]	@ (801c6d4 <json_update+0x30c>)
 801c62e:	f7ff fdf9 	bl	801c224 <Update_File>
 801c632:	4603      	mov	r3, r0
 801c634:	461a      	mov	r2, r3
 801c636:	4b24      	ldr	r3, [pc, #144]	@ (801c6c8 <json_update+0x300>)
 801c638:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c63a:	22ff      	movs	r2, #255	@ 0xff
 801c63c:	2100      	movs	r1, #0
 801c63e:	4824      	ldr	r0, [pc, #144]	@ (801c6d0 <json_update+0x308>)
 801c640:	f002 fbcc 	bl	801eddc <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c644:	4b2e      	ldr	r3, [pc, #184]	@ (801c700 <json_update+0x338>)
 801c646:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c648:	4618      	mov	r0, r3
 801c64a:	f7e3 ff95 	bl	8000578 <__aeabi_f2d>
 801c64e:	4602      	mov	r2, r0
 801c650:	460b      	mov	r3, r1
 801c652:	4934      	ldr	r1, [pc, #208]	@ (801c724 <json_update+0x35c>)
 801c654:	481e      	ldr	r0, [pc, #120]	@ (801c6d0 <json_update+0x308>)
 801c656:	f002 fa77 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c65a:	491d      	ldr	r1, [pc, #116]	@ (801c6d0 <json_update+0x308>)
 801c65c:	481d      	ldr	r0, [pc, #116]	@ (801c6d4 <json_update+0x30c>)
 801c65e:	f7ff fde1 	bl	801c224 <Update_File>
 801c662:	4603      	mov	r3, r0
 801c664:	461a      	mov	r2, r3
 801c666:	4b18      	ldr	r3, [pc, #96]	@ (801c6c8 <json_update+0x300>)
 801c668:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c66a:	22ff      	movs	r2, #255	@ 0xff
 801c66c:	2100      	movs	r1, #0
 801c66e:	4818      	ldr	r0, [pc, #96]	@ (801c6d0 <json_update+0x308>)
 801c670:	f002 fbb4 	bl	801eddc <memset>
		sprintf(buffer, "}\n\n");
 801c674:	492c      	ldr	r1, [pc, #176]	@ (801c728 <json_update+0x360>)
 801c676:	4816      	ldr	r0, [pc, #88]	@ (801c6d0 <json_update+0x308>)
 801c678:	f002 fa66 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c67c:	4914      	ldr	r1, [pc, #80]	@ (801c6d0 <json_update+0x308>)
 801c67e:	4815      	ldr	r0, [pc, #84]	@ (801c6d4 <json_update+0x30c>)
 801c680:	f7ff fdd0 	bl	801c224 <Update_File>
 801c684:	4603      	mov	r3, r0
 801c686:	461a      	mov	r2, r3
 801c688:	4b0f      	ldr	r3, [pc, #60]	@ (801c6c8 <json_update+0x300>)
 801c68a:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c68c:	480d      	ldr	r0, [pc, #52]	@ (801c6c4 <json_update+0x2fc>)
 801c68e:	f7ff fd07 	bl	801c0a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c692:	4b0d      	ldr	r3, [pc, #52]	@ (801c6c8 <json_update+0x300>)
 801c694:	781b      	ldrb	r3, [r3, #0]
 801c696:	b25a      	sxtb	r2, r3
 801c698:	4b19      	ldr	r3, [pc, #100]	@ (801c700 <json_update+0x338>)
 801c69a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c69e:	bf00      	nop
 801c6a0:	3718      	adds	r7, #24
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	bd80      	pop	{r7, pc}
 801c6a6:	bf00      	nop
 801c6a8:	20001898 	.word	0x20001898
 801c6ac:	20002322 	.word	0x20002322
 801c6b0:	20002323 	.word	0x20002323
 801c6b4:	20002324 	.word	0x20002324
 801c6b8:	20002325 	.word	0x20002325
 801c6bc:	20002326 	.word	0x20002326
 801c6c0:	20002327 	.word	0x20002327
 801c6c4:	08024c4c 	.word	0x08024c4c
 801c6c8:	20002320 	.word	0x20002320
 801c6cc:	08024c50 	.word	0x08024c50
 801c6d0:	2000232c 	.word	0x2000232c
 801c6d4:	20001461 	.word	0x20001461
 801c6d8:	08024c54 	.word	0x08024c54
 801c6dc:	20001399 	.word	0x20001399
 801c6e0:	08024c64 	.word	0x08024c64
 801c6e4:	08024c70 	.word	0x08024c70
 801c6e8:	200013cb 	.word	0x200013cb
 801c6ec:	08024c90 	.word	0x08024c90
 801c6f0:	200014c5 	.word	0x200014c5
 801c6f4:	08024ca4 	.word	0x08024ca4
 801c6f8:	2000142f 	.word	0x2000142f
 801c6fc:	08024cb8 	.word	0x08024cb8
 801c700:	20001530 	.word	0x20001530
 801c704:	08024cc8 	.word	0x08024cc8
 801c708:	08024cd8 	.word	0x08024cd8
 801c70c:	08024cf0 	.word	0x08024cf0
 801c710:	08024d04 	.word	0x08024d04
 801c714:	08024d0c 	.word	0x08024d0c
 801c718:	08024d14 	.word	0x08024d14
 801c71c:	08024d24 	.word	0x08024d24
 801c720:	08024d38 	.word	0x08024d38
 801c724:	08024d48 	.word	0x08024d48
 801c728:	08024d5c 	.word	0x08024d5c

0801c72c <csv_update>:
void csv_update() {
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b088      	sub	sp, #32
 801c730:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c732:	f107 0314 	add.w	r3, r7, #20
 801c736:	2200      	movs	r2, #0
 801c738:	4619      	mov	r1, r3
 801c73a:	48ab      	ldr	r0, [pc, #684]	@ (801c9e8 <csv_update+0x2bc>)
 801c73c:	f7ed fa23 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c740:	463b      	mov	r3, r7
 801c742:	2200      	movs	r2, #0
 801c744:	4619      	mov	r1, r3
 801c746:	48a8      	ldr	r0, [pc, #672]	@ (801c9e8 <csv_update+0x2bc>)
 801c748:	f7ed f93b 	bl	80099c2 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c74c:	7dba      	ldrb	r2, [r7, #22]
 801c74e:	4ba7      	ldr	r3, [pc, #668]	@ (801c9ec <csv_update+0x2c0>)
 801c750:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c752:	7d7a      	ldrb	r2, [r7, #21]
 801c754:	4ba6      	ldr	r3, [pc, #664]	@ (801c9f0 <csv_update+0x2c4>)
 801c756:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c758:	7dfa      	ldrb	r2, [r7, #23]
 801c75a:	4ba6      	ldr	r3, [pc, #664]	@ (801c9f4 <csv_update+0x2c8>)
 801c75c:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c75e:	783a      	ldrb	r2, [r7, #0]
 801c760:	4ba5      	ldr	r3, [pc, #660]	@ (801c9f8 <csv_update+0x2cc>)
 801c762:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c764:	787a      	ldrb	r2, [r7, #1]
 801c766:	4ba5      	ldr	r3, [pc, #660]	@ (801c9fc <csv_update+0x2d0>)
 801c768:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c76a:	78ba      	ldrb	r2, [r7, #2]
 801c76c:	4ba4      	ldr	r3, [pc, #656]	@ (801ca00 <csv_update+0x2d4>)
 801c76e:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c770:	48a4      	ldr	r0, [pc, #656]	@ (801ca04 <csv_update+0x2d8>)
 801c772:	f7ff fc69 	bl	801c048 <Mount_SD>
 801c776:	4603      	mov	r3, r0
 801c778:	461a      	mov	r2, r3
 801c77a:	4ba3      	ldr	r3, [pc, #652]	@ (801ca08 <csv_update+0x2dc>)
 801c77c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c77e:	4ba2      	ldr	r3, [pc, #648]	@ (801ca08 <csv_update+0x2dc>)
 801c780:	781b      	ldrb	r3, [r3, #0]
 801c782:	2b00      	cmp	r3, #0
 801c784:	f040 8126 	bne.w	801c9d4 <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c788:	f7e5 fe90 	bl	80024ac <ver_GetUid>
 801c78c:	4603      	mov	r3, r0
 801c78e:	461a      	mov	r2, r3
 801c790:	499e      	ldr	r1, [pc, #632]	@ (801ca0c <csv_update+0x2e0>)
 801c792:	489f      	ldr	r0, [pc, #636]	@ (801ca10 <csv_update+0x2e4>)
 801c794:	f002 f9d8 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c798:	499d      	ldr	r1, [pc, #628]	@ (801ca10 <csv_update+0x2e4>)
 801c79a:	489e      	ldr	r0, [pc, #632]	@ (801ca14 <csv_update+0x2e8>)
 801c79c:	f7ff fd42 	bl	801c224 <Update_File>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	461a      	mov	r2, r3
 801c7a4:	4b98      	ldr	r3, [pc, #608]	@ (801ca08 <csv_update+0x2dc>)
 801c7a6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7a8:	22ff      	movs	r2, #255	@ 0xff
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	4898      	ldr	r0, [pc, #608]	@ (801ca10 <csv_update+0x2e4>)
 801c7ae:	f002 fb15 	bl	801eddc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c7b2:	4a99      	ldr	r2, [pc, #612]	@ (801ca18 <csv_update+0x2ec>)
 801c7b4:	4995      	ldr	r1, [pc, #596]	@ (801ca0c <csv_update+0x2e0>)
 801c7b6:	4896      	ldr	r0, [pc, #600]	@ (801ca10 <csv_update+0x2e4>)
 801c7b8:	f002 f9c6 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7bc:	4994      	ldr	r1, [pc, #592]	@ (801ca10 <csv_update+0x2e4>)
 801c7be:	4895      	ldr	r0, [pc, #596]	@ (801ca14 <csv_update+0x2e8>)
 801c7c0:	f7ff fd30 	bl	801c224 <Update_File>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	461a      	mov	r2, r3
 801c7c8:	4b8f      	ldr	r3, [pc, #572]	@ (801ca08 <csv_update+0x2dc>)
 801c7ca:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7cc:	22ff      	movs	r2, #255	@ 0xff
 801c7ce:	2100      	movs	r1, #0
 801c7d0:	488f      	ldr	r0, [pc, #572]	@ (801ca10 <csv_update+0x2e4>)
 801c7d2:	f002 fb03 	bl	801eddc <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7d6:	783b      	ldrb	r3, [r7, #0]
 801c7d8:	461a      	mov	r2, r3
 801c7da:	787b      	ldrb	r3, [r7, #1]
 801c7dc:	4619      	mov	r1, r3
				sTime.Seconds);
 801c7de:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7e0:	9300      	str	r3, [sp, #0]
 801c7e2:	460b      	mov	r3, r1
 801c7e4:	498d      	ldr	r1, [pc, #564]	@ (801ca1c <csv_update+0x2f0>)
 801c7e6:	488a      	ldr	r0, [pc, #552]	@ (801ca10 <csv_update+0x2e4>)
 801c7e8:	f002 f9ae 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7ec:	4988      	ldr	r1, [pc, #544]	@ (801ca10 <csv_update+0x2e4>)
 801c7ee:	4889      	ldr	r0, [pc, #548]	@ (801ca14 <csv_update+0x2e8>)
 801c7f0:	f7ff fd18 	bl	801c224 <Update_File>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	461a      	mov	r2, r3
 801c7f8:	4b83      	ldr	r3, [pc, #524]	@ (801ca08 <csv_update+0x2dc>)
 801c7fa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7fc:	22ff      	movs	r2, #255	@ 0xff
 801c7fe:	2100      	movs	r1, #0
 801c800:	4883      	ldr	r0, [pc, #524]	@ (801ca10 <csv_update+0x2e4>)
 801c802:	f002 faeb 	bl	801eddc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c806:	4a86      	ldr	r2, [pc, #536]	@ (801ca20 <csv_update+0x2f4>)
 801c808:	4980      	ldr	r1, [pc, #512]	@ (801ca0c <csv_update+0x2e0>)
 801c80a:	4881      	ldr	r0, [pc, #516]	@ (801ca10 <csv_update+0x2e4>)
 801c80c:	f002 f99c 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c810:	497f      	ldr	r1, [pc, #508]	@ (801ca10 <csv_update+0x2e4>)
 801c812:	4880      	ldr	r0, [pc, #512]	@ (801ca14 <csv_update+0x2e8>)
 801c814:	f7ff fd06 	bl	801c224 <Update_File>
 801c818:	4603      	mov	r3, r0
 801c81a:	461a      	mov	r2, r3
 801c81c:	4b7a      	ldr	r3, [pc, #488]	@ (801ca08 <csv_update+0x2dc>)
 801c81e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c820:	22ff      	movs	r2, #255	@ 0xff
 801c822:	2100      	movs	r1, #0
 801c824:	487a      	ldr	r0, [pc, #488]	@ (801ca10 <csv_update+0x2e4>)
 801c826:	f002 fad9 	bl	801eddc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c82a:	4a7e      	ldr	r2, [pc, #504]	@ (801ca24 <csv_update+0x2f8>)
 801c82c:	4977      	ldr	r1, [pc, #476]	@ (801ca0c <csv_update+0x2e0>)
 801c82e:	4878      	ldr	r0, [pc, #480]	@ (801ca10 <csv_update+0x2e4>)
 801c830:	f002 f98a 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c834:	4976      	ldr	r1, [pc, #472]	@ (801ca10 <csv_update+0x2e4>)
 801c836:	4877      	ldr	r0, [pc, #476]	@ (801ca14 <csv_update+0x2e8>)
 801c838:	f7ff fcf4 	bl	801c224 <Update_File>
 801c83c:	4603      	mov	r3, r0
 801c83e:	461a      	mov	r2, r3
 801c840:	4b71      	ldr	r3, [pc, #452]	@ (801ca08 <csv_update+0x2dc>)
 801c842:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c844:	22ff      	movs	r2, #255	@ 0xff
 801c846:	2100      	movs	r1, #0
 801c848:	4871      	ldr	r0, [pc, #452]	@ (801ca10 <csv_update+0x2e4>)
 801c84a:	f002 fac7 	bl	801eddc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c84e:	4a76      	ldr	r2, [pc, #472]	@ (801ca28 <csv_update+0x2fc>)
 801c850:	496e      	ldr	r1, [pc, #440]	@ (801ca0c <csv_update+0x2e0>)
 801c852:	486f      	ldr	r0, [pc, #444]	@ (801ca10 <csv_update+0x2e4>)
 801c854:	f002 f978 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c858:	496d      	ldr	r1, [pc, #436]	@ (801ca10 <csv_update+0x2e4>)
 801c85a:	486e      	ldr	r0, [pc, #440]	@ (801ca14 <csv_update+0x2e8>)
 801c85c:	f7ff fce2 	bl	801c224 <Update_File>
 801c860:	4603      	mov	r3, r0
 801c862:	461a      	mov	r2, r3
 801c864:	4b68      	ldr	r3, [pc, #416]	@ (801ca08 <csv_update+0x2dc>)
 801c866:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c868:	22ff      	movs	r2, #255	@ 0xff
 801c86a:	2100      	movs	r1, #0
 801c86c:	4868      	ldr	r0, [pc, #416]	@ (801ca10 <csv_update+0x2e4>)
 801c86e:	f002 fab5 	bl	801eddc <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c872:	4b6e      	ldr	r3, [pc, #440]	@ (801ca2c <csv_update+0x300>)
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	4618      	mov	r0, r3
 801c878:	f7e3 fe7e 	bl	8000578 <__aeabi_f2d>
 801c87c:	4602      	mov	r2, r0
 801c87e:	460b      	mov	r3, r1
 801c880:	496b      	ldr	r1, [pc, #428]	@ (801ca30 <csv_update+0x304>)
 801c882:	4863      	ldr	r0, [pc, #396]	@ (801ca10 <csv_update+0x2e4>)
 801c884:	f002 f960 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c888:	4961      	ldr	r1, [pc, #388]	@ (801ca10 <csv_update+0x2e4>)
 801c88a:	4862      	ldr	r0, [pc, #392]	@ (801ca14 <csv_update+0x2e8>)
 801c88c:	f7ff fcca 	bl	801c224 <Update_File>
 801c890:	4603      	mov	r3, r0
 801c892:	461a      	mov	r2, r3
 801c894:	4b5c      	ldr	r3, [pc, #368]	@ (801ca08 <csv_update+0x2dc>)
 801c896:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c898:	22ff      	movs	r2, #255	@ 0xff
 801c89a:	2100      	movs	r1, #0
 801c89c:	485c      	ldr	r0, [pc, #368]	@ (801ca10 <csv_update+0x2e4>)
 801c89e:	f002 fa9d 	bl	801eddc <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c8a2:	4b62      	ldr	r3, [pc, #392]	@ (801ca2c <csv_update+0x300>)
 801c8a4:	685b      	ldr	r3, [r3, #4]
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7e3 fe66 	bl	8000578 <__aeabi_f2d>
 801c8ac:	4602      	mov	r2, r0
 801c8ae:	460b      	mov	r3, r1
 801c8b0:	495f      	ldr	r1, [pc, #380]	@ (801ca30 <csv_update+0x304>)
 801c8b2:	4857      	ldr	r0, [pc, #348]	@ (801ca10 <csv_update+0x2e4>)
 801c8b4:	f002 f948 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8b8:	4955      	ldr	r1, [pc, #340]	@ (801ca10 <csv_update+0x2e4>)
 801c8ba:	4856      	ldr	r0, [pc, #344]	@ (801ca14 <csv_update+0x2e8>)
 801c8bc:	f7ff fcb2 	bl	801c224 <Update_File>
 801c8c0:	4603      	mov	r3, r0
 801c8c2:	461a      	mov	r2, r3
 801c8c4:	4b50      	ldr	r3, [pc, #320]	@ (801ca08 <csv_update+0x2dc>)
 801c8c6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8c8:	22ff      	movs	r2, #255	@ 0xff
 801c8ca:	2100      	movs	r1, #0
 801c8cc:	4850      	ldr	r0, [pc, #320]	@ (801ca10 <csv_update+0x2e4>)
 801c8ce:	f002 fa85 	bl	801eddc <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c8d2:	4b56      	ldr	r3, [pc, #344]	@ (801ca2c <csv_update+0x300>)
 801c8d4:	689b      	ldr	r3, [r3, #8]
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f7e3 fe4e 	bl	8000578 <__aeabi_f2d>
 801c8dc:	4602      	mov	r2, r0
 801c8de:	460b      	mov	r3, r1
 801c8e0:	4953      	ldr	r1, [pc, #332]	@ (801ca30 <csv_update+0x304>)
 801c8e2:	484b      	ldr	r0, [pc, #300]	@ (801ca10 <csv_update+0x2e4>)
 801c8e4:	f002 f930 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8e8:	4949      	ldr	r1, [pc, #292]	@ (801ca10 <csv_update+0x2e4>)
 801c8ea:	484a      	ldr	r0, [pc, #296]	@ (801ca14 <csv_update+0x2e8>)
 801c8ec:	f7ff fc9a 	bl	801c224 <Update_File>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	461a      	mov	r2, r3
 801c8f4:	4b44      	ldr	r3, [pc, #272]	@ (801ca08 <csv_update+0x2dc>)
 801c8f6:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c8f8:	22ff      	movs	r2, #255	@ 0xff
 801c8fa:	2100      	movs	r1, #0
 801c8fc:	4844      	ldr	r0, [pc, #272]	@ (801ca10 <csv_update+0x2e4>)
 801c8fe:	f002 fa6d 	bl	801eddc <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c902:	4b4a      	ldr	r3, [pc, #296]	@ (801ca2c <csv_update+0x300>)
 801c904:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c906:	2b01      	cmp	r3, #1
 801c908:	d101      	bne.n	801c90e <csv_update+0x1e2>
 801c90a:	4b4a      	ldr	r3, [pc, #296]	@ (801ca34 <csv_update+0x308>)
 801c90c:	e000      	b.n	801c910 <csv_update+0x1e4>
 801c90e:	4b4a      	ldr	r3, [pc, #296]	@ (801ca38 <csv_update+0x30c>)
 801c910:	461a      	mov	r2, r3
 801c912:	493e      	ldr	r1, [pc, #248]	@ (801ca0c <csv_update+0x2e0>)
 801c914:	483e      	ldr	r0, [pc, #248]	@ (801ca10 <csv_update+0x2e4>)
 801c916:	f002 f917 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c91a:	493d      	ldr	r1, [pc, #244]	@ (801ca10 <csv_update+0x2e4>)
 801c91c:	483d      	ldr	r0, [pc, #244]	@ (801ca14 <csv_update+0x2e8>)
 801c91e:	f7ff fc81 	bl	801c224 <Update_File>
 801c922:	4603      	mov	r3, r0
 801c924:	461a      	mov	r2, r3
 801c926:	4b38      	ldr	r3, [pc, #224]	@ (801ca08 <csv_update+0x2dc>)
 801c928:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c92a:	22ff      	movs	r2, #255	@ 0xff
 801c92c:	2100      	movs	r1, #0
 801c92e:	4838      	ldr	r0, [pc, #224]	@ (801ca10 <csv_update+0x2e4>)
 801c930:	f002 fa54 	bl	801eddc <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c934:	4b3d      	ldr	r3, [pc, #244]	@ (801ca2c <csv_update+0x300>)
 801c936:	695b      	ldr	r3, [r3, #20]
 801c938:	4618      	mov	r0, r3
 801c93a:	f7e3 fe1d 	bl	8000578 <__aeabi_f2d>
 801c93e:	4602      	mov	r2, r0
 801c940:	460b      	mov	r3, r1
 801c942:	493e      	ldr	r1, [pc, #248]	@ (801ca3c <csv_update+0x310>)
 801c944:	4832      	ldr	r0, [pc, #200]	@ (801ca10 <csv_update+0x2e4>)
 801c946:	f002 f8ff 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c94a:	4931      	ldr	r1, [pc, #196]	@ (801ca10 <csv_update+0x2e4>)
 801c94c:	4831      	ldr	r0, [pc, #196]	@ (801ca14 <csv_update+0x2e8>)
 801c94e:	f7ff fc69 	bl	801c224 <Update_File>
 801c952:	4603      	mov	r3, r0
 801c954:	461a      	mov	r2, r3
 801c956:	4b2c      	ldr	r3, [pc, #176]	@ (801ca08 <csv_update+0x2dc>)
 801c958:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c95a:	22ff      	movs	r2, #255	@ 0xff
 801c95c:	2100      	movs	r1, #0
 801c95e:	482c      	ldr	r0, [pc, #176]	@ (801ca10 <csv_update+0x2e4>)
 801c960:	f002 fa3c 	bl	801eddc <memset>
		sprintf(buffer, "NONE ,");
 801c964:	4936      	ldr	r1, [pc, #216]	@ (801ca40 <csv_update+0x314>)
 801c966:	482a      	ldr	r0, [pc, #168]	@ (801ca10 <csv_update+0x2e4>)
 801c968:	f002 f8ee 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c96c:	4928      	ldr	r1, [pc, #160]	@ (801ca10 <csv_update+0x2e4>)
 801c96e:	4829      	ldr	r0, [pc, #164]	@ (801ca14 <csv_update+0x2e8>)
 801c970:	f7ff fc58 	bl	801c224 <Update_File>
 801c974:	4603      	mov	r3, r0
 801c976:	461a      	mov	r2, r3
 801c978:	4b23      	ldr	r3, [pc, #140]	@ (801ca08 <csv_update+0x2dc>)
 801c97a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c97c:	22ff      	movs	r2, #255	@ 0xff
 801c97e:	2100      	movs	r1, #0
 801c980:	4823      	ldr	r0, [pc, #140]	@ (801ca10 <csv_update+0x2e4>)
 801c982:	f002 fa2b 	bl	801eddc <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c986:	4b29      	ldr	r3, [pc, #164]	@ (801ca2c <csv_update+0x300>)
 801c988:	6a1b      	ldr	r3, [r3, #32]
 801c98a:	4618      	mov	r0, r3
 801c98c:	f7e3 fdf4 	bl	8000578 <__aeabi_f2d>
 801c990:	4602      	mov	r2, r0
 801c992:	460b      	mov	r3, r1
 801c994:	4929      	ldr	r1, [pc, #164]	@ (801ca3c <csv_update+0x310>)
 801c996:	481e      	ldr	r0, [pc, #120]	@ (801ca10 <csv_update+0x2e4>)
 801c998:	f002 f8d6 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c99c:	491c      	ldr	r1, [pc, #112]	@ (801ca10 <csv_update+0x2e4>)
 801c99e:	481d      	ldr	r0, [pc, #116]	@ (801ca14 <csv_update+0x2e8>)
 801c9a0:	f7ff fc40 	bl	801c224 <Update_File>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	461a      	mov	r2, r3
 801c9a8:	4b17      	ldr	r3, [pc, #92]	@ (801ca08 <csv_update+0x2dc>)
 801c9aa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c9ac:	22ff      	movs	r2, #255	@ 0xff
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	4817      	ldr	r0, [pc, #92]	@ (801ca10 <csv_update+0x2e4>)
 801c9b2:	f002 fa13 	bl	801eddc <memset>
		sprintf(buffer, "\n");
 801c9b6:	4923      	ldr	r1, [pc, #140]	@ (801ca44 <csv_update+0x318>)
 801c9b8:	4815      	ldr	r0, [pc, #84]	@ (801ca10 <csv_update+0x2e4>)
 801c9ba:	f002 f8c5 	bl	801eb48 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9be:	4914      	ldr	r1, [pc, #80]	@ (801ca10 <csv_update+0x2e4>)
 801c9c0:	4814      	ldr	r0, [pc, #80]	@ (801ca14 <csv_update+0x2e8>)
 801c9c2:	f7ff fc2f 	bl	801c224 <Update_File>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	461a      	mov	r2, r3
 801c9ca:	4b0f      	ldr	r3, [pc, #60]	@ (801ca08 <csv_update+0x2dc>)
 801c9cc:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c9ce:	480d      	ldr	r0, [pc, #52]	@ (801ca04 <csv_update+0x2d8>)
 801c9d0:	f7ff fb66 	bl	801c0a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c9d4:	4b0c      	ldr	r3, [pc, #48]	@ (801ca08 <csv_update+0x2dc>)
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	b25a      	sxtb	r2, r3
 801c9da:	4b14      	ldr	r3, [pc, #80]	@ (801ca2c <csv_update+0x300>)
 801c9dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c9e0:	bf00      	nop
 801c9e2:	3718      	adds	r7, #24
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	bd80      	pop	{r7, pc}
 801c9e8:	20001898 	.word	0x20001898
 801c9ec:	20002322 	.word	0x20002322
 801c9f0:	20002323 	.word	0x20002323
 801c9f4:	20002324 	.word	0x20002324
 801c9f8:	20002325 	.word	0x20002325
 801c9fc:	20002326 	.word	0x20002326
 801ca00:	20002327 	.word	0x20002327
 801ca04:	08024c4c 	.word	0x08024c4c
 801ca08:	20002320 	.word	0x20002320
 801ca0c:	08024d60 	.word	0x08024d60
 801ca10:	2000232c 	.word	0x2000232c
 801ca14:	20001461 	.word	0x20001461
 801ca18:	20001399 	.word	0x20001399
 801ca1c:	08024d68 	.word	0x08024d68
 801ca20:	200013cb 	.word	0x200013cb
 801ca24:	200014c5 	.word	0x200014c5
 801ca28:	2000142f 	.word	0x2000142f
 801ca2c:	20001530 	.word	0x20001530
 801ca30:	08024d7c 	.word	0x08024d7c
 801ca34:	08024d04 	.word	0x08024d04
 801ca38:	08024d0c 	.word	0x08024d0c
 801ca3c:	08024d84 	.word	0x08024d84
 801ca40:	08024d8c 	.word	0x08024d8c
 801ca44:	08024d94 	.word	0x08024d94

0801ca48 <csv_header>:
void csv_header() {
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801ca4c:	485d      	ldr	r0, [pc, #372]	@ (801cbc4 <csv_header+0x17c>)
 801ca4e:	f7ff fafb 	bl	801c048 <Mount_SD>
 801ca52:	4603      	mov	r3, r0
 801ca54:	461a      	mov	r2, r3
 801ca56:	4b5c      	ldr	r3, [pc, #368]	@ (801cbc8 <csv_header+0x180>)
 801ca58:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ca5a:	4b5b      	ldr	r3, [pc, #364]	@ (801cbc8 <csv_header+0x180>)
 801ca5c:	781b      	ldrb	r3, [r3, #0]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	f040 80a7 	bne.w	801cbb2 <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801ca64:	4959      	ldr	r1, [pc, #356]	@ (801cbcc <csv_header+0x184>)
 801ca66:	485a      	ldr	r0, [pc, #360]	@ (801cbd0 <csv_header+0x188>)
 801ca68:	f002 f86e 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca6c:	4958      	ldr	r1, [pc, #352]	@ (801cbd0 <csv_header+0x188>)
 801ca6e:	4859      	ldr	r0, [pc, #356]	@ (801cbd4 <csv_header+0x18c>)
 801ca70:	f7ff fbd8 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca74:	22ff      	movs	r2, #255	@ 0xff
 801ca76:	2100      	movs	r1, #0
 801ca78:	4855      	ldr	r0, [pc, #340]	@ (801cbd0 <csv_header+0x188>)
 801ca7a:	f002 f9af 	bl	801eddc <memset>
		sprintf(buffer, "id ,");
 801ca7e:	4956      	ldr	r1, [pc, #344]	@ (801cbd8 <csv_header+0x190>)
 801ca80:	4853      	ldr	r0, [pc, #332]	@ (801cbd0 <csv_header+0x188>)
 801ca82:	f002 f861 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca86:	4952      	ldr	r1, [pc, #328]	@ (801cbd0 <csv_header+0x188>)
 801ca88:	4852      	ldr	r0, [pc, #328]	@ (801cbd4 <csv_header+0x18c>)
 801ca8a:	f7ff fbcb 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca8e:	22ff      	movs	r2, #255	@ 0xff
 801ca90:	2100      	movs	r1, #0
 801ca92:	484f      	ldr	r0, [pc, #316]	@ (801cbd0 <csv_header+0x188>)
 801ca94:	f002 f9a2 	bl	801eddc <memset>
		sprintf(buffer, "timestamp ,");
 801ca98:	4950      	ldr	r1, [pc, #320]	@ (801cbdc <csv_header+0x194>)
 801ca9a:	484d      	ldr	r0, [pc, #308]	@ (801cbd0 <csv_header+0x188>)
 801ca9c:	f002 f854 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caa0:	494b      	ldr	r1, [pc, #300]	@ (801cbd0 <csv_header+0x188>)
 801caa2:	484c      	ldr	r0, [pc, #304]	@ (801cbd4 <csv_header+0x18c>)
 801caa4:	f7ff fbbe 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caa8:	22ff      	movs	r2, #255	@ 0xff
 801caaa:	2100      	movs	r1, #0
 801caac:	4848      	ldr	r0, [pc, #288]	@ (801cbd0 <csv_header+0x188>)
 801caae:	f002 f995 	bl	801eddc <memset>
		sprintf(buffer, "location ,");
 801cab2:	494b      	ldr	r1, [pc, #300]	@ (801cbe0 <csv_header+0x198>)
 801cab4:	4846      	ldr	r0, [pc, #280]	@ (801cbd0 <csv_header+0x188>)
 801cab6:	f002 f847 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caba:	4945      	ldr	r1, [pc, #276]	@ (801cbd0 <csv_header+0x188>)
 801cabc:	4845      	ldr	r0, [pc, #276]	@ (801cbd4 <csv_header+0x18c>)
 801cabe:	f7ff fbb1 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cac2:	22ff      	movs	r2, #255	@ 0xff
 801cac4:	2100      	movs	r1, #0
 801cac6:	4842      	ldr	r0, [pc, #264]	@ (801cbd0 <csv_header+0x188>)
 801cac8:	f002 f988 	bl	801eddc <memset>
		sprintf(buffer, "Filename ,");
 801cacc:	4945      	ldr	r1, [pc, #276]	@ (801cbe4 <csv_header+0x19c>)
 801cace:	4840      	ldr	r0, [pc, #256]	@ (801cbd0 <csv_header+0x188>)
 801cad0:	f002 f83a 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cad4:	493e      	ldr	r1, [pc, #248]	@ (801cbd0 <csv_header+0x188>)
 801cad6:	483f      	ldr	r0, [pc, #252]	@ (801cbd4 <csv_header+0x18c>)
 801cad8:	f7ff fba4 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cadc:	22ff      	movs	r2, #255	@ 0xff
 801cade:	2100      	movs	r1, #0
 801cae0:	483b      	ldr	r0, [pc, #236]	@ (801cbd0 <csv_header+0x188>)
 801cae2:	f002 f97b 	bl	801eddc <memset>
		sprintf(buffer, "group ,");
 801cae6:	4940      	ldr	r1, [pc, #256]	@ (801cbe8 <csv_header+0x1a0>)
 801cae8:	4839      	ldr	r0, [pc, #228]	@ (801cbd0 <csv_header+0x188>)
 801caea:	f002 f82d 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caee:	4938      	ldr	r1, [pc, #224]	@ (801cbd0 <csv_header+0x188>)
 801caf0:	4838      	ldr	r0, [pc, #224]	@ (801cbd4 <csv_header+0x18c>)
 801caf2:	f7ff fb97 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caf6:	22ff      	movs	r2, #255	@ 0xff
 801caf8:	2100      	movs	r1, #0
 801cafa:	4835      	ldr	r0, [pc, #212]	@ (801cbd0 <csv_header+0x188>)
 801cafc:	f002 f96e 	bl	801eddc <memset>
		sprintf(buffer, "co2 ,");
 801cb00:	493a      	ldr	r1, [pc, #232]	@ (801cbec <csv_header+0x1a4>)
 801cb02:	4833      	ldr	r0, [pc, #204]	@ (801cbd0 <csv_header+0x188>)
 801cb04:	f002 f820 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb08:	4931      	ldr	r1, [pc, #196]	@ (801cbd0 <csv_header+0x188>)
 801cb0a:	4832      	ldr	r0, [pc, #200]	@ (801cbd4 <csv_header+0x18c>)
 801cb0c:	f7ff fb8a 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb10:	22ff      	movs	r2, #255	@ 0xff
 801cb12:	2100      	movs	r1, #0
 801cb14:	482e      	ldr	r0, [pc, #184]	@ (801cbd0 <csv_header+0x188>)
 801cb16:	f002 f961 	bl	801eddc <memset>
		sprintf(buffer, "temperature ,");
 801cb1a:	4935      	ldr	r1, [pc, #212]	@ (801cbf0 <csv_header+0x1a8>)
 801cb1c:	482c      	ldr	r0, [pc, #176]	@ (801cbd0 <csv_header+0x188>)
 801cb1e:	f002 f813 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb22:	492b      	ldr	r1, [pc, #172]	@ (801cbd0 <csv_header+0x188>)
 801cb24:	482b      	ldr	r0, [pc, #172]	@ (801cbd4 <csv_header+0x18c>)
 801cb26:	f7ff fb7d 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb2a:	22ff      	movs	r2, #255	@ 0xff
 801cb2c:	2100      	movs	r1, #0
 801cb2e:	4828      	ldr	r0, [pc, #160]	@ (801cbd0 <csv_header+0x188>)
 801cb30:	f002 f954 	bl	801eddc <memset>
		sprintf(buffer, "humidity ,");
 801cb34:	492f      	ldr	r1, [pc, #188]	@ (801cbf4 <csv_header+0x1ac>)
 801cb36:	4826      	ldr	r0, [pc, #152]	@ (801cbd0 <csv_header+0x188>)
 801cb38:	f002 f806 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb3c:	4924      	ldr	r1, [pc, #144]	@ (801cbd0 <csv_header+0x188>)
 801cb3e:	4825      	ldr	r0, [pc, #148]	@ (801cbd4 <csv_header+0x18c>)
 801cb40:	f7ff fb70 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb44:	22ff      	movs	r2, #255	@ 0xff
 801cb46:	2100      	movs	r1, #0
 801cb48:	4821      	ldr	r0, [pc, #132]	@ (801cbd0 <csv_header+0x188>)
 801cb4a:	f002 f947 	bl	801eddc <memset>
		sprintf(buffer, "pir ,");
 801cb4e:	492a      	ldr	r1, [pc, #168]	@ (801cbf8 <csv_header+0x1b0>)
 801cb50:	481f      	ldr	r0, [pc, #124]	@ (801cbd0 <csv_header+0x188>)
 801cb52:	f001 fff9 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb56:	491e      	ldr	r1, [pc, #120]	@ (801cbd0 <csv_header+0x188>)
 801cb58:	481e      	ldr	r0, [pc, #120]	@ (801cbd4 <csv_header+0x18c>)
 801cb5a:	f7ff fb63 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb5e:	22ff      	movs	r2, #255	@ 0xff
 801cb60:	2100      	movs	r1, #0
 801cb62:	481b      	ldr	r0, [pc, #108]	@ (801cbd0 <csv_header+0x188>)
 801cb64:	f002 f93a 	bl	801eddc <memset>
		sprintf(buffer, "pm2.5 ,");
 801cb68:	4924      	ldr	r1, [pc, #144]	@ (801cbfc <csv_header+0x1b4>)
 801cb6a:	4819      	ldr	r0, [pc, #100]	@ (801cbd0 <csv_header+0x188>)
 801cb6c:	f001 ffec 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb70:	4917      	ldr	r1, [pc, #92]	@ (801cbd0 <csv_header+0x188>)
 801cb72:	4818      	ldr	r0, [pc, #96]	@ (801cbd4 <csv_header+0x18c>)
 801cb74:	f7ff fb56 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb78:	22ff      	movs	r2, #255	@ 0xff
 801cb7a:	2100      	movs	r1, #0
 801cb7c:	4814      	ldr	r0, [pc, #80]	@ (801cbd0 <csv_header+0x188>)
 801cb7e:	f002 f92d 	bl	801eddc <memset>
		sprintf(buffer, "port ,");
 801cb82:	491f      	ldr	r1, [pc, #124]	@ (801cc00 <csv_header+0x1b8>)
 801cb84:	4812      	ldr	r0, [pc, #72]	@ (801cbd0 <csv_header+0x188>)
 801cb86:	f001 ffdf 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb8a:	4911      	ldr	r1, [pc, #68]	@ (801cbd0 <csv_header+0x188>)
 801cb8c:	4811      	ldr	r0, [pc, #68]	@ (801cbd4 <csv_header+0x18c>)
 801cb8e:	f7ff fb49 	bl	801c224 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb92:	22ff      	movs	r2, #255	@ 0xff
 801cb94:	2100      	movs	r1, #0
 801cb96:	480e      	ldr	r0, [pc, #56]	@ (801cbd0 <csv_header+0x188>)
 801cb98:	f002 f920 	bl	801eddc <memset>
		sprintf(buffer, "battery \n\n");
 801cb9c:	4919      	ldr	r1, [pc, #100]	@ (801cc04 <csv_header+0x1bc>)
 801cb9e:	480c      	ldr	r0, [pc, #48]	@ (801cbd0 <csv_header+0x188>)
 801cba0:	f001 ffd2 	bl	801eb48 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cba4:	490a      	ldr	r1, [pc, #40]	@ (801cbd0 <csv_header+0x188>)
 801cba6:	480b      	ldr	r0, [pc, #44]	@ (801cbd4 <csv_header+0x18c>)
 801cba8:	f7ff fb3c 	bl	801c224 <Update_File>

		Unmount_SD("/");
 801cbac:	4805      	ldr	r0, [pc, #20]	@ (801cbc4 <csv_header+0x17c>)
 801cbae:	f7ff fa77 	bl	801c0a0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801cbb2:	4b05      	ldr	r3, [pc, #20]	@ (801cbc8 <csv_header+0x180>)
 801cbb4:	781b      	ldrb	r3, [r3, #0]
 801cbb6:	b25a      	sxtb	r2, r3
 801cbb8:	4b13      	ldr	r3, [pc, #76]	@ (801cc08 <csv_header+0x1c0>)
 801cbba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cbbe:	bf00      	nop
 801cbc0:	bd80      	pop	{r7, pc}
 801cbc2:	bf00      	nop
 801cbc4:	08024c4c 	.word	0x08024c4c
 801cbc8:	20002320 	.word	0x20002320
 801cbcc:	08024d98 	.word	0x08024d98
 801cbd0:	2000232c 	.word	0x2000232c
 801cbd4:	20001461 	.word	0x20001461
 801cbd8:	08024da4 	.word	0x08024da4
 801cbdc:	08024dac 	.word	0x08024dac
 801cbe0:	08024db8 	.word	0x08024db8
 801cbe4:	08024dc4 	.word	0x08024dc4
 801cbe8:	08024dd0 	.word	0x08024dd0
 801cbec:	08024dd8 	.word	0x08024dd8
 801cbf0:	08024de0 	.word	0x08024de0
 801cbf4:	08024df0 	.word	0x08024df0
 801cbf8:	08024dfc 	.word	0x08024dfc
 801cbfc:	08024e04 	.word	0x08024e04
 801cc00:	08024e0c 	.word	0x08024e0c
 801cc04:	08024e14 	.word	0x08024e14
 801cc08:	20001530 	.word	0x20001530

0801cc0c <filesaving_process>:
uint8_t filesaving_process() {
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	af00      	add	r7, sp, #0
//	__disable_irq();

	 Mount_SD("/");
 801cc10:	481c      	ldr	r0, [pc, #112]	@ (801cc84 <filesaving_process+0x78>)
 801cc12:	f7ff fa19 	bl	801c048 <Mount_SD>
	 if(check_file_exists(_Flash_Packet.filename_with_format)) //if file does not exists then create it
 801cc16:	481c      	ldr	r0, [pc, #112]	@ (801cc88 <filesaving_process+0x7c>)
 801cc18:	f7ff fbc0 	bl	801c39c <check_file_exists>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d00c      	beq.n	801cc3c <filesaving_process+0x30>
	 {
		Unmount_SD("/");
 801cc22:	4818      	ldr	r0, [pc, #96]	@ (801cc84 <filesaving_process+0x78>)
 801cc24:	f7ff fa3c 	bl	801c0a0 <Unmount_SD>
		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 801cc28:	4918      	ldr	r1, [pc, #96]	@ (801cc8c <filesaving_process+0x80>)
 801cc2a:	4819      	ldr	r0, [pc, #100]	@ (801cc90 <filesaving_process+0x84>)
 801cc2c:	f000 f838 	bl	801cca0 <createfile>
 801cc30:	4603      	mov	r3, r0
 801cc32:	461a      	mov	r2, r3
 801cc34:	4b17      	ldr	r3, [pc, #92]	@ (801cc94 <filesaving_process+0x88>)
 801cc36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801cc3a:	e002      	b.n	801cc42 <filesaving_process+0x36>
	 }
	 else
	 {
		Unmount_SD("/");
 801cc3c:	4811      	ldr	r0, [pc, #68]	@ (801cc84 <filesaving_process+0x78>)
 801cc3e:	f7ff fa2f 	bl	801c0a0 <Unmount_SD>
	 }




	memset(buffer, 0, sizeof(buffer));
 801cc42:	22ff      	movs	r2, #255	@ 0xff
 801cc44:	2100      	movs	r1, #0
 801cc46:	4814      	ldr	r0, [pc, #80]	@ (801cc98 <filesaving_process+0x8c>)
 801cc48:	f002 f8c8 	bl	801eddc <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cc4c:	4b11      	ldr	r3, [pc, #68]	@ (801cc94 <filesaving_process+0x88>)
 801cc4e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d002      	beq.n	801cc5c <filesaving_process+0x50>
		csv_update();
 801cc56:	f7ff fd69 	bl	801c72c <csv_update>
 801cc5a:	e001      	b.n	801cc60 <filesaving_process+0x54>
	} else {
		json_update();
 801cc5c:	f7ff fbb4 	bl	801c3c8 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cc60:	4b0c      	ldr	r3, [pc, #48]	@ (801cc94 <filesaving_process+0x88>)
 801cc62:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d006      	beq.n	801cc78 <filesaving_process+0x6c>
			{
		//blink red so user can know
		blink_red();
 801cc6a:	f7e5 fa21 	bl	80020b0 <blink_red>
		datawritten = 2;
 801cc6e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc9c <filesaving_process+0x90>)
 801cc70:	2202      	movs	r2, #2
 801cc72:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cc74:	2301      	movs	r3, #1
 801cc76:	e003      	b.n	801cc80 <filesaving_process+0x74>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cc78:	4b08      	ldr	r3, [pc, #32]	@ (801cc9c <filesaving_process+0x90>)
 801cc7a:	2201      	movs	r2, #1
 801cc7c:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cc7e:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	bd80      	pop	{r7, pc}
 801cc84:	08024c4c 	.word	0x08024c4c
 801cc88:	20001461 	.word	0x20001461
 801cc8c:	20001330 	.word	0x20001330
 801cc90:	200012cc 	.word	0x200012cc
 801cc94:	20001530 	.word	0x20001530
 801cc98:	2000232c 	.word	0x2000232c
 801cc9c:	20002328 	.word	0x20002328

0801cca0 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b08c      	sub	sp, #48	@ 0x30
 801cca4:	af04      	add	r7, sp, #16
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801ccaa:	f107 031c 	add.w	r3, r7, #28
 801ccae:	2200      	movs	r2, #0
 801ccb0:	4619      	mov	r1, r3
 801ccb2:	4845      	ldr	r0, [pc, #276]	@ (801cdc8 <createfile+0x128>)
 801ccb4:	f7ec ff67 	bl	8009b86 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801ccb8:	f107 0308 	add.w	r3, r7, #8
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	4619      	mov	r1, r3
 801ccc0:	4841      	ldr	r0, [pc, #260]	@ (801cdc8 <createfile+0x128>)
 801ccc2:	f7ec fe7e 	bl	80099c2 <HAL_RTC_GetTime>


	//if rtc backup register has nothing or our filename with foirmat is not same as filename then create a file otheriwse just go forward
	if((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || !strstr(_Flash_Packet.filename_with_format,_Flash_Packet.File_Name)
 801ccc6:	2101      	movs	r1, #1
 801ccc8:	483f      	ldr	r0, [pc, #252]	@ (801cdc8 <createfile+0x128>)
 801ccca:	f7ed fa0d 	bl	800a0e8 <HAL_RTCEx_BKUPRead>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	d11b      	bne.n	801cd10 <createfile+0x70>
 801ccd8:	493c      	ldr	r1, [pc, #240]	@ (801cdcc <createfile+0x12c>)
 801ccda:	483d      	ldr	r0, [pc, #244]	@ (801cdd0 <createfile+0x130>)
 801ccdc:	f002 f8f0 	bl	801eec0 <strstr>
 801cce0:	4603      	mov	r3, r0
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d014      	beq.n	801cd10 <createfile+0x70>
			|| _RunTime_Packet.year_changed || _RunTime_Packet.filename_changed || _RunTime_Packet.fileformat_changed || (_RunTime_Packet.sd_file_creation == -1))
 801cce6:	4b3b      	ldr	r3, [pc, #236]	@ (801cdd4 <createfile+0x134>)
 801cce8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d10f      	bne.n	801cd10 <createfile+0x70>
 801ccf0:	4b38      	ldr	r3, [pc, #224]	@ (801cdd4 <createfile+0x134>)
 801ccf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d10a      	bne.n	801cd10 <createfile+0x70>
 801ccfa:	4b36      	ldr	r3, [pc, #216]	@ (801cdd4 <createfile+0x134>)
 801ccfc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d105      	bne.n	801cd10 <createfile+0x70>
 801cd04:	4b33      	ldr	r3, [pc, #204]	@ (801cdd4 <createfile+0x134>)
 801cd06:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 801cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd0e:	d121      	bne.n	801cd54 <createfile+0xb4>
	{
	  sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801cd10:	7ffb      	ldrb	r3, [r7, #31]
 801cd12:	4618      	mov	r0, r3
 801cd14:	7f7b      	ldrb	r3, [r7, #29]
 801cd16:	461a      	mov	r2, r3
 801cd18:	7fbb      	ldrb	r3, [r7, #30]
 801cd1a:	4619      	mov	r1, r3
 801cd1c:	683b      	ldr	r3, [r7, #0]
 801cd1e:	9302      	str	r3, [sp, #8]
 801cd20:	9101      	str	r1, [sp, #4]
 801cd22:	9200      	str	r2, [sp, #0]
 801cd24:	4603      	mov	r3, r0
 801cd26:	687a      	ldr	r2, [r7, #4]
 801cd28:	492b      	ldr	r1, [pc, #172]	@ (801cdd8 <createfile+0x138>)
 801cd2a:	4829      	ldr	r0, [pc, #164]	@ (801cdd0 <createfile+0x130>)
 801cd2c:	f001 ff0c 	bl	801eb48 <siprintf>
	  sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cd30:	7ffb      	ldrb	r3, [r7, #31]
 801cd32:	4619      	mov	r1, r3
 801cd34:	7f7b      	ldrb	r3, [r7, #29]
 801cd36:	7fba      	ldrb	r2, [r7, #30]
 801cd38:	9201      	str	r2, [sp, #4]
 801cd3a:	9300      	str	r3, [sp, #0]
 801cd3c:	460b      	mov	r3, r1
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	4926      	ldr	r1, [pc, #152]	@ (801cddc <createfile+0x13c>)
 801cd42:	4827      	ldr	r0, [pc, #156]	@ (801cde0 <createfile+0x140>)
 801cd44:	f001 ff00 	bl	801eb48 <siprintf>
	  set_param_flags();
 801cd48:	4b26      	ldr	r3, [pc, #152]	@ (801cde4 <createfile+0x144>)
 801cd4a:	2201      	movs	r2, #1
 801cd4c:	701a      	strb	r2, [r3, #0]
 801cd4e:	4b26      	ldr	r3, [pc, #152]	@ (801cde8 <createfile+0x148>)
 801cd50:	2201      	movs	r2, #1
 801cd52:	701a      	strb	r2, [r3, #0]
	}
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cd54:	4825      	ldr	r0, [pc, #148]	@ (801cdec <createfile+0x14c>)
 801cd56:	f7ff f977 	bl	801c048 <Mount_SD>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d002      	beq.n	801cd66 <createfile+0xc6>
	} else {
		//	__enable_irq();
		return -1;
 801cd60:	f04f 33ff 	mov.w	r3, #4294967295
 801cd64:	e02b      	b.n	801cdbe <createfile+0x11e>
	}
	Unmount_SD("/");
 801cd66:	4821      	ldr	r0, [pc, #132]	@ (801cdec <createfile+0x14c>)
 801cd68:	f7ff f99a 	bl	801c0a0 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cd6c:	481f      	ldr	r0, [pc, #124]	@ (801cdec <createfile+0x14c>)
 801cd6e:	f7ff f96b 	bl	801c048 <Mount_SD>
 801cd72:	4603      	mov	r3, r0
 801cd74:	461a      	mov	r2, r3
 801cd76:	4b1e      	ldr	r3, [pc, #120]	@ (801cdf0 <createfile+0x150>)
 801cd78:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cd7a:	4b1d      	ldr	r3, [pc, #116]	@ (801cdf0 <createfile+0x150>)
 801cd7c:	781b      	ldrb	r3, [r3, #0]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d119      	bne.n	801cdb6 <createfile+0x116>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cd82:	4813      	ldr	r0, [pc, #76]	@ (801cdd0 <createfile+0x130>)
 801cd84:	f7ff f9b4 	bl	801c0f0 <Create_File>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	461a      	mov	r2, r3
 801cd8c:	4b18      	ldr	r3, [pc, #96]	@ (801cdf0 <createfile+0x150>)
 801cd8e:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cd90:	4816      	ldr	r0, [pc, #88]	@ (801cdec <createfile+0x14c>)
 801cd92:	f7ff f985 	bl	801c0a0 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801cd96:	4b0f      	ldr	r3, [pc, #60]	@ (801cdd4 <createfile+0x134>)
 801cd98:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d00d      	beq.n	801cdbc <createfile+0x11c>
			if (file_already_exist) {
 801cda0:	4b14      	ldr	r3, [pc, #80]	@ (801cdf4 <createfile+0x154>)
 801cda2:	781b      	ldrb	r3, [r3, #0]
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d003      	beq.n	801cdb0 <createfile+0x110>
				file_already_exist = 0;
 801cda8:	4b12      	ldr	r3, [pc, #72]	@ (801cdf4 <createfile+0x154>)
 801cdaa:	2200      	movs	r2, #0
 801cdac:	701a      	strb	r2, [r3, #0]
 801cdae:	e005      	b.n	801cdbc <createfile+0x11c>
			} else {
				csv_header();  //json does not require an header only csv
 801cdb0:	f7ff fe4a 	bl	801ca48 <csv_header>
 801cdb4:	e002      	b.n	801cdbc <createfile+0x11c>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801cdb6:	f04f 33ff 	mov.w	r3, #4294967295
 801cdba:	e000      	b.n	801cdbe <createfile+0x11e>
	}
//	__enable_irq();
	return 0;
 801cdbc:	2300      	movs	r3, #0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3720      	adds	r7, #32
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	bd80      	pop	{r7, pc}
 801cdc6:	bf00      	nop
 801cdc8:	20001898 	.word	0x20001898
 801cdcc:	200012cc 	.word	0x200012cc
 801cdd0:	20001461 	.word	0x20001461
 801cdd4:	20001530 	.word	0x20001530
 801cdd8:	08024e20 	.word	0x08024e20
 801cddc:	08024e34 	.word	0x08024e34
 801cde0:	200014c5 	.word	0x200014c5
 801cde4:	20001579 	.word	0x20001579
 801cde8:	2000157a 	.word	0x2000157a
 801cdec:	08024c4c 	.word	0x08024c4c
 801cdf0:	20002320 	.word	0x20002320
 801cdf4:	20002321 	.word	0x20002321

0801cdf8 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801cdfc:	4905      	ldr	r1, [pc, #20]	@ (801ce14 <MX_USB_DEVICE_DeInit+0x1c>)
 801cdfe:	4806      	ldr	r0, [pc, #24]	@ (801ce18 <MX_USB_DEVICE_DeInit+0x20>)
 801ce00:	f7f8 ff32 	bl	8015c68 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801ce04:	4804      	ldr	r0, [pc, #16]	@ (801ce18 <MX_USB_DEVICE_DeInit+0x20>)
 801ce06:	f7fa ff28 	bl	8017c5a <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801ce0a:	4803      	ldr	r0, [pc, #12]	@ (801ce18 <MX_USB_DEVICE_DeInit+0x20>)
 801ce0c:	f7fa feb3 	bl	8017b76 <USBD_DeInit>

}
 801ce10:	bf00      	nop
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	2000011c 	.word	0x2000011c
 801ce18:	2000242c 	.word	0x2000242c

0801ce1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ce20:	2200      	movs	r2, #0
 801ce22:	4912      	ldr	r1, [pc, #72]	@ (801ce6c <MX_USB_DEVICE_Init+0x50>)
 801ce24:	4812      	ldr	r0, [pc, #72]	@ (801ce70 <MX_USB_DEVICE_Init+0x54>)
 801ce26:	f7fa fe76 	bl	8017b16 <USBD_Init>
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d001      	beq.n	801ce34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ce30:	f7e6 fc40 	bl	80036b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801ce34:	490f      	ldr	r1, [pc, #60]	@ (801ce74 <MX_USB_DEVICE_Init+0x58>)
 801ce36:	480e      	ldr	r0, [pc, #56]	@ (801ce70 <MX_USB_DEVICE_Init+0x54>)
 801ce38:	f7fa fecd 	bl	8017bd6 <USBD_RegisterClass>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d001      	beq.n	801ce46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ce42:	f7e6 fc37 	bl	80036b4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801ce46:	490c      	ldr	r1, [pc, #48]	@ (801ce78 <MX_USB_DEVICE_Init+0x5c>)
 801ce48:	4809      	ldr	r0, [pc, #36]	@ (801ce70 <MX_USB_DEVICE_Init+0x54>)
 801ce4a:	f7f9 f915 	bl	8016078 <USBD_MSC_RegisterStorage>
 801ce4e:	4603      	mov	r3, r0
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d001      	beq.n	801ce58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ce54:	f7e6 fc2e 	bl	80036b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ce58:	4805      	ldr	r0, [pc, #20]	@ (801ce70 <MX_USB_DEVICE_Init+0x54>)
 801ce5a:	f7fa fef2 	bl	8017c42 <USBD_Start>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d001      	beq.n	801ce68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ce64:	f7e6 fc26 	bl	80036b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ce68:	bf00      	nop
 801ce6a:	bd80      	pop	{r7, pc}
 801ce6c:	200000cc 	.word	0x200000cc
 801ce70:	2000242c 	.word	0x2000242c
 801ce74:	2000004c 	.word	0x2000004c
 801ce78:	2000011c 	.word	0x2000011c

0801ce7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce7c:	b480      	push	{r7}
 801ce7e:	b083      	sub	sp, #12
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	4603      	mov	r3, r0
 801ce84:	6039      	str	r1, [r7, #0]
 801ce86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	2212      	movs	r2, #18
 801ce8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ce8e:	4b03      	ldr	r3, [pc, #12]	@ (801ce9c <USBD_FS_DeviceDescriptor+0x20>)
}
 801ce90:	4618      	mov	r0, r3
 801ce92:	370c      	adds	r7, #12
 801ce94:	46bd      	mov	sp, r7
 801ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce9a:	4770      	bx	lr
 801ce9c:	200000e8 	.word	0x200000e8

0801cea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cea0:	b480      	push	{r7}
 801cea2:	b083      	sub	sp, #12
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	4603      	mov	r3, r0
 801cea8:	6039      	str	r1, [r7, #0]
 801ceaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ceac:	683b      	ldr	r3, [r7, #0]
 801ceae:	2204      	movs	r2, #4
 801ceb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ceb2:	4b03      	ldr	r3, [pc, #12]	@ (801cec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	370c      	adds	r7, #12
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebe:	4770      	bx	lr
 801cec0:	200000fc 	.word	0x200000fc

0801cec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b082      	sub	sp, #8
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	4603      	mov	r3, r0
 801cecc:	6039      	str	r1, [r7, #0]
 801cece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ced0:	79fb      	ldrb	r3, [r7, #7]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d105      	bne.n	801cee2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ced6:	683a      	ldr	r2, [r7, #0]
 801ced8:	4907      	ldr	r1, [pc, #28]	@ (801cef8 <USBD_FS_ProductStrDescriptor+0x34>)
 801ceda:	4808      	ldr	r0, [pc, #32]	@ (801cefc <USBD_FS_ProductStrDescriptor+0x38>)
 801cedc:	f7fc f87c 	bl	8018fd8 <USBD_GetString>
 801cee0:	e004      	b.n	801ceec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	4904      	ldr	r1, [pc, #16]	@ (801cef8 <USBD_FS_ProductStrDescriptor+0x34>)
 801cee6:	4805      	ldr	r0, [pc, #20]	@ (801cefc <USBD_FS_ProductStrDescriptor+0x38>)
 801cee8:	f7fc f876 	bl	8018fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ceec:	4b02      	ldr	r3, [pc, #8]	@ (801cef8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ceee:	4618      	mov	r0, r3
 801cef0:	3708      	adds	r7, #8
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
 801cef6:	bf00      	nop
 801cef8:	20002708 	.word	0x20002708
 801cefc:	08024e48 	.word	0x08024e48

0801cf00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf00:	b580      	push	{r7, lr}
 801cf02:	b082      	sub	sp, #8
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	4603      	mov	r3, r0
 801cf08:	6039      	str	r1, [r7, #0]
 801cf0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cf0c:	683a      	ldr	r2, [r7, #0]
 801cf0e:	4904      	ldr	r1, [pc, #16]	@ (801cf20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801cf10:	4804      	ldr	r0, [pc, #16]	@ (801cf24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cf12:	f7fc f861 	bl	8018fd8 <USBD_GetString>
  return USBD_StrDesc;
 801cf16:	4b02      	ldr	r3, [pc, #8]	@ (801cf20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cf18:	4618      	mov	r0, r3
 801cf1a:	3708      	adds	r7, #8
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	bd80      	pop	{r7, pc}
 801cf20:	20002708 	.word	0x20002708
 801cf24:	08024e5c 	.word	0x08024e5c

0801cf28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b082      	sub	sp, #8
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	4603      	mov	r3, r0
 801cf30:	6039      	str	r1, [r7, #0]
 801cf32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cf34:	683b      	ldr	r3, [r7, #0]
 801cf36:	221a      	movs	r2, #26
 801cf38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cf3a:	f000 f843 	bl	801cfc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cf3e:	4b02      	ldr	r3, [pc, #8]	@ (801cf48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cf40:	4618      	mov	r0, r3
 801cf42:	3708      	adds	r7, #8
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd80      	pop	{r7, pc}
 801cf48:	20000100 	.word	0x20000100

0801cf4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b082      	sub	sp, #8
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	4603      	mov	r3, r0
 801cf54:	6039      	str	r1, [r7, #0]
 801cf56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801cf58:	79fb      	ldrb	r3, [r7, #7]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d105      	bne.n	801cf6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf5e:	683a      	ldr	r2, [r7, #0]
 801cf60:	4907      	ldr	r1, [pc, #28]	@ (801cf80 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf62:	4808      	ldr	r0, [pc, #32]	@ (801cf84 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf64:	f7fc f838 	bl	8018fd8 <USBD_GetString>
 801cf68:	e004      	b.n	801cf74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf6a:	683a      	ldr	r2, [r7, #0]
 801cf6c:	4904      	ldr	r1, [pc, #16]	@ (801cf80 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf6e:	4805      	ldr	r0, [pc, #20]	@ (801cf84 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf70:	f7fc f832 	bl	8018fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf74:	4b02      	ldr	r3, [pc, #8]	@ (801cf80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cf76:	4618      	mov	r0, r3
 801cf78:	3708      	adds	r7, #8
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}
 801cf7e:	bf00      	nop
 801cf80:	20002708 	.word	0x20002708
 801cf84:	08024e70 	.word	0x08024e70

0801cf88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b082      	sub	sp, #8
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	4603      	mov	r3, r0
 801cf90:	6039      	str	r1, [r7, #0]
 801cf92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cf94:	79fb      	ldrb	r3, [r7, #7]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d105      	bne.n	801cfa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf9a:	683a      	ldr	r2, [r7, #0]
 801cf9c:	4907      	ldr	r1, [pc, #28]	@ (801cfbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cf9e:	4808      	ldr	r0, [pc, #32]	@ (801cfc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cfa0:	f7fc f81a 	bl	8018fd8 <USBD_GetString>
 801cfa4:	e004      	b.n	801cfb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cfa6:	683a      	ldr	r2, [r7, #0]
 801cfa8:	4904      	ldr	r1, [pc, #16]	@ (801cfbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cfaa:	4805      	ldr	r0, [pc, #20]	@ (801cfc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cfac:	f7fc f814 	bl	8018fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cfb0:	4b02      	ldr	r3, [pc, #8]	@ (801cfbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	3708      	adds	r7, #8
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	20002708 	.word	0x20002708
 801cfc0:	08024e7c 	.word	0x08024e7c

0801cfc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b084      	sub	sp, #16
 801cfc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801cfca:	68fa      	ldr	r2, [r7, #12]
 801cfcc:	68bb      	ldr	r3, [r7, #8]
 801cfce:	4413      	add	r3, r2
 801cfd0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d009      	beq.n	801cfec <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cfd8:	2208      	movs	r2, #8
 801cfda:	4906      	ldr	r1, [pc, #24]	@ (801cff4 <Get_SerialNum+0x30>)
 801cfdc:	68f8      	ldr	r0, [r7, #12]
 801cfde:	f000 f80d 	bl	801cffc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cfe2:	2204      	movs	r2, #4
 801cfe4:	4904      	ldr	r1, [pc, #16]	@ (801cff8 <Get_SerialNum+0x34>)
 801cfe6:	6878      	ldr	r0, [r7, #4]
 801cfe8:	f000 f808 	bl	801cffc <IntToUnicode>
  }
}
 801cfec:	bf00      	nop
 801cfee:	3710      	adds	r7, #16
 801cff0:	46bd      	mov	sp, r7
 801cff2:	bd80      	pop	{r7, pc}
 801cff4:	20000102 	.word	0x20000102
 801cff8:	20000112 	.word	0x20000112

0801cffc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cffc:	b480      	push	{r7}
 801cffe:	b087      	sub	sp, #28
 801d000:	af00      	add	r7, sp, #0
 801d002:	60f8      	str	r0, [r7, #12]
 801d004:	60b9      	str	r1, [r7, #8]
 801d006:	4613      	mov	r3, r2
 801d008:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d00a:	2300      	movs	r3, #0
 801d00c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d00e:	2300      	movs	r3, #0
 801d010:	75fb      	strb	r3, [r7, #23]
 801d012:	e027      	b.n	801d064 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	0f1b      	lsrs	r3, r3, #28
 801d018:	2b09      	cmp	r3, #9
 801d01a:	d80b      	bhi.n	801d034 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	0f1b      	lsrs	r3, r3, #28
 801d020:	b2da      	uxtb	r2, r3
 801d022:	7dfb      	ldrb	r3, [r7, #23]
 801d024:	005b      	lsls	r3, r3, #1
 801d026:	4619      	mov	r1, r3
 801d028:	68bb      	ldr	r3, [r7, #8]
 801d02a:	440b      	add	r3, r1
 801d02c:	3230      	adds	r2, #48	@ 0x30
 801d02e:	b2d2      	uxtb	r2, r2
 801d030:	701a      	strb	r2, [r3, #0]
 801d032:	e00a      	b.n	801d04a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	0f1b      	lsrs	r3, r3, #28
 801d038:	b2da      	uxtb	r2, r3
 801d03a:	7dfb      	ldrb	r3, [r7, #23]
 801d03c:	005b      	lsls	r3, r3, #1
 801d03e:	4619      	mov	r1, r3
 801d040:	68bb      	ldr	r3, [r7, #8]
 801d042:	440b      	add	r3, r1
 801d044:	3237      	adds	r2, #55	@ 0x37
 801d046:	b2d2      	uxtb	r2, r2
 801d048:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	011b      	lsls	r3, r3, #4
 801d04e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d050:	7dfb      	ldrb	r3, [r7, #23]
 801d052:	005b      	lsls	r3, r3, #1
 801d054:	3301      	adds	r3, #1
 801d056:	68ba      	ldr	r2, [r7, #8]
 801d058:	4413      	add	r3, r2
 801d05a:	2200      	movs	r2, #0
 801d05c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d05e:	7dfb      	ldrb	r3, [r7, #23]
 801d060:	3301      	adds	r3, #1
 801d062:	75fb      	strb	r3, [r7, #23]
 801d064:	7dfa      	ldrb	r2, [r7, #23]
 801d066:	79fb      	ldrb	r3, [r7, #7]
 801d068:	429a      	cmp	r2, r3
 801d06a:	d3d3      	bcc.n	801d014 <IntToUnicode+0x18>
  }
}
 801d06c:	bf00      	nop
 801d06e:	bf00      	nop
 801d070:	371c      	adds	r7, #28
 801d072:	46bd      	mov	sp, r7
 801d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d078:	4770      	bx	lr

0801d07a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801d07a:	b480      	push	{r7}
 801d07c:	b083      	sub	sp, #12
 801d07e:	af00      	add	r7, sp, #0
 801d080:	4603      	mov	r3, r0
 801d082:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801d084:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801d086:	4618      	mov	r0, r3
 801d088:	370c      	adds	r7, #12
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr
	...

0801d094 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801d094:	b580      	push	{r7, lr}
 801d096:	b08e      	sub	sp, #56	@ 0x38
 801d098:	af00      	add	r7, sp, #0
 801d09a:	4603      	mov	r3, r0
 801d09c:	60b9      	str	r1, [r7, #8]
 801d09e:	607a      	str	r2, [r7, #4]
 801d0a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801d0a2:	23ff      	movs	r3, #255	@ 0xff
 801d0a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801d0a8:	f107 0314 	add.w	r3, r7, #20
 801d0ac:	4619      	mov	r1, r3
 801d0ae:	480a      	ldr	r0, [pc, #40]	@ (801d0d8 <STORAGE_GetCapacity_FS+0x44>)
 801d0b0:	f7ed fe04 	bl	800acbc <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0b6:	1e5a      	subs	r2, r3, #1
 801d0b8:	68bb      	ldr	r3, [r7, #8]
 801d0ba:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0be:	b29a      	uxth	r2, r3
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801d0c4:	2300      	movs	r3, #0
 801d0c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801d0ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	3738      	adds	r7, #56	@ 0x38
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	bd80      	pop	{r7, pc}
 801d0d6:	bf00      	nop
 801d0d8:	200018b8 	.word	0x200018b8

0801d0dc <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801d0dc:	b480      	push	{r7}
 801d0de:	b083      	sub	sp, #12
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801d0e6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	370c      	adds	r7, #12
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0f2:	4770      	bx	lr

0801d0f4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d0f4:	b480      	push	{r7}
 801d0f6:	b083      	sub	sp, #12
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801d0fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d100:	4618      	mov	r0, r3
 801d102:	370c      	adds	r7, #12
 801d104:	46bd      	mov	sp, r7
 801d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d10a:	4770      	bx	lr

0801d10c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b088      	sub	sp, #32
 801d110:	af02      	add	r7, sp, #8
 801d112:	60b9      	str	r1, [r7, #8]
 801d114:	607a      	str	r2, [r7, #4]
 801d116:	461a      	mov	r2, r3
 801d118:	4603      	mov	r3, r0
 801d11a:	73fb      	strb	r3, [r7, #15]
 801d11c:	4613      	mov	r3, r2
 801d11e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801d120:	23ff      	movs	r3, #255	@ 0xff
 801d122:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801d124:	f7e7 f810 	bl	8004148 <HAL_GetTick>
 801d128:	4603      	mov	r3, r0
 801d12a:	4a0d      	ldr	r2, [pc, #52]	@ (801d160 <STORAGE_Read_FS+0x54>)
 801d12c:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d12e:	89bb      	ldrh	r3, [r7, #12]
 801d130:	f04f 32ff 	mov.w	r2, #4294967295
 801d134:	9200      	str	r2, [sp, #0]
 801d136:	687a      	ldr	r2, [r7, #4]
 801d138:	68b9      	ldr	r1, [r7, #8]
 801d13a:	480a      	ldr	r0, [pc, #40]	@ (801d164 <STORAGE_Read_FS+0x58>)
 801d13c:	f7ed f8a6 	bl	800a28c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d140:	bf00      	nop
 801d142:	4808      	ldr	r0, [pc, #32]	@ (801d164 <STORAGE_Read_FS+0x58>)
 801d144:	f7ed fde6 	bl	800ad14 <HAL_SD_GetCardState>
 801d148:	4603      	mov	r3, r0
 801d14a:	2b04      	cmp	r3, #4
 801d14c:	d1f9      	bne.n	801d142 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801d14e:	2300      	movs	r3, #0
 801d150:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d152:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801d156:	4618      	mov	r0, r3
 801d158:	3718      	adds	r7, #24
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bd80      	pop	{r7, pc}
 801d15e:	bf00      	nop
 801d160:	200017c0 	.word	0x200017c0
 801d164:	200018b8 	.word	0x200018b8

0801d168 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b088      	sub	sp, #32
 801d16c:	af02      	add	r7, sp, #8
 801d16e:	60b9      	str	r1, [r7, #8]
 801d170:	607a      	str	r2, [r7, #4]
 801d172:	461a      	mov	r2, r3
 801d174:	4603      	mov	r3, r0
 801d176:	73fb      	strb	r3, [r7, #15]
 801d178:	4613      	mov	r3, r2
 801d17a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801d17c:	23ff      	movs	r3, #255	@ 0xff
 801d17e:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d180:	89bb      	ldrh	r3, [r7, #12]
 801d182:	f04f 32ff 	mov.w	r2, #4294967295
 801d186:	9200      	str	r2, [sp, #0]
 801d188:	687a      	ldr	r2, [r7, #4]
 801d18a:	68b9      	ldr	r1, [r7, #8]
 801d18c:	4808      	ldr	r0, [pc, #32]	@ (801d1b0 <STORAGE_Write_FS+0x48>)
 801d18e:	f7ed fa63 	bl	800a658 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d192:	bf00      	nop
 801d194:	4806      	ldr	r0, [pc, #24]	@ (801d1b0 <STORAGE_Write_FS+0x48>)
 801d196:	f7ed fdbd 	bl	800ad14 <HAL_SD_GetCardState>
 801d19a:	4603      	mov	r3, r0
 801d19c:	2b04      	cmp	r3, #4
 801d19e:	d1f9      	bne.n	801d194 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d1a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3718      	adds	r7, #24
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}
 801d1b0:	200018b8 	.word	0x200018b8

0801d1b4 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d1b4:	b480      	push	{r7}
 801d1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d1b8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1c2:	4770      	bx	lr

0801d1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b08a      	sub	sp, #40	@ 0x28
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d1cc:	f107 0314 	add.w	r3, r7, #20
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	601a      	str	r2, [r3, #0]
 801d1d4:	605a      	str	r2, [r3, #4]
 801d1d6:	609a      	str	r2, [r3, #8]
 801d1d8:	60da      	str	r2, [r3, #12]
 801d1da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d1e4:	d13a      	bne.n	801d25c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	613b      	str	r3, [r7, #16]
 801d1ea:	4b1e      	ldr	r3, [pc, #120]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1ee:	4a1d      	ldr	r2, [pc, #116]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d1f0:	f043 0301 	orr.w	r3, r3, #1
 801d1f4:	6313      	str	r3, [r2, #48]	@ 0x30
 801d1f6:	4b1b      	ldr	r3, [pc, #108]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1fa:	f003 0301 	and.w	r3, r3, #1
 801d1fe:	613b      	str	r3, [r7, #16]
 801d200:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d202:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d208:	2302      	movs	r3, #2
 801d20a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d20c:	2300      	movs	r3, #0
 801d20e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d210:	2303      	movs	r3, #3
 801d212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d214:	230a      	movs	r3, #10
 801d216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d218:	f107 0314 	add.w	r3, r7, #20
 801d21c:	4619      	mov	r1, r3
 801d21e:	4812      	ldr	r0, [pc, #72]	@ (801d268 <HAL_PCD_MspInit+0xa4>)
 801d220:	f7e8 fcf6 	bl	8005c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d224:	4b0f      	ldr	r3, [pc, #60]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d228:	4a0e      	ldr	r2, [pc, #56]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d22e:	6353      	str	r3, [r2, #52]	@ 0x34
 801d230:	2300      	movs	r3, #0
 801d232:	60fb      	str	r3, [r7, #12]
 801d234:	4b0b      	ldr	r3, [pc, #44]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d238:	4a0a      	ldr	r2, [pc, #40]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d23a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d23e:	6453      	str	r3, [r2, #68]	@ 0x44
 801d240:	4b08      	ldr	r3, [pc, #32]	@ (801d264 <HAL_PCD_MspInit+0xa0>)
 801d242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d248:	60fb      	str	r3, [r7, #12]
 801d24a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d24c:	2200      	movs	r2, #0
 801d24e:	2100      	movs	r1, #0
 801d250:	2043      	movs	r0, #67	@ 0x43
 801d252:	f7e7 fd5c 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d256:	2043      	movs	r0, #67	@ 0x43
 801d258:	f7e7 fd75 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d25c:	bf00      	nop
 801d25e:	3728      	adds	r7, #40	@ 0x28
 801d260:	46bd      	mov	sp, r7
 801d262:	bd80      	pop	{r7, pc}
 801d264:	40023800 	.word	0x40023800
 801d268:	40020000 	.word	0x40020000

0801d26c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b082      	sub	sp, #8
 801d270:	af00      	add	r7, sp, #0
 801d272:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d27c:	d10d      	bne.n	801d29a <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d27e:	4b09      	ldr	r3, [pc, #36]	@ (801d2a4 <HAL_PCD_MspDeInit+0x38>)
 801d280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d282:	4a08      	ldr	r2, [pc, #32]	@ (801d2a4 <HAL_PCD_MspDeInit+0x38>)
 801d284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d288:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d28a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d28e:	4806      	ldr	r0, [pc, #24]	@ (801d2a8 <HAL_PCD_MspDeInit+0x3c>)
 801d290:	f7e8 fe42 	bl	8005f18 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d294:	2043      	movs	r0, #67	@ 0x43
 801d296:	f7e7 fd64 	bl	8004d62 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d29a:	bf00      	nop
 801d29c:	3708      	adds	r7, #8
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	bd80      	pop	{r7, pc}
 801d2a2:	bf00      	nop
 801d2a4:	40023800 	.word	0x40023800
 801d2a8:	40020000 	.word	0x40020000

0801d2ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d2c0:	4619      	mov	r1, r3
 801d2c2:	4610      	mov	r0, r2
 801d2c4:	f7fa fd25 	bl	8017d12 <USBD_LL_SetupStage>
}
 801d2c8:	bf00      	nop
 801d2ca:	3708      	adds	r7, #8
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bd80      	pop	{r7, pc}

0801d2d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
 801d2d8:	460b      	mov	r3, r1
 801d2da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d2e2:	78fa      	ldrb	r2, [r7, #3]
 801d2e4:	6879      	ldr	r1, [r7, #4]
 801d2e6:	4613      	mov	r3, r2
 801d2e8:	00db      	lsls	r3, r3, #3
 801d2ea:	4413      	add	r3, r2
 801d2ec:	009b      	lsls	r3, r3, #2
 801d2ee:	440b      	add	r3, r1
 801d2f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d2f4:	681a      	ldr	r2, [r3, #0]
 801d2f6:	78fb      	ldrb	r3, [r7, #3]
 801d2f8:	4619      	mov	r1, r3
 801d2fa:	f7fa fd5f 	bl	8017dbc <USBD_LL_DataOutStage>
}
 801d2fe:	bf00      	nop
 801d300:	3708      	adds	r7, #8
 801d302:	46bd      	mov	sp, r7
 801d304:	bd80      	pop	{r7, pc}

0801d306 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d306:	b580      	push	{r7, lr}
 801d308:	b082      	sub	sp, #8
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	6078      	str	r0, [r7, #4]
 801d30e:	460b      	mov	r3, r1
 801d310:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d318:	78fa      	ldrb	r2, [r7, #3]
 801d31a:	6879      	ldr	r1, [r7, #4]
 801d31c:	4613      	mov	r3, r2
 801d31e:	00db      	lsls	r3, r3, #3
 801d320:	4413      	add	r3, r2
 801d322:	009b      	lsls	r3, r3, #2
 801d324:	440b      	add	r3, r1
 801d326:	3320      	adds	r3, #32
 801d328:	681a      	ldr	r2, [r3, #0]
 801d32a:	78fb      	ldrb	r3, [r7, #3]
 801d32c:	4619      	mov	r1, r3
 801d32e:	f7fa fdf8 	bl	8017f22 <USBD_LL_DataInStage>
}
 801d332:	bf00      	nop
 801d334:	3708      	adds	r7, #8
 801d336:	46bd      	mov	sp, r7
 801d338:	bd80      	pop	{r7, pc}

0801d33a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d33a:	b580      	push	{r7, lr}
 801d33c:	b082      	sub	sp, #8
 801d33e:	af00      	add	r7, sp, #0
 801d340:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d348:	4618      	mov	r0, r3
 801d34a:	f7fa ff32 	bl	80181b2 <USBD_LL_SOF>
}
 801d34e:	bf00      	nop
 801d350:	3708      	adds	r7, #8
 801d352:	46bd      	mov	sp, r7
 801d354:	bd80      	pop	{r7, pc}

0801d356 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d356:	b580      	push	{r7, lr}
 801d358:	b084      	sub	sp, #16
 801d35a:	af00      	add	r7, sp, #0
 801d35c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d35e:	2301      	movs	r3, #1
 801d360:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	79db      	ldrb	r3, [r3, #7]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d102      	bne.n	801d370 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d36a:	2300      	movs	r3, #0
 801d36c:	73fb      	strb	r3, [r7, #15]
 801d36e:	e008      	b.n	801d382 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	79db      	ldrb	r3, [r3, #7]
 801d374:	2b02      	cmp	r3, #2
 801d376:	d102      	bne.n	801d37e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d378:	2301      	movs	r3, #1
 801d37a:	73fb      	strb	r3, [r7, #15]
 801d37c:	e001      	b.n	801d382 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d37e:	f7e6 f999 	bl	80036b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d388:	7bfa      	ldrb	r2, [r7, #15]
 801d38a:	4611      	mov	r1, r2
 801d38c:	4618      	mov	r0, r3
 801d38e:	f7fa fecc 	bl	801812a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d398:	4618      	mov	r0, r3
 801d39a:	f7fa fe74 	bl	8018086 <USBD_LL_Reset>
}
 801d39e:	bf00      	nop
 801d3a0:	3710      	adds	r7, #16
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	bd80      	pop	{r7, pc}
	...

0801d3a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b082      	sub	sp, #8
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7fa fec7 	bl	801814a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	687a      	ldr	r2, [r7, #4]
 801d3c8:	6812      	ldr	r2, [r2, #0]
 801d3ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d3ce:	f043 0301 	orr.w	r3, r3, #1
 801d3d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	7adb      	ldrb	r3, [r3, #11]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d005      	beq.n	801d3e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d3dc:	4b04      	ldr	r3, [pc, #16]	@ (801d3f0 <HAL_PCD_SuspendCallback+0x48>)
 801d3de:	691b      	ldr	r3, [r3, #16]
 801d3e0:	4a03      	ldr	r2, [pc, #12]	@ (801d3f0 <HAL_PCD_SuspendCallback+0x48>)
 801d3e2:	f043 0306 	orr.w	r3, r3, #6
 801d3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d3e8:	bf00      	nop
 801d3ea:	3708      	adds	r7, #8
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	bd80      	pop	{r7, pc}
 801d3f0:	e000ed00 	.word	0xe000ed00

0801d3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b082      	sub	sp, #8
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d402:	4618      	mov	r0, r3
 801d404:	f7fa febd 	bl	8018182 <USBD_LL_Resume>
}
 801d408:	bf00      	nop
 801d40a:	3708      	adds	r7, #8
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	460b      	mov	r3, r1
 801d41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d422:	78fa      	ldrb	r2, [r7, #3]
 801d424:	4611      	mov	r1, r2
 801d426:	4618      	mov	r0, r3
 801d428:	f7fa ff15 	bl	8018256 <USBD_LL_IsoOUTIncomplete>
}
 801d42c:	bf00      	nop
 801d42e:	3708      	adds	r7, #8
 801d430:	46bd      	mov	sp, r7
 801d432:	bd80      	pop	{r7, pc}

0801d434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b082      	sub	sp, #8
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]
 801d43c:	460b      	mov	r3, r1
 801d43e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d446:	78fa      	ldrb	r2, [r7, #3]
 801d448:	4611      	mov	r1, r2
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7fa fed1 	bl	80181f2 <USBD_LL_IsoINIncomplete>
}
 801d450:	bf00      	nop
 801d452:	3708      	adds	r7, #8
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}

0801d458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b082      	sub	sp, #8
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d466:	4618      	mov	r0, r3
 801d468:	f7fa ff27 	bl	80182ba <USBD_LL_DevConnected>
}
 801d46c:	bf00      	nop
 801d46e:	3708      	adds	r7, #8
 801d470:	46bd      	mov	sp, r7
 801d472:	bd80      	pop	{r7, pc}

0801d474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d474:	b580      	push	{r7, lr}
 801d476:	b082      	sub	sp, #8
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d482:	4618      	mov	r0, r3
 801d484:	f7fa ff24 	bl	80182d0 <USBD_LL_DevDisconnected>
}
 801d488:	bf00      	nop
 801d48a:	3708      	adds	r7, #8
 801d48c:	46bd      	mov	sp, r7
 801d48e:	bd80      	pop	{r7, pc}

0801d490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b082      	sub	sp, #8
 801d494:	af00      	add	r7, sp, #0
 801d496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d13c      	bne.n	801d51a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d4a0:	4a20      	ldr	r2, [pc, #128]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	4a1e      	ldr	r2, [pc, #120]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d4b0:	4b1c      	ldr	r3, [pc, #112]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d4b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d4b8:	4b1a      	ldr	r3, [pc, #104]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4ba:	2204      	movs	r2, #4
 801d4bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d4be:	4b19      	ldr	r3, [pc, #100]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4c0:	2202      	movs	r2, #2
 801d4c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d4c4:	4b17      	ldr	r3, [pc, #92]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d4ca:	4b16      	ldr	r3, [pc, #88]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4cc:	2202      	movs	r2, #2
 801d4ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d4d0:	4b14      	ldr	r3, [pc, #80]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d4d6:	4b13      	ldr	r3, [pc, #76]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4d8:	2200      	movs	r2, #0
 801d4da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d4dc:	4b11      	ldr	r3, [pc, #68]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4de:	2200      	movs	r2, #0
 801d4e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d4e2:	4b10      	ldr	r3, [pc, #64]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d4e8:	4b0e      	ldr	r3, [pc, #56]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4ea:	2200      	movs	r2, #0
 801d4ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d4ee:	480d      	ldr	r0, [pc, #52]	@ (801d524 <USBD_LL_Init+0x94>)
 801d4f0:	f7e9 ffea 	bl	80074c8 <HAL_PCD_Init>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d001      	beq.n	801d4fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d4fa:	f7e6 f8db 	bl	80036b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d4fe:	2180      	movs	r1, #128	@ 0x80
 801d500:	4808      	ldr	r0, [pc, #32]	@ (801d524 <USBD_LL_Init+0x94>)
 801d502:	f7eb faa0 	bl	8008a46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d506:	2240      	movs	r2, #64	@ 0x40
 801d508:	2100      	movs	r1, #0
 801d50a:	4806      	ldr	r0, [pc, #24]	@ (801d524 <USBD_LL_Init+0x94>)
 801d50c:	f7eb fa54 	bl	80089b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d510:	2280      	movs	r2, #128	@ 0x80
 801d512:	2101      	movs	r1, #1
 801d514:	4803      	ldr	r0, [pc, #12]	@ (801d524 <USBD_LL_Init+0x94>)
 801d516:	f7eb fa4f 	bl	80089b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d51a:	2300      	movs	r3, #0
}
 801d51c:	4618      	mov	r0, r3
 801d51e:	3708      	adds	r7, #8
 801d520:	46bd      	mov	sp, r7
 801d522:	bd80      	pop	{r7, pc}
 801d524:	20002908 	.word	0x20002908

0801d528 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d528:	b580      	push	{r7, lr}
 801d52a:	b084      	sub	sp, #16
 801d52c:	af00      	add	r7, sp, #0
 801d52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d530:	2300      	movs	r3, #0
 801d532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d534:	2300      	movs	r3, #0
 801d536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d53e:	4618      	mov	r0, r3
 801d540:	f7ea f8d1 	bl	80076e6 <HAL_PCD_DeInit>
 801d544:	4603      	mov	r3, r0
 801d546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d548:	7bfb      	ldrb	r3, [r7, #15]
 801d54a:	4618      	mov	r0, r3
 801d54c:	f000 f998 	bl	801d880 <USBD_Get_USB_Status>
 801d550:	4603      	mov	r3, r0
 801d552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d554:	7bbb      	ldrb	r3, [r7, #14]
}
 801d556:	4618      	mov	r0, r3
 801d558:	3710      	adds	r7, #16
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bd80      	pop	{r7, pc}

0801d55e <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d55e:	b580      	push	{r7, lr}
 801d560:	b084      	sub	sp, #16
 801d562:	af00      	add	r7, sp, #0
 801d564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d566:	2300      	movs	r3, #0
 801d568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d56a:	2300      	movs	r3, #0
 801d56c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d574:	4618      	mov	r0, r3
 801d576:	f7ea f8d9 	bl	800772c <HAL_PCD_Start>
 801d57a:	4603      	mov	r3, r0
 801d57c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d57e:	7bfb      	ldrb	r3, [r7, #15]
 801d580:	4618      	mov	r0, r3
 801d582:	f000 f97d 	bl	801d880 <USBD_Get_USB_Status>
 801d586:	4603      	mov	r3, r0
 801d588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d58a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d58c:	4618      	mov	r0, r3
 801d58e:	3710      	adds	r7, #16
 801d590:	46bd      	mov	sp, r7
 801d592:	bd80      	pop	{r7, pc}

0801d594 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b084      	sub	sp, #16
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d59c:	2300      	movs	r3, #0
 801d59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5a0:	2300      	movs	r3, #0
 801d5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7ea f8f3 	bl	8007796 <HAL_PCD_Stop>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5b4:	7bfb      	ldrb	r3, [r7, #15]
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f000 f962 	bl	801d880 <USBD_Get_USB_Status>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	3710      	adds	r7, #16
 801d5c6:	46bd      	mov	sp, r7
 801d5c8:	bd80      	pop	{r7, pc}

0801d5ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d5ca:	b580      	push	{r7, lr}
 801d5cc:	b084      	sub	sp, #16
 801d5ce:	af00      	add	r7, sp, #0
 801d5d0:	6078      	str	r0, [r7, #4]
 801d5d2:	4608      	mov	r0, r1
 801d5d4:	4611      	mov	r1, r2
 801d5d6:	461a      	mov	r2, r3
 801d5d8:	4603      	mov	r3, r0
 801d5da:	70fb      	strb	r3, [r7, #3]
 801d5dc:	460b      	mov	r3, r1
 801d5de:	70bb      	strb	r3, [r7, #2]
 801d5e0:	4613      	mov	r3, r2
 801d5e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d5f2:	78bb      	ldrb	r3, [r7, #2]
 801d5f4:	883a      	ldrh	r2, [r7, #0]
 801d5f6:	78f9      	ldrb	r1, [r7, #3]
 801d5f8:	f7ea fdcd 	bl	8008196 <HAL_PCD_EP_Open>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d600:	7bfb      	ldrb	r3, [r7, #15]
 801d602:	4618      	mov	r0, r3
 801d604:	f000 f93c 	bl	801d880 <USBD_Get_USB_Status>
 801d608:	4603      	mov	r3, r0
 801d60a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d60c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d60e:	4618      	mov	r0, r3
 801d610:	3710      	adds	r7, #16
 801d612:	46bd      	mov	sp, r7
 801d614:	bd80      	pop	{r7, pc}

0801d616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d616:	b580      	push	{r7, lr}
 801d618:	b084      	sub	sp, #16
 801d61a:	af00      	add	r7, sp, #0
 801d61c:	6078      	str	r0, [r7, #4]
 801d61e:	460b      	mov	r3, r1
 801d620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d622:	2300      	movs	r3, #0
 801d624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d626:	2300      	movs	r3, #0
 801d628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d630:	78fa      	ldrb	r2, [r7, #3]
 801d632:	4611      	mov	r1, r2
 801d634:	4618      	mov	r0, r3
 801d636:	f7ea fe16 	bl	8008266 <HAL_PCD_EP_Close>
 801d63a:	4603      	mov	r3, r0
 801d63c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d63e:	7bfb      	ldrb	r3, [r7, #15]
 801d640:	4618      	mov	r0, r3
 801d642:	f000 f91d 	bl	801d880 <USBD_Get_USB_Status>
 801d646:	4603      	mov	r3, r0
 801d648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d64a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d64c:	4618      	mov	r0, r3
 801d64e:	3710      	adds	r7, #16
 801d650:	46bd      	mov	sp, r7
 801d652:	bd80      	pop	{r7, pc}

0801d654 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b084      	sub	sp, #16
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
 801d65c:	460b      	mov	r3, r1
 801d65e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d660:	2300      	movs	r3, #0
 801d662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d664:	2300      	movs	r3, #0
 801d666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d66e:	78fa      	ldrb	r2, [r7, #3]
 801d670:	4611      	mov	r1, r2
 801d672:	4618      	mov	r0, r3
 801d674:	f7ea ffb8 	bl	80085e8 <HAL_PCD_EP_Flush>
 801d678:	4603      	mov	r3, r0
 801d67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d67c:	7bfb      	ldrb	r3, [r7, #15]
 801d67e:	4618      	mov	r0, r3
 801d680:	f000 f8fe 	bl	801d880 <USBD_Get_USB_Status>
 801d684:	4603      	mov	r3, r0
 801d686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d688:	7bbb      	ldrb	r3, [r7, #14]
}
 801d68a:	4618      	mov	r0, r3
 801d68c:	3710      	adds	r7, #16
 801d68e:	46bd      	mov	sp, r7
 801d690:	bd80      	pop	{r7, pc}

0801d692 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d692:	b580      	push	{r7, lr}
 801d694:	b084      	sub	sp, #16
 801d696:	af00      	add	r7, sp, #0
 801d698:	6078      	str	r0, [r7, #4]
 801d69a:	460b      	mov	r3, r1
 801d69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d69e:	2300      	movs	r3, #0
 801d6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6ac:	78fa      	ldrb	r2, [r7, #3]
 801d6ae:	4611      	mov	r1, r2
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	f7ea feaf 	bl	8008414 <HAL_PCD_EP_SetStall>
 801d6b6:	4603      	mov	r3, r0
 801d6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6ba:	7bfb      	ldrb	r3, [r7, #15]
 801d6bc:	4618      	mov	r0, r3
 801d6be:	f000 f8df 	bl	801d880 <USBD_Get_USB_Status>
 801d6c2:	4603      	mov	r3, r0
 801d6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	3710      	adds	r7, #16
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	bd80      	pop	{r7, pc}

0801d6d0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b084      	sub	sp, #16
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
 801d6d8:	460b      	mov	r3, r1
 801d6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6dc:	2300      	movs	r3, #0
 801d6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6ea:	78fa      	ldrb	r2, [r7, #3]
 801d6ec:	4611      	mov	r1, r2
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7ea fef3 	bl	80084da <HAL_PCD_EP_ClrStall>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6f8:	7bfb      	ldrb	r3, [r7, #15]
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f000 f8c0 	bl	801d880 <USBD_Get_USB_Status>
 801d700:	4603      	mov	r3, r0
 801d702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d704:	7bbb      	ldrb	r3, [r7, #14]
}
 801d706:	4618      	mov	r0, r3
 801d708:	3710      	adds	r7, #16
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd80      	pop	{r7, pc}

0801d70e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d70e:	b480      	push	{r7}
 801d710:	b085      	sub	sp, #20
 801d712:	af00      	add	r7, sp, #0
 801d714:	6078      	str	r0, [r7, #4]
 801d716:	460b      	mov	r3, r1
 801d718:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d720:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d726:	2b00      	cmp	r3, #0
 801d728:	da0b      	bge.n	801d742 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d72a:	78fb      	ldrb	r3, [r7, #3]
 801d72c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d730:	68f9      	ldr	r1, [r7, #12]
 801d732:	4613      	mov	r3, r2
 801d734:	00db      	lsls	r3, r3, #3
 801d736:	4413      	add	r3, r2
 801d738:	009b      	lsls	r3, r3, #2
 801d73a:	440b      	add	r3, r1
 801d73c:	3316      	adds	r3, #22
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	e00b      	b.n	801d75a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d742:	78fb      	ldrb	r3, [r7, #3]
 801d744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d748:	68f9      	ldr	r1, [r7, #12]
 801d74a:	4613      	mov	r3, r2
 801d74c:	00db      	lsls	r3, r3, #3
 801d74e:	4413      	add	r3, r2
 801d750:	009b      	lsls	r3, r3, #2
 801d752:	440b      	add	r3, r1
 801d754:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d758:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d75a:	4618      	mov	r0, r3
 801d75c:	3714      	adds	r7, #20
 801d75e:	46bd      	mov	sp, r7
 801d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d764:	4770      	bx	lr

0801d766 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d766:	b580      	push	{r7, lr}
 801d768:	b084      	sub	sp, #16
 801d76a:	af00      	add	r7, sp, #0
 801d76c:	6078      	str	r0, [r7, #4]
 801d76e:	460b      	mov	r3, r1
 801d770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d772:	2300      	movs	r3, #0
 801d774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d776:	2300      	movs	r3, #0
 801d778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d780:	78fa      	ldrb	r2, [r7, #3]
 801d782:	4611      	mov	r1, r2
 801d784:	4618      	mov	r0, r3
 801d786:	f7ea fce2 	bl	800814e <HAL_PCD_SetAddress>
 801d78a:	4603      	mov	r3, r0
 801d78c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d78e:	7bfb      	ldrb	r3, [r7, #15]
 801d790:	4618      	mov	r0, r3
 801d792:	f000 f875 	bl	801d880 <USBD_Get_USB_Status>
 801d796:	4603      	mov	r3, r0
 801d798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d79a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d79c:	4618      	mov	r0, r3
 801d79e:	3710      	adds	r7, #16
 801d7a0:	46bd      	mov	sp, r7
 801d7a2:	bd80      	pop	{r7, pc}

0801d7a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7a4:	b580      	push	{r7, lr}
 801d7a6:	b086      	sub	sp, #24
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	60f8      	str	r0, [r7, #12]
 801d7ac:	607a      	str	r2, [r7, #4]
 801d7ae:	603b      	str	r3, [r7, #0]
 801d7b0:	460b      	mov	r3, r1
 801d7b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d7c2:	7af9      	ldrb	r1, [r7, #11]
 801d7c4:	683b      	ldr	r3, [r7, #0]
 801d7c6:	687a      	ldr	r2, [r7, #4]
 801d7c8:	f7ea fdea 	bl	80083a0 <HAL_PCD_EP_Transmit>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7d0:	7dfb      	ldrb	r3, [r7, #23]
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f000 f854 	bl	801d880 <USBD_Get_USB_Status>
 801d7d8:	4603      	mov	r3, r0
 801d7da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d7dc:	7dbb      	ldrb	r3, [r7, #22]
}
 801d7de:	4618      	mov	r0, r3
 801d7e0:	3718      	adds	r7, #24
 801d7e2:	46bd      	mov	sp, r7
 801d7e4:	bd80      	pop	{r7, pc}

0801d7e6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7e6:	b580      	push	{r7, lr}
 801d7e8:	b086      	sub	sp, #24
 801d7ea:	af00      	add	r7, sp, #0
 801d7ec:	60f8      	str	r0, [r7, #12]
 801d7ee:	607a      	str	r2, [r7, #4]
 801d7f0:	603b      	str	r3, [r7, #0]
 801d7f2:	460b      	mov	r3, r1
 801d7f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d804:	7af9      	ldrb	r1, [r7, #11]
 801d806:	683b      	ldr	r3, [r7, #0]
 801d808:	687a      	ldr	r2, [r7, #4]
 801d80a:	f7ea fd76 	bl	80082fa <HAL_PCD_EP_Receive>
 801d80e:	4603      	mov	r3, r0
 801d810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d812:	7dfb      	ldrb	r3, [r7, #23]
 801d814:	4618      	mov	r0, r3
 801d816:	f000 f833 	bl	801d880 <USBD_Get_USB_Status>
 801d81a:	4603      	mov	r3, r0
 801d81c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d81e:	7dbb      	ldrb	r3, [r7, #22]
}
 801d820:	4618      	mov	r0, r3
 801d822:	3718      	adds	r7, #24
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}

0801d828 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d828:	b580      	push	{r7, lr}
 801d82a:	b082      	sub	sp, #8
 801d82c:	af00      	add	r7, sp, #0
 801d82e:	6078      	str	r0, [r7, #4]
 801d830:	460b      	mov	r3, r1
 801d832:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d83a:	78fa      	ldrb	r2, [r7, #3]
 801d83c:	4611      	mov	r1, r2
 801d83e:	4618      	mov	r0, r3
 801d840:	f7ea fd96 	bl	8008370 <HAL_PCD_EP_GetRxCount>
 801d844:	4603      	mov	r3, r0
}
 801d846:	4618      	mov	r0, r3
 801d848:	3708      	adds	r7, #8
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
	...

0801d850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d850:	b480      	push	{r7}
 801d852:	b083      	sub	sp, #12
 801d854:	af00      	add	r7, sp, #0
 801d856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d858:	4b03      	ldr	r3, [pc, #12]	@ (801d868 <USBD_static_malloc+0x18>)
}
 801d85a:	4618      	mov	r0, r3
 801d85c:	370c      	adds	r7, #12
 801d85e:	46bd      	mov	sp, r7
 801d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d864:	4770      	bx	lr
 801d866:	bf00      	nop
 801d868:	20002dec 	.word	0x20002dec

0801d86c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d86c:	b480      	push	{r7}
 801d86e:	b083      	sub	sp, #12
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]

}
 801d874:	bf00      	nop
 801d876:	370c      	adds	r7, #12
 801d878:	46bd      	mov	sp, r7
 801d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d87e:	4770      	bx	lr

0801d880 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d880:	b480      	push	{r7}
 801d882:	b085      	sub	sp, #20
 801d884:	af00      	add	r7, sp, #0
 801d886:	4603      	mov	r3, r0
 801d888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d88a:	2300      	movs	r3, #0
 801d88c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d88e:	79fb      	ldrb	r3, [r7, #7]
 801d890:	2b03      	cmp	r3, #3
 801d892:	d817      	bhi.n	801d8c4 <USBD_Get_USB_Status+0x44>
 801d894:	a201      	add	r2, pc, #4	@ (adr r2, 801d89c <USBD_Get_USB_Status+0x1c>)
 801d896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d89a:	bf00      	nop
 801d89c:	0801d8ad 	.word	0x0801d8ad
 801d8a0:	0801d8b3 	.word	0x0801d8b3
 801d8a4:	0801d8b9 	.word	0x0801d8b9
 801d8a8:	0801d8bf 	.word	0x0801d8bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	73fb      	strb	r3, [r7, #15]
    break;
 801d8b0:	e00b      	b.n	801d8ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d8b2:	2303      	movs	r3, #3
 801d8b4:	73fb      	strb	r3, [r7, #15]
    break;
 801d8b6:	e008      	b.n	801d8ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d8b8:	2301      	movs	r3, #1
 801d8ba:	73fb      	strb	r3, [r7, #15]
    break;
 801d8bc:	e005      	b.n	801d8ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d8be:	2303      	movs	r3, #3
 801d8c0:	73fb      	strb	r3, [r7, #15]
    break;
 801d8c2:	e002      	b.n	801d8ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d8c4:	2303      	movs	r3, #3
 801d8c6:	73fb      	strb	r3, [r7, #15]
    break;
 801d8c8:	bf00      	nop
  }
  return usb_status;
 801d8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	3714      	adds	r7, #20
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8d6:	4770      	bx	lr

0801d8d8 <atoi>:
 801d8d8:	220a      	movs	r2, #10
 801d8da:	2100      	movs	r1, #0
 801d8dc:	f000 b932 	b.w	801db44 <strtol>

0801d8e0 <malloc>:
 801d8e0:	4b02      	ldr	r3, [pc, #8]	@ (801d8ec <malloc+0xc>)
 801d8e2:	4601      	mov	r1, r0
 801d8e4:	6818      	ldr	r0, [r3, #0]
 801d8e6:	f000 b825 	b.w	801d934 <_malloc_r>
 801d8ea:	bf00      	nop
 801d8ec:	20000148 	.word	0x20000148

0801d8f0 <sbrk_aligned>:
 801d8f0:	b570      	push	{r4, r5, r6, lr}
 801d8f2:	4e0f      	ldr	r6, [pc, #60]	@ (801d930 <sbrk_aligned+0x40>)
 801d8f4:	460c      	mov	r4, r1
 801d8f6:	6831      	ldr	r1, [r6, #0]
 801d8f8:	4605      	mov	r5, r0
 801d8fa:	b911      	cbnz	r1, 801d902 <sbrk_aligned+0x12>
 801d8fc:	f001 fb2e 	bl	801ef5c <_sbrk_r>
 801d900:	6030      	str	r0, [r6, #0]
 801d902:	4621      	mov	r1, r4
 801d904:	4628      	mov	r0, r5
 801d906:	f001 fb29 	bl	801ef5c <_sbrk_r>
 801d90a:	1c43      	adds	r3, r0, #1
 801d90c:	d103      	bne.n	801d916 <sbrk_aligned+0x26>
 801d90e:	f04f 34ff 	mov.w	r4, #4294967295
 801d912:	4620      	mov	r0, r4
 801d914:	bd70      	pop	{r4, r5, r6, pc}
 801d916:	1cc4      	adds	r4, r0, #3
 801d918:	f024 0403 	bic.w	r4, r4, #3
 801d91c:	42a0      	cmp	r0, r4
 801d91e:	d0f8      	beq.n	801d912 <sbrk_aligned+0x22>
 801d920:	1a21      	subs	r1, r4, r0
 801d922:	4628      	mov	r0, r5
 801d924:	f001 fb1a 	bl	801ef5c <_sbrk_r>
 801d928:	3001      	adds	r0, #1
 801d92a:	d1f2      	bne.n	801d912 <sbrk_aligned+0x22>
 801d92c:	e7ef      	b.n	801d90e <sbrk_aligned+0x1e>
 801d92e:	bf00      	nop
 801d930:	20003664 	.word	0x20003664

0801d934 <_malloc_r>:
 801d934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d938:	1ccd      	adds	r5, r1, #3
 801d93a:	f025 0503 	bic.w	r5, r5, #3
 801d93e:	3508      	adds	r5, #8
 801d940:	2d0c      	cmp	r5, #12
 801d942:	bf38      	it	cc
 801d944:	250c      	movcc	r5, #12
 801d946:	2d00      	cmp	r5, #0
 801d948:	4606      	mov	r6, r0
 801d94a:	db01      	blt.n	801d950 <_malloc_r+0x1c>
 801d94c:	42a9      	cmp	r1, r5
 801d94e:	d904      	bls.n	801d95a <_malloc_r+0x26>
 801d950:	230c      	movs	r3, #12
 801d952:	6033      	str	r3, [r6, #0]
 801d954:	2000      	movs	r0, #0
 801d956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d95a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801da30 <_malloc_r+0xfc>
 801d95e:	f000 f869 	bl	801da34 <__malloc_lock>
 801d962:	f8d8 3000 	ldr.w	r3, [r8]
 801d966:	461c      	mov	r4, r3
 801d968:	bb44      	cbnz	r4, 801d9bc <_malloc_r+0x88>
 801d96a:	4629      	mov	r1, r5
 801d96c:	4630      	mov	r0, r6
 801d96e:	f7ff ffbf 	bl	801d8f0 <sbrk_aligned>
 801d972:	1c43      	adds	r3, r0, #1
 801d974:	4604      	mov	r4, r0
 801d976:	d158      	bne.n	801da2a <_malloc_r+0xf6>
 801d978:	f8d8 4000 	ldr.w	r4, [r8]
 801d97c:	4627      	mov	r7, r4
 801d97e:	2f00      	cmp	r7, #0
 801d980:	d143      	bne.n	801da0a <_malloc_r+0xd6>
 801d982:	2c00      	cmp	r4, #0
 801d984:	d04b      	beq.n	801da1e <_malloc_r+0xea>
 801d986:	6823      	ldr	r3, [r4, #0]
 801d988:	4639      	mov	r1, r7
 801d98a:	4630      	mov	r0, r6
 801d98c:	eb04 0903 	add.w	r9, r4, r3
 801d990:	f001 fae4 	bl	801ef5c <_sbrk_r>
 801d994:	4581      	cmp	r9, r0
 801d996:	d142      	bne.n	801da1e <_malloc_r+0xea>
 801d998:	6821      	ldr	r1, [r4, #0]
 801d99a:	1a6d      	subs	r5, r5, r1
 801d99c:	4629      	mov	r1, r5
 801d99e:	4630      	mov	r0, r6
 801d9a0:	f7ff ffa6 	bl	801d8f0 <sbrk_aligned>
 801d9a4:	3001      	adds	r0, #1
 801d9a6:	d03a      	beq.n	801da1e <_malloc_r+0xea>
 801d9a8:	6823      	ldr	r3, [r4, #0]
 801d9aa:	442b      	add	r3, r5
 801d9ac:	6023      	str	r3, [r4, #0]
 801d9ae:	f8d8 3000 	ldr.w	r3, [r8]
 801d9b2:	685a      	ldr	r2, [r3, #4]
 801d9b4:	bb62      	cbnz	r2, 801da10 <_malloc_r+0xdc>
 801d9b6:	f8c8 7000 	str.w	r7, [r8]
 801d9ba:	e00f      	b.n	801d9dc <_malloc_r+0xa8>
 801d9bc:	6822      	ldr	r2, [r4, #0]
 801d9be:	1b52      	subs	r2, r2, r5
 801d9c0:	d420      	bmi.n	801da04 <_malloc_r+0xd0>
 801d9c2:	2a0b      	cmp	r2, #11
 801d9c4:	d917      	bls.n	801d9f6 <_malloc_r+0xc2>
 801d9c6:	1961      	adds	r1, r4, r5
 801d9c8:	42a3      	cmp	r3, r4
 801d9ca:	6025      	str	r5, [r4, #0]
 801d9cc:	bf18      	it	ne
 801d9ce:	6059      	strne	r1, [r3, #4]
 801d9d0:	6863      	ldr	r3, [r4, #4]
 801d9d2:	bf08      	it	eq
 801d9d4:	f8c8 1000 	streq.w	r1, [r8]
 801d9d8:	5162      	str	r2, [r4, r5]
 801d9da:	604b      	str	r3, [r1, #4]
 801d9dc:	4630      	mov	r0, r6
 801d9de:	f000 f82f 	bl	801da40 <__malloc_unlock>
 801d9e2:	f104 000b 	add.w	r0, r4, #11
 801d9e6:	1d23      	adds	r3, r4, #4
 801d9e8:	f020 0007 	bic.w	r0, r0, #7
 801d9ec:	1ac2      	subs	r2, r0, r3
 801d9ee:	bf1c      	itt	ne
 801d9f0:	1a1b      	subne	r3, r3, r0
 801d9f2:	50a3      	strne	r3, [r4, r2]
 801d9f4:	e7af      	b.n	801d956 <_malloc_r+0x22>
 801d9f6:	6862      	ldr	r2, [r4, #4]
 801d9f8:	42a3      	cmp	r3, r4
 801d9fa:	bf0c      	ite	eq
 801d9fc:	f8c8 2000 	streq.w	r2, [r8]
 801da00:	605a      	strne	r2, [r3, #4]
 801da02:	e7eb      	b.n	801d9dc <_malloc_r+0xa8>
 801da04:	4623      	mov	r3, r4
 801da06:	6864      	ldr	r4, [r4, #4]
 801da08:	e7ae      	b.n	801d968 <_malloc_r+0x34>
 801da0a:	463c      	mov	r4, r7
 801da0c:	687f      	ldr	r7, [r7, #4]
 801da0e:	e7b6      	b.n	801d97e <_malloc_r+0x4a>
 801da10:	461a      	mov	r2, r3
 801da12:	685b      	ldr	r3, [r3, #4]
 801da14:	42a3      	cmp	r3, r4
 801da16:	d1fb      	bne.n	801da10 <_malloc_r+0xdc>
 801da18:	2300      	movs	r3, #0
 801da1a:	6053      	str	r3, [r2, #4]
 801da1c:	e7de      	b.n	801d9dc <_malloc_r+0xa8>
 801da1e:	230c      	movs	r3, #12
 801da20:	6033      	str	r3, [r6, #0]
 801da22:	4630      	mov	r0, r6
 801da24:	f000 f80c 	bl	801da40 <__malloc_unlock>
 801da28:	e794      	b.n	801d954 <_malloc_r+0x20>
 801da2a:	6005      	str	r5, [r0, #0]
 801da2c:	e7d6      	b.n	801d9dc <_malloc_r+0xa8>
 801da2e:	bf00      	nop
 801da30:	20003668 	.word	0x20003668

0801da34 <__malloc_lock>:
 801da34:	4801      	ldr	r0, [pc, #4]	@ (801da3c <__malloc_lock+0x8>)
 801da36:	f001 bade 	b.w	801eff6 <__retarget_lock_acquire_recursive>
 801da3a:	bf00      	nop
 801da3c:	200037ac 	.word	0x200037ac

0801da40 <__malloc_unlock>:
 801da40:	4801      	ldr	r0, [pc, #4]	@ (801da48 <__malloc_unlock+0x8>)
 801da42:	f001 bad9 	b.w	801eff8 <__retarget_lock_release_recursive>
 801da46:	bf00      	nop
 801da48:	200037ac 	.word	0x200037ac

0801da4c <_strtol_l.constprop.0>:
 801da4c:	2b24      	cmp	r3, #36	@ 0x24
 801da4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da52:	4686      	mov	lr, r0
 801da54:	4690      	mov	r8, r2
 801da56:	d801      	bhi.n	801da5c <_strtol_l.constprop.0+0x10>
 801da58:	2b01      	cmp	r3, #1
 801da5a:	d106      	bne.n	801da6a <_strtol_l.constprop.0+0x1e>
 801da5c:	f001 faa0 	bl	801efa0 <__errno>
 801da60:	2316      	movs	r3, #22
 801da62:	6003      	str	r3, [r0, #0]
 801da64:	2000      	movs	r0, #0
 801da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da6a:	4834      	ldr	r0, [pc, #208]	@ (801db3c <_strtol_l.constprop.0+0xf0>)
 801da6c:	460d      	mov	r5, r1
 801da6e:	462a      	mov	r2, r5
 801da70:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da74:	5d06      	ldrb	r6, [r0, r4]
 801da76:	f016 0608 	ands.w	r6, r6, #8
 801da7a:	d1f8      	bne.n	801da6e <_strtol_l.constprop.0+0x22>
 801da7c:	2c2d      	cmp	r4, #45	@ 0x2d
 801da7e:	d12d      	bne.n	801dadc <_strtol_l.constprop.0+0x90>
 801da80:	782c      	ldrb	r4, [r5, #0]
 801da82:	2601      	movs	r6, #1
 801da84:	1c95      	adds	r5, r2, #2
 801da86:	f033 0210 	bics.w	r2, r3, #16
 801da8a:	d109      	bne.n	801daa0 <_strtol_l.constprop.0+0x54>
 801da8c:	2c30      	cmp	r4, #48	@ 0x30
 801da8e:	d12a      	bne.n	801dae6 <_strtol_l.constprop.0+0x9a>
 801da90:	782a      	ldrb	r2, [r5, #0]
 801da92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801da96:	2a58      	cmp	r2, #88	@ 0x58
 801da98:	d125      	bne.n	801dae6 <_strtol_l.constprop.0+0x9a>
 801da9a:	786c      	ldrb	r4, [r5, #1]
 801da9c:	2310      	movs	r3, #16
 801da9e:	3502      	adds	r5, #2
 801daa0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801daa4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801daa8:	2200      	movs	r2, #0
 801daaa:	fbbc f9f3 	udiv	r9, ip, r3
 801daae:	4610      	mov	r0, r2
 801dab0:	fb03 ca19 	mls	sl, r3, r9, ip
 801dab4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801dab8:	2f09      	cmp	r7, #9
 801daba:	d81b      	bhi.n	801daf4 <_strtol_l.constprop.0+0xa8>
 801dabc:	463c      	mov	r4, r7
 801dabe:	42a3      	cmp	r3, r4
 801dac0:	dd27      	ble.n	801db12 <_strtol_l.constprop.0+0xc6>
 801dac2:	1c57      	adds	r7, r2, #1
 801dac4:	d007      	beq.n	801dad6 <_strtol_l.constprop.0+0x8a>
 801dac6:	4581      	cmp	r9, r0
 801dac8:	d320      	bcc.n	801db0c <_strtol_l.constprop.0+0xc0>
 801daca:	d101      	bne.n	801dad0 <_strtol_l.constprop.0+0x84>
 801dacc:	45a2      	cmp	sl, r4
 801dace:	db1d      	blt.n	801db0c <_strtol_l.constprop.0+0xc0>
 801dad0:	fb00 4003 	mla	r0, r0, r3, r4
 801dad4:	2201      	movs	r2, #1
 801dad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dada:	e7eb      	b.n	801dab4 <_strtol_l.constprop.0+0x68>
 801dadc:	2c2b      	cmp	r4, #43	@ 0x2b
 801dade:	bf04      	itt	eq
 801dae0:	782c      	ldrbeq	r4, [r5, #0]
 801dae2:	1c95      	addeq	r5, r2, #2
 801dae4:	e7cf      	b.n	801da86 <_strtol_l.constprop.0+0x3a>
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d1da      	bne.n	801daa0 <_strtol_l.constprop.0+0x54>
 801daea:	2c30      	cmp	r4, #48	@ 0x30
 801daec:	bf0c      	ite	eq
 801daee:	2308      	moveq	r3, #8
 801daf0:	230a      	movne	r3, #10
 801daf2:	e7d5      	b.n	801daa0 <_strtol_l.constprop.0+0x54>
 801daf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801daf8:	2f19      	cmp	r7, #25
 801dafa:	d801      	bhi.n	801db00 <_strtol_l.constprop.0+0xb4>
 801dafc:	3c37      	subs	r4, #55	@ 0x37
 801dafe:	e7de      	b.n	801dabe <_strtol_l.constprop.0+0x72>
 801db00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801db04:	2f19      	cmp	r7, #25
 801db06:	d804      	bhi.n	801db12 <_strtol_l.constprop.0+0xc6>
 801db08:	3c57      	subs	r4, #87	@ 0x57
 801db0a:	e7d8      	b.n	801dabe <_strtol_l.constprop.0+0x72>
 801db0c:	f04f 32ff 	mov.w	r2, #4294967295
 801db10:	e7e1      	b.n	801dad6 <_strtol_l.constprop.0+0x8a>
 801db12:	1c53      	adds	r3, r2, #1
 801db14:	d108      	bne.n	801db28 <_strtol_l.constprop.0+0xdc>
 801db16:	2322      	movs	r3, #34	@ 0x22
 801db18:	f8ce 3000 	str.w	r3, [lr]
 801db1c:	4660      	mov	r0, ip
 801db1e:	f1b8 0f00 	cmp.w	r8, #0
 801db22:	d0a0      	beq.n	801da66 <_strtol_l.constprop.0+0x1a>
 801db24:	1e69      	subs	r1, r5, #1
 801db26:	e006      	b.n	801db36 <_strtol_l.constprop.0+0xea>
 801db28:	b106      	cbz	r6, 801db2c <_strtol_l.constprop.0+0xe0>
 801db2a:	4240      	negs	r0, r0
 801db2c:	f1b8 0f00 	cmp.w	r8, #0
 801db30:	d099      	beq.n	801da66 <_strtol_l.constprop.0+0x1a>
 801db32:	2a00      	cmp	r2, #0
 801db34:	d1f6      	bne.n	801db24 <_strtol_l.constprop.0+0xd8>
 801db36:	f8c8 1000 	str.w	r1, [r8]
 801db3a:	e794      	b.n	801da66 <_strtol_l.constprop.0+0x1a>
 801db3c:	08025599 	.word	0x08025599

0801db40 <_strtol_r>:
 801db40:	f7ff bf84 	b.w	801da4c <_strtol_l.constprop.0>

0801db44 <strtol>:
 801db44:	4613      	mov	r3, r2
 801db46:	460a      	mov	r2, r1
 801db48:	4601      	mov	r1, r0
 801db4a:	4802      	ldr	r0, [pc, #8]	@ (801db54 <strtol+0x10>)
 801db4c:	6800      	ldr	r0, [r0, #0]
 801db4e:	f7ff bf7d 	b.w	801da4c <_strtol_l.constprop.0>
 801db52:	bf00      	nop
 801db54:	20000148 	.word	0x20000148

0801db58 <__cvt>:
 801db58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801db5c:	ec57 6b10 	vmov	r6, r7, d0
 801db60:	2f00      	cmp	r7, #0
 801db62:	460c      	mov	r4, r1
 801db64:	4619      	mov	r1, r3
 801db66:	463b      	mov	r3, r7
 801db68:	bfbb      	ittet	lt
 801db6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801db6e:	461f      	movlt	r7, r3
 801db70:	2300      	movge	r3, #0
 801db72:	232d      	movlt	r3, #45	@ 0x2d
 801db74:	700b      	strb	r3, [r1, #0]
 801db76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801db7c:	4691      	mov	r9, r2
 801db7e:	f023 0820 	bic.w	r8, r3, #32
 801db82:	bfbc      	itt	lt
 801db84:	4632      	movlt	r2, r6
 801db86:	4616      	movlt	r6, r2
 801db88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801db8c:	d005      	beq.n	801db9a <__cvt+0x42>
 801db8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801db92:	d100      	bne.n	801db96 <__cvt+0x3e>
 801db94:	3401      	adds	r4, #1
 801db96:	2102      	movs	r1, #2
 801db98:	e000      	b.n	801db9c <__cvt+0x44>
 801db9a:	2103      	movs	r1, #3
 801db9c:	ab03      	add	r3, sp, #12
 801db9e:	9301      	str	r3, [sp, #4]
 801dba0:	ab02      	add	r3, sp, #8
 801dba2:	9300      	str	r3, [sp, #0]
 801dba4:	ec47 6b10 	vmov	d0, r6, r7
 801dba8:	4653      	mov	r3, sl
 801dbaa:	4622      	mov	r2, r4
 801dbac:	f001 fae8 	bl	801f180 <_dtoa_r>
 801dbb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	d119      	bne.n	801dbec <__cvt+0x94>
 801dbb8:	f019 0f01 	tst.w	r9, #1
 801dbbc:	d00e      	beq.n	801dbdc <__cvt+0x84>
 801dbbe:	eb00 0904 	add.w	r9, r0, r4
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	4630      	mov	r0, r6
 801dbc8:	4639      	mov	r1, r7
 801dbca:	f7e2 ff95 	bl	8000af8 <__aeabi_dcmpeq>
 801dbce:	b108      	cbz	r0, 801dbd4 <__cvt+0x7c>
 801dbd0:	f8cd 900c 	str.w	r9, [sp, #12]
 801dbd4:	2230      	movs	r2, #48	@ 0x30
 801dbd6:	9b03      	ldr	r3, [sp, #12]
 801dbd8:	454b      	cmp	r3, r9
 801dbda:	d31e      	bcc.n	801dc1a <__cvt+0xc2>
 801dbdc:	9b03      	ldr	r3, [sp, #12]
 801dbde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbe0:	1b5b      	subs	r3, r3, r5
 801dbe2:	4628      	mov	r0, r5
 801dbe4:	6013      	str	r3, [r2, #0]
 801dbe6:	b004      	add	sp, #16
 801dbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dbf0:	eb00 0904 	add.w	r9, r0, r4
 801dbf4:	d1e5      	bne.n	801dbc2 <__cvt+0x6a>
 801dbf6:	7803      	ldrb	r3, [r0, #0]
 801dbf8:	2b30      	cmp	r3, #48	@ 0x30
 801dbfa:	d10a      	bne.n	801dc12 <__cvt+0xba>
 801dbfc:	2200      	movs	r2, #0
 801dbfe:	2300      	movs	r3, #0
 801dc00:	4630      	mov	r0, r6
 801dc02:	4639      	mov	r1, r7
 801dc04:	f7e2 ff78 	bl	8000af8 <__aeabi_dcmpeq>
 801dc08:	b918      	cbnz	r0, 801dc12 <__cvt+0xba>
 801dc0a:	f1c4 0401 	rsb	r4, r4, #1
 801dc0e:	f8ca 4000 	str.w	r4, [sl]
 801dc12:	f8da 3000 	ldr.w	r3, [sl]
 801dc16:	4499      	add	r9, r3
 801dc18:	e7d3      	b.n	801dbc2 <__cvt+0x6a>
 801dc1a:	1c59      	adds	r1, r3, #1
 801dc1c:	9103      	str	r1, [sp, #12]
 801dc1e:	701a      	strb	r2, [r3, #0]
 801dc20:	e7d9      	b.n	801dbd6 <__cvt+0x7e>

0801dc22 <__exponent>:
 801dc22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc24:	2900      	cmp	r1, #0
 801dc26:	bfba      	itte	lt
 801dc28:	4249      	neglt	r1, r1
 801dc2a:	232d      	movlt	r3, #45	@ 0x2d
 801dc2c:	232b      	movge	r3, #43	@ 0x2b
 801dc2e:	2909      	cmp	r1, #9
 801dc30:	7002      	strb	r2, [r0, #0]
 801dc32:	7043      	strb	r3, [r0, #1]
 801dc34:	dd29      	ble.n	801dc8a <__exponent+0x68>
 801dc36:	f10d 0307 	add.w	r3, sp, #7
 801dc3a:	461d      	mov	r5, r3
 801dc3c:	270a      	movs	r7, #10
 801dc3e:	461a      	mov	r2, r3
 801dc40:	fbb1 f6f7 	udiv	r6, r1, r7
 801dc44:	fb07 1416 	mls	r4, r7, r6, r1
 801dc48:	3430      	adds	r4, #48	@ 0x30
 801dc4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dc4e:	460c      	mov	r4, r1
 801dc50:	2c63      	cmp	r4, #99	@ 0x63
 801dc52:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc56:	4631      	mov	r1, r6
 801dc58:	dcf1      	bgt.n	801dc3e <__exponent+0x1c>
 801dc5a:	3130      	adds	r1, #48	@ 0x30
 801dc5c:	1e94      	subs	r4, r2, #2
 801dc5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dc62:	1c41      	adds	r1, r0, #1
 801dc64:	4623      	mov	r3, r4
 801dc66:	42ab      	cmp	r3, r5
 801dc68:	d30a      	bcc.n	801dc80 <__exponent+0x5e>
 801dc6a:	f10d 0309 	add.w	r3, sp, #9
 801dc6e:	1a9b      	subs	r3, r3, r2
 801dc70:	42ac      	cmp	r4, r5
 801dc72:	bf88      	it	hi
 801dc74:	2300      	movhi	r3, #0
 801dc76:	3302      	adds	r3, #2
 801dc78:	4403      	add	r3, r0
 801dc7a:	1a18      	subs	r0, r3, r0
 801dc7c:	b003      	add	sp, #12
 801dc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc80:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dc84:	f801 6f01 	strb.w	r6, [r1, #1]!
 801dc88:	e7ed      	b.n	801dc66 <__exponent+0x44>
 801dc8a:	2330      	movs	r3, #48	@ 0x30
 801dc8c:	3130      	adds	r1, #48	@ 0x30
 801dc8e:	7083      	strb	r3, [r0, #2]
 801dc90:	70c1      	strb	r1, [r0, #3]
 801dc92:	1d03      	adds	r3, r0, #4
 801dc94:	e7f1      	b.n	801dc7a <__exponent+0x58>
	...

0801dc98 <_printf_float>:
 801dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc9c:	b08d      	sub	sp, #52	@ 0x34
 801dc9e:	460c      	mov	r4, r1
 801dca0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dca4:	4616      	mov	r6, r2
 801dca6:	461f      	mov	r7, r3
 801dca8:	4605      	mov	r5, r0
 801dcaa:	f001 f91f 	bl	801eeec <_localeconv_r>
 801dcae:	6803      	ldr	r3, [r0, #0]
 801dcb0:	9304      	str	r3, [sp, #16]
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f7e2 faf4 	bl	80002a0 <strlen>
 801dcb8:	2300      	movs	r3, #0
 801dcba:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcbc:	f8d8 3000 	ldr.w	r3, [r8]
 801dcc0:	9005      	str	r0, [sp, #20]
 801dcc2:	3307      	adds	r3, #7
 801dcc4:	f023 0307 	bic.w	r3, r3, #7
 801dcc8:	f103 0208 	add.w	r2, r3, #8
 801dccc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dcd0:	f8d4 b000 	ldr.w	fp, [r4]
 801dcd4:	f8c8 2000 	str.w	r2, [r8]
 801dcd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dcdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dce0:	9307      	str	r3, [sp, #28]
 801dce2:	f8cd 8018 	str.w	r8, [sp, #24]
 801dce6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dcea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dcee:	4b9c      	ldr	r3, [pc, #624]	@ (801df60 <_printf_float+0x2c8>)
 801dcf0:	f04f 32ff 	mov.w	r2, #4294967295
 801dcf4:	f7e2 ff32 	bl	8000b5c <__aeabi_dcmpun>
 801dcf8:	bb70      	cbnz	r0, 801dd58 <_printf_float+0xc0>
 801dcfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dcfe:	4b98      	ldr	r3, [pc, #608]	@ (801df60 <_printf_float+0x2c8>)
 801dd00:	f04f 32ff 	mov.w	r2, #4294967295
 801dd04:	f7e2 ff0c 	bl	8000b20 <__aeabi_dcmple>
 801dd08:	bb30      	cbnz	r0, 801dd58 <_printf_float+0xc0>
 801dd0a:	2200      	movs	r2, #0
 801dd0c:	2300      	movs	r3, #0
 801dd0e:	4640      	mov	r0, r8
 801dd10:	4649      	mov	r1, r9
 801dd12:	f7e2 fefb 	bl	8000b0c <__aeabi_dcmplt>
 801dd16:	b110      	cbz	r0, 801dd1e <_printf_float+0x86>
 801dd18:	232d      	movs	r3, #45	@ 0x2d
 801dd1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dd1e:	4a91      	ldr	r2, [pc, #580]	@ (801df64 <_printf_float+0x2cc>)
 801dd20:	4b91      	ldr	r3, [pc, #580]	@ (801df68 <_printf_float+0x2d0>)
 801dd22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dd26:	bf94      	ite	ls
 801dd28:	4690      	movls	r8, r2
 801dd2a:	4698      	movhi	r8, r3
 801dd2c:	2303      	movs	r3, #3
 801dd2e:	6123      	str	r3, [r4, #16]
 801dd30:	f02b 0304 	bic.w	r3, fp, #4
 801dd34:	6023      	str	r3, [r4, #0]
 801dd36:	f04f 0900 	mov.w	r9, #0
 801dd3a:	9700      	str	r7, [sp, #0]
 801dd3c:	4633      	mov	r3, r6
 801dd3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dd40:	4621      	mov	r1, r4
 801dd42:	4628      	mov	r0, r5
 801dd44:	f000 f9d2 	bl	801e0ec <_printf_common>
 801dd48:	3001      	adds	r0, #1
 801dd4a:	f040 808d 	bne.w	801de68 <_printf_float+0x1d0>
 801dd4e:	f04f 30ff 	mov.w	r0, #4294967295
 801dd52:	b00d      	add	sp, #52	@ 0x34
 801dd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd58:	4642      	mov	r2, r8
 801dd5a:	464b      	mov	r3, r9
 801dd5c:	4640      	mov	r0, r8
 801dd5e:	4649      	mov	r1, r9
 801dd60:	f7e2 fefc 	bl	8000b5c <__aeabi_dcmpun>
 801dd64:	b140      	cbz	r0, 801dd78 <_printf_float+0xe0>
 801dd66:	464b      	mov	r3, r9
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	bfbc      	itt	lt
 801dd6c:	232d      	movlt	r3, #45	@ 0x2d
 801dd6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dd72:	4a7e      	ldr	r2, [pc, #504]	@ (801df6c <_printf_float+0x2d4>)
 801dd74:	4b7e      	ldr	r3, [pc, #504]	@ (801df70 <_printf_float+0x2d8>)
 801dd76:	e7d4      	b.n	801dd22 <_printf_float+0x8a>
 801dd78:	6863      	ldr	r3, [r4, #4]
 801dd7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dd7e:	9206      	str	r2, [sp, #24]
 801dd80:	1c5a      	adds	r2, r3, #1
 801dd82:	d13b      	bne.n	801ddfc <_printf_float+0x164>
 801dd84:	2306      	movs	r3, #6
 801dd86:	6063      	str	r3, [r4, #4]
 801dd88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dd8c:	2300      	movs	r3, #0
 801dd8e:	6022      	str	r2, [r4, #0]
 801dd90:	9303      	str	r3, [sp, #12]
 801dd92:	ab0a      	add	r3, sp, #40	@ 0x28
 801dd94:	e9cd a301 	strd	sl, r3, [sp, #4]
 801dd98:	ab09      	add	r3, sp, #36	@ 0x24
 801dd9a:	9300      	str	r3, [sp, #0]
 801dd9c:	6861      	ldr	r1, [r4, #4]
 801dd9e:	ec49 8b10 	vmov	d0, r8, r9
 801dda2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801dda6:	4628      	mov	r0, r5
 801dda8:	f7ff fed6 	bl	801db58 <__cvt>
 801ddac:	9b06      	ldr	r3, [sp, #24]
 801ddae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ddb0:	2b47      	cmp	r3, #71	@ 0x47
 801ddb2:	4680      	mov	r8, r0
 801ddb4:	d129      	bne.n	801de0a <_printf_float+0x172>
 801ddb6:	1cc8      	adds	r0, r1, #3
 801ddb8:	db02      	blt.n	801ddc0 <_printf_float+0x128>
 801ddba:	6863      	ldr	r3, [r4, #4]
 801ddbc:	4299      	cmp	r1, r3
 801ddbe:	dd41      	ble.n	801de44 <_printf_float+0x1ac>
 801ddc0:	f1aa 0a02 	sub.w	sl, sl, #2
 801ddc4:	fa5f fa8a 	uxtb.w	sl, sl
 801ddc8:	3901      	subs	r1, #1
 801ddca:	4652      	mov	r2, sl
 801ddcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801ddd0:	9109      	str	r1, [sp, #36]	@ 0x24
 801ddd2:	f7ff ff26 	bl	801dc22 <__exponent>
 801ddd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddd8:	1813      	adds	r3, r2, r0
 801ddda:	2a01      	cmp	r2, #1
 801dddc:	4681      	mov	r9, r0
 801ddde:	6123      	str	r3, [r4, #16]
 801dde0:	dc02      	bgt.n	801dde8 <_printf_float+0x150>
 801dde2:	6822      	ldr	r2, [r4, #0]
 801dde4:	07d2      	lsls	r2, r2, #31
 801dde6:	d501      	bpl.n	801ddec <_printf_float+0x154>
 801dde8:	3301      	adds	r3, #1
 801ddea:	6123      	str	r3, [r4, #16]
 801ddec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d0a2      	beq.n	801dd3a <_printf_float+0xa2>
 801ddf4:	232d      	movs	r3, #45	@ 0x2d
 801ddf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ddfa:	e79e      	b.n	801dd3a <_printf_float+0xa2>
 801ddfc:	9a06      	ldr	r2, [sp, #24]
 801ddfe:	2a47      	cmp	r2, #71	@ 0x47
 801de00:	d1c2      	bne.n	801dd88 <_printf_float+0xf0>
 801de02:	2b00      	cmp	r3, #0
 801de04:	d1c0      	bne.n	801dd88 <_printf_float+0xf0>
 801de06:	2301      	movs	r3, #1
 801de08:	e7bd      	b.n	801dd86 <_printf_float+0xee>
 801de0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de0e:	d9db      	bls.n	801ddc8 <_printf_float+0x130>
 801de10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801de14:	d118      	bne.n	801de48 <_printf_float+0x1b0>
 801de16:	2900      	cmp	r1, #0
 801de18:	6863      	ldr	r3, [r4, #4]
 801de1a:	dd0b      	ble.n	801de34 <_printf_float+0x19c>
 801de1c:	6121      	str	r1, [r4, #16]
 801de1e:	b913      	cbnz	r3, 801de26 <_printf_float+0x18e>
 801de20:	6822      	ldr	r2, [r4, #0]
 801de22:	07d0      	lsls	r0, r2, #31
 801de24:	d502      	bpl.n	801de2c <_printf_float+0x194>
 801de26:	3301      	adds	r3, #1
 801de28:	440b      	add	r3, r1
 801de2a:	6123      	str	r3, [r4, #16]
 801de2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801de2e:	f04f 0900 	mov.w	r9, #0
 801de32:	e7db      	b.n	801ddec <_printf_float+0x154>
 801de34:	b913      	cbnz	r3, 801de3c <_printf_float+0x1a4>
 801de36:	6822      	ldr	r2, [r4, #0]
 801de38:	07d2      	lsls	r2, r2, #31
 801de3a:	d501      	bpl.n	801de40 <_printf_float+0x1a8>
 801de3c:	3302      	adds	r3, #2
 801de3e:	e7f4      	b.n	801de2a <_printf_float+0x192>
 801de40:	2301      	movs	r3, #1
 801de42:	e7f2      	b.n	801de2a <_printf_float+0x192>
 801de44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801de48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de4a:	4299      	cmp	r1, r3
 801de4c:	db05      	blt.n	801de5a <_printf_float+0x1c2>
 801de4e:	6823      	ldr	r3, [r4, #0]
 801de50:	6121      	str	r1, [r4, #16]
 801de52:	07d8      	lsls	r0, r3, #31
 801de54:	d5ea      	bpl.n	801de2c <_printf_float+0x194>
 801de56:	1c4b      	adds	r3, r1, #1
 801de58:	e7e7      	b.n	801de2a <_printf_float+0x192>
 801de5a:	2900      	cmp	r1, #0
 801de5c:	bfd4      	ite	le
 801de5e:	f1c1 0202 	rsble	r2, r1, #2
 801de62:	2201      	movgt	r2, #1
 801de64:	4413      	add	r3, r2
 801de66:	e7e0      	b.n	801de2a <_printf_float+0x192>
 801de68:	6823      	ldr	r3, [r4, #0]
 801de6a:	055a      	lsls	r2, r3, #21
 801de6c:	d407      	bmi.n	801de7e <_printf_float+0x1e6>
 801de6e:	6923      	ldr	r3, [r4, #16]
 801de70:	4642      	mov	r2, r8
 801de72:	4631      	mov	r1, r6
 801de74:	4628      	mov	r0, r5
 801de76:	47b8      	blx	r7
 801de78:	3001      	adds	r0, #1
 801de7a:	d12b      	bne.n	801ded4 <_printf_float+0x23c>
 801de7c:	e767      	b.n	801dd4e <_printf_float+0xb6>
 801de7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de82:	f240 80dd 	bls.w	801e040 <_printf_float+0x3a8>
 801de86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801de8a:	2200      	movs	r2, #0
 801de8c:	2300      	movs	r3, #0
 801de8e:	f7e2 fe33 	bl	8000af8 <__aeabi_dcmpeq>
 801de92:	2800      	cmp	r0, #0
 801de94:	d033      	beq.n	801defe <_printf_float+0x266>
 801de96:	4a37      	ldr	r2, [pc, #220]	@ (801df74 <_printf_float+0x2dc>)
 801de98:	2301      	movs	r3, #1
 801de9a:	4631      	mov	r1, r6
 801de9c:	4628      	mov	r0, r5
 801de9e:	47b8      	blx	r7
 801dea0:	3001      	adds	r0, #1
 801dea2:	f43f af54 	beq.w	801dd4e <_printf_float+0xb6>
 801dea6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801deaa:	4543      	cmp	r3, r8
 801deac:	db02      	blt.n	801deb4 <_printf_float+0x21c>
 801deae:	6823      	ldr	r3, [r4, #0]
 801deb0:	07d8      	lsls	r0, r3, #31
 801deb2:	d50f      	bpl.n	801ded4 <_printf_float+0x23c>
 801deb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801deb8:	4631      	mov	r1, r6
 801deba:	4628      	mov	r0, r5
 801debc:	47b8      	blx	r7
 801debe:	3001      	adds	r0, #1
 801dec0:	f43f af45 	beq.w	801dd4e <_printf_float+0xb6>
 801dec4:	f04f 0900 	mov.w	r9, #0
 801dec8:	f108 38ff 	add.w	r8, r8, #4294967295
 801decc:	f104 0a1a 	add.w	sl, r4, #26
 801ded0:	45c8      	cmp	r8, r9
 801ded2:	dc09      	bgt.n	801dee8 <_printf_float+0x250>
 801ded4:	6823      	ldr	r3, [r4, #0]
 801ded6:	079b      	lsls	r3, r3, #30
 801ded8:	f100 8103 	bmi.w	801e0e2 <_printf_float+0x44a>
 801dedc:	68e0      	ldr	r0, [r4, #12]
 801dede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dee0:	4298      	cmp	r0, r3
 801dee2:	bfb8      	it	lt
 801dee4:	4618      	movlt	r0, r3
 801dee6:	e734      	b.n	801dd52 <_printf_float+0xba>
 801dee8:	2301      	movs	r3, #1
 801deea:	4652      	mov	r2, sl
 801deec:	4631      	mov	r1, r6
 801deee:	4628      	mov	r0, r5
 801def0:	47b8      	blx	r7
 801def2:	3001      	adds	r0, #1
 801def4:	f43f af2b 	beq.w	801dd4e <_printf_float+0xb6>
 801def8:	f109 0901 	add.w	r9, r9, #1
 801defc:	e7e8      	b.n	801ded0 <_printf_float+0x238>
 801defe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df00:	2b00      	cmp	r3, #0
 801df02:	dc39      	bgt.n	801df78 <_printf_float+0x2e0>
 801df04:	4a1b      	ldr	r2, [pc, #108]	@ (801df74 <_printf_float+0x2dc>)
 801df06:	2301      	movs	r3, #1
 801df08:	4631      	mov	r1, r6
 801df0a:	4628      	mov	r0, r5
 801df0c:	47b8      	blx	r7
 801df0e:	3001      	adds	r0, #1
 801df10:	f43f af1d 	beq.w	801dd4e <_printf_float+0xb6>
 801df14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801df18:	ea59 0303 	orrs.w	r3, r9, r3
 801df1c:	d102      	bne.n	801df24 <_printf_float+0x28c>
 801df1e:	6823      	ldr	r3, [r4, #0]
 801df20:	07d9      	lsls	r1, r3, #31
 801df22:	d5d7      	bpl.n	801ded4 <_printf_float+0x23c>
 801df24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df28:	4631      	mov	r1, r6
 801df2a:	4628      	mov	r0, r5
 801df2c:	47b8      	blx	r7
 801df2e:	3001      	adds	r0, #1
 801df30:	f43f af0d 	beq.w	801dd4e <_printf_float+0xb6>
 801df34:	f04f 0a00 	mov.w	sl, #0
 801df38:	f104 0b1a 	add.w	fp, r4, #26
 801df3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df3e:	425b      	negs	r3, r3
 801df40:	4553      	cmp	r3, sl
 801df42:	dc01      	bgt.n	801df48 <_printf_float+0x2b0>
 801df44:	464b      	mov	r3, r9
 801df46:	e793      	b.n	801de70 <_printf_float+0x1d8>
 801df48:	2301      	movs	r3, #1
 801df4a:	465a      	mov	r2, fp
 801df4c:	4631      	mov	r1, r6
 801df4e:	4628      	mov	r0, r5
 801df50:	47b8      	blx	r7
 801df52:	3001      	adds	r0, #1
 801df54:	f43f aefb 	beq.w	801dd4e <_printf_float+0xb6>
 801df58:	f10a 0a01 	add.w	sl, sl, #1
 801df5c:	e7ee      	b.n	801df3c <_printf_float+0x2a4>
 801df5e:	bf00      	nop
 801df60:	7fefffff 	.word	0x7fefffff
 801df64:	08025699 	.word	0x08025699
 801df68:	0802569d 	.word	0x0802569d
 801df6c:	080256a1 	.word	0x080256a1
 801df70:	080256a5 	.word	0x080256a5
 801df74:	080256a9 	.word	0x080256a9
 801df78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801df7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801df7e:	4553      	cmp	r3, sl
 801df80:	bfa8      	it	ge
 801df82:	4653      	movge	r3, sl
 801df84:	2b00      	cmp	r3, #0
 801df86:	4699      	mov	r9, r3
 801df88:	dc36      	bgt.n	801dff8 <_printf_float+0x360>
 801df8a:	f04f 0b00 	mov.w	fp, #0
 801df8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801df92:	f104 021a 	add.w	r2, r4, #26
 801df96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801df98:	9306      	str	r3, [sp, #24]
 801df9a:	eba3 0309 	sub.w	r3, r3, r9
 801df9e:	455b      	cmp	r3, fp
 801dfa0:	dc31      	bgt.n	801e006 <_printf_float+0x36e>
 801dfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfa4:	459a      	cmp	sl, r3
 801dfa6:	dc3a      	bgt.n	801e01e <_printf_float+0x386>
 801dfa8:	6823      	ldr	r3, [r4, #0]
 801dfaa:	07da      	lsls	r2, r3, #31
 801dfac:	d437      	bmi.n	801e01e <_printf_float+0x386>
 801dfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfb0:	ebaa 0903 	sub.w	r9, sl, r3
 801dfb4:	9b06      	ldr	r3, [sp, #24]
 801dfb6:	ebaa 0303 	sub.w	r3, sl, r3
 801dfba:	4599      	cmp	r9, r3
 801dfbc:	bfa8      	it	ge
 801dfbe:	4699      	movge	r9, r3
 801dfc0:	f1b9 0f00 	cmp.w	r9, #0
 801dfc4:	dc33      	bgt.n	801e02e <_printf_float+0x396>
 801dfc6:	f04f 0800 	mov.w	r8, #0
 801dfca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dfce:	f104 0b1a 	add.w	fp, r4, #26
 801dfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfd4:	ebaa 0303 	sub.w	r3, sl, r3
 801dfd8:	eba3 0309 	sub.w	r3, r3, r9
 801dfdc:	4543      	cmp	r3, r8
 801dfde:	f77f af79 	ble.w	801ded4 <_printf_float+0x23c>
 801dfe2:	2301      	movs	r3, #1
 801dfe4:	465a      	mov	r2, fp
 801dfe6:	4631      	mov	r1, r6
 801dfe8:	4628      	mov	r0, r5
 801dfea:	47b8      	blx	r7
 801dfec:	3001      	adds	r0, #1
 801dfee:	f43f aeae 	beq.w	801dd4e <_printf_float+0xb6>
 801dff2:	f108 0801 	add.w	r8, r8, #1
 801dff6:	e7ec      	b.n	801dfd2 <_printf_float+0x33a>
 801dff8:	4642      	mov	r2, r8
 801dffa:	4631      	mov	r1, r6
 801dffc:	4628      	mov	r0, r5
 801dffe:	47b8      	blx	r7
 801e000:	3001      	adds	r0, #1
 801e002:	d1c2      	bne.n	801df8a <_printf_float+0x2f2>
 801e004:	e6a3      	b.n	801dd4e <_printf_float+0xb6>
 801e006:	2301      	movs	r3, #1
 801e008:	4631      	mov	r1, r6
 801e00a:	4628      	mov	r0, r5
 801e00c:	9206      	str	r2, [sp, #24]
 801e00e:	47b8      	blx	r7
 801e010:	3001      	adds	r0, #1
 801e012:	f43f ae9c 	beq.w	801dd4e <_printf_float+0xb6>
 801e016:	9a06      	ldr	r2, [sp, #24]
 801e018:	f10b 0b01 	add.w	fp, fp, #1
 801e01c:	e7bb      	b.n	801df96 <_printf_float+0x2fe>
 801e01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e022:	4631      	mov	r1, r6
 801e024:	4628      	mov	r0, r5
 801e026:	47b8      	blx	r7
 801e028:	3001      	adds	r0, #1
 801e02a:	d1c0      	bne.n	801dfae <_printf_float+0x316>
 801e02c:	e68f      	b.n	801dd4e <_printf_float+0xb6>
 801e02e:	9a06      	ldr	r2, [sp, #24]
 801e030:	464b      	mov	r3, r9
 801e032:	4442      	add	r2, r8
 801e034:	4631      	mov	r1, r6
 801e036:	4628      	mov	r0, r5
 801e038:	47b8      	blx	r7
 801e03a:	3001      	adds	r0, #1
 801e03c:	d1c3      	bne.n	801dfc6 <_printf_float+0x32e>
 801e03e:	e686      	b.n	801dd4e <_printf_float+0xb6>
 801e040:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e044:	f1ba 0f01 	cmp.w	sl, #1
 801e048:	dc01      	bgt.n	801e04e <_printf_float+0x3b6>
 801e04a:	07db      	lsls	r3, r3, #31
 801e04c:	d536      	bpl.n	801e0bc <_printf_float+0x424>
 801e04e:	2301      	movs	r3, #1
 801e050:	4642      	mov	r2, r8
 801e052:	4631      	mov	r1, r6
 801e054:	4628      	mov	r0, r5
 801e056:	47b8      	blx	r7
 801e058:	3001      	adds	r0, #1
 801e05a:	f43f ae78 	beq.w	801dd4e <_printf_float+0xb6>
 801e05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e062:	4631      	mov	r1, r6
 801e064:	4628      	mov	r0, r5
 801e066:	47b8      	blx	r7
 801e068:	3001      	adds	r0, #1
 801e06a:	f43f ae70 	beq.w	801dd4e <_printf_float+0xb6>
 801e06e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e072:	2200      	movs	r2, #0
 801e074:	2300      	movs	r3, #0
 801e076:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e07a:	f7e2 fd3d 	bl	8000af8 <__aeabi_dcmpeq>
 801e07e:	b9c0      	cbnz	r0, 801e0b2 <_printf_float+0x41a>
 801e080:	4653      	mov	r3, sl
 801e082:	f108 0201 	add.w	r2, r8, #1
 801e086:	4631      	mov	r1, r6
 801e088:	4628      	mov	r0, r5
 801e08a:	47b8      	blx	r7
 801e08c:	3001      	adds	r0, #1
 801e08e:	d10c      	bne.n	801e0aa <_printf_float+0x412>
 801e090:	e65d      	b.n	801dd4e <_printf_float+0xb6>
 801e092:	2301      	movs	r3, #1
 801e094:	465a      	mov	r2, fp
 801e096:	4631      	mov	r1, r6
 801e098:	4628      	mov	r0, r5
 801e09a:	47b8      	blx	r7
 801e09c:	3001      	adds	r0, #1
 801e09e:	f43f ae56 	beq.w	801dd4e <_printf_float+0xb6>
 801e0a2:	f108 0801 	add.w	r8, r8, #1
 801e0a6:	45d0      	cmp	r8, sl
 801e0a8:	dbf3      	blt.n	801e092 <_printf_float+0x3fa>
 801e0aa:	464b      	mov	r3, r9
 801e0ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e0b0:	e6df      	b.n	801de72 <_printf_float+0x1da>
 801e0b2:	f04f 0800 	mov.w	r8, #0
 801e0b6:	f104 0b1a 	add.w	fp, r4, #26
 801e0ba:	e7f4      	b.n	801e0a6 <_printf_float+0x40e>
 801e0bc:	2301      	movs	r3, #1
 801e0be:	4642      	mov	r2, r8
 801e0c0:	e7e1      	b.n	801e086 <_printf_float+0x3ee>
 801e0c2:	2301      	movs	r3, #1
 801e0c4:	464a      	mov	r2, r9
 801e0c6:	4631      	mov	r1, r6
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	47b8      	blx	r7
 801e0cc:	3001      	adds	r0, #1
 801e0ce:	f43f ae3e 	beq.w	801dd4e <_printf_float+0xb6>
 801e0d2:	f108 0801 	add.w	r8, r8, #1
 801e0d6:	68e3      	ldr	r3, [r4, #12]
 801e0d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e0da:	1a5b      	subs	r3, r3, r1
 801e0dc:	4543      	cmp	r3, r8
 801e0de:	dcf0      	bgt.n	801e0c2 <_printf_float+0x42a>
 801e0e0:	e6fc      	b.n	801dedc <_printf_float+0x244>
 801e0e2:	f04f 0800 	mov.w	r8, #0
 801e0e6:	f104 0919 	add.w	r9, r4, #25
 801e0ea:	e7f4      	b.n	801e0d6 <_printf_float+0x43e>

0801e0ec <_printf_common>:
 801e0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0f0:	4616      	mov	r6, r2
 801e0f2:	4698      	mov	r8, r3
 801e0f4:	688a      	ldr	r2, [r1, #8]
 801e0f6:	690b      	ldr	r3, [r1, #16]
 801e0f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e0fc:	4293      	cmp	r3, r2
 801e0fe:	bfb8      	it	lt
 801e100:	4613      	movlt	r3, r2
 801e102:	6033      	str	r3, [r6, #0]
 801e104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e108:	4607      	mov	r7, r0
 801e10a:	460c      	mov	r4, r1
 801e10c:	b10a      	cbz	r2, 801e112 <_printf_common+0x26>
 801e10e:	3301      	adds	r3, #1
 801e110:	6033      	str	r3, [r6, #0]
 801e112:	6823      	ldr	r3, [r4, #0]
 801e114:	0699      	lsls	r1, r3, #26
 801e116:	bf42      	ittt	mi
 801e118:	6833      	ldrmi	r3, [r6, #0]
 801e11a:	3302      	addmi	r3, #2
 801e11c:	6033      	strmi	r3, [r6, #0]
 801e11e:	6825      	ldr	r5, [r4, #0]
 801e120:	f015 0506 	ands.w	r5, r5, #6
 801e124:	d106      	bne.n	801e134 <_printf_common+0x48>
 801e126:	f104 0a19 	add.w	sl, r4, #25
 801e12a:	68e3      	ldr	r3, [r4, #12]
 801e12c:	6832      	ldr	r2, [r6, #0]
 801e12e:	1a9b      	subs	r3, r3, r2
 801e130:	42ab      	cmp	r3, r5
 801e132:	dc26      	bgt.n	801e182 <_printf_common+0x96>
 801e134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e138:	6822      	ldr	r2, [r4, #0]
 801e13a:	3b00      	subs	r3, #0
 801e13c:	bf18      	it	ne
 801e13e:	2301      	movne	r3, #1
 801e140:	0692      	lsls	r2, r2, #26
 801e142:	d42b      	bmi.n	801e19c <_printf_common+0xb0>
 801e144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e148:	4641      	mov	r1, r8
 801e14a:	4638      	mov	r0, r7
 801e14c:	47c8      	blx	r9
 801e14e:	3001      	adds	r0, #1
 801e150:	d01e      	beq.n	801e190 <_printf_common+0xa4>
 801e152:	6823      	ldr	r3, [r4, #0]
 801e154:	6922      	ldr	r2, [r4, #16]
 801e156:	f003 0306 	and.w	r3, r3, #6
 801e15a:	2b04      	cmp	r3, #4
 801e15c:	bf02      	ittt	eq
 801e15e:	68e5      	ldreq	r5, [r4, #12]
 801e160:	6833      	ldreq	r3, [r6, #0]
 801e162:	1aed      	subeq	r5, r5, r3
 801e164:	68a3      	ldr	r3, [r4, #8]
 801e166:	bf0c      	ite	eq
 801e168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e16c:	2500      	movne	r5, #0
 801e16e:	4293      	cmp	r3, r2
 801e170:	bfc4      	itt	gt
 801e172:	1a9b      	subgt	r3, r3, r2
 801e174:	18ed      	addgt	r5, r5, r3
 801e176:	2600      	movs	r6, #0
 801e178:	341a      	adds	r4, #26
 801e17a:	42b5      	cmp	r5, r6
 801e17c:	d11a      	bne.n	801e1b4 <_printf_common+0xc8>
 801e17e:	2000      	movs	r0, #0
 801e180:	e008      	b.n	801e194 <_printf_common+0xa8>
 801e182:	2301      	movs	r3, #1
 801e184:	4652      	mov	r2, sl
 801e186:	4641      	mov	r1, r8
 801e188:	4638      	mov	r0, r7
 801e18a:	47c8      	blx	r9
 801e18c:	3001      	adds	r0, #1
 801e18e:	d103      	bne.n	801e198 <_printf_common+0xac>
 801e190:	f04f 30ff 	mov.w	r0, #4294967295
 801e194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e198:	3501      	adds	r5, #1
 801e19a:	e7c6      	b.n	801e12a <_printf_common+0x3e>
 801e19c:	18e1      	adds	r1, r4, r3
 801e19e:	1c5a      	adds	r2, r3, #1
 801e1a0:	2030      	movs	r0, #48	@ 0x30
 801e1a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e1a6:	4422      	add	r2, r4
 801e1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e1ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e1b0:	3302      	adds	r3, #2
 801e1b2:	e7c7      	b.n	801e144 <_printf_common+0x58>
 801e1b4:	2301      	movs	r3, #1
 801e1b6:	4622      	mov	r2, r4
 801e1b8:	4641      	mov	r1, r8
 801e1ba:	4638      	mov	r0, r7
 801e1bc:	47c8      	blx	r9
 801e1be:	3001      	adds	r0, #1
 801e1c0:	d0e6      	beq.n	801e190 <_printf_common+0xa4>
 801e1c2:	3601      	adds	r6, #1
 801e1c4:	e7d9      	b.n	801e17a <_printf_common+0x8e>
	...

0801e1c8 <_printf_i>:
 801e1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e1cc:	7e0f      	ldrb	r7, [r1, #24]
 801e1ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e1d0:	2f78      	cmp	r7, #120	@ 0x78
 801e1d2:	4691      	mov	r9, r2
 801e1d4:	4680      	mov	r8, r0
 801e1d6:	460c      	mov	r4, r1
 801e1d8:	469a      	mov	sl, r3
 801e1da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e1de:	d807      	bhi.n	801e1f0 <_printf_i+0x28>
 801e1e0:	2f62      	cmp	r7, #98	@ 0x62
 801e1e2:	d80a      	bhi.n	801e1fa <_printf_i+0x32>
 801e1e4:	2f00      	cmp	r7, #0
 801e1e6:	f000 80d2 	beq.w	801e38e <_printf_i+0x1c6>
 801e1ea:	2f58      	cmp	r7, #88	@ 0x58
 801e1ec:	f000 80b9 	beq.w	801e362 <_printf_i+0x19a>
 801e1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e1f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e1f8:	e03a      	b.n	801e270 <_printf_i+0xa8>
 801e1fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e1fe:	2b15      	cmp	r3, #21
 801e200:	d8f6      	bhi.n	801e1f0 <_printf_i+0x28>
 801e202:	a101      	add	r1, pc, #4	@ (adr r1, 801e208 <_printf_i+0x40>)
 801e204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e208:	0801e261 	.word	0x0801e261
 801e20c:	0801e275 	.word	0x0801e275
 801e210:	0801e1f1 	.word	0x0801e1f1
 801e214:	0801e1f1 	.word	0x0801e1f1
 801e218:	0801e1f1 	.word	0x0801e1f1
 801e21c:	0801e1f1 	.word	0x0801e1f1
 801e220:	0801e275 	.word	0x0801e275
 801e224:	0801e1f1 	.word	0x0801e1f1
 801e228:	0801e1f1 	.word	0x0801e1f1
 801e22c:	0801e1f1 	.word	0x0801e1f1
 801e230:	0801e1f1 	.word	0x0801e1f1
 801e234:	0801e375 	.word	0x0801e375
 801e238:	0801e29f 	.word	0x0801e29f
 801e23c:	0801e32f 	.word	0x0801e32f
 801e240:	0801e1f1 	.word	0x0801e1f1
 801e244:	0801e1f1 	.word	0x0801e1f1
 801e248:	0801e397 	.word	0x0801e397
 801e24c:	0801e1f1 	.word	0x0801e1f1
 801e250:	0801e29f 	.word	0x0801e29f
 801e254:	0801e1f1 	.word	0x0801e1f1
 801e258:	0801e1f1 	.word	0x0801e1f1
 801e25c:	0801e337 	.word	0x0801e337
 801e260:	6833      	ldr	r3, [r6, #0]
 801e262:	1d1a      	adds	r2, r3, #4
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	6032      	str	r2, [r6, #0]
 801e268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e26c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e270:	2301      	movs	r3, #1
 801e272:	e09d      	b.n	801e3b0 <_printf_i+0x1e8>
 801e274:	6833      	ldr	r3, [r6, #0]
 801e276:	6820      	ldr	r0, [r4, #0]
 801e278:	1d19      	adds	r1, r3, #4
 801e27a:	6031      	str	r1, [r6, #0]
 801e27c:	0606      	lsls	r6, r0, #24
 801e27e:	d501      	bpl.n	801e284 <_printf_i+0xbc>
 801e280:	681d      	ldr	r5, [r3, #0]
 801e282:	e003      	b.n	801e28c <_printf_i+0xc4>
 801e284:	0645      	lsls	r5, r0, #25
 801e286:	d5fb      	bpl.n	801e280 <_printf_i+0xb8>
 801e288:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e28c:	2d00      	cmp	r5, #0
 801e28e:	da03      	bge.n	801e298 <_printf_i+0xd0>
 801e290:	232d      	movs	r3, #45	@ 0x2d
 801e292:	426d      	negs	r5, r5
 801e294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e298:	4859      	ldr	r0, [pc, #356]	@ (801e400 <_printf_i+0x238>)
 801e29a:	230a      	movs	r3, #10
 801e29c:	e011      	b.n	801e2c2 <_printf_i+0xfa>
 801e29e:	6821      	ldr	r1, [r4, #0]
 801e2a0:	6833      	ldr	r3, [r6, #0]
 801e2a2:	0608      	lsls	r0, r1, #24
 801e2a4:	f853 5b04 	ldr.w	r5, [r3], #4
 801e2a8:	d402      	bmi.n	801e2b0 <_printf_i+0xe8>
 801e2aa:	0649      	lsls	r1, r1, #25
 801e2ac:	bf48      	it	mi
 801e2ae:	b2ad      	uxthmi	r5, r5
 801e2b0:	2f6f      	cmp	r7, #111	@ 0x6f
 801e2b2:	4853      	ldr	r0, [pc, #332]	@ (801e400 <_printf_i+0x238>)
 801e2b4:	6033      	str	r3, [r6, #0]
 801e2b6:	bf14      	ite	ne
 801e2b8:	230a      	movne	r3, #10
 801e2ba:	2308      	moveq	r3, #8
 801e2bc:	2100      	movs	r1, #0
 801e2be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e2c2:	6866      	ldr	r6, [r4, #4]
 801e2c4:	60a6      	str	r6, [r4, #8]
 801e2c6:	2e00      	cmp	r6, #0
 801e2c8:	bfa2      	ittt	ge
 801e2ca:	6821      	ldrge	r1, [r4, #0]
 801e2cc:	f021 0104 	bicge.w	r1, r1, #4
 801e2d0:	6021      	strge	r1, [r4, #0]
 801e2d2:	b90d      	cbnz	r5, 801e2d8 <_printf_i+0x110>
 801e2d4:	2e00      	cmp	r6, #0
 801e2d6:	d04b      	beq.n	801e370 <_printf_i+0x1a8>
 801e2d8:	4616      	mov	r6, r2
 801e2da:	fbb5 f1f3 	udiv	r1, r5, r3
 801e2de:	fb03 5711 	mls	r7, r3, r1, r5
 801e2e2:	5dc7      	ldrb	r7, [r0, r7]
 801e2e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e2e8:	462f      	mov	r7, r5
 801e2ea:	42bb      	cmp	r3, r7
 801e2ec:	460d      	mov	r5, r1
 801e2ee:	d9f4      	bls.n	801e2da <_printf_i+0x112>
 801e2f0:	2b08      	cmp	r3, #8
 801e2f2:	d10b      	bne.n	801e30c <_printf_i+0x144>
 801e2f4:	6823      	ldr	r3, [r4, #0]
 801e2f6:	07df      	lsls	r7, r3, #31
 801e2f8:	d508      	bpl.n	801e30c <_printf_i+0x144>
 801e2fa:	6923      	ldr	r3, [r4, #16]
 801e2fc:	6861      	ldr	r1, [r4, #4]
 801e2fe:	4299      	cmp	r1, r3
 801e300:	bfde      	ittt	le
 801e302:	2330      	movle	r3, #48	@ 0x30
 801e304:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e308:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e30c:	1b92      	subs	r2, r2, r6
 801e30e:	6122      	str	r2, [r4, #16]
 801e310:	f8cd a000 	str.w	sl, [sp]
 801e314:	464b      	mov	r3, r9
 801e316:	aa03      	add	r2, sp, #12
 801e318:	4621      	mov	r1, r4
 801e31a:	4640      	mov	r0, r8
 801e31c:	f7ff fee6 	bl	801e0ec <_printf_common>
 801e320:	3001      	adds	r0, #1
 801e322:	d14a      	bne.n	801e3ba <_printf_i+0x1f2>
 801e324:	f04f 30ff 	mov.w	r0, #4294967295
 801e328:	b004      	add	sp, #16
 801e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e32e:	6823      	ldr	r3, [r4, #0]
 801e330:	f043 0320 	orr.w	r3, r3, #32
 801e334:	6023      	str	r3, [r4, #0]
 801e336:	4833      	ldr	r0, [pc, #204]	@ (801e404 <_printf_i+0x23c>)
 801e338:	2778      	movs	r7, #120	@ 0x78
 801e33a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e33e:	6823      	ldr	r3, [r4, #0]
 801e340:	6831      	ldr	r1, [r6, #0]
 801e342:	061f      	lsls	r7, r3, #24
 801e344:	f851 5b04 	ldr.w	r5, [r1], #4
 801e348:	d402      	bmi.n	801e350 <_printf_i+0x188>
 801e34a:	065f      	lsls	r7, r3, #25
 801e34c:	bf48      	it	mi
 801e34e:	b2ad      	uxthmi	r5, r5
 801e350:	6031      	str	r1, [r6, #0]
 801e352:	07d9      	lsls	r1, r3, #31
 801e354:	bf44      	itt	mi
 801e356:	f043 0320 	orrmi.w	r3, r3, #32
 801e35a:	6023      	strmi	r3, [r4, #0]
 801e35c:	b11d      	cbz	r5, 801e366 <_printf_i+0x19e>
 801e35e:	2310      	movs	r3, #16
 801e360:	e7ac      	b.n	801e2bc <_printf_i+0xf4>
 801e362:	4827      	ldr	r0, [pc, #156]	@ (801e400 <_printf_i+0x238>)
 801e364:	e7e9      	b.n	801e33a <_printf_i+0x172>
 801e366:	6823      	ldr	r3, [r4, #0]
 801e368:	f023 0320 	bic.w	r3, r3, #32
 801e36c:	6023      	str	r3, [r4, #0]
 801e36e:	e7f6      	b.n	801e35e <_printf_i+0x196>
 801e370:	4616      	mov	r6, r2
 801e372:	e7bd      	b.n	801e2f0 <_printf_i+0x128>
 801e374:	6833      	ldr	r3, [r6, #0]
 801e376:	6825      	ldr	r5, [r4, #0]
 801e378:	6961      	ldr	r1, [r4, #20]
 801e37a:	1d18      	adds	r0, r3, #4
 801e37c:	6030      	str	r0, [r6, #0]
 801e37e:	062e      	lsls	r6, r5, #24
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	d501      	bpl.n	801e388 <_printf_i+0x1c0>
 801e384:	6019      	str	r1, [r3, #0]
 801e386:	e002      	b.n	801e38e <_printf_i+0x1c6>
 801e388:	0668      	lsls	r0, r5, #25
 801e38a:	d5fb      	bpl.n	801e384 <_printf_i+0x1bc>
 801e38c:	8019      	strh	r1, [r3, #0]
 801e38e:	2300      	movs	r3, #0
 801e390:	6123      	str	r3, [r4, #16]
 801e392:	4616      	mov	r6, r2
 801e394:	e7bc      	b.n	801e310 <_printf_i+0x148>
 801e396:	6833      	ldr	r3, [r6, #0]
 801e398:	1d1a      	adds	r2, r3, #4
 801e39a:	6032      	str	r2, [r6, #0]
 801e39c:	681e      	ldr	r6, [r3, #0]
 801e39e:	6862      	ldr	r2, [r4, #4]
 801e3a0:	2100      	movs	r1, #0
 801e3a2:	4630      	mov	r0, r6
 801e3a4:	f7e1 ff2c 	bl	8000200 <memchr>
 801e3a8:	b108      	cbz	r0, 801e3ae <_printf_i+0x1e6>
 801e3aa:	1b80      	subs	r0, r0, r6
 801e3ac:	6060      	str	r0, [r4, #4]
 801e3ae:	6863      	ldr	r3, [r4, #4]
 801e3b0:	6123      	str	r3, [r4, #16]
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e3b8:	e7aa      	b.n	801e310 <_printf_i+0x148>
 801e3ba:	6923      	ldr	r3, [r4, #16]
 801e3bc:	4632      	mov	r2, r6
 801e3be:	4649      	mov	r1, r9
 801e3c0:	4640      	mov	r0, r8
 801e3c2:	47d0      	blx	sl
 801e3c4:	3001      	adds	r0, #1
 801e3c6:	d0ad      	beq.n	801e324 <_printf_i+0x15c>
 801e3c8:	6823      	ldr	r3, [r4, #0]
 801e3ca:	079b      	lsls	r3, r3, #30
 801e3cc:	d413      	bmi.n	801e3f6 <_printf_i+0x22e>
 801e3ce:	68e0      	ldr	r0, [r4, #12]
 801e3d0:	9b03      	ldr	r3, [sp, #12]
 801e3d2:	4298      	cmp	r0, r3
 801e3d4:	bfb8      	it	lt
 801e3d6:	4618      	movlt	r0, r3
 801e3d8:	e7a6      	b.n	801e328 <_printf_i+0x160>
 801e3da:	2301      	movs	r3, #1
 801e3dc:	4632      	mov	r2, r6
 801e3de:	4649      	mov	r1, r9
 801e3e0:	4640      	mov	r0, r8
 801e3e2:	47d0      	blx	sl
 801e3e4:	3001      	adds	r0, #1
 801e3e6:	d09d      	beq.n	801e324 <_printf_i+0x15c>
 801e3e8:	3501      	adds	r5, #1
 801e3ea:	68e3      	ldr	r3, [r4, #12]
 801e3ec:	9903      	ldr	r1, [sp, #12]
 801e3ee:	1a5b      	subs	r3, r3, r1
 801e3f0:	42ab      	cmp	r3, r5
 801e3f2:	dcf2      	bgt.n	801e3da <_printf_i+0x212>
 801e3f4:	e7eb      	b.n	801e3ce <_printf_i+0x206>
 801e3f6:	2500      	movs	r5, #0
 801e3f8:	f104 0619 	add.w	r6, r4, #25
 801e3fc:	e7f5      	b.n	801e3ea <_printf_i+0x222>
 801e3fe:	bf00      	nop
 801e400:	080256ab 	.word	0x080256ab
 801e404:	080256bc 	.word	0x080256bc

0801e408 <_scanf_float>:
 801e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e40c:	b087      	sub	sp, #28
 801e40e:	4617      	mov	r7, r2
 801e410:	9303      	str	r3, [sp, #12]
 801e412:	688b      	ldr	r3, [r1, #8]
 801e414:	1e5a      	subs	r2, r3, #1
 801e416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e41a:	bf81      	itttt	hi
 801e41c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e420:	eb03 0b05 	addhi.w	fp, r3, r5
 801e424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e428:	608b      	strhi	r3, [r1, #8]
 801e42a:	680b      	ldr	r3, [r1, #0]
 801e42c:	460a      	mov	r2, r1
 801e42e:	f04f 0500 	mov.w	r5, #0
 801e432:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e436:	f842 3b1c 	str.w	r3, [r2], #28
 801e43a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e43e:	4680      	mov	r8, r0
 801e440:	460c      	mov	r4, r1
 801e442:	bf98      	it	ls
 801e444:	f04f 0b00 	movls.w	fp, #0
 801e448:	9201      	str	r2, [sp, #4]
 801e44a:	4616      	mov	r6, r2
 801e44c:	46aa      	mov	sl, r5
 801e44e:	46a9      	mov	r9, r5
 801e450:	9502      	str	r5, [sp, #8]
 801e452:	68a2      	ldr	r2, [r4, #8]
 801e454:	b152      	cbz	r2, 801e46c <_scanf_float+0x64>
 801e456:	683b      	ldr	r3, [r7, #0]
 801e458:	781b      	ldrb	r3, [r3, #0]
 801e45a:	2b4e      	cmp	r3, #78	@ 0x4e
 801e45c:	d864      	bhi.n	801e528 <_scanf_float+0x120>
 801e45e:	2b40      	cmp	r3, #64	@ 0x40
 801e460:	d83c      	bhi.n	801e4dc <_scanf_float+0xd4>
 801e462:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e466:	b2c8      	uxtb	r0, r1
 801e468:	280e      	cmp	r0, #14
 801e46a:	d93a      	bls.n	801e4e2 <_scanf_float+0xda>
 801e46c:	f1b9 0f00 	cmp.w	r9, #0
 801e470:	d003      	beq.n	801e47a <_scanf_float+0x72>
 801e472:	6823      	ldr	r3, [r4, #0]
 801e474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e478:	6023      	str	r3, [r4, #0]
 801e47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e47e:	f1ba 0f01 	cmp.w	sl, #1
 801e482:	f200 8117 	bhi.w	801e6b4 <_scanf_float+0x2ac>
 801e486:	9b01      	ldr	r3, [sp, #4]
 801e488:	429e      	cmp	r6, r3
 801e48a:	f200 8108 	bhi.w	801e69e <_scanf_float+0x296>
 801e48e:	2001      	movs	r0, #1
 801e490:	b007      	add	sp, #28
 801e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e496:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e49a:	2a0d      	cmp	r2, #13
 801e49c:	d8e6      	bhi.n	801e46c <_scanf_float+0x64>
 801e49e:	a101      	add	r1, pc, #4	@ (adr r1, 801e4a4 <_scanf_float+0x9c>)
 801e4a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e4a4:	0801e5eb 	.word	0x0801e5eb
 801e4a8:	0801e46d 	.word	0x0801e46d
 801e4ac:	0801e46d 	.word	0x0801e46d
 801e4b0:	0801e46d 	.word	0x0801e46d
 801e4b4:	0801e64b 	.word	0x0801e64b
 801e4b8:	0801e623 	.word	0x0801e623
 801e4bc:	0801e46d 	.word	0x0801e46d
 801e4c0:	0801e46d 	.word	0x0801e46d
 801e4c4:	0801e5f9 	.word	0x0801e5f9
 801e4c8:	0801e46d 	.word	0x0801e46d
 801e4cc:	0801e46d 	.word	0x0801e46d
 801e4d0:	0801e46d 	.word	0x0801e46d
 801e4d4:	0801e46d 	.word	0x0801e46d
 801e4d8:	0801e5b1 	.word	0x0801e5b1
 801e4dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e4e0:	e7db      	b.n	801e49a <_scanf_float+0x92>
 801e4e2:	290e      	cmp	r1, #14
 801e4e4:	d8c2      	bhi.n	801e46c <_scanf_float+0x64>
 801e4e6:	a001      	add	r0, pc, #4	@ (adr r0, 801e4ec <_scanf_float+0xe4>)
 801e4e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e4ec:	0801e5a1 	.word	0x0801e5a1
 801e4f0:	0801e46d 	.word	0x0801e46d
 801e4f4:	0801e5a1 	.word	0x0801e5a1
 801e4f8:	0801e637 	.word	0x0801e637
 801e4fc:	0801e46d 	.word	0x0801e46d
 801e500:	0801e549 	.word	0x0801e549
 801e504:	0801e587 	.word	0x0801e587
 801e508:	0801e587 	.word	0x0801e587
 801e50c:	0801e587 	.word	0x0801e587
 801e510:	0801e587 	.word	0x0801e587
 801e514:	0801e587 	.word	0x0801e587
 801e518:	0801e587 	.word	0x0801e587
 801e51c:	0801e587 	.word	0x0801e587
 801e520:	0801e587 	.word	0x0801e587
 801e524:	0801e587 	.word	0x0801e587
 801e528:	2b6e      	cmp	r3, #110	@ 0x6e
 801e52a:	d809      	bhi.n	801e540 <_scanf_float+0x138>
 801e52c:	2b60      	cmp	r3, #96	@ 0x60
 801e52e:	d8b2      	bhi.n	801e496 <_scanf_float+0x8e>
 801e530:	2b54      	cmp	r3, #84	@ 0x54
 801e532:	d07b      	beq.n	801e62c <_scanf_float+0x224>
 801e534:	2b59      	cmp	r3, #89	@ 0x59
 801e536:	d199      	bne.n	801e46c <_scanf_float+0x64>
 801e538:	2d07      	cmp	r5, #7
 801e53a:	d197      	bne.n	801e46c <_scanf_float+0x64>
 801e53c:	2508      	movs	r5, #8
 801e53e:	e02c      	b.n	801e59a <_scanf_float+0x192>
 801e540:	2b74      	cmp	r3, #116	@ 0x74
 801e542:	d073      	beq.n	801e62c <_scanf_float+0x224>
 801e544:	2b79      	cmp	r3, #121	@ 0x79
 801e546:	e7f6      	b.n	801e536 <_scanf_float+0x12e>
 801e548:	6821      	ldr	r1, [r4, #0]
 801e54a:	05c8      	lsls	r0, r1, #23
 801e54c:	d51b      	bpl.n	801e586 <_scanf_float+0x17e>
 801e54e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e552:	6021      	str	r1, [r4, #0]
 801e554:	f109 0901 	add.w	r9, r9, #1
 801e558:	f1bb 0f00 	cmp.w	fp, #0
 801e55c:	d003      	beq.n	801e566 <_scanf_float+0x15e>
 801e55e:	3201      	adds	r2, #1
 801e560:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e564:	60a2      	str	r2, [r4, #8]
 801e566:	68a3      	ldr	r3, [r4, #8]
 801e568:	3b01      	subs	r3, #1
 801e56a:	60a3      	str	r3, [r4, #8]
 801e56c:	6923      	ldr	r3, [r4, #16]
 801e56e:	3301      	adds	r3, #1
 801e570:	6123      	str	r3, [r4, #16]
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	3b01      	subs	r3, #1
 801e576:	2b00      	cmp	r3, #0
 801e578:	607b      	str	r3, [r7, #4]
 801e57a:	f340 8087 	ble.w	801e68c <_scanf_float+0x284>
 801e57e:	683b      	ldr	r3, [r7, #0]
 801e580:	3301      	adds	r3, #1
 801e582:	603b      	str	r3, [r7, #0]
 801e584:	e765      	b.n	801e452 <_scanf_float+0x4a>
 801e586:	eb1a 0105 	adds.w	r1, sl, r5
 801e58a:	f47f af6f 	bne.w	801e46c <_scanf_float+0x64>
 801e58e:	6822      	ldr	r2, [r4, #0]
 801e590:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e594:	6022      	str	r2, [r4, #0]
 801e596:	460d      	mov	r5, r1
 801e598:	468a      	mov	sl, r1
 801e59a:	f806 3b01 	strb.w	r3, [r6], #1
 801e59e:	e7e2      	b.n	801e566 <_scanf_float+0x15e>
 801e5a0:	6822      	ldr	r2, [r4, #0]
 801e5a2:	0610      	lsls	r0, r2, #24
 801e5a4:	f57f af62 	bpl.w	801e46c <_scanf_float+0x64>
 801e5a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e5ac:	6022      	str	r2, [r4, #0]
 801e5ae:	e7f4      	b.n	801e59a <_scanf_float+0x192>
 801e5b0:	f1ba 0f00 	cmp.w	sl, #0
 801e5b4:	d10e      	bne.n	801e5d4 <_scanf_float+0x1cc>
 801e5b6:	f1b9 0f00 	cmp.w	r9, #0
 801e5ba:	d10e      	bne.n	801e5da <_scanf_float+0x1d2>
 801e5bc:	6822      	ldr	r2, [r4, #0]
 801e5be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e5c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e5c6:	d108      	bne.n	801e5da <_scanf_float+0x1d2>
 801e5c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e5cc:	6022      	str	r2, [r4, #0]
 801e5ce:	f04f 0a01 	mov.w	sl, #1
 801e5d2:	e7e2      	b.n	801e59a <_scanf_float+0x192>
 801e5d4:	f1ba 0f02 	cmp.w	sl, #2
 801e5d8:	d055      	beq.n	801e686 <_scanf_float+0x27e>
 801e5da:	2d01      	cmp	r5, #1
 801e5dc:	d002      	beq.n	801e5e4 <_scanf_float+0x1dc>
 801e5de:	2d04      	cmp	r5, #4
 801e5e0:	f47f af44 	bne.w	801e46c <_scanf_float+0x64>
 801e5e4:	3501      	adds	r5, #1
 801e5e6:	b2ed      	uxtb	r5, r5
 801e5e8:	e7d7      	b.n	801e59a <_scanf_float+0x192>
 801e5ea:	f1ba 0f01 	cmp.w	sl, #1
 801e5ee:	f47f af3d 	bne.w	801e46c <_scanf_float+0x64>
 801e5f2:	f04f 0a02 	mov.w	sl, #2
 801e5f6:	e7d0      	b.n	801e59a <_scanf_float+0x192>
 801e5f8:	b97d      	cbnz	r5, 801e61a <_scanf_float+0x212>
 801e5fa:	f1b9 0f00 	cmp.w	r9, #0
 801e5fe:	f47f af38 	bne.w	801e472 <_scanf_float+0x6a>
 801e602:	6822      	ldr	r2, [r4, #0]
 801e604:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e608:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e60c:	f040 8108 	bne.w	801e820 <_scanf_float+0x418>
 801e610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e614:	6022      	str	r2, [r4, #0]
 801e616:	2501      	movs	r5, #1
 801e618:	e7bf      	b.n	801e59a <_scanf_float+0x192>
 801e61a:	2d03      	cmp	r5, #3
 801e61c:	d0e2      	beq.n	801e5e4 <_scanf_float+0x1dc>
 801e61e:	2d05      	cmp	r5, #5
 801e620:	e7de      	b.n	801e5e0 <_scanf_float+0x1d8>
 801e622:	2d02      	cmp	r5, #2
 801e624:	f47f af22 	bne.w	801e46c <_scanf_float+0x64>
 801e628:	2503      	movs	r5, #3
 801e62a:	e7b6      	b.n	801e59a <_scanf_float+0x192>
 801e62c:	2d06      	cmp	r5, #6
 801e62e:	f47f af1d 	bne.w	801e46c <_scanf_float+0x64>
 801e632:	2507      	movs	r5, #7
 801e634:	e7b1      	b.n	801e59a <_scanf_float+0x192>
 801e636:	6822      	ldr	r2, [r4, #0]
 801e638:	0591      	lsls	r1, r2, #22
 801e63a:	f57f af17 	bpl.w	801e46c <_scanf_float+0x64>
 801e63e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e642:	6022      	str	r2, [r4, #0]
 801e644:	f8cd 9008 	str.w	r9, [sp, #8]
 801e648:	e7a7      	b.n	801e59a <_scanf_float+0x192>
 801e64a:	6822      	ldr	r2, [r4, #0]
 801e64c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e650:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e654:	d006      	beq.n	801e664 <_scanf_float+0x25c>
 801e656:	0550      	lsls	r0, r2, #21
 801e658:	f57f af08 	bpl.w	801e46c <_scanf_float+0x64>
 801e65c:	f1b9 0f00 	cmp.w	r9, #0
 801e660:	f000 80de 	beq.w	801e820 <_scanf_float+0x418>
 801e664:	0591      	lsls	r1, r2, #22
 801e666:	bf58      	it	pl
 801e668:	9902      	ldrpl	r1, [sp, #8]
 801e66a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e66e:	bf58      	it	pl
 801e670:	eba9 0101 	subpl.w	r1, r9, r1
 801e674:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e678:	bf58      	it	pl
 801e67a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e67e:	6022      	str	r2, [r4, #0]
 801e680:	f04f 0900 	mov.w	r9, #0
 801e684:	e789      	b.n	801e59a <_scanf_float+0x192>
 801e686:	f04f 0a03 	mov.w	sl, #3
 801e68a:	e786      	b.n	801e59a <_scanf_float+0x192>
 801e68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e690:	4639      	mov	r1, r7
 801e692:	4640      	mov	r0, r8
 801e694:	4798      	blx	r3
 801e696:	2800      	cmp	r0, #0
 801e698:	f43f aedb 	beq.w	801e452 <_scanf_float+0x4a>
 801e69c:	e6e6      	b.n	801e46c <_scanf_float+0x64>
 801e69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6a6:	463a      	mov	r2, r7
 801e6a8:	4640      	mov	r0, r8
 801e6aa:	4798      	blx	r3
 801e6ac:	6923      	ldr	r3, [r4, #16]
 801e6ae:	3b01      	subs	r3, #1
 801e6b0:	6123      	str	r3, [r4, #16]
 801e6b2:	e6e8      	b.n	801e486 <_scanf_float+0x7e>
 801e6b4:	1e6b      	subs	r3, r5, #1
 801e6b6:	2b06      	cmp	r3, #6
 801e6b8:	d824      	bhi.n	801e704 <_scanf_float+0x2fc>
 801e6ba:	2d02      	cmp	r5, #2
 801e6bc:	d836      	bhi.n	801e72c <_scanf_float+0x324>
 801e6be:	9b01      	ldr	r3, [sp, #4]
 801e6c0:	429e      	cmp	r6, r3
 801e6c2:	f67f aee4 	bls.w	801e48e <_scanf_float+0x86>
 801e6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6ce:	463a      	mov	r2, r7
 801e6d0:	4640      	mov	r0, r8
 801e6d2:	4798      	blx	r3
 801e6d4:	6923      	ldr	r3, [r4, #16]
 801e6d6:	3b01      	subs	r3, #1
 801e6d8:	6123      	str	r3, [r4, #16]
 801e6da:	e7f0      	b.n	801e6be <_scanf_float+0x2b6>
 801e6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e6e4:	463a      	mov	r2, r7
 801e6e6:	4640      	mov	r0, r8
 801e6e8:	4798      	blx	r3
 801e6ea:	6923      	ldr	r3, [r4, #16]
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	6123      	str	r3, [r4, #16]
 801e6f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e6f4:	fa5f fa8a 	uxtb.w	sl, sl
 801e6f8:	f1ba 0f02 	cmp.w	sl, #2
 801e6fc:	d1ee      	bne.n	801e6dc <_scanf_float+0x2d4>
 801e6fe:	3d03      	subs	r5, #3
 801e700:	b2ed      	uxtb	r5, r5
 801e702:	1b76      	subs	r6, r6, r5
 801e704:	6823      	ldr	r3, [r4, #0]
 801e706:	05da      	lsls	r2, r3, #23
 801e708:	d530      	bpl.n	801e76c <_scanf_float+0x364>
 801e70a:	055b      	lsls	r3, r3, #21
 801e70c:	d511      	bpl.n	801e732 <_scanf_float+0x32a>
 801e70e:	9b01      	ldr	r3, [sp, #4]
 801e710:	429e      	cmp	r6, r3
 801e712:	f67f aebc 	bls.w	801e48e <_scanf_float+0x86>
 801e716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e71e:	463a      	mov	r2, r7
 801e720:	4640      	mov	r0, r8
 801e722:	4798      	blx	r3
 801e724:	6923      	ldr	r3, [r4, #16]
 801e726:	3b01      	subs	r3, #1
 801e728:	6123      	str	r3, [r4, #16]
 801e72a:	e7f0      	b.n	801e70e <_scanf_float+0x306>
 801e72c:	46aa      	mov	sl, r5
 801e72e:	46b3      	mov	fp, r6
 801e730:	e7de      	b.n	801e6f0 <_scanf_float+0x2e8>
 801e732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e736:	6923      	ldr	r3, [r4, #16]
 801e738:	2965      	cmp	r1, #101	@ 0x65
 801e73a:	f103 33ff 	add.w	r3, r3, #4294967295
 801e73e:	f106 35ff 	add.w	r5, r6, #4294967295
 801e742:	6123      	str	r3, [r4, #16]
 801e744:	d00c      	beq.n	801e760 <_scanf_float+0x358>
 801e746:	2945      	cmp	r1, #69	@ 0x45
 801e748:	d00a      	beq.n	801e760 <_scanf_float+0x358>
 801e74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e74e:	463a      	mov	r2, r7
 801e750:	4640      	mov	r0, r8
 801e752:	4798      	blx	r3
 801e754:	6923      	ldr	r3, [r4, #16]
 801e756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e75a:	3b01      	subs	r3, #1
 801e75c:	1eb5      	subs	r5, r6, #2
 801e75e:	6123      	str	r3, [r4, #16]
 801e760:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e764:	463a      	mov	r2, r7
 801e766:	4640      	mov	r0, r8
 801e768:	4798      	blx	r3
 801e76a:	462e      	mov	r6, r5
 801e76c:	6822      	ldr	r2, [r4, #0]
 801e76e:	f012 0210 	ands.w	r2, r2, #16
 801e772:	d001      	beq.n	801e778 <_scanf_float+0x370>
 801e774:	2000      	movs	r0, #0
 801e776:	e68b      	b.n	801e490 <_scanf_float+0x88>
 801e778:	7032      	strb	r2, [r6, #0]
 801e77a:	6823      	ldr	r3, [r4, #0]
 801e77c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e784:	d11c      	bne.n	801e7c0 <_scanf_float+0x3b8>
 801e786:	9b02      	ldr	r3, [sp, #8]
 801e788:	454b      	cmp	r3, r9
 801e78a:	eba3 0209 	sub.w	r2, r3, r9
 801e78e:	d123      	bne.n	801e7d8 <_scanf_float+0x3d0>
 801e790:	9901      	ldr	r1, [sp, #4]
 801e792:	2200      	movs	r2, #0
 801e794:	4640      	mov	r0, r8
 801e796:	f002 fdb7 	bl	8021308 <_strtod_r>
 801e79a:	9b03      	ldr	r3, [sp, #12]
 801e79c:	6821      	ldr	r1, [r4, #0]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	f011 0f02 	tst.w	r1, #2
 801e7a4:	ec57 6b10 	vmov	r6, r7, d0
 801e7a8:	f103 0204 	add.w	r2, r3, #4
 801e7ac:	d01f      	beq.n	801e7ee <_scanf_float+0x3e6>
 801e7ae:	9903      	ldr	r1, [sp, #12]
 801e7b0:	600a      	str	r2, [r1, #0]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	e9c3 6700 	strd	r6, r7, [r3]
 801e7b8:	68e3      	ldr	r3, [r4, #12]
 801e7ba:	3301      	adds	r3, #1
 801e7bc:	60e3      	str	r3, [r4, #12]
 801e7be:	e7d9      	b.n	801e774 <_scanf_float+0x36c>
 801e7c0:	9b04      	ldr	r3, [sp, #16]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d0e4      	beq.n	801e790 <_scanf_float+0x388>
 801e7c6:	9905      	ldr	r1, [sp, #20]
 801e7c8:	230a      	movs	r3, #10
 801e7ca:	3101      	adds	r1, #1
 801e7cc:	4640      	mov	r0, r8
 801e7ce:	f7ff f9b7 	bl	801db40 <_strtol_r>
 801e7d2:	9b04      	ldr	r3, [sp, #16]
 801e7d4:	9e05      	ldr	r6, [sp, #20]
 801e7d6:	1ac2      	subs	r2, r0, r3
 801e7d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e7dc:	429e      	cmp	r6, r3
 801e7de:	bf28      	it	cs
 801e7e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e7e4:	4910      	ldr	r1, [pc, #64]	@ (801e828 <_scanf_float+0x420>)
 801e7e6:	4630      	mov	r0, r6
 801e7e8:	f000 f9ae 	bl	801eb48 <siprintf>
 801e7ec:	e7d0      	b.n	801e790 <_scanf_float+0x388>
 801e7ee:	f011 0f04 	tst.w	r1, #4
 801e7f2:	9903      	ldr	r1, [sp, #12]
 801e7f4:	600a      	str	r2, [r1, #0]
 801e7f6:	d1dc      	bne.n	801e7b2 <_scanf_float+0x3aa>
 801e7f8:	681d      	ldr	r5, [r3, #0]
 801e7fa:	4632      	mov	r2, r6
 801e7fc:	463b      	mov	r3, r7
 801e7fe:	4630      	mov	r0, r6
 801e800:	4639      	mov	r1, r7
 801e802:	f7e2 f9ab 	bl	8000b5c <__aeabi_dcmpun>
 801e806:	b128      	cbz	r0, 801e814 <_scanf_float+0x40c>
 801e808:	4808      	ldr	r0, [pc, #32]	@ (801e82c <_scanf_float+0x424>)
 801e80a:	f000 fc0d 	bl	801f028 <nanf>
 801e80e:	ed85 0a00 	vstr	s0, [r5]
 801e812:	e7d1      	b.n	801e7b8 <_scanf_float+0x3b0>
 801e814:	4630      	mov	r0, r6
 801e816:	4639      	mov	r1, r7
 801e818:	f7e2 f9fe 	bl	8000c18 <__aeabi_d2f>
 801e81c:	6028      	str	r0, [r5, #0]
 801e81e:	e7cb      	b.n	801e7b8 <_scanf_float+0x3b0>
 801e820:	f04f 0900 	mov.w	r9, #0
 801e824:	e629      	b.n	801e47a <_scanf_float+0x72>
 801e826:	bf00      	nop
 801e828:	080256cd 	.word	0x080256cd
 801e82c:	0802577e 	.word	0x0802577e

0801e830 <std>:
 801e830:	2300      	movs	r3, #0
 801e832:	b510      	push	{r4, lr}
 801e834:	4604      	mov	r4, r0
 801e836:	e9c0 3300 	strd	r3, r3, [r0]
 801e83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e83e:	6083      	str	r3, [r0, #8]
 801e840:	8181      	strh	r1, [r0, #12]
 801e842:	6643      	str	r3, [r0, #100]	@ 0x64
 801e844:	81c2      	strh	r2, [r0, #14]
 801e846:	6183      	str	r3, [r0, #24]
 801e848:	4619      	mov	r1, r3
 801e84a:	2208      	movs	r2, #8
 801e84c:	305c      	adds	r0, #92	@ 0x5c
 801e84e:	f000 fac5 	bl	801eddc <memset>
 801e852:	4b0d      	ldr	r3, [pc, #52]	@ (801e888 <std+0x58>)
 801e854:	6263      	str	r3, [r4, #36]	@ 0x24
 801e856:	4b0d      	ldr	r3, [pc, #52]	@ (801e88c <std+0x5c>)
 801e858:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e85a:	4b0d      	ldr	r3, [pc, #52]	@ (801e890 <std+0x60>)
 801e85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e85e:	4b0d      	ldr	r3, [pc, #52]	@ (801e894 <std+0x64>)
 801e860:	6323      	str	r3, [r4, #48]	@ 0x30
 801e862:	4b0d      	ldr	r3, [pc, #52]	@ (801e898 <std+0x68>)
 801e864:	6224      	str	r4, [r4, #32]
 801e866:	429c      	cmp	r4, r3
 801e868:	d006      	beq.n	801e878 <std+0x48>
 801e86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e86e:	4294      	cmp	r4, r2
 801e870:	d002      	beq.n	801e878 <std+0x48>
 801e872:	33d0      	adds	r3, #208	@ 0xd0
 801e874:	429c      	cmp	r4, r3
 801e876:	d105      	bne.n	801e884 <std+0x54>
 801e878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e880:	f000 bbb8 	b.w	801eff4 <__retarget_lock_init_recursive>
 801e884:	bd10      	pop	{r4, pc}
 801e886:	bf00      	nop
 801e888:	0801eb89 	.word	0x0801eb89
 801e88c:	0801ebab 	.word	0x0801ebab
 801e890:	0801ebe3 	.word	0x0801ebe3
 801e894:	0801ec07 	.word	0x0801ec07
 801e898:	2000366c 	.word	0x2000366c

0801e89c <stdio_exit_handler>:
 801e89c:	4a02      	ldr	r2, [pc, #8]	@ (801e8a8 <stdio_exit_handler+0xc>)
 801e89e:	4903      	ldr	r1, [pc, #12]	@ (801e8ac <stdio_exit_handler+0x10>)
 801e8a0:	4803      	ldr	r0, [pc, #12]	@ (801e8b0 <stdio_exit_handler+0x14>)
 801e8a2:	f000 b869 	b.w	801e978 <_fwalk_sglue>
 801e8a6:	bf00      	nop
 801e8a8:	2000013c 	.word	0x2000013c
 801e8ac:	08021951 	.word	0x08021951
 801e8b0:	2000014c 	.word	0x2000014c

0801e8b4 <cleanup_stdio>:
 801e8b4:	6841      	ldr	r1, [r0, #4]
 801e8b6:	4b0c      	ldr	r3, [pc, #48]	@ (801e8e8 <cleanup_stdio+0x34>)
 801e8b8:	4299      	cmp	r1, r3
 801e8ba:	b510      	push	{r4, lr}
 801e8bc:	4604      	mov	r4, r0
 801e8be:	d001      	beq.n	801e8c4 <cleanup_stdio+0x10>
 801e8c0:	f003 f846 	bl	8021950 <_fflush_r>
 801e8c4:	68a1      	ldr	r1, [r4, #8]
 801e8c6:	4b09      	ldr	r3, [pc, #36]	@ (801e8ec <cleanup_stdio+0x38>)
 801e8c8:	4299      	cmp	r1, r3
 801e8ca:	d002      	beq.n	801e8d2 <cleanup_stdio+0x1e>
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	f003 f83f 	bl	8021950 <_fflush_r>
 801e8d2:	68e1      	ldr	r1, [r4, #12]
 801e8d4:	4b06      	ldr	r3, [pc, #24]	@ (801e8f0 <cleanup_stdio+0x3c>)
 801e8d6:	4299      	cmp	r1, r3
 801e8d8:	d004      	beq.n	801e8e4 <cleanup_stdio+0x30>
 801e8da:	4620      	mov	r0, r4
 801e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8e0:	f003 b836 	b.w	8021950 <_fflush_r>
 801e8e4:	bd10      	pop	{r4, pc}
 801e8e6:	bf00      	nop
 801e8e8:	2000366c 	.word	0x2000366c
 801e8ec:	200036d4 	.word	0x200036d4
 801e8f0:	2000373c 	.word	0x2000373c

0801e8f4 <global_stdio_init.part.0>:
 801e8f4:	b510      	push	{r4, lr}
 801e8f6:	4b0b      	ldr	r3, [pc, #44]	@ (801e924 <global_stdio_init.part.0+0x30>)
 801e8f8:	4c0b      	ldr	r4, [pc, #44]	@ (801e928 <global_stdio_init.part.0+0x34>)
 801e8fa:	4a0c      	ldr	r2, [pc, #48]	@ (801e92c <global_stdio_init.part.0+0x38>)
 801e8fc:	601a      	str	r2, [r3, #0]
 801e8fe:	4620      	mov	r0, r4
 801e900:	2200      	movs	r2, #0
 801e902:	2104      	movs	r1, #4
 801e904:	f7ff ff94 	bl	801e830 <std>
 801e908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e90c:	2201      	movs	r2, #1
 801e90e:	2109      	movs	r1, #9
 801e910:	f7ff ff8e 	bl	801e830 <std>
 801e914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e918:	2202      	movs	r2, #2
 801e91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e91e:	2112      	movs	r1, #18
 801e920:	f7ff bf86 	b.w	801e830 <std>
 801e924:	200037a4 	.word	0x200037a4
 801e928:	2000366c 	.word	0x2000366c
 801e92c:	0801e89d 	.word	0x0801e89d

0801e930 <__sfp_lock_acquire>:
 801e930:	4801      	ldr	r0, [pc, #4]	@ (801e938 <__sfp_lock_acquire+0x8>)
 801e932:	f000 bb60 	b.w	801eff6 <__retarget_lock_acquire_recursive>
 801e936:	bf00      	nop
 801e938:	200037ad 	.word	0x200037ad

0801e93c <__sfp_lock_release>:
 801e93c:	4801      	ldr	r0, [pc, #4]	@ (801e944 <__sfp_lock_release+0x8>)
 801e93e:	f000 bb5b 	b.w	801eff8 <__retarget_lock_release_recursive>
 801e942:	bf00      	nop
 801e944:	200037ad 	.word	0x200037ad

0801e948 <__sinit>:
 801e948:	b510      	push	{r4, lr}
 801e94a:	4604      	mov	r4, r0
 801e94c:	f7ff fff0 	bl	801e930 <__sfp_lock_acquire>
 801e950:	6a23      	ldr	r3, [r4, #32]
 801e952:	b11b      	cbz	r3, 801e95c <__sinit+0x14>
 801e954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e958:	f7ff bff0 	b.w	801e93c <__sfp_lock_release>
 801e95c:	4b04      	ldr	r3, [pc, #16]	@ (801e970 <__sinit+0x28>)
 801e95e:	6223      	str	r3, [r4, #32]
 801e960:	4b04      	ldr	r3, [pc, #16]	@ (801e974 <__sinit+0x2c>)
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d1f5      	bne.n	801e954 <__sinit+0xc>
 801e968:	f7ff ffc4 	bl	801e8f4 <global_stdio_init.part.0>
 801e96c:	e7f2      	b.n	801e954 <__sinit+0xc>
 801e96e:	bf00      	nop
 801e970:	0801e8b5 	.word	0x0801e8b5
 801e974:	200037a4 	.word	0x200037a4

0801e978 <_fwalk_sglue>:
 801e978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e97c:	4607      	mov	r7, r0
 801e97e:	4688      	mov	r8, r1
 801e980:	4614      	mov	r4, r2
 801e982:	2600      	movs	r6, #0
 801e984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e988:	f1b9 0901 	subs.w	r9, r9, #1
 801e98c:	d505      	bpl.n	801e99a <_fwalk_sglue+0x22>
 801e98e:	6824      	ldr	r4, [r4, #0]
 801e990:	2c00      	cmp	r4, #0
 801e992:	d1f7      	bne.n	801e984 <_fwalk_sglue+0xc>
 801e994:	4630      	mov	r0, r6
 801e996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e99a:	89ab      	ldrh	r3, [r5, #12]
 801e99c:	2b01      	cmp	r3, #1
 801e99e:	d907      	bls.n	801e9b0 <_fwalk_sglue+0x38>
 801e9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e9a4:	3301      	adds	r3, #1
 801e9a6:	d003      	beq.n	801e9b0 <_fwalk_sglue+0x38>
 801e9a8:	4629      	mov	r1, r5
 801e9aa:	4638      	mov	r0, r7
 801e9ac:	47c0      	blx	r8
 801e9ae:	4306      	orrs	r6, r0
 801e9b0:	3568      	adds	r5, #104	@ 0x68
 801e9b2:	e7e9      	b.n	801e988 <_fwalk_sglue+0x10>

0801e9b4 <_fwrite_r>:
 801e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9b8:	9c08      	ldr	r4, [sp, #32]
 801e9ba:	468a      	mov	sl, r1
 801e9bc:	4690      	mov	r8, r2
 801e9be:	fb02 f903 	mul.w	r9, r2, r3
 801e9c2:	4606      	mov	r6, r0
 801e9c4:	b118      	cbz	r0, 801e9ce <_fwrite_r+0x1a>
 801e9c6:	6a03      	ldr	r3, [r0, #32]
 801e9c8:	b90b      	cbnz	r3, 801e9ce <_fwrite_r+0x1a>
 801e9ca:	f7ff ffbd 	bl	801e948 <__sinit>
 801e9ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9d0:	07dd      	lsls	r5, r3, #31
 801e9d2:	d405      	bmi.n	801e9e0 <_fwrite_r+0x2c>
 801e9d4:	89a3      	ldrh	r3, [r4, #12]
 801e9d6:	0598      	lsls	r0, r3, #22
 801e9d8:	d402      	bmi.n	801e9e0 <_fwrite_r+0x2c>
 801e9da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9dc:	f000 fb0b 	bl	801eff6 <__retarget_lock_acquire_recursive>
 801e9e0:	89a3      	ldrh	r3, [r4, #12]
 801e9e2:	0719      	lsls	r1, r3, #28
 801e9e4:	d516      	bpl.n	801ea14 <_fwrite_r+0x60>
 801e9e6:	6923      	ldr	r3, [r4, #16]
 801e9e8:	b1a3      	cbz	r3, 801ea14 <_fwrite_r+0x60>
 801e9ea:	2500      	movs	r5, #0
 801e9ec:	454d      	cmp	r5, r9
 801e9ee:	d01f      	beq.n	801ea30 <_fwrite_r+0x7c>
 801e9f0:	68a7      	ldr	r7, [r4, #8]
 801e9f2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e9f6:	3f01      	subs	r7, #1
 801e9f8:	2f00      	cmp	r7, #0
 801e9fa:	60a7      	str	r7, [r4, #8]
 801e9fc:	da04      	bge.n	801ea08 <_fwrite_r+0x54>
 801e9fe:	69a3      	ldr	r3, [r4, #24]
 801ea00:	429f      	cmp	r7, r3
 801ea02:	db0f      	blt.n	801ea24 <_fwrite_r+0x70>
 801ea04:	290a      	cmp	r1, #10
 801ea06:	d00d      	beq.n	801ea24 <_fwrite_r+0x70>
 801ea08:	6823      	ldr	r3, [r4, #0]
 801ea0a:	1c5a      	adds	r2, r3, #1
 801ea0c:	6022      	str	r2, [r4, #0]
 801ea0e:	7019      	strb	r1, [r3, #0]
 801ea10:	3501      	adds	r5, #1
 801ea12:	e7eb      	b.n	801e9ec <_fwrite_r+0x38>
 801ea14:	4621      	mov	r1, r4
 801ea16:	4630      	mov	r0, r6
 801ea18:	f000 f970 	bl	801ecfc <__swsetup_r>
 801ea1c:	2800      	cmp	r0, #0
 801ea1e:	d0e4      	beq.n	801e9ea <_fwrite_r+0x36>
 801ea20:	2500      	movs	r5, #0
 801ea22:	e005      	b.n	801ea30 <_fwrite_r+0x7c>
 801ea24:	4622      	mov	r2, r4
 801ea26:	4630      	mov	r0, r6
 801ea28:	f000 f92a 	bl	801ec80 <__swbuf_r>
 801ea2c:	3001      	adds	r0, #1
 801ea2e:	d1ef      	bne.n	801ea10 <_fwrite_r+0x5c>
 801ea30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea32:	07da      	lsls	r2, r3, #31
 801ea34:	d405      	bmi.n	801ea42 <_fwrite_r+0x8e>
 801ea36:	89a3      	ldrh	r3, [r4, #12]
 801ea38:	059b      	lsls	r3, r3, #22
 801ea3a:	d402      	bmi.n	801ea42 <_fwrite_r+0x8e>
 801ea3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea3e:	f000 fadb 	bl	801eff8 <__retarget_lock_release_recursive>
 801ea42:	fbb5 f0f8 	udiv	r0, r5, r8
 801ea46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ea4c <fwrite>:
 801ea4c:	b507      	push	{r0, r1, r2, lr}
 801ea4e:	9300      	str	r3, [sp, #0]
 801ea50:	4613      	mov	r3, r2
 801ea52:	460a      	mov	r2, r1
 801ea54:	4601      	mov	r1, r0
 801ea56:	4803      	ldr	r0, [pc, #12]	@ (801ea64 <fwrite+0x18>)
 801ea58:	6800      	ldr	r0, [r0, #0]
 801ea5a:	f7ff ffab 	bl	801e9b4 <_fwrite_r>
 801ea5e:	b003      	add	sp, #12
 801ea60:	f85d fb04 	ldr.w	pc, [sp], #4
 801ea64:	20000148 	.word	0x20000148

0801ea68 <iprintf>:
 801ea68:	b40f      	push	{r0, r1, r2, r3}
 801ea6a:	b507      	push	{r0, r1, r2, lr}
 801ea6c:	4906      	ldr	r1, [pc, #24]	@ (801ea88 <iprintf+0x20>)
 801ea6e:	ab04      	add	r3, sp, #16
 801ea70:	6808      	ldr	r0, [r1, #0]
 801ea72:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea76:	6881      	ldr	r1, [r0, #8]
 801ea78:	9301      	str	r3, [sp, #4]
 801ea7a:	f002 fdcd 	bl	8021618 <_vfiprintf_r>
 801ea7e:	b003      	add	sp, #12
 801ea80:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea84:	b004      	add	sp, #16
 801ea86:	4770      	bx	lr
 801ea88:	20000148 	.word	0x20000148

0801ea8c <_puts_r>:
 801ea8c:	6a03      	ldr	r3, [r0, #32]
 801ea8e:	b570      	push	{r4, r5, r6, lr}
 801ea90:	6884      	ldr	r4, [r0, #8]
 801ea92:	4605      	mov	r5, r0
 801ea94:	460e      	mov	r6, r1
 801ea96:	b90b      	cbnz	r3, 801ea9c <_puts_r+0x10>
 801ea98:	f7ff ff56 	bl	801e948 <__sinit>
 801ea9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea9e:	07db      	lsls	r3, r3, #31
 801eaa0:	d405      	bmi.n	801eaae <_puts_r+0x22>
 801eaa2:	89a3      	ldrh	r3, [r4, #12]
 801eaa4:	0598      	lsls	r0, r3, #22
 801eaa6:	d402      	bmi.n	801eaae <_puts_r+0x22>
 801eaa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eaaa:	f000 faa4 	bl	801eff6 <__retarget_lock_acquire_recursive>
 801eaae:	89a3      	ldrh	r3, [r4, #12]
 801eab0:	0719      	lsls	r1, r3, #28
 801eab2:	d502      	bpl.n	801eaba <_puts_r+0x2e>
 801eab4:	6923      	ldr	r3, [r4, #16]
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d135      	bne.n	801eb26 <_puts_r+0x9a>
 801eaba:	4621      	mov	r1, r4
 801eabc:	4628      	mov	r0, r5
 801eabe:	f000 f91d 	bl	801ecfc <__swsetup_r>
 801eac2:	b380      	cbz	r0, 801eb26 <_puts_r+0x9a>
 801eac4:	f04f 35ff 	mov.w	r5, #4294967295
 801eac8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eaca:	07da      	lsls	r2, r3, #31
 801eacc:	d405      	bmi.n	801eada <_puts_r+0x4e>
 801eace:	89a3      	ldrh	r3, [r4, #12]
 801ead0:	059b      	lsls	r3, r3, #22
 801ead2:	d402      	bmi.n	801eada <_puts_r+0x4e>
 801ead4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ead6:	f000 fa8f 	bl	801eff8 <__retarget_lock_release_recursive>
 801eada:	4628      	mov	r0, r5
 801eadc:	bd70      	pop	{r4, r5, r6, pc}
 801eade:	2b00      	cmp	r3, #0
 801eae0:	da04      	bge.n	801eaec <_puts_r+0x60>
 801eae2:	69a2      	ldr	r2, [r4, #24]
 801eae4:	429a      	cmp	r2, r3
 801eae6:	dc17      	bgt.n	801eb18 <_puts_r+0x8c>
 801eae8:	290a      	cmp	r1, #10
 801eaea:	d015      	beq.n	801eb18 <_puts_r+0x8c>
 801eaec:	6823      	ldr	r3, [r4, #0]
 801eaee:	1c5a      	adds	r2, r3, #1
 801eaf0:	6022      	str	r2, [r4, #0]
 801eaf2:	7019      	strb	r1, [r3, #0]
 801eaf4:	68a3      	ldr	r3, [r4, #8]
 801eaf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801eafa:	3b01      	subs	r3, #1
 801eafc:	60a3      	str	r3, [r4, #8]
 801eafe:	2900      	cmp	r1, #0
 801eb00:	d1ed      	bne.n	801eade <_puts_r+0x52>
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	da11      	bge.n	801eb2a <_puts_r+0x9e>
 801eb06:	4622      	mov	r2, r4
 801eb08:	210a      	movs	r1, #10
 801eb0a:	4628      	mov	r0, r5
 801eb0c:	f000 f8b8 	bl	801ec80 <__swbuf_r>
 801eb10:	3001      	adds	r0, #1
 801eb12:	d0d7      	beq.n	801eac4 <_puts_r+0x38>
 801eb14:	250a      	movs	r5, #10
 801eb16:	e7d7      	b.n	801eac8 <_puts_r+0x3c>
 801eb18:	4622      	mov	r2, r4
 801eb1a:	4628      	mov	r0, r5
 801eb1c:	f000 f8b0 	bl	801ec80 <__swbuf_r>
 801eb20:	3001      	adds	r0, #1
 801eb22:	d1e7      	bne.n	801eaf4 <_puts_r+0x68>
 801eb24:	e7ce      	b.n	801eac4 <_puts_r+0x38>
 801eb26:	3e01      	subs	r6, #1
 801eb28:	e7e4      	b.n	801eaf4 <_puts_r+0x68>
 801eb2a:	6823      	ldr	r3, [r4, #0]
 801eb2c:	1c5a      	adds	r2, r3, #1
 801eb2e:	6022      	str	r2, [r4, #0]
 801eb30:	220a      	movs	r2, #10
 801eb32:	701a      	strb	r2, [r3, #0]
 801eb34:	e7ee      	b.n	801eb14 <_puts_r+0x88>
	...

0801eb38 <puts>:
 801eb38:	4b02      	ldr	r3, [pc, #8]	@ (801eb44 <puts+0xc>)
 801eb3a:	4601      	mov	r1, r0
 801eb3c:	6818      	ldr	r0, [r3, #0]
 801eb3e:	f7ff bfa5 	b.w	801ea8c <_puts_r>
 801eb42:	bf00      	nop
 801eb44:	20000148 	.word	0x20000148

0801eb48 <siprintf>:
 801eb48:	b40e      	push	{r1, r2, r3}
 801eb4a:	b500      	push	{lr}
 801eb4c:	b09c      	sub	sp, #112	@ 0x70
 801eb4e:	ab1d      	add	r3, sp, #116	@ 0x74
 801eb50:	9002      	str	r0, [sp, #8]
 801eb52:	9006      	str	r0, [sp, #24]
 801eb54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eb58:	4809      	ldr	r0, [pc, #36]	@ (801eb80 <siprintf+0x38>)
 801eb5a:	9107      	str	r1, [sp, #28]
 801eb5c:	9104      	str	r1, [sp, #16]
 801eb5e:	4909      	ldr	r1, [pc, #36]	@ (801eb84 <siprintf+0x3c>)
 801eb60:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb64:	9105      	str	r1, [sp, #20]
 801eb66:	6800      	ldr	r0, [r0, #0]
 801eb68:	9301      	str	r3, [sp, #4]
 801eb6a:	a902      	add	r1, sp, #8
 801eb6c:	f002 fc2e 	bl	80213cc <_svfiprintf_r>
 801eb70:	9b02      	ldr	r3, [sp, #8]
 801eb72:	2200      	movs	r2, #0
 801eb74:	701a      	strb	r2, [r3, #0]
 801eb76:	b01c      	add	sp, #112	@ 0x70
 801eb78:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb7c:	b003      	add	sp, #12
 801eb7e:	4770      	bx	lr
 801eb80:	20000148 	.word	0x20000148
 801eb84:	ffff0208 	.word	0xffff0208

0801eb88 <__sread>:
 801eb88:	b510      	push	{r4, lr}
 801eb8a:	460c      	mov	r4, r1
 801eb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb90:	f000 f9d2 	bl	801ef38 <_read_r>
 801eb94:	2800      	cmp	r0, #0
 801eb96:	bfab      	itete	ge
 801eb98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801eb9a:	89a3      	ldrhlt	r3, [r4, #12]
 801eb9c:	181b      	addge	r3, r3, r0
 801eb9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801eba2:	bfac      	ite	ge
 801eba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801eba6:	81a3      	strhlt	r3, [r4, #12]
 801eba8:	bd10      	pop	{r4, pc}

0801ebaa <__swrite>:
 801ebaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebae:	461f      	mov	r7, r3
 801ebb0:	898b      	ldrh	r3, [r1, #12]
 801ebb2:	05db      	lsls	r3, r3, #23
 801ebb4:	4605      	mov	r5, r0
 801ebb6:	460c      	mov	r4, r1
 801ebb8:	4616      	mov	r6, r2
 801ebba:	d505      	bpl.n	801ebc8 <__swrite+0x1e>
 801ebbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebc0:	2302      	movs	r3, #2
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	f000 f9a6 	bl	801ef14 <_lseek_r>
 801ebc8:	89a3      	ldrh	r3, [r4, #12]
 801ebca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ebd2:	81a3      	strh	r3, [r4, #12]
 801ebd4:	4632      	mov	r2, r6
 801ebd6:	463b      	mov	r3, r7
 801ebd8:	4628      	mov	r0, r5
 801ebda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebde:	f000 b9cd 	b.w	801ef7c <_write_r>

0801ebe2 <__sseek>:
 801ebe2:	b510      	push	{r4, lr}
 801ebe4:	460c      	mov	r4, r1
 801ebe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebea:	f000 f993 	bl	801ef14 <_lseek_r>
 801ebee:	1c43      	adds	r3, r0, #1
 801ebf0:	89a3      	ldrh	r3, [r4, #12]
 801ebf2:	bf15      	itete	ne
 801ebf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ebf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ebfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ebfe:	81a3      	strheq	r3, [r4, #12]
 801ec00:	bf18      	it	ne
 801ec02:	81a3      	strhne	r3, [r4, #12]
 801ec04:	bd10      	pop	{r4, pc}

0801ec06 <__sclose>:
 801ec06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec0a:	f000 b973 	b.w	801eef4 <_close_r>

0801ec0e <_vsniprintf_r>:
 801ec0e:	b530      	push	{r4, r5, lr}
 801ec10:	4614      	mov	r4, r2
 801ec12:	2c00      	cmp	r4, #0
 801ec14:	b09b      	sub	sp, #108	@ 0x6c
 801ec16:	4605      	mov	r5, r0
 801ec18:	461a      	mov	r2, r3
 801ec1a:	da05      	bge.n	801ec28 <_vsniprintf_r+0x1a>
 801ec1c:	238b      	movs	r3, #139	@ 0x8b
 801ec1e:	6003      	str	r3, [r0, #0]
 801ec20:	f04f 30ff 	mov.w	r0, #4294967295
 801ec24:	b01b      	add	sp, #108	@ 0x6c
 801ec26:	bd30      	pop	{r4, r5, pc}
 801ec28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ec2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ec30:	bf14      	ite	ne
 801ec32:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ec36:	4623      	moveq	r3, r4
 801ec38:	9302      	str	r3, [sp, #8]
 801ec3a:	9305      	str	r3, [sp, #20]
 801ec3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ec40:	9100      	str	r1, [sp, #0]
 801ec42:	9104      	str	r1, [sp, #16]
 801ec44:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ec48:	4669      	mov	r1, sp
 801ec4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ec4c:	f002 fbbe 	bl	80213cc <_svfiprintf_r>
 801ec50:	1c43      	adds	r3, r0, #1
 801ec52:	bfbc      	itt	lt
 801ec54:	238b      	movlt	r3, #139	@ 0x8b
 801ec56:	602b      	strlt	r3, [r5, #0]
 801ec58:	2c00      	cmp	r4, #0
 801ec5a:	d0e3      	beq.n	801ec24 <_vsniprintf_r+0x16>
 801ec5c:	9b00      	ldr	r3, [sp, #0]
 801ec5e:	2200      	movs	r2, #0
 801ec60:	701a      	strb	r2, [r3, #0]
 801ec62:	e7df      	b.n	801ec24 <_vsniprintf_r+0x16>

0801ec64 <vsniprintf>:
 801ec64:	b507      	push	{r0, r1, r2, lr}
 801ec66:	9300      	str	r3, [sp, #0]
 801ec68:	4613      	mov	r3, r2
 801ec6a:	460a      	mov	r2, r1
 801ec6c:	4601      	mov	r1, r0
 801ec6e:	4803      	ldr	r0, [pc, #12]	@ (801ec7c <vsniprintf+0x18>)
 801ec70:	6800      	ldr	r0, [r0, #0]
 801ec72:	f7ff ffcc 	bl	801ec0e <_vsniprintf_r>
 801ec76:	b003      	add	sp, #12
 801ec78:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec7c:	20000148 	.word	0x20000148

0801ec80 <__swbuf_r>:
 801ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec82:	460e      	mov	r6, r1
 801ec84:	4614      	mov	r4, r2
 801ec86:	4605      	mov	r5, r0
 801ec88:	b118      	cbz	r0, 801ec92 <__swbuf_r+0x12>
 801ec8a:	6a03      	ldr	r3, [r0, #32]
 801ec8c:	b90b      	cbnz	r3, 801ec92 <__swbuf_r+0x12>
 801ec8e:	f7ff fe5b 	bl	801e948 <__sinit>
 801ec92:	69a3      	ldr	r3, [r4, #24]
 801ec94:	60a3      	str	r3, [r4, #8]
 801ec96:	89a3      	ldrh	r3, [r4, #12]
 801ec98:	071a      	lsls	r2, r3, #28
 801ec9a:	d501      	bpl.n	801eca0 <__swbuf_r+0x20>
 801ec9c:	6923      	ldr	r3, [r4, #16]
 801ec9e:	b943      	cbnz	r3, 801ecb2 <__swbuf_r+0x32>
 801eca0:	4621      	mov	r1, r4
 801eca2:	4628      	mov	r0, r5
 801eca4:	f000 f82a 	bl	801ecfc <__swsetup_r>
 801eca8:	b118      	cbz	r0, 801ecb2 <__swbuf_r+0x32>
 801ecaa:	f04f 37ff 	mov.w	r7, #4294967295
 801ecae:	4638      	mov	r0, r7
 801ecb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecb2:	6823      	ldr	r3, [r4, #0]
 801ecb4:	6922      	ldr	r2, [r4, #16]
 801ecb6:	1a98      	subs	r0, r3, r2
 801ecb8:	6963      	ldr	r3, [r4, #20]
 801ecba:	b2f6      	uxtb	r6, r6
 801ecbc:	4283      	cmp	r3, r0
 801ecbe:	4637      	mov	r7, r6
 801ecc0:	dc05      	bgt.n	801ecce <__swbuf_r+0x4e>
 801ecc2:	4621      	mov	r1, r4
 801ecc4:	4628      	mov	r0, r5
 801ecc6:	f002 fe43 	bl	8021950 <_fflush_r>
 801ecca:	2800      	cmp	r0, #0
 801eccc:	d1ed      	bne.n	801ecaa <__swbuf_r+0x2a>
 801ecce:	68a3      	ldr	r3, [r4, #8]
 801ecd0:	3b01      	subs	r3, #1
 801ecd2:	60a3      	str	r3, [r4, #8]
 801ecd4:	6823      	ldr	r3, [r4, #0]
 801ecd6:	1c5a      	adds	r2, r3, #1
 801ecd8:	6022      	str	r2, [r4, #0]
 801ecda:	701e      	strb	r6, [r3, #0]
 801ecdc:	6962      	ldr	r2, [r4, #20]
 801ecde:	1c43      	adds	r3, r0, #1
 801ece0:	429a      	cmp	r2, r3
 801ece2:	d004      	beq.n	801ecee <__swbuf_r+0x6e>
 801ece4:	89a3      	ldrh	r3, [r4, #12]
 801ece6:	07db      	lsls	r3, r3, #31
 801ece8:	d5e1      	bpl.n	801ecae <__swbuf_r+0x2e>
 801ecea:	2e0a      	cmp	r6, #10
 801ecec:	d1df      	bne.n	801ecae <__swbuf_r+0x2e>
 801ecee:	4621      	mov	r1, r4
 801ecf0:	4628      	mov	r0, r5
 801ecf2:	f002 fe2d 	bl	8021950 <_fflush_r>
 801ecf6:	2800      	cmp	r0, #0
 801ecf8:	d0d9      	beq.n	801ecae <__swbuf_r+0x2e>
 801ecfa:	e7d6      	b.n	801ecaa <__swbuf_r+0x2a>

0801ecfc <__swsetup_r>:
 801ecfc:	b538      	push	{r3, r4, r5, lr}
 801ecfe:	4b29      	ldr	r3, [pc, #164]	@ (801eda4 <__swsetup_r+0xa8>)
 801ed00:	4605      	mov	r5, r0
 801ed02:	6818      	ldr	r0, [r3, #0]
 801ed04:	460c      	mov	r4, r1
 801ed06:	b118      	cbz	r0, 801ed10 <__swsetup_r+0x14>
 801ed08:	6a03      	ldr	r3, [r0, #32]
 801ed0a:	b90b      	cbnz	r3, 801ed10 <__swsetup_r+0x14>
 801ed0c:	f7ff fe1c 	bl	801e948 <__sinit>
 801ed10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed14:	0719      	lsls	r1, r3, #28
 801ed16:	d422      	bmi.n	801ed5e <__swsetup_r+0x62>
 801ed18:	06da      	lsls	r2, r3, #27
 801ed1a:	d407      	bmi.n	801ed2c <__swsetup_r+0x30>
 801ed1c:	2209      	movs	r2, #9
 801ed1e:	602a      	str	r2, [r5, #0]
 801ed20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed24:	81a3      	strh	r3, [r4, #12]
 801ed26:	f04f 30ff 	mov.w	r0, #4294967295
 801ed2a:	e033      	b.n	801ed94 <__swsetup_r+0x98>
 801ed2c:	0758      	lsls	r0, r3, #29
 801ed2e:	d512      	bpl.n	801ed56 <__swsetup_r+0x5a>
 801ed30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed32:	b141      	cbz	r1, 801ed46 <__swsetup_r+0x4a>
 801ed34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ed38:	4299      	cmp	r1, r3
 801ed3a:	d002      	beq.n	801ed42 <__swsetup_r+0x46>
 801ed3c:	4628      	mov	r0, r5
 801ed3e:	f000 ffe3 	bl	801fd08 <_free_r>
 801ed42:	2300      	movs	r3, #0
 801ed44:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed46:	89a3      	ldrh	r3, [r4, #12]
 801ed48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ed4c:	81a3      	strh	r3, [r4, #12]
 801ed4e:	2300      	movs	r3, #0
 801ed50:	6063      	str	r3, [r4, #4]
 801ed52:	6923      	ldr	r3, [r4, #16]
 801ed54:	6023      	str	r3, [r4, #0]
 801ed56:	89a3      	ldrh	r3, [r4, #12]
 801ed58:	f043 0308 	orr.w	r3, r3, #8
 801ed5c:	81a3      	strh	r3, [r4, #12]
 801ed5e:	6923      	ldr	r3, [r4, #16]
 801ed60:	b94b      	cbnz	r3, 801ed76 <__swsetup_r+0x7a>
 801ed62:	89a3      	ldrh	r3, [r4, #12]
 801ed64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ed68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ed6c:	d003      	beq.n	801ed76 <__swsetup_r+0x7a>
 801ed6e:	4621      	mov	r1, r4
 801ed70:	4628      	mov	r0, r5
 801ed72:	f002 fe4d 	bl	8021a10 <__smakebuf_r>
 801ed76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed7a:	f013 0201 	ands.w	r2, r3, #1
 801ed7e:	d00a      	beq.n	801ed96 <__swsetup_r+0x9a>
 801ed80:	2200      	movs	r2, #0
 801ed82:	60a2      	str	r2, [r4, #8]
 801ed84:	6962      	ldr	r2, [r4, #20]
 801ed86:	4252      	negs	r2, r2
 801ed88:	61a2      	str	r2, [r4, #24]
 801ed8a:	6922      	ldr	r2, [r4, #16]
 801ed8c:	b942      	cbnz	r2, 801eda0 <__swsetup_r+0xa4>
 801ed8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ed92:	d1c5      	bne.n	801ed20 <__swsetup_r+0x24>
 801ed94:	bd38      	pop	{r3, r4, r5, pc}
 801ed96:	0799      	lsls	r1, r3, #30
 801ed98:	bf58      	it	pl
 801ed9a:	6962      	ldrpl	r2, [r4, #20]
 801ed9c:	60a2      	str	r2, [r4, #8]
 801ed9e:	e7f4      	b.n	801ed8a <__swsetup_r+0x8e>
 801eda0:	2000      	movs	r0, #0
 801eda2:	e7f7      	b.n	801ed94 <__swsetup_r+0x98>
 801eda4:	20000148 	.word	0x20000148

0801eda8 <memmove>:
 801eda8:	4288      	cmp	r0, r1
 801edaa:	b510      	push	{r4, lr}
 801edac:	eb01 0402 	add.w	r4, r1, r2
 801edb0:	d902      	bls.n	801edb8 <memmove+0x10>
 801edb2:	4284      	cmp	r4, r0
 801edb4:	4623      	mov	r3, r4
 801edb6:	d807      	bhi.n	801edc8 <memmove+0x20>
 801edb8:	1e43      	subs	r3, r0, #1
 801edba:	42a1      	cmp	r1, r4
 801edbc:	d008      	beq.n	801edd0 <memmove+0x28>
 801edbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801edc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801edc6:	e7f8      	b.n	801edba <memmove+0x12>
 801edc8:	4402      	add	r2, r0
 801edca:	4601      	mov	r1, r0
 801edcc:	428a      	cmp	r2, r1
 801edce:	d100      	bne.n	801edd2 <memmove+0x2a>
 801edd0:	bd10      	pop	{r4, pc}
 801edd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801edd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801edda:	e7f7      	b.n	801edcc <memmove+0x24>

0801eddc <memset>:
 801eddc:	4402      	add	r2, r0
 801edde:	4603      	mov	r3, r0
 801ede0:	4293      	cmp	r3, r2
 801ede2:	d100      	bne.n	801ede6 <memset+0xa>
 801ede4:	4770      	bx	lr
 801ede6:	f803 1b01 	strb.w	r1, [r3], #1
 801edea:	e7f9      	b.n	801ede0 <memset+0x4>

0801edec <strchr>:
 801edec:	b2c9      	uxtb	r1, r1
 801edee:	4603      	mov	r3, r0
 801edf0:	4618      	mov	r0, r3
 801edf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edf6:	b112      	cbz	r2, 801edfe <strchr+0x12>
 801edf8:	428a      	cmp	r2, r1
 801edfa:	d1f9      	bne.n	801edf0 <strchr+0x4>
 801edfc:	4770      	bx	lr
 801edfe:	2900      	cmp	r1, #0
 801ee00:	bf18      	it	ne
 801ee02:	2000      	movne	r0, #0
 801ee04:	4770      	bx	lr
	...

0801ee08 <strtok>:
 801ee08:	4b16      	ldr	r3, [pc, #88]	@ (801ee64 <strtok+0x5c>)
 801ee0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee0e:	681f      	ldr	r7, [r3, #0]
 801ee10:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ee12:	4605      	mov	r5, r0
 801ee14:	460e      	mov	r6, r1
 801ee16:	b9ec      	cbnz	r4, 801ee54 <strtok+0x4c>
 801ee18:	2050      	movs	r0, #80	@ 0x50
 801ee1a:	f7fe fd61 	bl	801d8e0 <malloc>
 801ee1e:	4602      	mov	r2, r0
 801ee20:	6478      	str	r0, [r7, #68]	@ 0x44
 801ee22:	b920      	cbnz	r0, 801ee2e <strtok+0x26>
 801ee24:	4b10      	ldr	r3, [pc, #64]	@ (801ee68 <strtok+0x60>)
 801ee26:	4811      	ldr	r0, [pc, #68]	@ (801ee6c <strtok+0x64>)
 801ee28:	215b      	movs	r1, #91	@ 0x5b
 801ee2a:	f000 f903 	bl	801f034 <__assert_func>
 801ee2e:	e9c0 4400 	strd	r4, r4, [r0]
 801ee32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ee36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ee3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ee3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ee42:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ee46:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ee4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ee4e:	6184      	str	r4, [r0, #24]
 801ee50:	7704      	strb	r4, [r0, #28]
 801ee52:	6244      	str	r4, [r0, #36]	@ 0x24
 801ee54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ee56:	4631      	mov	r1, r6
 801ee58:	4628      	mov	r0, r5
 801ee5a:	2301      	movs	r3, #1
 801ee5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee60:	f000 b806 	b.w	801ee70 <__strtok_r>
 801ee64:	20000148 	.word	0x20000148
 801ee68:	080256d2 	.word	0x080256d2
 801ee6c:	080256e9 	.word	0x080256e9

0801ee70 <__strtok_r>:
 801ee70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee72:	4604      	mov	r4, r0
 801ee74:	b908      	cbnz	r0, 801ee7a <__strtok_r+0xa>
 801ee76:	6814      	ldr	r4, [r2, #0]
 801ee78:	b144      	cbz	r4, 801ee8c <__strtok_r+0x1c>
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ee80:	460f      	mov	r7, r1
 801ee82:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ee86:	b91e      	cbnz	r6, 801ee90 <__strtok_r+0x20>
 801ee88:	b965      	cbnz	r5, 801eea4 <__strtok_r+0x34>
 801ee8a:	6015      	str	r5, [r2, #0]
 801ee8c:	2000      	movs	r0, #0
 801ee8e:	e005      	b.n	801ee9c <__strtok_r+0x2c>
 801ee90:	42b5      	cmp	r5, r6
 801ee92:	d1f6      	bne.n	801ee82 <__strtok_r+0x12>
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	d1f0      	bne.n	801ee7a <__strtok_r+0xa>
 801ee98:	6014      	str	r4, [r2, #0]
 801ee9a:	7003      	strb	r3, [r0, #0]
 801ee9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee9e:	461c      	mov	r4, r3
 801eea0:	e00c      	b.n	801eebc <__strtok_r+0x4c>
 801eea2:	b915      	cbnz	r5, 801eeaa <__strtok_r+0x3a>
 801eea4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eea8:	460e      	mov	r6, r1
 801eeaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 801eeae:	42ab      	cmp	r3, r5
 801eeb0:	d1f7      	bne.n	801eea2 <__strtok_r+0x32>
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d0f3      	beq.n	801ee9e <__strtok_r+0x2e>
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801eebc:	6014      	str	r4, [r2, #0]
 801eebe:	e7ed      	b.n	801ee9c <__strtok_r+0x2c>

0801eec0 <strstr>:
 801eec0:	780a      	ldrb	r2, [r1, #0]
 801eec2:	b570      	push	{r4, r5, r6, lr}
 801eec4:	b96a      	cbnz	r2, 801eee2 <strstr+0x22>
 801eec6:	bd70      	pop	{r4, r5, r6, pc}
 801eec8:	429a      	cmp	r2, r3
 801eeca:	d109      	bne.n	801eee0 <strstr+0x20>
 801eecc:	460c      	mov	r4, r1
 801eece:	4605      	mov	r5, r0
 801eed0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d0f6      	beq.n	801eec6 <strstr+0x6>
 801eed8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801eedc:	429e      	cmp	r6, r3
 801eede:	d0f7      	beq.n	801eed0 <strstr+0x10>
 801eee0:	3001      	adds	r0, #1
 801eee2:	7803      	ldrb	r3, [r0, #0]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d1ef      	bne.n	801eec8 <strstr+0x8>
 801eee8:	4618      	mov	r0, r3
 801eeea:	e7ec      	b.n	801eec6 <strstr+0x6>

0801eeec <_localeconv_r>:
 801eeec:	4800      	ldr	r0, [pc, #0]	@ (801eef0 <_localeconv_r+0x4>)
 801eeee:	4770      	bx	lr
 801eef0:	20000288 	.word	0x20000288

0801eef4 <_close_r>:
 801eef4:	b538      	push	{r3, r4, r5, lr}
 801eef6:	4d06      	ldr	r5, [pc, #24]	@ (801ef10 <_close_r+0x1c>)
 801eef8:	2300      	movs	r3, #0
 801eefa:	4604      	mov	r4, r0
 801eefc:	4608      	mov	r0, r1
 801eefe:	602b      	str	r3, [r5, #0]
 801ef00:	f7e5 f816 	bl	8003f30 <_close>
 801ef04:	1c43      	adds	r3, r0, #1
 801ef06:	d102      	bne.n	801ef0e <_close_r+0x1a>
 801ef08:	682b      	ldr	r3, [r5, #0]
 801ef0a:	b103      	cbz	r3, 801ef0e <_close_r+0x1a>
 801ef0c:	6023      	str	r3, [r4, #0]
 801ef0e:	bd38      	pop	{r3, r4, r5, pc}
 801ef10:	200037a8 	.word	0x200037a8

0801ef14 <_lseek_r>:
 801ef14:	b538      	push	{r3, r4, r5, lr}
 801ef16:	4d07      	ldr	r5, [pc, #28]	@ (801ef34 <_lseek_r+0x20>)
 801ef18:	4604      	mov	r4, r0
 801ef1a:	4608      	mov	r0, r1
 801ef1c:	4611      	mov	r1, r2
 801ef1e:	2200      	movs	r2, #0
 801ef20:	602a      	str	r2, [r5, #0]
 801ef22:	461a      	mov	r2, r3
 801ef24:	f7e5 f82b 	bl	8003f7e <_lseek>
 801ef28:	1c43      	adds	r3, r0, #1
 801ef2a:	d102      	bne.n	801ef32 <_lseek_r+0x1e>
 801ef2c:	682b      	ldr	r3, [r5, #0]
 801ef2e:	b103      	cbz	r3, 801ef32 <_lseek_r+0x1e>
 801ef30:	6023      	str	r3, [r4, #0]
 801ef32:	bd38      	pop	{r3, r4, r5, pc}
 801ef34:	200037a8 	.word	0x200037a8

0801ef38 <_read_r>:
 801ef38:	b538      	push	{r3, r4, r5, lr}
 801ef3a:	4d07      	ldr	r5, [pc, #28]	@ (801ef58 <_read_r+0x20>)
 801ef3c:	4604      	mov	r4, r0
 801ef3e:	4608      	mov	r0, r1
 801ef40:	4611      	mov	r1, r2
 801ef42:	2200      	movs	r2, #0
 801ef44:	602a      	str	r2, [r5, #0]
 801ef46:	461a      	mov	r2, r3
 801ef48:	f7e4 ffb9 	bl	8003ebe <_read>
 801ef4c:	1c43      	adds	r3, r0, #1
 801ef4e:	d102      	bne.n	801ef56 <_read_r+0x1e>
 801ef50:	682b      	ldr	r3, [r5, #0]
 801ef52:	b103      	cbz	r3, 801ef56 <_read_r+0x1e>
 801ef54:	6023      	str	r3, [r4, #0]
 801ef56:	bd38      	pop	{r3, r4, r5, pc}
 801ef58:	200037a8 	.word	0x200037a8

0801ef5c <_sbrk_r>:
 801ef5c:	b538      	push	{r3, r4, r5, lr}
 801ef5e:	4d06      	ldr	r5, [pc, #24]	@ (801ef78 <_sbrk_r+0x1c>)
 801ef60:	2300      	movs	r3, #0
 801ef62:	4604      	mov	r4, r0
 801ef64:	4608      	mov	r0, r1
 801ef66:	602b      	str	r3, [r5, #0]
 801ef68:	f7e5 f816 	bl	8003f98 <_sbrk>
 801ef6c:	1c43      	adds	r3, r0, #1
 801ef6e:	d102      	bne.n	801ef76 <_sbrk_r+0x1a>
 801ef70:	682b      	ldr	r3, [r5, #0]
 801ef72:	b103      	cbz	r3, 801ef76 <_sbrk_r+0x1a>
 801ef74:	6023      	str	r3, [r4, #0]
 801ef76:	bd38      	pop	{r3, r4, r5, pc}
 801ef78:	200037a8 	.word	0x200037a8

0801ef7c <_write_r>:
 801ef7c:	b538      	push	{r3, r4, r5, lr}
 801ef7e:	4d07      	ldr	r5, [pc, #28]	@ (801ef9c <_write_r+0x20>)
 801ef80:	4604      	mov	r4, r0
 801ef82:	4608      	mov	r0, r1
 801ef84:	4611      	mov	r1, r2
 801ef86:	2200      	movs	r2, #0
 801ef88:	602a      	str	r2, [r5, #0]
 801ef8a:	461a      	mov	r2, r3
 801ef8c:	f7e4 ffb4 	bl	8003ef8 <_write>
 801ef90:	1c43      	adds	r3, r0, #1
 801ef92:	d102      	bne.n	801ef9a <_write_r+0x1e>
 801ef94:	682b      	ldr	r3, [r5, #0]
 801ef96:	b103      	cbz	r3, 801ef9a <_write_r+0x1e>
 801ef98:	6023      	str	r3, [r4, #0]
 801ef9a:	bd38      	pop	{r3, r4, r5, pc}
 801ef9c:	200037a8 	.word	0x200037a8

0801efa0 <__errno>:
 801efa0:	4b01      	ldr	r3, [pc, #4]	@ (801efa8 <__errno+0x8>)
 801efa2:	6818      	ldr	r0, [r3, #0]
 801efa4:	4770      	bx	lr
 801efa6:	bf00      	nop
 801efa8:	20000148 	.word	0x20000148

0801efac <__libc_init_array>:
 801efac:	b570      	push	{r4, r5, r6, lr}
 801efae:	4d0d      	ldr	r5, [pc, #52]	@ (801efe4 <__libc_init_array+0x38>)
 801efb0:	4c0d      	ldr	r4, [pc, #52]	@ (801efe8 <__libc_init_array+0x3c>)
 801efb2:	1b64      	subs	r4, r4, r5
 801efb4:	10a4      	asrs	r4, r4, #2
 801efb6:	2600      	movs	r6, #0
 801efb8:	42a6      	cmp	r6, r4
 801efba:	d109      	bne.n	801efd0 <__libc_init_array+0x24>
 801efbc:	4d0b      	ldr	r5, [pc, #44]	@ (801efec <__libc_init_array+0x40>)
 801efbe:	4c0c      	ldr	r4, [pc, #48]	@ (801eff0 <__libc_init_array+0x44>)
 801efc0:	f003 f98a 	bl	80222d8 <_init>
 801efc4:	1b64      	subs	r4, r4, r5
 801efc6:	10a4      	asrs	r4, r4, #2
 801efc8:	2600      	movs	r6, #0
 801efca:	42a6      	cmp	r6, r4
 801efcc:	d105      	bne.n	801efda <__libc_init_array+0x2e>
 801efce:	bd70      	pop	{r4, r5, r6, pc}
 801efd0:	f855 3b04 	ldr.w	r3, [r5], #4
 801efd4:	4798      	blx	r3
 801efd6:	3601      	adds	r6, #1
 801efd8:	e7ee      	b.n	801efb8 <__libc_init_array+0xc>
 801efda:	f855 3b04 	ldr.w	r3, [r5], #4
 801efde:	4798      	blx	r3
 801efe0:	3601      	adds	r6, #1
 801efe2:	e7f2      	b.n	801efca <__libc_init_array+0x1e>
 801efe4:	08025a2c 	.word	0x08025a2c
 801efe8:	08025a2c 	.word	0x08025a2c
 801efec:	08025a2c 	.word	0x08025a2c
 801eff0:	08025a30 	.word	0x08025a30

0801eff4 <__retarget_lock_init_recursive>:
 801eff4:	4770      	bx	lr

0801eff6 <__retarget_lock_acquire_recursive>:
 801eff6:	4770      	bx	lr

0801eff8 <__retarget_lock_release_recursive>:
 801eff8:	4770      	bx	lr

0801effa <strcpy>:
 801effa:	4603      	mov	r3, r0
 801effc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f000:	f803 2b01 	strb.w	r2, [r3], #1
 801f004:	2a00      	cmp	r2, #0
 801f006:	d1f9      	bne.n	801effc <strcpy+0x2>
 801f008:	4770      	bx	lr

0801f00a <memcpy>:
 801f00a:	440a      	add	r2, r1
 801f00c:	4291      	cmp	r1, r2
 801f00e:	f100 33ff 	add.w	r3, r0, #4294967295
 801f012:	d100      	bne.n	801f016 <memcpy+0xc>
 801f014:	4770      	bx	lr
 801f016:	b510      	push	{r4, lr}
 801f018:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f020:	4291      	cmp	r1, r2
 801f022:	d1f9      	bne.n	801f018 <memcpy+0xe>
 801f024:	bd10      	pop	{r4, pc}
	...

0801f028 <nanf>:
 801f028:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f030 <nanf+0x8>
 801f02c:	4770      	bx	lr
 801f02e:	bf00      	nop
 801f030:	7fc00000 	.word	0x7fc00000

0801f034 <__assert_func>:
 801f034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f036:	4614      	mov	r4, r2
 801f038:	461a      	mov	r2, r3
 801f03a:	4b09      	ldr	r3, [pc, #36]	@ (801f060 <__assert_func+0x2c>)
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	4605      	mov	r5, r0
 801f040:	68d8      	ldr	r0, [r3, #12]
 801f042:	b954      	cbnz	r4, 801f05a <__assert_func+0x26>
 801f044:	4b07      	ldr	r3, [pc, #28]	@ (801f064 <__assert_func+0x30>)
 801f046:	461c      	mov	r4, r3
 801f048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f04c:	9100      	str	r1, [sp, #0]
 801f04e:	462b      	mov	r3, r5
 801f050:	4905      	ldr	r1, [pc, #20]	@ (801f068 <__assert_func+0x34>)
 801f052:	f002 fca5 	bl	80219a0 <fiprintf>
 801f056:	f002 fd53 	bl	8021b00 <abort>
 801f05a:	4b04      	ldr	r3, [pc, #16]	@ (801f06c <__assert_func+0x38>)
 801f05c:	e7f4      	b.n	801f048 <__assert_func+0x14>
 801f05e:	bf00      	nop
 801f060:	20000148 	.word	0x20000148
 801f064:	0802577e 	.word	0x0802577e
 801f068:	08025750 	.word	0x08025750
 801f06c:	08025743 	.word	0x08025743

0801f070 <quorem>:
 801f070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f074:	6903      	ldr	r3, [r0, #16]
 801f076:	690c      	ldr	r4, [r1, #16]
 801f078:	42a3      	cmp	r3, r4
 801f07a:	4607      	mov	r7, r0
 801f07c:	db7e      	blt.n	801f17c <quorem+0x10c>
 801f07e:	3c01      	subs	r4, #1
 801f080:	f101 0814 	add.w	r8, r1, #20
 801f084:	00a3      	lsls	r3, r4, #2
 801f086:	f100 0514 	add.w	r5, r0, #20
 801f08a:	9300      	str	r3, [sp, #0]
 801f08c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f090:	9301      	str	r3, [sp, #4]
 801f092:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f09a:	3301      	adds	r3, #1
 801f09c:	429a      	cmp	r2, r3
 801f09e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f0a2:	fbb2 f6f3 	udiv	r6, r2, r3
 801f0a6:	d32e      	bcc.n	801f106 <quorem+0x96>
 801f0a8:	f04f 0a00 	mov.w	sl, #0
 801f0ac:	46c4      	mov	ip, r8
 801f0ae:	46ae      	mov	lr, r5
 801f0b0:	46d3      	mov	fp, sl
 801f0b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f0b6:	b298      	uxth	r0, r3
 801f0b8:	fb06 a000 	mla	r0, r6, r0, sl
 801f0bc:	0c02      	lsrs	r2, r0, #16
 801f0be:	0c1b      	lsrs	r3, r3, #16
 801f0c0:	fb06 2303 	mla	r3, r6, r3, r2
 801f0c4:	f8de 2000 	ldr.w	r2, [lr]
 801f0c8:	b280      	uxth	r0, r0
 801f0ca:	b292      	uxth	r2, r2
 801f0cc:	1a12      	subs	r2, r2, r0
 801f0ce:	445a      	add	r2, fp
 801f0d0:	f8de 0000 	ldr.w	r0, [lr]
 801f0d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0d8:	b29b      	uxth	r3, r3
 801f0da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f0de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f0e2:	b292      	uxth	r2, r2
 801f0e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f0e8:	45e1      	cmp	r9, ip
 801f0ea:	f84e 2b04 	str.w	r2, [lr], #4
 801f0ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f0f2:	d2de      	bcs.n	801f0b2 <quorem+0x42>
 801f0f4:	9b00      	ldr	r3, [sp, #0]
 801f0f6:	58eb      	ldr	r3, [r5, r3]
 801f0f8:	b92b      	cbnz	r3, 801f106 <quorem+0x96>
 801f0fa:	9b01      	ldr	r3, [sp, #4]
 801f0fc:	3b04      	subs	r3, #4
 801f0fe:	429d      	cmp	r5, r3
 801f100:	461a      	mov	r2, r3
 801f102:	d32f      	bcc.n	801f164 <quorem+0xf4>
 801f104:	613c      	str	r4, [r7, #16]
 801f106:	4638      	mov	r0, r7
 801f108:	f001 f90c 	bl	8020324 <__mcmp>
 801f10c:	2800      	cmp	r0, #0
 801f10e:	db25      	blt.n	801f15c <quorem+0xec>
 801f110:	4629      	mov	r1, r5
 801f112:	2000      	movs	r0, #0
 801f114:	f858 2b04 	ldr.w	r2, [r8], #4
 801f118:	f8d1 c000 	ldr.w	ip, [r1]
 801f11c:	fa1f fe82 	uxth.w	lr, r2
 801f120:	fa1f f38c 	uxth.w	r3, ip
 801f124:	eba3 030e 	sub.w	r3, r3, lr
 801f128:	4403      	add	r3, r0
 801f12a:	0c12      	lsrs	r2, r2, #16
 801f12c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f130:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f134:	b29b      	uxth	r3, r3
 801f136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f13a:	45c1      	cmp	r9, r8
 801f13c:	f841 3b04 	str.w	r3, [r1], #4
 801f140:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f144:	d2e6      	bcs.n	801f114 <quorem+0xa4>
 801f146:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f14a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f14e:	b922      	cbnz	r2, 801f15a <quorem+0xea>
 801f150:	3b04      	subs	r3, #4
 801f152:	429d      	cmp	r5, r3
 801f154:	461a      	mov	r2, r3
 801f156:	d30b      	bcc.n	801f170 <quorem+0x100>
 801f158:	613c      	str	r4, [r7, #16]
 801f15a:	3601      	adds	r6, #1
 801f15c:	4630      	mov	r0, r6
 801f15e:	b003      	add	sp, #12
 801f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f164:	6812      	ldr	r2, [r2, #0]
 801f166:	3b04      	subs	r3, #4
 801f168:	2a00      	cmp	r2, #0
 801f16a:	d1cb      	bne.n	801f104 <quorem+0x94>
 801f16c:	3c01      	subs	r4, #1
 801f16e:	e7c6      	b.n	801f0fe <quorem+0x8e>
 801f170:	6812      	ldr	r2, [r2, #0]
 801f172:	3b04      	subs	r3, #4
 801f174:	2a00      	cmp	r2, #0
 801f176:	d1ef      	bne.n	801f158 <quorem+0xe8>
 801f178:	3c01      	subs	r4, #1
 801f17a:	e7ea      	b.n	801f152 <quorem+0xe2>
 801f17c:	2000      	movs	r0, #0
 801f17e:	e7ee      	b.n	801f15e <quorem+0xee>

0801f180 <_dtoa_r>:
 801f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f184:	69c7      	ldr	r7, [r0, #28]
 801f186:	b099      	sub	sp, #100	@ 0x64
 801f188:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f18c:	ec55 4b10 	vmov	r4, r5, d0
 801f190:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f192:	9109      	str	r1, [sp, #36]	@ 0x24
 801f194:	4683      	mov	fp, r0
 801f196:	920e      	str	r2, [sp, #56]	@ 0x38
 801f198:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f19a:	b97f      	cbnz	r7, 801f1bc <_dtoa_r+0x3c>
 801f19c:	2010      	movs	r0, #16
 801f19e:	f7fe fb9f 	bl	801d8e0 <malloc>
 801f1a2:	4602      	mov	r2, r0
 801f1a4:	f8cb 001c 	str.w	r0, [fp, #28]
 801f1a8:	b920      	cbnz	r0, 801f1b4 <_dtoa_r+0x34>
 801f1aa:	4ba7      	ldr	r3, [pc, #668]	@ (801f448 <_dtoa_r+0x2c8>)
 801f1ac:	21ef      	movs	r1, #239	@ 0xef
 801f1ae:	48a7      	ldr	r0, [pc, #668]	@ (801f44c <_dtoa_r+0x2cc>)
 801f1b0:	f7ff ff40 	bl	801f034 <__assert_func>
 801f1b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f1b8:	6007      	str	r7, [r0, #0]
 801f1ba:	60c7      	str	r7, [r0, #12]
 801f1bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1c0:	6819      	ldr	r1, [r3, #0]
 801f1c2:	b159      	cbz	r1, 801f1dc <_dtoa_r+0x5c>
 801f1c4:	685a      	ldr	r2, [r3, #4]
 801f1c6:	604a      	str	r2, [r1, #4]
 801f1c8:	2301      	movs	r3, #1
 801f1ca:	4093      	lsls	r3, r2
 801f1cc:	608b      	str	r3, [r1, #8]
 801f1ce:	4658      	mov	r0, fp
 801f1d0:	f000 fe24 	bl	801fe1c <_Bfree>
 801f1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1d8:	2200      	movs	r2, #0
 801f1da:	601a      	str	r2, [r3, #0]
 801f1dc:	1e2b      	subs	r3, r5, #0
 801f1de:	bfb9      	ittee	lt
 801f1e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f1e4:	9303      	strlt	r3, [sp, #12]
 801f1e6:	2300      	movge	r3, #0
 801f1e8:	6033      	strge	r3, [r6, #0]
 801f1ea:	9f03      	ldr	r7, [sp, #12]
 801f1ec:	4b98      	ldr	r3, [pc, #608]	@ (801f450 <_dtoa_r+0x2d0>)
 801f1ee:	bfbc      	itt	lt
 801f1f0:	2201      	movlt	r2, #1
 801f1f2:	6032      	strlt	r2, [r6, #0]
 801f1f4:	43bb      	bics	r3, r7
 801f1f6:	d112      	bne.n	801f21e <_dtoa_r+0x9e>
 801f1f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f1fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f1fe:	6013      	str	r3, [r2, #0]
 801f200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f204:	4323      	orrs	r3, r4
 801f206:	f000 854d 	beq.w	801fca4 <_dtoa_r+0xb24>
 801f20a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f20c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f464 <_dtoa_r+0x2e4>
 801f210:	2b00      	cmp	r3, #0
 801f212:	f000 854f 	beq.w	801fcb4 <_dtoa_r+0xb34>
 801f216:	f10a 0303 	add.w	r3, sl, #3
 801f21a:	f000 bd49 	b.w	801fcb0 <_dtoa_r+0xb30>
 801f21e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f222:	2200      	movs	r2, #0
 801f224:	ec51 0b17 	vmov	r0, r1, d7
 801f228:	2300      	movs	r3, #0
 801f22a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f22e:	f7e1 fc63 	bl	8000af8 <__aeabi_dcmpeq>
 801f232:	4680      	mov	r8, r0
 801f234:	b158      	cbz	r0, 801f24e <_dtoa_r+0xce>
 801f236:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f238:	2301      	movs	r3, #1
 801f23a:	6013      	str	r3, [r2, #0]
 801f23c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f23e:	b113      	cbz	r3, 801f246 <_dtoa_r+0xc6>
 801f240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f242:	4b84      	ldr	r3, [pc, #528]	@ (801f454 <_dtoa_r+0x2d4>)
 801f244:	6013      	str	r3, [r2, #0]
 801f246:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f468 <_dtoa_r+0x2e8>
 801f24a:	f000 bd33 	b.w	801fcb4 <_dtoa_r+0xb34>
 801f24e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f252:	aa16      	add	r2, sp, #88	@ 0x58
 801f254:	a917      	add	r1, sp, #92	@ 0x5c
 801f256:	4658      	mov	r0, fp
 801f258:	f001 f984 	bl	8020564 <__d2b>
 801f25c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f260:	4681      	mov	r9, r0
 801f262:	2e00      	cmp	r6, #0
 801f264:	d077      	beq.n	801f356 <_dtoa_r+0x1d6>
 801f266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f268:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f26c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f274:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f278:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f27c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f280:	4619      	mov	r1, r3
 801f282:	2200      	movs	r2, #0
 801f284:	4b74      	ldr	r3, [pc, #464]	@ (801f458 <_dtoa_r+0x2d8>)
 801f286:	f7e1 f817 	bl	80002b8 <__aeabi_dsub>
 801f28a:	a369      	add	r3, pc, #420	@ (adr r3, 801f430 <_dtoa_r+0x2b0>)
 801f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f290:	f7e1 f9ca 	bl	8000628 <__aeabi_dmul>
 801f294:	a368      	add	r3, pc, #416	@ (adr r3, 801f438 <_dtoa_r+0x2b8>)
 801f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f29a:	f7e1 f80f 	bl	80002bc <__adddf3>
 801f29e:	4604      	mov	r4, r0
 801f2a0:	4630      	mov	r0, r6
 801f2a2:	460d      	mov	r5, r1
 801f2a4:	f7e1 f956 	bl	8000554 <__aeabi_i2d>
 801f2a8:	a365      	add	r3, pc, #404	@ (adr r3, 801f440 <_dtoa_r+0x2c0>)
 801f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ae:	f7e1 f9bb 	bl	8000628 <__aeabi_dmul>
 801f2b2:	4602      	mov	r2, r0
 801f2b4:	460b      	mov	r3, r1
 801f2b6:	4620      	mov	r0, r4
 801f2b8:	4629      	mov	r1, r5
 801f2ba:	f7e0 ffff 	bl	80002bc <__adddf3>
 801f2be:	4604      	mov	r4, r0
 801f2c0:	460d      	mov	r5, r1
 801f2c2:	f7e1 fc61 	bl	8000b88 <__aeabi_d2iz>
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	4607      	mov	r7, r0
 801f2ca:	2300      	movs	r3, #0
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	4629      	mov	r1, r5
 801f2d0:	f7e1 fc1c 	bl	8000b0c <__aeabi_dcmplt>
 801f2d4:	b140      	cbz	r0, 801f2e8 <_dtoa_r+0x168>
 801f2d6:	4638      	mov	r0, r7
 801f2d8:	f7e1 f93c 	bl	8000554 <__aeabi_i2d>
 801f2dc:	4622      	mov	r2, r4
 801f2de:	462b      	mov	r3, r5
 801f2e0:	f7e1 fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 801f2e4:	b900      	cbnz	r0, 801f2e8 <_dtoa_r+0x168>
 801f2e6:	3f01      	subs	r7, #1
 801f2e8:	2f16      	cmp	r7, #22
 801f2ea:	d851      	bhi.n	801f390 <_dtoa_r+0x210>
 801f2ec:	4b5b      	ldr	r3, [pc, #364]	@ (801f45c <_dtoa_r+0x2dc>)
 801f2ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f2fa:	f7e1 fc07 	bl	8000b0c <__aeabi_dcmplt>
 801f2fe:	2800      	cmp	r0, #0
 801f300:	d048      	beq.n	801f394 <_dtoa_r+0x214>
 801f302:	3f01      	subs	r7, #1
 801f304:	2300      	movs	r3, #0
 801f306:	9312      	str	r3, [sp, #72]	@ 0x48
 801f308:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f30a:	1b9b      	subs	r3, r3, r6
 801f30c:	1e5a      	subs	r2, r3, #1
 801f30e:	bf44      	itt	mi
 801f310:	f1c3 0801 	rsbmi	r8, r3, #1
 801f314:	2300      	movmi	r3, #0
 801f316:	9208      	str	r2, [sp, #32]
 801f318:	bf54      	ite	pl
 801f31a:	f04f 0800 	movpl.w	r8, #0
 801f31e:	9308      	strmi	r3, [sp, #32]
 801f320:	2f00      	cmp	r7, #0
 801f322:	db39      	blt.n	801f398 <_dtoa_r+0x218>
 801f324:	9b08      	ldr	r3, [sp, #32]
 801f326:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f328:	443b      	add	r3, r7
 801f32a:	9308      	str	r3, [sp, #32]
 801f32c:	2300      	movs	r3, #0
 801f32e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f332:	2b09      	cmp	r3, #9
 801f334:	d864      	bhi.n	801f400 <_dtoa_r+0x280>
 801f336:	2b05      	cmp	r3, #5
 801f338:	bfc4      	itt	gt
 801f33a:	3b04      	subgt	r3, #4
 801f33c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f340:	f1a3 0302 	sub.w	r3, r3, #2
 801f344:	bfcc      	ite	gt
 801f346:	2400      	movgt	r4, #0
 801f348:	2401      	movle	r4, #1
 801f34a:	2b03      	cmp	r3, #3
 801f34c:	d863      	bhi.n	801f416 <_dtoa_r+0x296>
 801f34e:	e8df f003 	tbb	[pc, r3]
 801f352:	372a      	.short	0x372a
 801f354:	5535      	.short	0x5535
 801f356:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f35a:	441e      	add	r6, r3
 801f35c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f360:	2b20      	cmp	r3, #32
 801f362:	bfc1      	itttt	gt
 801f364:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f368:	409f      	lslgt	r7, r3
 801f36a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f36e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f372:	bfd6      	itet	le
 801f374:	f1c3 0320 	rsble	r3, r3, #32
 801f378:	ea47 0003 	orrgt.w	r0, r7, r3
 801f37c:	fa04 f003 	lslle.w	r0, r4, r3
 801f380:	f7e1 f8d8 	bl	8000534 <__aeabi_ui2d>
 801f384:	2201      	movs	r2, #1
 801f386:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f38a:	3e01      	subs	r6, #1
 801f38c:	9214      	str	r2, [sp, #80]	@ 0x50
 801f38e:	e777      	b.n	801f280 <_dtoa_r+0x100>
 801f390:	2301      	movs	r3, #1
 801f392:	e7b8      	b.n	801f306 <_dtoa_r+0x186>
 801f394:	9012      	str	r0, [sp, #72]	@ 0x48
 801f396:	e7b7      	b.n	801f308 <_dtoa_r+0x188>
 801f398:	427b      	negs	r3, r7
 801f39a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f39c:	2300      	movs	r3, #0
 801f39e:	eba8 0807 	sub.w	r8, r8, r7
 801f3a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3a4:	e7c4      	b.n	801f330 <_dtoa_r+0x1b0>
 801f3a6:	2300      	movs	r3, #0
 801f3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	dc35      	bgt.n	801f41c <_dtoa_r+0x29c>
 801f3b0:	2301      	movs	r3, #1
 801f3b2:	9300      	str	r3, [sp, #0]
 801f3b4:	9307      	str	r3, [sp, #28]
 801f3b6:	461a      	mov	r2, r3
 801f3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801f3ba:	e00b      	b.n	801f3d4 <_dtoa_r+0x254>
 801f3bc:	2301      	movs	r3, #1
 801f3be:	e7f3      	b.n	801f3a8 <_dtoa_r+0x228>
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3c6:	18fb      	adds	r3, r7, r3
 801f3c8:	9300      	str	r3, [sp, #0]
 801f3ca:	3301      	adds	r3, #1
 801f3cc:	2b01      	cmp	r3, #1
 801f3ce:	9307      	str	r3, [sp, #28]
 801f3d0:	bfb8      	it	lt
 801f3d2:	2301      	movlt	r3, #1
 801f3d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f3d8:	2100      	movs	r1, #0
 801f3da:	2204      	movs	r2, #4
 801f3dc:	f102 0514 	add.w	r5, r2, #20
 801f3e0:	429d      	cmp	r5, r3
 801f3e2:	d91f      	bls.n	801f424 <_dtoa_r+0x2a4>
 801f3e4:	6041      	str	r1, [r0, #4]
 801f3e6:	4658      	mov	r0, fp
 801f3e8:	f000 fcd8 	bl	801fd9c <_Balloc>
 801f3ec:	4682      	mov	sl, r0
 801f3ee:	2800      	cmp	r0, #0
 801f3f0:	d13c      	bne.n	801f46c <_dtoa_r+0x2ec>
 801f3f2:	4b1b      	ldr	r3, [pc, #108]	@ (801f460 <_dtoa_r+0x2e0>)
 801f3f4:	4602      	mov	r2, r0
 801f3f6:	f240 11af 	movw	r1, #431	@ 0x1af
 801f3fa:	e6d8      	b.n	801f1ae <_dtoa_r+0x2e>
 801f3fc:	2301      	movs	r3, #1
 801f3fe:	e7e0      	b.n	801f3c2 <_dtoa_r+0x242>
 801f400:	2401      	movs	r4, #1
 801f402:	2300      	movs	r3, #0
 801f404:	9309      	str	r3, [sp, #36]	@ 0x24
 801f406:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f408:	f04f 33ff 	mov.w	r3, #4294967295
 801f40c:	9300      	str	r3, [sp, #0]
 801f40e:	9307      	str	r3, [sp, #28]
 801f410:	2200      	movs	r2, #0
 801f412:	2312      	movs	r3, #18
 801f414:	e7d0      	b.n	801f3b8 <_dtoa_r+0x238>
 801f416:	2301      	movs	r3, #1
 801f418:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f41a:	e7f5      	b.n	801f408 <_dtoa_r+0x288>
 801f41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f41e:	9300      	str	r3, [sp, #0]
 801f420:	9307      	str	r3, [sp, #28]
 801f422:	e7d7      	b.n	801f3d4 <_dtoa_r+0x254>
 801f424:	3101      	adds	r1, #1
 801f426:	0052      	lsls	r2, r2, #1
 801f428:	e7d8      	b.n	801f3dc <_dtoa_r+0x25c>
 801f42a:	bf00      	nop
 801f42c:	f3af 8000 	nop.w
 801f430:	636f4361 	.word	0x636f4361
 801f434:	3fd287a7 	.word	0x3fd287a7
 801f438:	8b60c8b3 	.word	0x8b60c8b3
 801f43c:	3fc68a28 	.word	0x3fc68a28
 801f440:	509f79fb 	.word	0x509f79fb
 801f444:	3fd34413 	.word	0x3fd34413
 801f448:	080256d2 	.word	0x080256d2
 801f44c:	0802578c 	.word	0x0802578c
 801f450:	7ff00000 	.word	0x7ff00000
 801f454:	080256aa 	.word	0x080256aa
 801f458:	3ff80000 	.word	0x3ff80000
 801f45c:	08025888 	.word	0x08025888
 801f460:	080257e4 	.word	0x080257e4
 801f464:	08025788 	.word	0x08025788
 801f468:	080256a9 	.word	0x080256a9
 801f46c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f470:	6018      	str	r0, [r3, #0]
 801f472:	9b07      	ldr	r3, [sp, #28]
 801f474:	2b0e      	cmp	r3, #14
 801f476:	f200 80a4 	bhi.w	801f5c2 <_dtoa_r+0x442>
 801f47a:	2c00      	cmp	r4, #0
 801f47c:	f000 80a1 	beq.w	801f5c2 <_dtoa_r+0x442>
 801f480:	2f00      	cmp	r7, #0
 801f482:	dd33      	ble.n	801f4ec <_dtoa_r+0x36c>
 801f484:	4bad      	ldr	r3, [pc, #692]	@ (801f73c <_dtoa_r+0x5bc>)
 801f486:	f007 020f 	and.w	r2, r7, #15
 801f48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f48e:	ed93 7b00 	vldr	d7, [r3]
 801f492:	05f8      	lsls	r0, r7, #23
 801f494:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f498:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f49c:	d516      	bpl.n	801f4cc <_dtoa_r+0x34c>
 801f49e:	4ba8      	ldr	r3, [pc, #672]	@ (801f740 <_dtoa_r+0x5c0>)
 801f4a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f4a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f4a8:	f7e1 f9e8 	bl	800087c <__aeabi_ddiv>
 801f4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4b0:	f004 040f 	and.w	r4, r4, #15
 801f4b4:	2603      	movs	r6, #3
 801f4b6:	4da2      	ldr	r5, [pc, #648]	@ (801f740 <_dtoa_r+0x5c0>)
 801f4b8:	b954      	cbnz	r4, 801f4d0 <_dtoa_r+0x350>
 801f4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f4c2:	f7e1 f9db 	bl	800087c <__aeabi_ddiv>
 801f4c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4ca:	e028      	b.n	801f51e <_dtoa_r+0x39e>
 801f4cc:	2602      	movs	r6, #2
 801f4ce:	e7f2      	b.n	801f4b6 <_dtoa_r+0x336>
 801f4d0:	07e1      	lsls	r1, r4, #31
 801f4d2:	d508      	bpl.n	801f4e6 <_dtoa_r+0x366>
 801f4d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f4d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4dc:	f7e1 f8a4 	bl	8000628 <__aeabi_dmul>
 801f4e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f4e4:	3601      	adds	r6, #1
 801f4e6:	1064      	asrs	r4, r4, #1
 801f4e8:	3508      	adds	r5, #8
 801f4ea:	e7e5      	b.n	801f4b8 <_dtoa_r+0x338>
 801f4ec:	f000 80d2 	beq.w	801f694 <_dtoa_r+0x514>
 801f4f0:	427c      	negs	r4, r7
 801f4f2:	4b92      	ldr	r3, [pc, #584]	@ (801f73c <_dtoa_r+0x5bc>)
 801f4f4:	4d92      	ldr	r5, [pc, #584]	@ (801f740 <_dtoa_r+0x5c0>)
 801f4f6:	f004 020f 	and.w	r2, r4, #15
 801f4fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f506:	f7e1 f88f 	bl	8000628 <__aeabi_dmul>
 801f50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f50e:	1124      	asrs	r4, r4, #4
 801f510:	2300      	movs	r3, #0
 801f512:	2602      	movs	r6, #2
 801f514:	2c00      	cmp	r4, #0
 801f516:	f040 80b2 	bne.w	801f67e <_dtoa_r+0x4fe>
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d1d3      	bne.n	801f4c6 <_dtoa_r+0x346>
 801f51e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f520:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f524:	2b00      	cmp	r3, #0
 801f526:	f000 80b7 	beq.w	801f698 <_dtoa_r+0x518>
 801f52a:	4b86      	ldr	r3, [pc, #536]	@ (801f744 <_dtoa_r+0x5c4>)
 801f52c:	2200      	movs	r2, #0
 801f52e:	4620      	mov	r0, r4
 801f530:	4629      	mov	r1, r5
 801f532:	f7e1 faeb 	bl	8000b0c <__aeabi_dcmplt>
 801f536:	2800      	cmp	r0, #0
 801f538:	f000 80ae 	beq.w	801f698 <_dtoa_r+0x518>
 801f53c:	9b07      	ldr	r3, [sp, #28]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	f000 80aa 	beq.w	801f698 <_dtoa_r+0x518>
 801f544:	9b00      	ldr	r3, [sp, #0]
 801f546:	2b00      	cmp	r3, #0
 801f548:	dd37      	ble.n	801f5ba <_dtoa_r+0x43a>
 801f54a:	1e7b      	subs	r3, r7, #1
 801f54c:	9304      	str	r3, [sp, #16]
 801f54e:	4620      	mov	r0, r4
 801f550:	4b7d      	ldr	r3, [pc, #500]	@ (801f748 <_dtoa_r+0x5c8>)
 801f552:	2200      	movs	r2, #0
 801f554:	4629      	mov	r1, r5
 801f556:	f7e1 f867 	bl	8000628 <__aeabi_dmul>
 801f55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f55e:	9c00      	ldr	r4, [sp, #0]
 801f560:	3601      	adds	r6, #1
 801f562:	4630      	mov	r0, r6
 801f564:	f7e0 fff6 	bl	8000554 <__aeabi_i2d>
 801f568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f56c:	f7e1 f85c 	bl	8000628 <__aeabi_dmul>
 801f570:	4b76      	ldr	r3, [pc, #472]	@ (801f74c <_dtoa_r+0x5cc>)
 801f572:	2200      	movs	r2, #0
 801f574:	f7e0 fea2 	bl	80002bc <__adddf3>
 801f578:	4605      	mov	r5, r0
 801f57a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f57e:	2c00      	cmp	r4, #0
 801f580:	f040 808d 	bne.w	801f69e <_dtoa_r+0x51e>
 801f584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f588:	4b71      	ldr	r3, [pc, #452]	@ (801f750 <_dtoa_r+0x5d0>)
 801f58a:	2200      	movs	r2, #0
 801f58c:	f7e0 fe94 	bl	80002b8 <__aeabi_dsub>
 801f590:	4602      	mov	r2, r0
 801f592:	460b      	mov	r3, r1
 801f594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f598:	462a      	mov	r2, r5
 801f59a:	4633      	mov	r3, r6
 801f59c:	f7e1 fad4 	bl	8000b48 <__aeabi_dcmpgt>
 801f5a0:	2800      	cmp	r0, #0
 801f5a2:	f040 828b 	bne.w	801fabc <_dtoa_r+0x93c>
 801f5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5aa:	462a      	mov	r2, r5
 801f5ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f5b0:	f7e1 faac 	bl	8000b0c <__aeabi_dcmplt>
 801f5b4:	2800      	cmp	r0, #0
 801f5b6:	f040 8128 	bne.w	801f80a <_dtoa_r+0x68a>
 801f5ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f5be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f5c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	f2c0 815a 	blt.w	801f87e <_dtoa_r+0x6fe>
 801f5ca:	2f0e      	cmp	r7, #14
 801f5cc:	f300 8157 	bgt.w	801f87e <_dtoa_r+0x6fe>
 801f5d0:	4b5a      	ldr	r3, [pc, #360]	@ (801f73c <_dtoa_r+0x5bc>)
 801f5d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f5d6:	ed93 7b00 	vldr	d7, [r3]
 801f5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	ed8d 7b00 	vstr	d7, [sp]
 801f5e2:	da03      	bge.n	801f5ec <_dtoa_r+0x46c>
 801f5e4:	9b07      	ldr	r3, [sp, #28]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	f340 8101 	ble.w	801f7ee <_dtoa_r+0x66e>
 801f5ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f5f0:	4656      	mov	r6, sl
 801f5f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f5f6:	4620      	mov	r0, r4
 801f5f8:	4629      	mov	r1, r5
 801f5fa:	f7e1 f93f 	bl	800087c <__aeabi_ddiv>
 801f5fe:	f7e1 fac3 	bl	8000b88 <__aeabi_d2iz>
 801f602:	4680      	mov	r8, r0
 801f604:	f7e0 ffa6 	bl	8000554 <__aeabi_i2d>
 801f608:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f60c:	f7e1 f80c 	bl	8000628 <__aeabi_dmul>
 801f610:	4602      	mov	r2, r0
 801f612:	460b      	mov	r3, r1
 801f614:	4620      	mov	r0, r4
 801f616:	4629      	mov	r1, r5
 801f618:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f61c:	f7e0 fe4c 	bl	80002b8 <__aeabi_dsub>
 801f620:	f806 4b01 	strb.w	r4, [r6], #1
 801f624:	9d07      	ldr	r5, [sp, #28]
 801f626:	eba6 040a 	sub.w	r4, r6, sl
 801f62a:	42a5      	cmp	r5, r4
 801f62c:	4602      	mov	r2, r0
 801f62e:	460b      	mov	r3, r1
 801f630:	f040 8117 	bne.w	801f862 <_dtoa_r+0x6e2>
 801f634:	f7e0 fe42 	bl	80002bc <__adddf3>
 801f638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f63c:	4604      	mov	r4, r0
 801f63e:	460d      	mov	r5, r1
 801f640:	f7e1 fa82 	bl	8000b48 <__aeabi_dcmpgt>
 801f644:	2800      	cmp	r0, #0
 801f646:	f040 80f9 	bne.w	801f83c <_dtoa_r+0x6bc>
 801f64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f64e:	4620      	mov	r0, r4
 801f650:	4629      	mov	r1, r5
 801f652:	f7e1 fa51 	bl	8000af8 <__aeabi_dcmpeq>
 801f656:	b118      	cbz	r0, 801f660 <_dtoa_r+0x4e0>
 801f658:	f018 0f01 	tst.w	r8, #1
 801f65c:	f040 80ee 	bne.w	801f83c <_dtoa_r+0x6bc>
 801f660:	4649      	mov	r1, r9
 801f662:	4658      	mov	r0, fp
 801f664:	f000 fbda 	bl	801fe1c <_Bfree>
 801f668:	2300      	movs	r3, #0
 801f66a:	7033      	strb	r3, [r6, #0]
 801f66c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f66e:	3701      	adds	r7, #1
 801f670:	601f      	str	r7, [r3, #0]
 801f672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f674:	2b00      	cmp	r3, #0
 801f676:	f000 831d 	beq.w	801fcb4 <_dtoa_r+0xb34>
 801f67a:	601e      	str	r6, [r3, #0]
 801f67c:	e31a      	b.n	801fcb4 <_dtoa_r+0xb34>
 801f67e:	07e2      	lsls	r2, r4, #31
 801f680:	d505      	bpl.n	801f68e <_dtoa_r+0x50e>
 801f682:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f686:	f7e0 ffcf 	bl	8000628 <__aeabi_dmul>
 801f68a:	3601      	adds	r6, #1
 801f68c:	2301      	movs	r3, #1
 801f68e:	1064      	asrs	r4, r4, #1
 801f690:	3508      	adds	r5, #8
 801f692:	e73f      	b.n	801f514 <_dtoa_r+0x394>
 801f694:	2602      	movs	r6, #2
 801f696:	e742      	b.n	801f51e <_dtoa_r+0x39e>
 801f698:	9c07      	ldr	r4, [sp, #28]
 801f69a:	9704      	str	r7, [sp, #16]
 801f69c:	e761      	b.n	801f562 <_dtoa_r+0x3e2>
 801f69e:	4b27      	ldr	r3, [pc, #156]	@ (801f73c <_dtoa_r+0x5bc>)
 801f6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f6a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f6a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f6aa:	4454      	add	r4, sl
 801f6ac:	2900      	cmp	r1, #0
 801f6ae:	d053      	beq.n	801f758 <_dtoa_r+0x5d8>
 801f6b0:	4928      	ldr	r1, [pc, #160]	@ (801f754 <_dtoa_r+0x5d4>)
 801f6b2:	2000      	movs	r0, #0
 801f6b4:	f7e1 f8e2 	bl	800087c <__aeabi_ddiv>
 801f6b8:	4633      	mov	r3, r6
 801f6ba:	462a      	mov	r2, r5
 801f6bc:	f7e0 fdfc 	bl	80002b8 <__aeabi_dsub>
 801f6c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f6c4:	4656      	mov	r6, sl
 801f6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6ca:	f7e1 fa5d 	bl	8000b88 <__aeabi_d2iz>
 801f6ce:	4605      	mov	r5, r0
 801f6d0:	f7e0 ff40 	bl	8000554 <__aeabi_i2d>
 801f6d4:	4602      	mov	r2, r0
 801f6d6:	460b      	mov	r3, r1
 801f6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6dc:	f7e0 fdec 	bl	80002b8 <__aeabi_dsub>
 801f6e0:	3530      	adds	r5, #48	@ 0x30
 801f6e2:	4602      	mov	r2, r0
 801f6e4:	460b      	mov	r3, r1
 801f6e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f6ea:	f806 5b01 	strb.w	r5, [r6], #1
 801f6ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f6f2:	f7e1 fa0b 	bl	8000b0c <__aeabi_dcmplt>
 801f6f6:	2800      	cmp	r0, #0
 801f6f8:	d171      	bne.n	801f7de <_dtoa_r+0x65e>
 801f6fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f6fe:	4911      	ldr	r1, [pc, #68]	@ (801f744 <_dtoa_r+0x5c4>)
 801f700:	2000      	movs	r0, #0
 801f702:	f7e0 fdd9 	bl	80002b8 <__aeabi_dsub>
 801f706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f70a:	f7e1 f9ff 	bl	8000b0c <__aeabi_dcmplt>
 801f70e:	2800      	cmp	r0, #0
 801f710:	f040 8095 	bne.w	801f83e <_dtoa_r+0x6be>
 801f714:	42a6      	cmp	r6, r4
 801f716:	f43f af50 	beq.w	801f5ba <_dtoa_r+0x43a>
 801f71a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f71e:	4b0a      	ldr	r3, [pc, #40]	@ (801f748 <_dtoa_r+0x5c8>)
 801f720:	2200      	movs	r2, #0
 801f722:	f7e0 ff81 	bl	8000628 <__aeabi_dmul>
 801f726:	4b08      	ldr	r3, [pc, #32]	@ (801f748 <_dtoa_r+0x5c8>)
 801f728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f72c:	2200      	movs	r2, #0
 801f72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f732:	f7e0 ff79 	bl	8000628 <__aeabi_dmul>
 801f736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f73a:	e7c4      	b.n	801f6c6 <_dtoa_r+0x546>
 801f73c:	08025888 	.word	0x08025888
 801f740:	08025860 	.word	0x08025860
 801f744:	3ff00000 	.word	0x3ff00000
 801f748:	40240000 	.word	0x40240000
 801f74c:	401c0000 	.word	0x401c0000
 801f750:	40140000 	.word	0x40140000
 801f754:	3fe00000 	.word	0x3fe00000
 801f758:	4631      	mov	r1, r6
 801f75a:	4628      	mov	r0, r5
 801f75c:	f7e0 ff64 	bl	8000628 <__aeabi_dmul>
 801f760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f764:	9415      	str	r4, [sp, #84]	@ 0x54
 801f766:	4656      	mov	r6, sl
 801f768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f76c:	f7e1 fa0c 	bl	8000b88 <__aeabi_d2iz>
 801f770:	4605      	mov	r5, r0
 801f772:	f7e0 feef 	bl	8000554 <__aeabi_i2d>
 801f776:	4602      	mov	r2, r0
 801f778:	460b      	mov	r3, r1
 801f77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f77e:	f7e0 fd9b 	bl	80002b8 <__aeabi_dsub>
 801f782:	3530      	adds	r5, #48	@ 0x30
 801f784:	f806 5b01 	strb.w	r5, [r6], #1
 801f788:	4602      	mov	r2, r0
 801f78a:	460b      	mov	r3, r1
 801f78c:	42a6      	cmp	r6, r4
 801f78e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f792:	f04f 0200 	mov.w	r2, #0
 801f796:	d124      	bne.n	801f7e2 <_dtoa_r+0x662>
 801f798:	4bac      	ldr	r3, [pc, #688]	@ (801fa4c <_dtoa_r+0x8cc>)
 801f79a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f79e:	f7e0 fd8d 	bl	80002bc <__adddf3>
 801f7a2:	4602      	mov	r2, r0
 801f7a4:	460b      	mov	r3, r1
 801f7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7aa:	f7e1 f9cd 	bl	8000b48 <__aeabi_dcmpgt>
 801f7ae:	2800      	cmp	r0, #0
 801f7b0:	d145      	bne.n	801f83e <_dtoa_r+0x6be>
 801f7b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f7b6:	49a5      	ldr	r1, [pc, #660]	@ (801fa4c <_dtoa_r+0x8cc>)
 801f7b8:	2000      	movs	r0, #0
 801f7ba:	f7e0 fd7d 	bl	80002b8 <__aeabi_dsub>
 801f7be:	4602      	mov	r2, r0
 801f7c0:	460b      	mov	r3, r1
 801f7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7c6:	f7e1 f9a1 	bl	8000b0c <__aeabi_dcmplt>
 801f7ca:	2800      	cmp	r0, #0
 801f7cc:	f43f aef5 	beq.w	801f5ba <_dtoa_r+0x43a>
 801f7d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f7d2:	1e73      	subs	r3, r6, #1
 801f7d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f7da:	2b30      	cmp	r3, #48	@ 0x30
 801f7dc:	d0f8      	beq.n	801f7d0 <_dtoa_r+0x650>
 801f7de:	9f04      	ldr	r7, [sp, #16]
 801f7e0:	e73e      	b.n	801f660 <_dtoa_r+0x4e0>
 801f7e2:	4b9b      	ldr	r3, [pc, #620]	@ (801fa50 <_dtoa_r+0x8d0>)
 801f7e4:	f7e0 ff20 	bl	8000628 <__aeabi_dmul>
 801f7e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7ec:	e7bc      	b.n	801f768 <_dtoa_r+0x5e8>
 801f7ee:	d10c      	bne.n	801f80a <_dtoa_r+0x68a>
 801f7f0:	4b98      	ldr	r3, [pc, #608]	@ (801fa54 <_dtoa_r+0x8d4>)
 801f7f2:	2200      	movs	r2, #0
 801f7f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f7f8:	f7e0 ff16 	bl	8000628 <__aeabi_dmul>
 801f7fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f800:	f7e1 f998 	bl	8000b34 <__aeabi_dcmpge>
 801f804:	2800      	cmp	r0, #0
 801f806:	f000 8157 	beq.w	801fab8 <_dtoa_r+0x938>
 801f80a:	2400      	movs	r4, #0
 801f80c:	4625      	mov	r5, r4
 801f80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f810:	43db      	mvns	r3, r3
 801f812:	9304      	str	r3, [sp, #16]
 801f814:	4656      	mov	r6, sl
 801f816:	2700      	movs	r7, #0
 801f818:	4621      	mov	r1, r4
 801f81a:	4658      	mov	r0, fp
 801f81c:	f000 fafe 	bl	801fe1c <_Bfree>
 801f820:	2d00      	cmp	r5, #0
 801f822:	d0dc      	beq.n	801f7de <_dtoa_r+0x65e>
 801f824:	b12f      	cbz	r7, 801f832 <_dtoa_r+0x6b2>
 801f826:	42af      	cmp	r7, r5
 801f828:	d003      	beq.n	801f832 <_dtoa_r+0x6b2>
 801f82a:	4639      	mov	r1, r7
 801f82c:	4658      	mov	r0, fp
 801f82e:	f000 faf5 	bl	801fe1c <_Bfree>
 801f832:	4629      	mov	r1, r5
 801f834:	4658      	mov	r0, fp
 801f836:	f000 faf1 	bl	801fe1c <_Bfree>
 801f83a:	e7d0      	b.n	801f7de <_dtoa_r+0x65e>
 801f83c:	9704      	str	r7, [sp, #16]
 801f83e:	4633      	mov	r3, r6
 801f840:	461e      	mov	r6, r3
 801f842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f846:	2a39      	cmp	r2, #57	@ 0x39
 801f848:	d107      	bne.n	801f85a <_dtoa_r+0x6da>
 801f84a:	459a      	cmp	sl, r3
 801f84c:	d1f8      	bne.n	801f840 <_dtoa_r+0x6c0>
 801f84e:	9a04      	ldr	r2, [sp, #16]
 801f850:	3201      	adds	r2, #1
 801f852:	9204      	str	r2, [sp, #16]
 801f854:	2230      	movs	r2, #48	@ 0x30
 801f856:	f88a 2000 	strb.w	r2, [sl]
 801f85a:	781a      	ldrb	r2, [r3, #0]
 801f85c:	3201      	adds	r2, #1
 801f85e:	701a      	strb	r2, [r3, #0]
 801f860:	e7bd      	b.n	801f7de <_dtoa_r+0x65e>
 801f862:	4b7b      	ldr	r3, [pc, #492]	@ (801fa50 <_dtoa_r+0x8d0>)
 801f864:	2200      	movs	r2, #0
 801f866:	f7e0 fedf 	bl	8000628 <__aeabi_dmul>
 801f86a:	2200      	movs	r2, #0
 801f86c:	2300      	movs	r3, #0
 801f86e:	4604      	mov	r4, r0
 801f870:	460d      	mov	r5, r1
 801f872:	f7e1 f941 	bl	8000af8 <__aeabi_dcmpeq>
 801f876:	2800      	cmp	r0, #0
 801f878:	f43f aebb 	beq.w	801f5f2 <_dtoa_r+0x472>
 801f87c:	e6f0      	b.n	801f660 <_dtoa_r+0x4e0>
 801f87e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f880:	2a00      	cmp	r2, #0
 801f882:	f000 80db 	beq.w	801fa3c <_dtoa_r+0x8bc>
 801f886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f888:	2a01      	cmp	r2, #1
 801f88a:	f300 80bf 	bgt.w	801fa0c <_dtoa_r+0x88c>
 801f88e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f890:	2a00      	cmp	r2, #0
 801f892:	f000 80b7 	beq.w	801fa04 <_dtoa_r+0x884>
 801f896:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f89a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f89c:	4646      	mov	r6, r8
 801f89e:	9a08      	ldr	r2, [sp, #32]
 801f8a0:	2101      	movs	r1, #1
 801f8a2:	441a      	add	r2, r3
 801f8a4:	4658      	mov	r0, fp
 801f8a6:	4498      	add	r8, r3
 801f8a8:	9208      	str	r2, [sp, #32]
 801f8aa:	f000 fbb5 	bl	8020018 <__i2b>
 801f8ae:	4605      	mov	r5, r0
 801f8b0:	b15e      	cbz	r6, 801f8ca <_dtoa_r+0x74a>
 801f8b2:	9b08      	ldr	r3, [sp, #32]
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	dd08      	ble.n	801f8ca <_dtoa_r+0x74a>
 801f8b8:	42b3      	cmp	r3, r6
 801f8ba:	9a08      	ldr	r2, [sp, #32]
 801f8bc:	bfa8      	it	ge
 801f8be:	4633      	movge	r3, r6
 801f8c0:	eba8 0803 	sub.w	r8, r8, r3
 801f8c4:	1af6      	subs	r6, r6, r3
 801f8c6:	1ad3      	subs	r3, r2, r3
 801f8c8:	9308      	str	r3, [sp, #32]
 801f8ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8cc:	b1f3      	cbz	r3, 801f90c <_dtoa_r+0x78c>
 801f8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	f000 80b7 	beq.w	801fa44 <_dtoa_r+0x8c4>
 801f8d6:	b18c      	cbz	r4, 801f8fc <_dtoa_r+0x77c>
 801f8d8:	4629      	mov	r1, r5
 801f8da:	4622      	mov	r2, r4
 801f8dc:	4658      	mov	r0, fp
 801f8de:	f000 fc5b 	bl	8020198 <__pow5mult>
 801f8e2:	464a      	mov	r2, r9
 801f8e4:	4601      	mov	r1, r0
 801f8e6:	4605      	mov	r5, r0
 801f8e8:	4658      	mov	r0, fp
 801f8ea:	f000 fbab 	bl	8020044 <__multiply>
 801f8ee:	4649      	mov	r1, r9
 801f8f0:	9004      	str	r0, [sp, #16]
 801f8f2:	4658      	mov	r0, fp
 801f8f4:	f000 fa92 	bl	801fe1c <_Bfree>
 801f8f8:	9b04      	ldr	r3, [sp, #16]
 801f8fa:	4699      	mov	r9, r3
 801f8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8fe:	1b1a      	subs	r2, r3, r4
 801f900:	d004      	beq.n	801f90c <_dtoa_r+0x78c>
 801f902:	4649      	mov	r1, r9
 801f904:	4658      	mov	r0, fp
 801f906:	f000 fc47 	bl	8020198 <__pow5mult>
 801f90a:	4681      	mov	r9, r0
 801f90c:	2101      	movs	r1, #1
 801f90e:	4658      	mov	r0, fp
 801f910:	f000 fb82 	bl	8020018 <__i2b>
 801f914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f916:	4604      	mov	r4, r0
 801f918:	2b00      	cmp	r3, #0
 801f91a:	f000 81cf 	beq.w	801fcbc <_dtoa_r+0xb3c>
 801f91e:	461a      	mov	r2, r3
 801f920:	4601      	mov	r1, r0
 801f922:	4658      	mov	r0, fp
 801f924:	f000 fc38 	bl	8020198 <__pow5mult>
 801f928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f92a:	2b01      	cmp	r3, #1
 801f92c:	4604      	mov	r4, r0
 801f92e:	f300 8095 	bgt.w	801fa5c <_dtoa_r+0x8dc>
 801f932:	9b02      	ldr	r3, [sp, #8]
 801f934:	2b00      	cmp	r3, #0
 801f936:	f040 8087 	bne.w	801fa48 <_dtoa_r+0x8c8>
 801f93a:	9b03      	ldr	r3, [sp, #12]
 801f93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f940:	2b00      	cmp	r3, #0
 801f942:	f040 8089 	bne.w	801fa58 <_dtoa_r+0x8d8>
 801f946:	9b03      	ldr	r3, [sp, #12]
 801f948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f94c:	0d1b      	lsrs	r3, r3, #20
 801f94e:	051b      	lsls	r3, r3, #20
 801f950:	b12b      	cbz	r3, 801f95e <_dtoa_r+0x7de>
 801f952:	9b08      	ldr	r3, [sp, #32]
 801f954:	3301      	adds	r3, #1
 801f956:	9308      	str	r3, [sp, #32]
 801f958:	f108 0801 	add.w	r8, r8, #1
 801f95c:	2301      	movs	r3, #1
 801f95e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f962:	2b00      	cmp	r3, #0
 801f964:	f000 81b0 	beq.w	801fcc8 <_dtoa_r+0xb48>
 801f968:	6923      	ldr	r3, [r4, #16]
 801f96a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f96e:	6918      	ldr	r0, [r3, #16]
 801f970:	f000 fb06 	bl	801ff80 <__hi0bits>
 801f974:	f1c0 0020 	rsb	r0, r0, #32
 801f978:	9b08      	ldr	r3, [sp, #32]
 801f97a:	4418      	add	r0, r3
 801f97c:	f010 001f 	ands.w	r0, r0, #31
 801f980:	d077      	beq.n	801fa72 <_dtoa_r+0x8f2>
 801f982:	f1c0 0320 	rsb	r3, r0, #32
 801f986:	2b04      	cmp	r3, #4
 801f988:	dd6b      	ble.n	801fa62 <_dtoa_r+0x8e2>
 801f98a:	9b08      	ldr	r3, [sp, #32]
 801f98c:	f1c0 001c 	rsb	r0, r0, #28
 801f990:	4403      	add	r3, r0
 801f992:	4480      	add	r8, r0
 801f994:	4406      	add	r6, r0
 801f996:	9308      	str	r3, [sp, #32]
 801f998:	f1b8 0f00 	cmp.w	r8, #0
 801f99c:	dd05      	ble.n	801f9aa <_dtoa_r+0x82a>
 801f99e:	4649      	mov	r1, r9
 801f9a0:	4642      	mov	r2, r8
 801f9a2:	4658      	mov	r0, fp
 801f9a4:	f000 fc52 	bl	802024c <__lshift>
 801f9a8:	4681      	mov	r9, r0
 801f9aa:	9b08      	ldr	r3, [sp, #32]
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	dd05      	ble.n	801f9bc <_dtoa_r+0x83c>
 801f9b0:	4621      	mov	r1, r4
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	4658      	mov	r0, fp
 801f9b6:	f000 fc49 	bl	802024c <__lshift>
 801f9ba:	4604      	mov	r4, r0
 801f9bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d059      	beq.n	801fa76 <_dtoa_r+0x8f6>
 801f9c2:	4621      	mov	r1, r4
 801f9c4:	4648      	mov	r0, r9
 801f9c6:	f000 fcad 	bl	8020324 <__mcmp>
 801f9ca:	2800      	cmp	r0, #0
 801f9cc:	da53      	bge.n	801fa76 <_dtoa_r+0x8f6>
 801f9ce:	1e7b      	subs	r3, r7, #1
 801f9d0:	9304      	str	r3, [sp, #16]
 801f9d2:	4649      	mov	r1, r9
 801f9d4:	2300      	movs	r3, #0
 801f9d6:	220a      	movs	r2, #10
 801f9d8:	4658      	mov	r0, fp
 801f9da:	f000 fa41 	bl	801fe60 <__multadd>
 801f9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9e0:	4681      	mov	r9, r0
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	f000 8172 	beq.w	801fccc <_dtoa_r+0xb4c>
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	4629      	mov	r1, r5
 801f9ec:	220a      	movs	r2, #10
 801f9ee:	4658      	mov	r0, fp
 801f9f0:	f000 fa36 	bl	801fe60 <__multadd>
 801f9f4:	9b00      	ldr	r3, [sp, #0]
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	4605      	mov	r5, r0
 801f9fa:	dc67      	bgt.n	801facc <_dtoa_r+0x94c>
 801f9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9fe:	2b02      	cmp	r3, #2
 801fa00:	dc41      	bgt.n	801fa86 <_dtoa_r+0x906>
 801fa02:	e063      	b.n	801facc <_dtoa_r+0x94c>
 801fa04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fa06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fa0a:	e746      	b.n	801f89a <_dtoa_r+0x71a>
 801fa0c:	9b07      	ldr	r3, [sp, #28]
 801fa0e:	1e5c      	subs	r4, r3, #1
 801fa10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa12:	42a3      	cmp	r3, r4
 801fa14:	bfbf      	itttt	lt
 801fa16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fa18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801fa1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801fa1c:	1ae3      	sublt	r3, r4, r3
 801fa1e:	bfb4      	ite	lt
 801fa20:	18d2      	addlt	r2, r2, r3
 801fa22:	1b1c      	subge	r4, r3, r4
 801fa24:	9b07      	ldr	r3, [sp, #28]
 801fa26:	bfbc      	itt	lt
 801fa28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fa2a:	2400      	movlt	r4, #0
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	bfb5      	itete	lt
 801fa30:	eba8 0603 	sublt.w	r6, r8, r3
 801fa34:	9b07      	ldrge	r3, [sp, #28]
 801fa36:	2300      	movlt	r3, #0
 801fa38:	4646      	movge	r6, r8
 801fa3a:	e730      	b.n	801f89e <_dtoa_r+0x71e>
 801fa3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fa3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fa40:	4646      	mov	r6, r8
 801fa42:	e735      	b.n	801f8b0 <_dtoa_r+0x730>
 801fa44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fa46:	e75c      	b.n	801f902 <_dtoa_r+0x782>
 801fa48:	2300      	movs	r3, #0
 801fa4a:	e788      	b.n	801f95e <_dtoa_r+0x7de>
 801fa4c:	3fe00000 	.word	0x3fe00000
 801fa50:	40240000 	.word	0x40240000
 801fa54:	40140000 	.word	0x40140000
 801fa58:	9b02      	ldr	r3, [sp, #8]
 801fa5a:	e780      	b.n	801f95e <_dtoa_r+0x7de>
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa60:	e782      	b.n	801f968 <_dtoa_r+0x7e8>
 801fa62:	d099      	beq.n	801f998 <_dtoa_r+0x818>
 801fa64:	9a08      	ldr	r2, [sp, #32]
 801fa66:	331c      	adds	r3, #28
 801fa68:	441a      	add	r2, r3
 801fa6a:	4498      	add	r8, r3
 801fa6c:	441e      	add	r6, r3
 801fa6e:	9208      	str	r2, [sp, #32]
 801fa70:	e792      	b.n	801f998 <_dtoa_r+0x818>
 801fa72:	4603      	mov	r3, r0
 801fa74:	e7f6      	b.n	801fa64 <_dtoa_r+0x8e4>
 801fa76:	9b07      	ldr	r3, [sp, #28]
 801fa78:	9704      	str	r7, [sp, #16]
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	dc20      	bgt.n	801fac0 <_dtoa_r+0x940>
 801fa7e:	9300      	str	r3, [sp, #0]
 801fa80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa82:	2b02      	cmp	r3, #2
 801fa84:	dd1e      	ble.n	801fac4 <_dtoa_r+0x944>
 801fa86:	9b00      	ldr	r3, [sp, #0]
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	f47f aec0 	bne.w	801f80e <_dtoa_r+0x68e>
 801fa8e:	4621      	mov	r1, r4
 801fa90:	2205      	movs	r2, #5
 801fa92:	4658      	mov	r0, fp
 801fa94:	f000 f9e4 	bl	801fe60 <__multadd>
 801fa98:	4601      	mov	r1, r0
 801fa9a:	4604      	mov	r4, r0
 801fa9c:	4648      	mov	r0, r9
 801fa9e:	f000 fc41 	bl	8020324 <__mcmp>
 801faa2:	2800      	cmp	r0, #0
 801faa4:	f77f aeb3 	ble.w	801f80e <_dtoa_r+0x68e>
 801faa8:	4656      	mov	r6, sl
 801faaa:	2331      	movs	r3, #49	@ 0x31
 801faac:	f806 3b01 	strb.w	r3, [r6], #1
 801fab0:	9b04      	ldr	r3, [sp, #16]
 801fab2:	3301      	adds	r3, #1
 801fab4:	9304      	str	r3, [sp, #16]
 801fab6:	e6ae      	b.n	801f816 <_dtoa_r+0x696>
 801fab8:	9c07      	ldr	r4, [sp, #28]
 801faba:	9704      	str	r7, [sp, #16]
 801fabc:	4625      	mov	r5, r4
 801fabe:	e7f3      	b.n	801faa8 <_dtoa_r+0x928>
 801fac0:	9b07      	ldr	r3, [sp, #28]
 801fac2:	9300      	str	r3, [sp, #0]
 801fac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	f000 8104 	beq.w	801fcd4 <_dtoa_r+0xb54>
 801facc:	2e00      	cmp	r6, #0
 801face:	dd05      	ble.n	801fadc <_dtoa_r+0x95c>
 801fad0:	4629      	mov	r1, r5
 801fad2:	4632      	mov	r2, r6
 801fad4:	4658      	mov	r0, fp
 801fad6:	f000 fbb9 	bl	802024c <__lshift>
 801fada:	4605      	mov	r5, r0
 801fadc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d05a      	beq.n	801fb98 <_dtoa_r+0xa18>
 801fae2:	6869      	ldr	r1, [r5, #4]
 801fae4:	4658      	mov	r0, fp
 801fae6:	f000 f959 	bl	801fd9c <_Balloc>
 801faea:	4606      	mov	r6, r0
 801faec:	b928      	cbnz	r0, 801fafa <_dtoa_r+0x97a>
 801faee:	4b84      	ldr	r3, [pc, #528]	@ (801fd00 <_dtoa_r+0xb80>)
 801faf0:	4602      	mov	r2, r0
 801faf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801faf6:	f7ff bb5a 	b.w	801f1ae <_dtoa_r+0x2e>
 801fafa:	692a      	ldr	r2, [r5, #16]
 801fafc:	3202      	adds	r2, #2
 801fafe:	0092      	lsls	r2, r2, #2
 801fb00:	f105 010c 	add.w	r1, r5, #12
 801fb04:	300c      	adds	r0, #12
 801fb06:	f7ff fa80 	bl	801f00a <memcpy>
 801fb0a:	2201      	movs	r2, #1
 801fb0c:	4631      	mov	r1, r6
 801fb0e:	4658      	mov	r0, fp
 801fb10:	f000 fb9c 	bl	802024c <__lshift>
 801fb14:	f10a 0301 	add.w	r3, sl, #1
 801fb18:	9307      	str	r3, [sp, #28]
 801fb1a:	9b00      	ldr	r3, [sp, #0]
 801fb1c:	4453      	add	r3, sl
 801fb1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb20:	9b02      	ldr	r3, [sp, #8]
 801fb22:	f003 0301 	and.w	r3, r3, #1
 801fb26:	462f      	mov	r7, r5
 801fb28:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb2a:	4605      	mov	r5, r0
 801fb2c:	9b07      	ldr	r3, [sp, #28]
 801fb2e:	4621      	mov	r1, r4
 801fb30:	3b01      	subs	r3, #1
 801fb32:	4648      	mov	r0, r9
 801fb34:	9300      	str	r3, [sp, #0]
 801fb36:	f7ff fa9b 	bl	801f070 <quorem>
 801fb3a:	4639      	mov	r1, r7
 801fb3c:	9002      	str	r0, [sp, #8]
 801fb3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fb42:	4648      	mov	r0, r9
 801fb44:	f000 fbee 	bl	8020324 <__mcmp>
 801fb48:	462a      	mov	r2, r5
 801fb4a:	9008      	str	r0, [sp, #32]
 801fb4c:	4621      	mov	r1, r4
 801fb4e:	4658      	mov	r0, fp
 801fb50:	f000 fc04 	bl	802035c <__mdiff>
 801fb54:	68c2      	ldr	r2, [r0, #12]
 801fb56:	4606      	mov	r6, r0
 801fb58:	bb02      	cbnz	r2, 801fb9c <_dtoa_r+0xa1c>
 801fb5a:	4601      	mov	r1, r0
 801fb5c:	4648      	mov	r0, r9
 801fb5e:	f000 fbe1 	bl	8020324 <__mcmp>
 801fb62:	4602      	mov	r2, r0
 801fb64:	4631      	mov	r1, r6
 801fb66:	4658      	mov	r0, fp
 801fb68:	920e      	str	r2, [sp, #56]	@ 0x38
 801fb6a:	f000 f957 	bl	801fe1c <_Bfree>
 801fb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb72:	9e07      	ldr	r6, [sp, #28]
 801fb74:	ea43 0102 	orr.w	r1, r3, r2
 801fb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb7a:	4319      	orrs	r1, r3
 801fb7c:	d110      	bne.n	801fba0 <_dtoa_r+0xa20>
 801fb7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fb82:	d029      	beq.n	801fbd8 <_dtoa_r+0xa58>
 801fb84:	9b08      	ldr	r3, [sp, #32]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	dd02      	ble.n	801fb90 <_dtoa_r+0xa10>
 801fb8a:	9b02      	ldr	r3, [sp, #8]
 801fb8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fb90:	9b00      	ldr	r3, [sp, #0]
 801fb92:	f883 8000 	strb.w	r8, [r3]
 801fb96:	e63f      	b.n	801f818 <_dtoa_r+0x698>
 801fb98:	4628      	mov	r0, r5
 801fb9a:	e7bb      	b.n	801fb14 <_dtoa_r+0x994>
 801fb9c:	2201      	movs	r2, #1
 801fb9e:	e7e1      	b.n	801fb64 <_dtoa_r+0x9e4>
 801fba0:	9b08      	ldr	r3, [sp, #32]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	db04      	blt.n	801fbb0 <_dtoa_r+0xa30>
 801fba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fba8:	430b      	orrs	r3, r1
 801fbaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbac:	430b      	orrs	r3, r1
 801fbae:	d120      	bne.n	801fbf2 <_dtoa_r+0xa72>
 801fbb0:	2a00      	cmp	r2, #0
 801fbb2:	dded      	ble.n	801fb90 <_dtoa_r+0xa10>
 801fbb4:	4649      	mov	r1, r9
 801fbb6:	2201      	movs	r2, #1
 801fbb8:	4658      	mov	r0, fp
 801fbba:	f000 fb47 	bl	802024c <__lshift>
 801fbbe:	4621      	mov	r1, r4
 801fbc0:	4681      	mov	r9, r0
 801fbc2:	f000 fbaf 	bl	8020324 <__mcmp>
 801fbc6:	2800      	cmp	r0, #0
 801fbc8:	dc03      	bgt.n	801fbd2 <_dtoa_r+0xa52>
 801fbca:	d1e1      	bne.n	801fb90 <_dtoa_r+0xa10>
 801fbcc:	f018 0f01 	tst.w	r8, #1
 801fbd0:	d0de      	beq.n	801fb90 <_dtoa_r+0xa10>
 801fbd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fbd6:	d1d8      	bne.n	801fb8a <_dtoa_r+0xa0a>
 801fbd8:	9a00      	ldr	r2, [sp, #0]
 801fbda:	2339      	movs	r3, #57	@ 0x39
 801fbdc:	7013      	strb	r3, [r2, #0]
 801fbde:	4633      	mov	r3, r6
 801fbe0:	461e      	mov	r6, r3
 801fbe2:	3b01      	subs	r3, #1
 801fbe4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fbe8:	2a39      	cmp	r2, #57	@ 0x39
 801fbea:	d052      	beq.n	801fc92 <_dtoa_r+0xb12>
 801fbec:	3201      	adds	r2, #1
 801fbee:	701a      	strb	r2, [r3, #0]
 801fbf0:	e612      	b.n	801f818 <_dtoa_r+0x698>
 801fbf2:	2a00      	cmp	r2, #0
 801fbf4:	dd07      	ble.n	801fc06 <_dtoa_r+0xa86>
 801fbf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fbfa:	d0ed      	beq.n	801fbd8 <_dtoa_r+0xa58>
 801fbfc:	9a00      	ldr	r2, [sp, #0]
 801fbfe:	f108 0301 	add.w	r3, r8, #1
 801fc02:	7013      	strb	r3, [r2, #0]
 801fc04:	e608      	b.n	801f818 <_dtoa_r+0x698>
 801fc06:	9b07      	ldr	r3, [sp, #28]
 801fc08:	9a07      	ldr	r2, [sp, #28]
 801fc0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fc0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc10:	4293      	cmp	r3, r2
 801fc12:	d028      	beq.n	801fc66 <_dtoa_r+0xae6>
 801fc14:	4649      	mov	r1, r9
 801fc16:	2300      	movs	r3, #0
 801fc18:	220a      	movs	r2, #10
 801fc1a:	4658      	mov	r0, fp
 801fc1c:	f000 f920 	bl	801fe60 <__multadd>
 801fc20:	42af      	cmp	r7, r5
 801fc22:	4681      	mov	r9, r0
 801fc24:	f04f 0300 	mov.w	r3, #0
 801fc28:	f04f 020a 	mov.w	r2, #10
 801fc2c:	4639      	mov	r1, r7
 801fc2e:	4658      	mov	r0, fp
 801fc30:	d107      	bne.n	801fc42 <_dtoa_r+0xac2>
 801fc32:	f000 f915 	bl	801fe60 <__multadd>
 801fc36:	4607      	mov	r7, r0
 801fc38:	4605      	mov	r5, r0
 801fc3a:	9b07      	ldr	r3, [sp, #28]
 801fc3c:	3301      	adds	r3, #1
 801fc3e:	9307      	str	r3, [sp, #28]
 801fc40:	e774      	b.n	801fb2c <_dtoa_r+0x9ac>
 801fc42:	f000 f90d 	bl	801fe60 <__multadd>
 801fc46:	4629      	mov	r1, r5
 801fc48:	4607      	mov	r7, r0
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	220a      	movs	r2, #10
 801fc4e:	4658      	mov	r0, fp
 801fc50:	f000 f906 	bl	801fe60 <__multadd>
 801fc54:	4605      	mov	r5, r0
 801fc56:	e7f0      	b.n	801fc3a <_dtoa_r+0xaba>
 801fc58:	9b00      	ldr	r3, [sp, #0]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	bfcc      	ite	gt
 801fc5e:	461e      	movgt	r6, r3
 801fc60:	2601      	movle	r6, #1
 801fc62:	4456      	add	r6, sl
 801fc64:	2700      	movs	r7, #0
 801fc66:	4649      	mov	r1, r9
 801fc68:	2201      	movs	r2, #1
 801fc6a:	4658      	mov	r0, fp
 801fc6c:	f000 faee 	bl	802024c <__lshift>
 801fc70:	4621      	mov	r1, r4
 801fc72:	4681      	mov	r9, r0
 801fc74:	f000 fb56 	bl	8020324 <__mcmp>
 801fc78:	2800      	cmp	r0, #0
 801fc7a:	dcb0      	bgt.n	801fbde <_dtoa_r+0xa5e>
 801fc7c:	d102      	bne.n	801fc84 <_dtoa_r+0xb04>
 801fc7e:	f018 0f01 	tst.w	r8, #1
 801fc82:	d1ac      	bne.n	801fbde <_dtoa_r+0xa5e>
 801fc84:	4633      	mov	r3, r6
 801fc86:	461e      	mov	r6, r3
 801fc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fc8c:	2a30      	cmp	r2, #48	@ 0x30
 801fc8e:	d0fa      	beq.n	801fc86 <_dtoa_r+0xb06>
 801fc90:	e5c2      	b.n	801f818 <_dtoa_r+0x698>
 801fc92:	459a      	cmp	sl, r3
 801fc94:	d1a4      	bne.n	801fbe0 <_dtoa_r+0xa60>
 801fc96:	9b04      	ldr	r3, [sp, #16]
 801fc98:	3301      	adds	r3, #1
 801fc9a:	9304      	str	r3, [sp, #16]
 801fc9c:	2331      	movs	r3, #49	@ 0x31
 801fc9e:	f88a 3000 	strb.w	r3, [sl]
 801fca2:	e5b9      	b.n	801f818 <_dtoa_r+0x698>
 801fca4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fca6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fd04 <_dtoa_r+0xb84>
 801fcaa:	b11b      	cbz	r3, 801fcb4 <_dtoa_r+0xb34>
 801fcac:	f10a 0308 	add.w	r3, sl, #8
 801fcb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fcb2:	6013      	str	r3, [r2, #0]
 801fcb4:	4650      	mov	r0, sl
 801fcb6:	b019      	add	sp, #100	@ 0x64
 801fcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcbe:	2b01      	cmp	r3, #1
 801fcc0:	f77f ae37 	ble.w	801f932 <_dtoa_r+0x7b2>
 801fcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fcc6:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcc8:	2001      	movs	r0, #1
 801fcca:	e655      	b.n	801f978 <_dtoa_r+0x7f8>
 801fccc:	9b00      	ldr	r3, [sp, #0]
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	f77f aed6 	ble.w	801fa80 <_dtoa_r+0x900>
 801fcd4:	4656      	mov	r6, sl
 801fcd6:	4621      	mov	r1, r4
 801fcd8:	4648      	mov	r0, r9
 801fcda:	f7ff f9c9 	bl	801f070 <quorem>
 801fcde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fce2:	f806 8b01 	strb.w	r8, [r6], #1
 801fce6:	9b00      	ldr	r3, [sp, #0]
 801fce8:	eba6 020a 	sub.w	r2, r6, sl
 801fcec:	4293      	cmp	r3, r2
 801fcee:	ddb3      	ble.n	801fc58 <_dtoa_r+0xad8>
 801fcf0:	4649      	mov	r1, r9
 801fcf2:	2300      	movs	r3, #0
 801fcf4:	220a      	movs	r2, #10
 801fcf6:	4658      	mov	r0, fp
 801fcf8:	f000 f8b2 	bl	801fe60 <__multadd>
 801fcfc:	4681      	mov	r9, r0
 801fcfe:	e7ea      	b.n	801fcd6 <_dtoa_r+0xb56>
 801fd00:	080257e4 	.word	0x080257e4
 801fd04:	0802577f 	.word	0x0802577f

0801fd08 <_free_r>:
 801fd08:	b538      	push	{r3, r4, r5, lr}
 801fd0a:	4605      	mov	r5, r0
 801fd0c:	2900      	cmp	r1, #0
 801fd0e:	d041      	beq.n	801fd94 <_free_r+0x8c>
 801fd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd14:	1f0c      	subs	r4, r1, #4
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	bfb8      	it	lt
 801fd1a:	18e4      	addlt	r4, r4, r3
 801fd1c:	f7fd fe8a 	bl	801da34 <__malloc_lock>
 801fd20:	4a1d      	ldr	r2, [pc, #116]	@ (801fd98 <_free_r+0x90>)
 801fd22:	6813      	ldr	r3, [r2, #0]
 801fd24:	b933      	cbnz	r3, 801fd34 <_free_r+0x2c>
 801fd26:	6063      	str	r3, [r4, #4]
 801fd28:	6014      	str	r4, [r2, #0]
 801fd2a:	4628      	mov	r0, r5
 801fd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd30:	f7fd be86 	b.w	801da40 <__malloc_unlock>
 801fd34:	42a3      	cmp	r3, r4
 801fd36:	d908      	bls.n	801fd4a <_free_r+0x42>
 801fd38:	6820      	ldr	r0, [r4, #0]
 801fd3a:	1821      	adds	r1, r4, r0
 801fd3c:	428b      	cmp	r3, r1
 801fd3e:	bf01      	itttt	eq
 801fd40:	6819      	ldreq	r1, [r3, #0]
 801fd42:	685b      	ldreq	r3, [r3, #4]
 801fd44:	1809      	addeq	r1, r1, r0
 801fd46:	6021      	streq	r1, [r4, #0]
 801fd48:	e7ed      	b.n	801fd26 <_free_r+0x1e>
 801fd4a:	461a      	mov	r2, r3
 801fd4c:	685b      	ldr	r3, [r3, #4]
 801fd4e:	b10b      	cbz	r3, 801fd54 <_free_r+0x4c>
 801fd50:	42a3      	cmp	r3, r4
 801fd52:	d9fa      	bls.n	801fd4a <_free_r+0x42>
 801fd54:	6811      	ldr	r1, [r2, #0]
 801fd56:	1850      	adds	r0, r2, r1
 801fd58:	42a0      	cmp	r0, r4
 801fd5a:	d10b      	bne.n	801fd74 <_free_r+0x6c>
 801fd5c:	6820      	ldr	r0, [r4, #0]
 801fd5e:	4401      	add	r1, r0
 801fd60:	1850      	adds	r0, r2, r1
 801fd62:	4283      	cmp	r3, r0
 801fd64:	6011      	str	r1, [r2, #0]
 801fd66:	d1e0      	bne.n	801fd2a <_free_r+0x22>
 801fd68:	6818      	ldr	r0, [r3, #0]
 801fd6a:	685b      	ldr	r3, [r3, #4]
 801fd6c:	6053      	str	r3, [r2, #4]
 801fd6e:	4408      	add	r0, r1
 801fd70:	6010      	str	r0, [r2, #0]
 801fd72:	e7da      	b.n	801fd2a <_free_r+0x22>
 801fd74:	d902      	bls.n	801fd7c <_free_r+0x74>
 801fd76:	230c      	movs	r3, #12
 801fd78:	602b      	str	r3, [r5, #0]
 801fd7a:	e7d6      	b.n	801fd2a <_free_r+0x22>
 801fd7c:	6820      	ldr	r0, [r4, #0]
 801fd7e:	1821      	adds	r1, r4, r0
 801fd80:	428b      	cmp	r3, r1
 801fd82:	bf04      	itt	eq
 801fd84:	6819      	ldreq	r1, [r3, #0]
 801fd86:	685b      	ldreq	r3, [r3, #4]
 801fd88:	6063      	str	r3, [r4, #4]
 801fd8a:	bf04      	itt	eq
 801fd8c:	1809      	addeq	r1, r1, r0
 801fd8e:	6021      	streq	r1, [r4, #0]
 801fd90:	6054      	str	r4, [r2, #4]
 801fd92:	e7ca      	b.n	801fd2a <_free_r+0x22>
 801fd94:	bd38      	pop	{r3, r4, r5, pc}
 801fd96:	bf00      	nop
 801fd98:	20003668 	.word	0x20003668

0801fd9c <_Balloc>:
 801fd9c:	b570      	push	{r4, r5, r6, lr}
 801fd9e:	69c6      	ldr	r6, [r0, #28]
 801fda0:	4604      	mov	r4, r0
 801fda2:	460d      	mov	r5, r1
 801fda4:	b976      	cbnz	r6, 801fdc4 <_Balloc+0x28>
 801fda6:	2010      	movs	r0, #16
 801fda8:	f7fd fd9a 	bl	801d8e0 <malloc>
 801fdac:	4602      	mov	r2, r0
 801fdae:	61e0      	str	r0, [r4, #28]
 801fdb0:	b920      	cbnz	r0, 801fdbc <_Balloc+0x20>
 801fdb2:	4b18      	ldr	r3, [pc, #96]	@ (801fe14 <_Balloc+0x78>)
 801fdb4:	4818      	ldr	r0, [pc, #96]	@ (801fe18 <_Balloc+0x7c>)
 801fdb6:	216b      	movs	r1, #107	@ 0x6b
 801fdb8:	f7ff f93c 	bl	801f034 <__assert_func>
 801fdbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fdc0:	6006      	str	r6, [r0, #0]
 801fdc2:	60c6      	str	r6, [r0, #12]
 801fdc4:	69e6      	ldr	r6, [r4, #28]
 801fdc6:	68f3      	ldr	r3, [r6, #12]
 801fdc8:	b183      	cbz	r3, 801fdec <_Balloc+0x50>
 801fdca:	69e3      	ldr	r3, [r4, #28]
 801fdcc:	68db      	ldr	r3, [r3, #12]
 801fdce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fdd2:	b9b8      	cbnz	r0, 801fe04 <_Balloc+0x68>
 801fdd4:	2101      	movs	r1, #1
 801fdd6:	fa01 f605 	lsl.w	r6, r1, r5
 801fdda:	1d72      	adds	r2, r6, #5
 801fddc:	0092      	lsls	r2, r2, #2
 801fdde:	4620      	mov	r0, r4
 801fde0:	f001 fe95 	bl	8021b0e <_calloc_r>
 801fde4:	b160      	cbz	r0, 801fe00 <_Balloc+0x64>
 801fde6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fdea:	e00e      	b.n	801fe0a <_Balloc+0x6e>
 801fdec:	2221      	movs	r2, #33	@ 0x21
 801fdee:	2104      	movs	r1, #4
 801fdf0:	4620      	mov	r0, r4
 801fdf2:	f001 fe8c 	bl	8021b0e <_calloc_r>
 801fdf6:	69e3      	ldr	r3, [r4, #28]
 801fdf8:	60f0      	str	r0, [r6, #12]
 801fdfa:	68db      	ldr	r3, [r3, #12]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	d1e4      	bne.n	801fdca <_Balloc+0x2e>
 801fe00:	2000      	movs	r0, #0
 801fe02:	bd70      	pop	{r4, r5, r6, pc}
 801fe04:	6802      	ldr	r2, [r0, #0]
 801fe06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fe0a:	2300      	movs	r3, #0
 801fe0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fe10:	e7f7      	b.n	801fe02 <_Balloc+0x66>
 801fe12:	bf00      	nop
 801fe14:	080256d2 	.word	0x080256d2
 801fe18:	080257f5 	.word	0x080257f5

0801fe1c <_Bfree>:
 801fe1c:	b570      	push	{r4, r5, r6, lr}
 801fe1e:	69c6      	ldr	r6, [r0, #28]
 801fe20:	4605      	mov	r5, r0
 801fe22:	460c      	mov	r4, r1
 801fe24:	b976      	cbnz	r6, 801fe44 <_Bfree+0x28>
 801fe26:	2010      	movs	r0, #16
 801fe28:	f7fd fd5a 	bl	801d8e0 <malloc>
 801fe2c:	4602      	mov	r2, r0
 801fe2e:	61e8      	str	r0, [r5, #28]
 801fe30:	b920      	cbnz	r0, 801fe3c <_Bfree+0x20>
 801fe32:	4b09      	ldr	r3, [pc, #36]	@ (801fe58 <_Bfree+0x3c>)
 801fe34:	4809      	ldr	r0, [pc, #36]	@ (801fe5c <_Bfree+0x40>)
 801fe36:	218f      	movs	r1, #143	@ 0x8f
 801fe38:	f7ff f8fc 	bl	801f034 <__assert_func>
 801fe3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fe40:	6006      	str	r6, [r0, #0]
 801fe42:	60c6      	str	r6, [r0, #12]
 801fe44:	b13c      	cbz	r4, 801fe56 <_Bfree+0x3a>
 801fe46:	69eb      	ldr	r3, [r5, #28]
 801fe48:	6862      	ldr	r2, [r4, #4]
 801fe4a:	68db      	ldr	r3, [r3, #12]
 801fe4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fe50:	6021      	str	r1, [r4, #0]
 801fe52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fe56:	bd70      	pop	{r4, r5, r6, pc}
 801fe58:	080256d2 	.word	0x080256d2
 801fe5c:	080257f5 	.word	0x080257f5

0801fe60 <__multadd>:
 801fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe64:	690d      	ldr	r5, [r1, #16]
 801fe66:	4607      	mov	r7, r0
 801fe68:	460c      	mov	r4, r1
 801fe6a:	461e      	mov	r6, r3
 801fe6c:	f101 0c14 	add.w	ip, r1, #20
 801fe70:	2000      	movs	r0, #0
 801fe72:	f8dc 3000 	ldr.w	r3, [ip]
 801fe76:	b299      	uxth	r1, r3
 801fe78:	fb02 6101 	mla	r1, r2, r1, r6
 801fe7c:	0c1e      	lsrs	r6, r3, #16
 801fe7e:	0c0b      	lsrs	r3, r1, #16
 801fe80:	fb02 3306 	mla	r3, r2, r6, r3
 801fe84:	b289      	uxth	r1, r1
 801fe86:	3001      	adds	r0, #1
 801fe88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fe8c:	4285      	cmp	r5, r0
 801fe8e:	f84c 1b04 	str.w	r1, [ip], #4
 801fe92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fe96:	dcec      	bgt.n	801fe72 <__multadd+0x12>
 801fe98:	b30e      	cbz	r6, 801fede <__multadd+0x7e>
 801fe9a:	68a3      	ldr	r3, [r4, #8]
 801fe9c:	42ab      	cmp	r3, r5
 801fe9e:	dc19      	bgt.n	801fed4 <__multadd+0x74>
 801fea0:	6861      	ldr	r1, [r4, #4]
 801fea2:	4638      	mov	r0, r7
 801fea4:	3101      	adds	r1, #1
 801fea6:	f7ff ff79 	bl	801fd9c <_Balloc>
 801feaa:	4680      	mov	r8, r0
 801feac:	b928      	cbnz	r0, 801feba <__multadd+0x5a>
 801feae:	4602      	mov	r2, r0
 801feb0:	4b0c      	ldr	r3, [pc, #48]	@ (801fee4 <__multadd+0x84>)
 801feb2:	480d      	ldr	r0, [pc, #52]	@ (801fee8 <__multadd+0x88>)
 801feb4:	21ba      	movs	r1, #186	@ 0xba
 801feb6:	f7ff f8bd 	bl	801f034 <__assert_func>
 801feba:	6922      	ldr	r2, [r4, #16]
 801febc:	3202      	adds	r2, #2
 801febe:	f104 010c 	add.w	r1, r4, #12
 801fec2:	0092      	lsls	r2, r2, #2
 801fec4:	300c      	adds	r0, #12
 801fec6:	f7ff f8a0 	bl	801f00a <memcpy>
 801feca:	4621      	mov	r1, r4
 801fecc:	4638      	mov	r0, r7
 801fece:	f7ff ffa5 	bl	801fe1c <_Bfree>
 801fed2:	4644      	mov	r4, r8
 801fed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fed8:	3501      	adds	r5, #1
 801feda:	615e      	str	r6, [r3, #20]
 801fedc:	6125      	str	r5, [r4, #16]
 801fede:	4620      	mov	r0, r4
 801fee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fee4:	080257e4 	.word	0x080257e4
 801fee8:	080257f5 	.word	0x080257f5

0801feec <__s2b>:
 801feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fef0:	460c      	mov	r4, r1
 801fef2:	4615      	mov	r5, r2
 801fef4:	461f      	mov	r7, r3
 801fef6:	2209      	movs	r2, #9
 801fef8:	3308      	adds	r3, #8
 801fefa:	4606      	mov	r6, r0
 801fefc:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff00:	2100      	movs	r1, #0
 801ff02:	2201      	movs	r2, #1
 801ff04:	429a      	cmp	r2, r3
 801ff06:	db09      	blt.n	801ff1c <__s2b+0x30>
 801ff08:	4630      	mov	r0, r6
 801ff0a:	f7ff ff47 	bl	801fd9c <_Balloc>
 801ff0e:	b940      	cbnz	r0, 801ff22 <__s2b+0x36>
 801ff10:	4602      	mov	r2, r0
 801ff12:	4b19      	ldr	r3, [pc, #100]	@ (801ff78 <__s2b+0x8c>)
 801ff14:	4819      	ldr	r0, [pc, #100]	@ (801ff7c <__s2b+0x90>)
 801ff16:	21d3      	movs	r1, #211	@ 0xd3
 801ff18:	f7ff f88c 	bl	801f034 <__assert_func>
 801ff1c:	0052      	lsls	r2, r2, #1
 801ff1e:	3101      	adds	r1, #1
 801ff20:	e7f0      	b.n	801ff04 <__s2b+0x18>
 801ff22:	9b08      	ldr	r3, [sp, #32]
 801ff24:	6143      	str	r3, [r0, #20]
 801ff26:	2d09      	cmp	r5, #9
 801ff28:	f04f 0301 	mov.w	r3, #1
 801ff2c:	6103      	str	r3, [r0, #16]
 801ff2e:	dd16      	ble.n	801ff5e <__s2b+0x72>
 801ff30:	f104 0909 	add.w	r9, r4, #9
 801ff34:	46c8      	mov	r8, r9
 801ff36:	442c      	add	r4, r5
 801ff38:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ff3c:	4601      	mov	r1, r0
 801ff3e:	3b30      	subs	r3, #48	@ 0x30
 801ff40:	220a      	movs	r2, #10
 801ff42:	4630      	mov	r0, r6
 801ff44:	f7ff ff8c 	bl	801fe60 <__multadd>
 801ff48:	45a0      	cmp	r8, r4
 801ff4a:	d1f5      	bne.n	801ff38 <__s2b+0x4c>
 801ff4c:	f1a5 0408 	sub.w	r4, r5, #8
 801ff50:	444c      	add	r4, r9
 801ff52:	1b2d      	subs	r5, r5, r4
 801ff54:	1963      	adds	r3, r4, r5
 801ff56:	42bb      	cmp	r3, r7
 801ff58:	db04      	blt.n	801ff64 <__s2b+0x78>
 801ff5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff5e:	340a      	adds	r4, #10
 801ff60:	2509      	movs	r5, #9
 801ff62:	e7f6      	b.n	801ff52 <__s2b+0x66>
 801ff64:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ff68:	4601      	mov	r1, r0
 801ff6a:	3b30      	subs	r3, #48	@ 0x30
 801ff6c:	220a      	movs	r2, #10
 801ff6e:	4630      	mov	r0, r6
 801ff70:	f7ff ff76 	bl	801fe60 <__multadd>
 801ff74:	e7ee      	b.n	801ff54 <__s2b+0x68>
 801ff76:	bf00      	nop
 801ff78:	080257e4 	.word	0x080257e4
 801ff7c:	080257f5 	.word	0x080257f5

0801ff80 <__hi0bits>:
 801ff80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ff84:	4603      	mov	r3, r0
 801ff86:	bf36      	itet	cc
 801ff88:	0403      	lslcc	r3, r0, #16
 801ff8a:	2000      	movcs	r0, #0
 801ff8c:	2010      	movcc	r0, #16
 801ff8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ff92:	bf3c      	itt	cc
 801ff94:	021b      	lslcc	r3, r3, #8
 801ff96:	3008      	addcc	r0, #8
 801ff98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ff9c:	bf3c      	itt	cc
 801ff9e:	011b      	lslcc	r3, r3, #4
 801ffa0:	3004      	addcc	r0, #4
 801ffa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ffa6:	bf3c      	itt	cc
 801ffa8:	009b      	lslcc	r3, r3, #2
 801ffaa:	3002      	addcc	r0, #2
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	db05      	blt.n	801ffbc <__hi0bits+0x3c>
 801ffb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ffb4:	f100 0001 	add.w	r0, r0, #1
 801ffb8:	bf08      	it	eq
 801ffba:	2020      	moveq	r0, #32
 801ffbc:	4770      	bx	lr

0801ffbe <__lo0bits>:
 801ffbe:	6803      	ldr	r3, [r0, #0]
 801ffc0:	4602      	mov	r2, r0
 801ffc2:	f013 0007 	ands.w	r0, r3, #7
 801ffc6:	d00b      	beq.n	801ffe0 <__lo0bits+0x22>
 801ffc8:	07d9      	lsls	r1, r3, #31
 801ffca:	d421      	bmi.n	8020010 <__lo0bits+0x52>
 801ffcc:	0798      	lsls	r0, r3, #30
 801ffce:	bf49      	itett	mi
 801ffd0:	085b      	lsrmi	r3, r3, #1
 801ffd2:	089b      	lsrpl	r3, r3, #2
 801ffd4:	2001      	movmi	r0, #1
 801ffd6:	6013      	strmi	r3, [r2, #0]
 801ffd8:	bf5c      	itt	pl
 801ffda:	6013      	strpl	r3, [r2, #0]
 801ffdc:	2002      	movpl	r0, #2
 801ffde:	4770      	bx	lr
 801ffe0:	b299      	uxth	r1, r3
 801ffe2:	b909      	cbnz	r1, 801ffe8 <__lo0bits+0x2a>
 801ffe4:	0c1b      	lsrs	r3, r3, #16
 801ffe6:	2010      	movs	r0, #16
 801ffe8:	b2d9      	uxtb	r1, r3
 801ffea:	b909      	cbnz	r1, 801fff0 <__lo0bits+0x32>
 801ffec:	3008      	adds	r0, #8
 801ffee:	0a1b      	lsrs	r3, r3, #8
 801fff0:	0719      	lsls	r1, r3, #28
 801fff2:	bf04      	itt	eq
 801fff4:	091b      	lsreq	r3, r3, #4
 801fff6:	3004      	addeq	r0, #4
 801fff8:	0799      	lsls	r1, r3, #30
 801fffa:	bf04      	itt	eq
 801fffc:	089b      	lsreq	r3, r3, #2
 801fffe:	3002      	addeq	r0, #2
 8020000:	07d9      	lsls	r1, r3, #31
 8020002:	d403      	bmi.n	802000c <__lo0bits+0x4e>
 8020004:	085b      	lsrs	r3, r3, #1
 8020006:	f100 0001 	add.w	r0, r0, #1
 802000a:	d003      	beq.n	8020014 <__lo0bits+0x56>
 802000c:	6013      	str	r3, [r2, #0]
 802000e:	4770      	bx	lr
 8020010:	2000      	movs	r0, #0
 8020012:	4770      	bx	lr
 8020014:	2020      	movs	r0, #32
 8020016:	4770      	bx	lr

08020018 <__i2b>:
 8020018:	b510      	push	{r4, lr}
 802001a:	460c      	mov	r4, r1
 802001c:	2101      	movs	r1, #1
 802001e:	f7ff febd 	bl	801fd9c <_Balloc>
 8020022:	4602      	mov	r2, r0
 8020024:	b928      	cbnz	r0, 8020032 <__i2b+0x1a>
 8020026:	4b05      	ldr	r3, [pc, #20]	@ (802003c <__i2b+0x24>)
 8020028:	4805      	ldr	r0, [pc, #20]	@ (8020040 <__i2b+0x28>)
 802002a:	f240 1145 	movw	r1, #325	@ 0x145
 802002e:	f7ff f801 	bl	801f034 <__assert_func>
 8020032:	2301      	movs	r3, #1
 8020034:	6144      	str	r4, [r0, #20]
 8020036:	6103      	str	r3, [r0, #16]
 8020038:	bd10      	pop	{r4, pc}
 802003a:	bf00      	nop
 802003c:	080257e4 	.word	0x080257e4
 8020040:	080257f5 	.word	0x080257f5

08020044 <__multiply>:
 8020044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020048:	4614      	mov	r4, r2
 802004a:	690a      	ldr	r2, [r1, #16]
 802004c:	6923      	ldr	r3, [r4, #16]
 802004e:	429a      	cmp	r2, r3
 8020050:	bfa8      	it	ge
 8020052:	4623      	movge	r3, r4
 8020054:	460f      	mov	r7, r1
 8020056:	bfa4      	itt	ge
 8020058:	460c      	movge	r4, r1
 802005a:	461f      	movge	r7, r3
 802005c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020060:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020064:	68a3      	ldr	r3, [r4, #8]
 8020066:	6861      	ldr	r1, [r4, #4]
 8020068:	eb0a 0609 	add.w	r6, sl, r9
 802006c:	42b3      	cmp	r3, r6
 802006e:	b085      	sub	sp, #20
 8020070:	bfb8      	it	lt
 8020072:	3101      	addlt	r1, #1
 8020074:	f7ff fe92 	bl	801fd9c <_Balloc>
 8020078:	b930      	cbnz	r0, 8020088 <__multiply+0x44>
 802007a:	4602      	mov	r2, r0
 802007c:	4b44      	ldr	r3, [pc, #272]	@ (8020190 <__multiply+0x14c>)
 802007e:	4845      	ldr	r0, [pc, #276]	@ (8020194 <__multiply+0x150>)
 8020080:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020084:	f7fe ffd6 	bl	801f034 <__assert_func>
 8020088:	f100 0514 	add.w	r5, r0, #20
 802008c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020090:	462b      	mov	r3, r5
 8020092:	2200      	movs	r2, #0
 8020094:	4543      	cmp	r3, r8
 8020096:	d321      	bcc.n	80200dc <__multiply+0x98>
 8020098:	f107 0114 	add.w	r1, r7, #20
 802009c:	f104 0214 	add.w	r2, r4, #20
 80200a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80200a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80200a8:	9302      	str	r3, [sp, #8]
 80200aa:	1b13      	subs	r3, r2, r4
 80200ac:	3b15      	subs	r3, #21
 80200ae:	f023 0303 	bic.w	r3, r3, #3
 80200b2:	3304      	adds	r3, #4
 80200b4:	f104 0715 	add.w	r7, r4, #21
 80200b8:	42ba      	cmp	r2, r7
 80200ba:	bf38      	it	cc
 80200bc:	2304      	movcc	r3, #4
 80200be:	9301      	str	r3, [sp, #4]
 80200c0:	9b02      	ldr	r3, [sp, #8]
 80200c2:	9103      	str	r1, [sp, #12]
 80200c4:	428b      	cmp	r3, r1
 80200c6:	d80c      	bhi.n	80200e2 <__multiply+0x9e>
 80200c8:	2e00      	cmp	r6, #0
 80200ca:	dd03      	ble.n	80200d4 <__multiply+0x90>
 80200cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d05b      	beq.n	802018c <__multiply+0x148>
 80200d4:	6106      	str	r6, [r0, #16]
 80200d6:	b005      	add	sp, #20
 80200d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200dc:	f843 2b04 	str.w	r2, [r3], #4
 80200e0:	e7d8      	b.n	8020094 <__multiply+0x50>
 80200e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80200e6:	f1ba 0f00 	cmp.w	sl, #0
 80200ea:	d024      	beq.n	8020136 <__multiply+0xf2>
 80200ec:	f104 0e14 	add.w	lr, r4, #20
 80200f0:	46a9      	mov	r9, r5
 80200f2:	f04f 0c00 	mov.w	ip, #0
 80200f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80200fa:	f8d9 3000 	ldr.w	r3, [r9]
 80200fe:	fa1f fb87 	uxth.w	fp, r7
 8020102:	b29b      	uxth	r3, r3
 8020104:	fb0a 330b 	mla	r3, sl, fp, r3
 8020108:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802010c:	f8d9 7000 	ldr.w	r7, [r9]
 8020110:	4463      	add	r3, ip
 8020112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020116:	fb0a c70b 	mla	r7, sl, fp, ip
 802011a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802011e:	b29b      	uxth	r3, r3
 8020120:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020124:	4572      	cmp	r2, lr
 8020126:	f849 3b04 	str.w	r3, [r9], #4
 802012a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802012e:	d8e2      	bhi.n	80200f6 <__multiply+0xb2>
 8020130:	9b01      	ldr	r3, [sp, #4]
 8020132:	f845 c003 	str.w	ip, [r5, r3]
 8020136:	9b03      	ldr	r3, [sp, #12]
 8020138:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802013c:	3104      	adds	r1, #4
 802013e:	f1b9 0f00 	cmp.w	r9, #0
 8020142:	d021      	beq.n	8020188 <__multiply+0x144>
 8020144:	682b      	ldr	r3, [r5, #0]
 8020146:	f104 0c14 	add.w	ip, r4, #20
 802014a:	46ae      	mov	lr, r5
 802014c:	f04f 0a00 	mov.w	sl, #0
 8020150:	f8bc b000 	ldrh.w	fp, [ip]
 8020154:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020158:	fb09 770b 	mla	r7, r9, fp, r7
 802015c:	4457      	add	r7, sl
 802015e:	b29b      	uxth	r3, r3
 8020160:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020164:	f84e 3b04 	str.w	r3, [lr], #4
 8020168:	f85c 3b04 	ldr.w	r3, [ip], #4
 802016c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020170:	f8be 3000 	ldrh.w	r3, [lr]
 8020174:	fb09 330a 	mla	r3, r9, sl, r3
 8020178:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802017c:	4562      	cmp	r2, ip
 802017e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020182:	d8e5      	bhi.n	8020150 <__multiply+0x10c>
 8020184:	9f01      	ldr	r7, [sp, #4]
 8020186:	51eb      	str	r3, [r5, r7]
 8020188:	3504      	adds	r5, #4
 802018a:	e799      	b.n	80200c0 <__multiply+0x7c>
 802018c:	3e01      	subs	r6, #1
 802018e:	e79b      	b.n	80200c8 <__multiply+0x84>
 8020190:	080257e4 	.word	0x080257e4
 8020194:	080257f5 	.word	0x080257f5

08020198 <__pow5mult>:
 8020198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802019c:	4615      	mov	r5, r2
 802019e:	f012 0203 	ands.w	r2, r2, #3
 80201a2:	4607      	mov	r7, r0
 80201a4:	460e      	mov	r6, r1
 80201a6:	d007      	beq.n	80201b8 <__pow5mult+0x20>
 80201a8:	4c25      	ldr	r4, [pc, #148]	@ (8020240 <__pow5mult+0xa8>)
 80201aa:	3a01      	subs	r2, #1
 80201ac:	2300      	movs	r3, #0
 80201ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80201b2:	f7ff fe55 	bl	801fe60 <__multadd>
 80201b6:	4606      	mov	r6, r0
 80201b8:	10ad      	asrs	r5, r5, #2
 80201ba:	d03d      	beq.n	8020238 <__pow5mult+0xa0>
 80201bc:	69fc      	ldr	r4, [r7, #28]
 80201be:	b97c      	cbnz	r4, 80201e0 <__pow5mult+0x48>
 80201c0:	2010      	movs	r0, #16
 80201c2:	f7fd fb8d 	bl	801d8e0 <malloc>
 80201c6:	4602      	mov	r2, r0
 80201c8:	61f8      	str	r0, [r7, #28]
 80201ca:	b928      	cbnz	r0, 80201d8 <__pow5mult+0x40>
 80201cc:	4b1d      	ldr	r3, [pc, #116]	@ (8020244 <__pow5mult+0xac>)
 80201ce:	481e      	ldr	r0, [pc, #120]	@ (8020248 <__pow5mult+0xb0>)
 80201d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80201d4:	f7fe ff2e 	bl	801f034 <__assert_func>
 80201d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80201dc:	6004      	str	r4, [r0, #0]
 80201de:	60c4      	str	r4, [r0, #12]
 80201e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80201e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80201e8:	b94c      	cbnz	r4, 80201fe <__pow5mult+0x66>
 80201ea:	f240 2171 	movw	r1, #625	@ 0x271
 80201ee:	4638      	mov	r0, r7
 80201f0:	f7ff ff12 	bl	8020018 <__i2b>
 80201f4:	2300      	movs	r3, #0
 80201f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80201fa:	4604      	mov	r4, r0
 80201fc:	6003      	str	r3, [r0, #0]
 80201fe:	f04f 0900 	mov.w	r9, #0
 8020202:	07eb      	lsls	r3, r5, #31
 8020204:	d50a      	bpl.n	802021c <__pow5mult+0x84>
 8020206:	4631      	mov	r1, r6
 8020208:	4622      	mov	r2, r4
 802020a:	4638      	mov	r0, r7
 802020c:	f7ff ff1a 	bl	8020044 <__multiply>
 8020210:	4631      	mov	r1, r6
 8020212:	4680      	mov	r8, r0
 8020214:	4638      	mov	r0, r7
 8020216:	f7ff fe01 	bl	801fe1c <_Bfree>
 802021a:	4646      	mov	r6, r8
 802021c:	106d      	asrs	r5, r5, #1
 802021e:	d00b      	beq.n	8020238 <__pow5mult+0xa0>
 8020220:	6820      	ldr	r0, [r4, #0]
 8020222:	b938      	cbnz	r0, 8020234 <__pow5mult+0x9c>
 8020224:	4622      	mov	r2, r4
 8020226:	4621      	mov	r1, r4
 8020228:	4638      	mov	r0, r7
 802022a:	f7ff ff0b 	bl	8020044 <__multiply>
 802022e:	6020      	str	r0, [r4, #0]
 8020230:	f8c0 9000 	str.w	r9, [r0]
 8020234:	4604      	mov	r4, r0
 8020236:	e7e4      	b.n	8020202 <__pow5mult+0x6a>
 8020238:	4630      	mov	r0, r6
 802023a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802023e:	bf00      	nop
 8020240:	08025850 	.word	0x08025850
 8020244:	080256d2 	.word	0x080256d2
 8020248:	080257f5 	.word	0x080257f5

0802024c <__lshift>:
 802024c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020250:	460c      	mov	r4, r1
 8020252:	6849      	ldr	r1, [r1, #4]
 8020254:	6923      	ldr	r3, [r4, #16]
 8020256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802025a:	68a3      	ldr	r3, [r4, #8]
 802025c:	4607      	mov	r7, r0
 802025e:	4691      	mov	r9, r2
 8020260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020264:	f108 0601 	add.w	r6, r8, #1
 8020268:	42b3      	cmp	r3, r6
 802026a:	db0b      	blt.n	8020284 <__lshift+0x38>
 802026c:	4638      	mov	r0, r7
 802026e:	f7ff fd95 	bl	801fd9c <_Balloc>
 8020272:	4605      	mov	r5, r0
 8020274:	b948      	cbnz	r0, 802028a <__lshift+0x3e>
 8020276:	4602      	mov	r2, r0
 8020278:	4b28      	ldr	r3, [pc, #160]	@ (802031c <__lshift+0xd0>)
 802027a:	4829      	ldr	r0, [pc, #164]	@ (8020320 <__lshift+0xd4>)
 802027c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020280:	f7fe fed8 	bl	801f034 <__assert_func>
 8020284:	3101      	adds	r1, #1
 8020286:	005b      	lsls	r3, r3, #1
 8020288:	e7ee      	b.n	8020268 <__lshift+0x1c>
 802028a:	2300      	movs	r3, #0
 802028c:	f100 0114 	add.w	r1, r0, #20
 8020290:	f100 0210 	add.w	r2, r0, #16
 8020294:	4618      	mov	r0, r3
 8020296:	4553      	cmp	r3, sl
 8020298:	db33      	blt.n	8020302 <__lshift+0xb6>
 802029a:	6920      	ldr	r0, [r4, #16]
 802029c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80202a0:	f104 0314 	add.w	r3, r4, #20
 80202a4:	f019 091f 	ands.w	r9, r9, #31
 80202a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80202ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80202b0:	d02b      	beq.n	802030a <__lshift+0xbe>
 80202b2:	f1c9 0e20 	rsb	lr, r9, #32
 80202b6:	468a      	mov	sl, r1
 80202b8:	2200      	movs	r2, #0
 80202ba:	6818      	ldr	r0, [r3, #0]
 80202bc:	fa00 f009 	lsl.w	r0, r0, r9
 80202c0:	4310      	orrs	r0, r2
 80202c2:	f84a 0b04 	str.w	r0, [sl], #4
 80202c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80202ca:	459c      	cmp	ip, r3
 80202cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80202d0:	d8f3      	bhi.n	80202ba <__lshift+0x6e>
 80202d2:	ebac 0304 	sub.w	r3, ip, r4
 80202d6:	3b15      	subs	r3, #21
 80202d8:	f023 0303 	bic.w	r3, r3, #3
 80202dc:	3304      	adds	r3, #4
 80202de:	f104 0015 	add.w	r0, r4, #21
 80202e2:	4584      	cmp	ip, r0
 80202e4:	bf38      	it	cc
 80202e6:	2304      	movcc	r3, #4
 80202e8:	50ca      	str	r2, [r1, r3]
 80202ea:	b10a      	cbz	r2, 80202f0 <__lshift+0xa4>
 80202ec:	f108 0602 	add.w	r6, r8, #2
 80202f0:	3e01      	subs	r6, #1
 80202f2:	4638      	mov	r0, r7
 80202f4:	612e      	str	r6, [r5, #16]
 80202f6:	4621      	mov	r1, r4
 80202f8:	f7ff fd90 	bl	801fe1c <_Bfree>
 80202fc:	4628      	mov	r0, r5
 80202fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020302:	f842 0f04 	str.w	r0, [r2, #4]!
 8020306:	3301      	adds	r3, #1
 8020308:	e7c5      	b.n	8020296 <__lshift+0x4a>
 802030a:	3904      	subs	r1, #4
 802030c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020310:	f841 2f04 	str.w	r2, [r1, #4]!
 8020314:	459c      	cmp	ip, r3
 8020316:	d8f9      	bhi.n	802030c <__lshift+0xc0>
 8020318:	e7ea      	b.n	80202f0 <__lshift+0xa4>
 802031a:	bf00      	nop
 802031c:	080257e4 	.word	0x080257e4
 8020320:	080257f5 	.word	0x080257f5

08020324 <__mcmp>:
 8020324:	690a      	ldr	r2, [r1, #16]
 8020326:	4603      	mov	r3, r0
 8020328:	6900      	ldr	r0, [r0, #16]
 802032a:	1a80      	subs	r0, r0, r2
 802032c:	b530      	push	{r4, r5, lr}
 802032e:	d10e      	bne.n	802034e <__mcmp+0x2a>
 8020330:	3314      	adds	r3, #20
 8020332:	3114      	adds	r1, #20
 8020334:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020338:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802033c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020344:	4295      	cmp	r5, r2
 8020346:	d003      	beq.n	8020350 <__mcmp+0x2c>
 8020348:	d205      	bcs.n	8020356 <__mcmp+0x32>
 802034a:	f04f 30ff 	mov.w	r0, #4294967295
 802034e:	bd30      	pop	{r4, r5, pc}
 8020350:	42a3      	cmp	r3, r4
 8020352:	d3f3      	bcc.n	802033c <__mcmp+0x18>
 8020354:	e7fb      	b.n	802034e <__mcmp+0x2a>
 8020356:	2001      	movs	r0, #1
 8020358:	e7f9      	b.n	802034e <__mcmp+0x2a>
	...

0802035c <__mdiff>:
 802035c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020360:	4689      	mov	r9, r1
 8020362:	4606      	mov	r6, r0
 8020364:	4611      	mov	r1, r2
 8020366:	4648      	mov	r0, r9
 8020368:	4614      	mov	r4, r2
 802036a:	f7ff ffdb 	bl	8020324 <__mcmp>
 802036e:	1e05      	subs	r5, r0, #0
 8020370:	d112      	bne.n	8020398 <__mdiff+0x3c>
 8020372:	4629      	mov	r1, r5
 8020374:	4630      	mov	r0, r6
 8020376:	f7ff fd11 	bl	801fd9c <_Balloc>
 802037a:	4602      	mov	r2, r0
 802037c:	b928      	cbnz	r0, 802038a <__mdiff+0x2e>
 802037e:	4b3f      	ldr	r3, [pc, #252]	@ (802047c <__mdiff+0x120>)
 8020380:	f240 2137 	movw	r1, #567	@ 0x237
 8020384:	483e      	ldr	r0, [pc, #248]	@ (8020480 <__mdiff+0x124>)
 8020386:	f7fe fe55 	bl	801f034 <__assert_func>
 802038a:	2301      	movs	r3, #1
 802038c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020390:	4610      	mov	r0, r2
 8020392:	b003      	add	sp, #12
 8020394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020398:	bfbc      	itt	lt
 802039a:	464b      	movlt	r3, r9
 802039c:	46a1      	movlt	r9, r4
 802039e:	4630      	mov	r0, r6
 80203a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80203a4:	bfba      	itte	lt
 80203a6:	461c      	movlt	r4, r3
 80203a8:	2501      	movlt	r5, #1
 80203aa:	2500      	movge	r5, #0
 80203ac:	f7ff fcf6 	bl	801fd9c <_Balloc>
 80203b0:	4602      	mov	r2, r0
 80203b2:	b918      	cbnz	r0, 80203bc <__mdiff+0x60>
 80203b4:	4b31      	ldr	r3, [pc, #196]	@ (802047c <__mdiff+0x120>)
 80203b6:	f240 2145 	movw	r1, #581	@ 0x245
 80203ba:	e7e3      	b.n	8020384 <__mdiff+0x28>
 80203bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80203c0:	6926      	ldr	r6, [r4, #16]
 80203c2:	60c5      	str	r5, [r0, #12]
 80203c4:	f109 0310 	add.w	r3, r9, #16
 80203c8:	f109 0514 	add.w	r5, r9, #20
 80203cc:	f104 0e14 	add.w	lr, r4, #20
 80203d0:	f100 0b14 	add.w	fp, r0, #20
 80203d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80203d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80203dc:	9301      	str	r3, [sp, #4]
 80203de:	46d9      	mov	r9, fp
 80203e0:	f04f 0c00 	mov.w	ip, #0
 80203e4:	9b01      	ldr	r3, [sp, #4]
 80203e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80203ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80203ee:	9301      	str	r3, [sp, #4]
 80203f0:	fa1f f38a 	uxth.w	r3, sl
 80203f4:	4619      	mov	r1, r3
 80203f6:	b283      	uxth	r3, r0
 80203f8:	1acb      	subs	r3, r1, r3
 80203fa:	0c00      	lsrs	r0, r0, #16
 80203fc:	4463      	add	r3, ip
 80203fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020402:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020406:	b29b      	uxth	r3, r3
 8020408:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802040c:	4576      	cmp	r6, lr
 802040e:	f849 3b04 	str.w	r3, [r9], #4
 8020412:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020416:	d8e5      	bhi.n	80203e4 <__mdiff+0x88>
 8020418:	1b33      	subs	r3, r6, r4
 802041a:	3b15      	subs	r3, #21
 802041c:	f023 0303 	bic.w	r3, r3, #3
 8020420:	3415      	adds	r4, #21
 8020422:	3304      	adds	r3, #4
 8020424:	42a6      	cmp	r6, r4
 8020426:	bf38      	it	cc
 8020428:	2304      	movcc	r3, #4
 802042a:	441d      	add	r5, r3
 802042c:	445b      	add	r3, fp
 802042e:	461e      	mov	r6, r3
 8020430:	462c      	mov	r4, r5
 8020432:	4544      	cmp	r4, r8
 8020434:	d30e      	bcc.n	8020454 <__mdiff+0xf8>
 8020436:	f108 0103 	add.w	r1, r8, #3
 802043a:	1b49      	subs	r1, r1, r5
 802043c:	f021 0103 	bic.w	r1, r1, #3
 8020440:	3d03      	subs	r5, #3
 8020442:	45a8      	cmp	r8, r5
 8020444:	bf38      	it	cc
 8020446:	2100      	movcc	r1, #0
 8020448:	440b      	add	r3, r1
 802044a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802044e:	b191      	cbz	r1, 8020476 <__mdiff+0x11a>
 8020450:	6117      	str	r7, [r2, #16]
 8020452:	e79d      	b.n	8020390 <__mdiff+0x34>
 8020454:	f854 1b04 	ldr.w	r1, [r4], #4
 8020458:	46e6      	mov	lr, ip
 802045a:	0c08      	lsrs	r0, r1, #16
 802045c:	fa1c fc81 	uxtah	ip, ip, r1
 8020460:	4471      	add	r1, lr
 8020462:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020466:	b289      	uxth	r1, r1
 8020468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802046c:	f846 1b04 	str.w	r1, [r6], #4
 8020470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020474:	e7dd      	b.n	8020432 <__mdiff+0xd6>
 8020476:	3f01      	subs	r7, #1
 8020478:	e7e7      	b.n	802044a <__mdiff+0xee>
 802047a:	bf00      	nop
 802047c:	080257e4 	.word	0x080257e4
 8020480:	080257f5 	.word	0x080257f5

08020484 <__ulp>:
 8020484:	b082      	sub	sp, #8
 8020486:	ed8d 0b00 	vstr	d0, [sp]
 802048a:	9a01      	ldr	r2, [sp, #4]
 802048c:	4b0f      	ldr	r3, [pc, #60]	@ (80204cc <__ulp+0x48>)
 802048e:	4013      	ands	r3, r2
 8020490:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8020494:	2b00      	cmp	r3, #0
 8020496:	dc08      	bgt.n	80204aa <__ulp+0x26>
 8020498:	425b      	negs	r3, r3
 802049a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802049e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80204a2:	da04      	bge.n	80204ae <__ulp+0x2a>
 80204a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80204a8:	4113      	asrs	r3, r2
 80204aa:	2200      	movs	r2, #0
 80204ac:	e008      	b.n	80204c0 <__ulp+0x3c>
 80204ae:	f1a2 0314 	sub.w	r3, r2, #20
 80204b2:	2b1e      	cmp	r3, #30
 80204b4:	bfda      	itte	le
 80204b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80204ba:	40da      	lsrle	r2, r3
 80204bc:	2201      	movgt	r2, #1
 80204be:	2300      	movs	r3, #0
 80204c0:	4619      	mov	r1, r3
 80204c2:	4610      	mov	r0, r2
 80204c4:	ec41 0b10 	vmov	d0, r0, r1
 80204c8:	b002      	add	sp, #8
 80204ca:	4770      	bx	lr
 80204cc:	7ff00000 	.word	0x7ff00000

080204d0 <__b2d>:
 80204d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204d4:	6906      	ldr	r6, [r0, #16]
 80204d6:	f100 0814 	add.w	r8, r0, #20
 80204da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80204de:	1f37      	subs	r7, r6, #4
 80204e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80204e4:	4610      	mov	r0, r2
 80204e6:	f7ff fd4b 	bl	801ff80 <__hi0bits>
 80204ea:	f1c0 0320 	rsb	r3, r0, #32
 80204ee:	280a      	cmp	r0, #10
 80204f0:	600b      	str	r3, [r1, #0]
 80204f2:	491b      	ldr	r1, [pc, #108]	@ (8020560 <__b2d+0x90>)
 80204f4:	dc15      	bgt.n	8020522 <__b2d+0x52>
 80204f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80204fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80204fe:	45b8      	cmp	r8, r7
 8020500:	ea43 0501 	orr.w	r5, r3, r1
 8020504:	bf34      	ite	cc
 8020506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802050a:	2300      	movcs	r3, #0
 802050c:	3015      	adds	r0, #21
 802050e:	fa02 f000 	lsl.w	r0, r2, r0
 8020512:	fa23 f30c 	lsr.w	r3, r3, ip
 8020516:	4303      	orrs	r3, r0
 8020518:	461c      	mov	r4, r3
 802051a:	ec45 4b10 	vmov	d0, r4, r5
 802051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020522:	45b8      	cmp	r8, r7
 8020524:	bf3a      	itte	cc
 8020526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802052a:	f1a6 0708 	subcc.w	r7, r6, #8
 802052e:	2300      	movcs	r3, #0
 8020530:	380b      	subs	r0, #11
 8020532:	d012      	beq.n	802055a <__b2d+0x8a>
 8020534:	f1c0 0120 	rsb	r1, r0, #32
 8020538:	fa23 f401 	lsr.w	r4, r3, r1
 802053c:	4082      	lsls	r2, r0
 802053e:	4322      	orrs	r2, r4
 8020540:	4547      	cmp	r7, r8
 8020542:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020546:	bf8c      	ite	hi
 8020548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802054c:	2200      	movls	r2, #0
 802054e:	4083      	lsls	r3, r0
 8020550:	40ca      	lsrs	r2, r1
 8020552:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020556:	4313      	orrs	r3, r2
 8020558:	e7de      	b.n	8020518 <__b2d+0x48>
 802055a:	ea42 0501 	orr.w	r5, r2, r1
 802055e:	e7db      	b.n	8020518 <__b2d+0x48>
 8020560:	3ff00000 	.word	0x3ff00000

08020564 <__d2b>:
 8020564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020568:	460f      	mov	r7, r1
 802056a:	2101      	movs	r1, #1
 802056c:	ec59 8b10 	vmov	r8, r9, d0
 8020570:	4616      	mov	r6, r2
 8020572:	f7ff fc13 	bl	801fd9c <_Balloc>
 8020576:	4604      	mov	r4, r0
 8020578:	b930      	cbnz	r0, 8020588 <__d2b+0x24>
 802057a:	4602      	mov	r2, r0
 802057c:	4b23      	ldr	r3, [pc, #140]	@ (802060c <__d2b+0xa8>)
 802057e:	4824      	ldr	r0, [pc, #144]	@ (8020610 <__d2b+0xac>)
 8020580:	f240 310f 	movw	r1, #783	@ 0x30f
 8020584:	f7fe fd56 	bl	801f034 <__assert_func>
 8020588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802058c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020590:	b10d      	cbz	r5, 8020596 <__d2b+0x32>
 8020592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020596:	9301      	str	r3, [sp, #4]
 8020598:	f1b8 0300 	subs.w	r3, r8, #0
 802059c:	d023      	beq.n	80205e6 <__d2b+0x82>
 802059e:	4668      	mov	r0, sp
 80205a0:	9300      	str	r3, [sp, #0]
 80205a2:	f7ff fd0c 	bl	801ffbe <__lo0bits>
 80205a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80205aa:	b1d0      	cbz	r0, 80205e2 <__d2b+0x7e>
 80205ac:	f1c0 0320 	rsb	r3, r0, #32
 80205b0:	fa02 f303 	lsl.w	r3, r2, r3
 80205b4:	430b      	orrs	r3, r1
 80205b6:	40c2      	lsrs	r2, r0
 80205b8:	6163      	str	r3, [r4, #20]
 80205ba:	9201      	str	r2, [sp, #4]
 80205bc:	9b01      	ldr	r3, [sp, #4]
 80205be:	61a3      	str	r3, [r4, #24]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	bf0c      	ite	eq
 80205c4:	2201      	moveq	r2, #1
 80205c6:	2202      	movne	r2, #2
 80205c8:	6122      	str	r2, [r4, #16]
 80205ca:	b1a5      	cbz	r5, 80205f6 <__d2b+0x92>
 80205cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80205d0:	4405      	add	r5, r0
 80205d2:	603d      	str	r5, [r7, #0]
 80205d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80205d8:	6030      	str	r0, [r6, #0]
 80205da:	4620      	mov	r0, r4
 80205dc:	b003      	add	sp, #12
 80205de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205e2:	6161      	str	r1, [r4, #20]
 80205e4:	e7ea      	b.n	80205bc <__d2b+0x58>
 80205e6:	a801      	add	r0, sp, #4
 80205e8:	f7ff fce9 	bl	801ffbe <__lo0bits>
 80205ec:	9b01      	ldr	r3, [sp, #4]
 80205ee:	6163      	str	r3, [r4, #20]
 80205f0:	3020      	adds	r0, #32
 80205f2:	2201      	movs	r2, #1
 80205f4:	e7e8      	b.n	80205c8 <__d2b+0x64>
 80205f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80205fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80205fe:	6038      	str	r0, [r7, #0]
 8020600:	6918      	ldr	r0, [r3, #16]
 8020602:	f7ff fcbd 	bl	801ff80 <__hi0bits>
 8020606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802060a:	e7e5      	b.n	80205d8 <__d2b+0x74>
 802060c:	080257e4 	.word	0x080257e4
 8020610:	080257f5 	.word	0x080257f5

08020614 <__ratio>:
 8020614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020618:	b085      	sub	sp, #20
 802061a:	e9cd 1000 	strd	r1, r0, [sp]
 802061e:	a902      	add	r1, sp, #8
 8020620:	f7ff ff56 	bl	80204d0 <__b2d>
 8020624:	9800      	ldr	r0, [sp, #0]
 8020626:	a903      	add	r1, sp, #12
 8020628:	ec55 4b10 	vmov	r4, r5, d0
 802062c:	f7ff ff50 	bl	80204d0 <__b2d>
 8020630:	9b01      	ldr	r3, [sp, #4]
 8020632:	6919      	ldr	r1, [r3, #16]
 8020634:	9b00      	ldr	r3, [sp, #0]
 8020636:	691b      	ldr	r3, [r3, #16]
 8020638:	1ac9      	subs	r1, r1, r3
 802063a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802063e:	1a9b      	subs	r3, r3, r2
 8020640:	ec5b ab10 	vmov	sl, fp, d0
 8020644:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020648:	2b00      	cmp	r3, #0
 802064a:	bfce      	itee	gt
 802064c:	462a      	movgt	r2, r5
 802064e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020652:	465a      	movle	r2, fp
 8020654:	462f      	mov	r7, r5
 8020656:	46d9      	mov	r9, fp
 8020658:	bfcc      	ite	gt
 802065a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802065e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8020662:	464b      	mov	r3, r9
 8020664:	4652      	mov	r2, sl
 8020666:	4620      	mov	r0, r4
 8020668:	4639      	mov	r1, r7
 802066a:	f7e0 f907 	bl	800087c <__aeabi_ddiv>
 802066e:	ec41 0b10 	vmov	d0, r0, r1
 8020672:	b005      	add	sp, #20
 8020674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020678 <__copybits>:
 8020678:	3901      	subs	r1, #1
 802067a:	b570      	push	{r4, r5, r6, lr}
 802067c:	1149      	asrs	r1, r1, #5
 802067e:	6914      	ldr	r4, [r2, #16]
 8020680:	3101      	adds	r1, #1
 8020682:	f102 0314 	add.w	r3, r2, #20
 8020686:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802068a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802068e:	1f05      	subs	r5, r0, #4
 8020690:	42a3      	cmp	r3, r4
 8020692:	d30c      	bcc.n	80206ae <__copybits+0x36>
 8020694:	1aa3      	subs	r3, r4, r2
 8020696:	3b11      	subs	r3, #17
 8020698:	f023 0303 	bic.w	r3, r3, #3
 802069c:	3211      	adds	r2, #17
 802069e:	42a2      	cmp	r2, r4
 80206a0:	bf88      	it	hi
 80206a2:	2300      	movhi	r3, #0
 80206a4:	4418      	add	r0, r3
 80206a6:	2300      	movs	r3, #0
 80206a8:	4288      	cmp	r0, r1
 80206aa:	d305      	bcc.n	80206b8 <__copybits+0x40>
 80206ac:	bd70      	pop	{r4, r5, r6, pc}
 80206ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80206b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80206b6:	e7eb      	b.n	8020690 <__copybits+0x18>
 80206b8:	f840 3b04 	str.w	r3, [r0], #4
 80206bc:	e7f4      	b.n	80206a8 <__copybits+0x30>

080206be <__any_on>:
 80206be:	f100 0214 	add.w	r2, r0, #20
 80206c2:	6900      	ldr	r0, [r0, #16]
 80206c4:	114b      	asrs	r3, r1, #5
 80206c6:	4298      	cmp	r0, r3
 80206c8:	b510      	push	{r4, lr}
 80206ca:	db11      	blt.n	80206f0 <__any_on+0x32>
 80206cc:	dd0a      	ble.n	80206e4 <__any_on+0x26>
 80206ce:	f011 011f 	ands.w	r1, r1, #31
 80206d2:	d007      	beq.n	80206e4 <__any_on+0x26>
 80206d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80206d8:	fa24 f001 	lsr.w	r0, r4, r1
 80206dc:	fa00 f101 	lsl.w	r1, r0, r1
 80206e0:	428c      	cmp	r4, r1
 80206e2:	d10b      	bne.n	80206fc <__any_on+0x3e>
 80206e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80206e8:	4293      	cmp	r3, r2
 80206ea:	d803      	bhi.n	80206f4 <__any_on+0x36>
 80206ec:	2000      	movs	r0, #0
 80206ee:	bd10      	pop	{r4, pc}
 80206f0:	4603      	mov	r3, r0
 80206f2:	e7f7      	b.n	80206e4 <__any_on+0x26>
 80206f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80206f8:	2900      	cmp	r1, #0
 80206fa:	d0f5      	beq.n	80206e8 <__any_on+0x2a>
 80206fc:	2001      	movs	r0, #1
 80206fe:	e7f6      	b.n	80206ee <__any_on+0x30>

08020700 <sulp>:
 8020700:	b570      	push	{r4, r5, r6, lr}
 8020702:	4604      	mov	r4, r0
 8020704:	460d      	mov	r5, r1
 8020706:	ec45 4b10 	vmov	d0, r4, r5
 802070a:	4616      	mov	r6, r2
 802070c:	f7ff feba 	bl	8020484 <__ulp>
 8020710:	ec51 0b10 	vmov	r0, r1, d0
 8020714:	b17e      	cbz	r6, 8020736 <sulp+0x36>
 8020716:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802071a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802071e:	2b00      	cmp	r3, #0
 8020720:	dd09      	ble.n	8020736 <sulp+0x36>
 8020722:	051b      	lsls	r3, r3, #20
 8020724:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020728:	2400      	movs	r4, #0
 802072a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802072e:	4622      	mov	r2, r4
 8020730:	462b      	mov	r3, r5
 8020732:	f7df ff79 	bl	8000628 <__aeabi_dmul>
 8020736:	ec41 0b10 	vmov	d0, r0, r1
 802073a:	bd70      	pop	{r4, r5, r6, pc}
 802073c:	0000      	movs	r0, r0
	...

08020740 <_strtod_l>:
 8020740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020744:	b09f      	sub	sp, #124	@ 0x7c
 8020746:	460c      	mov	r4, r1
 8020748:	9217      	str	r2, [sp, #92]	@ 0x5c
 802074a:	2200      	movs	r2, #0
 802074c:	921a      	str	r2, [sp, #104]	@ 0x68
 802074e:	9005      	str	r0, [sp, #20]
 8020750:	f04f 0a00 	mov.w	sl, #0
 8020754:	f04f 0b00 	mov.w	fp, #0
 8020758:	460a      	mov	r2, r1
 802075a:	9219      	str	r2, [sp, #100]	@ 0x64
 802075c:	7811      	ldrb	r1, [r2, #0]
 802075e:	292b      	cmp	r1, #43	@ 0x2b
 8020760:	d04a      	beq.n	80207f8 <_strtod_l+0xb8>
 8020762:	d838      	bhi.n	80207d6 <_strtod_l+0x96>
 8020764:	290d      	cmp	r1, #13
 8020766:	d832      	bhi.n	80207ce <_strtod_l+0x8e>
 8020768:	2908      	cmp	r1, #8
 802076a:	d832      	bhi.n	80207d2 <_strtod_l+0x92>
 802076c:	2900      	cmp	r1, #0
 802076e:	d03b      	beq.n	80207e8 <_strtod_l+0xa8>
 8020770:	2200      	movs	r2, #0
 8020772:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020774:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8020776:	782a      	ldrb	r2, [r5, #0]
 8020778:	2a30      	cmp	r2, #48	@ 0x30
 802077a:	f040 80b3 	bne.w	80208e4 <_strtod_l+0x1a4>
 802077e:	786a      	ldrb	r2, [r5, #1]
 8020780:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020784:	2a58      	cmp	r2, #88	@ 0x58
 8020786:	d16e      	bne.n	8020866 <_strtod_l+0x126>
 8020788:	9302      	str	r3, [sp, #8]
 802078a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802078c:	9301      	str	r3, [sp, #4]
 802078e:	ab1a      	add	r3, sp, #104	@ 0x68
 8020790:	9300      	str	r3, [sp, #0]
 8020792:	4a8e      	ldr	r2, [pc, #568]	@ (80209cc <_strtod_l+0x28c>)
 8020794:	9805      	ldr	r0, [sp, #20]
 8020796:	ab1b      	add	r3, sp, #108	@ 0x6c
 8020798:	a919      	add	r1, sp, #100	@ 0x64
 802079a:	f001 fa33 	bl	8021c04 <__gethex>
 802079e:	f010 060f 	ands.w	r6, r0, #15
 80207a2:	4604      	mov	r4, r0
 80207a4:	d005      	beq.n	80207b2 <_strtod_l+0x72>
 80207a6:	2e06      	cmp	r6, #6
 80207a8:	d128      	bne.n	80207fc <_strtod_l+0xbc>
 80207aa:	3501      	adds	r5, #1
 80207ac:	2300      	movs	r3, #0
 80207ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80207b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80207b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	f040 858e 	bne.w	80212d6 <_strtod_l+0xb96>
 80207ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207bc:	b1cb      	cbz	r3, 80207f2 <_strtod_l+0xb2>
 80207be:	4652      	mov	r2, sl
 80207c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80207c4:	ec43 2b10 	vmov	d0, r2, r3
 80207c8:	b01f      	add	sp, #124	@ 0x7c
 80207ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ce:	2920      	cmp	r1, #32
 80207d0:	d1ce      	bne.n	8020770 <_strtod_l+0x30>
 80207d2:	3201      	adds	r2, #1
 80207d4:	e7c1      	b.n	802075a <_strtod_l+0x1a>
 80207d6:	292d      	cmp	r1, #45	@ 0x2d
 80207d8:	d1ca      	bne.n	8020770 <_strtod_l+0x30>
 80207da:	2101      	movs	r1, #1
 80207dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207de:	1c51      	adds	r1, r2, #1
 80207e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80207e2:	7852      	ldrb	r2, [r2, #1]
 80207e4:	2a00      	cmp	r2, #0
 80207e6:	d1c5      	bne.n	8020774 <_strtod_l+0x34>
 80207e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80207ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	f040 8570 	bne.w	80212d2 <_strtod_l+0xb92>
 80207f2:	4652      	mov	r2, sl
 80207f4:	465b      	mov	r3, fp
 80207f6:	e7e5      	b.n	80207c4 <_strtod_l+0x84>
 80207f8:	2100      	movs	r1, #0
 80207fa:	e7ef      	b.n	80207dc <_strtod_l+0x9c>
 80207fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80207fe:	b13a      	cbz	r2, 8020810 <_strtod_l+0xd0>
 8020800:	2135      	movs	r1, #53	@ 0x35
 8020802:	a81c      	add	r0, sp, #112	@ 0x70
 8020804:	f7ff ff38 	bl	8020678 <__copybits>
 8020808:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802080a:	9805      	ldr	r0, [sp, #20]
 802080c:	f7ff fb06 	bl	801fe1c <_Bfree>
 8020810:	3e01      	subs	r6, #1
 8020812:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020814:	2e04      	cmp	r6, #4
 8020816:	d806      	bhi.n	8020826 <_strtod_l+0xe6>
 8020818:	e8df f006 	tbb	[pc, r6]
 802081c:	201d0314 	.word	0x201d0314
 8020820:	14          	.byte	0x14
 8020821:	00          	.byte	0x00
 8020822:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8020826:	05e1      	lsls	r1, r4, #23
 8020828:	bf48      	it	mi
 802082a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802082e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020832:	0d1b      	lsrs	r3, r3, #20
 8020834:	051b      	lsls	r3, r3, #20
 8020836:	2b00      	cmp	r3, #0
 8020838:	d1bb      	bne.n	80207b2 <_strtod_l+0x72>
 802083a:	f7fe fbb1 	bl	801efa0 <__errno>
 802083e:	2322      	movs	r3, #34	@ 0x22
 8020840:	6003      	str	r3, [r0, #0]
 8020842:	e7b6      	b.n	80207b2 <_strtod_l+0x72>
 8020844:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020848:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802084c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020850:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8020854:	e7e7      	b.n	8020826 <_strtod_l+0xe6>
 8020856:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80209d4 <_strtod_l+0x294>
 802085a:	e7e4      	b.n	8020826 <_strtod_l+0xe6>
 802085c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020860:	f04f 3aff 	mov.w	sl, #4294967295
 8020864:	e7df      	b.n	8020826 <_strtod_l+0xe6>
 8020866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020868:	1c5a      	adds	r2, r3, #1
 802086a:	9219      	str	r2, [sp, #100]	@ 0x64
 802086c:	785b      	ldrb	r3, [r3, #1]
 802086e:	2b30      	cmp	r3, #48	@ 0x30
 8020870:	d0f9      	beq.n	8020866 <_strtod_l+0x126>
 8020872:	2b00      	cmp	r3, #0
 8020874:	d09d      	beq.n	80207b2 <_strtod_l+0x72>
 8020876:	2301      	movs	r3, #1
 8020878:	9309      	str	r3, [sp, #36]	@ 0x24
 802087a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802087c:	930c      	str	r3, [sp, #48]	@ 0x30
 802087e:	2300      	movs	r3, #0
 8020880:	9308      	str	r3, [sp, #32]
 8020882:	930a      	str	r3, [sp, #40]	@ 0x28
 8020884:	461f      	mov	r7, r3
 8020886:	220a      	movs	r2, #10
 8020888:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802088a:	7805      	ldrb	r5, [r0, #0]
 802088c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020890:	b2d9      	uxtb	r1, r3
 8020892:	2909      	cmp	r1, #9
 8020894:	d928      	bls.n	80208e8 <_strtod_l+0x1a8>
 8020896:	494e      	ldr	r1, [pc, #312]	@ (80209d0 <_strtod_l+0x290>)
 8020898:	2201      	movs	r2, #1
 802089a:	f001 f8f5 	bl	8021a88 <strncmp>
 802089e:	2800      	cmp	r0, #0
 80208a0:	d032      	beq.n	8020908 <_strtod_l+0x1c8>
 80208a2:	2000      	movs	r0, #0
 80208a4:	462a      	mov	r2, r5
 80208a6:	4681      	mov	r9, r0
 80208a8:	463d      	mov	r5, r7
 80208aa:	4603      	mov	r3, r0
 80208ac:	2a65      	cmp	r2, #101	@ 0x65
 80208ae:	d001      	beq.n	80208b4 <_strtod_l+0x174>
 80208b0:	2a45      	cmp	r2, #69	@ 0x45
 80208b2:	d114      	bne.n	80208de <_strtod_l+0x19e>
 80208b4:	b91d      	cbnz	r5, 80208be <_strtod_l+0x17e>
 80208b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208b8:	4302      	orrs	r2, r0
 80208ba:	d095      	beq.n	80207e8 <_strtod_l+0xa8>
 80208bc:	2500      	movs	r5, #0
 80208be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80208c0:	1c62      	adds	r2, r4, #1
 80208c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80208c4:	7862      	ldrb	r2, [r4, #1]
 80208c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80208c8:	d077      	beq.n	80209ba <_strtod_l+0x27a>
 80208ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80208cc:	d07b      	beq.n	80209c6 <_strtod_l+0x286>
 80208ce:	f04f 0c00 	mov.w	ip, #0
 80208d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80208d6:	2909      	cmp	r1, #9
 80208d8:	f240 8082 	bls.w	80209e0 <_strtod_l+0x2a0>
 80208dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80208de:	f04f 0800 	mov.w	r8, #0
 80208e2:	e0a2      	b.n	8020a2a <_strtod_l+0x2ea>
 80208e4:	2300      	movs	r3, #0
 80208e6:	e7c7      	b.n	8020878 <_strtod_l+0x138>
 80208e8:	2f08      	cmp	r7, #8
 80208ea:	bfd5      	itete	le
 80208ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80208ee:	9908      	ldrgt	r1, [sp, #32]
 80208f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80208f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80208f8:	f100 0001 	add.w	r0, r0, #1
 80208fc:	bfd4      	ite	le
 80208fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020900:	9308      	strgt	r3, [sp, #32]
 8020902:	3701      	adds	r7, #1
 8020904:	9019      	str	r0, [sp, #100]	@ 0x64
 8020906:	e7bf      	b.n	8020888 <_strtod_l+0x148>
 8020908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802090a:	1c5a      	adds	r2, r3, #1
 802090c:	9219      	str	r2, [sp, #100]	@ 0x64
 802090e:	785a      	ldrb	r2, [r3, #1]
 8020910:	b37f      	cbz	r7, 8020972 <_strtod_l+0x232>
 8020912:	4681      	mov	r9, r0
 8020914:	463d      	mov	r5, r7
 8020916:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802091a:	2b09      	cmp	r3, #9
 802091c:	d912      	bls.n	8020944 <_strtod_l+0x204>
 802091e:	2301      	movs	r3, #1
 8020920:	e7c4      	b.n	80208ac <_strtod_l+0x16c>
 8020922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020924:	1c5a      	adds	r2, r3, #1
 8020926:	9219      	str	r2, [sp, #100]	@ 0x64
 8020928:	785a      	ldrb	r2, [r3, #1]
 802092a:	3001      	adds	r0, #1
 802092c:	2a30      	cmp	r2, #48	@ 0x30
 802092e:	d0f8      	beq.n	8020922 <_strtod_l+0x1e2>
 8020930:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8020934:	2b08      	cmp	r3, #8
 8020936:	f200 84d3 	bhi.w	80212e0 <_strtod_l+0xba0>
 802093a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802093c:	930c      	str	r3, [sp, #48]	@ 0x30
 802093e:	4681      	mov	r9, r0
 8020940:	2000      	movs	r0, #0
 8020942:	4605      	mov	r5, r0
 8020944:	3a30      	subs	r2, #48	@ 0x30
 8020946:	f100 0301 	add.w	r3, r0, #1
 802094a:	d02a      	beq.n	80209a2 <_strtod_l+0x262>
 802094c:	4499      	add	r9, r3
 802094e:	eb00 0c05 	add.w	ip, r0, r5
 8020952:	462b      	mov	r3, r5
 8020954:	210a      	movs	r1, #10
 8020956:	4563      	cmp	r3, ip
 8020958:	d10d      	bne.n	8020976 <_strtod_l+0x236>
 802095a:	1c69      	adds	r1, r5, #1
 802095c:	4401      	add	r1, r0
 802095e:	4428      	add	r0, r5
 8020960:	2808      	cmp	r0, #8
 8020962:	dc16      	bgt.n	8020992 <_strtod_l+0x252>
 8020964:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020966:	230a      	movs	r3, #10
 8020968:	fb03 2300 	mla	r3, r3, r0, r2
 802096c:	930a      	str	r3, [sp, #40]	@ 0x28
 802096e:	2300      	movs	r3, #0
 8020970:	e018      	b.n	80209a4 <_strtod_l+0x264>
 8020972:	4638      	mov	r0, r7
 8020974:	e7da      	b.n	802092c <_strtod_l+0x1ec>
 8020976:	2b08      	cmp	r3, #8
 8020978:	f103 0301 	add.w	r3, r3, #1
 802097c:	dc03      	bgt.n	8020986 <_strtod_l+0x246>
 802097e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020980:	434e      	muls	r6, r1
 8020982:	960a      	str	r6, [sp, #40]	@ 0x28
 8020984:	e7e7      	b.n	8020956 <_strtod_l+0x216>
 8020986:	2b10      	cmp	r3, #16
 8020988:	bfde      	ittt	le
 802098a:	9e08      	ldrle	r6, [sp, #32]
 802098c:	434e      	mulle	r6, r1
 802098e:	9608      	strle	r6, [sp, #32]
 8020990:	e7e1      	b.n	8020956 <_strtod_l+0x216>
 8020992:	280f      	cmp	r0, #15
 8020994:	dceb      	bgt.n	802096e <_strtod_l+0x22e>
 8020996:	9808      	ldr	r0, [sp, #32]
 8020998:	230a      	movs	r3, #10
 802099a:	fb03 2300 	mla	r3, r3, r0, r2
 802099e:	9308      	str	r3, [sp, #32]
 80209a0:	e7e5      	b.n	802096e <_strtod_l+0x22e>
 80209a2:	4629      	mov	r1, r5
 80209a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209a6:	1c50      	adds	r0, r2, #1
 80209a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80209aa:	7852      	ldrb	r2, [r2, #1]
 80209ac:	4618      	mov	r0, r3
 80209ae:	460d      	mov	r5, r1
 80209b0:	e7b1      	b.n	8020916 <_strtod_l+0x1d6>
 80209b2:	f04f 0900 	mov.w	r9, #0
 80209b6:	2301      	movs	r3, #1
 80209b8:	e77d      	b.n	80208b6 <_strtod_l+0x176>
 80209ba:	f04f 0c00 	mov.w	ip, #0
 80209be:	1ca2      	adds	r2, r4, #2
 80209c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80209c2:	78a2      	ldrb	r2, [r4, #2]
 80209c4:	e785      	b.n	80208d2 <_strtod_l+0x192>
 80209c6:	f04f 0c01 	mov.w	ip, #1
 80209ca:	e7f8      	b.n	80209be <_strtod_l+0x27e>
 80209cc:	08025968 	.word	0x08025968
 80209d0:	08025950 	.word	0x08025950
 80209d4:	7ff00000 	.word	0x7ff00000
 80209d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209da:	1c51      	adds	r1, r2, #1
 80209dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80209de:	7852      	ldrb	r2, [r2, #1]
 80209e0:	2a30      	cmp	r2, #48	@ 0x30
 80209e2:	d0f9      	beq.n	80209d8 <_strtod_l+0x298>
 80209e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80209e8:	2908      	cmp	r1, #8
 80209ea:	f63f af78 	bhi.w	80208de <_strtod_l+0x19e>
 80209ee:	3a30      	subs	r2, #48	@ 0x30
 80209f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80209f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80209f6:	f04f 080a 	mov.w	r8, #10
 80209fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209fc:	1c56      	adds	r6, r2, #1
 80209fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8020a00:	7852      	ldrb	r2, [r2, #1]
 8020a02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020a06:	f1be 0f09 	cmp.w	lr, #9
 8020a0a:	d939      	bls.n	8020a80 <_strtod_l+0x340>
 8020a0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020a0e:	1a76      	subs	r6, r6, r1
 8020a10:	2e08      	cmp	r6, #8
 8020a12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8020a16:	dc03      	bgt.n	8020a20 <_strtod_l+0x2e0>
 8020a18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020a1a:	4588      	cmp	r8, r1
 8020a1c:	bfa8      	it	ge
 8020a1e:	4688      	movge	r8, r1
 8020a20:	f1bc 0f00 	cmp.w	ip, #0
 8020a24:	d001      	beq.n	8020a2a <_strtod_l+0x2ea>
 8020a26:	f1c8 0800 	rsb	r8, r8, #0
 8020a2a:	2d00      	cmp	r5, #0
 8020a2c:	d14e      	bne.n	8020acc <_strtod_l+0x38c>
 8020a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020a30:	4308      	orrs	r0, r1
 8020a32:	f47f aebe 	bne.w	80207b2 <_strtod_l+0x72>
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	f47f aed6 	bne.w	80207e8 <_strtod_l+0xa8>
 8020a3c:	2a69      	cmp	r2, #105	@ 0x69
 8020a3e:	d028      	beq.n	8020a92 <_strtod_l+0x352>
 8020a40:	dc25      	bgt.n	8020a8e <_strtod_l+0x34e>
 8020a42:	2a49      	cmp	r2, #73	@ 0x49
 8020a44:	d025      	beq.n	8020a92 <_strtod_l+0x352>
 8020a46:	2a4e      	cmp	r2, #78	@ 0x4e
 8020a48:	f47f aece 	bne.w	80207e8 <_strtod_l+0xa8>
 8020a4c:	499b      	ldr	r1, [pc, #620]	@ (8020cbc <_strtod_l+0x57c>)
 8020a4e:	a819      	add	r0, sp, #100	@ 0x64
 8020a50:	f001 fafa 	bl	8022048 <__match>
 8020a54:	2800      	cmp	r0, #0
 8020a56:	f43f aec7 	beq.w	80207e8 <_strtod_l+0xa8>
 8020a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a5c:	781b      	ldrb	r3, [r3, #0]
 8020a5e:	2b28      	cmp	r3, #40	@ 0x28
 8020a60:	d12e      	bne.n	8020ac0 <_strtod_l+0x380>
 8020a62:	4997      	ldr	r1, [pc, #604]	@ (8020cc0 <_strtod_l+0x580>)
 8020a64:	aa1c      	add	r2, sp, #112	@ 0x70
 8020a66:	a819      	add	r0, sp, #100	@ 0x64
 8020a68:	f001 fb02 	bl	8022070 <__hexnan>
 8020a6c:	2805      	cmp	r0, #5
 8020a6e:	d127      	bne.n	8020ac0 <_strtod_l+0x380>
 8020a70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020a72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8020a76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8020a7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8020a7e:	e698      	b.n	80207b2 <_strtod_l+0x72>
 8020a80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020a82:	fb08 2101 	mla	r1, r8, r1, r2
 8020a86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020a8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8020a8c:	e7b5      	b.n	80209fa <_strtod_l+0x2ba>
 8020a8e:	2a6e      	cmp	r2, #110	@ 0x6e
 8020a90:	e7da      	b.n	8020a48 <_strtod_l+0x308>
 8020a92:	498c      	ldr	r1, [pc, #560]	@ (8020cc4 <_strtod_l+0x584>)
 8020a94:	a819      	add	r0, sp, #100	@ 0x64
 8020a96:	f001 fad7 	bl	8022048 <__match>
 8020a9a:	2800      	cmp	r0, #0
 8020a9c:	f43f aea4 	beq.w	80207e8 <_strtod_l+0xa8>
 8020aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020aa2:	4989      	ldr	r1, [pc, #548]	@ (8020cc8 <_strtod_l+0x588>)
 8020aa4:	3b01      	subs	r3, #1
 8020aa6:	a819      	add	r0, sp, #100	@ 0x64
 8020aa8:	9319      	str	r3, [sp, #100]	@ 0x64
 8020aaa:	f001 facd 	bl	8022048 <__match>
 8020aae:	b910      	cbnz	r0, 8020ab6 <_strtod_l+0x376>
 8020ab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020ab2:	3301      	adds	r3, #1
 8020ab4:	9319      	str	r3, [sp, #100]	@ 0x64
 8020ab6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020cd8 <_strtod_l+0x598>
 8020aba:	f04f 0a00 	mov.w	sl, #0
 8020abe:	e678      	b.n	80207b2 <_strtod_l+0x72>
 8020ac0:	4882      	ldr	r0, [pc, #520]	@ (8020ccc <_strtod_l+0x58c>)
 8020ac2:	f001 f815 	bl	8021af0 <nan>
 8020ac6:	ec5b ab10 	vmov	sl, fp, d0
 8020aca:	e672      	b.n	80207b2 <_strtod_l+0x72>
 8020acc:	eba8 0309 	sub.w	r3, r8, r9
 8020ad0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ad4:	2f00      	cmp	r7, #0
 8020ad6:	bf08      	it	eq
 8020ad8:	462f      	moveq	r7, r5
 8020ada:	2d10      	cmp	r5, #16
 8020adc:	462c      	mov	r4, r5
 8020ade:	bfa8      	it	ge
 8020ae0:	2410      	movge	r4, #16
 8020ae2:	f7df fd27 	bl	8000534 <__aeabi_ui2d>
 8020ae6:	2d09      	cmp	r5, #9
 8020ae8:	4682      	mov	sl, r0
 8020aea:	468b      	mov	fp, r1
 8020aec:	dc13      	bgt.n	8020b16 <_strtod_l+0x3d6>
 8020aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	f43f ae5e 	beq.w	80207b2 <_strtod_l+0x72>
 8020af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020af8:	dd78      	ble.n	8020bec <_strtod_l+0x4ac>
 8020afa:	2b16      	cmp	r3, #22
 8020afc:	dc5f      	bgt.n	8020bbe <_strtod_l+0x47e>
 8020afe:	4974      	ldr	r1, [pc, #464]	@ (8020cd0 <_strtod_l+0x590>)
 8020b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b08:	4652      	mov	r2, sl
 8020b0a:	465b      	mov	r3, fp
 8020b0c:	f7df fd8c 	bl	8000628 <__aeabi_dmul>
 8020b10:	4682      	mov	sl, r0
 8020b12:	468b      	mov	fp, r1
 8020b14:	e64d      	b.n	80207b2 <_strtod_l+0x72>
 8020b16:	4b6e      	ldr	r3, [pc, #440]	@ (8020cd0 <_strtod_l+0x590>)
 8020b18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020b1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020b20:	f7df fd82 	bl	8000628 <__aeabi_dmul>
 8020b24:	4682      	mov	sl, r0
 8020b26:	9808      	ldr	r0, [sp, #32]
 8020b28:	468b      	mov	fp, r1
 8020b2a:	f7df fd03 	bl	8000534 <__aeabi_ui2d>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	460b      	mov	r3, r1
 8020b32:	4650      	mov	r0, sl
 8020b34:	4659      	mov	r1, fp
 8020b36:	f7df fbc1 	bl	80002bc <__adddf3>
 8020b3a:	2d0f      	cmp	r5, #15
 8020b3c:	4682      	mov	sl, r0
 8020b3e:	468b      	mov	fp, r1
 8020b40:	ddd5      	ble.n	8020aee <_strtod_l+0x3ae>
 8020b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b44:	1b2c      	subs	r4, r5, r4
 8020b46:	441c      	add	r4, r3
 8020b48:	2c00      	cmp	r4, #0
 8020b4a:	f340 8096 	ble.w	8020c7a <_strtod_l+0x53a>
 8020b4e:	f014 030f 	ands.w	r3, r4, #15
 8020b52:	d00a      	beq.n	8020b6a <_strtod_l+0x42a>
 8020b54:	495e      	ldr	r1, [pc, #376]	@ (8020cd0 <_strtod_l+0x590>)
 8020b56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020b5a:	4652      	mov	r2, sl
 8020b5c:	465b      	mov	r3, fp
 8020b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b62:	f7df fd61 	bl	8000628 <__aeabi_dmul>
 8020b66:	4682      	mov	sl, r0
 8020b68:	468b      	mov	fp, r1
 8020b6a:	f034 040f 	bics.w	r4, r4, #15
 8020b6e:	d073      	beq.n	8020c58 <_strtod_l+0x518>
 8020b70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8020b74:	dd48      	ble.n	8020c08 <_strtod_l+0x4c8>
 8020b76:	2400      	movs	r4, #0
 8020b78:	46a0      	mov	r8, r4
 8020b7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8020b7c:	46a1      	mov	r9, r4
 8020b7e:	9a05      	ldr	r2, [sp, #20]
 8020b80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020cd8 <_strtod_l+0x598>
 8020b84:	2322      	movs	r3, #34	@ 0x22
 8020b86:	6013      	str	r3, [r2, #0]
 8020b88:	f04f 0a00 	mov.w	sl, #0
 8020b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	f43f ae0f 	beq.w	80207b2 <_strtod_l+0x72>
 8020b94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020b96:	9805      	ldr	r0, [sp, #20]
 8020b98:	f7ff f940 	bl	801fe1c <_Bfree>
 8020b9c:	9805      	ldr	r0, [sp, #20]
 8020b9e:	4649      	mov	r1, r9
 8020ba0:	f7ff f93c 	bl	801fe1c <_Bfree>
 8020ba4:	9805      	ldr	r0, [sp, #20]
 8020ba6:	4641      	mov	r1, r8
 8020ba8:	f7ff f938 	bl	801fe1c <_Bfree>
 8020bac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020bae:	9805      	ldr	r0, [sp, #20]
 8020bb0:	f7ff f934 	bl	801fe1c <_Bfree>
 8020bb4:	9805      	ldr	r0, [sp, #20]
 8020bb6:	4621      	mov	r1, r4
 8020bb8:	f7ff f930 	bl	801fe1c <_Bfree>
 8020bbc:	e5f9      	b.n	80207b2 <_strtod_l+0x72>
 8020bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020bc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020bc4:	4293      	cmp	r3, r2
 8020bc6:	dbbc      	blt.n	8020b42 <_strtod_l+0x402>
 8020bc8:	4c41      	ldr	r4, [pc, #260]	@ (8020cd0 <_strtod_l+0x590>)
 8020bca:	f1c5 050f 	rsb	r5, r5, #15
 8020bce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020bd2:	4652      	mov	r2, sl
 8020bd4:	465b      	mov	r3, fp
 8020bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020bda:	f7df fd25 	bl	8000628 <__aeabi_dmul>
 8020bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020be0:	1b5d      	subs	r5, r3, r5
 8020be2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020be6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020bea:	e78f      	b.n	8020b0c <_strtod_l+0x3cc>
 8020bec:	3316      	adds	r3, #22
 8020bee:	dba8      	blt.n	8020b42 <_strtod_l+0x402>
 8020bf0:	4b37      	ldr	r3, [pc, #220]	@ (8020cd0 <_strtod_l+0x590>)
 8020bf2:	eba9 0808 	sub.w	r8, r9, r8
 8020bf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020bfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020bfe:	4650      	mov	r0, sl
 8020c00:	4659      	mov	r1, fp
 8020c02:	f7df fe3b 	bl	800087c <__aeabi_ddiv>
 8020c06:	e783      	b.n	8020b10 <_strtod_l+0x3d0>
 8020c08:	4b32      	ldr	r3, [pc, #200]	@ (8020cd4 <_strtod_l+0x594>)
 8020c0a:	9308      	str	r3, [sp, #32]
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	1124      	asrs	r4, r4, #4
 8020c10:	4650      	mov	r0, sl
 8020c12:	4659      	mov	r1, fp
 8020c14:	461e      	mov	r6, r3
 8020c16:	2c01      	cmp	r4, #1
 8020c18:	dc21      	bgt.n	8020c5e <_strtod_l+0x51e>
 8020c1a:	b10b      	cbz	r3, 8020c20 <_strtod_l+0x4e0>
 8020c1c:	4682      	mov	sl, r0
 8020c1e:	468b      	mov	fp, r1
 8020c20:	492c      	ldr	r1, [pc, #176]	@ (8020cd4 <_strtod_l+0x594>)
 8020c22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020c26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020c2a:	4652      	mov	r2, sl
 8020c2c:	465b      	mov	r3, fp
 8020c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020c32:	f7df fcf9 	bl	8000628 <__aeabi_dmul>
 8020c36:	4b28      	ldr	r3, [pc, #160]	@ (8020cd8 <_strtod_l+0x598>)
 8020c38:	460a      	mov	r2, r1
 8020c3a:	400b      	ands	r3, r1
 8020c3c:	4927      	ldr	r1, [pc, #156]	@ (8020cdc <_strtod_l+0x59c>)
 8020c3e:	428b      	cmp	r3, r1
 8020c40:	4682      	mov	sl, r0
 8020c42:	d898      	bhi.n	8020b76 <_strtod_l+0x436>
 8020c44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020c48:	428b      	cmp	r3, r1
 8020c4a:	bf86      	itte	hi
 8020c4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020ce0 <_strtod_l+0x5a0>
 8020c50:	f04f 3aff 	movhi.w	sl, #4294967295
 8020c54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020c58:	2300      	movs	r3, #0
 8020c5a:	9308      	str	r3, [sp, #32]
 8020c5c:	e07a      	b.n	8020d54 <_strtod_l+0x614>
 8020c5e:	07e2      	lsls	r2, r4, #31
 8020c60:	d505      	bpl.n	8020c6e <_strtod_l+0x52e>
 8020c62:	9b08      	ldr	r3, [sp, #32]
 8020c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c68:	f7df fcde 	bl	8000628 <__aeabi_dmul>
 8020c6c:	2301      	movs	r3, #1
 8020c6e:	9a08      	ldr	r2, [sp, #32]
 8020c70:	3208      	adds	r2, #8
 8020c72:	3601      	adds	r6, #1
 8020c74:	1064      	asrs	r4, r4, #1
 8020c76:	9208      	str	r2, [sp, #32]
 8020c78:	e7cd      	b.n	8020c16 <_strtod_l+0x4d6>
 8020c7a:	d0ed      	beq.n	8020c58 <_strtod_l+0x518>
 8020c7c:	4264      	negs	r4, r4
 8020c7e:	f014 020f 	ands.w	r2, r4, #15
 8020c82:	d00a      	beq.n	8020c9a <_strtod_l+0x55a>
 8020c84:	4b12      	ldr	r3, [pc, #72]	@ (8020cd0 <_strtod_l+0x590>)
 8020c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020c8a:	4650      	mov	r0, sl
 8020c8c:	4659      	mov	r1, fp
 8020c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c92:	f7df fdf3 	bl	800087c <__aeabi_ddiv>
 8020c96:	4682      	mov	sl, r0
 8020c98:	468b      	mov	fp, r1
 8020c9a:	1124      	asrs	r4, r4, #4
 8020c9c:	d0dc      	beq.n	8020c58 <_strtod_l+0x518>
 8020c9e:	2c1f      	cmp	r4, #31
 8020ca0:	dd20      	ble.n	8020ce4 <_strtod_l+0x5a4>
 8020ca2:	2400      	movs	r4, #0
 8020ca4:	46a0      	mov	r8, r4
 8020ca6:	940a      	str	r4, [sp, #40]	@ 0x28
 8020ca8:	46a1      	mov	r9, r4
 8020caa:	9a05      	ldr	r2, [sp, #20]
 8020cac:	2322      	movs	r3, #34	@ 0x22
 8020cae:	f04f 0a00 	mov.w	sl, #0
 8020cb2:	f04f 0b00 	mov.w	fp, #0
 8020cb6:	6013      	str	r3, [r2, #0]
 8020cb8:	e768      	b.n	8020b8c <_strtod_l+0x44c>
 8020cba:	bf00      	nop
 8020cbc:	080256a6 	.word	0x080256a6
 8020cc0:	08025954 	.word	0x08025954
 8020cc4:	0802569e 	.word	0x0802569e
 8020cc8:	08025782 	.word	0x08025782
 8020ccc:	0802577e 	.word	0x0802577e
 8020cd0:	08025888 	.word	0x08025888
 8020cd4:	08025860 	.word	0x08025860
 8020cd8:	7ff00000 	.word	0x7ff00000
 8020cdc:	7ca00000 	.word	0x7ca00000
 8020ce0:	7fefffff 	.word	0x7fefffff
 8020ce4:	f014 0310 	ands.w	r3, r4, #16
 8020ce8:	bf18      	it	ne
 8020cea:	236a      	movne	r3, #106	@ 0x6a
 8020cec:	4ea9      	ldr	r6, [pc, #676]	@ (8020f94 <_strtod_l+0x854>)
 8020cee:	9308      	str	r3, [sp, #32]
 8020cf0:	4650      	mov	r0, sl
 8020cf2:	4659      	mov	r1, fp
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	07e2      	lsls	r2, r4, #31
 8020cf8:	d504      	bpl.n	8020d04 <_strtod_l+0x5c4>
 8020cfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020cfe:	f7df fc93 	bl	8000628 <__aeabi_dmul>
 8020d02:	2301      	movs	r3, #1
 8020d04:	1064      	asrs	r4, r4, #1
 8020d06:	f106 0608 	add.w	r6, r6, #8
 8020d0a:	d1f4      	bne.n	8020cf6 <_strtod_l+0x5b6>
 8020d0c:	b10b      	cbz	r3, 8020d12 <_strtod_l+0x5d2>
 8020d0e:	4682      	mov	sl, r0
 8020d10:	468b      	mov	fp, r1
 8020d12:	9b08      	ldr	r3, [sp, #32]
 8020d14:	b1b3      	cbz	r3, 8020d44 <_strtod_l+0x604>
 8020d16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020d1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	4659      	mov	r1, fp
 8020d22:	dd0f      	ble.n	8020d44 <_strtod_l+0x604>
 8020d24:	2b1f      	cmp	r3, #31
 8020d26:	dd55      	ble.n	8020dd4 <_strtod_l+0x694>
 8020d28:	2b34      	cmp	r3, #52	@ 0x34
 8020d2a:	bfde      	ittt	le
 8020d2c:	f04f 33ff 	movle.w	r3, #4294967295
 8020d30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020d34:	4093      	lslle	r3, r2
 8020d36:	f04f 0a00 	mov.w	sl, #0
 8020d3a:	bfcc      	ite	gt
 8020d3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020d40:	ea03 0b01 	andle.w	fp, r3, r1
 8020d44:	2200      	movs	r2, #0
 8020d46:	2300      	movs	r3, #0
 8020d48:	4650      	mov	r0, sl
 8020d4a:	4659      	mov	r1, fp
 8020d4c:	f7df fed4 	bl	8000af8 <__aeabi_dcmpeq>
 8020d50:	2800      	cmp	r0, #0
 8020d52:	d1a6      	bne.n	8020ca2 <_strtod_l+0x562>
 8020d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d56:	9300      	str	r3, [sp, #0]
 8020d58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020d5a:	9805      	ldr	r0, [sp, #20]
 8020d5c:	462b      	mov	r3, r5
 8020d5e:	463a      	mov	r2, r7
 8020d60:	f7ff f8c4 	bl	801feec <__s2b>
 8020d64:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d66:	2800      	cmp	r0, #0
 8020d68:	f43f af05 	beq.w	8020b76 <_strtod_l+0x436>
 8020d6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d6e:	2a00      	cmp	r2, #0
 8020d70:	eba9 0308 	sub.w	r3, r9, r8
 8020d74:	bfa8      	it	ge
 8020d76:	2300      	movge	r3, #0
 8020d78:	9312      	str	r3, [sp, #72]	@ 0x48
 8020d7a:	2400      	movs	r4, #0
 8020d7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020d80:	9316      	str	r3, [sp, #88]	@ 0x58
 8020d82:	46a0      	mov	r8, r4
 8020d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d86:	9805      	ldr	r0, [sp, #20]
 8020d88:	6859      	ldr	r1, [r3, #4]
 8020d8a:	f7ff f807 	bl	801fd9c <_Balloc>
 8020d8e:	4681      	mov	r9, r0
 8020d90:	2800      	cmp	r0, #0
 8020d92:	f43f aef4 	beq.w	8020b7e <_strtod_l+0x43e>
 8020d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d98:	691a      	ldr	r2, [r3, #16]
 8020d9a:	3202      	adds	r2, #2
 8020d9c:	f103 010c 	add.w	r1, r3, #12
 8020da0:	0092      	lsls	r2, r2, #2
 8020da2:	300c      	adds	r0, #12
 8020da4:	f7fe f931 	bl	801f00a <memcpy>
 8020da8:	ec4b ab10 	vmov	d0, sl, fp
 8020dac:	9805      	ldr	r0, [sp, #20]
 8020dae:	aa1c      	add	r2, sp, #112	@ 0x70
 8020db0:	a91b      	add	r1, sp, #108	@ 0x6c
 8020db2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020db6:	f7ff fbd5 	bl	8020564 <__d2b>
 8020dba:	901a      	str	r0, [sp, #104]	@ 0x68
 8020dbc:	2800      	cmp	r0, #0
 8020dbe:	f43f aede 	beq.w	8020b7e <_strtod_l+0x43e>
 8020dc2:	9805      	ldr	r0, [sp, #20]
 8020dc4:	2101      	movs	r1, #1
 8020dc6:	f7ff f927 	bl	8020018 <__i2b>
 8020dca:	4680      	mov	r8, r0
 8020dcc:	b948      	cbnz	r0, 8020de2 <_strtod_l+0x6a2>
 8020dce:	f04f 0800 	mov.w	r8, #0
 8020dd2:	e6d4      	b.n	8020b7e <_strtod_l+0x43e>
 8020dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8020dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8020ddc:	ea03 0a0a 	and.w	sl, r3, sl
 8020de0:	e7b0      	b.n	8020d44 <_strtod_l+0x604>
 8020de2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020de4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020de6:	2d00      	cmp	r5, #0
 8020de8:	bfab      	itete	ge
 8020dea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020dec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020dee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020df0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020df2:	bfac      	ite	ge
 8020df4:	18ef      	addge	r7, r5, r3
 8020df6:	1b5e      	sublt	r6, r3, r5
 8020df8:	9b08      	ldr	r3, [sp, #32]
 8020dfa:	1aed      	subs	r5, r5, r3
 8020dfc:	4415      	add	r5, r2
 8020dfe:	4b66      	ldr	r3, [pc, #408]	@ (8020f98 <_strtod_l+0x858>)
 8020e00:	3d01      	subs	r5, #1
 8020e02:	429d      	cmp	r5, r3
 8020e04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020e08:	da50      	bge.n	8020eac <_strtod_l+0x76c>
 8020e0a:	1b5b      	subs	r3, r3, r5
 8020e0c:	2b1f      	cmp	r3, #31
 8020e0e:	eba2 0203 	sub.w	r2, r2, r3
 8020e12:	f04f 0101 	mov.w	r1, #1
 8020e16:	dc3d      	bgt.n	8020e94 <_strtod_l+0x754>
 8020e18:	fa01 f303 	lsl.w	r3, r1, r3
 8020e1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020e1e:	2300      	movs	r3, #0
 8020e20:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e22:	18bd      	adds	r5, r7, r2
 8020e24:	9b08      	ldr	r3, [sp, #32]
 8020e26:	42af      	cmp	r7, r5
 8020e28:	4416      	add	r6, r2
 8020e2a:	441e      	add	r6, r3
 8020e2c:	463b      	mov	r3, r7
 8020e2e:	bfa8      	it	ge
 8020e30:	462b      	movge	r3, r5
 8020e32:	42b3      	cmp	r3, r6
 8020e34:	bfa8      	it	ge
 8020e36:	4633      	movge	r3, r6
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	bfc2      	ittt	gt
 8020e3c:	1aed      	subgt	r5, r5, r3
 8020e3e:	1af6      	subgt	r6, r6, r3
 8020e40:	1aff      	subgt	r7, r7, r3
 8020e42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	dd16      	ble.n	8020e76 <_strtod_l+0x736>
 8020e48:	4641      	mov	r1, r8
 8020e4a:	9805      	ldr	r0, [sp, #20]
 8020e4c:	461a      	mov	r2, r3
 8020e4e:	f7ff f9a3 	bl	8020198 <__pow5mult>
 8020e52:	4680      	mov	r8, r0
 8020e54:	2800      	cmp	r0, #0
 8020e56:	d0ba      	beq.n	8020dce <_strtod_l+0x68e>
 8020e58:	4601      	mov	r1, r0
 8020e5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020e5c:	9805      	ldr	r0, [sp, #20]
 8020e5e:	f7ff f8f1 	bl	8020044 <__multiply>
 8020e62:	900e      	str	r0, [sp, #56]	@ 0x38
 8020e64:	2800      	cmp	r0, #0
 8020e66:	f43f ae8a 	beq.w	8020b7e <_strtod_l+0x43e>
 8020e6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e6c:	9805      	ldr	r0, [sp, #20]
 8020e6e:	f7fe ffd5 	bl	801fe1c <_Bfree>
 8020e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8020e76:	2d00      	cmp	r5, #0
 8020e78:	dc1d      	bgt.n	8020eb6 <_strtod_l+0x776>
 8020e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	dd23      	ble.n	8020ec8 <_strtod_l+0x788>
 8020e80:	4649      	mov	r1, r9
 8020e82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020e84:	9805      	ldr	r0, [sp, #20]
 8020e86:	f7ff f987 	bl	8020198 <__pow5mult>
 8020e8a:	4681      	mov	r9, r0
 8020e8c:	b9e0      	cbnz	r0, 8020ec8 <_strtod_l+0x788>
 8020e8e:	f04f 0900 	mov.w	r9, #0
 8020e92:	e674      	b.n	8020b7e <_strtod_l+0x43e>
 8020e94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020e98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020e9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020ea0:	35e2      	adds	r5, #226	@ 0xe2
 8020ea2:	fa01 f305 	lsl.w	r3, r1, r5
 8020ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ea8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020eaa:	e7ba      	b.n	8020e22 <_strtod_l+0x6e2>
 8020eac:	2300      	movs	r3, #0
 8020eae:	9310      	str	r3, [sp, #64]	@ 0x40
 8020eb0:	2301      	movs	r3, #1
 8020eb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020eb4:	e7b5      	b.n	8020e22 <_strtod_l+0x6e2>
 8020eb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020eb8:	9805      	ldr	r0, [sp, #20]
 8020eba:	462a      	mov	r2, r5
 8020ebc:	f7ff f9c6 	bl	802024c <__lshift>
 8020ec0:	901a      	str	r0, [sp, #104]	@ 0x68
 8020ec2:	2800      	cmp	r0, #0
 8020ec4:	d1d9      	bne.n	8020e7a <_strtod_l+0x73a>
 8020ec6:	e65a      	b.n	8020b7e <_strtod_l+0x43e>
 8020ec8:	2e00      	cmp	r6, #0
 8020eca:	dd07      	ble.n	8020edc <_strtod_l+0x79c>
 8020ecc:	4649      	mov	r1, r9
 8020ece:	9805      	ldr	r0, [sp, #20]
 8020ed0:	4632      	mov	r2, r6
 8020ed2:	f7ff f9bb 	bl	802024c <__lshift>
 8020ed6:	4681      	mov	r9, r0
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d0d8      	beq.n	8020e8e <_strtod_l+0x74e>
 8020edc:	2f00      	cmp	r7, #0
 8020ede:	dd08      	ble.n	8020ef2 <_strtod_l+0x7b2>
 8020ee0:	4641      	mov	r1, r8
 8020ee2:	9805      	ldr	r0, [sp, #20]
 8020ee4:	463a      	mov	r2, r7
 8020ee6:	f7ff f9b1 	bl	802024c <__lshift>
 8020eea:	4680      	mov	r8, r0
 8020eec:	2800      	cmp	r0, #0
 8020eee:	f43f ae46 	beq.w	8020b7e <_strtod_l+0x43e>
 8020ef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ef4:	9805      	ldr	r0, [sp, #20]
 8020ef6:	464a      	mov	r2, r9
 8020ef8:	f7ff fa30 	bl	802035c <__mdiff>
 8020efc:	4604      	mov	r4, r0
 8020efe:	2800      	cmp	r0, #0
 8020f00:	f43f ae3d 	beq.w	8020b7e <_strtod_l+0x43e>
 8020f04:	68c3      	ldr	r3, [r0, #12]
 8020f06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f08:	2300      	movs	r3, #0
 8020f0a:	60c3      	str	r3, [r0, #12]
 8020f0c:	4641      	mov	r1, r8
 8020f0e:	f7ff fa09 	bl	8020324 <__mcmp>
 8020f12:	2800      	cmp	r0, #0
 8020f14:	da46      	bge.n	8020fa4 <_strtod_l+0x864>
 8020f16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f18:	ea53 030a 	orrs.w	r3, r3, sl
 8020f1c:	d16c      	bne.n	8020ff8 <_strtod_l+0x8b8>
 8020f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d168      	bne.n	8020ff8 <_strtod_l+0x8b8>
 8020f26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f2a:	0d1b      	lsrs	r3, r3, #20
 8020f2c:	051b      	lsls	r3, r3, #20
 8020f2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f32:	d961      	bls.n	8020ff8 <_strtod_l+0x8b8>
 8020f34:	6963      	ldr	r3, [r4, #20]
 8020f36:	b913      	cbnz	r3, 8020f3e <_strtod_l+0x7fe>
 8020f38:	6923      	ldr	r3, [r4, #16]
 8020f3a:	2b01      	cmp	r3, #1
 8020f3c:	dd5c      	ble.n	8020ff8 <_strtod_l+0x8b8>
 8020f3e:	4621      	mov	r1, r4
 8020f40:	2201      	movs	r2, #1
 8020f42:	9805      	ldr	r0, [sp, #20]
 8020f44:	f7ff f982 	bl	802024c <__lshift>
 8020f48:	4641      	mov	r1, r8
 8020f4a:	4604      	mov	r4, r0
 8020f4c:	f7ff f9ea 	bl	8020324 <__mcmp>
 8020f50:	2800      	cmp	r0, #0
 8020f52:	dd51      	ble.n	8020ff8 <_strtod_l+0x8b8>
 8020f54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f58:	9a08      	ldr	r2, [sp, #32]
 8020f5a:	0d1b      	lsrs	r3, r3, #20
 8020f5c:	051b      	lsls	r3, r3, #20
 8020f5e:	2a00      	cmp	r2, #0
 8020f60:	d06b      	beq.n	802103a <_strtod_l+0x8fa>
 8020f62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f66:	d868      	bhi.n	802103a <_strtod_l+0x8fa>
 8020f68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020f6c:	f67f ae9d 	bls.w	8020caa <_strtod_l+0x56a>
 8020f70:	4b0a      	ldr	r3, [pc, #40]	@ (8020f9c <_strtod_l+0x85c>)
 8020f72:	4650      	mov	r0, sl
 8020f74:	4659      	mov	r1, fp
 8020f76:	2200      	movs	r2, #0
 8020f78:	f7df fb56 	bl	8000628 <__aeabi_dmul>
 8020f7c:	4b08      	ldr	r3, [pc, #32]	@ (8020fa0 <_strtod_l+0x860>)
 8020f7e:	400b      	ands	r3, r1
 8020f80:	4682      	mov	sl, r0
 8020f82:	468b      	mov	fp, r1
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	f47f ae05 	bne.w	8020b94 <_strtod_l+0x454>
 8020f8a:	9a05      	ldr	r2, [sp, #20]
 8020f8c:	2322      	movs	r3, #34	@ 0x22
 8020f8e:	6013      	str	r3, [r2, #0]
 8020f90:	e600      	b.n	8020b94 <_strtod_l+0x454>
 8020f92:	bf00      	nop
 8020f94:	08025980 	.word	0x08025980
 8020f98:	fffffc02 	.word	0xfffffc02
 8020f9c:	39500000 	.word	0x39500000
 8020fa0:	7ff00000 	.word	0x7ff00000
 8020fa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020fa8:	d165      	bne.n	8021076 <_strtod_l+0x936>
 8020faa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020fb0:	b35a      	cbz	r2, 802100a <_strtod_l+0x8ca>
 8020fb2:	4a9f      	ldr	r2, [pc, #636]	@ (8021230 <_strtod_l+0xaf0>)
 8020fb4:	4293      	cmp	r3, r2
 8020fb6:	d12b      	bne.n	8021010 <_strtod_l+0x8d0>
 8020fb8:	9b08      	ldr	r3, [sp, #32]
 8020fba:	4651      	mov	r1, sl
 8020fbc:	b303      	cbz	r3, 8021000 <_strtod_l+0x8c0>
 8020fbe:	4b9d      	ldr	r3, [pc, #628]	@ (8021234 <_strtod_l+0xaf4>)
 8020fc0:	465a      	mov	r2, fp
 8020fc2:	4013      	ands	r3, r2
 8020fc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8020fcc:	d81b      	bhi.n	8021006 <_strtod_l+0x8c6>
 8020fce:	0d1b      	lsrs	r3, r3, #20
 8020fd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8020fd8:	4299      	cmp	r1, r3
 8020fda:	d119      	bne.n	8021010 <_strtod_l+0x8d0>
 8020fdc:	4b96      	ldr	r3, [pc, #600]	@ (8021238 <_strtod_l+0xaf8>)
 8020fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fe0:	429a      	cmp	r2, r3
 8020fe2:	d102      	bne.n	8020fea <_strtod_l+0x8aa>
 8020fe4:	3101      	adds	r1, #1
 8020fe6:	f43f adca 	beq.w	8020b7e <_strtod_l+0x43e>
 8020fea:	4b92      	ldr	r3, [pc, #584]	@ (8021234 <_strtod_l+0xaf4>)
 8020fec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fee:	401a      	ands	r2, r3
 8020ff0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020ff4:	f04f 0a00 	mov.w	sl, #0
 8020ff8:	9b08      	ldr	r3, [sp, #32]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d1b8      	bne.n	8020f70 <_strtod_l+0x830>
 8020ffe:	e5c9      	b.n	8020b94 <_strtod_l+0x454>
 8021000:	f04f 33ff 	mov.w	r3, #4294967295
 8021004:	e7e8      	b.n	8020fd8 <_strtod_l+0x898>
 8021006:	4613      	mov	r3, r2
 8021008:	e7e6      	b.n	8020fd8 <_strtod_l+0x898>
 802100a:	ea53 030a 	orrs.w	r3, r3, sl
 802100e:	d0a1      	beq.n	8020f54 <_strtod_l+0x814>
 8021010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021012:	b1db      	cbz	r3, 802104c <_strtod_l+0x90c>
 8021014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021016:	4213      	tst	r3, r2
 8021018:	d0ee      	beq.n	8020ff8 <_strtod_l+0x8b8>
 802101a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802101c:	9a08      	ldr	r2, [sp, #32]
 802101e:	4650      	mov	r0, sl
 8021020:	4659      	mov	r1, fp
 8021022:	b1bb      	cbz	r3, 8021054 <_strtod_l+0x914>
 8021024:	f7ff fb6c 	bl	8020700 <sulp>
 8021028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802102c:	ec53 2b10 	vmov	r2, r3, d0
 8021030:	f7df f944 	bl	80002bc <__adddf3>
 8021034:	4682      	mov	sl, r0
 8021036:	468b      	mov	fp, r1
 8021038:	e7de      	b.n	8020ff8 <_strtod_l+0x8b8>
 802103a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802103e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8021042:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8021046:	f04f 3aff 	mov.w	sl, #4294967295
 802104a:	e7d5      	b.n	8020ff8 <_strtod_l+0x8b8>
 802104c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802104e:	ea13 0f0a 	tst.w	r3, sl
 8021052:	e7e1      	b.n	8021018 <_strtod_l+0x8d8>
 8021054:	f7ff fb54 	bl	8020700 <sulp>
 8021058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802105c:	ec53 2b10 	vmov	r2, r3, d0
 8021060:	f7df f92a 	bl	80002b8 <__aeabi_dsub>
 8021064:	2200      	movs	r2, #0
 8021066:	2300      	movs	r3, #0
 8021068:	4682      	mov	sl, r0
 802106a:	468b      	mov	fp, r1
 802106c:	f7df fd44 	bl	8000af8 <__aeabi_dcmpeq>
 8021070:	2800      	cmp	r0, #0
 8021072:	d0c1      	beq.n	8020ff8 <_strtod_l+0x8b8>
 8021074:	e619      	b.n	8020caa <_strtod_l+0x56a>
 8021076:	4641      	mov	r1, r8
 8021078:	4620      	mov	r0, r4
 802107a:	f7ff facb 	bl	8020614 <__ratio>
 802107e:	ec57 6b10 	vmov	r6, r7, d0
 8021082:	2200      	movs	r2, #0
 8021084:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021088:	4630      	mov	r0, r6
 802108a:	4639      	mov	r1, r7
 802108c:	f7df fd48 	bl	8000b20 <__aeabi_dcmple>
 8021090:	2800      	cmp	r0, #0
 8021092:	d06f      	beq.n	8021174 <_strtod_l+0xa34>
 8021094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021096:	2b00      	cmp	r3, #0
 8021098:	d17a      	bne.n	8021190 <_strtod_l+0xa50>
 802109a:	f1ba 0f00 	cmp.w	sl, #0
 802109e:	d158      	bne.n	8021152 <_strtod_l+0xa12>
 80210a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d15a      	bne.n	8021160 <_strtod_l+0xa20>
 80210aa:	4b64      	ldr	r3, [pc, #400]	@ (802123c <_strtod_l+0xafc>)
 80210ac:	2200      	movs	r2, #0
 80210ae:	4630      	mov	r0, r6
 80210b0:	4639      	mov	r1, r7
 80210b2:	f7df fd2b 	bl	8000b0c <__aeabi_dcmplt>
 80210b6:	2800      	cmp	r0, #0
 80210b8:	d159      	bne.n	802116e <_strtod_l+0xa2e>
 80210ba:	4630      	mov	r0, r6
 80210bc:	4639      	mov	r1, r7
 80210be:	4b60      	ldr	r3, [pc, #384]	@ (8021240 <_strtod_l+0xb00>)
 80210c0:	2200      	movs	r2, #0
 80210c2:	f7df fab1 	bl	8000628 <__aeabi_dmul>
 80210c6:	4606      	mov	r6, r0
 80210c8:	460f      	mov	r7, r1
 80210ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80210ce:	9606      	str	r6, [sp, #24]
 80210d0:	9307      	str	r3, [sp, #28]
 80210d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80210d6:	4d57      	ldr	r5, [pc, #348]	@ (8021234 <_strtod_l+0xaf4>)
 80210d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80210dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210de:	401d      	ands	r5, r3
 80210e0:	4b58      	ldr	r3, [pc, #352]	@ (8021244 <_strtod_l+0xb04>)
 80210e2:	429d      	cmp	r5, r3
 80210e4:	f040 80b2 	bne.w	802124c <_strtod_l+0xb0c>
 80210e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80210ee:	ec4b ab10 	vmov	d0, sl, fp
 80210f2:	f7ff f9c7 	bl	8020484 <__ulp>
 80210f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80210fa:	ec51 0b10 	vmov	r0, r1, d0
 80210fe:	f7df fa93 	bl	8000628 <__aeabi_dmul>
 8021102:	4652      	mov	r2, sl
 8021104:	465b      	mov	r3, fp
 8021106:	f7df f8d9 	bl	80002bc <__adddf3>
 802110a:	460b      	mov	r3, r1
 802110c:	4949      	ldr	r1, [pc, #292]	@ (8021234 <_strtod_l+0xaf4>)
 802110e:	4a4e      	ldr	r2, [pc, #312]	@ (8021248 <_strtod_l+0xb08>)
 8021110:	4019      	ands	r1, r3
 8021112:	4291      	cmp	r1, r2
 8021114:	4682      	mov	sl, r0
 8021116:	d942      	bls.n	802119e <_strtod_l+0xa5e>
 8021118:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802111a:	4b47      	ldr	r3, [pc, #284]	@ (8021238 <_strtod_l+0xaf8>)
 802111c:	429a      	cmp	r2, r3
 802111e:	d103      	bne.n	8021128 <_strtod_l+0x9e8>
 8021120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021122:	3301      	adds	r3, #1
 8021124:	f43f ad2b 	beq.w	8020b7e <_strtod_l+0x43e>
 8021128:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8021238 <_strtod_l+0xaf8>
 802112c:	f04f 3aff 	mov.w	sl, #4294967295
 8021130:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021132:	9805      	ldr	r0, [sp, #20]
 8021134:	f7fe fe72 	bl	801fe1c <_Bfree>
 8021138:	9805      	ldr	r0, [sp, #20]
 802113a:	4649      	mov	r1, r9
 802113c:	f7fe fe6e 	bl	801fe1c <_Bfree>
 8021140:	9805      	ldr	r0, [sp, #20]
 8021142:	4641      	mov	r1, r8
 8021144:	f7fe fe6a 	bl	801fe1c <_Bfree>
 8021148:	9805      	ldr	r0, [sp, #20]
 802114a:	4621      	mov	r1, r4
 802114c:	f7fe fe66 	bl	801fe1c <_Bfree>
 8021150:	e618      	b.n	8020d84 <_strtod_l+0x644>
 8021152:	f1ba 0f01 	cmp.w	sl, #1
 8021156:	d103      	bne.n	8021160 <_strtod_l+0xa20>
 8021158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802115a:	2b00      	cmp	r3, #0
 802115c:	f43f ada5 	beq.w	8020caa <_strtod_l+0x56a>
 8021160:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8021210 <_strtod_l+0xad0>
 8021164:	4f35      	ldr	r7, [pc, #212]	@ (802123c <_strtod_l+0xafc>)
 8021166:	ed8d 7b06 	vstr	d7, [sp, #24]
 802116a:	2600      	movs	r6, #0
 802116c:	e7b1      	b.n	80210d2 <_strtod_l+0x992>
 802116e:	4f34      	ldr	r7, [pc, #208]	@ (8021240 <_strtod_l+0xb00>)
 8021170:	2600      	movs	r6, #0
 8021172:	e7aa      	b.n	80210ca <_strtod_l+0x98a>
 8021174:	4b32      	ldr	r3, [pc, #200]	@ (8021240 <_strtod_l+0xb00>)
 8021176:	4630      	mov	r0, r6
 8021178:	4639      	mov	r1, r7
 802117a:	2200      	movs	r2, #0
 802117c:	f7df fa54 	bl	8000628 <__aeabi_dmul>
 8021180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021182:	4606      	mov	r6, r0
 8021184:	460f      	mov	r7, r1
 8021186:	2b00      	cmp	r3, #0
 8021188:	d09f      	beq.n	80210ca <_strtod_l+0x98a>
 802118a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802118e:	e7a0      	b.n	80210d2 <_strtod_l+0x992>
 8021190:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021218 <_strtod_l+0xad8>
 8021194:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021198:	ec57 6b17 	vmov	r6, r7, d7
 802119c:	e799      	b.n	80210d2 <_strtod_l+0x992>
 802119e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80211a2:	9b08      	ldr	r3, [sp, #32]
 80211a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d1c1      	bne.n	8021130 <_strtod_l+0x9f0>
 80211ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80211b0:	0d1b      	lsrs	r3, r3, #20
 80211b2:	051b      	lsls	r3, r3, #20
 80211b4:	429d      	cmp	r5, r3
 80211b6:	d1bb      	bne.n	8021130 <_strtod_l+0x9f0>
 80211b8:	4630      	mov	r0, r6
 80211ba:	4639      	mov	r1, r7
 80211bc:	f7df fd94 	bl	8000ce8 <__aeabi_d2lz>
 80211c0:	f7df fa04 	bl	80005cc <__aeabi_l2d>
 80211c4:	4602      	mov	r2, r0
 80211c6:	460b      	mov	r3, r1
 80211c8:	4630      	mov	r0, r6
 80211ca:	4639      	mov	r1, r7
 80211cc:	f7df f874 	bl	80002b8 <__aeabi_dsub>
 80211d0:	460b      	mov	r3, r1
 80211d2:	4602      	mov	r2, r0
 80211d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80211d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80211dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211de:	ea46 060a 	orr.w	r6, r6, sl
 80211e2:	431e      	orrs	r6, r3
 80211e4:	d06f      	beq.n	80212c6 <_strtod_l+0xb86>
 80211e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8021220 <_strtod_l+0xae0>)
 80211e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ec:	f7df fc8e 	bl	8000b0c <__aeabi_dcmplt>
 80211f0:	2800      	cmp	r0, #0
 80211f2:	f47f accf 	bne.w	8020b94 <_strtod_l+0x454>
 80211f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8021228 <_strtod_l+0xae8>)
 80211f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021200:	f7df fca2 	bl	8000b48 <__aeabi_dcmpgt>
 8021204:	2800      	cmp	r0, #0
 8021206:	d093      	beq.n	8021130 <_strtod_l+0x9f0>
 8021208:	e4c4      	b.n	8020b94 <_strtod_l+0x454>
 802120a:	bf00      	nop
 802120c:	f3af 8000 	nop.w
 8021210:	00000000 	.word	0x00000000
 8021214:	bff00000 	.word	0xbff00000
 8021218:	00000000 	.word	0x00000000
 802121c:	3ff00000 	.word	0x3ff00000
 8021220:	94a03595 	.word	0x94a03595
 8021224:	3fdfffff 	.word	0x3fdfffff
 8021228:	35afe535 	.word	0x35afe535
 802122c:	3fe00000 	.word	0x3fe00000
 8021230:	000fffff 	.word	0x000fffff
 8021234:	7ff00000 	.word	0x7ff00000
 8021238:	7fefffff 	.word	0x7fefffff
 802123c:	3ff00000 	.word	0x3ff00000
 8021240:	3fe00000 	.word	0x3fe00000
 8021244:	7fe00000 	.word	0x7fe00000
 8021248:	7c9fffff 	.word	0x7c9fffff
 802124c:	9b08      	ldr	r3, [sp, #32]
 802124e:	b323      	cbz	r3, 802129a <_strtod_l+0xb5a>
 8021250:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8021254:	d821      	bhi.n	802129a <_strtod_l+0xb5a>
 8021256:	a328      	add	r3, pc, #160	@ (adr r3, 80212f8 <_strtod_l+0xbb8>)
 8021258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802125c:	4630      	mov	r0, r6
 802125e:	4639      	mov	r1, r7
 8021260:	f7df fc5e 	bl	8000b20 <__aeabi_dcmple>
 8021264:	b1a0      	cbz	r0, 8021290 <_strtod_l+0xb50>
 8021266:	4639      	mov	r1, r7
 8021268:	4630      	mov	r0, r6
 802126a:	f7df fcb5 	bl	8000bd8 <__aeabi_d2uiz>
 802126e:	2801      	cmp	r0, #1
 8021270:	bf38      	it	cc
 8021272:	2001      	movcc	r0, #1
 8021274:	f7df f95e 	bl	8000534 <__aeabi_ui2d>
 8021278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802127a:	4606      	mov	r6, r0
 802127c:	460f      	mov	r7, r1
 802127e:	b9fb      	cbnz	r3, 80212c0 <_strtod_l+0xb80>
 8021280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021284:	9014      	str	r0, [sp, #80]	@ 0x50
 8021286:	9315      	str	r3, [sp, #84]	@ 0x54
 8021288:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802128c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8021290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021292:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8021296:	1b5b      	subs	r3, r3, r5
 8021298:	9311      	str	r3, [sp, #68]	@ 0x44
 802129a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802129e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80212a2:	f7ff f8ef 	bl	8020484 <__ulp>
 80212a6:	4650      	mov	r0, sl
 80212a8:	ec53 2b10 	vmov	r2, r3, d0
 80212ac:	4659      	mov	r1, fp
 80212ae:	f7df f9bb 	bl	8000628 <__aeabi_dmul>
 80212b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80212b6:	f7df f801 	bl	80002bc <__adddf3>
 80212ba:	4682      	mov	sl, r0
 80212bc:	468b      	mov	fp, r1
 80212be:	e770      	b.n	80211a2 <_strtod_l+0xa62>
 80212c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80212c4:	e7e0      	b.n	8021288 <_strtod_l+0xb48>
 80212c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8021300 <_strtod_l+0xbc0>)
 80212c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212cc:	f7df fc1e 	bl	8000b0c <__aeabi_dcmplt>
 80212d0:	e798      	b.n	8021204 <_strtod_l+0xac4>
 80212d2:	2300      	movs	r3, #0
 80212d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80212d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80212d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80212da:	6013      	str	r3, [r2, #0]
 80212dc:	f7ff ba6d 	b.w	80207ba <_strtod_l+0x7a>
 80212e0:	2a65      	cmp	r2, #101	@ 0x65
 80212e2:	f43f ab66 	beq.w	80209b2 <_strtod_l+0x272>
 80212e6:	2a45      	cmp	r2, #69	@ 0x45
 80212e8:	f43f ab63 	beq.w	80209b2 <_strtod_l+0x272>
 80212ec:	2301      	movs	r3, #1
 80212ee:	f7ff bb9e 	b.w	8020a2e <_strtod_l+0x2ee>
 80212f2:	bf00      	nop
 80212f4:	f3af 8000 	nop.w
 80212f8:	ffc00000 	.word	0xffc00000
 80212fc:	41dfffff 	.word	0x41dfffff
 8021300:	94a03595 	.word	0x94a03595
 8021304:	3fcfffff 	.word	0x3fcfffff

08021308 <_strtod_r>:
 8021308:	4b01      	ldr	r3, [pc, #4]	@ (8021310 <_strtod_r+0x8>)
 802130a:	f7ff ba19 	b.w	8020740 <_strtod_l>
 802130e:	bf00      	nop
 8021310:	20000198 	.word	0x20000198

08021314 <__ssputs_r>:
 8021314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021318:	688e      	ldr	r6, [r1, #8]
 802131a:	461f      	mov	r7, r3
 802131c:	42be      	cmp	r6, r7
 802131e:	680b      	ldr	r3, [r1, #0]
 8021320:	4682      	mov	sl, r0
 8021322:	460c      	mov	r4, r1
 8021324:	4690      	mov	r8, r2
 8021326:	d82d      	bhi.n	8021384 <__ssputs_r+0x70>
 8021328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802132c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021330:	d026      	beq.n	8021380 <__ssputs_r+0x6c>
 8021332:	6965      	ldr	r5, [r4, #20]
 8021334:	6909      	ldr	r1, [r1, #16]
 8021336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802133a:	eba3 0901 	sub.w	r9, r3, r1
 802133e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021342:	1c7b      	adds	r3, r7, #1
 8021344:	444b      	add	r3, r9
 8021346:	106d      	asrs	r5, r5, #1
 8021348:	429d      	cmp	r5, r3
 802134a:	bf38      	it	cc
 802134c:	461d      	movcc	r5, r3
 802134e:	0553      	lsls	r3, r2, #21
 8021350:	d527      	bpl.n	80213a2 <__ssputs_r+0x8e>
 8021352:	4629      	mov	r1, r5
 8021354:	f7fc faee 	bl	801d934 <_malloc_r>
 8021358:	4606      	mov	r6, r0
 802135a:	b360      	cbz	r0, 80213b6 <__ssputs_r+0xa2>
 802135c:	6921      	ldr	r1, [r4, #16]
 802135e:	464a      	mov	r2, r9
 8021360:	f7fd fe53 	bl	801f00a <memcpy>
 8021364:	89a3      	ldrh	r3, [r4, #12]
 8021366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802136a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802136e:	81a3      	strh	r3, [r4, #12]
 8021370:	6126      	str	r6, [r4, #16]
 8021372:	6165      	str	r5, [r4, #20]
 8021374:	444e      	add	r6, r9
 8021376:	eba5 0509 	sub.w	r5, r5, r9
 802137a:	6026      	str	r6, [r4, #0]
 802137c:	60a5      	str	r5, [r4, #8]
 802137e:	463e      	mov	r6, r7
 8021380:	42be      	cmp	r6, r7
 8021382:	d900      	bls.n	8021386 <__ssputs_r+0x72>
 8021384:	463e      	mov	r6, r7
 8021386:	6820      	ldr	r0, [r4, #0]
 8021388:	4632      	mov	r2, r6
 802138a:	4641      	mov	r1, r8
 802138c:	f7fd fd0c 	bl	801eda8 <memmove>
 8021390:	68a3      	ldr	r3, [r4, #8]
 8021392:	1b9b      	subs	r3, r3, r6
 8021394:	60a3      	str	r3, [r4, #8]
 8021396:	6823      	ldr	r3, [r4, #0]
 8021398:	4433      	add	r3, r6
 802139a:	6023      	str	r3, [r4, #0]
 802139c:	2000      	movs	r0, #0
 802139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213a2:	462a      	mov	r2, r5
 80213a4:	f000 ff11 	bl	80221ca <_realloc_r>
 80213a8:	4606      	mov	r6, r0
 80213aa:	2800      	cmp	r0, #0
 80213ac:	d1e0      	bne.n	8021370 <__ssputs_r+0x5c>
 80213ae:	6921      	ldr	r1, [r4, #16]
 80213b0:	4650      	mov	r0, sl
 80213b2:	f7fe fca9 	bl	801fd08 <_free_r>
 80213b6:	230c      	movs	r3, #12
 80213b8:	f8ca 3000 	str.w	r3, [sl]
 80213bc:	89a3      	ldrh	r3, [r4, #12]
 80213be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213c2:	81a3      	strh	r3, [r4, #12]
 80213c4:	f04f 30ff 	mov.w	r0, #4294967295
 80213c8:	e7e9      	b.n	802139e <__ssputs_r+0x8a>
	...

080213cc <_svfiprintf_r>:
 80213cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d0:	4698      	mov	r8, r3
 80213d2:	898b      	ldrh	r3, [r1, #12]
 80213d4:	061b      	lsls	r3, r3, #24
 80213d6:	b09d      	sub	sp, #116	@ 0x74
 80213d8:	4607      	mov	r7, r0
 80213da:	460d      	mov	r5, r1
 80213dc:	4614      	mov	r4, r2
 80213de:	d510      	bpl.n	8021402 <_svfiprintf_r+0x36>
 80213e0:	690b      	ldr	r3, [r1, #16]
 80213e2:	b973      	cbnz	r3, 8021402 <_svfiprintf_r+0x36>
 80213e4:	2140      	movs	r1, #64	@ 0x40
 80213e6:	f7fc faa5 	bl	801d934 <_malloc_r>
 80213ea:	6028      	str	r0, [r5, #0]
 80213ec:	6128      	str	r0, [r5, #16]
 80213ee:	b930      	cbnz	r0, 80213fe <_svfiprintf_r+0x32>
 80213f0:	230c      	movs	r3, #12
 80213f2:	603b      	str	r3, [r7, #0]
 80213f4:	f04f 30ff 	mov.w	r0, #4294967295
 80213f8:	b01d      	add	sp, #116	@ 0x74
 80213fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213fe:	2340      	movs	r3, #64	@ 0x40
 8021400:	616b      	str	r3, [r5, #20]
 8021402:	2300      	movs	r3, #0
 8021404:	9309      	str	r3, [sp, #36]	@ 0x24
 8021406:	2320      	movs	r3, #32
 8021408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802140c:	f8cd 800c 	str.w	r8, [sp, #12]
 8021410:	2330      	movs	r3, #48	@ 0x30
 8021412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80215b0 <_svfiprintf_r+0x1e4>
 8021416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802141a:	f04f 0901 	mov.w	r9, #1
 802141e:	4623      	mov	r3, r4
 8021420:	469a      	mov	sl, r3
 8021422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021426:	b10a      	cbz	r2, 802142c <_svfiprintf_r+0x60>
 8021428:	2a25      	cmp	r2, #37	@ 0x25
 802142a:	d1f9      	bne.n	8021420 <_svfiprintf_r+0x54>
 802142c:	ebba 0b04 	subs.w	fp, sl, r4
 8021430:	d00b      	beq.n	802144a <_svfiprintf_r+0x7e>
 8021432:	465b      	mov	r3, fp
 8021434:	4622      	mov	r2, r4
 8021436:	4629      	mov	r1, r5
 8021438:	4638      	mov	r0, r7
 802143a:	f7ff ff6b 	bl	8021314 <__ssputs_r>
 802143e:	3001      	adds	r0, #1
 8021440:	f000 80a7 	beq.w	8021592 <_svfiprintf_r+0x1c6>
 8021444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021446:	445a      	add	r2, fp
 8021448:	9209      	str	r2, [sp, #36]	@ 0x24
 802144a:	f89a 3000 	ldrb.w	r3, [sl]
 802144e:	2b00      	cmp	r3, #0
 8021450:	f000 809f 	beq.w	8021592 <_svfiprintf_r+0x1c6>
 8021454:	2300      	movs	r3, #0
 8021456:	f04f 32ff 	mov.w	r2, #4294967295
 802145a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802145e:	f10a 0a01 	add.w	sl, sl, #1
 8021462:	9304      	str	r3, [sp, #16]
 8021464:	9307      	str	r3, [sp, #28]
 8021466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802146a:	931a      	str	r3, [sp, #104]	@ 0x68
 802146c:	4654      	mov	r4, sl
 802146e:	2205      	movs	r2, #5
 8021470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021474:	484e      	ldr	r0, [pc, #312]	@ (80215b0 <_svfiprintf_r+0x1e4>)
 8021476:	f7de fec3 	bl	8000200 <memchr>
 802147a:	9a04      	ldr	r2, [sp, #16]
 802147c:	b9d8      	cbnz	r0, 80214b6 <_svfiprintf_r+0xea>
 802147e:	06d0      	lsls	r0, r2, #27
 8021480:	bf44      	itt	mi
 8021482:	2320      	movmi	r3, #32
 8021484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021488:	0711      	lsls	r1, r2, #28
 802148a:	bf44      	itt	mi
 802148c:	232b      	movmi	r3, #43	@ 0x2b
 802148e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021492:	f89a 3000 	ldrb.w	r3, [sl]
 8021496:	2b2a      	cmp	r3, #42	@ 0x2a
 8021498:	d015      	beq.n	80214c6 <_svfiprintf_r+0xfa>
 802149a:	9a07      	ldr	r2, [sp, #28]
 802149c:	4654      	mov	r4, sl
 802149e:	2000      	movs	r0, #0
 80214a0:	f04f 0c0a 	mov.w	ip, #10
 80214a4:	4621      	mov	r1, r4
 80214a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80214aa:	3b30      	subs	r3, #48	@ 0x30
 80214ac:	2b09      	cmp	r3, #9
 80214ae:	d94b      	bls.n	8021548 <_svfiprintf_r+0x17c>
 80214b0:	b1b0      	cbz	r0, 80214e0 <_svfiprintf_r+0x114>
 80214b2:	9207      	str	r2, [sp, #28]
 80214b4:	e014      	b.n	80214e0 <_svfiprintf_r+0x114>
 80214b6:	eba0 0308 	sub.w	r3, r0, r8
 80214ba:	fa09 f303 	lsl.w	r3, r9, r3
 80214be:	4313      	orrs	r3, r2
 80214c0:	9304      	str	r3, [sp, #16]
 80214c2:	46a2      	mov	sl, r4
 80214c4:	e7d2      	b.n	802146c <_svfiprintf_r+0xa0>
 80214c6:	9b03      	ldr	r3, [sp, #12]
 80214c8:	1d19      	adds	r1, r3, #4
 80214ca:	681b      	ldr	r3, [r3, #0]
 80214cc:	9103      	str	r1, [sp, #12]
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	bfbb      	ittet	lt
 80214d2:	425b      	neglt	r3, r3
 80214d4:	f042 0202 	orrlt.w	r2, r2, #2
 80214d8:	9307      	strge	r3, [sp, #28]
 80214da:	9307      	strlt	r3, [sp, #28]
 80214dc:	bfb8      	it	lt
 80214de:	9204      	strlt	r2, [sp, #16]
 80214e0:	7823      	ldrb	r3, [r4, #0]
 80214e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80214e4:	d10a      	bne.n	80214fc <_svfiprintf_r+0x130>
 80214e6:	7863      	ldrb	r3, [r4, #1]
 80214e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80214ea:	d132      	bne.n	8021552 <_svfiprintf_r+0x186>
 80214ec:	9b03      	ldr	r3, [sp, #12]
 80214ee:	1d1a      	adds	r2, r3, #4
 80214f0:	681b      	ldr	r3, [r3, #0]
 80214f2:	9203      	str	r2, [sp, #12]
 80214f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80214f8:	3402      	adds	r4, #2
 80214fa:	9305      	str	r3, [sp, #20]
 80214fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80215c0 <_svfiprintf_r+0x1f4>
 8021500:	7821      	ldrb	r1, [r4, #0]
 8021502:	2203      	movs	r2, #3
 8021504:	4650      	mov	r0, sl
 8021506:	f7de fe7b 	bl	8000200 <memchr>
 802150a:	b138      	cbz	r0, 802151c <_svfiprintf_r+0x150>
 802150c:	9b04      	ldr	r3, [sp, #16]
 802150e:	eba0 000a 	sub.w	r0, r0, sl
 8021512:	2240      	movs	r2, #64	@ 0x40
 8021514:	4082      	lsls	r2, r0
 8021516:	4313      	orrs	r3, r2
 8021518:	3401      	adds	r4, #1
 802151a:	9304      	str	r3, [sp, #16]
 802151c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021520:	4824      	ldr	r0, [pc, #144]	@ (80215b4 <_svfiprintf_r+0x1e8>)
 8021522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021526:	2206      	movs	r2, #6
 8021528:	f7de fe6a 	bl	8000200 <memchr>
 802152c:	2800      	cmp	r0, #0
 802152e:	d036      	beq.n	802159e <_svfiprintf_r+0x1d2>
 8021530:	4b21      	ldr	r3, [pc, #132]	@ (80215b8 <_svfiprintf_r+0x1ec>)
 8021532:	bb1b      	cbnz	r3, 802157c <_svfiprintf_r+0x1b0>
 8021534:	9b03      	ldr	r3, [sp, #12]
 8021536:	3307      	adds	r3, #7
 8021538:	f023 0307 	bic.w	r3, r3, #7
 802153c:	3308      	adds	r3, #8
 802153e:	9303      	str	r3, [sp, #12]
 8021540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021542:	4433      	add	r3, r6
 8021544:	9309      	str	r3, [sp, #36]	@ 0x24
 8021546:	e76a      	b.n	802141e <_svfiprintf_r+0x52>
 8021548:	fb0c 3202 	mla	r2, ip, r2, r3
 802154c:	460c      	mov	r4, r1
 802154e:	2001      	movs	r0, #1
 8021550:	e7a8      	b.n	80214a4 <_svfiprintf_r+0xd8>
 8021552:	2300      	movs	r3, #0
 8021554:	3401      	adds	r4, #1
 8021556:	9305      	str	r3, [sp, #20]
 8021558:	4619      	mov	r1, r3
 802155a:	f04f 0c0a 	mov.w	ip, #10
 802155e:	4620      	mov	r0, r4
 8021560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021564:	3a30      	subs	r2, #48	@ 0x30
 8021566:	2a09      	cmp	r2, #9
 8021568:	d903      	bls.n	8021572 <_svfiprintf_r+0x1a6>
 802156a:	2b00      	cmp	r3, #0
 802156c:	d0c6      	beq.n	80214fc <_svfiprintf_r+0x130>
 802156e:	9105      	str	r1, [sp, #20]
 8021570:	e7c4      	b.n	80214fc <_svfiprintf_r+0x130>
 8021572:	fb0c 2101 	mla	r1, ip, r1, r2
 8021576:	4604      	mov	r4, r0
 8021578:	2301      	movs	r3, #1
 802157a:	e7f0      	b.n	802155e <_svfiprintf_r+0x192>
 802157c:	ab03      	add	r3, sp, #12
 802157e:	9300      	str	r3, [sp, #0]
 8021580:	462a      	mov	r2, r5
 8021582:	4b0e      	ldr	r3, [pc, #56]	@ (80215bc <_svfiprintf_r+0x1f0>)
 8021584:	a904      	add	r1, sp, #16
 8021586:	4638      	mov	r0, r7
 8021588:	f7fc fb86 	bl	801dc98 <_printf_float>
 802158c:	1c42      	adds	r2, r0, #1
 802158e:	4606      	mov	r6, r0
 8021590:	d1d6      	bne.n	8021540 <_svfiprintf_r+0x174>
 8021592:	89ab      	ldrh	r3, [r5, #12]
 8021594:	065b      	lsls	r3, r3, #25
 8021596:	f53f af2d 	bmi.w	80213f4 <_svfiprintf_r+0x28>
 802159a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802159c:	e72c      	b.n	80213f8 <_svfiprintf_r+0x2c>
 802159e:	ab03      	add	r3, sp, #12
 80215a0:	9300      	str	r3, [sp, #0]
 80215a2:	462a      	mov	r2, r5
 80215a4:	4b05      	ldr	r3, [pc, #20]	@ (80215bc <_svfiprintf_r+0x1f0>)
 80215a6:	a904      	add	r1, sp, #16
 80215a8:	4638      	mov	r0, r7
 80215aa:	f7fc fe0d 	bl	801e1c8 <_printf_i>
 80215ae:	e7ed      	b.n	802158c <_svfiprintf_r+0x1c0>
 80215b0:	080259a8 	.word	0x080259a8
 80215b4:	080259b2 	.word	0x080259b2
 80215b8:	0801dc99 	.word	0x0801dc99
 80215bc:	08021315 	.word	0x08021315
 80215c0:	080259ae 	.word	0x080259ae

080215c4 <__sfputc_r>:
 80215c4:	6893      	ldr	r3, [r2, #8]
 80215c6:	3b01      	subs	r3, #1
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	b410      	push	{r4}
 80215cc:	6093      	str	r3, [r2, #8]
 80215ce:	da08      	bge.n	80215e2 <__sfputc_r+0x1e>
 80215d0:	6994      	ldr	r4, [r2, #24]
 80215d2:	42a3      	cmp	r3, r4
 80215d4:	db01      	blt.n	80215da <__sfputc_r+0x16>
 80215d6:	290a      	cmp	r1, #10
 80215d8:	d103      	bne.n	80215e2 <__sfputc_r+0x1e>
 80215da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215de:	f7fd bb4f 	b.w	801ec80 <__swbuf_r>
 80215e2:	6813      	ldr	r3, [r2, #0]
 80215e4:	1c58      	adds	r0, r3, #1
 80215e6:	6010      	str	r0, [r2, #0]
 80215e8:	7019      	strb	r1, [r3, #0]
 80215ea:	4608      	mov	r0, r1
 80215ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215f0:	4770      	bx	lr

080215f2 <__sfputs_r>:
 80215f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215f4:	4606      	mov	r6, r0
 80215f6:	460f      	mov	r7, r1
 80215f8:	4614      	mov	r4, r2
 80215fa:	18d5      	adds	r5, r2, r3
 80215fc:	42ac      	cmp	r4, r5
 80215fe:	d101      	bne.n	8021604 <__sfputs_r+0x12>
 8021600:	2000      	movs	r0, #0
 8021602:	e007      	b.n	8021614 <__sfputs_r+0x22>
 8021604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021608:	463a      	mov	r2, r7
 802160a:	4630      	mov	r0, r6
 802160c:	f7ff ffda 	bl	80215c4 <__sfputc_r>
 8021610:	1c43      	adds	r3, r0, #1
 8021612:	d1f3      	bne.n	80215fc <__sfputs_r+0xa>
 8021614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021618 <_vfiprintf_r>:
 8021618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802161c:	460d      	mov	r5, r1
 802161e:	b09d      	sub	sp, #116	@ 0x74
 8021620:	4614      	mov	r4, r2
 8021622:	4698      	mov	r8, r3
 8021624:	4606      	mov	r6, r0
 8021626:	b118      	cbz	r0, 8021630 <_vfiprintf_r+0x18>
 8021628:	6a03      	ldr	r3, [r0, #32]
 802162a:	b90b      	cbnz	r3, 8021630 <_vfiprintf_r+0x18>
 802162c:	f7fd f98c 	bl	801e948 <__sinit>
 8021630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021632:	07d9      	lsls	r1, r3, #31
 8021634:	d405      	bmi.n	8021642 <_vfiprintf_r+0x2a>
 8021636:	89ab      	ldrh	r3, [r5, #12]
 8021638:	059a      	lsls	r2, r3, #22
 802163a:	d402      	bmi.n	8021642 <_vfiprintf_r+0x2a>
 802163c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802163e:	f7fd fcda 	bl	801eff6 <__retarget_lock_acquire_recursive>
 8021642:	89ab      	ldrh	r3, [r5, #12]
 8021644:	071b      	lsls	r3, r3, #28
 8021646:	d501      	bpl.n	802164c <_vfiprintf_r+0x34>
 8021648:	692b      	ldr	r3, [r5, #16]
 802164a:	b99b      	cbnz	r3, 8021674 <_vfiprintf_r+0x5c>
 802164c:	4629      	mov	r1, r5
 802164e:	4630      	mov	r0, r6
 8021650:	f7fd fb54 	bl	801ecfc <__swsetup_r>
 8021654:	b170      	cbz	r0, 8021674 <_vfiprintf_r+0x5c>
 8021656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021658:	07dc      	lsls	r4, r3, #31
 802165a:	d504      	bpl.n	8021666 <_vfiprintf_r+0x4e>
 802165c:	f04f 30ff 	mov.w	r0, #4294967295
 8021660:	b01d      	add	sp, #116	@ 0x74
 8021662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021666:	89ab      	ldrh	r3, [r5, #12]
 8021668:	0598      	lsls	r0, r3, #22
 802166a:	d4f7      	bmi.n	802165c <_vfiprintf_r+0x44>
 802166c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802166e:	f7fd fcc3 	bl	801eff8 <__retarget_lock_release_recursive>
 8021672:	e7f3      	b.n	802165c <_vfiprintf_r+0x44>
 8021674:	2300      	movs	r3, #0
 8021676:	9309      	str	r3, [sp, #36]	@ 0x24
 8021678:	2320      	movs	r3, #32
 802167a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802167e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021682:	2330      	movs	r3, #48	@ 0x30
 8021684:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021834 <_vfiprintf_r+0x21c>
 8021688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802168c:	f04f 0901 	mov.w	r9, #1
 8021690:	4623      	mov	r3, r4
 8021692:	469a      	mov	sl, r3
 8021694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021698:	b10a      	cbz	r2, 802169e <_vfiprintf_r+0x86>
 802169a:	2a25      	cmp	r2, #37	@ 0x25
 802169c:	d1f9      	bne.n	8021692 <_vfiprintf_r+0x7a>
 802169e:	ebba 0b04 	subs.w	fp, sl, r4
 80216a2:	d00b      	beq.n	80216bc <_vfiprintf_r+0xa4>
 80216a4:	465b      	mov	r3, fp
 80216a6:	4622      	mov	r2, r4
 80216a8:	4629      	mov	r1, r5
 80216aa:	4630      	mov	r0, r6
 80216ac:	f7ff ffa1 	bl	80215f2 <__sfputs_r>
 80216b0:	3001      	adds	r0, #1
 80216b2:	f000 80a7 	beq.w	8021804 <_vfiprintf_r+0x1ec>
 80216b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80216b8:	445a      	add	r2, fp
 80216ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80216bc:	f89a 3000 	ldrb.w	r3, [sl]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	f000 809f 	beq.w	8021804 <_vfiprintf_r+0x1ec>
 80216c6:	2300      	movs	r3, #0
 80216c8:	f04f 32ff 	mov.w	r2, #4294967295
 80216cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80216d0:	f10a 0a01 	add.w	sl, sl, #1
 80216d4:	9304      	str	r3, [sp, #16]
 80216d6:	9307      	str	r3, [sp, #28]
 80216d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80216dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80216de:	4654      	mov	r4, sl
 80216e0:	2205      	movs	r2, #5
 80216e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216e6:	4853      	ldr	r0, [pc, #332]	@ (8021834 <_vfiprintf_r+0x21c>)
 80216e8:	f7de fd8a 	bl	8000200 <memchr>
 80216ec:	9a04      	ldr	r2, [sp, #16]
 80216ee:	b9d8      	cbnz	r0, 8021728 <_vfiprintf_r+0x110>
 80216f0:	06d1      	lsls	r1, r2, #27
 80216f2:	bf44      	itt	mi
 80216f4:	2320      	movmi	r3, #32
 80216f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80216fa:	0713      	lsls	r3, r2, #28
 80216fc:	bf44      	itt	mi
 80216fe:	232b      	movmi	r3, #43	@ 0x2b
 8021700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021704:	f89a 3000 	ldrb.w	r3, [sl]
 8021708:	2b2a      	cmp	r3, #42	@ 0x2a
 802170a:	d015      	beq.n	8021738 <_vfiprintf_r+0x120>
 802170c:	9a07      	ldr	r2, [sp, #28]
 802170e:	4654      	mov	r4, sl
 8021710:	2000      	movs	r0, #0
 8021712:	f04f 0c0a 	mov.w	ip, #10
 8021716:	4621      	mov	r1, r4
 8021718:	f811 3b01 	ldrb.w	r3, [r1], #1
 802171c:	3b30      	subs	r3, #48	@ 0x30
 802171e:	2b09      	cmp	r3, #9
 8021720:	d94b      	bls.n	80217ba <_vfiprintf_r+0x1a2>
 8021722:	b1b0      	cbz	r0, 8021752 <_vfiprintf_r+0x13a>
 8021724:	9207      	str	r2, [sp, #28]
 8021726:	e014      	b.n	8021752 <_vfiprintf_r+0x13a>
 8021728:	eba0 0308 	sub.w	r3, r0, r8
 802172c:	fa09 f303 	lsl.w	r3, r9, r3
 8021730:	4313      	orrs	r3, r2
 8021732:	9304      	str	r3, [sp, #16]
 8021734:	46a2      	mov	sl, r4
 8021736:	e7d2      	b.n	80216de <_vfiprintf_r+0xc6>
 8021738:	9b03      	ldr	r3, [sp, #12]
 802173a:	1d19      	adds	r1, r3, #4
 802173c:	681b      	ldr	r3, [r3, #0]
 802173e:	9103      	str	r1, [sp, #12]
 8021740:	2b00      	cmp	r3, #0
 8021742:	bfbb      	ittet	lt
 8021744:	425b      	neglt	r3, r3
 8021746:	f042 0202 	orrlt.w	r2, r2, #2
 802174a:	9307      	strge	r3, [sp, #28]
 802174c:	9307      	strlt	r3, [sp, #28]
 802174e:	bfb8      	it	lt
 8021750:	9204      	strlt	r2, [sp, #16]
 8021752:	7823      	ldrb	r3, [r4, #0]
 8021754:	2b2e      	cmp	r3, #46	@ 0x2e
 8021756:	d10a      	bne.n	802176e <_vfiprintf_r+0x156>
 8021758:	7863      	ldrb	r3, [r4, #1]
 802175a:	2b2a      	cmp	r3, #42	@ 0x2a
 802175c:	d132      	bne.n	80217c4 <_vfiprintf_r+0x1ac>
 802175e:	9b03      	ldr	r3, [sp, #12]
 8021760:	1d1a      	adds	r2, r3, #4
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	9203      	str	r2, [sp, #12]
 8021766:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802176a:	3402      	adds	r4, #2
 802176c:	9305      	str	r3, [sp, #20]
 802176e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021844 <_vfiprintf_r+0x22c>
 8021772:	7821      	ldrb	r1, [r4, #0]
 8021774:	2203      	movs	r2, #3
 8021776:	4650      	mov	r0, sl
 8021778:	f7de fd42 	bl	8000200 <memchr>
 802177c:	b138      	cbz	r0, 802178e <_vfiprintf_r+0x176>
 802177e:	9b04      	ldr	r3, [sp, #16]
 8021780:	eba0 000a 	sub.w	r0, r0, sl
 8021784:	2240      	movs	r2, #64	@ 0x40
 8021786:	4082      	lsls	r2, r0
 8021788:	4313      	orrs	r3, r2
 802178a:	3401      	adds	r4, #1
 802178c:	9304      	str	r3, [sp, #16]
 802178e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021792:	4829      	ldr	r0, [pc, #164]	@ (8021838 <_vfiprintf_r+0x220>)
 8021794:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021798:	2206      	movs	r2, #6
 802179a:	f7de fd31 	bl	8000200 <memchr>
 802179e:	2800      	cmp	r0, #0
 80217a0:	d03f      	beq.n	8021822 <_vfiprintf_r+0x20a>
 80217a2:	4b26      	ldr	r3, [pc, #152]	@ (802183c <_vfiprintf_r+0x224>)
 80217a4:	bb1b      	cbnz	r3, 80217ee <_vfiprintf_r+0x1d6>
 80217a6:	9b03      	ldr	r3, [sp, #12]
 80217a8:	3307      	adds	r3, #7
 80217aa:	f023 0307 	bic.w	r3, r3, #7
 80217ae:	3308      	adds	r3, #8
 80217b0:	9303      	str	r3, [sp, #12]
 80217b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217b4:	443b      	add	r3, r7
 80217b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80217b8:	e76a      	b.n	8021690 <_vfiprintf_r+0x78>
 80217ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80217be:	460c      	mov	r4, r1
 80217c0:	2001      	movs	r0, #1
 80217c2:	e7a8      	b.n	8021716 <_vfiprintf_r+0xfe>
 80217c4:	2300      	movs	r3, #0
 80217c6:	3401      	adds	r4, #1
 80217c8:	9305      	str	r3, [sp, #20]
 80217ca:	4619      	mov	r1, r3
 80217cc:	f04f 0c0a 	mov.w	ip, #10
 80217d0:	4620      	mov	r0, r4
 80217d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217d6:	3a30      	subs	r2, #48	@ 0x30
 80217d8:	2a09      	cmp	r2, #9
 80217da:	d903      	bls.n	80217e4 <_vfiprintf_r+0x1cc>
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d0c6      	beq.n	802176e <_vfiprintf_r+0x156>
 80217e0:	9105      	str	r1, [sp, #20]
 80217e2:	e7c4      	b.n	802176e <_vfiprintf_r+0x156>
 80217e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80217e8:	4604      	mov	r4, r0
 80217ea:	2301      	movs	r3, #1
 80217ec:	e7f0      	b.n	80217d0 <_vfiprintf_r+0x1b8>
 80217ee:	ab03      	add	r3, sp, #12
 80217f0:	9300      	str	r3, [sp, #0]
 80217f2:	462a      	mov	r2, r5
 80217f4:	4b12      	ldr	r3, [pc, #72]	@ (8021840 <_vfiprintf_r+0x228>)
 80217f6:	a904      	add	r1, sp, #16
 80217f8:	4630      	mov	r0, r6
 80217fa:	f7fc fa4d 	bl	801dc98 <_printf_float>
 80217fe:	4607      	mov	r7, r0
 8021800:	1c78      	adds	r0, r7, #1
 8021802:	d1d6      	bne.n	80217b2 <_vfiprintf_r+0x19a>
 8021804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021806:	07d9      	lsls	r1, r3, #31
 8021808:	d405      	bmi.n	8021816 <_vfiprintf_r+0x1fe>
 802180a:	89ab      	ldrh	r3, [r5, #12]
 802180c:	059a      	lsls	r2, r3, #22
 802180e:	d402      	bmi.n	8021816 <_vfiprintf_r+0x1fe>
 8021810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021812:	f7fd fbf1 	bl	801eff8 <__retarget_lock_release_recursive>
 8021816:	89ab      	ldrh	r3, [r5, #12]
 8021818:	065b      	lsls	r3, r3, #25
 802181a:	f53f af1f 	bmi.w	802165c <_vfiprintf_r+0x44>
 802181e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021820:	e71e      	b.n	8021660 <_vfiprintf_r+0x48>
 8021822:	ab03      	add	r3, sp, #12
 8021824:	9300      	str	r3, [sp, #0]
 8021826:	462a      	mov	r2, r5
 8021828:	4b05      	ldr	r3, [pc, #20]	@ (8021840 <_vfiprintf_r+0x228>)
 802182a:	a904      	add	r1, sp, #16
 802182c:	4630      	mov	r0, r6
 802182e:	f7fc fccb 	bl	801e1c8 <_printf_i>
 8021832:	e7e4      	b.n	80217fe <_vfiprintf_r+0x1e6>
 8021834:	080259a8 	.word	0x080259a8
 8021838:	080259b2 	.word	0x080259b2
 802183c:	0801dc99 	.word	0x0801dc99
 8021840:	080215f3 	.word	0x080215f3
 8021844:	080259ae 	.word	0x080259ae

08021848 <__sflush_r>:
 8021848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021850:	0716      	lsls	r6, r2, #28
 8021852:	4605      	mov	r5, r0
 8021854:	460c      	mov	r4, r1
 8021856:	d454      	bmi.n	8021902 <__sflush_r+0xba>
 8021858:	684b      	ldr	r3, [r1, #4]
 802185a:	2b00      	cmp	r3, #0
 802185c:	dc02      	bgt.n	8021864 <__sflush_r+0x1c>
 802185e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021860:	2b00      	cmp	r3, #0
 8021862:	dd48      	ble.n	80218f6 <__sflush_r+0xae>
 8021864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021866:	2e00      	cmp	r6, #0
 8021868:	d045      	beq.n	80218f6 <__sflush_r+0xae>
 802186a:	2300      	movs	r3, #0
 802186c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021870:	682f      	ldr	r7, [r5, #0]
 8021872:	6a21      	ldr	r1, [r4, #32]
 8021874:	602b      	str	r3, [r5, #0]
 8021876:	d030      	beq.n	80218da <__sflush_r+0x92>
 8021878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802187a:	89a3      	ldrh	r3, [r4, #12]
 802187c:	0759      	lsls	r1, r3, #29
 802187e:	d505      	bpl.n	802188c <__sflush_r+0x44>
 8021880:	6863      	ldr	r3, [r4, #4]
 8021882:	1ad2      	subs	r2, r2, r3
 8021884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021886:	b10b      	cbz	r3, 802188c <__sflush_r+0x44>
 8021888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802188a:	1ad2      	subs	r2, r2, r3
 802188c:	2300      	movs	r3, #0
 802188e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021890:	6a21      	ldr	r1, [r4, #32]
 8021892:	4628      	mov	r0, r5
 8021894:	47b0      	blx	r6
 8021896:	1c43      	adds	r3, r0, #1
 8021898:	89a3      	ldrh	r3, [r4, #12]
 802189a:	d106      	bne.n	80218aa <__sflush_r+0x62>
 802189c:	6829      	ldr	r1, [r5, #0]
 802189e:	291d      	cmp	r1, #29
 80218a0:	d82b      	bhi.n	80218fa <__sflush_r+0xb2>
 80218a2:	4a2a      	ldr	r2, [pc, #168]	@ (802194c <__sflush_r+0x104>)
 80218a4:	410a      	asrs	r2, r1
 80218a6:	07d6      	lsls	r6, r2, #31
 80218a8:	d427      	bmi.n	80218fa <__sflush_r+0xb2>
 80218aa:	2200      	movs	r2, #0
 80218ac:	6062      	str	r2, [r4, #4]
 80218ae:	04d9      	lsls	r1, r3, #19
 80218b0:	6922      	ldr	r2, [r4, #16]
 80218b2:	6022      	str	r2, [r4, #0]
 80218b4:	d504      	bpl.n	80218c0 <__sflush_r+0x78>
 80218b6:	1c42      	adds	r2, r0, #1
 80218b8:	d101      	bne.n	80218be <__sflush_r+0x76>
 80218ba:	682b      	ldr	r3, [r5, #0]
 80218bc:	b903      	cbnz	r3, 80218c0 <__sflush_r+0x78>
 80218be:	6560      	str	r0, [r4, #84]	@ 0x54
 80218c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80218c2:	602f      	str	r7, [r5, #0]
 80218c4:	b1b9      	cbz	r1, 80218f6 <__sflush_r+0xae>
 80218c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80218ca:	4299      	cmp	r1, r3
 80218cc:	d002      	beq.n	80218d4 <__sflush_r+0x8c>
 80218ce:	4628      	mov	r0, r5
 80218d0:	f7fe fa1a 	bl	801fd08 <_free_r>
 80218d4:	2300      	movs	r3, #0
 80218d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80218d8:	e00d      	b.n	80218f6 <__sflush_r+0xae>
 80218da:	2301      	movs	r3, #1
 80218dc:	4628      	mov	r0, r5
 80218de:	47b0      	blx	r6
 80218e0:	4602      	mov	r2, r0
 80218e2:	1c50      	adds	r0, r2, #1
 80218e4:	d1c9      	bne.n	802187a <__sflush_r+0x32>
 80218e6:	682b      	ldr	r3, [r5, #0]
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	d0c6      	beq.n	802187a <__sflush_r+0x32>
 80218ec:	2b1d      	cmp	r3, #29
 80218ee:	d001      	beq.n	80218f4 <__sflush_r+0xac>
 80218f0:	2b16      	cmp	r3, #22
 80218f2:	d11e      	bne.n	8021932 <__sflush_r+0xea>
 80218f4:	602f      	str	r7, [r5, #0]
 80218f6:	2000      	movs	r0, #0
 80218f8:	e022      	b.n	8021940 <__sflush_r+0xf8>
 80218fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80218fe:	b21b      	sxth	r3, r3
 8021900:	e01b      	b.n	802193a <__sflush_r+0xf2>
 8021902:	690f      	ldr	r7, [r1, #16]
 8021904:	2f00      	cmp	r7, #0
 8021906:	d0f6      	beq.n	80218f6 <__sflush_r+0xae>
 8021908:	0793      	lsls	r3, r2, #30
 802190a:	680e      	ldr	r6, [r1, #0]
 802190c:	bf08      	it	eq
 802190e:	694b      	ldreq	r3, [r1, #20]
 8021910:	600f      	str	r7, [r1, #0]
 8021912:	bf18      	it	ne
 8021914:	2300      	movne	r3, #0
 8021916:	eba6 0807 	sub.w	r8, r6, r7
 802191a:	608b      	str	r3, [r1, #8]
 802191c:	f1b8 0f00 	cmp.w	r8, #0
 8021920:	dde9      	ble.n	80218f6 <__sflush_r+0xae>
 8021922:	6a21      	ldr	r1, [r4, #32]
 8021924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021926:	4643      	mov	r3, r8
 8021928:	463a      	mov	r2, r7
 802192a:	4628      	mov	r0, r5
 802192c:	47b0      	blx	r6
 802192e:	2800      	cmp	r0, #0
 8021930:	dc08      	bgt.n	8021944 <__sflush_r+0xfc>
 8021932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802193a:	81a3      	strh	r3, [r4, #12]
 802193c:	f04f 30ff 	mov.w	r0, #4294967295
 8021940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021944:	4407      	add	r7, r0
 8021946:	eba8 0800 	sub.w	r8, r8, r0
 802194a:	e7e7      	b.n	802191c <__sflush_r+0xd4>
 802194c:	dfbffffe 	.word	0xdfbffffe

08021950 <_fflush_r>:
 8021950:	b538      	push	{r3, r4, r5, lr}
 8021952:	690b      	ldr	r3, [r1, #16]
 8021954:	4605      	mov	r5, r0
 8021956:	460c      	mov	r4, r1
 8021958:	b913      	cbnz	r3, 8021960 <_fflush_r+0x10>
 802195a:	2500      	movs	r5, #0
 802195c:	4628      	mov	r0, r5
 802195e:	bd38      	pop	{r3, r4, r5, pc}
 8021960:	b118      	cbz	r0, 802196a <_fflush_r+0x1a>
 8021962:	6a03      	ldr	r3, [r0, #32]
 8021964:	b90b      	cbnz	r3, 802196a <_fflush_r+0x1a>
 8021966:	f7fc ffef 	bl	801e948 <__sinit>
 802196a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802196e:	2b00      	cmp	r3, #0
 8021970:	d0f3      	beq.n	802195a <_fflush_r+0xa>
 8021972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021974:	07d0      	lsls	r0, r2, #31
 8021976:	d404      	bmi.n	8021982 <_fflush_r+0x32>
 8021978:	0599      	lsls	r1, r3, #22
 802197a:	d402      	bmi.n	8021982 <_fflush_r+0x32>
 802197c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802197e:	f7fd fb3a 	bl	801eff6 <__retarget_lock_acquire_recursive>
 8021982:	4628      	mov	r0, r5
 8021984:	4621      	mov	r1, r4
 8021986:	f7ff ff5f 	bl	8021848 <__sflush_r>
 802198a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802198c:	07da      	lsls	r2, r3, #31
 802198e:	4605      	mov	r5, r0
 8021990:	d4e4      	bmi.n	802195c <_fflush_r+0xc>
 8021992:	89a3      	ldrh	r3, [r4, #12]
 8021994:	059b      	lsls	r3, r3, #22
 8021996:	d4e1      	bmi.n	802195c <_fflush_r+0xc>
 8021998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802199a:	f7fd fb2d 	bl	801eff8 <__retarget_lock_release_recursive>
 802199e:	e7dd      	b.n	802195c <_fflush_r+0xc>

080219a0 <fiprintf>:
 80219a0:	b40e      	push	{r1, r2, r3}
 80219a2:	b503      	push	{r0, r1, lr}
 80219a4:	4601      	mov	r1, r0
 80219a6:	ab03      	add	r3, sp, #12
 80219a8:	4805      	ldr	r0, [pc, #20]	@ (80219c0 <fiprintf+0x20>)
 80219aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80219ae:	6800      	ldr	r0, [r0, #0]
 80219b0:	9301      	str	r3, [sp, #4]
 80219b2:	f7ff fe31 	bl	8021618 <_vfiprintf_r>
 80219b6:	b002      	add	sp, #8
 80219b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80219bc:	b003      	add	sp, #12
 80219be:	4770      	bx	lr
 80219c0:	20000148 	.word	0x20000148

080219c4 <__swhatbuf_r>:
 80219c4:	b570      	push	{r4, r5, r6, lr}
 80219c6:	460c      	mov	r4, r1
 80219c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219cc:	2900      	cmp	r1, #0
 80219ce:	b096      	sub	sp, #88	@ 0x58
 80219d0:	4615      	mov	r5, r2
 80219d2:	461e      	mov	r6, r3
 80219d4:	da0d      	bge.n	80219f2 <__swhatbuf_r+0x2e>
 80219d6:	89a3      	ldrh	r3, [r4, #12]
 80219d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80219dc:	f04f 0100 	mov.w	r1, #0
 80219e0:	bf14      	ite	ne
 80219e2:	2340      	movne	r3, #64	@ 0x40
 80219e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80219e8:	2000      	movs	r0, #0
 80219ea:	6031      	str	r1, [r6, #0]
 80219ec:	602b      	str	r3, [r5, #0]
 80219ee:	b016      	add	sp, #88	@ 0x58
 80219f0:	bd70      	pop	{r4, r5, r6, pc}
 80219f2:	466a      	mov	r2, sp
 80219f4:	f000 f85a 	bl	8021aac <_fstat_r>
 80219f8:	2800      	cmp	r0, #0
 80219fa:	dbec      	blt.n	80219d6 <__swhatbuf_r+0x12>
 80219fc:	9901      	ldr	r1, [sp, #4]
 80219fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021a06:	4259      	negs	r1, r3
 8021a08:	4159      	adcs	r1, r3
 8021a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021a0e:	e7eb      	b.n	80219e8 <__swhatbuf_r+0x24>

08021a10 <__smakebuf_r>:
 8021a10:	898b      	ldrh	r3, [r1, #12]
 8021a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a14:	079d      	lsls	r5, r3, #30
 8021a16:	4606      	mov	r6, r0
 8021a18:	460c      	mov	r4, r1
 8021a1a:	d507      	bpl.n	8021a2c <__smakebuf_r+0x1c>
 8021a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021a20:	6023      	str	r3, [r4, #0]
 8021a22:	6123      	str	r3, [r4, #16]
 8021a24:	2301      	movs	r3, #1
 8021a26:	6163      	str	r3, [r4, #20]
 8021a28:	b003      	add	sp, #12
 8021a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a2c:	ab01      	add	r3, sp, #4
 8021a2e:	466a      	mov	r2, sp
 8021a30:	f7ff ffc8 	bl	80219c4 <__swhatbuf_r>
 8021a34:	9f00      	ldr	r7, [sp, #0]
 8021a36:	4605      	mov	r5, r0
 8021a38:	4639      	mov	r1, r7
 8021a3a:	4630      	mov	r0, r6
 8021a3c:	f7fb ff7a 	bl	801d934 <_malloc_r>
 8021a40:	b948      	cbnz	r0, 8021a56 <__smakebuf_r+0x46>
 8021a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a46:	059a      	lsls	r2, r3, #22
 8021a48:	d4ee      	bmi.n	8021a28 <__smakebuf_r+0x18>
 8021a4a:	f023 0303 	bic.w	r3, r3, #3
 8021a4e:	f043 0302 	orr.w	r3, r3, #2
 8021a52:	81a3      	strh	r3, [r4, #12]
 8021a54:	e7e2      	b.n	8021a1c <__smakebuf_r+0xc>
 8021a56:	89a3      	ldrh	r3, [r4, #12]
 8021a58:	6020      	str	r0, [r4, #0]
 8021a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021a5e:	81a3      	strh	r3, [r4, #12]
 8021a60:	9b01      	ldr	r3, [sp, #4]
 8021a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021a66:	b15b      	cbz	r3, 8021a80 <__smakebuf_r+0x70>
 8021a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a6c:	4630      	mov	r0, r6
 8021a6e:	f000 f82f 	bl	8021ad0 <_isatty_r>
 8021a72:	b128      	cbz	r0, 8021a80 <__smakebuf_r+0x70>
 8021a74:	89a3      	ldrh	r3, [r4, #12]
 8021a76:	f023 0303 	bic.w	r3, r3, #3
 8021a7a:	f043 0301 	orr.w	r3, r3, #1
 8021a7e:	81a3      	strh	r3, [r4, #12]
 8021a80:	89a3      	ldrh	r3, [r4, #12]
 8021a82:	431d      	orrs	r5, r3
 8021a84:	81a5      	strh	r5, [r4, #12]
 8021a86:	e7cf      	b.n	8021a28 <__smakebuf_r+0x18>

08021a88 <strncmp>:
 8021a88:	b510      	push	{r4, lr}
 8021a8a:	b16a      	cbz	r2, 8021aa8 <strncmp+0x20>
 8021a8c:	3901      	subs	r1, #1
 8021a8e:	1884      	adds	r4, r0, r2
 8021a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021a94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021a98:	429a      	cmp	r2, r3
 8021a9a:	d103      	bne.n	8021aa4 <strncmp+0x1c>
 8021a9c:	42a0      	cmp	r0, r4
 8021a9e:	d001      	beq.n	8021aa4 <strncmp+0x1c>
 8021aa0:	2a00      	cmp	r2, #0
 8021aa2:	d1f5      	bne.n	8021a90 <strncmp+0x8>
 8021aa4:	1ad0      	subs	r0, r2, r3
 8021aa6:	bd10      	pop	{r4, pc}
 8021aa8:	4610      	mov	r0, r2
 8021aaa:	e7fc      	b.n	8021aa6 <strncmp+0x1e>

08021aac <_fstat_r>:
 8021aac:	b538      	push	{r3, r4, r5, lr}
 8021aae:	4d07      	ldr	r5, [pc, #28]	@ (8021acc <_fstat_r+0x20>)
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	4604      	mov	r4, r0
 8021ab4:	4608      	mov	r0, r1
 8021ab6:	4611      	mov	r1, r2
 8021ab8:	602b      	str	r3, [r5, #0]
 8021aba:	f7e2 fa45 	bl	8003f48 <_fstat>
 8021abe:	1c43      	adds	r3, r0, #1
 8021ac0:	d102      	bne.n	8021ac8 <_fstat_r+0x1c>
 8021ac2:	682b      	ldr	r3, [r5, #0]
 8021ac4:	b103      	cbz	r3, 8021ac8 <_fstat_r+0x1c>
 8021ac6:	6023      	str	r3, [r4, #0]
 8021ac8:	bd38      	pop	{r3, r4, r5, pc}
 8021aca:	bf00      	nop
 8021acc:	200037a8 	.word	0x200037a8

08021ad0 <_isatty_r>:
 8021ad0:	b538      	push	{r3, r4, r5, lr}
 8021ad2:	4d06      	ldr	r5, [pc, #24]	@ (8021aec <_isatty_r+0x1c>)
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	4604      	mov	r4, r0
 8021ad8:	4608      	mov	r0, r1
 8021ada:	602b      	str	r3, [r5, #0]
 8021adc:	f7e2 fa44 	bl	8003f68 <_isatty>
 8021ae0:	1c43      	adds	r3, r0, #1
 8021ae2:	d102      	bne.n	8021aea <_isatty_r+0x1a>
 8021ae4:	682b      	ldr	r3, [r5, #0]
 8021ae6:	b103      	cbz	r3, 8021aea <_isatty_r+0x1a>
 8021ae8:	6023      	str	r3, [r4, #0]
 8021aea:	bd38      	pop	{r3, r4, r5, pc}
 8021aec:	200037a8 	.word	0x200037a8

08021af0 <nan>:
 8021af0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021af8 <nan+0x8>
 8021af4:	4770      	bx	lr
 8021af6:	bf00      	nop
 8021af8:	00000000 	.word	0x00000000
 8021afc:	7ff80000 	.word	0x7ff80000

08021b00 <abort>:
 8021b00:	b508      	push	{r3, lr}
 8021b02:	2006      	movs	r0, #6
 8021b04:	f000 fbc4 	bl	8022290 <raise>
 8021b08:	2001      	movs	r0, #1
 8021b0a:	f7e2 f9cd 	bl	8003ea8 <_exit>

08021b0e <_calloc_r>:
 8021b0e:	b570      	push	{r4, r5, r6, lr}
 8021b10:	fba1 5402 	umull	r5, r4, r1, r2
 8021b14:	b93c      	cbnz	r4, 8021b26 <_calloc_r+0x18>
 8021b16:	4629      	mov	r1, r5
 8021b18:	f7fb ff0c 	bl	801d934 <_malloc_r>
 8021b1c:	4606      	mov	r6, r0
 8021b1e:	b928      	cbnz	r0, 8021b2c <_calloc_r+0x1e>
 8021b20:	2600      	movs	r6, #0
 8021b22:	4630      	mov	r0, r6
 8021b24:	bd70      	pop	{r4, r5, r6, pc}
 8021b26:	220c      	movs	r2, #12
 8021b28:	6002      	str	r2, [r0, #0]
 8021b2a:	e7f9      	b.n	8021b20 <_calloc_r+0x12>
 8021b2c:	462a      	mov	r2, r5
 8021b2e:	4621      	mov	r1, r4
 8021b30:	f7fd f954 	bl	801eddc <memset>
 8021b34:	e7f5      	b.n	8021b22 <_calloc_r+0x14>

08021b36 <rshift>:
 8021b36:	6903      	ldr	r3, [r0, #16]
 8021b38:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b40:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021b44:	f100 0414 	add.w	r4, r0, #20
 8021b48:	dd45      	ble.n	8021bd6 <rshift+0xa0>
 8021b4a:	f011 011f 	ands.w	r1, r1, #31
 8021b4e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021b52:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021b56:	d10c      	bne.n	8021b72 <rshift+0x3c>
 8021b58:	f100 0710 	add.w	r7, r0, #16
 8021b5c:	4629      	mov	r1, r5
 8021b5e:	42b1      	cmp	r1, r6
 8021b60:	d334      	bcc.n	8021bcc <rshift+0x96>
 8021b62:	1a9b      	subs	r3, r3, r2
 8021b64:	009b      	lsls	r3, r3, #2
 8021b66:	1eea      	subs	r2, r5, #3
 8021b68:	4296      	cmp	r6, r2
 8021b6a:	bf38      	it	cc
 8021b6c:	2300      	movcc	r3, #0
 8021b6e:	4423      	add	r3, r4
 8021b70:	e015      	b.n	8021b9e <rshift+0x68>
 8021b72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021b76:	f1c1 0820 	rsb	r8, r1, #32
 8021b7a:	40cf      	lsrs	r7, r1
 8021b7c:	f105 0e04 	add.w	lr, r5, #4
 8021b80:	46a1      	mov	r9, r4
 8021b82:	4576      	cmp	r6, lr
 8021b84:	46f4      	mov	ip, lr
 8021b86:	d815      	bhi.n	8021bb4 <rshift+0x7e>
 8021b88:	1a9a      	subs	r2, r3, r2
 8021b8a:	0092      	lsls	r2, r2, #2
 8021b8c:	3a04      	subs	r2, #4
 8021b8e:	3501      	adds	r5, #1
 8021b90:	42ae      	cmp	r6, r5
 8021b92:	bf38      	it	cc
 8021b94:	2200      	movcc	r2, #0
 8021b96:	18a3      	adds	r3, r4, r2
 8021b98:	50a7      	str	r7, [r4, r2]
 8021b9a:	b107      	cbz	r7, 8021b9e <rshift+0x68>
 8021b9c:	3304      	adds	r3, #4
 8021b9e:	1b1a      	subs	r2, r3, r4
 8021ba0:	42a3      	cmp	r3, r4
 8021ba2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021ba6:	bf08      	it	eq
 8021ba8:	2300      	moveq	r3, #0
 8021baa:	6102      	str	r2, [r0, #16]
 8021bac:	bf08      	it	eq
 8021bae:	6143      	streq	r3, [r0, #20]
 8021bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021bb4:	f8dc c000 	ldr.w	ip, [ip]
 8021bb8:	fa0c fc08 	lsl.w	ip, ip, r8
 8021bbc:	ea4c 0707 	orr.w	r7, ip, r7
 8021bc0:	f849 7b04 	str.w	r7, [r9], #4
 8021bc4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021bc8:	40cf      	lsrs	r7, r1
 8021bca:	e7da      	b.n	8021b82 <rshift+0x4c>
 8021bcc:	f851 cb04 	ldr.w	ip, [r1], #4
 8021bd0:	f847 cf04 	str.w	ip, [r7, #4]!
 8021bd4:	e7c3      	b.n	8021b5e <rshift+0x28>
 8021bd6:	4623      	mov	r3, r4
 8021bd8:	e7e1      	b.n	8021b9e <rshift+0x68>

08021bda <__hexdig_fun>:
 8021bda:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021bde:	2b09      	cmp	r3, #9
 8021be0:	d802      	bhi.n	8021be8 <__hexdig_fun+0xe>
 8021be2:	3820      	subs	r0, #32
 8021be4:	b2c0      	uxtb	r0, r0
 8021be6:	4770      	bx	lr
 8021be8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021bec:	2b05      	cmp	r3, #5
 8021bee:	d801      	bhi.n	8021bf4 <__hexdig_fun+0x1a>
 8021bf0:	3847      	subs	r0, #71	@ 0x47
 8021bf2:	e7f7      	b.n	8021be4 <__hexdig_fun+0xa>
 8021bf4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021bf8:	2b05      	cmp	r3, #5
 8021bfa:	d801      	bhi.n	8021c00 <__hexdig_fun+0x26>
 8021bfc:	3827      	subs	r0, #39	@ 0x27
 8021bfe:	e7f1      	b.n	8021be4 <__hexdig_fun+0xa>
 8021c00:	2000      	movs	r0, #0
 8021c02:	4770      	bx	lr

08021c04 <__gethex>:
 8021c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c08:	b085      	sub	sp, #20
 8021c0a:	468a      	mov	sl, r1
 8021c0c:	9302      	str	r3, [sp, #8]
 8021c0e:	680b      	ldr	r3, [r1, #0]
 8021c10:	9001      	str	r0, [sp, #4]
 8021c12:	4690      	mov	r8, r2
 8021c14:	1c9c      	adds	r4, r3, #2
 8021c16:	46a1      	mov	r9, r4
 8021c18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021c1c:	2830      	cmp	r0, #48	@ 0x30
 8021c1e:	d0fa      	beq.n	8021c16 <__gethex+0x12>
 8021c20:	eba9 0303 	sub.w	r3, r9, r3
 8021c24:	f1a3 0b02 	sub.w	fp, r3, #2
 8021c28:	f7ff ffd7 	bl	8021bda <__hexdig_fun>
 8021c2c:	4605      	mov	r5, r0
 8021c2e:	2800      	cmp	r0, #0
 8021c30:	d168      	bne.n	8021d04 <__gethex+0x100>
 8021c32:	49a0      	ldr	r1, [pc, #640]	@ (8021eb4 <__gethex+0x2b0>)
 8021c34:	2201      	movs	r2, #1
 8021c36:	4648      	mov	r0, r9
 8021c38:	f7ff ff26 	bl	8021a88 <strncmp>
 8021c3c:	4607      	mov	r7, r0
 8021c3e:	2800      	cmp	r0, #0
 8021c40:	d167      	bne.n	8021d12 <__gethex+0x10e>
 8021c42:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021c46:	4626      	mov	r6, r4
 8021c48:	f7ff ffc7 	bl	8021bda <__hexdig_fun>
 8021c4c:	2800      	cmp	r0, #0
 8021c4e:	d062      	beq.n	8021d16 <__gethex+0x112>
 8021c50:	4623      	mov	r3, r4
 8021c52:	7818      	ldrb	r0, [r3, #0]
 8021c54:	2830      	cmp	r0, #48	@ 0x30
 8021c56:	4699      	mov	r9, r3
 8021c58:	f103 0301 	add.w	r3, r3, #1
 8021c5c:	d0f9      	beq.n	8021c52 <__gethex+0x4e>
 8021c5e:	f7ff ffbc 	bl	8021bda <__hexdig_fun>
 8021c62:	fab0 f580 	clz	r5, r0
 8021c66:	096d      	lsrs	r5, r5, #5
 8021c68:	f04f 0b01 	mov.w	fp, #1
 8021c6c:	464a      	mov	r2, r9
 8021c6e:	4616      	mov	r6, r2
 8021c70:	3201      	adds	r2, #1
 8021c72:	7830      	ldrb	r0, [r6, #0]
 8021c74:	f7ff ffb1 	bl	8021bda <__hexdig_fun>
 8021c78:	2800      	cmp	r0, #0
 8021c7a:	d1f8      	bne.n	8021c6e <__gethex+0x6a>
 8021c7c:	498d      	ldr	r1, [pc, #564]	@ (8021eb4 <__gethex+0x2b0>)
 8021c7e:	2201      	movs	r2, #1
 8021c80:	4630      	mov	r0, r6
 8021c82:	f7ff ff01 	bl	8021a88 <strncmp>
 8021c86:	2800      	cmp	r0, #0
 8021c88:	d13f      	bne.n	8021d0a <__gethex+0x106>
 8021c8a:	b944      	cbnz	r4, 8021c9e <__gethex+0x9a>
 8021c8c:	1c74      	adds	r4, r6, #1
 8021c8e:	4622      	mov	r2, r4
 8021c90:	4616      	mov	r6, r2
 8021c92:	3201      	adds	r2, #1
 8021c94:	7830      	ldrb	r0, [r6, #0]
 8021c96:	f7ff ffa0 	bl	8021bda <__hexdig_fun>
 8021c9a:	2800      	cmp	r0, #0
 8021c9c:	d1f8      	bne.n	8021c90 <__gethex+0x8c>
 8021c9e:	1ba4      	subs	r4, r4, r6
 8021ca0:	00a7      	lsls	r7, r4, #2
 8021ca2:	7833      	ldrb	r3, [r6, #0]
 8021ca4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021ca8:	2b50      	cmp	r3, #80	@ 0x50
 8021caa:	d13e      	bne.n	8021d2a <__gethex+0x126>
 8021cac:	7873      	ldrb	r3, [r6, #1]
 8021cae:	2b2b      	cmp	r3, #43	@ 0x2b
 8021cb0:	d033      	beq.n	8021d1a <__gethex+0x116>
 8021cb2:	2b2d      	cmp	r3, #45	@ 0x2d
 8021cb4:	d034      	beq.n	8021d20 <__gethex+0x11c>
 8021cb6:	1c71      	adds	r1, r6, #1
 8021cb8:	2400      	movs	r4, #0
 8021cba:	7808      	ldrb	r0, [r1, #0]
 8021cbc:	f7ff ff8d 	bl	8021bda <__hexdig_fun>
 8021cc0:	1e43      	subs	r3, r0, #1
 8021cc2:	b2db      	uxtb	r3, r3
 8021cc4:	2b18      	cmp	r3, #24
 8021cc6:	d830      	bhi.n	8021d2a <__gethex+0x126>
 8021cc8:	f1a0 0210 	sub.w	r2, r0, #16
 8021ccc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021cd0:	f7ff ff83 	bl	8021bda <__hexdig_fun>
 8021cd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8021cd8:	fa5f fc8c 	uxtb.w	ip, ip
 8021cdc:	f1bc 0f18 	cmp.w	ip, #24
 8021ce0:	f04f 030a 	mov.w	r3, #10
 8021ce4:	d91e      	bls.n	8021d24 <__gethex+0x120>
 8021ce6:	b104      	cbz	r4, 8021cea <__gethex+0xe6>
 8021ce8:	4252      	negs	r2, r2
 8021cea:	4417      	add	r7, r2
 8021cec:	f8ca 1000 	str.w	r1, [sl]
 8021cf0:	b1ed      	cbz	r5, 8021d2e <__gethex+0x12a>
 8021cf2:	f1bb 0f00 	cmp.w	fp, #0
 8021cf6:	bf0c      	ite	eq
 8021cf8:	2506      	moveq	r5, #6
 8021cfa:	2500      	movne	r5, #0
 8021cfc:	4628      	mov	r0, r5
 8021cfe:	b005      	add	sp, #20
 8021d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d04:	2500      	movs	r5, #0
 8021d06:	462c      	mov	r4, r5
 8021d08:	e7b0      	b.n	8021c6c <__gethex+0x68>
 8021d0a:	2c00      	cmp	r4, #0
 8021d0c:	d1c7      	bne.n	8021c9e <__gethex+0x9a>
 8021d0e:	4627      	mov	r7, r4
 8021d10:	e7c7      	b.n	8021ca2 <__gethex+0x9e>
 8021d12:	464e      	mov	r6, r9
 8021d14:	462f      	mov	r7, r5
 8021d16:	2501      	movs	r5, #1
 8021d18:	e7c3      	b.n	8021ca2 <__gethex+0x9e>
 8021d1a:	2400      	movs	r4, #0
 8021d1c:	1cb1      	adds	r1, r6, #2
 8021d1e:	e7cc      	b.n	8021cba <__gethex+0xb6>
 8021d20:	2401      	movs	r4, #1
 8021d22:	e7fb      	b.n	8021d1c <__gethex+0x118>
 8021d24:	fb03 0002 	mla	r0, r3, r2, r0
 8021d28:	e7ce      	b.n	8021cc8 <__gethex+0xc4>
 8021d2a:	4631      	mov	r1, r6
 8021d2c:	e7de      	b.n	8021cec <__gethex+0xe8>
 8021d2e:	eba6 0309 	sub.w	r3, r6, r9
 8021d32:	3b01      	subs	r3, #1
 8021d34:	4629      	mov	r1, r5
 8021d36:	2b07      	cmp	r3, #7
 8021d38:	dc0a      	bgt.n	8021d50 <__gethex+0x14c>
 8021d3a:	9801      	ldr	r0, [sp, #4]
 8021d3c:	f7fe f82e 	bl	801fd9c <_Balloc>
 8021d40:	4604      	mov	r4, r0
 8021d42:	b940      	cbnz	r0, 8021d56 <__gethex+0x152>
 8021d44:	4b5c      	ldr	r3, [pc, #368]	@ (8021eb8 <__gethex+0x2b4>)
 8021d46:	4602      	mov	r2, r0
 8021d48:	21e4      	movs	r1, #228	@ 0xe4
 8021d4a:	485c      	ldr	r0, [pc, #368]	@ (8021ebc <__gethex+0x2b8>)
 8021d4c:	f7fd f972 	bl	801f034 <__assert_func>
 8021d50:	3101      	adds	r1, #1
 8021d52:	105b      	asrs	r3, r3, #1
 8021d54:	e7ef      	b.n	8021d36 <__gethex+0x132>
 8021d56:	f100 0a14 	add.w	sl, r0, #20
 8021d5a:	2300      	movs	r3, #0
 8021d5c:	4655      	mov	r5, sl
 8021d5e:	469b      	mov	fp, r3
 8021d60:	45b1      	cmp	r9, r6
 8021d62:	d337      	bcc.n	8021dd4 <__gethex+0x1d0>
 8021d64:	f845 bb04 	str.w	fp, [r5], #4
 8021d68:	eba5 050a 	sub.w	r5, r5, sl
 8021d6c:	10ad      	asrs	r5, r5, #2
 8021d6e:	6125      	str	r5, [r4, #16]
 8021d70:	4658      	mov	r0, fp
 8021d72:	f7fe f905 	bl	801ff80 <__hi0bits>
 8021d76:	016d      	lsls	r5, r5, #5
 8021d78:	f8d8 6000 	ldr.w	r6, [r8]
 8021d7c:	1a2d      	subs	r5, r5, r0
 8021d7e:	42b5      	cmp	r5, r6
 8021d80:	dd54      	ble.n	8021e2c <__gethex+0x228>
 8021d82:	1bad      	subs	r5, r5, r6
 8021d84:	4629      	mov	r1, r5
 8021d86:	4620      	mov	r0, r4
 8021d88:	f7fe fc99 	bl	80206be <__any_on>
 8021d8c:	4681      	mov	r9, r0
 8021d8e:	b178      	cbz	r0, 8021db0 <__gethex+0x1ac>
 8021d90:	1e6b      	subs	r3, r5, #1
 8021d92:	1159      	asrs	r1, r3, #5
 8021d94:	f003 021f 	and.w	r2, r3, #31
 8021d98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021d9c:	f04f 0901 	mov.w	r9, #1
 8021da0:	fa09 f202 	lsl.w	r2, r9, r2
 8021da4:	420a      	tst	r2, r1
 8021da6:	d003      	beq.n	8021db0 <__gethex+0x1ac>
 8021da8:	454b      	cmp	r3, r9
 8021daa:	dc36      	bgt.n	8021e1a <__gethex+0x216>
 8021dac:	f04f 0902 	mov.w	r9, #2
 8021db0:	4629      	mov	r1, r5
 8021db2:	4620      	mov	r0, r4
 8021db4:	f7ff febf 	bl	8021b36 <rshift>
 8021db8:	442f      	add	r7, r5
 8021dba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021dbe:	42bb      	cmp	r3, r7
 8021dc0:	da42      	bge.n	8021e48 <__gethex+0x244>
 8021dc2:	9801      	ldr	r0, [sp, #4]
 8021dc4:	4621      	mov	r1, r4
 8021dc6:	f7fe f829 	bl	801fe1c <_Bfree>
 8021dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021dcc:	2300      	movs	r3, #0
 8021dce:	6013      	str	r3, [r2, #0]
 8021dd0:	25a3      	movs	r5, #163	@ 0xa3
 8021dd2:	e793      	b.n	8021cfc <__gethex+0xf8>
 8021dd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021dd8:	2a2e      	cmp	r2, #46	@ 0x2e
 8021dda:	d012      	beq.n	8021e02 <__gethex+0x1fe>
 8021ddc:	2b20      	cmp	r3, #32
 8021dde:	d104      	bne.n	8021dea <__gethex+0x1e6>
 8021de0:	f845 bb04 	str.w	fp, [r5], #4
 8021de4:	f04f 0b00 	mov.w	fp, #0
 8021de8:	465b      	mov	r3, fp
 8021dea:	7830      	ldrb	r0, [r6, #0]
 8021dec:	9303      	str	r3, [sp, #12]
 8021dee:	f7ff fef4 	bl	8021bda <__hexdig_fun>
 8021df2:	9b03      	ldr	r3, [sp, #12]
 8021df4:	f000 000f 	and.w	r0, r0, #15
 8021df8:	4098      	lsls	r0, r3
 8021dfa:	ea4b 0b00 	orr.w	fp, fp, r0
 8021dfe:	3304      	adds	r3, #4
 8021e00:	e7ae      	b.n	8021d60 <__gethex+0x15c>
 8021e02:	45b1      	cmp	r9, r6
 8021e04:	d8ea      	bhi.n	8021ddc <__gethex+0x1d8>
 8021e06:	492b      	ldr	r1, [pc, #172]	@ (8021eb4 <__gethex+0x2b0>)
 8021e08:	9303      	str	r3, [sp, #12]
 8021e0a:	2201      	movs	r2, #1
 8021e0c:	4630      	mov	r0, r6
 8021e0e:	f7ff fe3b 	bl	8021a88 <strncmp>
 8021e12:	9b03      	ldr	r3, [sp, #12]
 8021e14:	2800      	cmp	r0, #0
 8021e16:	d1e1      	bne.n	8021ddc <__gethex+0x1d8>
 8021e18:	e7a2      	b.n	8021d60 <__gethex+0x15c>
 8021e1a:	1ea9      	subs	r1, r5, #2
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	f7fe fc4e 	bl	80206be <__any_on>
 8021e22:	2800      	cmp	r0, #0
 8021e24:	d0c2      	beq.n	8021dac <__gethex+0x1a8>
 8021e26:	f04f 0903 	mov.w	r9, #3
 8021e2a:	e7c1      	b.n	8021db0 <__gethex+0x1ac>
 8021e2c:	da09      	bge.n	8021e42 <__gethex+0x23e>
 8021e2e:	1b75      	subs	r5, r6, r5
 8021e30:	4621      	mov	r1, r4
 8021e32:	9801      	ldr	r0, [sp, #4]
 8021e34:	462a      	mov	r2, r5
 8021e36:	f7fe fa09 	bl	802024c <__lshift>
 8021e3a:	1b7f      	subs	r7, r7, r5
 8021e3c:	4604      	mov	r4, r0
 8021e3e:	f100 0a14 	add.w	sl, r0, #20
 8021e42:	f04f 0900 	mov.w	r9, #0
 8021e46:	e7b8      	b.n	8021dba <__gethex+0x1b6>
 8021e48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021e4c:	42bd      	cmp	r5, r7
 8021e4e:	dd6f      	ble.n	8021f30 <__gethex+0x32c>
 8021e50:	1bed      	subs	r5, r5, r7
 8021e52:	42ae      	cmp	r6, r5
 8021e54:	dc34      	bgt.n	8021ec0 <__gethex+0x2bc>
 8021e56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021e5a:	2b02      	cmp	r3, #2
 8021e5c:	d022      	beq.n	8021ea4 <__gethex+0x2a0>
 8021e5e:	2b03      	cmp	r3, #3
 8021e60:	d024      	beq.n	8021eac <__gethex+0x2a8>
 8021e62:	2b01      	cmp	r3, #1
 8021e64:	d115      	bne.n	8021e92 <__gethex+0x28e>
 8021e66:	42ae      	cmp	r6, r5
 8021e68:	d113      	bne.n	8021e92 <__gethex+0x28e>
 8021e6a:	2e01      	cmp	r6, #1
 8021e6c:	d10b      	bne.n	8021e86 <__gethex+0x282>
 8021e6e:	9a02      	ldr	r2, [sp, #8]
 8021e70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021e74:	6013      	str	r3, [r2, #0]
 8021e76:	2301      	movs	r3, #1
 8021e78:	6123      	str	r3, [r4, #16]
 8021e7a:	f8ca 3000 	str.w	r3, [sl]
 8021e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e80:	2562      	movs	r5, #98	@ 0x62
 8021e82:	601c      	str	r4, [r3, #0]
 8021e84:	e73a      	b.n	8021cfc <__gethex+0xf8>
 8021e86:	1e71      	subs	r1, r6, #1
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f7fe fc18 	bl	80206be <__any_on>
 8021e8e:	2800      	cmp	r0, #0
 8021e90:	d1ed      	bne.n	8021e6e <__gethex+0x26a>
 8021e92:	9801      	ldr	r0, [sp, #4]
 8021e94:	4621      	mov	r1, r4
 8021e96:	f7fd ffc1 	bl	801fe1c <_Bfree>
 8021e9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021e9c:	2300      	movs	r3, #0
 8021e9e:	6013      	str	r3, [r2, #0]
 8021ea0:	2550      	movs	r5, #80	@ 0x50
 8021ea2:	e72b      	b.n	8021cfc <__gethex+0xf8>
 8021ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d1f3      	bne.n	8021e92 <__gethex+0x28e>
 8021eaa:	e7e0      	b.n	8021e6e <__gethex+0x26a>
 8021eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d1dd      	bne.n	8021e6e <__gethex+0x26a>
 8021eb2:	e7ee      	b.n	8021e92 <__gethex+0x28e>
 8021eb4:	08025950 	.word	0x08025950
 8021eb8:	080257e4 	.word	0x080257e4
 8021ebc:	080259c1 	.word	0x080259c1
 8021ec0:	1e6f      	subs	r7, r5, #1
 8021ec2:	f1b9 0f00 	cmp.w	r9, #0
 8021ec6:	d130      	bne.n	8021f2a <__gethex+0x326>
 8021ec8:	b127      	cbz	r7, 8021ed4 <__gethex+0x2d0>
 8021eca:	4639      	mov	r1, r7
 8021ecc:	4620      	mov	r0, r4
 8021ece:	f7fe fbf6 	bl	80206be <__any_on>
 8021ed2:	4681      	mov	r9, r0
 8021ed4:	117a      	asrs	r2, r7, #5
 8021ed6:	2301      	movs	r3, #1
 8021ed8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021edc:	f007 071f 	and.w	r7, r7, #31
 8021ee0:	40bb      	lsls	r3, r7
 8021ee2:	4213      	tst	r3, r2
 8021ee4:	4629      	mov	r1, r5
 8021ee6:	4620      	mov	r0, r4
 8021ee8:	bf18      	it	ne
 8021eea:	f049 0902 	orrne.w	r9, r9, #2
 8021eee:	f7ff fe22 	bl	8021b36 <rshift>
 8021ef2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021ef6:	1b76      	subs	r6, r6, r5
 8021ef8:	2502      	movs	r5, #2
 8021efa:	f1b9 0f00 	cmp.w	r9, #0
 8021efe:	d047      	beq.n	8021f90 <__gethex+0x38c>
 8021f00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021f04:	2b02      	cmp	r3, #2
 8021f06:	d015      	beq.n	8021f34 <__gethex+0x330>
 8021f08:	2b03      	cmp	r3, #3
 8021f0a:	d017      	beq.n	8021f3c <__gethex+0x338>
 8021f0c:	2b01      	cmp	r3, #1
 8021f0e:	d109      	bne.n	8021f24 <__gethex+0x320>
 8021f10:	f019 0f02 	tst.w	r9, #2
 8021f14:	d006      	beq.n	8021f24 <__gethex+0x320>
 8021f16:	f8da 3000 	ldr.w	r3, [sl]
 8021f1a:	ea49 0903 	orr.w	r9, r9, r3
 8021f1e:	f019 0f01 	tst.w	r9, #1
 8021f22:	d10e      	bne.n	8021f42 <__gethex+0x33e>
 8021f24:	f045 0510 	orr.w	r5, r5, #16
 8021f28:	e032      	b.n	8021f90 <__gethex+0x38c>
 8021f2a:	f04f 0901 	mov.w	r9, #1
 8021f2e:	e7d1      	b.n	8021ed4 <__gethex+0x2d0>
 8021f30:	2501      	movs	r5, #1
 8021f32:	e7e2      	b.n	8021efa <__gethex+0x2f6>
 8021f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f36:	f1c3 0301 	rsb	r3, r3, #1
 8021f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d0f0      	beq.n	8021f24 <__gethex+0x320>
 8021f42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021f46:	f104 0314 	add.w	r3, r4, #20
 8021f4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021f4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021f52:	f04f 0c00 	mov.w	ip, #0
 8021f56:	4618      	mov	r0, r3
 8021f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021f60:	d01b      	beq.n	8021f9a <__gethex+0x396>
 8021f62:	3201      	adds	r2, #1
 8021f64:	6002      	str	r2, [r0, #0]
 8021f66:	2d02      	cmp	r5, #2
 8021f68:	f104 0314 	add.w	r3, r4, #20
 8021f6c:	d13c      	bne.n	8021fe8 <__gethex+0x3e4>
 8021f6e:	f8d8 2000 	ldr.w	r2, [r8]
 8021f72:	3a01      	subs	r2, #1
 8021f74:	42b2      	cmp	r2, r6
 8021f76:	d109      	bne.n	8021f8c <__gethex+0x388>
 8021f78:	1171      	asrs	r1, r6, #5
 8021f7a:	2201      	movs	r2, #1
 8021f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021f80:	f006 061f 	and.w	r6, r6, #31
 8021f84:	fa02 f606 	lsl.w	r6, r2, r6
 8021f88:	421e      	tst	r6, r3
 8021f8a:	d13a      	bne.n	8022002 <__gethex+0x3fe>
 8021f8c:	f045 0520 	orr.w	r5, r5, #32
 8021f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f92:	601c      	str	r4, [r3, #0]
 8021f94:	9b02      	ldr	r3, [sp, #8]
 8021f96:	601f      	str	r7, [r3, #0]
 8021f98:	e6b0      	b.n	8021cfc <__gethex+0xf8>
 8021f9a:	4299      	cmp	r1, r3
 8021f9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8021fa0:	d8d9      	bhi.n	8021f56 <__gethex+0x352>
 8021fa2:	68a3      	ldr	r3, [r4, #8]
 8021fa4:	459b      	cmp	fp, r3
 8021fa6:	db17      	blt.n	8021fd8 <__gethex+0x3d4>
 8021fa8:	6861      	ldr	r1, [r4, #4]
 8021faa:	9801      	ldr	r0, [sp, #4]
 8021fac:	3101      	adds	r1, #1
 8021fae:	f7fd fef5 	bl	801fd9c <_Balloc>
 8021fb2:	4681      	mov	r9, r0
 8021fb4:	b918      	cbnz	r0, 8021fbe <__gethex+0x3ba>
 8021fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8022020 <__gethex+0x41c>)
 8021fb8:	4602      	mov	r2, r0
 8021fba:	2184      	movs	r1, #132	@ 0x84
 8021fbc:	e6c5      	b.n	8021d4a <__gethex+0x146>
 8021fbe:	6922      	ldr	r2, [r4, #16]
 8021fc0:	3202      	adds	r2, #2
 8021fc2:	f104 010c 	add.w	r1, r4, #12
 8021fc6:	0092      	lsls	r2, r2, #2
 8021fc8:	300c      	adds	r0, #12
 8021fca:	f7fd f81e 	bl	801f00a <memcpy>
 8021fce:	4621      	mov	r1, r4
 8021fd0:	9801      	ldr	r0, [sp, #4]
 8021fd2:	f7fd ff23 	bl	801fe1c <_Bfree>
 8021fd6:	464c      	mov	r4, r9
 8021fd8:	6923      	ldr	r3, [r4, #16]
 8021fda:	1c5a      	adds	r2, r3, #1
 8021fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021fe0:	6122      	str	r2, [r4, #16]
 8021fe2:	2201      	movs	r2, #1
 8021fe4:	615a      	str	r2, [r3, #20]
 8021fe6:	e7be      	b.n	8021f66 <__gethex+0x362>
 8021fe8:	6922      	ldr	r2, [r4, #16]
 8021fea:	455a      	cmp	r2, fp
 8021fec:	dd0b      	ble.n	8022006 <__gethex+0x402>
 8021fee:	2101      	movs	r1, #1
 8021ff0:	4620      	mov	r0, r4
 8021ff2:	f7ff fda0 	bl	8021b36 <rshift>
 8021ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021ffa:	3701      	adds	r7, #1
 8021ffc:	42bb      	cmp	r3, r7
 8021ffe:	f6ff aee0 	blt.w	8021dc2 <__gethex+0x1be>
 8022002:	2501      	movs	r5, #1
 8022004:	e7c2      	b.n	8021f8c <__gethex+0x388>
 8022006:	f016 061f 	ands.w	r6, r6, #31
 802200a:	d0fa      	beq.n	8022002 <__gethex+0x3fe>
 802200c:	4453      	add	r3, sl
 802200e:	f1c6 0620 	rsb	r6, r6, #32
 8022012:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8022016:	f7fd ffb3 	bl	801ff80 <__hi0bits>
 802201a:	42b0      	cmp	r0, r6
 802201c:	dbe7      	blt.n	8021fee <__gethex+0x3ea>
 802201e:	e7f0      	b.n	8022002 <__gethex+0x3fe>
 8022020:	080257e4 	.word	0x080257e4

08022024 <L_shift>:
 8022024:	f1c2 0208 	rsb	r2, r2, #8
 8022028:	0092      	lsls	r2, r2, #2
 802202a:	b570      	push	{r4, r5, r6, lr}
 802202c:	f1c2 0620 	rsb	r6, r2, #32
 8022030:	6843      	ldr	r3, [r0, #4]
 8022032:	6804      	ldr	r4, [r0, #0]
 8022034:	fa03 f506 	lsl.w	r5, r3, r6
 8022038:	432c      	orrs	r4, r5
 802203a:	40d3      	lsrs	r3, r2
 802203c:	6004      	str	r4, [r0, #0]
 802203e:	f840 3f04 	str.w	r3, [r0, #4]!
 8022042:	4288      	cmp	r0, r1
 8022044:	d3f4      	bcc.n	8022030 <L_shift+0xc>
 8022046:	bd70      	pop	{r4, r5, r6, pc}

08022048 <__match>:
 8022048:	b530      	push	{r4, r5, lr}
 802204a:	6803      	ldr	r3, [r0, #0]
 802204c:	3301      	adds	r3, #1
 802204e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022052:	b914      	cbnz	r4, 802205a <__match+0x12>
 8022054:	6003      	str	r3, [r0, #0]
 8022056:	2001      	movs	r0, #1
 8022058:	bd30      	pop	{r4, r5, pc}
 802205a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802205e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8022062:	2d19      	cmp	r5, #25
 8022064:	bf98      	it	ls
 8022066:	3220      	addls	r2, #32
 8022068:	42a2      	cmp	r2, r4
 802206a:	d0f0      	beq.n	802204e <__match+0x6>
 802206c:	2000      	movs	r0, #0
 802206e:	e7f3      	b.n	8022058 <__match+0x10>

08022070 <__hexnan>:
 8022070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022074:	680b      	ldr	r3, [r1, #0]
 8022076:	6801      	ldr	r1, [r0, #0]
 8022078:	115e      	asrs	r6, r3, #5
 802207a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802207e:	f013 031f 	ands.w	r3, r3, #31
 8022082:	b087      	sub	sp, #28
 8022084:	bf18      	it	ne
 8022086:	3604      	addne	r6, #4
 8022088:	2500      	movs	r5, #0
 802208a:	1f37      	subs	r7, r6, #4
 802208c:	4682      	mov	sl, r0
 802208e:	4690      	mov	r8, r2
 8022090:	9301      	str	r3, [sp, #4]
 8022092:	f846 5c04 	str.w	r5, [r6, #-4]
 8022096:	46b9      	mov	r9, r7
 8022098:	463c      	mov	r4, r7
 802209a:	9502      	str	r5, [sp, #8]
 802209c:	46ab      	mov	fp, r5
 802209e:	784a      	ldrb	r2, [r1, #1]
 80220a0:	1c4b      	adds	r3, r1, #1
 80220a2:	9303      	str	r3, [sp, #12]
 80220a4:	b342      	cbz	r2, 80220f8 <__hexnan+0x88>
 80220a6:	4610      	mov	r0, r2
 80220a8:	9105      	str	r1, [sp, #20]
 80220aa:	9204      	str	r2, [sp, #16]
 80220ac:	f7ff fd95 	bl	8021bda <__hexdig_fun>
 80220b0:	2800      	cmp	r0, #0
 80220b2:	d151      	bne.n	8022158 <__hexnan+0xe8>
 80220b4:	9a04      	ldr	r2, [sp, #16]
 80220b6:	9905      	ldr	r1, [sp, #20]
 80220b8:	2a20      	cmp	r2, #32
 80220ba:	d818      	bhi.n	80220ee <__hexnan+0x7e>
 80220bc:	9b02      	ldr	r3, [sp, #8]
 80220be:	459b      	cmp	fp, r3
 80220c0:	dd13      	ble.n	80220ea <__hexnan+0x7a>
 80220c2:	454c      	cmp	r4, r9
 80220c4:	d206      	bcs.n	80220d4 <__hexnan+0x64>
 80220c6:	2d07      	cmp	r5, #7
 80220c8:	dc04      	bgt.n	80220d4 <__hexnan+0x64>
 80220ca:	462a      	mov	r2, r5
 80220cc:	4649      	mov	r1, r9
 80220ce:	4620      	mov	r0, r4
 80220d0:	f7ff ffa8 	bl	8022024 <L_shift>
 80220d4:	4544      	cmp	r4, r8
 80220d6:	d952      	bls.n	802217e <__hexnan+0x10e>
 80220d8:	2300      	movs	r3, #0
 80220da:	f1a4 0904 	sub.w	r9, r4, #4
 80220de:	f844 3c04 	str.w	r3, [r4, #-4]
 80220e2:	f8cd b008 	str.w	fp, [sp, #8]
 80220e6:	464c      	mov	r4, r9
 80220e8:	461d      	mov	r5, r3
 80220ea:	9903      	ldr	r1, [sp, #12]
 80220ec:	e7d7      	b.n	802209e <__hexnan+0x2e>
 80220ee:	2a29      	cmp	r2, #41	@ 0x29
 80220f0:	d157      	bne.n	80221a2 <__hexnan+0x132>
 80220f2:	3102      	adds	r1, #2
 80220f4:	f8ca 1000 	str.w	r1, [sl]
 80220f8:	f1bb 0f00 	cmp.w	fp, #0
 80220fc:	d051      	beq.n	80221a2 <__hexnan+0x132>
 80220fe:	454c      	cmp	r4, r9
 8022100:	d206      	bcs.n	8022110 <__hexnan+0xa0>
 8022102:	2d07      	cmp	r5, #7
 8022104:	dc04      	bgt.n	8022110 <__hexnan+0xa0>
 8022106:	462a      	mov	r2, r5
 8022108:	4649      	mov	r1, r9
 802210a:	4620      	mov	r0, r4
 802210c:	f7ff ff8a 	bl	8022024 <L_shift>
 8022110:	4544      	cmp	r4, r8
 8022112:	d936      	bls.n	8022182 <__hexnan+0x112>
 8022114:	f1a8 0204 	sub.w	r2, r8, #4
 8022118:	4623      	mov	r3, r4
 802211a:	f853 1b04 	ldr.w	r1, [r3], #4
 802211e:	f842 1f04 	str.w	r1, [r2, #4]!
 8022122:	429f      	cmp	r7, r3
 8022124:	d2f9      	bcs.n	802211a <__hexnan+0xaa>
 8022126:	1b3b      	subs	r3, r7, r4
 8022128:	f023 0303 	bic.w	r3, r3, #3
 802212c:	3304      	adds	r3, #4
 802212e:	3401      	adds	r4, #1
 8022130:	3e03      	subs	r6, #3
 8022132:	42b4      	cmp	r4, r6
 8022134:	bf88      	it	hi
 8022136:	2304      	movhi	r3, #4
 8022138:	4443      	add	r3, r8
 802213a:	2200      	movs	r2, #0
 802213c:	f843 2b04 	str.w	r2, [r3], #4
 8022140:	429f      	cmp	r7, r3
 8022142:	d2fb      	bcs.n	802213c <__hexnan+0xcc>
 8022144:	683b      	ldr	r3, [r7, #0]
 8022146:	b91b      	cbnz	r3, 8022150 <__hexnan+0xe0>
 8022148:	4547      	cmp	r7, r8
 802214a:	d128      	bne.n	802219e <__hexnan+0x12e>
 802214c:	2301      	movs	r3, #1
 802214e:	603b      	str	r3, [r7, #0]
 8022150:	2005      	movs	r0, #5
 8022152:	b007      	add	sp, #28
 8022154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022158:	3501      	adds	r5, #1
 802215a:	2d08      	cmp	r5, #8
 802215c:	f10b 0b01 	add.w	fp, fp, #1
 8022160:	dd06      	ble.n	8022170 <__hexnan+0x100>
 8022162:	4544      	cmp	r4, r8
 8022164:	d9c1      	bls.n	80220ea <__hexnan+0x7a>
 8022166:	2300      	movs	r3, #0
 8022168:	f844 3c04 	str.w	r3, [r4, #-4]
 802216c:	2501      	movs	r5, #1
 802216e:	3c04      	subs	r4, #4
 8022170:	6822      	ldr	r2, [r4, #0]
 8022172:	f000 000f 	and.w	r0, r0, #15
 8022176:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802217a:	6020      	str	r0, [r4, #0]
 802217c:	e7b5      	b.n	80220ea <__hexnan+0x7a>
 802217e:	2508      	movs	r5, #8
 8022180:	e7b3      	b.n	80220ea <__hexnan+0x7a>
 8022182:	9b01      	ldr	r3, [sp, #4]
 8022184:	2b00      	cmp	r3, #0
 8022186:	d0dd      	beq.n	8022144 <__hexnan+0xd4>
 8022188:	f1c3 0320 	rsb	r3, r3, #32
 802218c:	f04f 32ff 	mov.w	r2, #4294967295
 8022190:	40da      	lsrs	r2, r3
 8022192:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8022196:	4013      	ands	r3, r2
 8022198:	f846 3c04 	str.w	r3, [r6, #-4]
 802219c:	e7d2      	b.n	8022144 <__hexnan+0xd4>
 802219e:	3f04      	subs	r7, #4
 80221a0:	e7d0      	b.n	8022144 <__hexnan+0xd4>
 80221a2:	2004      	movs	r0, #4
 80221a4:	e7d5      	b.n	8022152 <__hexnan+0xe2>

080221a6 <__ascii_mbtowc>:
 80221a6:	b082      	sub	sp, #8
 80221a8:	b901      	cbnz	r1, 80221ac <__ascii_mbtowc+0x6>
 80221aa:	a901      	add	r1, sp, #4
 80221ac:	b142      	cbz	r2, 80221c0 <__ascii_mbtowc+0x1a>
 80221ae:	b14b      	cbz	r3, 80221c4 <__ascii_mbtowc+0x1e>
 80221b0:	7813      	ldrb	r3, [r2, #0]
 80221b2:	600b      	str	r3, [r1, #0]
 80221b4:	7812      	ldrb	r2, [r2, #0]
 80221b6:	1e10      	subs	r0, r2, #0
 80221b8:	bf18      	it	ne
 80221ba:	2001      	movne	r0, #1
 80221bc:	b002      	add	sp, #8
 80221be:	4770      	bx	lr
 80221c0:	4610      	mov	r0, r2
 80221c2:	e7fb      	b.n	80221bc <__ascii_mbtowc+0x16>
 80221c4:	f06f 0001 	mvn.w	r0, #1
 80221c8:	e7f8      	b.n	80221bc <__ascii_mbtowc+0x16>

080221ca <_realloc_r>:
 80221ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221ce:	4680      	mov	r8, r0
 80221d0:	4615      	mov	r5, r2
 80221d2:	460c      	mov	r4, r1
 80221d4:	b921      	cbnz	r1, 80221e0 <_realloc_r+0x16>
 80221d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221da:	4611      	mov	r1, r2
 80221dc:	f7fb bbaa 	b.w	801d934 <_malloc_r>
 80221e0:	b92a      	cbnz	r2, 80221ee <_realloc_r+0x24>
 80221e2:	f7fd fd91 	bl	801fd08 <_free_r>
 80221e6:	2400      	movs	r4, #0
 80221e8:	4620      	mov	r0, r4
 80221ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221ee:	f000 f86b 	bl	80222c8 <_malloc_usable_size_r>
 80221f2:	4285      	cmp	r5, r0
 80221f4:	4606      	mov	r6, r0
 80221f6:	d802      	bhi.n	80221fe <_realloc_r+0x34>
 80221f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80221fc:	d8f4      	bhi.n	80221e8 <_realloc_r+0x1e>
 80221fe:	4629      	mov	r1, r5
 8022200:	4640      	mov	r0, r8
 8022202:	f7fb fb97 	bl	801d934 <_malloc_r>
 8022206:	4607      	mov	r7, r0
 8022208:	2800      	cmp	r0, #0
 802220a:	d0ec      	beq.n	80221e6 <_realloc_r+0x1c>
 802220c:	42b5      	cmp	r5, r6
 802220e:	462a      	mov	r2, r5
 8022210:	4621      	mov	r1, r4
 8022212:	bf28      	it	cs
 8022214:	4632      	movcs	r2, r6
 8022216:	f7fc fef8 	bl	801f00a <memcpy>
 802221a:	4621      	mov	r1, r4
 802221c:	4640      	mov	r0, r8
 802221e:	f7fd fd73 	bl	801fd08 <_free_r>
 8022222:	463c      	mov	r4, r7
 8022224:	e7e0      	b.n	80221e8 <_realloc_r+0x1e>

08022226 <__ascii_wctomb>:
 8022226:	4603      	mov	r3, r0
 8022228:	4608      	mov	r0, r1
 802222a:	b141      	cbz	r1, 802223e <__ascii_wctomb+0x18>
 802222c:	2aff      	cmp	r2, #255	@ 0xff
 802222e:	d904      	bls.n	802223a <__ascii_wctomb+0x14>
 8022230:	228a      	movs	r2, #138	@ 0x8a
 8022232:	601a      	str	r2, [r3, #0]
 8022234:	f04f 30ff 	mov.w	r0, #4294967295
 8022238:	4770      	bx	lr
 802223a:	700a      	strb	r2, [r1, #0]
 802223c:	2001      	movs	r0, #1
 802223e:	4770      	bx	lr

08022240 <_raise_r>:
 8022240:	291f      	cmp	r1, #31
 8022242:	b538      	push	{r3, r4, r5, lr}
 8022244:	4605      	mov	r5, r0
 8022246:	460c      	mov	r4, r1
 8022248:	d904      	bls.n	8022254 <_raise_r+0x14>
 802224a:	2316      	movs	r3, #22
 802224c:	6003      	str	r3, [r0, #0]
 802224e:	f04f 30ff 	mov.w	r0, #4294967295
 8022252:	bd38      	pop	{r3, r4, r5, pc}
 8022254:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022256:	b112      	cbz	r2, 802225e <_raise_r+0x1e>
 8022258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802225c:	b94b      	cbnz	r3, 8022272 <_raise_r+0x32>
 802225e:	4628      	mov	r0, r5
 8022260:	f000 f830 	bl	80222c4 <_getpid_r>
 8022264:	4622      	mov	r2, r4
 8022266:	4601      	mov	r1, r0
 8022268:	4628      	mov	r0, r5
 802226a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802226e:	f000 b817 	b.w	80222a0 <_kill_r>
 8022272:	2b01      	cmp	r3, #1
 8022274:	d00a      	beq.n	802228c <_raise_r+0x4c>
 8022276:	1c59      	adds	r1, r3, #1
 8022278:	d103      	bne.n	8022282 <_raise_r+0x42>
 802227a:	2316      	movs	r3, #22
 802227c:	6003      	str	r3, [r0, #0]
 802227e:	2001      	movs	r0, #1
 8022280:	e7e7      	b.n	8022252 <_raise_r+0x12>
 8022282:	2100      	movs	r1, #0
 8022284:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022288:	4620      	mov	r0, r4
 802228a:	4798      	blx	r3
 802228c:	2000      	movs	r0, #0
 802228e:	e7e0      	b.n	8022252 <_raise_r+0x12>

08022290 <raise>:
 8022290:	4b02      	ldr	r3, [pc, #8]	@ (802229c <raise+0xc>)
 8022292:	4601      	mov	r1, r0
 8022294:	6818      	ldr	r0, [r3, #0]
 8022296:	f7ff bfd3 	b.w	8022240 <_raise_r>
 802229a:	bf00      	nop
 802229c:	20000148 	.word	0x20000148

080222a0 <_kill_r>:
 80222a0:	b538      	push	{r3, r4, r5, lr}
 80222a2:	4d07      	ldr	r5, [pc, #28]	@ (80222c0 <_kill_r+0x20>)
 80222a4:	2300      	movs	r3, #0
 80222a6:	4604      	mov	r4, r0
 80222a8:	4608      	mov	r0, r1
 80222aa:	4611      	mov	r1, r2
 80222ac:	602b      	str	r3, [r5, #0]
 80222ae:	f7e1 fdeb 	bl	8003e88 <_kill>
 80222b2:	1c43      	adds	r3, r0, #1
 80222b4:	d102      	bne.n	80222bc <_kill_r+0x1c>
 80222b6:	682b      	ldr	r3, [r5, #0]
 80222b8:	b103      	cbz	r3, 80222bc <_kill_r+0x1c>
 80222ba:	6023      	str	r3, [r4, #0]
 80222bc:	bd38      	pop	{r3, r4, r5, pc}
 80222be:	bf00      	nop
 80222c0:	200037a8 	.word	0x200037a8

080222c4 <_getpid_r>:
 80222c4:	f7e1 bdd8 	b.w	8003e78 <_getpid>

080222c8 <_malloc_usable_size_r>:
 80222c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80222cc:	1f18      	subs	r0, r3, #4
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	bfbc      	itt	lt
 80222d2:	580b      	ldrlt	r3, [r1, r0]
 80222d4:	18c0      	addlt	r0, r0, r3
 80222d6:	4770      	bx	lr

080222d8 <_init>:
 80222d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222da:	bf00      	nop
 80222dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222de:	bc08      	pop	{r3}
 80222e0:	469e      	mov	lr, r3
 80222e2:	4770      	bx	lr

080222e4 <_fini>:
 80222e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222e6:	bf00      	nop
 80222e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222ea:	bc08      	pop	{r3}
 80222ec:	469e      	mov	lr, r3
 80222ee:	4770      	bx	lr
